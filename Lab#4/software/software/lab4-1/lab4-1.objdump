
lab4-1.elf:     file format elf32-littlenios2
lab4-1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000ce9c memsz 0x0000ce9c flags r-x
    LOAD off    0x0000debc vaddr 0x0000cebc paddr 0x0000edd0 align 2**12
         filesz 0x00001f14 memsz 0x00001f14 flags rw-
    LOAD off    0x00010ce4 vaddr 0x00010ce4 paddr 0x00010ce4 align 2**12
         filesz 0x00000000 memsz 0x007a1770 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000c5b0  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000754  0000c768  0000c768  0000d768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f14  0000cebc  0000edd0  0000debc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          007a1a4a  00010ce4  00010ce4  00010ce4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000fdd0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d18  00000000  00000000  0000fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001f6c  00000000  00000000  00010b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000260cf  00000000  00000000  00012a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000078df  00000000  00000000  00038b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000133ac  00000000  00000000  0004042a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001fa4  00000000  00000000  000537d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022b4  00000000  00000000  0005577c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000061c0  00000000  00000000  00057a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0005dbf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000520  00000000  00000000  0005dc40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000623d0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000623d3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000623d6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000623d7  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000623d8  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000623dc  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000623e0  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000623e4  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000623ed  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000623f6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000623ff  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000026  00000000  00000000  0006240a  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ec8  00000000  00000000  00062430  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00105ea3  00000000  00000000  000672f8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
0000c768 l    d  .rodata	00000000 .rodata
0000cebc l    d  .rwdata	00000000 .rwdata
00010ce4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 filter.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
0000cbde l     O .rodata	00000010 C.74.2589
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00002b78 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000035d8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00004258 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000cfbc l     O .rwdata	00001060 JTAG_UART
0000e01c l     O .rwdata	00000030 AV_Config
0000e04c l     O .rwdata	00000030 Audio
0000e07c l     O .rwdata	0000002c Char_LCD_16x2
0000e0a8 l     O .rwdata	0000003c Ethernet
0000e0e4 l     O .rwdata	0000002c IrDA_UART
0000e110 l     O .rwdata	0000002c Expansion_JP1
0000e13c l     O .rwdata	0000002c Expansion_JP2
0000e168 l     O .rwdata	0000002c Green_LEDs
0000e194 l     O .rwdata	0000002c HEX3_HEX0
0000e1c0 l     O .rwdata	0000002c HEX7_HEX4
0000e1ec l     O .rwdata	0000002c Pushbuttons
0000e218 l     O .rwdata	0000002c Red_LEDs
0000e244 l     O .rwdata	0000002c Slider_Switches
0000e270 l     O .rwdata	00000038 PS2_Port
0000e2a8 l     O .rwdata	0000002c Serial_Port
0000e2d4 l     O .rwdata	00000034 USB
0000e308 l     O .rwdata	00000048 VGA_Char_Buffer
0000e350 l     O .rwdata	00000054 VGA_Pixel_Buffer
0000e3a4 l     O .rwdata	0000002c SD_Card
000049fc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00004c34 l     F .text	0000022c altera_avalon_jtag_uart_irq
00004e60 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000054dc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00008fc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009044 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009124 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009310 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000944c l     F .text	000000dc alt_file_locked
000096b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000e578 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000a490 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000a874 l     F .text	00000058 std
0000a980 l     F .text	00000008 __fp_lock
0000a988 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000bf64 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000c098 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000c1b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000c308 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000c4c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000edcc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000c704 l     F .text	00000060 alt_get_errno
0000be04 g     F .text	00000070 _isatty_r
000042c4 g     F .text	0000006c alt_main
00008478 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00000c6c g     F .text	00000060 interval_timer_ISR
00006cbc g     F .text	00000058 alt_up_ps2_disable_read_interrupt
007b21c4 g     O .bss	00000100 alt_irq
0000be74 g     F .text	00000078 _lseek_r
0000edd0 g       *ABS*	00000000 __flash_rwdata_start
00005e60 g     F .text	00000034 alt_up_character_lcd_send_cmd
00010cec g     O .bss	00000001 byte2
000023e4 g     F .text	00000680 __divdi3
00005850 g     F .text	00000070 alt_up_audio_read_fifo_avail
007b2454 g       *ABS*	00000000 __alt_heap_start
000058c0 g     F .text	00000070 alt_up_audio_record_r
00010ced g     O .bss	00000001 byte3
0000ba40 g     F .text	00000068 __sseek
0000a8dc g     F .text	000000a4 __sinit
0000a0d4 g     F .text	00000130 __swbuf_r
0000769c g     F .text	00000114 alt_up_char_buffer_string
00006ad4 g     F .text	00000034 read_CE_bit
00001f70 g     F .text	00000100 run_command
0000a9dc g     F .text	00000068 __sfmoreglue
0000c388 g     F .text	00000020 __malloc_unlock
00006e68 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
000073a4 g     F .text	00000090 alt_up_rs232_read_fd
000075cc g     F .text	000000d0 alt_up_char_buffer_draw
000057c8 g     F .text	00000088 alt_up_audio_reset_audio_core
00010cee g     O .bss	00000001 byte1
0000a9cc g     F .text	00000010 _cleanup
00001b00 g     F .text	00000210 setMouseBounds
0000cebc g     O .rwdata	00000100 cursor_shape
0000784c g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
00005de4 g     F .text	0000007c get_DDRAM_addr
0000ed8c g     O .rwdata	00000004 right_addr
0000780c g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000bd90 g     F .text	00000074 _fstat_r
00010d2c g     O .bss	00000004 errno
000035a0 g     F .text	00000038 __make_dp
0000578c g     F .text	0000003c alt_up_audio_write_interrupt_pending
00010d1c g     O .bss	00000004 alt_argv
00016d80 g       *ABS*	00000000 _gp
00009914 g     F .text	00000030 usleep
000079ec g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
0000e3f8 g     O .rwdata	00000180 alt_fd_list
00010ce4 g     O .bss	00000004 eq
0000924c g     F .text	00000094 alt_find_dev
00003ee0 g     F .text	000000a0 memcpy
00005ff8 g     F .text	0000004c alt_up_character_lcd_write_fd
000077b0 g     F .text	0000005c alt_up_char_buffer_clear
0000a9c0 g     F .text	0000000c _cleanup_r
000093d4 g     F .text	00000078 alt_io_redirect
0000c768 g       *ABS*	00000000 __DTOR_END__
00006960 g     F .text	00000090 alt_up_irda_write_fd
00007330 g     F .text	00000074 alt_up_rs232_read_data
0000ed90 g     O .rwdata	00000004 left_addr
00010cef g     O .bss	00000001 valid_byte3
00005d24 g     F .text	00000060 alt_up_audio_read_fifo_head
00007a9c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00006748 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
00005078 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003714 g     F .text	00000008 __udivsi3
0000c0f8 g     F .text	000000c0 isatty
000064a0 g     F .text	00000044 alt_up_ethernet_reg_write
00008128 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
000066f0 g     F .text	00000058 alt_up_irda_disable_read_interrupt
00002340 g     F .text	000000a4 __fixunsdfsi
00010cf0 g     O .bss	00000001 cnt
00009c68 g     F .text	00000090 alt_icache_flush
00010d30 g     O .bss	00000004 __malloc_top_pad
0000b9c8 g     F .text	00000070 _sbrk_r
003e1804 g     O .bss	00000020 up_dev
0000890c g     F .text	000000d0 helper_plot_pixel
00010cf1 g     O .bss	00000001 flag_denoise
0000beec g     F .text	00000078 _read_r
00010cf2 g     O .bss	00000001 command
0000edac g     O .rwdata	00000004 alt_max_fd
00007298 g     F .text	00000050 alt_up_rs232_check_parity
00005d84 g     F .text	00000060 alt_up_audio_write_fifo_head
00006314 g     F .text	00000110 alt_up_ethernet_init
00003ce0 g     F .text	00000138 __unpack_d
0000bc6c g     F .text	00000110 _fclose_r
00006b08 g     F .text	00000034 read_num_bytes_available
0000a840 g     F .text	00000034 fflush
00010d34 g     O .bss	00000004 __malloc_max_sbrked_mem
00004018 g     F .text	000001c0 alt_irq_register
00006a70 g     F .text	00000034 read_RI_bit
00002a64 g     F .text	00000054 __extendsfdf2
00003008 g     F .text	00000074 __adddf3
00007ad0 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0000c218 g     F .text	000000f0 lseek
0000edc0 g     O .rwdata	00000004 _global_impure_ptr
007b2454 g       *ABS*	00000000 __bss_end
00007c34 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00009808 g     F .text	0000010c alt_tick
003e1824 g     O .bss	001e8480 r_buf_Denoise
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
000055d8 g     F .text	00000040 alt_up_audio_open_dev
00006b70 g     F .text	0000002c read_data_byte
0000a9a8 g     F .text	00000018 __fp_lock_all
000018b4 g     F .text	0000024c mouse_color
00005a14 g     F .text	00000070 alt_up_audio_play_r
00009770 g     F .text	00000098 alt_alarm_stop
00006aa4 g     F .text	00000030 read_RE_bit
00010d14 g     O .bss	00000004 alt_irq_active
00006784 g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
0000e3d0 g     O .rwdata	00000028 alt_dev_null
00003904 g     F .text	000000c8 __unpack_f
000062e0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00010cf3 g     O .bss	00000001 flag_mouse
00010d10 g     O .bss	00000002 y_axis_mouse
00006a30 g     F .text	00000040 alt_up_parallel_port_open_dev
00006d14 g     F .text	00000078 alt_up_ps2_write_data_byte
00009028 g     F .text	0000001c alt_dcache_flush_all
00008848 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
000034c8 g     F .text	000000d8 __fixdfsi
007b2124 g     O .bss	000000a0 rects
0000edd0 g       *ABS*	00000000 __ram_rwdata_end
00002070 g     F .text	00000180 command_det
0000eda4 g     O .rwdata	00000008 alt_dev_list
0000c5e4 g     F .text	00000120 write
00009ebc g     F .text	000000e8 _putc_r
000089dc g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0000cebc g       *ABS*	00000000 __ram_rodata_end
0000bfc4 g     F .text	000000d4 fstat
00007434 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000371c g     F .text	00000008 __umodsi3
0000c768 g     O .rodata	00000100 coef
007b2454 g       *ABS*	00000000 end
00007088 g     F .text	000000a8 alt_up_ps2_write_fd
000037a4 g     F .text	00000160 __pack_f
000067c4 g     F .text	00000050 alt_up_irda_check_parity
00007508 g     F .text	00000084 alt_up_char_buffer_init
00010f04 g     O .bss	001e8480 r_buf
00004b7c g     F .text	000000b8 altera_avalon_jtag_uart_init
00010ce8 g     O .bss	00000002 flag_play
0000c764 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00005550 g     F .text	00000088 alt_avalon_timer_sc_init
00003724 g     F .text	00000080 __clzsi2
0000529c g     F .text	00000240 altera_avalon_jtag_uart_write
0000a8cc g     F .text	00000004 __sfp_lock_acquire
00005f08 g     F .text	00000078 alt_up_character_lcd_write
0000ac60 g     F .text	00000314 _free_r
00004330 g     F .text	00000258 alt_printf
0000a494 g     F .text	000001b0 __call_exitprocs
0000edc8 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00010d24 g     O .bss	00000004 _alt_tick_rate
00005bf8 g     F .text	0000012c alt_up_audio_write_fifo
00010d28 g     O .bss	00000004 _alt_nticks
0000c3a8 g     F .text	00000120 read
000045fc g     F .text	00000400 alt_sys_init
0000616c g     F .text	000000b0 alt_up_character_lcd_shift_display
00005af4 g     F .text	00000104 alt_up_audio_read_fifo
00010cea g     O .bss	00000002 flag_is_playing
0000a35c g     F .text	00000134 __register_exitproc
00010d12 g     O .bss	00000002 x_axis_mouse
00005700 g     F .text	00000050 alt_up_audio_disable_write_interrupt
00006f94 g     F .text	00000058 alt_up_ps2_clear_fifo
00007258 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00000a98 g     F .text	000001d4 filter
0000621c g     F .text	00000090 alt_up_character_lcd_erase_pos
00004f10 g     F .text	00000074 altera_avalon_jtag_uart_close
0000cebc g       *ABS*	00000000 __ram_rwdata_start
00010cf4 g     O .bss	00000001 valid_byte2
0000c768 g       *ABS*	00000000 __ram_rodata_start
00010edc g     O .bss	00000028 __malloc_current_mallinfo
0000ed94 g     O .rwdata	00000004 out_addr
00004a34 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00009bb0 g     F .text	000000b8 alt_get_fd
00009964 g     F .text	0000012c alt_busy_sleep
00003e18 g     F .text	000000c8 __fpcmp_parts_d
0000bbfc g     F .text	00000070 _close_r
00010ddc g     O .bss	00000100 mem
000056b4 g     F .text	0000004c alt_up_audio_enable_write_interrupt
00009d44 g     F .text	00000074 memcmp
00004ae4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010d3c g     O .bss	00000050 means
007b2454 g       *ABS*	00000000 __alt_stack_base
00004b2c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000669c g     F .text	00000054 alt_up_irda_enable_read_interrupt
0000a220 g     F .text	0000013c __swsetup_r
00005664 g     F .text	00000050 alt_up_audio_disable_read_interrupt
0000aa44 g     F .text	000000f0 __sfp
0000e978 g     O .rwdata	00000408 __malloc_av_
0000a8d8 g     F .text	00000004 __sinit_lock_release
0000307c g     F .text	000003c4 __muldf3
0000bb24 g     F .text	00000060 __sread
000071c4 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00009a90 g     F .text	00000120 alt_find_file
00009070 g     F .text	000000b4 alt_dev_llist_insert
0000c368 g     F .text	00000020 __malloc_lock
0000c528 g     F .text	000000bc sbrk
00000714 g     F .text	00000384 take_mean
0000a644 g     F .text	000001fc _fflush_r
00010ce4 g       *ABS*	00000000 __bss_start
00003f80 g     F .text	00000098 memset
00000ccc g     F .text	00000be8 main
000059a0 g     F .text	00000074 alt_up_audio_write_fifo_space
00010d20 g     O .bss	00000004 alt_envp
00010d38 g     O .bss	00000004 __malloc_max_total_mem
00007a44 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0000758c g     F .text	00000040 alt_up_char_buffer_open_dev
00004a8c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000a204 g     F .text	0000001c __swbuf
000060bc g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0000ba38 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
0000bd7c g     F .text	00000014 fclose
00006f18 g     F .text	0000007c alt_up_ps2_read_data_byte
00010cf8 g     O .bss	00000004 timeout
007b22c4 g     O .bss	00000190 _atexit0
0000b288 g     F .text	00000740 _malloc_r
0000edb0 g     O .rwdata	00000004 alt_errno
0000b03c g     F .text	000000b8 _fwalk
00006814 g     F .text	00000048 alt_up_irda_write_data
00007130 g     F .text	00000040 alt_up_ps2_open_dev
00009db8 g     F .text	00000104 putc
00003654 g     F .text	00000060 __divsi3
0000cbf0 g     O .rodata	00000014 __thenan_df
00005ec8 g     F .text	00000040 alt_up_character_lcd_open_dev
0000ab34 g     F .text	0000012c _malloc_trim_r
00006c68 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0000c768 g       *ABS*	00000000 __CTOR_END__
00005e94 g     F .text	00000034 alt_up_character_lcd_init
00009fa4 g     F .text	000000bc strcmp
0000c768 g       *ABS*	00000000 __flash_rodata_start
005c9ca4 g     O .bss	001e8480 l_buf_Denoise
0000c768 g       *ABS*	00000000 __DTOR_LIST__
000074c8 g     F .text	00000040 alt_up_rs232_open_dev
000045c8 g     F .text	00000034 alt_irq_init
00009710 g     F .text	00000060 alt_release_fd
00006b3c g     F .text	00000034 read_data_valid
000062ac g     F .text	00000034 alt_up_character_lcd_cursor_off
0000cc04 g     O .rodata	00000100 __clz_tab
00009cf8 g     F .text	00000014 atexit
00006dfc g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
0000bb84 g     F .text	00000078 _write_r
000021f0 g     F .text	000000b8 pushbutton_ISR
00010d08 g     O .bss	00000002 all_drawn
000001f4 g     F .text	0000018c PS2_ISR
0000edbc g     O .rwdata	00000004 _impure_ptr
00010cfc g     O .bss	00000004 buf_index_play
00010d18 g     O .bss	00000004 alt_argc
000091e8 g     F .text	00000064 _do_dtors
0000ed88 g     O .rwdata	00000004 config_reg
00000020 g       .exceptions	00000000 alt_irq_entry
0000a990 g     F .text	00000018 __fp_unlock_all
00010d0c g     O .bss	00000004 rect_th
0000ed9c g     O .rwdata	00000008 alt_fs_list
00007170 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
00005930 g     F .text	00000070 alt_up_audio_record_l
000072e8 g     F .text	00000048 alt_up_rs232_write_data
000064e4 g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000edd0 g       *ABS*	00000000 _edata
007b2454 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00004f84 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000380 g     F .text	00000394 audio_ISR
001f9384 g     O .bss	001e8480 l_buf
00005a84 g     F .text	00000070 alt_up_audio_play_l
0000baa8 g     F .text	0000007c __swrite
0000edc4 g     O .rwdata	00000004 __malloc_trim_threshold
00009944 g     F .text	00000020 altera_nios2_qsys_irq_init
00009d0c g     F .text	00000038 exit
0000685c g     F .text	00000074 alt_up_irda_read_data
0000af74 g     F .text	000000c8 _fwalk_reent
00002ab8 g     F .text	000000c0 __floatunsisf
00006b9c g     F .text	000000cc alt_up_ps2_init
000036b4 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000a8d0 g     F .text	00000004 __sfp_lock_release
00005f80 g     F .text	00000078 alt_up_character_lcd_string
000069f0 g     F .text	00000040 alt_up_irda_open_dev
0000ed84 g     O .rwdata	00000004 amp_cal
0000ed80 g     O .rwdata	00000002 new_record_flag
0000bfa4 g     F .text	00000020 _exit
00008d78 g     F .text	00000154 alt_alarm_start
000022a8 g     F .text	00000098 __muldi3
0000b0f4 g     F .text	00000194 __smakebuf_r
00006d8c g     F .text	00000070 alt_up_ps2_wait_for_ack
0000a060 g     F .text	00000074 strlen
00006424 g     F .text	00000040 alt_up_ethernet_open_dev
00009528 g     F .text	00000188 open
00003440 g     F .text	00000088 __gedf2
00004588 g     F .text	00000040 alt_putchar
00010d00 g     O .bss	00000004 buf_index_record
00010d8c g     O .bss	00000050 heights
000092e0 g     F .text	00000030 alt_icache_flush_all
000065c4 g     F .text	000000d8 alt_up_ethernet_phy_reg_write
00006044 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0000ed98 g     O .rwdata	00000004 alt_priority_mask
00006fec g     F .text	0000009c alt_up_ps2_read_fd
00002f88 g     F .text	00000080 __subdf3
000068d0 g     F .text	00000090 alt_up_irda_read_fd
0000edb4 g     O .rwdata	00000008 alt_alarm_list
00009184 g     F .text	00000064 _do_ctors
0000721c g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00001d10 g     F .text	00000260 Mouse_ISR
00008ecc g     F .text	000000fc close
00010d04 g     O .bss	00000001 valid_byte1
000041d8 g     F .text	00000080 alt_load
00006464 g     F .text	0000003c alt_up_ethernet_reg_read
00005618 g     F .text	0000004c alt_up_audio_enable_read_interrupt
000039cc g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0000a8d4 g     F .text	00000004 __sinit_lock_acquire
00005750 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c01ef4 	movhi	r3,123
 134:	18c87104 	addi	r3,r3,8644
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c01ef4 	movhi	r3,123
 14c:	18c87104 	addi	r3,r3,8644
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d69b6014 	ori	gp,gp,28032
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	10833914 	ori	r2,r2,3300

    movhi r3, %hi(__bss_end)
     1d0:	00c01ef4 	movhi	r3,123
    ori r3, r3, %lo(__bss_end)
     1d4:	18c91514 	ori	r3,r3,9300

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00041d80 	call	41d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00042c40 	call	42c4 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * This routine checks which KEY has been pressed. If it is KEY1 or KEY2, it writes this 
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/
void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000317 	ldw	r4,12(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	0006f180 	call	6f18 <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000521e 	bne	r2,zero,36c <PS2_ISR+0x178>
	{
		if(cnt >= 1) cnt++;
     224:	00800074 	movhi	r2,1
     228:	10833c04 	addi	r2,r2,3312
     22c:	10800003 	ldbu	r2,0(r2)
     230:	10803fcc 	andi	r2,r2,255
     234:	1005003a 	cmpeq	r2,r2,zero
     238:	1000081e 	bne	r2,zero,25c <PS2_ISR+0x68>
     23c:	00800074 	movhi	r2,1
     240:	10833c04 	addi	r2,r2,3312
     244:	10800003 	ldbu	r2,0(r2)
     248:	10800044 	addi	r2,r2,1
     24c:	1007883a 	mov	r3,r2
     250:	00800074 	movhi	r2,1
     254:	10833c04 	addi	r2,r2,3312
     258:	10c00005 	stb	r3,0(r2)
		
		/* allows save the last three bytes of data */
		byte1 = byte2;
     25c:	00800074 	movhi	r2,1
     260:	10833b04 	addi	r2,r2,3308
     264:	10c00003 	ldbu	r3,0(r2)
     268:	00800074 	movhi	r2,1
     26c:	10833b84 	addi	r2,r2,3310
     270:	10c00005 	stb	r3,0(r2)
		byte2 = byte3;
     274:	00800074 	movhi	r2,1
     278:	10833b44 	addi	r2,r2,3309
     27c:	10c00003 	ldbu	r3,0(r2)
     280:	00800074 	movhi	r2,1
     284:	10833b04 	addi	r2,r2,3308
     288:	10c00005 	stb	r3,0(r2)
		byte3 = PS2_data;
     28c:	e0fffd03 	ldbu	r3,-12(fp)
     290:	00800074 	movhi	r2,1
     294:	10833b44 	addi	r2,r2,3309
     298:	10c00005 	stb	r3,0(r2)
		if(cnt == 4){
     29c:	00800074 	movhi	r2,1
     2a0:	10833c04 	addi	r2,r2,3312
     2a4:	10800003 	ldbu	r2,0(r2)
     2a8:	10803fcc 	andi	r2,r2,255
     2ac:	10800118 	cmpnei	r2,r2,4
     2b0:	10001a1e 	bne	r2,zero,31c <PS2_ISR+0x128>
			cnt = 1;
     2b4:	00c00074 	movhi	r3,1
     2b8:	18c33c04 	addi	r3,r3,3312
     2bc:	00800044 	movi	r2,1
     2c0:	18800005 	stb	r2,0(r3)
			valid_byte1 = byte1;
     2c4:	00800074 	movhi	r2,1
     2c8:	10833b84 	addi	r2,r2,3310
     2cc:	10c00003 	ldbu	r3,0(r2)
     2d0:	00800074 	movhi	r2,1
     2d4:	10834104 	addi	r2,r2,3332
     2d8:	10c00005 	stb	r3,0(r2)
			valid_byte2 = byte2;
     2dc:	00800074 	movhi	r2,1
     2e0:	10833b04 	addi	r2,r2,3308
     2e4:	10c00003 	ldbu	r3,0(r2)
     2e8:	00800074 	movhi	r2,1
     2ec:	10833d04 	addi	r2,r2,3316
     2f0:	10c00005 	stb	r3,0(r2)
			valid_byte3 = byte3;
     2f4:	00800074 	movhi	r2,1
     2f8:	10833b44 	addi	r2,r2,3309
     2fc:	10c00003 	ldbu	r3,0(r2)
     300:	00800074 	movhi	r2,1
     304:	10833bc4 	addi	r2,r2,3311
     308:	10c00005 	stb	r3,0(r2)
			flag_mouse = 1;
     30c:	00c00074 	movhi	r3,1
     310:	18c33cc4 	addi	r3,r3,3315
     314:	00800044 	movi	r2,1
     318:	18800005 	stb	r2,0(r3)
		}
		if ( (byte2 == (unsigned char) 0xAA) && (byte3 == (unsigned char) 0x00) ){
     31c:	00800074 	movhi	r2,1
     320:	10833b04 	addi	r2,r2,3308
     324:	10800003 	ldbu	r2,0(r2)
     328:	10803fcc 	andi	r2,r2,255
     32c:	10802a98 	cmpnei	r2,r2,170
     330:	10000e1e 	bne	r2,zero,36c <PS2_ISR+0x178>
     334:	00800074 	movhi	r2,1
     338:	10833b44 	addi	r2,r2,3309
     33c:	10800003 	ldbu	r2,0(r2)
     340:	10803fcc 	andi	r2,r2,255
     344:	1004c03a 	cmpne	r2,r2,zero
     348:	1000081e 	bne	r2,zero,36c <PS2_ISR+0x178>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte_with_ack (up_dev->PS2_dev, (unsigned char) 0xF4);
     34c:	e0bffe17 	ldw	r2,-8(fp)
     350:	11000317 	ldw	r4,12(r2)
     354:	01403d04 	movi	r5,244
     358:	0006dfc0 	call	6dfc <alt_up_ps2_write_data_byte_with_ack>
			cnt = 1; // enable cnt
     35c:	00c00074 	movhi	r3,1
     360:	18c33c04 	addi	r3,r3,3312
     364:	00800044 	movi	r2,1
     368:	18800005 	stb	r2,0(r3)
			
		}
	}
	return;
}
     36c:	e037883a 	mov	sp,fp
     370:	dfc00117 	ldw	ra,4(sp)
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00204 	addi	sp,sp,8
     37c:	f800283a 	ret

00000380 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     380:	defff904 	addi	sp,sp,-28
     384:	dfc00615 	stw	ra,24(sp)
     388:	df000515 	stw	fp,20(sp)
     38c:	df000504 	addi	fp,sp,20
     390:	e13ffe15 	stw	r4,-8(fp)
     394:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     398:	e0bffe17 	ldw	r2,-8(fp)
     39c:	11000517 	ldw	r4,20(r2)
     3a0:	00057500 	call	5750 <alt_up_audio_read_interrupt_pending>
     3a4:	1005003a 	cmpeq	r2,r2,zero
     3a8:	1000461e 	bne	r2,zero,4c4 <audio_ISR+0x144>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     3ac:	e0bffe17 	ldw	r2,-8(fp)
     3b0:	10800117 	ldw	r2,4(r2)
     3b4:	10800a17 	ldw	r2,40(r2)
     3b8:	1007883a 	mov	r3,r2
     3bc:	00800044 	movi	r2,1
     3c0:	18800035 	stwio	r2,0(r3)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     3c4:	00800074 	movhi	r2,1
     3c8:	10834004 	addi	r2,r2,3328
     3cc:	10c00017 	ldw	r3,0(r2)
     3d0:	00800234 	movhi	r2,8
     3d4:	10a847c4 	addi	r2,r2,-24289
     3d8:	10c03a16 	blt	r2,r3,4c4 <audio_ISR+0x144>
		{
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(r_buf[buf_index_record]), 
     3dc:	e0bffe17 	ldw	r2,-8(fp)
     3e0:	11000517 	ldw	r4,20(r2)
     3e4:	00800074 	movhi	r2,1
     3e8:	10834004 	addi	r2,r2,3328
     3ec:	10800017 	ldw	r2,0(r2)
     3f0:	1085883a 	add	r2,r2,r2
     3f4:	1085883a 	add	r2,r2,r2
     3f8:	1007883a 	mov	r3,r2
     3fc:	00800074 	movhi	r2,1
     400:	1083c104 	addi	r2,r2,3844
     404:	188b883a 	add	r5,r3,r2
     408:	00800074 	movhi	r2,1
     40c:	10834004 	addi	r2,r2,3328
     410:	10c00017 	ldw	r3,0(r2)
     414:	00800234 	movhi	r2,8
     418:	10a84804 	addi	r2,r2,-24288
     41c:	10cdc83a 	sub	r6,r2,r3
     420:	00058c00 	call	58c0 <alt_up_audio_record_r>
     424:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(l_buf[buf_index_record]), 
     428:	e0bffe17 	ldw	r2,-8(fp)
     42c:	11000517 	ldw	r4,20(r2)
     430:	00800074 	movhi	r2,1
     434:	10834004 	addi	r2,r2,3328
     438:	10800017 	ldw	r2,0(r2)
     43c:	1085883a 	add	r2,r2,r2
     440:	1085883a 	add	r2,r2,r2
     444:	1007883a 	mov	r3,r2
     448:	00800834 	movhi	r2,32
     44c:	10a4e104 	addi	r2,r2,-27772
     450:	188b883a 	add	r5,r3,r2
     454:	e1bffd17 	ldw	r6,-12(fp)
     458:	00059300 	call	5930 <alt_up_audio_record_l>
				num_read);
			buf_index_record += num_read;
     45c:	00800074 	movhi	r2,1
     460:	10834004 	addi	r2,r2,3328
     464:	10c00017 	ldw	r3,0(r2)
     468:	e0bffd17 	ldw	r2,-12(fp)
     46c:	1887883a 	add	r3,r3,r2
     470:	00800074 	movhi	r2,1
     474:	10834004 	addi	r2,r2,3328
     478:	10c00015 	stw	r3,0(r2)

			if (buf_index_record == BUF_SIZE)
     47c:	00800074 	movhi	r2,1
     480:	10834004 	addi	r2,r2,3328
     484:	10c00017 	ldw	r3,0(r2)
     488:	00800234 	movhi	r2,8
     48c:	10a84804 	addi	r2,r2,-24288
     490:	18800c1e 	bne	r3,r2,4c4 <audio_ISR+0x144>
			{
				// done recording
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     494:	e0bffe17 	ldw	r2,-8(fp)
     498:	10800117 	ldw	r2,4(r2)
     49c:	10800a17 	ldw	r2,40(r2)
     4a0:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     4a4:	e0bffe17 	ldw	r2,-8(fp)
     4a8:	11000517 	ldw	r4,20(r2)
     4ac:	00056640 	call	5664 <alt_up_audio_disable_read_interrupt>
				take_mean();
     4b0:	00007140 	call	714 <take_mean>
				new_record_flag = 1;
     4b4:	00c00074 	movhi	r3,1
     4b8:	18fb6004 	addi	r3,r3,-4736
     4bc:	00800044 	movi	r2,1
     4c0:	1880000d 	sth	r2,0(r3)
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     4c4:	e0bffe17 	ldw	r2,-8(fp)
     4c8:	11000517 	ldw	r4,20(r2)
     4cc:	000578c0 	call	578c <alt_up_audio_write_interrupt_pending>
     4d0:	1005003a 	cmpeq	r2,r2,zero
     4d4:	10008a1e 	bne	r2,zero,700 <audio_ISR+0x380>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[1] on
     4d8:	e0bffe17 	ldw	r2,-8(fp)
     4dc:	10800117 	ldw	r2,4(r2)
     4e0:	10800a17 	ldw	r2,40(r2)
     4e4:	1007883a 	mov	r3,r2
     4e8:	00800084 	movi	r2,2
     4ec:	18800035 	stwio	r2,0(r3)

		
		// output data until the buffer is empty 
		if (buf_index_play < BUF_SIZE)
     4f0:	00800074 	movhi	r2,1
     4f4:	10833f04 	addi	r2,r2,3324
     4f8:	10c00017 	ldw	r3,0(r2)
     4fc:	00800234 	movhi	r2,8
     500:	10a847c4 	addi	r2,r2,-24289
     504:	10c07e16 	blt	r2,r3,700 <audio_ISR+0x380>
		{
			flag_is_playing = 1;
     508:	00c00074 	movhi	r3,1
     50c:	18c33a84 	addi	r3,r3,3306
     510:	00800044 	movi	r2,1
     514:	1880000d 	sth	r2,0(r3)
			if(!flag_denoise){
     518:	00800074 	movhi	r2,1
     51c:	10833c44 	addi	r2,r2,3313
     520:	10800003 	ldbu	r2,0(r2)
     524:	10803fcc 	andi	r2,r2,255
     528:	1004c03a 	cmpne	r2,r2,zero
     52c:	1000291e 	bne	r2,zero,5d4 <audio_ISR+0x254>
				num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf[buf_index_play]), 
     530:	e0bffe17 	ldw	r2,-8(fp)
     534:	11000517 	ldw	r4,20(r2)
     538:	00800074 	movhi	r2,1
     53c:	10833f04 	addi	r2,r2,3324
     540:	10800017 	ldw	r2,0(r2)
     544:	1085883a 	add	r2,r2,r2
     548:	1085883a 	add	r2,r2,r2
     54c:	1007883a 	mov	r3,r2
     550:	00800074 	movhi	r2,1
     554:	1083c104 	addi	r2,r2,3844
     558:	188b883a 	add	r5,r3,r2
     55c:	00800074 	movhi	r2,1
     560:	10833f04 	addi	r2,r2,3324
     564:	10c00017 	ldw	r3,0(r2)
     568:	00800234 	movhi	r2,8
     56c:	10a84804 	addi	r2,r2,-24288
     570:	10cdc83a 	sub	r6,r2,r3
     574:	0005a140 	call	5a14 <alt_up_audio_play_r>
     578:	e0bffc15 	stw	r2,-16(fp)
					BUF_SIZE - buf_index_play);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf[buf_index_play]), 
     57c:	e0bffe17 	ldw	r2,-8(fp)
     580:	11000517 	ldw	r4,20(r2)
     584:	00800074 	movhi	r2,1
     588:	10833f04 	addi	r2,r2,3324
     58c:	10800017 	ldw	r2,0(r2)
     590:	1085883a 	add	r2,r2,r2
     594:	1085883a 	add	r2,r2,r2
     598:	1007883a 	mov	r3,r2
     59c:	00800834 	movhi	r2,32
     5a0:	10a4e104 	addi	r2,r2,-27772
     5a4:	188b883a 	add	r5,r3,r2
     5a8:	e1bffc17 	ldw	r6,-16(fp)
     5ac:	0005a840 	call	5a84 <alt_up_audio_play_l>
					num_written);
				buf_index_play += num_written;
     5b0:	00800074 	movhi	r2,1
     5b4:	10833f04 	addi	r2,r2,3324
     5b8:	10c00017 	ldw	r3,0(r2)
     5bc:	e0bffc17 	ldw	r2,-16(fp)
     5c0:	1887883a 	add	r3,r3,r2
     5c4:	00800074 	movhi	r2,1
     5c8:	10833f04 	addi	r2,r2,3324
     5cc:	10c00015 	stw	r3,0(r2)
     5d0:	00002e06 	br	68c <audio_ISR+0x30c>
			}
			else if(flag_denoise){
     5d4:	00800074 	movhi	r2,1
     5d8:	10833c44 	addi	r2,r2,3313
     5dc:	10800003 	ldbu	r2,0(r2)
     5e0:	10803fcc 	andi	r2,r2,255
     5e4:	1005003a 	cmpeq	r2,r2,zero
     5e8:	1000281e 	bne	r2,zero,68c <audio_ISR+0x30c>
				num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf_Denoise[buf_index_play]), 
     5ec:	e0bffe17 	ldw	r2,-8(fp)
     5f0:	11000517 	ldw	r4,20(r2)
     5f4:	00800074 	movhi	r2,1
     5f8:	10833f04 	addi	r2,r2,3324
     5fc:	10800017 	ldw	r2,0(r2)
     600:	1085883a 	add	r2,r2,r2
     604:	1085883a 	add	r2,r2,r2
     608:	1007883a 	mov	r3,r2
     60c:	00800fb4 	movhi	r2,62
     610:	10860904 	addi	r2,r2,6180
     614:	188b883a 	add	r5,r3,r2
     618:	00800074 	movhi	r2,1
     61c:	10833f04 	addi	r2,r2,3324
     620:	10c00017 	ldw	r3,0(r2)
     624:	00800234 	movhi	r2,8
     628:	10a84804 	addi	r2,r2,-24288
     62c:	10cdc83a 	sub	r6,r2,r3
     630:	0005a140 	call	5a14 <alt_up_audio_play_r>
     634:	e0bffc15 	stw	r2,-16(fp)
					BUF_SIZE - buf_index_play);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf_Denoise[buf_index_play]), 
     638:	e0bffe17 	ldw	r2,-8(fp)
     63c:	11000517 	ldw	r4,20(r2)
     640:	00800074 	movhi	r2,1
     644:	10833f04 	addi	r2,r2,3324
     648:	10800017 	ldw	r2,0(r2)
     64c:	1085883a 	add	r2,r2,r2
     650:	1085883a 	add	r2,r2,r2
     654:	1007883a 	mov	r3,r2
     658:	00801774 	movhi	r2,93
     65c:	10a72904 	addi	r2,r2,-25436
     660:	188b883a 	add	r5,r3,r2
     664:	e1bffc17 	ldw	r6,-16(fp)
     668:	0005a840 	call	5a84 <alt_up_audio_play_l>
					num_written);
				buf_index_play += num_written;
     66c:	00800074 	movhi	r2,1
     670:	10833f04 	addi	r2,r2,3324
     674:	10c00017 	ldw	r3,0(r2)
     678:	e0bffc17 	ldw	r2,-16(fp)
     67c:	1887883a 	add	r3,r3,r2
     680:	00800074 	movhi	r2,1
     684:	10833f04 	addi	r2,r2,3324
     688:	10c00015 	stw	r3,0(r2)
			}
			if(buf_index_play>=eq){
     68c:	00800074 	movhi	r2,1
     690:	10833f04 	addi	r2,r2,3324
     694:	10c00017 	ldw	r3,0(r2)
     698:	d0a7d917 	ldw	r2,-24732(gp)
     69c:	18800716 	blt	r3,r2,6bc <audio_ISR+0x33c>
				flag_play = 1;
     6a0:	00c00074 	movhi	r3,1
     6a4:	18c33a04 	addi	r3,r3,3304
     6a8:	00800044 	movi	r2,1
     6ac:	1880000d 	sth	r2,0(r3)
				eq += BUF_SIZE / N;
     6b0:	d0a7d917 	ldw	r2,-24732(gp)
     6b4:	10986a04 	addi	r2,r2,25000
     6b8:	d0a7d915 	stw	r2,-24732(gp)
			}
			if (buf_index_play == BUF_SIZE)
     6bc:	00800074 	movhi	r2,1
     6c0:	10833f04 	addi	r2,r2,3324
     6c4:	10c00017 	ldw	r3,0(r2)
     6c8:	00800234 	movhi	r2,8
     6cc:	10a84804 	addi	r2,r2,-24288
     6d0:	18800b1e 	bne	r3,r2,700 <audio_ISR+0x380>
			{
				// done playback
				eq = 0;
     6d4:	d027d915 	stw	zero,-24732(gp)
				flag_is_playing = 0;
     6d8:	00800074 	movhi	r2,1
     6dc:	10833a84 	addi	r2,r2,3306
     6e0:	1000000d 	sth	zero,0(r2)
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     6e4:	e0bffe17 	ldw	r2,-8(fp)
     6e8:	10800117 	ldw	r2,4(r2)
     6ec:	10800a17 	ldw	r2,40(r2)
     6f0:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     6f4:	e0bffe17 	ldw	r2,-8(fp)
     6f8:	11000517 	ldw	r4,20(r2)
     6fc:	00057000 	call	5700 <alt_up_audio_disable_write_interrupt>
			}
		}
	}
	return;
}
     700:	e037883a 	mov	sp,fp
     704:	dfc00117 	ldw	ra,4(sp)
     708:	df000017 	ldw	fp,0(sp)
     70c:	dec00204 	addi	sp,sp,8
     710:	f800283a 	ret

00000714 <take_mean>:



void take_mean() {
     714:	defff304 	addi	sp,sp,-52
     718:	dfc00c15 	stw	ra,48(sp)
     71c:	df000b15 	stw	fp,44(sp)
     720:	dc000a15 	stw	r16,40(sp)
     724:	df000a04 	addi	fp,sp,40
	int i, j;
	int num = BUF_SIZE / N;
     728:	00986a04 	movi	r2,25000
     72c:	e0bffd15 	stw	r2,-12(fp)
	alt_64 sum = 0;
     730:	e03ffb15 	stw	zero,-20(fp)
     734:	e03ffc15 	stw	zero,-16(fp)
	*config_reg = (int)(N << 1); // Num set
     738:	00800074 	movhi	r2,1
     73c:	10bb6204 	addi	r2,r2,-4728
     740:	10c00017 	ldw	r3,0(r2)
     744:	00800a04 	movi	r2,40
     748:	18800015 	stw	r2,0(r3)
	*config_reg |= (int)(num << 12); //Size set
     74c:	00800074 	movhi	r2,1
     750:	10bb6204 	addi	r2,r2,-4728
     754:	11000017 	ldw	r4,0(r2)
     758:	00800074 	movhi	r2,1
     75c:	10bb6204 	addi	r2,r2,-4728
     760:	10800017 	ldw	r2,0(r2)
     764:	10c00017 	ldw	r3,0(r2)
     768:	e0bffd17 	ldw	r2,-12(fp)
     76c:	1004933a 	slli	r2,r2,12
     770:	1884b03a 	or	r2,r3,r2
     774:	20800015 	stw	r2,0(r4)
	*right_addr = r_buf;
     778:	00800074 	movhi	r2,1
     77c:	10bb6304 	addi	r2,r2,-4724
     780:	10c00017 	ldw	r3,0(r2)
     784:	00800074 	movhi	r2,1
     788:	1083c104 	addi	r2,r2,3844
     78c:	18800015 	stw	r2,0(r3)
	*left_addr = l_buf;
     790:	00800074 	movhi	r2,1
     794:	10bb6404 	addi	r2,r2,-4720
     798:	10c00017 	ldw	r3,0(r2)
     79c:	00800834 	movhi	r2,32
     7a0:	10a4e104 	addi	r2,r2,-27772
     7a4:	18800015 	stw	r2,0(r3)
	*out_addr = 0x60000000;
     7a8:	00800074 	movhi	r2,1
     7ac:	10bb6504 	addi	r2,r2,-4716
     7b0:	10c00017 	ldw	r3,0(r2)
     7b4:	00980034 	movhi	r2,24576
     7b8:	18800015 	stw	r2,0(r3)
	*config_reg |= 0x01; // go = 1
     7bc:	00800074 	movhi	r2,1
     7c0:	10bb6204 	addi	r2,r2,-4728
     7c4:	10c00017 	ldw	r3,0(r2)
     7c8:	00800074 	movhi	r2,1
     7cc:	10bb6204 	addi	r2,r2,-4728
     7d0:	10800017 	ldw	r2,0(r2)
     7d4:	10800017 	ldw	r2,0(r2)
     7d8:	10800054 	ori	r2,r2,1
     7dc:	18800015 	stw	r2,0(r3)
	//while(!((*config_reg >> 31) & 0x01)); //Done = 1
	int k;
	for(k=0;k<100000;k++){
     7e0:	e03ffa15 	stw	zero,-24(fp)
     7e4:	00000506 	br	7fc <take_mean+0xe8>
		int a;
		a=2;
     7e8:	00800084 	movi	r2,2
     7ec:	e0bff615 	stw	r2,-40(fp)
	*left_addr = l_buf;
	*out_addr = 0x60000000;
	*config_reg |= 0x01; // go = 1
	//while(!((*config_reg >> 31) & 0x01)); //Done = 1
	int k;
	for(k=0;k<100000;k++){
     7f0:	e0bffa17 	ldw	r2,-24(fp)
     7f4:	10800044 	addi	r2,r2,1
     7f8:	e0bffa15 	stw	r2,-24(fp)
     7fc:	e0fffa17 	ldw	r3,-24(fp)
     800:	008000b4 	movhi	r2,2
     804:	10a1a7c4 	addi	r2,r2,-31073
     808:	10fff70e 	bge	r2,r3,7e8 <take_mean+0xd4>
		int a;
		a=2;
	}
	for (j = 0; j < N; j++) {
     80c:	e03ffe15 	stw	zero,-8(fp)
     810:	00003306 	br	8e0 <take_mean+0x1cc>
		sum = 0;
     814:	e03ffb15 	stw	zero,-20(fp)
     818:	e03ffc15 	stw	zero,-16(fp)
		sum = (alt_64)(*out_addr) + (alt_64)(*(out_addr + 4)) << 32;
     81c:	00800074 	movhi	r2,1
     820:	10bb6504 	addi	r2,r2,-4716
     824:	10800017 	ldw	r2,0(r2)
     828:	10800017 	ldw	r2,0(r2)
     82c:	1007d7fa 	srai	r3,r2,31
     830:	100d883a 	mov	r6,r2
     834:	180f883a 	mov	r7,r3
     838:	00800074 	movhi	r2,1
     83c:	10bb6504 	addi	r2,r2,-4716
     840:	10800017 	ldw	r2,0(r2)
     844:	10800404 	addi	r2,r2,16
     848:	10800017 	ldw	r2,0(r2)
     84c:	1007d7fa 	srai	r3,r2,31
     850:	1009883a 	mov	r4,r2
     854:	180b883a 	mov	r5,r3
     858:	3105883a 	add	r2,r6,r4
     85c:	1191803a 	cmpltu	r8,r2,r6
     860:	3947883a 	add	r3,r7,r5
     864:	40c9883a 	add	r4,r8,r3
     868:	2007883a 	mov	r3,r4
     86c:	1009883a 	mov	r4,r2
     870:	180b883a 	mov	r5,r3
     874:	2004983a 	sll	r2,r4,zero
     878:	e0bffc15 	stw	r2,-16(fp)
     87c:	e03ffb15 	stw	zero,-20(fp)
		means[j] = (int) (sum / num);
     880:	e43ffe17 	ldw	r16,-8(fp)
     884:	e0bffd17 	ldw	r2,-12(fp)
     888:	1009d7fa 	srai	r4,r2,31
     88c:	e0bffd17 	ldw	r2,-12(fp)
     890:	2007883a 	mov	r3,r4
     894:	e13ffb17 	ldw	r4,-20(fp)
     898:	e17ffc17 	ldw	r5,-16(fp)
     89c:	100d883a 	mov	r6,r2
     8a0:	180f883a 	mov	r7,r3
     8a4:	00023e40 	call	23e4 <__divdi3>
     8a8:	1009883a 	mov	r4,r2
     8ac:	180b883a 	mov	r5,r3
     8b0:	2005883a 	mov	r2,r4
     8b4:	2807883a 	mov	r3,r5
     8b8:	1009883a 	mov	r4,r2
     8bc:	00c00074 	movhi	r3,1
     8c0:	18c34f04 	addi	r3,r3,3388
     8c4:	8405883a 	add	r2,r16,r16
     8c8:	1085883a 	add	r2,r2,r2
     8cc:	10c5883a 	add	r2,r2,r3
     8d0:	11000015 	stw	r4,0(r2)
	int k;
	for(k=0;k<100000;k++){
		int a;
		a=2;
	}
	for (j = 0; j < N; j++) {
     8d4:	e0bffe17 	ldw	r2,-8(fp)
     8d8:	10800044 	addi	r2,r2,1
     8dc:	e0bffe15 	stw	r2,-8(fp)
     8e0:	e0bffe17 	ldw	r2,-8(fp)
     8e4:	10800510 	cmplti	r2,r2,20
     8e8:	103fca1e 	bne	r2,zero,814 <take_mean+0x100>
		sum = 0;
		sum = (alt_64)(*out_addr) + (alt_64)(*(out_addr + 4)) << 32;
		means[j] = (int) (sum / num);
	}
	int max = 0;
     8ec:	e03ff915 	stw	zero,-28(fp)
	int min = means[0];
     8f0:	00800074 	movhi	r2,1
     8f4:	10834f04 	addi	r2,r2,3388
     8f8:	10800017 	ldw	r2,0(r2)
     8fc:	e0bff815 	stw	r2,-32(fp)
	for (i = 0; i < N; i++) {
     900:	e03fff15 	stw	zero,-4(fp)
     904:	00002506 	br	99c <take_mean+0x288>
		if (max < means[i]) {
     908:	e0bfff17 	ldw	r2,-4(fp)
     90c:	00c00074 	movhi	r3,1
     910:	18c34f04 	addi	r3,r3,3388
     914:	1085883a 	add	r2,r2,r2
     918:	1085883a 	add	r2,r2,r2
     91c:	10c5883a 	add	r2,r2,r3
     920:	10c00017 	ldw	r3,0(r2)
     924:	e0bff917 	ldw	r2,-28(fp)
     928:	10c0080e 	bge	r2,r3,94c <take_mean+0x238>
			max = means[i];
     92c:	e0bfff17 	ldw	r2,-4(fp)
     930:	00c00074 	movhi	r3,1
     934:	18c34f04 	addi	r3,r3,3388
     938:	1085883a 	add	r2,r2,r2
     93c:	1085883a 	add	r2,r2,r2
     940:	10c5883a 	add	r2,r2,r3
     944:	10800017 	ldw	r2,0(r2)
     948:	e0bff915 	stw	r2,-28(fp)
		}
		if (min>means[i]){
     94c:	e0bfff17 	ldw	r2,-4(fp)
     950:	00c00074 	movhi	r3,1
     954:	18c34f04 	addi	r3,r3,3388
     958:	1085883a 	add	r2,r2,r2
     95c:	1085883a 	add	r2,r2,r2
     960:	10c5883a 	add	r2,r2,r3
     964:	10c00017 	ldw	r3,0(r2)
     968:	e0bff817 	ldw	r2,-32(fp)
     96c:	1880080e 	bge	r3,r2,990 <take_mean+0x27c>
			min = means[i];
     970:	e0bfff17 	ldw	r2,-4(fp)
     974:	00c00074 	movhi	r3,1
     978:	18c34f04 	addi	r3,r3,3388
     97c:	1085883a 	add	r2,r2,r2
     980:	1085883a 	add	r2,r2,r2
     984:	10c5883a 	add	r2,r2,r3
     988:	10800017 	ldw	r2,0(r2)
     98c:	e0bff815 	stw	r2,-32(fp)
		sum = (alt_64)(*out_addr) + (alt_64)(*(out_addr + 4)) << 32;
		means[j] = (int) (sum / num);
	}
	int max = 0;
	int min = means[0];
	for (i = 0; i < N; i++) {
     990:	e0bfff17 	ldw	r2,-4(fp)
     994:	10800044 	addi	r2,r2,1
     998:	e0bfff15 	stw	r2,-4(fp)
     99c:	e0bfff17 	ldw	r2,-4(fp)
     9a0:	10800510 	cmplti	r2,r2,20
     9a4:	103fd81e 	bne	r2,zero,908 <take_mean+0x1f4>
		}
		if (min>means[i]){
			min = means[i];
		}
	}
	int mm=max-min;
     9a8:	e0bff917 	ldw	r2,-28(fp)
     9ac:	e0fff817 	ldw	r3,-32(fp)
     9b0:	10c5c83a 	sub	r2,r2,r3
     9b4:	e0bff715 	stw	r2,-36(fp)
	for (i = 0; i < N; i++) {
     9b8:	e03fff15 	stw	zero,-4(fp)
     9bc:	00002d06 	br	a74 <take_mean+0x360>
		heights[i] = (int)((alt_64) (means[i] - min) * MAX_H / (alt_64) (mm));
     9c0:	e43fff17 	ldw	r16,-4(fp)
     9c4:	e0bfff17 	ldw	r2,-4(fp)
     9c8:	00c00074 	movhi	r3,1
     9cc:	18c34f04 	addi	r3,r3,3388
     9d0:	1085883a 	add	r2,r2,r2
     9d4:	1085883a 	add	r2,r2,r2
     9d8:	10c5883a 	add	r2,r2,r3
     9dc:	10c00017 	ldw	r3,0(r2)
     9e0:	e0bff817 	ldw	r2,-32(fp)
     9e4:	1889c83a 	sub	r4,r3,r2
     9e8:	200bd7fa 	srai	r5,r4,31
     9ec:	2005883a 	mov	r2,r4
     9f0:	2807883a 	mov	r3,r5
     9f4:	1009883a 	mov	r4,r2
     9f8:	180b883a 	mov	r5,r3
     9fc:	01801904 	movi	r6,100
     a00:	000f883a 	mov	r7,zero
     a04:	00022a80 	call	22a8 <__muldi3>
     a08:	1009883a 	mov	r4,r2
     a0c:	180b883a 	mov	r5,r3
     a10:	200d883a 	mov	r6,r4
     a14:	280f883a 	mov	r7,r5
     a18:	e0bff717 	ldw	r2,-36(fp)
     a1c:	1009d7fa 	srai	r4,r2,31
     a20:	e0bff717 	ldw	r2,-36(fp)
     a24:	2007883a 	mov	r3,r4
     a28:	3009883a 	mov	r4,r6
     a2c:	380b883a 	mov	r5,r7
     a30:	100d883a 	mov	r6,r2
     a34:	180f883a 	mov	r7,r3
     a38:	00023e40 	call	23e4 <__divdi3>
     a3c:	1009883a 	mov	r4,r2
     a40:	180b883a 	mov	r5,r3
     a44:	2005883a 	mov	r2,r4
     a48:	2807883a 	mov	r3,r5
     a4c:	1009883a 	mov	r4,r2
     a50:	00c00074 	movhi	r3,1
     a54:	18c36304 	addi	r3,r3,3468
     a58:	8405883a 	add	r2,r16,r16
     a5c:	1085883a 	add	r2,r2,r2
     a60:	10c5883a 	add	r2,r2,r3
     a64:	11000015 	stw	r4,0(r2)
		if (min>means[i]){
			min = means[i];
		}
	}
	int mm=max-min;
	for (i = 0; i < N; i++) {
     a68:	e0bfff17 	ldw	r2,-4(fp)
     a6c:	10800044 	addi	r2,r2,1
     a70:	e0bfff15 	stw	r2,-4(fp)
     a74:	e0bfff17 	ldw	r2,-4(fp)
     a78:	10800510 	cmplti	r2,r2,20
     a7c:	103fd01e 	bne	r2,zero,9c0 <take_mean+0x2ac>
		heights[i] = (int)((alt_64) (means[i] - min) * MAX_H / (alt_64) (mm));
	}
}
     a80:	e037883a 	mov	sp,fp
     a84:	dfc00217 	ldw	ra,8(sp)
     a88:	df000117 	ldw	fp,4(sp)
     a8c:	dc000017 	ldw	r16,0(sp)
     a90:	dec00304 	addi	sp,sp,12
     a94:	f800283a 	ret

00000a98 <filter>:
-0.0019989013671875                                             
};

extern float mem[64];

unsigned int filter(unsigned int in){
     a98:	defff604 	addi	sp,sp,-40
     a9c:	dfc00915 	stw	ra,36(sp)
     aa0:	df000815 	stw	fp,32(sp)
     aa4:	dc400715 	stw	r17,28(sp)
     aa8:	dc000615 	stw	r16,24(sp)
     aac:	df000604 	addi	fp,sp,24
     ab0:	e13fff15 	stw	r4,-4(fp)
    in = in >> 8;
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	1004d23a 	srli	r2,r2,8
     abc:	e0bfff15 	stw	r2,-4(fp)
    float float_in = (float) in / 8388608;
     ac0:	e13fff17 	ldw	r4,-4(fp)
     ac4:	0002ab80 	call	2ab8 <__floatunsisf>
     ac8:	1007883a 	mov	r3,r2
     acc:	0092c034 	movhi	r2,19200
     ad0:	1885fff2 	custom	255,r2,r3,r2
     ad4:	e0bffe15 	stw	r2,-8(fp)

    int i;
    for (i=63;i>0;i--){
     ad8:	00800fc4 	movi	r2,63
     adc:	e0bffd15 	stw	r2,-12(fp)
     ae0:	00001206 	br	b2c <filter+0x94>
        mem[i]=mem[i-1];
     ae4:	e17ffd17 	ldw	r5,-12(fp)
     ae8:	e0bffd17 	ldw	r2,-12(fp)
     aec:	10bfffc4 	addi	r2,r2,-1
     af0:	00c00074 	movhi	r3,1
     af4:	18c37704 	addi	r3,r3,3548
     af8:	1085883a 	add	r2,r2,r2
     afc:	1085883a 	add	r2,r2,r2
     b00:	10c5883a 	add	r2,r2,r3
     b04:	11000017 	ldw	r4,0(r2)
     b08:	00c00074 	movhi	r3,1
     b0c:	18c37704 	addi	r3,r3,3548
     b10:	2945883a 	add	r2,r5,r5
     b14:	1085883a 	add	r2,r2,r2
     b18:	10c5883a 	add	r2,r2,r3
     b1c:	11000015 	stw	r4,0(r2)
unsigned int filter(unsigned int in){
    in = in >> 8;
    float float_in = (float) in / 8388608;

    int i;
    for (i=63;i>0;i--){
     b20:	e0bffd17 	ldw	r2,-12(fp)
     b24:	10bfffc4 	addi	r2,r2,-1
     b28:	e0bffd15 	stw	r2,-12(fp)
     b2c:	e0bffd17 	ldw	r2,-12(fp)
     b30:	10800048 	cmpgei	r2,r2,1
     b34:	103feb1e 	bne	r2,zero,ae4 <filter+0x4c>
        mem[i]=mem[i-1];
    }
    mem[0]=in;
     b38:	e13fff17 	ldw	r4,-4(fp)
     b3c:	0002ab80 	call	2ab8 <__floatunsisf>
     b40:	1007883a 	mov	r3,r2
     b44:	00800074 	movhi	r2,1
     b48:	10837704 	addi	r2,r2,3548
     b4c:	10c00015 	stw	r3,0(r2)
    double res=0;
     b50:	e03ffb15 	stw	zero,-20(fp)
     b54:	e03ffc15 	stw	zero,-16(fp)
    for(i=0;i<64;i++){
     b58:	e03ffd15 	stw	zero,-12(fp)
     b5c:	00002b06 	br	c0c <filter+0x174>
        res+=(double)mem[i]*(double)coef[i];
     b60:	e0bffd17 	ldw	r2,-12(fp)
     b64:	00c00074 	movhi	r3,1
     b68:	18c37704 	addi	r3,r3,3548
     b6c:	1085883a 	add	r2,r2,r2
     b70:	1085883a 	add	r2,r2,r2
     b74:	10c5883a 	add	r2,r2,r3
     b78:	10800017 	ldw	r2,0(r2)
     b7c:	1009883a 	mov	r4,r2
     b80:	0002a640 	call	2a64 <__extendsfdf2>
     b84:	1021883a 	mov	r16,r2
     b88:	1823883a 	mov	r17,r3
     b8c:	e0bffd17 	ldw	r2,-12(fp)
     b90:	00c00074 	movhi	r3,1
     b94:	18f1da04 	addi	r3,r3,-14488
     b98:	1085883a 	add	r2,r2,r2
     b9c:	1085883a 	add	r2,r2,r2
     ba0:	10c5883a 	add	r2,r2,r3
     ba4:	10800017 	ldw	r2,0(r2)
     ba8:	1009883a 	mov	r4,r2
     bac:	0002a640 	call	2a64 <__extendsfdf2>
     bb0:	100f883a 	mov	r7,r2
     bb4:	1811883a 	mov	r8,r3
     bb8:	8009883a 	mov	r4,r16
     bbc:	880b883a 	mov	r5,r17
     bc0:	380d883a 	mov	r6,r7
     bc4:	400f883a 	mov	r7,r8
     bc8:	000307c0 	call	307c <__muldf3>
     bcc:	1009883a 	mov	r4,r2
     bd0:	180b883a 	mov	r5,r3
     bd4:	2005883a 	mov	r2,r4
     bd8:	2807883a 	mov	r3,r5
     bdc:	e13ffb17 	ldw	r4,-20(fp)
     be0:	e17ffc17 	ldw	r5,-16(fp)
     be4:	100d883a 	mov	r6,r2
     be8:	180f883a 	mov	r7,r3
     bec:	00030080 	call	3008 <__adddf3>
     bf0:	1009883a 	mov	r4,r2
     bf4:	180b883a 	mov	r5,r3
     bf8:	e13ffb15 	stw	r4,-20(fp)
     bfc:	e17ffc15 	stw	r5,-16(fp)
    for (i=63;i>0;i--){
        mem[i]=mem[i-1];
    }
    mem[0]=in;
    double res=0;
    for(i=0;i<64;i++){
     c00:	e0bffd17 	ldw	r2,-12(fp)
     c04:	10800044 	addi	r2,r2,1
     c08:	e0bffd15 	stw	r2,-12(fp)
     c0c:	e0bffd17 	ldw	r2,-12(fp)
     c10:	10801010 	cmplti	r2,r2,64
     c14:	103fd21e 	bne	r2,zero,b60 <filter+0xc8>
        res+=(double)mem[i]*(double)coef[i];
        // res+=mem[i];
    }
    unsigned int result=(unsigned int)(res*1073741824);
     c18:	e13ffb17 	ldw	r4,-20(fp)
     c1c:	e17ffc17 	ldw	r5,-16(fp)
     c20:	000d883a 	mov	r6,zero
     c24:	01d07434 	movhi	r7,16848
     c28:	000307c0 	call	307c <__muldf3>
     c2c:	1009883a 	mov	r4,r2
     c30:	180b883a 	mov	r5,r3
     c34:	2005883a 	mov	r2,r4
     c38:	2807883a 	mov	r3,r5
     c3c:	1009883a 	mov	r4,r2
     c40:	180b883a 	mov	r5,r3
     c44:	00023400 	call	2340 <__fixunsdfsi>
     c48:	e0bffa15 	stw	r2,-24(fp)
    return result;
     c4c:	e0bffa17 	ldw	r2,-24(fp)
     c50:	e037883a 	mov	sp,fp
     c54:	dfc00317 	ldw	ra,12(sp)
     c58:	df000217 	ldw	fp,8(sp)
     c5c:	dc400117 	ldw	r17,4(sp)
     c60:	dc000017 	ldw	r16,0(sp)
     c64:	dec00404 	addi	sp,sp,16
     c68:	f800283a 	ret

00000c6c <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     c6c:	defffb04 	addi	sp,sp,-20
     c70:	dfc00415 	stw	ra,16(sp)
     c74:	df000315 	stw	fp,12(sp)
     c78:	df000304 	addi	fp,sp,12
     c7c:	e13ffe15 	stw	r4,-8(fp)
     c80:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     c84:	00840034 	movhi	r2,4096
     c88:	10880004 	addi	r2,r2,8192
     c8c:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     c90:	e0bffd17 	ldw	r2,-12(fp)
     c94:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     c98:	00c00074 	movhi	r3,1
     c9c:	18c33e04 	addi	r3,r3,3320
     ca0:	00800044 	movi	r2,1
     ca4:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     ca8:	e0bffe17 	ldw	r2,-8(fp)
     cac:	11000417 	ldw	r4,16(r2)
     cb0:	017fffc4 	movi	r5,-1
     cb4:	000616c0 	call	616c <alt_up_character_lcd_shift_display>

	return;
}
     cb8:	e037883a 	mov	sp,fp
     cbc:	dfc00117 	ldw	ra,4(sp)
     cc0:	df000017 	ldw	fp,0(sp)
     cc4:	dec00204 	addi	sp,sp,8
     cc8:	f800283a 	ret

00000ccc <main>:
********************************************************************************/
short int all_drawn=0;
int rect_th = 0;

int main(void)
{
     ccc:	deffa404 	addi	sp,sp,-368
     cd0:	dfc05b15 	stw	ra,364(sp)
     cd4:	df005a15 	stw	fp,360(sp)
     cd8:	df005a04 	addi	fp,sp,360
	signed short pre_x_axis_mouse, pre_y_axis_mouse;
	x_axis_mouse = 160;
     cdc:	00802804 	movi	r2,160
     ce0:	d0a7e48d 	sth	r2,-24686(gp)
	y_axis_mouse = 120;
     ce4:	00801e04 	movi	r2,120
     ce8:	d0a7e40d 	sth	r2,-24688(gp)
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address
     cec:	00840034 	movhi	r2,4096
     cf0:	10880004 	addi	r2,r2,8192
     cf4:	e0bfc815 	stw	r2,-224(fp)

	/* initialize some variables */
	valid_byte1 = 0; valid_byte2 = 0; valid_byte3 = 0; 			// used to hold PS/2 data
     cf8:	00800074 	movhi	r2,1
     cfc:	10834104 	addi	r2,r2,3332
     d00:	10000005 	stb	zero,0(r2)
     d04:	00800074 	movhi	r2,1
     d08:	10833d04 	addi	r2,r2,3316
     d0c:	10000005 	stb	zero,0(r2)
     d10:	00800074 	movhi	r2,1
     d14:	10833bc4 	addi	r2,r2,3311
     d18:	10000005 	stb	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     d1c:	00800074 	movhi	r2,1
     d20:	10833e04 	addi	r2,r2,3320
     d24:	10000015 	stw	zero,0(r2)
	int record_box_x1, record_box_x2, record_box_y1, record_box_y2;
	int play_box_x1, play_box_x2, play_box_y1, play_box_y2;
	int Denoise_box_x1, Denoise_box_x2, Denoise_box_y1, Denoise_box_y2;

	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     d28:	008025b4 	movhi	r2,150
     d2c:	e0bfad15 	stw	r2,-332(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     d30:	e0bfc817 	ldw	r2,-224(fp)
     d34:	10c00204 	addi	r3,r2,8
     d38:	e0bfad17 	ldw	r2,-332(fp)
     d3c:	10bfffcc 	andi	r2,r2,65535
     d40:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     d44:	e0bfc817 	ldw	r2,-224(fp)
     d48:	10c00304 	addi	r3,r2,12
     d4c:	e0bfad17 	ldw	r2,-332(fp)
     d50:	1005d43a 	srai	r2,r2,16
     d54:	10bfffcc 	andi	r2,r2,65535
     d58:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1 
     d5c:	e0bfc817 	ldw	r2,-224(fp)
     d60:	10c00104 	addi	r3,r2,4
     d64:	008001c4 	movi	r2,7
     d68:	18800015 	stw	r2,0(r3)
	
	// open the pushbuttom KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     d6c:	01000074 	movhi	r4,1
     d70:	21321a04 	addi	r4,r4,-14232
     d74:	0006a300 	call	6a30 <alt_up_parallel_port_open_dev>
     d78:	e0bfd015 	stw	r2,-192(fp)
	if ( KEY_dev == NULL)
     d7c:	e0bfd017 	ldw	r2,-192(fp)
     d80:	1004c03a 	cmpne	r2,r2,zero
     d84:	1000061e 	bne	r2,zero,da0 <main+0xd4>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     d88:	01000074 	movhi	r4,1
     d8c:	21321f04 	addi	r4,r4,-14212
     d90:	00043300 	call	4330 <alt_printf>
		return -1;
     d94:	00bfffc4 	movi	r2,-1
     d98:	e0bfff15 	stw	r2,-4(fp)
     d9c:	0002bf06 	br	189c <main+0xbd0>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     da0:	01000074 	movhi	r4,1
     da4:	21322b04 	addi	r4,r4,-14164
     da8:	00043300 	call	4330 <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     dac:	00c00fb4 	movhi	r3,62
     db0:	18c60104 	addi	r3,r3,6148
     db4:	e0bfd017 	ldw	r2,-192(fp)
     db8:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1 
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     dbc:	e0bfd017 	ldw	r2,-192(fp)
     dc0:	10800a17 	ldw	r2,40(r2)
     dc4:	10800204 	addi	r2,r2,8
     dc8:	1007883a 	mov	r3,r2
     dcc:	00800384 	movi	r2,14
     dd0:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     dd4:	01000074 	movhi	r4,1
     dd8:	21323304 	addi	r4,r4,-14132
     ddc:	0006a300 	call	6a30 <alt_up_parallel_port_open_dev>
     de0:	e0bfcf15 	stw	r2,-196(fp)
	if ( green_LEDs_dev == NULL)
     de4:	e0bfcf17 	ldw	r2,-196(fp)
     de8:	1004c03a 	cmpne	r2,r2,zero
     dec:	1000061e 	bne	r2,zero,e08 <main+0x13c>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     df0:	01000074 	movhi	r4,1
     df4:	21323704 	addi	r4,r4,-14116
     df8:	00043300 	call	4330 <alt_printf>
		return -1;
     dfc:	00bfffc4 	movi	r2,-1
     e00:	e0bfff15 	stw	r2,-4(fp)
     e04:	0002a506 	br	189c <main+0xbd0>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     e08:	01000074 	movhi	r4,1
     e0c:	21324204 	addi	r4,r4,-14072
     e10:	00043300 	call	4330 <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     e14:	00c00fb4 	movhi	r3,62
     e18:	18c60104 	addi	r3,r3,6148
     e1c:	e0bfcf17 	ldw	r2,-196(fp)
     e20:	18800115 	stw	r2,4(r3)
	}

	// open the red LEDs parallel port
	red_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Red_LEDs");
     e24:	01000074 	movhi	r4,1
     e28:	21324904 	addi	r4,r4,-14044
     e2c:	0006a300 	call	6a30 <alt_up_parallel_port_open_dev>
     e30:	e0bfce15 	stw	r2,-200(fp)
	if ( red_LEDs_dev == NULL)
     e34:	e0bfce17 	ldw	r2,-200(fp)
     e38:	1004c03a 	cmpne	r2,r2,zero
     e3c:	1000061e 	bne	r2,zero,e58 <main+0x18c>
	{
		alt_printf ("Error: could not open red LEDs device\n");
     e40:	01000074 	movhi	r4,1
     e44:	21324d04 	addi	r4,r4,-14028
     e48:	00043300 	call	4330 <alt_printf>
		return -1;
     e4c:	00bfffc4 	movi	r2,-1
     e50:	e0bfff15 	stw	r2,-4(fp)
     e54:	00029106 	br	189c <main+0xbd0>
	}
	else
	{
		alt_printf ("Opened red LEDs device\n");
     e58:	01000074 	movhi	r4,1
     e5c:	21325704 	addi	r4,r4,-13988
     e60:	00043300 	call	4330 <alt_printf>
		up_dev.red_LEDs_dev = red_LEDs_dev;	// store for use by ISRs
     e64:	00c00fb4 	movhi	r3,62
     e68:	18c60104 	addi	r3,r3,6148
     e6c:	e0bfce17 	ldw	r2,-200(fp)
     e70:	18800215 	stw	r2,8(r3)
	}


	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     e74:	01000074 	movhi	r4,1
     e78:	21325d04 	addi	r4,r4,-13964
     e7c:	00071300 	call	7130 <alt_up_ps2_open_dev>
     e80:	e0bfcd15 	stw	r2,-204(fp)
	if ( PS2_dev == NULL)
     e84:	e0bfcd17 	ldw	r2,-204(fp)
     e88:	1004c03a 	cmpne	r2,r2,zero
     e8c:	1000061e 	bne	r2,zero,ea8 <main+0x1dc>
	{
		alt_printf ("Error: could not open PS2 device\n");
     e90:	01000074 	movhi	r4,1
     e94:	21326104 	addi	r4,r4,-13948
     e98:	00043300 	call	4330 <alt_printf>
		return -1;
     e9c:	00bfffc4 	movi	r2,-1
     ea0:	e0bfff15 	stw	r2,-4(fp)
     ea4:	00027d06 	br	189c <main+0xbd0>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     ea8:	01000074 	movhi	r4,1
     eac:	21326a04 	addi	r4,r4,-13912
     eb0:	00043300 	call	4330 <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     eb4:	00c00fb4 	movhi	r3,62
     eb8:	18c60104 	addi	r3,r3,6148
     ebc:	e0bfcd17 	ldw	r2,-204(fp)
     ec0:	18800315 	stw	r2,12(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     ec4:	e13fcd17 	ldw	r4,-204(fp)
     ec8:	01403fc4 	movi	r5,255
     ecc:	0006d140 	call	6d14 <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     ed0:	e13fcd17 	ldw	r4,-204(fp)
     ed4:	0006c680 	call	6c68 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     ed8:	01000074 	movhi	r4,1
     edc:	21326f04 	addi	r4,r4,-13892
     ee0:	00055d80 	call	55d8 <alt_up_audio_open_dev>
     ee4:	e0bfcb15 	stw	r2,-212(fp)
	if ( audio_dev == NULL)
     ee8:	e0bfcb17 	ldw	r2,-212(fp)
     eec:	1004c03a 	cmpne	r2,r2,zero
     ef0:	1000061e 	bne	r2,zero,f0c <main+0x240>
	{
		alt_printf ("Error: could not open audio device\n");
     ef4:	01000074 	movhi	r4,1
     ef8:	21327204 	addi	r4,r4,-13880
     efc:	00043300 	call	4330 <alt_printf>
		return -1;
     f00:	00bfffc4 	movi	r2,-1
     f04:	e0bfff15 	stw	r2,-4(fp)
     f08:	00026406 	br	189c <main+0xbd0>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     f0c:	01000074 	movhi	r4,1
     f10:	21327b04 	addi	r4,r4,-13844
     f14:	00043300 	call	4330 <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     f18:	00c00fb4 	movhi	r3,62
     f1c:	18c60104 	addi	r3,r3,6148
     f20:	e0bfcb17 	ldw	r2,-212(fp)
     f24:	18800515 	stw	r2,20(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     f28:	01000074 	movhi	r4,1
     f2c:	21328104 	addi	r4,r4,-13820
     f30:	0005ec80 	call	5ec8 <alt_up_character_lcd_open_dev>
     f34:	e0bfcc15 	stw	r2,-208(fp)
	if ( lcd_dev == NULL)
     f38:	e0bfcc17 	ldw	r2,-208(fp)
     f3c:	1004c03a 	cmpne	r2,r2,zero
     f40:	1000061e 	bne	r2,zero,f5c <main+0x290>
	{
		alt_printf ("Error: could not open character LCD device\n");
     f44:	01000074 	movhi	r4,1
     f48:	21328604 	addi	r4,r4,-13800
     f4c:	00043300 	call	4330 <alt_printf>
		return -1;
     f50:	00bfffc4 	movi	r2,-1
     f54:	e0bfff15 	stw	r2,-4(fp)
     f58:	00025006 	br	189c <main+0xbd0>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     f5c:	01000074 	movhi	r4,1
     f60:	21329104 	addi	r4,r4,-13756
     f64:	00043300 	call	4330 <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     f68:	00c00fb4 	movhi	r3,62
     f6c:	18c60104 	addi	r3,r3,6148
     f70:	e0bfcc17 	ldw	r2,-208(fp)
     f74:	18800415 	stw	r2,16(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passsing a pointer to up_dev to each ISR (using the context argument) as 
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     f78:	01800034 	movhi	r6,0
     f7c:	31831b04 	addi	r6,r6,3180
     f80:	0009883a 	mov	r4,zero
     f84:	01400fb4 	movhi	r5,62
     f88:	29460104 	addi	r5,r5,6148
     f8c:	00040180 	call	4018 <alt_irq_register>
	alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
     f90:	01800034 	movhi	r6,0
     f94:	31887c04 	addi	r6,r6,8688
     f98:	01000044 	movi	r4,1
     f9c:	01400fb4 	movhi	r5,62
     fa0:	29460104 	addi	r5,r5,6148
     fa4:	00040180 	call	4018 <alt_irq_register>
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     fa8:	01800034 	movhi	r6,0
     fac:	3180e004 	addi	r6,r6,896
     fb0:	01000184 	movi	r4,6
     fb4:	01400fb4 	movhi	r5,62
     fb8:	29460104 	addi	r5,r5,6148
     fbc:	00040180 	call	4018 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     fc0:	01800034 	movhi	r6,0
     fc4:	31807d04 	addi	r6,r6,500
     fc8:	010001c4 	movi	r4,7
     fcc:	01400fb4 	movhi	r5,62
     fd0:	29460104 	addi	r5,r5,6148
     fd4:	00040180 	call	4018 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     fd8:	00c00074 	movhi	r3,1
     fdc:	18f2cb04 	addi	r3,r3,-13524
     fe0:	18800017 	ldw	r2,0(r3)
     fe4:	e0bfd415 	stw	r2,-176(fp)
     fe8:	18800117 	ldw	r2,4(r3)
     fec:	e0bfd515 	stw	r2,-172(fp)
     ff0:	18800217 	ldw	r2,8(r3)
     ff4:	e0bfd615 	stw	r2,-168(fp)
     ff8:	18800317 	ldw	r2,12(r3)
     ffc:	e0bfd715 	stw	r2,-164(fp)
    1000:	18800417 	ldw	r2,16(r3)
    1004:	e0bfd815 	stw	r2,-160(fp)
    1008:	18800517 	ldw	r2,20(r3)
    100c:	e0bfd915 	stw	r2,-156(fp)
    1010:	18800617 	ldw	r2,24(r3)
    1014:	e0bfda15 	stw	r2,-152(fp)
    1018:	18800717 	ldw	r2,28(r3)
    101c:	e0bfdb15 	stw	r2,-148(fp)
    1020:	18800817 	ldw	r2,32(r3)
    1024:	e0bfdc15 	stw	r2,-144(fp)
    1028:	1880090b 	ldhu	r2,36(r3)
    102c:	e0bfdd0d 	sth	r2,-140(fp)
    1030:	e13fdd84 	addi	r4,fp,-138
    1034:	01800a84 	movi	r6,42
    1038:	000b883a 	mov	r5,zero
    103c:	0003f800 	call	3f80 <memset>
	char text_top_VGA[20] = "Altera DE2\0";
    1040:	00c00074 	movhi	r3,1
    1044:	18f2df04 	addi	r3,r3,-13444
    1048:	18800017 	ldw	r2,0(r3)
    104c:	e0bfe815 	stw	r2,-96(fp)
    1050:	18800117 	ldw	r2,4(r3)
    1054:	e0bfe915 	stw	r2,-92(fp)
    1058:	18800217 	ldw	r2,8(r3)
    105c:	e0bfea15 	stw	r2,-88(fp)
    1060:	e03feb15 	stw	zero,-84(fp)
    1064:	e03fec15 	stw	zero,-80(fp)
	char text_bottom_VGA[20] = "Media Computer\0";
    1068:	00c00074 	movhi	r3,1
    106c:	18f2e404 	addi	r3,r3,-13424
    1070:	18800017 	ldw	r2,0(r3)
    1074:	e0bfed15 	stw	r2,-76(fp)
    1078:	18800117 	ldw	r2,4(r3)
    107c:	e0bfee15 	stw	r2,-72(fp)
    1080:	18800217 	ldw	r2,8(r3)
    1084:	e0bfef15 	stw	r2,-68(fp)
    1088:	18800317 	ldw	r2,12(r3)
    108c:	e0bff015 	stw	r2,-64(fp)
    1090:	e03ff115 	stw	zero,-60(fp)
	char text_ALTERA[10] = "SAEED\0";
    1094:	00c00074 	movhi	r3,1
    1098:	18f2e904 	addi	r3,r3,-13404
    109c:	18800017 	ldw	r2,0(r3)
    10a0:	e0bff215 	stw	r2,-56(fp)
    10a4:	1880010b 	ldhu	r2,4(r3)
    10a8:	e0bff30d 	sth	r2,-52(fp)
    10ac:	18800183 	ldbu	r2,6(r3)
    10b0:	e0bff385 	stb	r2,-50(fp)
    10b4:	e03ff3c5 	stb	zero,-49(fp)
    10b8:	e03ff405 	stb	zero,-48(fp)
    10bc:	e03ff445 	stb	zero,-47(fp)
	char text_erase[10] = "      \0";
    10c0:	00c00074 	movhi	r3,1
    10c4:	18f2ec04 	addi	r3,r3,-13392
    10c8:	1880000b 	ldhu	r2,0(r3)
    10cc:	e0bff48d 	sth	r2,-46(fp)
    10d0:	1880008b 	ldhu	r2,2(r3)
    10d4:	e0bff50d 	sth	r2,-44(fp)
    10d8:	1880010b 	ldhu	r2,4(r3)
    10dc:	e0bff58d 	sth	r2,-42(fp)
    10e0:	1880018b 	ldhu	r2,6(r3)
    10e4:	e0bff60d 	sth	r2,-40(fp)
    10e8:	e03ff68d 	sth	zero,-38(fp)
	char text_Denoise[10] = "Denoise\0";
    10ec:	00c00074 	movhi	r3,1
    10f0:	18f2ef04 	addi	r3,r3,-13380
    10f4:	18800017 	ldw	r2,0(r3)
    10f8:	e0bff715 	stw	r2,-36(fp)
    10fc:	18800117 	ldw	r2,4(r3)
    1100:	e0bff815 	stw	r2,-32(fp)
    1104:	18800203 	ldbu	r2,8(r3)
    1108:	e0bff905 	stb	r2,-28(fp)
    110c:	e03ff945 	stb	zero,-27(fp)
	char text_play[10] = "Play\0";
    1110:	00c00074 	movhi	r3,1
    1114:	18f2f204 	addi	r3,r3,-13368
    1118:	1880000b 	ldhu	r2,0(r3)
    111c:	e0bff98d 	sth	r2,-26(fp)
    1120:	1880008b 	ldhu	r2,2(r3)
    1124:	e0bffa0d 	sth	r2,-24(fp)
    1128:	1880010b 	ldhu	r2,4(r3)
    112c:	e0bffa8d 	sth	r2,-22(fp)
    1130:	e03ffb0d 	sth	zero,-20(fp)
    1134:	e03ffb8d 	sth	zero,-18(fp)
	char text_record[10] = "Record\0";
    1138:	00c00074 	movhi	r3,1
    113c:	18f2f504 	addi	r3,r3,-13356
    1140:	18800017 	ldw	r2,0(r3)
    1144:	e0bffc15 	stw	r2,-16(fp)
    1148:	18800117 	ldw	r2,4(r3)
    114c:	e0bffd15 	stw	r2,-12(fp)
    1150:	e03ffe0d 	sth	zero,-8(fp)


	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
    1154:	e13fcc17 	ldw	r4,-208(fp)
    1158:	000b883a 	mov	r5,zero
    115c:	000d883a 	mov	r6,zero
    1160:	00060440 	call	6044 <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
    1164:	e17fd404 	addi	r5,fp,-176
    1168:	e13fcc17 	ldw	r4,-208(fp)
    116c:	0005f800 	call	5f80 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor 
    1170:	e13fcc17 	ldw	r4,-208(fp)
    1174:	00062ac0 	call	62ac <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
    1178:	01000074 	movhi	r4,1
    117c:	21329904 	addi	r4,r4,-13724
    1180:	000780c0 	call	780c <alt_up_pixel_buffer_dma_open_dev>
    1184:	e0bfc915 	stw	r2,-220(fp)
	if ( pixel_buffer_dev == NULL)
    1188:	e0bfc917 	ldw	r2,-220(fp)
    118c:	1004c03a 	cmpne	r2,r2,zero
    1190:	1000041e 	bne	r2,zero,11a4 <main+0x4d8>
		alt_printf ("Error: could not open pixel buffer device\n");
    1194:	01000074 	movhi	r4,1
    1198:	21329f04 	addi	r4,r4,-13700
    119c:	00043300 	call	4330 <alt_printf>
    11a0:	00000306 	br	11b0 <main+0x4e4>
	else
		alt_printf ("Opened pixel buffer device\n");
    11a4:	01000074 	movhi	r4,1
    11a8:	2132aa04 	addi	r4,r4,-13656
    11ac:	00043300 	call	4330 <alt_printf>

	/* the following variables give the size of the pixel buffer */
	screen_x = 319; screen_y = 239;
    11b0:	00804fc4 	movi	r2,319
    11b4:	e0bfbe15 	stw	r2,-264(fp)
    11b8:	00803bc4 	movi	r2,239
    11bc:	e0bfbd15 	stw	r2,-268(fp)
	color = 0x5550;		// a dark grey color
    11c0:	00955404 	movi	r2,21840
    11c4:	e0bfba0d 	sth	r2,-280(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
    11c8:	e0ffba0f 	ldh	r3,-280(fp)
    11cc:	e0bfbd17 	ldw	r2,-268(fp)
    11d0:	d8800015 	stw	r2,0(sp)
    11d4:	d8c00115 	stw	r3,4(sp)
    11d8:	d8000215 	stw	zero,8(sp)
    11dc:	e13fc917 	ldw	r4,-220(fp)
    11e0:	000b883a 	mov	r5,zero
    11e4:	000d883a 	mov	r6,zero
    11e8:	e1ffbe17 	ldw	r7,-264(fp)
    11ec:	0007c340 	call	7c34 <alt_up_pixel_buffer_dma_draw_box>
	// color = 0x187F;		// a medium blue color
	// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4, 
	// 	blue_y2 * 4, color, 0);

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
    11f0:	01000074 	movhi	r4,1
    11f4:	2132b104 	addi	r4,r4,-13628
    11f8:	000758c0 	call	758c <alt_up_char_buffer_open_dev>
    11fc:	e0bfca15 	stw	r2,-216(fp)
	if ( char_buffer_dev == NULL)
    1200:	e0bfca17 	ldw	r2,-216(fp)
    1204:	1004c03a 	cmpne	r2,r2,zero
    1208:	1000041e 	bne	r2,zero,121c <main+0x550>
		alt_printf ("Error: could not open character buffer device\n");
    120c:	01000074 	movhi	r4,1
    1210:	2132b704 	addi	r4,r4,-13604
    1214:	00043300 	call	4330 <alt_printf>
    1218:	00000306 	br	1228 <main+0x55c>
	else
		alt_printf ("Opened character buffer device\n");
    121c:	01000074 	movhi	r4,1
    1220:	2132c304 	addi	r4,r4,-13556
    1224:	00043300 	call	4330 <alt_printf>



	// Place your code here
	
	int margin = 10;
    1228:	00800284 	movi	r2,10
    122c:	e0bfac15 	stw	r2,-336(fp)
	int space_width = 2;
    1230:	00800084 	movi	r2,2
    1234:	e0bfab15 	stw	r2,-340(fp)
	int rect_width = (320 - margin * 2 - space_width * (N - 1)) / N;
    1238:	e0bfac17 	ldw	r2,-336(fp)
    123c:	1085883a 	add	r2,r2,r2
    1240:	0087c83a 	sub	r3,zero,r2
    1244:	e0bfab17 	ldw	r2,-340(fp)
    1248:	10bffb64 	muli	r2,r2,-19
    124c:	1885883a 	add	r2,r3,r2
    1250:	10c05004 	addi	r3,r2,320
    1254:	00800504 	movi	r2,20
    1258:	1885283a 	div	r2,r3,r2
    125c:	e0bfaa15 	stw	r2,-344(fp)
	for(i = 0; i < N; i++){
    1260:	e03fd215 	stw	zero,-184(fp)
    1264:	00001c06 	br	12d8 <main+0x60c>
		rects[i][0] = margin + 13 * i + 2 * i;
    1268:	e17fd217 	ldw	r5,-184(fp)
    126c:	e0bfd217 	ldw	r2,-184(fp)
    1270:	10c003e4 	muli	r3,r2,15
    1274:	e0bfac17 	ldw	r2,-336(fp)
    1278:	1889883a 	add	r4,r3,r2
    127c:	00c01ef4 	movhi	r3,123
    1280:	18c84904 	addi	r3,r3,8484
    1284:	280490fa 	slli	r2,r5,3
    1288:	10c5883a 	add	r2,r2,r3
    128c:	11000015 	stw	r4,0(r2)
		rects[i][1] = margin + 13 * (i + 1) + 2 * i;
    1290:	e17fd217 	ldw	r5,-184(fp)
    1294:	e0bfd217 	ldw	r2,-184(fp)
    1298:	10c00364 	muli	r3,r2,13
    129c:	e0bfac17 	ldw	r2,-336(fp)
    12a0:	1887883a 	add	r3,r3,r2
    12a4:	e0bfd217 	ldw	r2,-184(fp)
    12a8:	1085883a 	add	r2,r2,r2
    12ac:	1885883a 	add	r2,r3,r2
    12b0:	11000344 	addi	r4,r2,13
    12b4:	00c01ef4 	movhi	r3,123
    12b8:	18c84904 	addi	r3,r3,8484
    12bc:	280490fa 	slli	r2,r5,3
    12c0:	10c5883a 	add	r2,r2,r3
    12c4:	10800104 	addi	r2,r2,4
    12c8:	11000015 	stw	r4,0(r2)
	// Place your code here
	
	int margin = 10;
	int space_width = 2;
	int rect_width = (320 - margin * 2 - space_width * (N - 1)) / N;
	for(i = 0; i < N; i++){
    12cc:	e0bfd217 	ldw	r2,-184(fp)
    12d0:	10800044 	addi	r2,r2,1
    12d4:	e0bfd215 	stw	r2,-184(fp)
    12d8:	e0bfd217 	ldw	r2,-184(fp)
    12dc:	10800510 	cmplti	r2,r2,20
    12e0:	103fe11e 	bne	r2,zero,1268 <main+0x59c>

	//End of your code here

while (1)
	{
		if(new_record_flag){ // if new record done, draw all objects again
    12e4:	00800074 	movhi	r2,1
    12e8:	10bb6004 	addi	r2,r2,-4736
    12ec:	1080000b 	ldhu	r2,0(r2)
    12f0:	10bfffcc 	andi	r2,r2,65535
    12f4:	10a0001c 	xori	r2,r2,32768
    12f8:	10a00004 	addi	r2,r2,-32768
    12fc:	1005003a 	cmpeq	r2,r2,zero
    1300:	10007f1e 	bne	r2,zero,1500 <main+0x834>
			color = 0x5550;		// a dark grey color
    1304:	00955404 	movi	r2,21840
    1308:	e0bfba0d 	sth	r2,-280(fp)
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
    130c:	e0ffba0f 	ldh	r3,-280(fp)
    1310:	e0bfbd17 	ldw	r2,-268(fp)
    1314:	d8800015 	stw	r2,0(sp)
    1318:	d8c00115 	stw	r3,4(sp)
    131c:	d8000215 	stw	zero,8(sp)
    1320:	e13fc917 	ldw	r4,-220(fp)
    1324:	000b883a 	mov	r5,zero
    1328:	000d883a 	mov	r6,zero
    132c:	e1ffbe17 	ldw	r7,-264(fp)
    1330:	0007c340 	call	7c34 <alt_up_pixel_buffer_dma_draw_box>
				screen_y, color, 0); // fill the screen
			record_box_x1 = 35; record_box_x2 = 100; record_box_y1 = 20; record_box_y2 = 64;
    1334:	008008c4 	movi	r2,35
    1338:	e0bfb915 	stw	r2,-284(fp)
    133c:	00801904 	movi	r2,100
    1340:	e0bfb815 	stw	r2,-288(fp)
    1344:	00800504 	movi	r2,20
    1348:	e0bfb715 	stw	r2,-292(fp)
    134c:	00801004 	movi	r2,64
    1350:	e0bfb615 	stw	r2,-296(fp)
			// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
			color = 0x6F00;		// a bad yellow color
    1354:	009bc004 	movi	r2,28416
    1358:	e0bfba0d 	sth	r2,-280(fp)
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, record_box_x1, record_box_y1,
    135c:	e0ffba0f 	ldh	r3,-280(fp)
    1360:	e0bfb617 	ldw	r2,-296(fp)
    1364:	d8800015 	stw	r2,0(sp)
    1368:	d8c00115 	stw	r3,4(sp)
    136c:	d8000215 	stw	zero,8(sp)
    1370:	e13fc917 	ldw	r4,-220(fp)
    1374:	e17fb917 	ldw	r5,-284(fp)
    1378:	e1bfb717 	ldw	r6,-292(fp)
    137c:	e1ffb817 	ldw	r7,-288(fp)
    1380:	0007c340 	call	7c34 <alt_up_pixel_buffer_dma_draw_box>
											record_box_x2, record_box_y2, color, 0);
			play_box_x1 = 125; play_box_x2 = 190; play_box_y1 = 20; play_box_y2 = 64;
    1384:	00801f44 	movi	r2,125
    1388:	e0bfb515 	stw	r2,-300(fp)
    138c:	00802f84 	movi	r2,190
    1390:	e0bfb415 	stw	r2,-304(fp)
    1394:	00800504 	movi	r2,20
    1398:	e0bfb315 	stw	r2,-308(fp)
    139c:	00801004 	movi	r2,64
    13a0:	e0bfb215 	stw	r2,-312(fp)
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, play_box_x1, play_box_y1,
    13a4:	e0ffba0f 	ldh	r3,-280(fp)
    13a8:	e0bfb217 	ldw	r2,-312(fp)
    13ac:	d8800015 	stw	r2,0(sp)
    13b0:	d8c00115 	stw	r3,4(sp)
    13b4:	d8000215 	stw	zero,8(sp)
    13b8:	e13fc917 	ldw	r4,-220(fp)
    13bc:	e17fb517 	ldw	r5,-300(fp)
    13c0:	e1bfb317 	ldw	r6,-308(fp)
    13c4:	e1ffb417 	ldw	r7,-304(fp)
    13c8:	0007c340 	call	7c34 <alt_up_pixel_buffer_dma_draw_box>
											play_box_x2, play_box_y2, color, 0);
			Denoise_box_x1 = 215; Denoise_box_x2 = 280; Denoise_box_y1 = 20; Denoise_box_y2 = 64;
    13cc:	008035c4 	movi	r2,215
    13d0:	e0bfb115 	stw	r2,-316(fp)
    13d4:	00804604 	movi	r2,280
    13d8:	e0bfb015 	stw	r2,-320(fp)
    13dc:	00800504 	movi	r2,20
    13e0:	e0bfaf15 	stw	r2,-324(fp)
    13e4:	00801004 	movi	r2,64
    13e8:	e0bfae15 	stw	r2,-328(fp)
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Denoise_box_x1, Denoise_box_y1,
    13ec:	e0ffba0f 	ldh	r3,-280(fp)
    13f0:	e0bfae17 	ldw	r2,-328(fp)
    13f4:	d8800015 	stw	r2,0(sp)
    13f8:	d8c00115 	stw	r3,4(sp)
    13fc:	d8000215 	stw	zero,8(sp)
    1400:	e13fc917 	ldw	r4,-220(fp)
    1404:	e17fb117 	ldw	r5,-316(fp)
    1408:	e1bfaf17 	ldw	r6,-324(fp)
    140c:	e1ffb017 	ldw	r7,-320(fp)
    1410:	0007c340 	call	7c34 <alt_up_pixel_buffer_dma_draw_box>
											Denoise_box_x2, Denoise_box_y2, color, 0);

			alt_up_char_buffer_string (char_buffer_dev, text_record, 14, 10);
    1414:	e17ffc04 	addi	r5,fp,-16
    1418:	e13fca17 	ldw	r4,-216(fp)
    141c:	01800384 	movi	r6,14
    1420:	01c00284 	movi	r7,10
    1424:	000769c0 	call	769c <alt_up_char_buffer_string>
			alt_up_char_buffer_string (char_buffer_dev, text_play, 37, 10);
    1428:	e17ff984 	addi	r5,fp,-26
    142c:	e13fca17 	ldw	r4,-216(fp)
    1430:	01800944 	movi	r6,37
    1434:	01c00284 	movi	r7,10
    1438:	000769c0 	call	769c <alt_up_char_buffer_string>
			alt_up_char_buffer_string (char_buffer_dev, text_Denoise, 59, 10);
    143c:	e17ff704 	addi	r5,fp,-36
    1440:	e13fca17 	ldw	r4,-216(fp)
    1444:	01800ec4 	movi	r6,59
    1448:	01c00284 	movi	r7,10
    144c:	000769c0 	call	769c <alt_up_char_buffer_string>
			for(i = 0; i < N; i++){
    1450:	e03fd215 	stw	zero,-184(fp)
    1454:	00002206 	br	14e0 <main+0x814>
				short color;
				color = 0x6000;		// a bad yellow color
    1458:	00980004 	movi	r2,24576
    145c:	e0bfa90d 	sth	r2,-348(fp)
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, rects[i][0], 200 - heights[i],
    1460:	e0bfd217 	ldw	r2,-184(fp)
    1464:	00c01ef4 	movhi	r3,123
    1468:	18c84904 	addi	r3,r3,8484
    146c:	100490fa 	slli	r2,r2,3
    1470:	10c5883a 	add	r2,r2,r3
    1474:	11400017 	ldw	r5,0(r2)
    1478:	e0bfd217 	ldw	r2,-184(fp)
    147c:	00c00074 	movhi	r3,1
    1480:	18c36304 	addi	r3,r3,3468
    1484:	1085883a 	add	r2,r2,r2
    1488:	1085883a 	add	r2,r2,r2
    148c:	10c5883a 	add	r2,r2,r3
    1490:	10c00017 	ldw	r3,0(r2)
    1494:	00803204 	movi	r2,200
    1498:	10cdc83a 	sub	r6,r2,r3
    149c:	e0bfd217 	ldw	r2,-184(fp)
    14a0:	00c01ef4 	movhi	r3,123
    14a4:	18c84904 	addi	r3,r3,8484
    14a8:	100490fa 	slli	r2,r2,3
    14ac:	10c5883a 	add	r2,r2,r3
    14b0:	10800104 	addi	r2,r2,4
    14b4:	11c00017 	ldw	r7,0(r2)
    14b8:	e0ffa90f 	ldh	r3,-348(fp)
    14bc:	00803204 	movi	r2,200
    14c0:	d8800015 	stw	r2,0(sp)
    14c4:	d8c00115 	stw	r3,4(sp)
    14c8:	d8000215 	stw	zero,8(sp)
    14cc:	e13fc917 	ldw	r4,-220(fp)
    14d0:	0007c340 	call	7c34 <alt_up_pixel_buffer_dma_draw_box>
											Denoise_box_x2, Denoise_box_y2, color, 0);

			alt_up_char_buffer_string (char_buffer_dev, text_record, 14, 10);
			alt_up_char_buffer_string (char_buffer_dev, text_play, 37, 10);
			alt_up_char_buffer_string (char_buffer_dev, text_Denoise, 59, 10);
			for(i = 0; i < N; i++){
    14d4:	e0bfd217 	ldw	r2,-184(fp)
    14d8:	10800044 	addi	r2,r2,1
    14dc:	e0bfd215 	stw	r2,-184(fp)
    14e0:	e0bfd217 	ldw	r2,-184(fp)
    14e4:	10800510 	cmplti	r2,r2,20
    14e8:	103fdb1e 	bne	r2,zero,1458 <main+0x78c>
				short color;
				color = 0x6000;		// a bad yellow color
				alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, rects[i][0], 200 - heights[i],
											rects[i][1], 200, color, 0);
			}
			rect_th = 0;
    14ec:	d027e315 	stw	zero,-24692(gp)
			new_record_flag = 0;
    14f0:	00800074 	movhi	r2,1
    14f4:	10bb6004 	addi	r2,r2,-4736
    14f8:	1000000d 	sth	zero,0(r2)
			all_drawn = 0;
    14fc:	d027e20d 	sth	zero,-24696(gp)
		}
		if(flag_play){ // if each N data passed flag_play will be 1 and we should draw a new rect
    1500:	00800074 	movhi	r2,1
    1504:	10833a04 	addi	r2,r2,3304
    1508:	1080000b 	ldhu	r2,0(r2)
    150c:	10bfffcc 	andi	r2,r2,65535
    1510:	10a0001c 	xori	r2,r2,32768
    1514:	10a00004 	addi	r2,r2,-32768
    1518:	1005003a 	cmpeq	r2,r2,zero
    151c:	1000231e 	bne	r2,zero,15ac <main+0x8e0>
			color = 0x400F;
    1520:	009003c4 	movi	r2,16399
    1524:	e0bfba0d 	sth	r2,-280(fp)
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, rects[rect_th][0], 205,
    1528:	d0a7e317 	ldw	r2,-24692(gp)
    152c:	00c01ef4 	movhi	r3,123
    1530:	18c84904 	addi	r3,r3,8484
    1534:	100490fa 	slli	r2,r2,3
    1538:	10c5883a 	add	r2,r2,r3
    153c:	11400017 	ldw	r5,0(r2)
    1540:	d0a7e317 	ldw	r2,-24692(gp)
    1544:	00c01ef4 	movhi	r3,123
    1548:	18c84904 	addi	r3,r3,8484
    154c:	100490fa 	slli	r2,r2,3
    1550:	10c5883a 	add	r2,r2,r3
    1554:	10800104 	addi	r2,r2,4
    1558:	11c00017 	ldw	r7,0(r2)
    155c:	e0ffba0f 	ldh	r3,-280(fp)
    1560:	00803704 	movi	r2,220
    1564:	d8800015 	stw	r2,0(sp)
    1568:	d8c00115 	stw	r3,4(sp)
    156c:	d8000215 	stw	zero,8(sp)
    1570:	e13fc917 	ldw	r4,-220(fp)
    1574:	01803344 	movi	r6,205
    1578:	0007c340 	call	7c34 <alt_up_pixel_buffer_dma_draw_box>
											rects[rect_th][1], 220, color, 0);
			flag_play = 0;
    157c:	00800074 	movhi	r2,1
    1580:	10833a04 	addi	r2,r2,3304
    1584:	1000000d 	sth	zero,0(r2)
			rect_th++;
    1588:	d0a7e317 	ldw	r2,-24692(gp)
    158c:	10800044 	addi	r2,r2,1
    1590:	d0a7e315 	stw	r2,-24692(gp)
			if(rect_th > N){
    1594:	d0a7e317 	ldw	r2,-24692(gp)
    1598:	10800550 	cmplti	r2,r2,21
    159c:	1000031e 	bne	r2,zero,15ac <main+0x8e0>
				rect_th = 0;
    15a0:	d027e315 	stw	zero,-24692(gp)
				all_drawn = 1;
    15a4:	00800044 	movi	r2,1
    15a8:	d0a7e20d 	sth	r2,-24696(gp)
		/* also, display any PS/2 data (from its interrupt service routine) on HEX displays */
		// HEX_PS2 (byte1, byte2, byte3);


		
		if(flag_mouse){
    15ac:	00800074 	movhi	r2,1
    15b0:	10833cc4 	addi	r2,r2,3315
    15b4:	10800003 	ldbu	r2,0(r2)
    15b8:	10803fcc 	andi	r2,r2,255
    15bc:	1005003a 	cmpeq	r2,r2,zero
    15c0:	1000061e 	bne	r2,zero,15dc <main+0x910>
			Mouse_ISR(&up_dev);
    15c4:	01000fb4 	movhi	r4,62
    15c8:	21060104 	addi	r4,r4,6148
    15cc:	0001d100 	call	1d10 <Mouse_ISR>
			flag_mouse = 0;
    15d0:	00800074 	movhi	r2,1
    15d4:	10833cc4 	addi	r2,r2,3315
    15d8:	10000005 	stb	zero,0(r2)
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, pre_x_axis_mouse - 2, pre_y_axis_mouse - 2,
		// 								pre_x_axis_mouse + 2, pre_y_axis_mouse + 2, color, 0);
		// // short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
    15dc:	d0a7e48b 	ldhu	r2,-24686(gp)
    15e0:	e0ffd38f 	ldh	r3,-178(fp)
    15e4:	10bfffcc 	andi	r2,r2,65535
    15e8:	10a0001c 	xori	r2,r2,32768
    15ec:	10a00004 	addi	r2,r2,-32768
    15f0:	1880061e 	bne	r3,r2,160c <main+0x940>
    15f4:	d0a7e40b 	ldhu	r2,-24688(gp)
    15f8:	e0ffd30f 	ldh	r3,-180(fp)
    15fc:	10bfffcc 	andi	r2,r2,65535
    1600:	10a0001c 	xori	r2,r2,32768
    1604:	10a00004 	addi	r2,r2,-32768
    1608:	18803226 	beq	r3,r2,16d4 <main+0xa08>
			for(j = 0; j < 8; j++){ //clear previous mouse cursor
    160c:	e03fd115 	stw	zero,-188(fp)
    1610:	00002d06 	br	16c8 <main+0x9fc>
				for(i = 0; i < 16; i++){
    1614:	e03fd215 	stw	zero,-184(fp)
    1618:	00002506 	br	16b0 <main+0x9e4>
					if(cursor_shape[i][j] != -1)
    161c:	e0bfd217 	ldw	r2,-184(fp)
    1620:	e0ffd117 	ldw	r3,-188(fp)
    1624:	01000074 	movhi	r4,1
    1628:	2133af04 	addi	r4,r4,-12612
    162c:	100490fa 	slli	r2,r2,3
    1630:	10c5883a 	add	r2,r2,r3
    1634:	1085883a 	add	r2,r2,r2
    1638:	1105883a 	add	r2,r2,r4
    163c:	1080000b 	ldhu	r2,0(r2)
    1640:	10bfffcc 	andi	r2,r2,65535
    1644:	10a0001c 	xori	r2,r2,32768
    1648:	10a00004 	addi	r2,r2,-32768
    164c:	10bfffe0 	cmpeqi	r2,r2,-1
    1650:	1000141e 	bne	r2,zero,16a4 <main+0x9d8>
						alt_up_pixel_buffer_dma_draw(pixel_buffer_dev,
    1654:	e0ffd38f 	ldh	r3,-178(fp)
    1658:	e0bfd117 	ldw	r2,-188(fp)
    165c:	1889883a 	add	r4,r3,r2
    1660:	e0ffd30f 	ldh	r3,-180(fp)
    1664:	e0bfd217 	ldw	r2,-184(fp)
    1668:	188b883a 	add	r5,r3,r2
    166c:	00018b40 	call	18b4 <mouse_color>
    1670:	117fffcc 	andi	r5,r2,65535
    1674:	2960001c 	xori	r5,r5,32768
    1678:	29600004 	addi	r5,r5,-32768
    167c:	e0ffd38f 	ldh	r3,-178(fp)
    1680:	e0bfd117 	ldw	r2,-188(fp)
    1684:	1885883a 	add	r2,r3,r2
    1688:	100d883a 	mov	r6,r2
    168c:	e0ffd30f 	ldh	r3,-180(fp)
    1690:	e0bfd217 	ldw	r2,-184(fp)
    1694:	1885883a 	add	r2,r3,r2
    1698:	100f883a 	mov	r7,r2
    169c:	e13fc917 	ldw	r4,-220(fp)
    16a0:	000784c0 	call	784c <alt_up_pixel_buffer_dma_draw>
		// // short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
			for(j = 0; j < 8; j++){ //clear previous mouse cursor
				for(i = 0; i < 16; i++){
    16a4:	e0bfd217 	ldw	r2,-184(fp)
    16a8:	10800044 	addi	r2,r2,1
    16ac:	e0bfd215 	stw	r2,-184(fp)
    16b0:	e0bfd217 	ldw	r2,-184(fp)
    16b4:	10800410 	cmplti	r2,r2,16
    16b8:	103fd81e 	bne	r2,zero,161c <main+0x950>
		// 								pre_x_axis_mouse + 2, pre_y_axis_mouse + 2, color, 0);
		// // short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
			for(j = 0; j < 8; j++){ //clear previous mouse cursor
    16bc:	e0bfd117 	ldw	r2,-188(fp)
    16c0:	10800044 	addi	r2,r2,1
    16c4:	e0bfd115 	stw	r2,-188(fp)
    16c8:	e0bfd117 	ldw	r2,-188(fp)
    16cc:	10800210 	cmplti	r2,r2,8
    16d0:	103fd01e 	bne	r2,zero,1614 <main+0x948>
				}
			}
		}


		for(j =0; j < 8; j++){ //print mouse cursor
    16d4:	e03fd115 	stw	zero,-188(fp)
    16d8:	00003706 	br	17b8 <main+0xaec>
			for(i = 0; i < 16; i++){
    16dc:	e03fd215 	stw	zero,-184(fp)
    16e0:	00002f06 	br	17a0 <main+0xad4>
				if(cursor_shape[i][j] != -1)
    16e4:	e0bfd217 	ldw	r2,-184(fp)
    16e8:	e0ffd117 	ldw	r3,-188(fp)
    16ec:	01000074 	movhi	r4,1
    16f0:	2133af04 	addi	r4,r4,-12612
    16f4:	100490fa 	slli	r2,r2,3
    16f8:	10c5883a 	add	r2,r2,r3
    16fc:	1085883a 	add	r2,r2,r2
    1700:	1105883a 	add	r2,r2,r4
    1704:	1080000b 	ldhu	r2,0(r2)
    1708:	10bfffcc 	andi	r2,r2,65535
    170c:	10a0001c 	xori	r2,r2,32768
    1710:	10a00004 	addi	r2,r2,-32768
    1714:	10bfffe0 	cmpeqi	r2,r2,-1
    1718:	10001e1e 	bne	r2,zero,1794 <main+0xac8>
					alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, cursor_shape[i][j] * (-1),
    171c:	e0bfd217 	ldw	r2,-184(fp)
    1720:	e0ffd117 	ldw	r3,-188(fp)
    1724:	01000074 	movhi	r4,1
    1728:	2133af04 	addi	r4,r4,-12612
    172c:	100490fa 	slli	r2,r2,3
    1730:	10c5883a 	add	r2,r2,r3
    1734:	1085883a 	add	r2,r2,r2
    1738:	1105883a 	add	r2,r2,r4
    173c:	1080000b 	ldhu	r2,0(r2)
    1740:	10bfffcc 	andi	r2,r2,65535
    1744:	10a0001c 	xori	r2,r2,32768
    1748:	10a00004 	addi	r2,r2,-32768
    174c:	0085c83a 	sub	r2,zero,r2
    1750:	100b883a 	mov	r5,r2
    1754:	d0a7e48b 	ldhu	r2,-24686(gp)
    1758:	10ffffcc 	andi	r3,r2,65535
    175c:	18e0001c 	xori	r3,r3,32768
    1760:	18e00004 	addi	r3,r3,-32768
    1764:	e0bfd117 	ldw	r2,-188(fp)
    1768:	1885883a 	add	r2,r3,r2
    176c:	100d883a 	mov	r6,r2
    1770:	d0a7e40b 	ldhu	r2,-24688(gp)
    1774:	10ffffcc 	andi	r3,r2,65535
    1778:	18e0001c 	xori	r3,r3,32768
    177c:	18e00004 	addi	r3,r3,-32768
    1780:	e0bfd217 	ldw	r2,-184(fp)
    1784:	1885883a 	add	r2,r3,r2
    1788:	100f883a 	mov	r7,r2
    178c:	e13fc917 	ldw	r4,-220(fp)
    1790:	000784c0 	call	784c <alt_up_pixel_buffer_dma_draw>
			}
		}


		for(j =0; j < 8; j++){ //print mouse cursor
			for(i = 0; i < 16; i++){
    1794:	e0bfd217 	ldw	r2,-184(fp)
    1798:	10800044 	addi	r2,r2,1
    179c:	e0bfd215 	stw	r2,-184(fp)
    17a0:	e0bfd217 	ldw	r2,-184(fp)
    17a4:	10800410 	cmplti	r2,r2,16
    17a8:	103fce1e 	bne	r2,zero,16e4 <main+0xa18>
				}
			}
		}


		for(j =0; j < 8; j++){ //print mouse cursor
    17ac:	e0bfd117 	ldw	r2,-188(fp)
    17b0:	10800044 	addi	r2,r2,1
    17b4:	e0bfd115 	stw	r2,-188(fp)
    17b8:	e0bfd117 	ldw	r2,-188(fp)
    17bc:	10800210 	cmplti	r2,r2,8
    17c0:	103fc61e 	bne	r2,zero,16dc <main+0xa10>
		}




		pre_x_axis_mouse = x_axis_mouse;
    17c4:	d0a7e48b 	ldhu	r2,-24686(gp)
    17c8:	e0bfd38d 	sth	r2,-178(fp)
		pre_y_axis_mouse = y_axis_mouse;
    17cc:	d0a7e40b 	ldhu	r2,-24688(gp)
    17d0:	e0bfd30d 	sth	r2,-180(fp)

		if(!flag_is_playing){
    17d4:	00800074 	movhi	r2,1
    17d8:	10833a84 	addi	r2,r2,3306
    17dc:	1080000b 	ldhu	r2,0(r2)
    17e0:	10bfffcc 	andi	r2,r2,65535
    17e4:	10a0001c 	xori	r2,r2,32768
    17e8:	10a00004 	addi	r2,r2,-32768
    17ec:	1004c03a 	cmpne	r2,r2,zero
    17f0:	10000d1e 	bne	r2,zero,1828 <main+0xb5c>
			command = command_det(valid_byte1); // 0:record, 1:play, 2:Denoise
    17f4:	00800074 	movhi	r2,1
    17f8:	10834104 	addi	r2,r2,3332
    17fc:	10800003 	ldbu	r2,0(r2)
    1800:	11003fcc 	andi	r4,r2,255
    1804:	00020700 	call	2070 <command_det>
    1808:	1007883a 	mov	r3,r2
    180c:	00800074 	movhi	r2,1
    1810:	10833c84 	addi	r2,r2,3314
    1814:	10c00005 	stb	r3,0(r2)
			run_command(&up_dev, pixel_buffer_dev);
    1818:	01000fb4 	movhi	r4,62
    181c:	21060104 	addi	r4,r4,6148
    1820:	e17fc917 	ldw	r5,-220(fp)
    1824:	0001f700 	call	1f70 <run_command>
		}

		if(command == 1){
    1828:	00800074 	movhi	r2,1
    182c:	10833c84 	addi	r2,r2,3314
    1830:	10800003 	ldbu	r2,0(r2)
    1834:	10803fcc 	andi	r2,r2,255
    1838:	10800058 	cmpnei	r2,r2,1
    183c:	1000131e 	bne	r2,zero,188c <main+0xbc0>
			color = 0x5550;
    1840:	00955404 	movi	r2,21840
    1844:	e0bfba0d 	sth	r2,-280(fp)
			alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, rects[0][0], 205,
    1848:	00801ef4 	movhi	r2,123
    184c:	10884904 	addi	r2,r2,8484
    1850:	11400017 	ldw	r5,0(r2)
    1854:	00801ef4 	movhi	r2,123
    1858:	10884904 	addi	r2,r2,8484
    185c:	11c02917 	ldw	r7,164(r2)
    1860:	e0ffba0f 	ldh	r3,-280(fp)
    1864:	00803704 	movi	r2,220
    1868:	d8800015 	stw	r2,0(sp)
    186c:	d8c00115 	stw	r3,4(sp)
    1870:	d8000215 	stw	zero,8(sp)
    1874:	e13fc917 	ldw	r4,-220(fp)
    1878:	01803344 	movi	r6,205
    187c:	0007c340 	call	7c34 <alt_up_pixel_buffer_dma_draw_box>
											rects[N][1], 220, color, 0);
			command = 0;
    1880:	00800074 	movhi	r2,1
    1884:	10833c84 	addi	r2,r2,3314
    1888:	10000005 	stb	zero,0(r2)
		}
		

		timeout = 0;
    188c:	00800074 	movhi	r2,1
    1890:	10833e04 	addi	r2,r2,3320
    1894:	10000015 	stw	zero,0(r2)
	}
    1898:	003e9206 	br	12e4 <main+0x618>
    189c:	e0bfff17 	ldw	r2,-4(fp)

}
    18a0:	e037883a 	mov	sp,fp
    18a4:	dfc00117 	ldw	ra,4(sp)
    18a8:	df000017 	ldw	fp,0(sp)
    18ac:	dec00204 	addi	sp,sp,8
    18b0:	f800283a 	ret

000018b4 <mouse_color>:
short mouse_color(int i, int j){
    18b4:	defff904 	addi	sp,sp,-28
    18b8:	df000615 	stw	fp,24(sp)
    18bc:	df000604 	addi	fp,sp,24
    18c0:	e13ffc15 	stw	r4,-16(fp)
    18c4:	e17ffd15 	stw	r5,-12(fp)
	if(i >= 35 && i <= 100 &&
    18c8:	e0bffc17 	ldw	r2,-16(fp)
    18cc:	108008d0 	cmplti	r2,r2,35
    18d0:	10000c1e 	bne	r2,zero,1904 <mouse_color+0x50>
    18d4:	e0bffc17 	ldw	r2,-16(fp)
    18d8:	10801948 	cmpgei	r2,r2,101
    18dc:	1000091e 	bne	r2,zero,1904 <mouse_color+0x50>
    18e0:	e0bffd17 	ldw	r2,-12(fp)
    18e4:	10800510 	cmplti	r2,r2,20
    18e8:	1000061e 	bne	r2,zero,1904 <mouse_color+0x50>
    18ec:	e0bffd17 	ldw	r2,-12(fp)
    18f0:	10801048 	cmpgei	r2,r2,65
    18f4:	1000031e 	bne	r2,zero,1904 <mouse_color+0x50>
		j >= 20 && j <= 64)
		return 0x6F00;
    18f8:	009bc004 	movi	r2,28416
    18fc:	e0bfff15 	stw	r2,-4(fp)
    1900:	00007a06 	br	1aec <mouse_color+0x238>
	else if(i >= 125 && i <= 190 &&
    1904:	e0bffc17 	ldw	r2,-16(fp)
    1908:	10801f50 	cmplti	r2,r2,125
    190c:	10000c1e 	bne	r2,zero,1940 <mouse_color+0x8c>
    1910:	e0bffc17 	ldw	r2,-16(fp)
    1914:	10802fc8 	cmpgei	r2,r2,191
    1918:	1000091e 	bne	r2,zero,1940 <mouse_color+0x8c>
    191c:	e0bffd17 	ldw	r2,-12(fp)
    1920:	10800510 	cmplti	r2,r2,20
    1924:	1000061e 	bne	r2,zero,1940 <mouse_color+0x8c>
    1928:	e0bffd17 	ldw	r2,-12(fp)
    192c:	10801048 	cmpgei	r2,r2,65
    1930:	1000031e 	bne	r2,zero,1940 <mouse_color+0x8c>
			j >= 20 && j <= 64)
		return 0x6F00;
    1934:	009bc004 	movi	r2,28416
    1938:	e0bfff15 	stw	r2,-4(fp)
    193c:	00006b06 	br	1aec <mouse_color+0x238>
	else if(i >= 215 && i <= 280 &&
    1940:	e0bffc17 	ldw	r2,-16(fp)
    1944:	108035d0 	cmplti	r2,r2,215
    1948:	10000c1e 	bne	r2,zero,197c <mouse_color+0xc8>
    194c:	e0bffc17 	ldw	r2,-16(fp)
    1950:	10804648 	cmpgei	r2,r2,281
    1954:	1000091e 	bne	r2,zero,197c <mouse_color+0xc8>
    1958:	e0bffd17 	ldw	r2,-12(fp)
    195c:	10800510 	cmplti	r2,r2,20
    1960:	1000061e 	bne	r2,zero,197c <mouse_color+0xc8>
    1964:	e0bffd17 	ldw	r2,-12(fp)
    1968:	10801048 	cmpgei	r2,r2,65
    196c:	1000031e 	bne	r2,zero,197c <mouse_color+0xc8>
			j >= 20 && j <= 64)
		return 0x6F00;
    1970:	009bc004 	movi	r2,28416
    1974:	e0bfff15 	stw	r2,-4(fp)
    1978:	00005c06 	br	1aec <mouse_color+0x238>
	int k;
	if(j <= 200){
    197c:	e0bffd17 	ldw	r2,-12(fp)
    1980:	10803248 	cmpgei	r2,r2,201
    1984:	1000281e 	bne	r2,zero,1a28 <mouse_color+0x174>
		for (k=0;k<N;k++){
    1988:	e03ffb15 	stw	zero,-20(fp)
    198c:	00002206 	br	1a18 <mouse_color+0x164>
			if(i >= rects[k][0] && i <= rects[k][1] && j >= 200 - heights[k])
    1990:	e0bffb17 	ldw	r2,-20(fp)
    1994:	00c01ef4 	movhi	r3,123
    1998:	18c84904 	addi	r3,r3,8484
    199c:	100490fa 	slli	r2,r2,3
    19a0:	10c5883a 	add	r2,r2,r3
    19a4:	10c00017 	ldw	r3,0(r2)
    19a8:	e0bffc17 	ldw	r2,-16(fp)
    19ac:	10c01716 	blt	r2,r3,1a0c <mouse_color+0x158>
    19b0:	e0bffb17 	ldw	r2,-20(fp)
    19b4:	00c01ef4 	movhi	r3,123
    19b8:	18c84904 	addi	r3,r3,8484
    19bc:	100490fa 	slli	r2,r2,3
    19c0:	10c5883a 	add	r2,r2,r3
    19c4:	10800104 	addi	r2,r2,4
    19c8:	10c00017 	ldw	r3,0(r2)
    19cc:	e0bffc17 	ldw	r2,-16(fp)
    19d0:	18800e16 	blt	r3,r2,1a0c <mouse_color+0x158>
    19d4:	e0bffb17 	ldw	r2,-20(fp)
    19d8:	00c00074 	movhi	r3,1
    19dc:	18c36304 	addi	r3,r3,3468
    19e0:	1085883a 	add	r2,r2,r2
    19e4:	1085883a 	add	r2,r2,r2
    19e8:	10c5883a 	add	r2,r2,r3
    19ec:	10c00017 	ldw	r3,0(r2)
    19f0:	00803204 	movi	r2,200
    19f4:	10c7c83a 	sub	r3,r2,r3
    19f8:	e0bffd17 	ldw	r2,-12(fp)
    19fc:	10c00316 	blt	r2,r3,1a0c <mouse_color+0x158>
				return 0x6000;
    1a00:	00980004 	movi	r2,24576
    1a04:	e0bfff15 	stw	r2,-4(fp)
    1a08:	00003806 	br	1aec <mouse_color+0x238>
	else if(i >= 215 && i <= 280 &&
			j >= 20 && j <= 64)
		return 0x6F00;
	int k;
	if(j <= 200){
		for (k=0;k<N;k++){
    1a0c:	e0bffb17 	ldw	r2,-20(fp)
    1a10:	10800044 	addi	r2,r2,1
    1a14:	e0bffb15 	stw	r2,-20(fp)
    1a18:	e0bffb17 	ldw	r2,-20(fp)
    1a1c:	10800510 	cmplti	r2,r2,20
    1a20:	103fdb1e 	bne	r2,zero,1990 <mouse_color+0xdc>
    1a24:	00002f06 	br	1ae4 <mouse_color+0x230>
			if(i >= rects[k][0] && i <= rects[k][1] && j >= 200 - heights[k])
				return 0x6000;
		}
	}
	else if(j>=205&&j<=220){
    1a28:	e0bffd17 	ldw	r2,-12(fp)
    1a2c:	10803350 	cmplti	r2,r2,205
    1a30:	10002c1e 	bne	r2,zero,1ae4 <mouse_color+0x230>
    1a34:	e0bffd17 	ldw	r2,-12(fp)
    1a38:	10803748 	cmpgei	r2,r2,221
    1a3c:	1000291e 	bne	r2,zero,1ae4 <mouse_color+0x230>
		int lim = (all_drawn == 1) ? 20 : rect_th;
    1a40:	d0a7e20b 	ldhu	r2,-24696(gp)
    1a44:	10bfffcc 	andi	r2,r2,65535
    1a48:	10a0001c 	xori	r2,r2,32768
    1a4c:	10a00004 	addi	r2,r2,-32768
    1a50:	10800060 	cmpeqi	r2,r2,1
    1a54:	1000031e 	bne	r2,zero,1a64 <mouse_color+0x1b0>
    1a58:	d0a7e317 	ldw	r2,-24692(gp)
    1a5c:	e0bffe15 	stw	r2,-8(fp)
    1a60:	00000206 	br	1a6c <mouse_color+0x1b8>
    1a64:	00800504 	movi	r2,20
    1a68:	e0bffe15 	stw	r2,-8(fp)
    1a6c:	e0bffe17 	ldw	r2,-8(fp)
    1a70:	e0bffa15 	stw	r2,-24(fp)
		for (k=0;k<lim;k++){
    1a74:	e03ffb15 	stw	zero,-20(fp)
    1a78:	00001706 	br	1ad8 <mouse_color+0x224>
			if(i >= rects[k][0] && i <= rects[k][1])
    1a7c:	e0bffb17 	ldw	r2,-20(fp)
    1a80:	00c01ef4 	movhi	r3,123
    1a84:	18c84904 	addi	r3,r3,8484
    1a88:	100490fa 	slli	r2,r2,3
    1a8c:	10c5883a 	add	r2,r2,r3
    1a90:	10c00017 	ldw	r3,0(r2)
    1a94:	e0bffc17 	ldw	r2,-16(fp)
    1a98:	10c00c16 	blt	r2,r3,1acc <mouse_color+0x218>
    1a9c:	e0bffb17 	ldw	r2,-20(fp)
    1aa0:	00c01ef4 	movhi	r3,123
    1aa4:	18c84904 	addi	r3,r3,8484
    1aa8:	100490fa 	slli	r2,r2,3
    1aac:	10c5883a 	add	r2,r2,r3
    1ab0:	10800104 	addi	r2,r2,4
    1ab4:	10c00017 	ldw	r3,0(r2)
    1ab8:	e0bffc17 	ldw	r2,-16(fp)
    1abc:	18800316 	blt	r3,r2,1acc <mouse_color+0x218>
				return 0x400F;
    1ac0:	009003c4 	movi	r2,16399
    1ac4:	e0bfff15 	stw	r2,-4(fp)
    1ac8:	00000806 	br	1aec <mouse_color+0x238>
				return 0x6000;
		}
	}
	else if(j>=205&&j<=220){
		int lim = (all_drawn == 1) ? 20 : rect_th;
		for (k=0;k<lim;k++){
    1acc:	e0bffb17 	ldw	r2,-20(fp)
    1ad0:	10800044 	addi	r2,r2,1
    1ad4:	e0bffb15 	stw	r2,-20(fp)
    1ad8:	e0fffb17 	ldw	r3,-20(fp)
    1adc:	e0bffa17 	ldw	r2,-24(fp)
    1ae0:	18bfe616 	blt	r3,r2,1a7c <mouse_color+0x1c8>
			if(i >= rects[k][0] && i <= rects[k][1])
				return 0x400F;
		}
	}

	return 0x5550;
    1ae4:	00955404 	movi	r2,21840
    1ae8:	e0bfff15 	stw	r2,-4(fp)
    1aec:	e0bfff17 	ldw	r2,-4(fp)
}
    1af0:	e037883a 	mov	sp,fp
    1af4:	df000017 	ldw	fp,0(sp)
    1af8:	dec00104 	addi	sp,sp,4
    1afc:	f800283a 	ret

00001b00 <setMouseBounds>:
void setMouseBounds(unsigned char info, unsigned char x_move, unsigned char y_move) {
    1b00:	defffb04 	addi	sp,sp,-20
    1b04:	df000415 	stw	fp,16(sp)
    1b08:	df000404 	addi	fp,sp,16
    1b0c:	e13ffd05 	stb	r4,-12(fp)
    1b10:	e17ffe05 	stb	r5,-8(fp)
    1b14:	e1bfff05 	stb	r6,-4(fp)
	signed short x_move_s = x_move, y_move_s = y_move;
    1b18:	e0bffe03 	ldbu	r2,-8(fp)
    1b1c:	e0bffc8d 	sth	r2,-14(fp)
    1b20:	e0bfff03 	ldbu	r2,-4(fp)
    1b24:	e0bffc0d 	sth	r2,-16(fp)
	if(x_move_s >> 7 & 0x01)x_move_s -= 256;
    1b28:	e0bffc8f 	ldh	r2,-14(fp)
    1b2c:	1005d1fa 	srai	r2,r2,7
    1b30:	10bfffcc 	andi	r2,r2,65535
    1b34:	1080004c 	andi	r2,r2,1
    1b38:	10803fcc 	andi	r2,r2,255
    1b3c:	1005003a 	cmpeq	r2,r2,zero
    1b40:	1000031e 	bne	r2,zero,1b50 <setMouseBounds+0x50>
    1b44:	e0bffc8b 	ldhu	r2,-14(fp)
    1b48:	10bfc004 	addi	r2,r2,-256
    1b4c:	e0bffc8d 	sth	r2,-14(fp)
	if(y_move_s >> 7 & 0x01)y_move_s -= 256;
    1b50:	e0bffc0f 	ldh	r2,-16(fp)
    1b54:	1005d1fa 	srai	r2,r2,7
    1b58:	10bfffcc 	andi	r2,r2,65535
    1b5c:	1080004c 	andi	r2,r2,1
    1b60:	10803fcc 	andi	r2,r2,255
    1b64:	1005003a 	cmpeq	r2,r2,zero
    1b68:	1000031e 	bne	r2,zero,1b78 <setMouseBounds+0x78>
    1b6c:	e0bffc0b 	ldhu	r2,-16(fp)
    1b70:	10bfc004 	addi	r2,r2,-256
    1b74:	e0bffc0d 	sth	r2,-16(fp)

	if((info >> 6) & 0x01){ // x overflow = 1
    1b78:	e0bffd03 	ldbu	r2,-12(fp)
    1b7c:	1004d1ba 	srli	r2,r2,6
    1b80:	10803fcc 	andi	r2,r2,255
    1b84:	1080004c 	andi	r2,r2,1
    1b88:	10803fcc 	andi	r2,r2,255
    1b8c:	1005003a 	cmpeq	r2,r2,zero
    1b90:	1000151e 	bne	r2,zero,1be8 <setMouseBounds+0xe8>
		if((info >> 4) & 0x01)
    1b94:	e0bffd03 	ldbu	r2,-12(fp)
    1b98:	1004d13a 	srli	r2,r2,4
    1b9c:	10803fcc 	andi	r2,r2,255
    1ba0:	1080004c 	andi	r2,r2,1
    1ba4:	10803fcc 	andi	r2,r2,255
    1ba8:	1005003a 	cmpeq	r2,r2,zero
    1bac:	1000071e 	bne	r2,zero,1bcc <setMouseBounds+0xcc>
			x_axis_mouse += (-255 + x_move_s);
    1bb0:	d0a7e48b 	ldhu	r2,-24686(gp)
    1bb4:	1007883a 	mov	r3,r2
    1bb8:	e0bffc8b 	ldhu	r2,-14(fp)
    1bbc:	1885883a 	add	r2,r3,r2
    1bc0:	10bfc044 	addi	r2,r2,-255
    1bc4:	d0a7e48d 	sth	r2,-24686(gp)
    1bc8:	00000c06 	br	1bfc <setMouseBounds+0xfc>
		else
			x_axis_mouse += (+255 + x_move_s);
    1bcc:	d0a7e48b 	ldhu	r2,-24686(gp)
    1bd0:	1007883a 	mov	r3,r2
    1bd4:	e0bffc8b 	ldhu	r2,-14(fp)
    1bd8:	1885883a 	add	r2,r3,r2
    1bdc:	10803fc4 	addi	r2,r2,255
    1be0:	d0a7e48d 	sth	r2,-24686(gp)
    1be4:	00000506 	br	1bfc <setMouseBounds+0xfc>
	}
	else // x overflow = 0
		x_axis_mouse += x_move_s;
    1be8:	d0a7e48b 	ldhu	r2,-24686(gp)
    1bec:	1007883a 	mov	r3,r2
    1bf0:	e0bffc8b 	ldhu	r2,-14(fp)
    1bf4:	1885883a 	add	r2,r3,r2
    1bf8:	d0a7e48d 	sth	r2,-24686(gp)

	if((info >> 7) & 0x01){ // y overflow = 1
    1bfc:	e0bffd03 	ldbu	r2,-12(fp)
    1c00:	1004d1fa 	srli	r2,r2,7
    1c04:	10803fcc 	andi	r2,r2,255
    1c08:	1080004c 	andi	r2,r2,1
    1c0c:	10803fcc 	andi	r2,r2,255
    1c10:	1005003a 	cmpeq	r2,r2,zero
    1c14:	1000151e 	bne	r2,zero,1c6c <setMouseBounds+0x16c>
		if((info >> 5) & 0x01)
    1c18:	e0bffd03 	ldbu	r2,-12(fp)
    1c1c:	1004d17a 	srli	r2,r2,5
    1c20:	10803fcc 	andi	r2,r2,255
    1c24:	1080004c 	andi	r2,r2,1
    1c28:	10803fcc 	andi	r2,r2,255
    1c2c:	1005003a 	cmpeq	r2,r2,zero
    1c30:	1000071e 	bne	r2,zero,1c50 <setMouseBounds+0x150>
			y_axis_mouse -= (-255 + y_move_s);
    1c34:	d0a7e40b 	ldhu	r2,-24688(gp)
    1c38:	1007883a 	mov	r3,r2
    1c3c:	e0bffc0b 	ldhu	r2,-16(fp)
    1c40:	1885c83a 	sub	r2,r3,r2
    1c44:	10803fc4 	addi	r2,r2,255
    1c48:	d0a7e40d 	sth	r2,-24688(gp)
    1c4c:	00000c06 	br	1c80 <setMouseBounds+0x180>
		else
			y_axis_mouse -= (+255 + y_move_s);
    1c50:	d0a7e40b 	ldhu	r2,-24688(gp)
    1c54:	1007883a 	mov	r3,r2
    1c58:	e0bffc0b 	ldhu	r2,-16(fp)
    1c5c:	1885c83a 	sub	r2,r3,r2
    1c60:	10bfc044 	addi	r2,r2,-255
    1c64:	d0a7e40d 	sth	r2,-24688(gp)
    1c68:	00000506 	br	1c80 <setMouseBounds+0x180>
	}
	else // y overflow = 0
		y_axis_mouse -= y_move_s;
    1c6c:	d0a7e40b 	ldhu	r2,-24688(gp)
    1c70:	1007883a 	mov	r3,r2
    1c74:	e0bffc0b 	ldhu	r2,-16(fp)
    1c78:	1885c83a 	sub	r2,r3,r2
    1c7c:	d0a7e40d 	sth	r2,-24688(gp)
	// alt_printf(buf);
	// sprintf(buf, "y_axis_mouse: %d\n", (int) y_axis_mouse);
	// alt_printf(buf);
	//Debugging end

	if(x_axis_mouse < 2) x_axis_mouse = 2;
    1c80:	d0a7e48b 	ldhu	r2,-24686(gp)
    1c84:	10bfffcc 	andi	r2,r2,65535
    1c88:	10a0001c 	xori	r2,r2,32768
    1c8c:	10a00004 	addi	r2,r2,-32768
    1c90:	10800088 	cmpgei	r2,r2,2
    1c94:	1000021e 	bne	r2,zero,1ca0 <setMouseBounds+0x1a0>
    1c98:	00800084 	movi	r2,2
    1c9c:	d0a7e48d 	sth	r2,-24686(gp)
	if(x_axis_mouse > X_BOUND - 2) x_axis_mouse = X_BOUND - 2;
    1ca0:	d0a7e48b 	ldhu	r2,-24686(gp)
    1ca4:	10bfffcc 	andi	r2,r2,65535
    1ca8:	10a0001c 	xori	r2,r2,32768
    1cac:	10a00004 	addi	r2,r2,-32768
    1cb0:	10804f90 	cmplti	r2,r2,318
    1cb4:	1000021e 	bne	r2,zero,1cc0 <setMouseBounds+0x1c0>
    1cb8:	00804f44 	movi	r2,317
    1cbc:	d0a7e48d 	sth	r2,-24686(gp)
	if(y_axis_mouse < 2) y_axis_mouse = 2;
    1cc0:	d0a7e40b 	ldhu	r2,-24688(gp)
    1cc4:	10bfffcc 	andi	r2,r2,65535
    1cc8:	10a0001c 	xori	r2,r2,32768
    1ccc:	10a00004 	addi	r2,r2,-32768
    1cd0:	10800088 	cmpgei	r2,r2,2
    1cd4:	1000021e 	bne	r2,zero,1ce0 <setMouseBounds+0x1e0>
    1cd8:	00800084 	movi	r2,2
    1cdc:	d0a7e40d 	sth	r2,-24688(gp)
	if(y_axis_mouse > Y_BOUND - 2) y_axis_mouse = Y_BOUND - 2;
    1ce0:	d0a7e40b 	ldhu	r2,-24688(gp)
    1ce4:	10bfffcc 	andi	r2,r2,65535
    1ce8:	10a0001c 	xori	r2,r2,32768
    1cec:	10a00004 	addi	r2,r2,-32768
    1cf0:	10803b90 	cmplti	r2,r2,238
    1cf4:	1000021e 	bne	r2,zero,1d00 <setMouseBounds+0x200>
    1cf8:	00803b44 	movi	r2,237
    1cfc:	d0a7e40d 	sth	r2,-24688(gp)
}
    1d00:	e037883a 	mov	sp,fp
    1d04:	df000017 	ldw	fp,0(sp)
    1d08:	dec00104 	addi	sp,sp,4
    1d0c:	f800283a 	ret

00001d10 <Mouse_ISR>:


void Mouse_ISR (struct alt_up_dev *up_dev) {
    1d10:	defff304 	addi	sp,sp,-52
    1d14:	dfc00c15 	stw	ra,48(sp)
    1d18:	df000b15 	stw	fp,44(sp)
    1d1c:	df000b04 	addi	fp,sp,44
    1d20:	e13fff15 	stw	r4,-4(fp)
	unsigned char b1 = valid_byte1;
    1d24:	00800074 	movhi	r2,1
    1d28:	10834104 	addi	r2,r2,3332
    1d2c:	10800003 	ldbu	r2,0(r2)
    1d30:	e0bff785 	stb	r2,-34(fp)
	unsigned char b2 = valid_byte2;
    1d34:	00800074 	movhi	r2,1
    1d38:	10833d04 	addi	r2,r2,3316
    1d3c:	10800003 	ldbu	r2,0(r2)
    1d40:	e0bff745 	stb	r2,-35(fp)
	unsigned char b3 = valid_byte3;
    1d44:	00800074 	movhi	r2,1
    1d48:	10833bc4 	addi	r2,r2,3311
    1d4c:	10800003 	ldbu	r2,0(r2)
    1d50:	e0bff705 	stb	r2,-36(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    1d54:	00840034 	movhi	r2,4096
    1d58:	10800804 	addi	r2,r2,32
    1d5c:	e0bff615 	stw	r2,-40(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    1d60:	00840034 	movhi	r2,4096
    1d64:	10800c04 	addi	r2,r2,48
    1d68:	e0bff515 	stw	r2,-44(fp)
	unsigned char hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    1d6c:	e03ff7c5 	stb	zero,-33(fp)
    1d70:	e03ff805 	stb	zero,-32(fp)
    1d74:	e03ff845 	stb	zero,-31(fp)
    1d78:	e03ff885 	stb	zero,-30(fp)
    1d7c:	e03ff8c5 	stb	zero,-29(fp)
    1d80:	e03ff905 	stb	zero,-28(fp)
    1d84:	e03ff945 	stb	zero,-27(fp)
    1d88:	e03ff985 	stb	zero,-26(fp)
	unsigned char button_mouse[3];

	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 
											0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
    1d8c:	00800074 	movhi	r2,1
    1d90:	10b2f784 	addi	r2,r2,-13346
    1d94:	e13ffa84 	addi	r4,fp,-22
    1d98:	100b883a 	mov	r5,r2
    1d9c:	01800404 	movi	r6,16
    1da0:	0003ee00 	call	3ee0 <memcpy>


	alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0); // Turn off LEDRs
    1da4:	e0bfff17 	ldw	r2,-4(fp)
    1da8:	10800217 	ldw	r2,8(r2)
    1dac:	10800a17 	ldw	r2,40(r2)
    1db0:	10000035 	stwio	zero,0(r2)
	
	if(b1 & 0x01){
    1db4:	e0bff783 	ldbu	r2,-34(fp)
    1db8:	1080004c 	andi	r2,r2,1
    1dbc:	10803fcc 	andi	r2,r2,255
    1dc0:	1005003a 	cmpeq	r2,r2,zero
    1dc4:	1000071e 	bne	r2,zero,1de4 <Mouse_ISR+0xd4>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x1);/*LED0 -> Left btn*/
    1dc8:	e0bfff17 	ldw	r2,-4(fp)
    1dcc:	10800217 	ldw	r2,8(r2)
    1dd0:	10800a17 	ldw	r2,40(r2)
    1dd4:	1007883a 	mov	r3,r2
    1dd8:	00800044 	movi	r2,1
    1ddc:	18800035 	stwio	r2,0(r3)
    1de0:	00001506 	br	1e38 <Mouse_ISR+0x128>
	}
	else if(b1 & 0x02){
    1de4:	e0bff783 	ldbu	r2,-34(fp)
    1de8:	1080008c 	andi	r2,r2,2
    1dec:	1005003a 	cmpeq	r2,r2,zero
    1df0:	1000071e 	bne	r2,zero,1e10 <Mouse_ISR+0x100>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x2);/*LED1 -> Right btn*/
    1df4:	e0bfff17 	ldw	r2,-4(fp)
    1df8:	10800217 	ldw	r2,8(r2)
    1dfc:	10800a17 	ldw	r2,40(r2)
    1e00:	1007883a 	mov	r3,r2
    1e04:	00800084 	movi	r2,2
    1e08:	18800035 	stwio	r2,0(r3)
    1e0c:	00000a06 	br	1e38 <Mouse_ISR+0x128>
	}
	else if(b1 & 0x04){
    1e10:	e0bff783 	ldbu	r2,-34(fp)
    1e14:	1080010c 	andi	r2,r2,4
    1e18:	1005003a 	cmpeq	r2,r2,zero
    1e1c:	1000061e 	bne	r2,zero,1e38 <Mouse_ISR+0x128>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x4);/*LED2 -> Middle btn*/
    1e20:	e0bfff17 	ldw	r2,-4(fp)
    1e24:	10800217 	ldw	r2,8(r2)
    1e28:	10800a17 	ldw	r2,40(r2)
    1e2c:	1007883a 	mov	r3,r2
    1e30:	00800104 	movi	r2,4
    1e34:	18800035 	stwio	r2,0(r3)
	}

	hex_segs[0] = seven_seg_decode_table [b3 & 0x0F];
    1e38:	e0bff703 	ldbu	r2,-36(fp)
    1e3c:	10c003cc 	andi	r3,r2,15
    1e40:	e0bffa84 	addi	r2,fp,-22
    1e44:	10c5883a 	add	r2,r2,r3
    1e48:	10800003 	ldbu	r2,0(r2)
    1e4c:	e0bff7c5 	stb	r2,-33(fp)
	hex_segs[1] = seven_seg_decode_table [(b3 >> 4) & 0x0F];
    1e50:	e0bff703 	ldbu	r2,-36(fp)
    1e54:	1004d13a 	srli	r2,r2,4
    1e58:	10803fcc 	andi	r2,r2,255
    1e5c:	10c003cc 	andi	r3,r2,15
    1e60:	e0bffa84 	addi	r2,fp,-22
    1e64:	10c5883a 	add	r2,r2,r3
    1e68:	10800003 	ldbu	r2,0(r2)
    1e6c:	e0bff805 	stb	r2,-32(fp)
	hex_segs[2] = seven_seg_decode_table[b1 >> 7 & 0x01];
    1e70:	e0bff783 	ldbu	r2,-34(fp)
    1e74:	1004d1fa 	srli	r2,r2,7
    1e78:	10803fcc 	andi	r2,r2,255
    1e7c:	10c0004c 	andi	r3,r2,1
    1e80:	e0bffa84 	addi	r2,fp,-22
    1e84:	10c5883a 	add	r2,r2,r3
    1e88:	10800003 	ldbu	r2,0(r2)
    1e8c:	e0bff845 	stb	r2,-31(fp)
	hex_segs[3] = seven_seg_decode_table[b1 >> 5 & 0x01];
    1e90:	e0bff783 	ldbu	r2,-34(fp)
    1e94:	1004d17a 	srli	r2,r2,5
    1e98:	10803fcc 	andi	r2,r2,255
    1e9c:	10c0004c 	andi	r3,r2,1
    1ea0:	e0bffa84 	addi	r2,fp,-22
    1ea4:	10c5883a 	add	r2,r2,r3
    1ea8:	10800003 	ldbu	r2,0(r2)
    1eac:	e0bff885 	stb	r2,-30(fp)

	hex_segs[4] = seven_seg_decode_table [b2 & 0x0F];
    1eb0:	e0bff743 	ldbu	r2,-35(fp)
    1eb4:	10c003cc 	andi	r3,r2,15
    1eb8:	e0bffa84 	addi	r2,fp,-22
    1ebc:	10c5883a 	add	r2,r2,r3
    1ec0:	10800003 	ldbu	r2,0(r2)
    1ec4:	e0bff8c5 	stb	r2,-29(fp)
	hex_segs[5] = seven_seg_decode_table [(b2 >> 4) & 0x0F];
    1ec8:	e0bff743 	ldbu	r2,-35(fp)
    1ecc:	1004d13a 	srli	r2,r2,4
    1ed0:	10803fcc 	andi	r2,r2,255
    1ed4:	10c003cc 	andi	r3,r2,15
    1ed8:	e0bffa84 	addi	r2,fp,-22
    1edc:	10c5883a 	add	r2,r2,r3
    1ee0:	10800003 	ldbu	r2,0(r2)
    1ee4:	e0bff905 	stb	r2,-28(fp)
	hex_segs[6] = seven_seg_decode_table[b1 >> 6 & 0x01];
    1ee8:	e0bff783 	ldbu	r2,-34(fp)
    1eec:	1004d1ba 	srli	r2,r2,6
    1ef0:	10803fcc 	andi	r2,r2,255
    1ef4:	10c0004c 	andi	r3,r2,1
    1ef8:	e0bffa84 	addi	r2,fp,-22
    1efc:	10c5883a 	add	r2,r2,r3
    1f00:	10800003 	ldbu	r2,0(r2)
    1f04:	e0bff945 	stb	r2,-27(fp)
	hex_segs[7] = seven_seg_decode_table[b1 >> 4 & 0x01];
    1f08:	e0bff783 	ldbu	r2,-34(fp)
    1f0c:	1004d13a 	srli	r2,r2,4
    1f10:	10803fcc 	andi	r2,r2,255
    1f14:	10c0004c 	andi	r3,r2,1
    1f18:	e0bffa84 	addi	r2,fp,-22
    1f1c:	10c5883a 	add	r2,r2,r3
    1f20:	10800003 	ldbu	r2,0(r2)
    1f24:	e0bff985 	stb	r2,-26(fp)

	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    1f28:	e0bff7c4 	addi	r2,fp,-33
    1f2c:	10c00017 	ldw	r3,0(r2)
    1f30:	e0bff617 	ldw	r2,-40(fp)
    1f34:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    1f38:	e0bff7c4 	addi	r2,fp,-33
    1f3c:	10800104 	addi	r2,r2,4
    1f40:	10c00017 	ldw	r3,0(r2)
    1f44:	e0bff517 	ldw	r2,-44(fp)
    1f48:	10c00015 	stw	r3,0(r2)

	setMouseBounds(b1, b2, b3);
    1f4c:	e13ff783 	ldbu	r4,-34(fp)
    1f50:	e17ff743 	ldbu	r5,-35(fp)
    1f54:	e1bff703 	ldbu	r6,-36(fp)
    1f58:	0001b000 	call	1b00 <setMouseBounds>
}
    1f5c:	e037883a 	mov	sp,fp
    1f60:	dfc00117 	ldw	ra,4(sp)
    1f64:	df000017 	ldw	fp,0(sp)
    1f68:	dec00204 	addi	sp,sp,8
    1f6c:	f800283a 	ret

00001f70 <run_command>:
// 		mem[i] = 0;
// 	}
// }


void run_command(struct alt_up_dev *up_dev, alt_up_pixel_buffer_dma_dev *pixel_buffer_dev) {
    1f70:	defffa04 	addi	sp,sp,-24
    1f74:	dfc00515 	stw	ra,20(sp)
    1f78:	df000415 	stw	fp,16(sp)
    1f7c:	df000404 	addi	fp,sp,16
    1f80:	e13ffe15 	stw	r4,-8(fp)
    1f84:	e17fff15 	stw	r5,-4(fp)
	int num_read;
	int num_written;
	if(command == 0){ //Record
    1f88:	00800074 	movhi	r2,1
    1f8c:	10833c84 	addi	r2,r2,3314
    1f90:	10800003 	ldbu	r2,0(r2)
    1f94:	10803fcc 	andi	r2,r2,255
    1f98:	1004c03a 	cmpne	r2,r2,zero
    1f9c:	1000091e 	bne	r2,zero,1fc4 <run_command+0x54>
		// alt_u32 fr;
		// fr = alt_timestamp_freq();
		// reset the buffer index for recording
		buf_index_record = 0;
    1fa0:	00800074 	movhi	r2,1
    1fa4:	10834004 	addi	r2,r2,3328
    1fa8:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    1fac:	e0bffe17 	ldw	r2,-8(fp)
    1fb0:	11000517 	ldw	r4,20(r2)
    1fb4:	00057c80 	call	57c8 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (up_dev->audio_dev);
    1fb8:	e0bffe17 	ldw	r2,-8(fp)
    1fbc:	11000517 	ldw	r4,20(r2)
    1fc0:	00056180 	call	5618 <alt_up_audio_enable_read_interrupt>
		// take_mean();
		// float t_stop = (float) alt_timestamp() / (float) fr;
		// printf("t = %f\n", t_stop - t_start);

	}
	if(command == 1){ //Play
    1fc4:	00800074 	movhi	r2,1
    1fc8:	10833c84 	addi	r2,r2,3314
    1fcc:	10800003 	ldbu	r2,0(r2)
    1fd0:	10803fcc 	andi	r2,r2,255
    1fd4:	10800058 	cmpnei	r2,r2,1
    1fd8:	10000d1e 	bne	r2,zero,2010 <run_command+0xa0>
		// reset counter to start playback
		buf_index_play = 0;
    1fdc:	00800074 	movhi	r2,1
    1fe0:	10833f04 	addi	r2,r2,3324
    1fe4:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    1fe8:	e0bffe17 	ldw	r2,-8(fp)
    1fec:	11000517 	ldw	r4,20(r2)
    1ff0:	00057c80 	call	57c8 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (up_dev->audio_dev);
    1ff4:	e0bffe17 	ldw	r2,-8(fp)
    1ff8:	11000517 	ldw	r4,20(r2)
    1ffc:	00056b40 	call	56b4 <alt_up_audio_enable_write_interrupt>
		flag_denoise = 0;
    2000:	00800074 	movhi	r2,1
    2004:	10833c44 	addi	r2,r2,3313
    2008:	10000005 	stb	zero,0(r2)
		all_drawn = 0;
    200c:	d027e20d 	sth	zero,-24696(gp)
	}
	if(command == 2){ //Denoise
    2010:	00800074 	movhi	r2,1
    2014:	10833c84 	addi	r2,r2,3314
    2018:	10800003 	ldbu	r2,0(r2)
    201c:	10803fcc 	andi	r2,r2,255
    2020:	10800098 	cmpnei	r2,r2,2
    2024:	10000d1e 	bne	r2,zero,205c <run_command+0xec>
		// reset counter to start playback
		buf_index_play = 0;
    2028:	00800074 	movhi	r2,1
    202c:	10833f04 	addi	r2,r2,3324
    2030:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    2034:	e0bffe17 	ldw	r2,-8(fp)
    2038:	11000517 	ldw	r4,20(r2)
    203c:	00057c80 	call	57c8 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (up_dev->audio_dev);
    2040:	e0bffe17 	ldw	r2,-8(fp)
    2044:	11000517 	ldw	r4,20(r2)
    2048:	00056b40 	call	56b4 <alt_up_audio_enable_write_interrupt>
		flag_denoise = 1;
    204c:	00c00074 	movhi	r3,1
    2050:	18c33c44 	addi	r3,r3,3313
    2054:	00800044 	movi	r2,1
    2058:	18800005 	stb	r2,0(r3)
	}
}
    205c:	e037883a 	mov	sp,fp
    2060:	dfc00117 	ldw	ra,4(sp)
    2064:	df000017 	ldw	fp,0(sp)
    2068:	dec00204 	addi	sp,sp,8
    206c:	f800283a 	ret

00002070 <command_det>:

unsigned char command_det(unsigned char buttons_stat) {
    2070:	defffd04 	addi	sp,sp,-12
    2074:	df000215 	stw	fp,8(sp)
    2078:	df000204 	addi	fp,sp,8
    207c:	e13ffe05 	stb	r4,-8(fp)
	if((buttons_stat >> 0) % 2){
    2080:	e0bffe03 	ldbu	r2,-8(fp)
    2084:	1080004c 	andi	r2,r2,1
    2088:	10803fcc 	andi	r2,r2,255
    208c:	1005003a 	cmpeq	r2,r2,zero
    2090:	1000501e 	bne	r2,zero,21d4 <command_det+0x164>
		if(x_axis_mouse >= 35 && x_axis_mouse <= 100 &&
    2094:	d0a7e48b 	ldhu	r2,-24686(gp)
    2098:	10bfffcc 	andi	r2,r2,65535
    209c:	10a0001c 	xori	r2,r2,32768
    20a0:	10a00004 	addi	r2,r2,-32768
    20a4:	108008d0 	cmplti	r2,r2,35
    20a8:	1000141e 	bne	r2,zero,20fc <command_det+0x8c>
    20ac:	d0a7e48b 	ldhu	r2,-24686(gp)
    20b0:	10bfffcc 	andi	r2,r2,65535
    20b4:	10a0001c 	xori	r2,r2,32768
    20b8:	10a00004 	addi	r2,r2,-32768
    20bc:	10801948 	cmpgei	r2,r2,101
    20c0:	10000e1e 	bne	r2,zero,20fc <command_det+0x8c>
    20c4:	d0a7e40b 	ldhu	r2,-24688(gp)
    20c8:	10bfffcc 	andi	r2,r2,65535
    20cc:	10a0001c 	xori	r2,r2,32768
    20d0:	10a00004 	addi	r2,r2,-32768
    20d4:	10800510 	cmplti	r2,r2,20
    20d8:	1000081e 	bne	r2,zero,20fc <command_det+0x8c>
    20dc:	d0a7e40b 	ldhu	r2,-24688(gp)
    20e0:	10bfffcc 	andi	r2,r2,65535
    20e4:	10a0001c 	xori	r2,r2,32768
    20e8:	10a00004 	addi	r2,r2,-32768
    20ec:	10801048 	cmpgei	r2,r2,65
    20f0:	1000021e 	bne	r2,zero,20fc <command_det+0x8c>
		   y_axis_mouse >= 20 && y_axis_mouse <= 64)
			return 0;
    20f4:	e03fff15 	stw	zero,-4(fp)
    20f8:	00003806 	br	21dc <command_det+0x16c>
		else if(x_axis_mouse >= 125 && x_axis_mouse <= 190 &&
    20fc:	d0a7e48b 	ldhu	r2,-24686(gp)
    2100:	10bfffcc 	andi	r2,r2,65535
    2104:	10a0001c 	xori	r2,r2,32768
    2108:	10a00004 	addi	r2,r2,-32768
    210c:	10801f50 	cmplti	r2,r2,125
    2110:	1000151e 	bne	r2,zero,2168 <command_det+0xf8>
    2114:	d0a7e48b 	ldhu	r2,-24686(gp)
    2118:	10bfffcc 	andi	r2,r2,65535
    211c:	10a0001c 	xori	r2,r2,32768
    2120:	10a00004 	addi	r2,r2,-32768
    2124:	10802fc8 	cmpgei	r2,r2,191
    2128:	10000f1e 	bne	r2,zero,2168 <command_det+0xf8>
    212c:	d0a7e40b 	ldhu	r2,-24688(gp)
    2130:	10bfffcc 	andi	r2,r2,65535
    2134:	10a0001c 	xori	r2,r2,32768
    2138:	10a00004 	addi	r2,r2,-32768
    213c:	10800510 	cmplti	r2,r2,20
    2140:	1000091e 	bne	r2,zero,2168 <command_det+0xf8>
    2144:	d0a7e40b 	ldhu	r2,-24688(gp)
    2148:	10bfffcc 	andi	r2,r2,65535
    214c:	10a0001c 	xori	r2,r2,32768
    2150:	10a00004 	addi	r2,r2,-32768
    2154:	10801048 	cmpgei	r2,r2,65
    2158:	1000031e 	bne	r2,zero,2168 <command_det+0xf8>
				y_axis_mouse >= 20 && y_axis_mouse <= 64)
			return 1;
    215c:	00800044 	movi	r2,1
    2160:	e0bfff15 	stw	r2,-4(fp)
    2164:	00001d06 	br	21dc <command_det+0x16c>
		else if(x_axis_mouse >= 215 && x_axis_mouse <= 280 &&
    2168:	d0a7e48b 	ldhu	r2,-24686(gp)
    216c:	10bfffcc 	andi	r2,r2,65535
    2170:	10a0001c 	xori	r2,r2,32768
    2174:	10a00004 	addi	r2,r2,-32768
    2178:	108035d0 	cmplti	r2,r2,215
    217c:	1000151e 	bne	r2,zero,21d4 <command_det+0x164>
    2180:	d0a7e48b 	ldhu	r2,-24686(gp)
    2184:	10bfffcc 	andi	r2,r2,65535
    2188:	10a0001c 	xori	r2,r2,32768
    218c:	10a00004 	addi	r2,r2,-32768
    2190:	10804648 	cmpgei	r2,r2,281
    2194:	10000f1e 	bne	r2,zero,21d4 <command_det+0x164>
    2198:	d0a7e40b 	ldhu	r2,-24688(gp)
    219c:	10bfffcc 	andi	r2,r2,65535
    21a0:	10a0001c 	xori	r2,r2,32768
    21a4:	10a00004 	addi	r2,r2,-32768
    21a8:	10800510 	cmplti	r2,r2,20
    21ac:	1000091e 	bne	r2,zero,21d4 <command_det+0x164>
    21b0:	d0a7e40b 	ldhu	r2,-24688(gp)
    21b4:	10bfffcc 	andi	r2,r2,65535
    21b8:	10a0001c 	xori	r2,r2,32768
    21bc:	10a00004 	addi	r2,r2,-32768
    21c0:	10801048 	cmpgei	r2,r2,65
    21c4:	1000031e 	bne	r2,zero,21d4 <command_det+0x164>
				y_axis_mouse >= 20 && y_axis_mouse <= 64)
			return 2;
    21c8:	00800084 	movi	r2,2
    21cc:	e0bfff15 	stw	r2,-4(fp)
    21d0:	00000206 	br	21dc <command_det+0x16c>
	}
	return -1;
    21d4:	00803fc4 	movi	r2,255
    21d8:	e0bfff15 	stw	r2,-4(fp)
    21dc:	e0bfff17 	ldw	r2,-4(fp)
}
    21e0:	e037883a 	mov	sp,fp
    21e4:	df000017 	ldw	fp,0(sp)
    21e8:	dec00104 	addi	sp,sp,4
    21ec:	f800283a 	ret

000021f0 <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    21f0:	defffa04 	addi	sp,sp,-24
    21f4:	dfc00515 	stw	ra,20(sp)
    21f8:	df000415 	stw	fp,16(sp)
    21fc:	df000404 	addi	fp,sp,16
    2200:	e13ffe15 	stw	r4,-8(fp)
    2204:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    2208:	e0bffe17 	ldw	r2,-8(fp)
    220c:	10800517 	ldw	r2,20(r2)
    2210:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    2214:	e0bffe17 	ldw	r2,-8(fp)
    2218:	10800017 	ldw	r2,0(r2)
    221c:	10800a17 	ldw	r2,40(r2)
    2220:	10800304 	addi	r2,r2,12
    2224:	10800037 	ldwio	r2,0(r2)
    2228:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    222c:	e0bffe17 	ldw	r2,-8(fp)
    2230:	10800017 	ldw	r2,0(r2)
    2234:	10800a17 	ldw	r2,40(r2)
    2238:	10800304 	addi	r2,r2,12
    223c:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    2240:	e0bffc17 	ldw	r2,-16(fp)
    2244:	10800098 	cmpnei	r2,r2,2
    2248:	1000081e 	bne	r2,zero,226c <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    224c:	00800074 	movhi	r2,1
    2250:	10834004 	addi	r2,r2,3328
    2254:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2258:	e13ffd17 	ldw	r4,-12(fp)
    225c:	00057c80 	call	57c8 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    2260:	e13ffd17 	ldw	r4,-12(fp)
    2264:	00056180 	call	5618 <alt_up_audio_enable_read_interrupt>
    2268:	00000a06 	br	2294 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    226c:	e0bffc17 	ldw	r2,-16(fp)
    2270:	10800118 	cmpnei	r2,r2,4
    2274:	1000071e 	bne	r2,zero,2294 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    2278:	00800074 	movhi	r2,1
    227c:	10833f04 	addi	r2,r2,3324
    2280:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    2284:	e13ffd17 	ldw	r4,-12(fp)
    2288:	00057c80 	call	57c8 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    228c:	e13ffd17 	ldw	r4,-12(fp)
    2290:	00056b40 	call	56b4 <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    2294:	e037883a 	mov	sp,fp
    2298:	dfc00117 	ldw	ra,4(sp)
    229c:	df000017 	ldw	fp,0(sp)
    22a0:	dec00204 	addi	sp,sp,8
    22a4:	f800283a 	ret

000022a8 <__muldi3>:
    22a8:	2011883a 	mov	r8,r4
    22ac:	427fffcc 	andi	r9,r8,65535
    22b0:	4018d43a 	srli	r12,r8,16
    22b4:	32bfffcc 	andi	r10,r6,65535
    22b8:	3016d43a 	srli	r11,r6,16
    22bc:	4a85383a 	mul	r2,r9,r10
    22c0:	6295383a 	mul	r10,r12,r10
    22c4:	4ad3383a 	mul	r9,r9,r11
    22c8:	113fffcc 	andi	r4,r2,65535
    22cc:	1004d43a 	srli	r2,r2,16
    22d0:	4a93883a 	add	r9,r9,r10
    22d4:	3807883a 	mov	r3,r7
    22d8:	1245883a 	add	r2,r2,r9
    22dc:	280f883a 	mov	r7,r5
    22e0:	180b883a 	mov	r5,r3
    22e4:	1006943a 	slli	r3,r2,16
    22e8:	defffd04 	addi	sp,sp,-12
    22ec:	dc800215 	stw	r18,8(sp)
    22f0:	1907883a 	add	r3,r3,r4
    22f4:	dc400115 	stw	r17,4(sp)
    22f8:	dc000015 	stw	r16,0(sp)
    22fc:	4165383a 	mul	r18,r8,r5
    2300:	31e3383a 	mul	r17,r6,r7
    2304:	1012d43a 	srli	r9,r2,16
    2308:	62d9383a 	mul	r12,r12,r11
    230c:	181f883a 	mov	r15,r3
    2310:	1280022e 	bgeu	r2,r10,231c <__muldi3+0x74>
    2314:	00800074 	movhi	r2,1
    2318:	6099883a 	add	r12,r12,r2
    231c:	624d883a 	add	r6,r12,r9
    2320:	9187883a 	add	r3,r18,r6
    2324:	88c7883a 	add	r3,r17,r3
    2328:	7805883a 	mov	r2,r15
    232c:	dc800217 	ldw	r18,8(sp)
    2330:	dc400117 	ldw	r17,4(sp)
    2334:	dc000017 	ldw	r16,0(sp)
    2338:	dec00304 	addi	sp,sp,12
    233c:	f800283a 	ret

00002340 <__fixunsdfsi>:
    2340:	defffb04 	addi	sp,sp,-20
    2344:	dc400115 	stw	r17,4(sp)
    2348:	dc000015 	stw	r16,0(sp)
    234c:	04507834 	movhi	r17,16864
    2350:	0021883a 	mov	r16,zero
    2354:	800d883a 	mov	r6,r16
    2358:	880f883a 	mov	r7,r17
    235c:	dcc00315 	stw	r19,12(sp)
    2360:	dc800215 	stw	r18,8(sp)
    2364:	2827883a 	mov	r19,r5
    2368:	2025883a 	mov	r18,r4
    236c:	dfc00415 	stw	ra,16(sp)
    2370:	00034400 	call	3440 <__gedf2>
    2374:	000d883a 	mov	r6,zero
    2378:	880f883a 	mov	r7,r17
    237c:	980b883a 	mov	r5,r19
    2380:	9009883a 	mov	r4,r18
    2384:	10000d16 	blt	r2,zero,23bc <__fixunsdfsi+0x7c>
    2388:	0002f880 	call	2f88 <__subdf3>
    238c:	180b883a 	mov	r5,r3
    2390:	1009883a 	mov	r4,r2
    2394:	00034c80 	call	34c8 <__fixdfsi>
    2398:	00e00034 	movhi	r3,32768
    239c:	10c5883a 	add	r2,r2,r3
    23a0:	dfc00417 	ldw	ra,16(sp)
    23a4:	dcc00317 	ldw	r19,12(sp)
    23a8:	dc800217 	ldw	r18,8(sp)
    23ac:	dc400117 	ldw	r17,4(sp)
    23b0:	dc000017 	ldw	r16,0(sp)
    23b4:	dec00504 	addi	sp,sp,20
    23b8:	f800283a 	ret
    23bc:	980b883a 	mov	r5,r19
    23c0:	9009883a 	mov	r4,r18
    23c4:	00034c80 	call	34c8 <__fixdfsi>
    23c8:	dfc00417 	ldw	ra,16(sp)
    23cc:	dcc00317 	ldw	r19,12(sp)
    23d0:	dc800217 	ldw	r18,8(sp)
    23d4:	dc400117 	ldw	r17,4(sp)
    23d8:	dc000017 	ldw	r16,0(sp)
    23dc:	dec00504 	addi	sp,sp,20
    23e0:	f800283a 	ret

000023e4 <__divdi3>:
    23e4:	deffef04 	addi	sp,sp,-68
    23e8:	2005883a 	mov	r2,r4
    23ec:	2807883a 	mov	r3,r5
    23f0:	dfc01015 	stw	ra,64(sp)
    23f4:	df000f15 	stw	fp,60(sp)
    23f8:	ddc00e15 	stw	r23,56(sp)
    23fc:	dd800d15 	stw	r22,52(sp)
    2400:	dd400c15 	stw	r21,48(sp)
    2404:	dd000b15 	stw	r20,44(sp)
    2408:	dcc00a15 	stw	r19,40(sp)
    240c:	dc800915 	stw	r18,36(sp)
    2410:	dc400815 	stw	r17,32(sp)
    2414:	dc000715 	stw	r16,28(sp)
    2418:	1019883a 	mov	r12,r2
    241c:	181b883a 	mov	r13,r3
    2420:	3015883a 	mov	r10,r6
    2424:	3817883a 	mov	r11,r7
    2428:	1800ba16 	blt	r3,zero,2714 <__divdi3+0x330>
    242c:	d8000615 	stw	zero,24(sp)
    2430:	5800ad16 	blt	r11,zero,26e8 <__divdi3+0x304>
    2434:	5021883a 	mov	r16,r10
    2438:	602f883a 	mov	r23,r12
    243c:	6829883a 	mov	r20,r13
    2440:	58003b1e 	bne	r11,zero,2530 <__divdi3+0x14c>
    2444:	6a805836 	bltu	r13,r10,25a8 <__divdi3+0x1c4>
    2448:	5000ce26 	beq	r10,zero,2784 <__divdi3+0x3a0>
    244c:	00bfffd4 	movui	r2,65535
    2450:	1400ba36 	bltu	r2,r16,273c <__divdi3+0x358>
    2454:	00803fc4 	movi	r2,255
    2458:	14015f36 	bltu	r2,r16,29d8 <__divdi3+0x5f4>
    245c:	000b883a 	mov	r5,zero
    2460:	0005883a 	mov	r2,zero
    2464:	8084d83a 	srl	r2,r16,r2
    2468:	01000074 	movhi	r4,1
    246c:	21330104 	addi	r4,r4,-13308
    2470:	01800804 	movi	r6,32
    2474:	1105883a 	add	r2,r2,r4
    2478:	10c00003 	ldbu	r3,0(r2)
    247c:	28c7883a 	add	r3,r5,r3
    2480:	30edc83a 	sub	r22,r6,r3
    2484:	b001101e 	bne	r22,zero,28c8 <__divdi3+0x4e4>
    2488:	802ad43a 	srli	r21,r16,16
    248c:	01000044 	movi	r4,1
    2490:	a423c83a 	sub	r17,r20,r16
    2494:	873fffcc 	andi	fp,r16,65535
    2498:	d9000315 	stw	r4,12(sp)
    249c:	8809883a 	mov	r4,r17
    24a0:	a80b883a 	mov	r5,r21
    24a4:	00037140 	call	3714 <__udivsi3>
    24a8:	8809883a 	mov	r4,r17
    24ac:	a80b883a 	mov	r5,r21
    24b0:	102d883a 	mov	r22,r2
    24b4:	000371c0 	call	371c <__umodsi3>
    24b8:	1004943a 	slli	r2,r2,16
    24bc:	b806d43a 	srli	r3,r23,16
    24c0:	e5a3383a 	mul	r17,fp,r22
    24c4:	10c4b03a 	or	r2,r2,r3
    24c8:	1440042e 	bgeu	r2,r17,24dc <__divdi3+0xf8>
    24cc:	1405883a 	add	r2,r2,r16
    24d0:	b5bfffc4 	addi	r22,r22,-1
    24d4:	14000136 	bltu	r2,r16,24dc <__divdi3+0xf8>
    24d8:	14415f36 	bltu	r2,r17,2a58 <__divdi3+0x674>
    24dc:	1463c83a 	sub	r17,r2,r17
    24e0:	8809883a 	mov	r4,r17
    24e4:	a80b883a 	mov	r5,r21
    24e8:	00037140 	call	3714 <__udivsi3>
    24ec:	8809883a 	mov	r4,r17
    24f0:	a80b883a 	mov	r5,r21
    24f4:	1029883a 	mov	r20,r2
    24f8:	000371c0 	call	371c <__umodsi3>
    24fc:	1004943a 	slli	r2,r2,16
    2500:	e509383a 	mul	r4,fp,r20
    2504:	b8ffffcc 	andi	r3,r23,65535
    2508:	10c4b03a 	or	r2,r2,r3
    250c:	1100042e 	bgeu	r2,r4,2520 <__divdi3+0x13c>
    2510:	8085883a 	add	r2,r16,r2
    2514:	a53fffc4 	addi	r20,r20,-1
    2518:	14000136 	bltu	r2,r16,2520 <__divdi3+0x13c>
    251c:	11014736 	bltu	r2,r4,2a3c <__divdi3+0x658>
    2520:	b004943a 	slli	r2,r22,16
    2524:	d8c00317 	ldw	r3,12(sp)
    2528:	a084b03a 	or	r2,r20,r2
    252c:	00000406 	br	2540 <__divdi3+0x15c>
    2530:	5811883a 	mov	r8,r11
    2534:	6ac0582e 	bgeu	r13,r11,2698 <__divdi3+0x2b4>
    2538:	0005883a 	mov	r2,zero
    253c:	0007883a 	mov	r3,zero
    2540:	1025883a 	mov	r18,r2
    2544:	100d883a 	mov	r6,r2
    2548:	d8800617 	ldw	r2,24(sp)
    254c:	180f883a 	mov	r7,r3
    2550:	10000726 	beq	r2,zero,2570 <__divdi3+0x18c>
    2554:	0009883a 	mov	r4,zero
    2558:	2485c83a 	sub	r2,r4,r18
    255c:	2089803a 	cmpltu	r4,r4,r2
    2560:	00c7c83a 	sub	r3,zero,r3
    2564:	1909c83a 	sub	r4,r3,r4
    2568:	100d883a 	mov	r6,r2
    256c:	200f883a 	mov	r7,r4
    2570:	3005883a 	mov	r2,r6
    2574:	3807883a 	mov	r3,r7
    2578:	dfc01017 	ldw	ra,64(sp)
    257c:	df000f17 	ldw	fp,60(sp)
    2580:	ddc00e17 	ldw	r23,56(sp)
    2584:	dd800d17 	ldw	r22,52(sp)
    2588:	dd400c17 	ldw	r21,48(sp)
    258c:	dd000b17 	ldw	r20,44(sp)
    2590:	dcc00a17 	ldw	r19,40(sp)
    2594:	dc800917 	ldw	r18,36(sp)
    2598:	dc400817 	ldw	r17,32(sp)
    259c:	dc000717 	ldw	r16,28(sp)
    25a0:	dec01104 	addi	sp,sp,68
    25a4:	f800283a 	ret
    25a8:	00bfffd4 	movui	r2,65535
    25ac:	12806f36 	bltu	r2,r10,276c <__divdi3+0x388>
    25b0:	00803fc4 	movi	r2,255
    25b4:	12810236 	bltu	r2,r10,29c0 <__divdi3+0x5dc>
    25b8:	000b883a 	mov	r5,zero
    25bc:	0005883a 	mov	r2,zero
    25c0:	8084d83a 	srl	r2,r16,r2
    25c4:	01000074 	movhi	r4,1
    25c8:	21330104 	addi	r4,r4,-13308
    25cc:	01800804 	movi	r6,32
    25d0:	1105883a 	add	r2,r2,r4
    25d4:	10c00003 	ldbu	r3,0(r2)
    25d8:	28c7883a 	add	r3,r5,r3
    25dc:	30d1c83a 	sub	r8,r6,r3
    25e0:	40000626 	beq	r8,zero,25fc <__divdi3+0x218>
    25e4:	3205c83a 	sub	r2,r6,r8
    25e8:	b884d83a 	srl	r2,r23,r2
    25ec:	a206983a 	sll	r3,r20,r8
    25f0:	ba2e983a 	sll	r23,r23,r8
    25f4:	8220983a 	sll	r16,r16,r8
    25f8:	18a8b03a 	or	r20,r3,r2
    25fc:	802ad43a 	srli	r21,r16,16
    2600:	a009883a 	mov	r4,r20
    2604:	873fffcc 	andi	fp,r16,65535
    2608:	a80b883a 	mov	r5,r21
    260c:	00037140 	call	3714 <__udivsi3>
    2610:	a009883a 	mov	r4,r20
    2614:	a80b883a 	mov	r5,r21
    2618:	102d883a 	mov	r22,r2
    261c:	000371c0 	call	371c <__umodsi3>
    2620:	1004943a 	slli	r2,r2,16
    2624:	b806d43a 	srli	r3,r23,16
    2628:	e5a3383a 	mul	r17,fp,r22
    262c:	10c4b03a 	or	r2,r2,r3
    2630:	1440042e 	bgeu	r2,r17,2644 <__divdi3+0x260>
    2634:	1405883a 	add	r2,r2,r16
    2638:	b5bfffc4 	addi	r22,r22,-1
    263c:	14000136 	bltu	r2,r16,2644 <__divdi3+0x260>
    2640:	14410236 	bltu	r2,r17,2a4c <__divdi3+0x668>
    2644:	1463c83a 	sub	r17,r2,r17
    2648:	8809883a 	mov	r4,r17
    264c:	a80b883a 	mov	r5,r21
    2650:	00037140 	call	3714 <__udivsi3>
    2654:	8809883a 	mov	r4,r17
    2658:	a80b883a 	mov	r5,r21
    265c:	1029883a 	mov	r20,r2
    2660:	000371c0 	call	371c <__umodsi3>
    2664:	1004943a 	slli	r2,r2,16
    2668:	e509383a 	mul	r4,fp,r20
    266c:	b8ffffcc 	andi	r3,r23,65535
    2670:	10c4b03a 	or	r2,r2,r3
    2674:	1100042e 	bgeu	r2,r4,2688 <__divdi3+0x2a4>
    2678:	8085883a 	add	r2,r16,r2
    267c:	a53fffc4 	addi	r20,r20,-1
    2680:	14000136 	bltu	r2,r16,2688 <__divdi3+0x2a4>
    2684:	1100ef36 	bltu	r2,r4,2a44 <__divdi3+0x660>
    2688:	b004943a 	slli	r2,r22,16
    268c:	0007883a 	mov	r3,zero
    2690:	a084b03a 	or	r2,r20,r2
    2694:	003faa06 	br	2540 <__divdi3+0x15c>
    2698:	00bfffd4 	movui	r2,65535
    269c:	12c02d36 	bltu	r2,r11,2754 <__divdi3+0x370>
    26a0:	00803fc4 	movi	r2,255
    26a4:	12c0cf36 	bltu	r2,r11,29e4 <__divdi3+0x600>
    26a8:	000b883a 	mov	r5,zero
    26ac:	0005883a 	mov	r2,zero
    26b0:	4084d83a 	srl	r2,r8,r2
    26b4:	01000074 	movhi	r4,1
    26b8:	21330104 	addi	r4,r4,-13308
    26bc:	01800804 	movi	r6,32
    26c0:	1105883a 	add	r2,r2,r4
    26c4:	10c00003 	ldbu	r3,0(r2)
    26c8:	28c7883a 	add	r3,r5,r3
    26cc:	30f9c83a 	sub	fp,r6,r3
    26d0:	e000331e 	bne	fp,zero,27a0 <__divdi3+0x3bc>
    26d4:	45000136 	bltu	r8,r20,26dc <__divdi3+0x2f8>
    26d8:	bc3f9736 	bltu	r23,r16,2538 <__divdi3+0x154>
    26dc:	00800044 	movi	r2,1
    26e0:	0007883a 	mov	r3,zero
    26e4:	003f9606 	br	2540 <__divdi3+0x15c>
    26e8:	0009883a 	mov	r4,zero
    26ec:	2285c83a 	sub	r2,r4,r10
    26f0:	02c7c83a 	sub	r3,zero,r11
    26f4:	2089803a 	cmpltu	r4,r4,r2
    26f8:	1909c83a 	sub	r4,r3,r4
    26fc:	d8c00617 	ldw	r3,24(sp)
    2700:	1015883a 	mov	r10,r2
    2704:	2017883a 	mov	r11,r4
    2708:	00c6303a 	nor	r3,zero,r3
    270c:	d8c00615 	stw	r3,24(sp)
    2710:	003f4806 	br	2434 <__divdi3+0x50>
    2714:	0009883a 	mov	r4,zero
    2718:	2085c83a 	sub	r2,r4,r2
    271c:	2089803a 	cmpltu	r4,r4,r2
    2720:	00c7c83a 	sub	r3,zero,r3
    2724:	1909c83a 	sub	r4,r3,r4
    2728:	1019883a 	mov	r12,r2
    272c:	201b883a 	mov	r13,r4
    2730:	00bfffc4 	movi	r2,-1
    2734:	d8800615 	stw	r2,24(sp)
    2738:	003f3d06 	br	2430 <__divdi3+0x4c>
    273c:	00804034 	movhi	r2,256
    2740:	10bfffc4 	addi	r2,r2,-1
    2744:	1400aa36 	bltu	r2,r16,29f0 <__divdi3+0x60c>
    2748:	01400404 	movi	r5,16
    274c:	2805883a 	mov	r2,r5
    2750:	003f4406 	br	2464 <__divdi3+0x80>
    2754:	00804034 	movhi	r2,256
    2758:	10bfffc4 	addi	r2,r2,-1
    275c:	12c09b36 	bltu	r2,r11,29cc <__divdi3+0x5e8>
    2760:	01400404 	movi	r5,16
    2764:	2805883a 	mov	r2,r5
    2768:	003fd106 	br	26b0 <__divdi3+0x2cc>
    276c:	00804034 	movhi	r2,256
    2770:	10bfffc4 	addi	r2,r2,-1
    2774:	1280a136 	bltu	r2,r10,29fc <__divdi3+0x618>
    2778:	01400404 	movi	r5,16
    277c:	2805883a 	mov	r2,r5
    2780:	003f8f06 	br	25c0 <__divdi3+0x1dc>
    2784:	01000044 	movi	r4,1
    2788:	000b883a 	mov	r5,zero
    278c:	00037140 	call	3714 <__udivsi3>
    2790:	1021883a 	mov	r16,r2
    2794:	00bfffd4 	movui	r2,65535
    2798:	143fe836 	bltu	r2,r16,273c <__divdi3+0x358>
    279c:	003f2d06 	br	2454 <__divdi3+0x70>
    27a0:	3705c83a 	sub	r2,r6,fp
    27a4:	4708983a 	sll	r4,r8,fp
    27a8:	8086d83a 	srl	r3,r16,r2
    27ac:	a0a2d83a 	srl	r17,r20,r2
    27b0:	b884d83a 	srl	r2,r23,r2
    27b4:	20eab03a 	or	r21,r4,r3
    27b8:	a82cd43a 	srli	r22,r21,16
    27bc:	a706983a 	sll	r3,r20,fp
    27c0:	8809883a 	mov	r4,r17
    27c4:	b00b883a 	mov	r5,r22
    27c8:	1886b03a 	or	r3,r3,r2
    27cc:	d8c00215 	stw	r3,8(sp)
    27d0:	00037140 	call	3714 <__udivsi3>
    27d4:	8809883a 	mov	r4,r17
    27d8:	b00b883a 	mov	r5,r22
    27dc:	1029883a 	mov	r20,r2
    27e0:	000371c0 	call	371c <__umodsi3>
    27e4:	a8ffffcc 	andi	r3,r21,65535
    27e8:	d8c00515 	stw	r3,20(sp)
    27ec:	d9000217 	ldw	r4,8(sp)
    27f0:	d9400517 	ldw	r5,20(sp)
    27f4:	1004943a 	slli	r2,r2,16
    27f8:	2006d43a 	srli	r3,r4,16
    27fc:	8720983a 	sll	r16,r16,fp
    2800:	2d23383a 	mul	r17,r5,r20
    2804:	10c4b03a 	or	r2,r2,r3
    2808:	dc000015 	stw	r16,0(sp)
    280c:	1440032e 	bgeu	r2,r17,281c <__divdi3+0x438>
    2810:	1545883a 	add	r2,r2,r21
    2814:	a53fffc4 	addi	r20,r20,-1
    2818:	1540842e 	bgeu	r2,r21,2a2c <__divdi3+0x648>
    281c:	1463c83a 	sub	r17,r2,r17
    2820:	8809883a 	mov	r4,r17
    2824:	b00b883a 	mov	r5,r22
    2828:	00037140 	call	3714 <__udivsi3>
    282c:	8809883a 	mov	r4,r17
    2830:	b00b883a 	mov	r5,r22
    2834:	1021883a 	mov	r16,r2
    2838:	000371c0 	call	371c <__umodsi3>
    283c:	d8c00517 	ldw	r3,20(sp)
    2840:	d9000217 	ldw	r4,8(sp)
    2844:	1004943a 	slli	r2,r2,16
    2848:	1c0f383a 	mul	r7,r3,r16
    284c:	20ffffcc 	andi	r3,r4,65535
    2850:	10e2b03a 	or	r17,r2,r3
    2854:	89c0032e 	bgeu	r17,r7,2864 <__divdi3+0x480>
    2858:	8d63883a 	add	r17,r17,r21
    285c:	843fffc4 	addi	r16,r16,-1
    2860:	8d406e2e 	bgeu	r17,r21,2a1c <__divdi3+0x638>
    2864:	a008943a 	slli	r4,r20,16
    2868:	d9400017 	ldw	r5,0(sp)
    286c:	89e3c83a 	sub	r17,r17,r7
    2870:	8110b03a 	or	r8,r16,r4
    2874:	280cd43a 	srli	r6,r5,16
    2878:	28ffffcc 	andi	r3,r5,65535
    287c:	40bfffcc 	andi	r2,r8,65535
    2880:	400ad43a 	srli	r5,r8,16
    2884:	10d3383a 	mul	r9,r2,r3
    2888:	1185383a 	mul	r2,r2,r6
    288c:	28c7383a 	mul	r3,r5,r3
    2890:	4808d43a 	srli	r4,r9,16
    2894:	298b383a 	mul	r5,r5,r6
    2898:	10c5883a 	add	r2,r2,r3
    289c:	2089883a 	add	r4,r4,r2
    28a0:	20c0022e 	bgeu	r4,r3,28ac <__divdi3+0x4c8>
    28a4:	00800074 	movhi	r2,1
    28a8:	288b883a 	add	r5,r5,r2
    28ac:	2004d43a 	srli	r2,r4,16
    28b0:	288b883a 	add	r5,r5,r2
    28b4:	89403f36 	bltu	r17,r5,29b4 <__divdi3+0x5d0>
    28b8:	89403926 	beq	r17,r5,29a0 <__divdi3+0x5bc>
    28bc:	4005883a 	mov	r2,r8
    28c0:	0007883a 	mov	r3,zero
    28c4:	003f1e06 	br	2540 <__divdi3+0x15c>
    28c8:	85a0983a 	sll	r16,r16,r22
    28cc:	3585c83a 	sub	r2,r6,r22
    28d0:	a0a2d83a 	srl	r17,r20,r2
    28d4:	802ad43a 	srli	r21,r16,16
    28d8:	b884d83a 	srl	r2,r23,r2
    28dc:	a586983a 	sll	r3,r20,r22
    28e0:	8809883a 	mov	r4,r17
    28e4:	a80b883a 	mov	r5,r21
    28e8:	1886b03a 	or	r3,r3,r2
    28ec:	d8c00115 	stw	r3,4(sp)
    28f0:	00037140 	call	3714 <__udivsi3>
    28f4:	8809883a 	mov	r4,r17
    28f8:	a80b883a 	mov	r5,r21
    28fc:	d8800415 	stw	r2,16(sp)
    2900:	000371c0 	call	371c <__umodsi3>
    2904:	d9400117 	ldw	r5,4(sp)
    2908:	d9000417 	ldw	r4,16(sp)
    290c:	1004943a 	slli	r2,r2,16
    2910:	873fffcc 	andi	fp,r16,65535
    2914:	2806d43a 	srli	r3,r5,16
    2918:	e123383a 	mul	r17,fp,r4
    291c:	10c4b03a 	or	r2,r2,r3
    2920:	1440042e 	bgeu	r2,r17,2934 <__divdi3+0x550>
    2924:	213fffc4 	addi	r4,r4,-1
    2928:	1405883a 	add	r2,r2,r16
    292c:	d9000415 	stw	r4,16(sp)
    2930:	1400352e 	bgeu	r2,r16,2a08 <__divdi3+0x624>
    2934:	1463c83a 	sub	r17,r2,r17
    2938:	8809883a 	mov	r4,r17
    293c:	a80b883a 	mov	r5,r21
    2940:	00037140 	call	3714 <__udivsi3>
    2944:	8809883a 	mov	r4,r17
    2948:	a80b883a 	mov	r5,r21
    294c:	1029883a 	mov	r20,r2
    2950:	000371c0 	call	371c <__umodsi3>
    2954:	d9400117 	ldw	r5,4(sp)
    2958:	1004943a 	slli	r2,r2,16
    295c:	e509383a 	mul	r4,fp,r20
    2960:	28ffffcc 	andi	r3,r5,65535
    2964:	10c6b03a 	or	r3,r2,r3
    2968:	1900062e 	bgeu	r3,r4,2984 <__divdi3+0x5a0>
    296c:	1c07883a 	add	r3,r3,r16
    2970:	a53fffc4 	addi	r20,r20,-1
    2974:	1c000336 	bltu	r3,r16,2984 <__divdi3+0x5a0>
    2978:	1900022e 	bgeu	r3,r4,2984 <__divdi3+0x5a0>
    297c:	a53fffc4 	addi	r20,r20,-1
    2980:	1c07883a 	add	r3,r3,r16
    2984:	d9400417 	ldw	r5,16(sp)
    2988:	bdae983a 	sll	r23,r23,r22
    298c:	1923c83a 	sub	r17,r3,r4
    2990:	2804943a 	slli	r2,r5,16
    2994:	a0a8b03a 	or	r20,r20,r2
    2998:	dd000315 	stw	r20,12(sp)
    299c:	003ebf06 	br	249c <__divdi3+0xb8>
    29a0:	2004943a 	slli	r2,r4,16
    29a4:	bf08983a 	sll	r4,r23,fp
    29a8:	48ffffcc 	andi	r3,r9,65535
    29ac:	10c5883a 	add	r2,r2,r3
    29b0:	20bfc22e 	bgeu	r4,r2,28bc <__divdi3+0x4d8>
    29b4:	40bfffc4 	addi	r2,r8,-1
    29b8:	0007883a 	mov	r3,zero
    29bc:	003ee006 	br	2540 <__divdi3+0x15c>
    29c0:	01400204 	movi	r5,8
    29c4:	2805883a 	mov	r2,r5
    29c8:	003efd06 	br	25c0 <__divdi3+0x1dc>
    29cc:	01400604 	movi	r5,24
    29d0:	2805883a 	mov	r2,r5
    29d4:	003f3606 	br	26b0 <__divdi3+0x2cc>
    29d8:	01400204 	movi	r5,8
    29dc:	2805883a 	mov	r2,r5
    29e0:	003ea006 	br	2464 <__divdi3+0x80>
    29e4:	01400204 	movi	r5,8
    29e8:	2805883a 	mov	r2,r5
    29ec:	003f3006 	br	26b0 <__divdi3+0x2cc>
    29f0:	01400604 	movi	r5,24
    29f4:	2805883a 	mov	r2,r5
    29f8:	003e9a06 	br	2464 <__divdi3+0x80>
    29fc:	01400604 	movi	r5,24
    2a00:	2805883a 	mov	r2,r5
    2a04:	003eee06 	br	25c0 <__divdi3+0x1dc>
    2a08:	147fca2e 	bgeu	r2,r17,2934 <__divdi3+0x550>
    2a0c:	213fffc4 	addi	r4,r4,-1
    2a10:	1405883a 	add	r2,r2,r16
    2a14:	d9000415 	stw	r4,16(sp)
    2a18:	003fc606 	br	2934 <__divdi3+0x550>
    2a1c:	89ff912e 	bgeu	r17,r7,2864 <__divdi3+0x480>
    2a20:	8d63883a 	add	r17,r17,r21
    2a24:	843fffc4 	addi	r16,r16,-1
    2a28:	003f8e06 	br	2864 <__divdi3+0x480>
    2a2c:	147f7b2e 	bgeu	r2,r17,281c <__divdi3+0x438>
    2a30:	a53fffc4 	addi	r20,r20,-1
    2a34:	1545883a 	add	r2,r2,r21
    2a38:	003f7806 	br	281c <__divdi3+0x438>
    2a3c:	a53fffc4 	addi	r20,r20,-1
    2a40:	003eb706 	br	2520 <__divdi3+0x13c>
    2a44:	a53fffc4 	addi	r20,r20,-1
    2a48:	003f0f06 	br	2688 <__divdi3+0x2a4>
    2a4c:	b5bfffc4 	addi	r22,r22,-1
    2a50:	1405883a 	add	r2,r2,r16
    2a54:	003efb06 	br	2644 <__divdi3+0x260>
    2a58:	b5bfffc4 	addi	r22,r22,-1
    2a5c:	1405883a 	add	r2,r2,r16
    2a60:	003e9e06 	br	24dc <__divdi3+0xf8>

00002a64 <__extendsfdf2>:
    2a64:	defff904 	addi	sp,sp,-28
    2a68:	d9000115 	stw	r4,4(sp)
    2a6c:	d9400204 	addi	r5,sp,8
    2a70:	d9000104 	addi	r4,sp,4
    2a74:	dfc00615 	stw	ra,24(sp)
    2a78:	00039040 	call	3904 <__unpack_f>
    2a7c:	d9c00517 	ldw	r7,20(sp)
    2a80:	0011883a 	mov	r8,zero
    2a84:	400697ba 	slli	r3,r8,30
    2a88:	3812d0ba 	srli	r9,r7,2
    2a8c:	380497ba 	slli	r2,r7,30
    2a90:	d9000217 	ldw	r4,8(sp)
    2a94:	d9400317 	ldw	r5,12(sp)
    2a98:	d9800417 	ldw	r6,16(sp)
    2a9c:	48c6b03a 	or	r3,r9,r3
    2aa0:	100f883a 	mov	r7,r2
    2aa4:	d8c00015 	stw	r3,0(sp)
    2aa8:	00035a00 	call	35a0 <__make_dp>
    2aac:	dfc00617 	ldw	ra,24(sp)
    2ab0:	dec00704 	addi	sp,sp,28
    2ab4:	f800283a 	ret

00002ab8 <__floatunsisf>:
    2ab8:	defff904 	addi	sp,sp,-28
    2abc:	dc400515 	stw	r17,20(sp)
    2ac0:	dc000415 	stw	r16,16(sp)
    2ac4:	dfc00615 	stw	ra,24(sp)
    2ac8:	04400784 	movi	r17,30
    2acc:	2021883a 	mov	r16,r4
    2ad0:	d8000115 	stw	zero,4(sp)
    2ad4:	2000091e 	bne	r4,zero,2afc <__floatunsisf+0x44>
    2ad8:	00800084 	movi	r2,2
    2adc:	d8800015 	stw	r2,0(sp)
    2ae0:	d809883a 	mov	r4,sp
    2ae4:	00037a40 	call	37a4 <__pack_f>
    2ae8:	dfc00617 	ldw	ra,24(sp)
    2aec:	dc400517 	ldw	r17,20(sp)
    2af0:	dc000417 	ldw	r16,16(sp)
    2af4:	dec00704 	addi	sp,sp,28
    2af8:	f800283a 	ret
    2afc:	008000c4 	movi	r2,3
    2b00:	d9000315 	stw	r4,12(sp)
    2b04:	d8800015 	stw	r2,0(sp)
    2b08:	dc400215 	stw	r17,8(sp)
    2b0c:	00037240 	call	3724 <__clzsi2>
    2b10:	117fffc4 	addi	r5,r2,-1
    2b14:	0147c83a 	sub	r3,zero,r5
    2b18:	00800044 	movi	r2,1
    2b1c:	10c4983a 	sll	r2,r2,r3
    2b20:	80c6d83a 	srl	r3,r16,r3
    2b24:	8949c83a 	sub	r4,r17,r5
    2b28:	10bfffc4 	addi	r2,r2,-1
    2b2c:	8084703a 	and	r2,r16,r2
    2b30:	1004c03a 	cmpne	r2,r2,zero
    2b34:	1886b03a 	or	r3,r3,r2
    2b38:	28000c16 	blt	r5,zero,2b6c <__floatunsisf+0xb4>
    2b3c:	8144983a 	sll	r2,r16,r5
    2b40:	8947c83a 	sub	r3,r17,r5
    2b44:	283fe626 	beq	r5,zero,2ae0 <__floatunsisf+0x28>
    2b48:	d809883a 	mov	r4,sp
    2b4c:	d8800315 	stw	r2,12(sp)
    2b50:	d8c00215 	stw	r3,8(sp)
    2b54:	00037a40 	call	37a4 <__pack_f>
    2b58:	dfc00617 	ldw	ra,24(sp)
    2b5c:	dc400517 	ldw	r17,20(sp)
    2b60:	dc000417 	ldw	r16,16(sp)
    2b64:	dec00704 	addi	sp,sp,28
    2b68:	f800283a 	ret
    2b6c:	d8c00315 	stw	r3,12(sp)
    2b70:	d9000215 	stw	r4,8(sp)
    2b74:	003fda06 	br	2ae0 <__floatunsisf+0x28>

00002b78 <_fpadd_parts>:
    2b78:	defff804 	addi	sp,sp,-32
    2b7c:	dcc00315 	stw	r19,12(sp)
    2b80:	2027883a 	mov	r19,r4
    2b84:	21000017 	ldw	r4,0(r4)
    2b88:	00c00044 	movi	r3,1
    2b8c:	dd400515 	stw	r21,20(sp)
    2b90:	dd000415 	stw	r20,16(sp)
    2b94:	ddc00715 	stw	r23,28(sp)
    2b98:	dd800615 	stw	r22,24(sp)
    2b9c:	dc800215 	stw	r18,8(sp)
    2ba0:	dc400115 	stw	r17,4(sp)
    2ba4:	dc000015 	stw	r16,0(sp)
    2ba8:	282b883a 	mov	r21,r5
    2bac:	3029883a 	mov	r20,r6
    2bb0:	1900632e 	bgeu	r3,r4,2d40 <_fpadd_parts+0x1c8>
    2bb4:	28800017 	ldw	r2,0(r5)
    2bb8:	1880812e 	bgeu	r3,r2,2dc0 <_fpadd_parts+0x248>
    2bbc:	00c00104 	movi	r3,4
    2bc0:	20c0dc26 	beq	r4,r3,2f34 <_fpadd_parts+0x3bc>
    2bc4:	10c07e26 	beq	r2,r3,2dc0 <_fpadd_parts+0x248>
    2bc8:	00c00084 	movi	r3,2
    2bcc:	10c06726 	beq	r2,r3,2d6c <_fpadd_parts+0x1f4>
    2bd0:	20c07b26 	beq	r4,r3,2dc0 <_fpadd_parts+0x248>
    2bd4:	9dc00217 	ldw	r23,8(r19)
    2bd8:	28c00217 	ldw	r3,8(r5)
    2bdc:	9c400317 	ldw	r17,12(r19)
    2be0:	2bc00317 	ldw	r15,12(r5)
    2be4:	b8cdc83a 	sub	r6,r23,r3
    2be8:	9c800417 	ldw	r18,16(r19)
    2bec:	2c000417 	ldw	r16,16(r5)
    2bf0:	3009883a 	mov	r4,r6
    2bf4:	30009716 	blt	r6,zero,2e54 <_fpadd_parts+0x2dc>
    2bf8:	00800fc4 	movi	r2,63
    2bfc:	11806b16 	blt	r2,r6,2dac <_fpadd_parts+0x234>
    2c00:	0100a40e 	bge	zero,r4,2e94 <_fpadd_parts+0x31c>
    2c04:	35bff804 	addi	r22,r6,-32
    2c08:	b000bc16 	blt	r22,zero,2efc <_fpadd_parts+0x384>
    2c0c:	8596d83a 	srl	r11,r16,r22
    2c10:	0019883a 	mov	r12,zero
    2c14:	0013883a 	mov	r9,zero
    2c18:	01000044 	movi	r4,1
    2c1c:	0015883a 	mov	r10,zero
    2c20:	b000be16 	blt	r22,zero,2f1c <_fpadd_parts+0x3a4>
    2c24:	2590983a 	sll	r8,r4,r22
    2c28:	000f883a 	mov	r7,zero
    2c2c:	00bfffc4 	movi	r2,-1
    2c30:	3889883a 	add	r4,r7,r2
    2c34:	408b883a 	add	r5,r8,r2
    2c38:	21cd803a 	cmpltu	r6,r4,r7
    2c3c:	314b883a 	add	r5,r6,r5
    2c40:	7904703a 	and	r2,r15,r4
    2c44:	8146703a 	and	r3,r16,r5
    2c48:	10c4b03a 	or	r2,r2,r3
    2c4c:	10000226 	beq	r2,zero,2c58 <_fpadd_parts+0xe0>
    2c50:	02400044 	movi	r9,1
    2c54:	0015883a 	mov	r10,zero
    2c58:	5a5eb03a 	or	r15,r11,r9
    2c5c:	62a0b03a 	or	r16,r12,r10
    2c60:	99400117 	ldw	r5,4(r19)
    2c64:	a8800117 	ldw	r2,4(r21)
    2c68:	28806e26 	beq	r5,r2,2e24 <_fpadd_parts+0x2ac>
    2c6c:	28006626 	beq	r5,zero,2e08 <_fpadd_parts+0x290>
    2c70:	7c45c83a 	sub	r2,r15,r17
    2c74:	7889803a 	cmpltu	r4,r15,r2
    2c78:	8487c83a 	sub	r3,r16,r18
    2c7c:	1909c83a 	sub	r4,r3,r4
    2c80:	100d883a 	mov	r6,r2
    2c84:	200f883a 	mov	r7,r4
    2c88:	38007716 	blt	r7,zero,2e68 <_fpadd_parts+0x2f0>
    2c8c:	a5c00215 	stw	r23,8(r20)
    2c90:	a1c00415 	stw	r7,16(r20)
    2c94:	a0000115 	stw	zero,4(r20)
    2c98:	a1800315 	stw	r6,12(r20)
    2c9c:	a2000317 	ldw	r8,12(r20)
    2ca0:	a2400417 	ldw	r9,16(r20)
    2ca4:	00bfffc4 	movi	r2,-1
    2ca8:	408b883a 	add	r5,r8,r2
    2cac:	2a09803a 	cmpltu	r4,r5,r8
    2cb0:	488d883a 	add	r6,r9,r2
    2cb4:	01c40034 	movhi	r7,4096
    2cb8:	39ffffc4 	addi	r7,r7,-1
    2cbc:	218d883a 	add	r6,r4,r6
    2cc0:	39801736 	bltu	r7,r6,2d20 <_fpadd_parts+0x1a8>
    2cc4:	31c06526 	beq	r6,r7,2e5c <_fpadd_parts+0x2e4>
    2cc8:	a3000217 	ldw	r12,8(r20)
    2ccc:	4209883a 	add	r4,r8,r8
    2cd0:	00bfffc4 	movi	r2,-1
    2cd4:	220f803a 	cmpltu	r7,r4,r8
    2cd8:	4a4b883a 	add	r5,r9,r9
    2cdc:	394f883a 	add	r7,r7,r5
    2ce0:	2095883a 	add	r10,r4,r2
    2ce4:	3897883a 	add	r11,r7,r2
    2ce8:	510d803a 	cmpltu	r6,r10,r4
    2cec:	6099883a 	add	r12,r12,r2
    2cf0:	32d7883a 	add	r11,r6,r11
    2cf4:	00840034 	movhi	r2,4096
    2cf8:	10bfffc4 	addi	r2,r2,-1
    2cfc:	2011883a 	mov	r8,r4
    2d00:	3813883a 	mov	r9,r7
    2d04:	a1000315 	stw	r4,12(r20)
    2d08:	a1c00415 	stw	r7,16(r20)
    2d0c:	a3000215 	stw	r12,8(r20)
    2d10:	12c00336 	bltu	r2,r11,2d20 <_fpadd_parts+0x1a8>
    2d14:	58bfed1e 	bne	r11,r2,2ccc <_fpadd_parts+0x154>
    2d18:	00bfff84 	movi	r2,-2
    2d1c:	12bfeb2e 	bgeu	r2,r10,2ccc <_fpadd_parts+0x154>
    2d20:	a2800417 	ldw	r10,16(r20)
    2d24:	008000c4 	movi	r2,3
    2d28:	00c80034 	movhi	r3,8192
    2d2c:	18ffffc4 	addi	r3,r3,-1
    2d30:	a2400317 	ldw	r9,12(r20)
    2d34:	a0800015 	stw	r2,0(r20)
    2d38:	1a802336 	bltu	r3,r10,2dc8 <_fpadd_parts+0x250>
    2d3c:	a027883a 	mov	r19,r20
    2d40:	9805883a 	mov	r2,r19
    2d44:	ddc00717 	ldw	r23,28(sp)
    2d48:	dd800617 	ldw	r22,24(sp)
    2d4c:	dd400517 	ldw	r21,20(sp)
    2d50:	dd000417 	ldw	r20,16(sp)
    2d54:	dcc00317 	ldw	r19,12(sp)
    2d58:	dc800217 	ldw	r18,8(sp)
    2d5c:	dc400117 	ldw	r17,4(sp)
    2d60:	dc000017 	ldw	r16,0(sp)
    2d64:	dec00804 	addi	sp,sp,32
    2d68:	f800283a 	ret
    2d6c:	20fff41e 	bne	r4,r3,2d40 <_fpadd_parts+0x1c8>
    2d70:	31000015 	stw	r4,0(r6)
    2d74:	98800117 	ldw	r2,4(r19)
    2d78:	30800115 	stw	r2,4(r6)
    2d7c:	98c00217 	ldw	r3,8(r19)
    2d80:	30c00215 	stw	r3,8(r6)
    2d84:	98800317 	ldw	r2,12(r19)
    2d88:	30800315 	stw	r2,12(r6)
    2d8c:	98c00417 	ldw	r3,16(r19)
    2d90:	30c00415 	stw	r3,16(r6)
    2d94:	98800117 	ldw	r2,4(r19)
    2d98:	28c00117 	ldw	r3,4(r5)
    2d9c:	3027883a 	mov	r19,r6
    2da0:	10c4703a 	and	r2,r2,r3
    2da4:	30800115 	stw	r2,4(r6)
    2da8:	003fe506 	br	2d40 <_fpadd_parts+0x1c8>
    2dac:	1dc02616 	blt	r3,r23,2e48 <_fpadd_parts+0x2d0>
    2db0:	0023883a 	mov	r17,zero
    2db4:	182f883a 	mov	r23,r3
    2db8:	0025883a 	mov	r18,zero
    2dbc:	003fa806 	br	2c60 <_fpadd_parts+0xe8>
    2dc0:	a827883a 	mov	r19,r21
    2dc4:	003fde06 	br	2d40 <_fpadd_parts+0x1c8>
    2dc8:	01800044 	movi	r6,1
    2dcc:	500497fa 	slli	r2,r10,31
    2dd0:	4808d07a 	srli	r4,r9,1
    2dd4:	518ad83a 	srl	r5,r10,r6
    2dd8:	a2000217 	ldw	r8,8(r20)
    2ddc:	1108b03a 	or	r4,r2,r4
    2de0:	0007883a 	mov	r3,zero
    2de4:	4984703a 	and	r2,r9,r6
    2de8:	208cb03a 	or	r6,r4,r2
    2dec:	28ceb03a 	or	r7,r5,r3
    2df0:	42000044 	addi	r8,r8,1
    2df4:	a027883a 	mov	r19,r20
    2df8:	a1c00415 	stw	r7,16(r20)
    2dfc:	a2000215 	stw	r8,8(r20)
    2e00:	a1800315 	stw	r6,12(r20)
    2e04:	003fce06 	br	2d40 <_fpadd_parts+0x1c8>
    2e08:	8bc5c83a 	sub	r2,r17,r15
    2e0c:	8889803a 	cmpltu	r4,r17,r2
    2e10:	9407c83a 	sub	r3,r18,r16
    2e14:	1909c83a 	sub	r4,r3,r4
    2e18:	100d883a 	mov	r6,r2
    2e1c:	200f883a 	mov	r7,r4
    2e20:	003f9906 	br	2c88 <_fpadd_parts+0x110>
    2e24:	7c45883a 	add	r2,r15,r17
    2e28:	13c9803a 	cmpltu	r4,r2,r15
    2e2c:	8487883a 	add	r3,r16,r18
    2e30:	20c9883a 	add	r4,r4,r3
    2e34:	a1400115 	stw	r5,4(r20)
    2e38:	a5c00215 	stw	r23,8(r20)
    2e3c:	a0800315 	stw	r2,12(r20)
    2e40:	a1000415 	stw	r4,16(r20)
    2e44:	003fb606 	br	2d20 <_fpadd_parts+0x1a8>
    2e48:	001f883a 	mov	r15,zero
    2e4c:	0021883a 	mov	r16,zero
    2e50:	003f8306 	br	2c60 <_fpadd_parts+0xe8>
    2e54:	018dc83a 	sub	r6,zero,r6
    2e58:	003f6706 	br	2bf8 <_fpadd_parts+0x80>
    2e5c:	00bfff84 	movi	r2,-2
    2e60:	117faf36 	bltu	r2,r5,2d20 <_fpadd_parts+0x1a8>
    2e64:	003f9806 	br	2cc8 <_fpadd_parts+0x150>
    2e68:	0005883a 	mov	r2,zero
    2e6c:	1189c83a 	sub	r4,r2,r6
    2e70:	1105803a 	cmpltu	r2,r2,r4
    2e74:	01cbc83a 	sub	r5,zero,r7
    2e78:	2885c83a 	sub	r2,r5,r2
    2e7c:	01800044 	movi	r6,1
    2e80:	a1800115 	stw	r6,4(r20)
    2e84:	a5c00215 	stw	r23,8(r20)
    2e88:	a1000315 	stw	r4,12(r20)
    2e8c:	a0800415 	stw	r2,16(r20)
    2e90:	003f8206 	br	2c9c <_fpadd_parts+0x124>
    2e94:	203f7226 	beq	r4,zero,2c60 <_fpadd_parts+0xe8>
    2e98:	35bff804 	addi	r22,r6,-32
    2e9c:	b9af883a 	add	r23,r23,r6
    2ea0:	b0003116 	blt	r22,zero,2f68 <_fpadd_parts+0x3f0>
    2ea4:	959ad83a 	srl	r13,r18,r22
    2ea8:	001d883a 	mov	r14,zero
    2eac:	000f883a 	mov	r7,zero
    2eb0:	01000044 	movi	r4,1
    2eb4:	0011883a 	mov	r8,zero
    2eb8:	b0002516 	blt	r22,zero,2f50 <_fpadd_parts+0x3d8>
    2ebc:	2594983a 	sll	r10,r4,r22
    2ec0:	0013883a 	mov	r9,zero
    2ec4:	00bfffc4 	movi	r2,-1
    2ec8:	4889883a 	add	r4,r9,r2
    2ecc:	508b883a 	add	r5,r10,r2
    2ed0:	224d803a 	cmpltu	r6,r4,r9
    2ed4:	314b883a 	add	r5,r6,r5
    2ed8:	8904703a 	and	r2,r17,r4
    2edc:	9146703a 	and	r3,r18,r5
    2ee0:	10c4b03a 	or	r2,r2,r3
    2ee4:	10000226 	beq	r2,zero,2ef0 <_fpadd_parts+0x378>
    2ee8:	01c00044 	movi	r7,1
    2eec:	0011883a 	mov	r8,zero
    2ef0:	69e2b03a 	or	r17,r13,r7
    2ef4:	7224b03a 	or	r18,r14,r8
    2ef8:	003f5906 	br	2c60 <_fpadd_parts+0xe8>
    2efc:	8407883a 	add	r3,r16,r16
    2f00:	008007c4 	movi	r2,31
    2f04:	1185c83a 	sub	r2,r2,r6
    2f08:	1886983a 	sll	r3,r3,r2
    2f0c:	7996d83a 	srl	r11,r15,r6
    2f10:	8198d83a 	srl	r12,r16,r6
    2f14:	1ad6b03a 	or	r11,r3,r11
    2f18:	003f3e06 	br	2c14 <_fpadd_parts+0x9c>
    2f1c:	2006d07a 	srli	r3,r4,1
    2f20:	008007c4 	movi	r2,31
    2f24:	1185c83a 	sub	r2,r2,r6
    2f28:	1890d83a 	srl	r8,r3,r2
    2f2c:	218e983a 	sll	r7,r4,r6
    2f30:	003f3e06 	br	2c2c <_fpadd_parts+0xb4>
    2f34:	113f821e 	bne	r2,r4,2d40 <_fpadd_parts+0x1c8>
    2f38:	28c00117 	ldw	r3,4(r5)
    2f3c:	98800117 	ldw	r2,4(r19)
    2f40:	10ff7f26 	beq	r2,r3,2d40 <_fpadd_parts+0x1c8>
    2f44:	04c00074 	movhi	r19,1
    2f48:	9cf2fc04 	addi	r19,r19,-13328
    2f4c:	003f7c06 	br	2d40 <_fpadd_parts+0x1c8>
    2f50:	2006d07a 	srli	r3,r4,1
    2f54:	008007c4 	movi	r2,31
    2f58:	1185c83a 	sub	r2,r2,r6
    2f5c:	1894d83a 	srl	r10,r3,r2
    2f60:	2192983a 	sll	r9,r4,r6
    2f64:	003fd706 	br	2ec4 <_fpadd_parts+0x34c>
    2f68:	9487883a 	add	r3,r18,r18
    2f6c:	008007c4 	movi	r2,31
    2f70:	1185c83a 	sub	r2,r2,r6
    2f74:	1886983a 	sll	r3,r3,r2
    2f78:	899ad83a 	srl	r13,r17,r6
    2f7c:	919cd83a 	srl	r14,r18,r6
    2f80:	1b5ab03a 	or	r13,r3,r13
    2f84:	003fc906 	br	2eac <_fpadd_parts+0x334>

00002f88 <__subdf3>:
    2f88:	deffea04 	addi	sp,sp,-88
    2f8c:	dcc01415 	stw	r19,80(sp)
    2f90:	dcc00404 	addi	r19,sp,16
    2f94:	2011883a 	mov	r8,r4
    2f98:	2813883a 	mov	r9,r5
    2f9c:	dc401315 	stw	r17,76(sp)
    2fa0:	d809883a 	mov	r4,sp
    2fa4:	980b883a 	mov	r5,r19
    2fa8:	dc400904 	addi	r17,sp,36
    2fac:	dfc01515 	stw	ra,84(sp)
    2fb0:	da400115 	stw	r9,4(sp)
    2fb4:	d9c00315 	stw	r7,12(sp)
    2fb8:	da000015 	stw	r8,0(sp)
    2fbc:	d9800215 	stw	r6,8(sp)
    2fc0:	0003ce00 	call	3ce0 <__unpack_d>
    2fc4:	d9000204 	addi	r4,sp,8
    2fc8:	880b883a 	mov	r5,r17
    2fcc:	0003ce00 	call	3ce0 <__unpack_d>
    2fd0:	d8800a17 	ldw	r2,40(sp)
    2fd4:	880b883a 	mov	r5,r17
    2fd8:	9809883a 	mov	r4,r19
    2fdc:	d9800e04 	addi	r6,sp,56
    2fe0:	1080005c 	xori	r2,r2,1
    2fe4:	d8800a15 	stw	r2,40(sp)
    2fe8:	0002b780 	call	2b78 <_fpadd_parts>
    2fec:	1009883a 	mov	r4,r2
    2ff0:	00039cc0 	call	39cc <__pack_d>
    2ff4:	dfc01517 	ldw	ra,84(sp)
    2ff8:	dcc01417 	ldw	r19,80(sp)
    2ffc:	dc401317 	ldw	r17,76(sp)
    3000:	dec01604 	addi	sp,sp,88
    3004:	f800283a 	ret

00003008 <__adddf3>:
    3008:	deffea04 	addi	sp,sp,-88
    300c:	dcc01415 	stw	r19,80(sp)
    3010:	dcc00404 	addi	r19,sp,16
    3014:	2011883a 	mov	r8,r4
    3018:	2813883a 	mov	r9,r5
    301c:	dc401315 	stw	r17,76(sp)
    3020:	d809883a 	mov	r4,sp
    3024:	980b883a 	mov	r5,r19
    3028:	dc400904 	addi	r17,sp,36
    302c:	dfc01515 	stw	ra,84(sp)
    3030:	da400115 	stw	r9,4(sp)
    3034:	d9c00315 	stw	r7,12(sp)
    3038:	da000015 	stw	r8,0(sp)
    303c:	d9800215 	stw	r6,8(sp)
    3040:	0003ce00 	call	3ce0 <__unpack_d>
    3044:	d9000204 	addi	r4,sp,8
    3048:	880b883a 	mov	r5,r17
    304c:	0003ce00 	call	3ce0 <__unpack_d>
    3050:	d9800e04 	addi	r6,sp,56
    3054:	9809883a 	mov	r4,r19
    3058:	880b883a 	mov	r5,r17
    305c:	0002b780 	call	2b78 <_fpadd_parts>
    3060:	1009883a 	mov	r4,r2
    3064:	00039cc0 	call	39cc <__pack_d>
    3068:	dfc01517 	ldw	ra,84(sp)
    306c:	dcc01417 	ldw	r19,80(sp)
    3070:	dc401317 	ldw	r17,76(sp)
    3074:	dec01604 	addi	sp,sp,88
    3078:	f800283a 	ret

0000307c <__muldf3>:
    307c:	deffe004 	addi	sp,sp,-128
    3080:	dc401815 	stw	r17,96(sp)
    3084:	dc400404 	addi	r17,sp,16
    3088:	2011883a 	mov	r8,r4
    308c:	2813883a 	mov	r9,r5
    3090:	dc001715 	stw	r16,92(sp)
    3094:	d809883a 	mov	r4,sp
    3098:	880b883a 	mov	r5,r17
    309c:	dc000904 	addi	r16,sp,36
    30a0:	dfc01f15 	stw	ra,124(sp)
    30a4:	da400115 	stw	r9,4(sp)
    30a8:	d9c00315 	stw	r7,12(sp)
    30ac:	da000015 	stw	r8,0(sp)
    30b0:	d9800215 	stw	r6,8(sp)
    30b4:	ddc01e15 	stw	r23,120(sp)
    30b8:	dd801d15 	stw	r22,116(sp)
    30bc:	dd401c15 	stw	r21,112(sp)
    30c0:	dd001b15 	stw	r20,108(sp)
    30c4:	dcc01a15 	stw	r19,104(sp)
    30c8:	dc801915 	stw	r18,100(sp)
    30cc:	0003ce00 	call	3ce0 <__unpack_d>
    30d0:	d9000204 	addi	r4,sp,8
    30d4:	800b883a 	mov	r5,r16
    30d8:	0003ce00 	call	3ce0 <__unpack_d>
    30dc:	d9000417 	ldw	r4,16(sp)
    30e0:	00800044 	movi	r2,1
    30e4:	1100102e 	bgeu	r2,r4,3128 <__muldf3+0xac>
    30e8:	d8c00917 	ldw	r3,36(sp)
    30ec:	10c0062e 	bgeu	r2,r3,3108 <__muldf3+0x8c>
    30f0:	00800104 	movi	r2,4
    30f4:	20800a26 	beq	r4,r2,3120 <__muldf3+0xa4>
    30f8:	1880cc26 	beq	r3,r2,342c <__muldf3+0x3b0>
    30fc:	00800084 	movi	r2,2
    3100:	20800926 	beq	r4,r2,3128 <__muldf3+0xac>
    3104:	1880191e 	bne	r3,r2,316c <__muldf3+0xf0>
    3108:	d8c00a17 	ldw	r3,40(sp)
    310c:	d8800517 	ldw	r2,20(sp)
    3110:	8009883a 	mov	r4,r16
    3114:	10c4c03a 	cmpne	r2,r2,r3
    3118:	d8800a15 	stw	r2,40(sp)
    311c:	00000706 	br	313c <__muldf3+0xc0>
    3120:	00800084 	movi	r2,2
    3124:	1880c326 	beq	r3,r2,3434 <__muldf3+0x3b8>
    3128:	d8800517 	ldw	r2,20(sp)
    312c:	d8c00a17 	ldw	r3,40(sp)
    3130:	8809883a 	mov	r4,r17
    3134:	10c4c03a 	cmpne	r2,r2,r3
    3138:	d8800515 	stw	r2,20(sp)
    313c:	00039cc0 	call	39cc <__pack_d>
    3140:	dfc01f17 	ldw	ra,124(sp)
    3144:	ddc01e17 	ldw	r23,120(sp)
    3148:	dd801d17 	ldw	r22,116(sp)
    314c:	dd401c17 	ldw	r21,112(sp)
    3150:	dd001b17 	ldw	r20,108(sp)
    3154:	dcc01a17 	ldw	r19,104(sp)
    3158:	dc801917 	ldw	r18,100(sp)
    315c:	dc401817 	ldw	r17,96(sp)
    3160:	dc001717 	ldw	r16,92(sp)
    3164:	dec02004 	addi	sp,sp,128
    3168:	f800283a 	ret
    316c:	dd800717 	ldw	r22,28(sp)
    3170:	dc800c17 	ldw	r18,48(sp)
    3174:	002b883a 	mov	r21,zero
    3178:	0023883a 	mov	r17,zero
    317c:	a80b883a 	mov	r5,r21
    3180:	b00d883a 	mov	r6,r22
    3184:	880f883a 	mov	r7,r17
    3188:	ddc00817 	ldw	r23,32(sp)
    318c:	dcc00d17 	ldw	r19,52(sp)
    3190:	9009883a 	mov	r4,r18
    3194:	00022a80 	call	22a8 <__muldi3>
    3198:	001b883a 	mov	r13,zero
    319c:	680f883a 	mov	r7,r13
    31a0:	b009883a 	mov	r4,r22
    31a4:	000b883a 	mov	r5,zero
    31a8:	980d883a 	mov	r6,r19
    31ac:	b82d883a 	mov	r22,r23
    31b0:	002f883a 	mov	r23,zero
    31b4:	db401615 	stw	r13,88(sp)
    31b8:	d8801315 	stw	r2,76(sp)
    31bc:	d8c01415 	stw	r3,80(sp)
    31c0:	dcc01515 	stw	r19,84(sp)
    31c4:	00022a80 	call	22a8 <__muldi3>
    31c8:	b00d883a 	mov	r6,r22
    31cc:	000b883a 	mov	r5,zero
    31d0:	9009883a 	mov	r4,r18
    31d4:	b80f883a 	mov	r7,r23
    31d8:	1021883a 	mov	r16,r2
    31dc:	1823883a 	mov	r17,r3
    31e0:	00022a80 	call	22a8 <__muldi3>
    31e4:	8085883a 	add	r2,r16,r2
    31e8:	140d803a 	cmpltu	r6,r2,r16
    31ec:	88c7883a 	add	r3,r17,r3
    31f0:	30cd883a 	add	r6,r6,r3
    31f4:	1029883a 	mov	r20,r2
    31f8:	302b883a 	mov	r21,r6
    31fc:	da801317 	ldw	r10,76(sp)
    3200:	dac01417 	ldw	r11,80(sp)
    3204:	db001517 	ldw	r12,84(sp)
    3208:	db401617 	ldw	r13,88(sp)
    320c:	3440612e 	bgeu	r6,r17,3394 <__muldf3+0x318>
    3210:	0009883a 	mov	r4,zero
    3214:	5105883a 	add	r2,r10,r4
    3218:	128d803a 	cmpltu	r6,r2,r10
    321c:	5d07883a 	add	r3,r11,r20
    3220:	30cd883a 	add	r6,r6,r3
    3224:	0021883a 	mov	r16,zero
    3228:	04400044 	movi	r17,1
    322c:	1025883a 	mov	r18,r2
    3230:	3027883a 	mov	r19,r6
    3234:	32c06236 	bltu	r6,r11,33c0 <__muldf3+0x344>
    3238:	59807a26 	beq	r11,r6,3424 <__muldf3+0x3a8>
    323c:	680b883a 	mov	r5,r13
    3240:	b80f883a 	mov	r7,r23
    3244:	6009883a 	mov	r4,r12
    3248:	b00d883a 	mov	r6,r22
    324c:	00022a80 	call	22a8 <__muldi3>
    3250:	1009883a 	mov	r4,r2
    3254:	000f883a 	mov	r7,zero
    3258:	1545883a 	add	r2,r2,r21
    325c:	1111803a 	cmpltu	r8,r2,r4
    3260:	19c7883a 	add	r3,r3,r7
    3264:	40c7883a 	add	r3,r8,r3
    3268:	88cb883a 	add	r5,r17,r3
    326c:	d8c00617 	ldw	r3,24(sp)
    3270:	8089883a 	add	r4,r16,r2
    3274:	d8800b17 	ldw	r2,44(sp)
    3278:	18c00104 	addi	r3,r3,4
    327c:	240d803a 	cmpltu	r6,r4,r16
    3280:	10c7883a 	add	r3,r2,r3
    3284:	2013883a 	mov	r9,r4
    3288:	d8800a17 	ldw	r2,40(sp)
    328c:	d9000517 	ldw	r4,20(sp)
    3290:	314d883a 	add	r6,r6,r5
    3294:	3015883a 	mov	r10,r6
    3298:	2088c03a 	cmpne	r4,r4,r2
    329c:	00880034 	movhi	r2,8192
    32a0:	10bfffc4 	addi	r2,r2,-1
    32a4:	d9000f15 	stw	r4,60(sp)
    32a8:	d8c01015 	stw	r3,64(sp)
    32ac:	1180162e 	bgeu	r2,r6,3308 <__muldf3+0x28c>
    32b0:	1811883a 	mov	r8,r3
    32b4:	101f883a 	mov	r15,r2
    32b8:	980497fa 	slli	r2,r19,31
    32bc:	9016d07a 	srli	r11,r18,1
    32c0:	500697fa 	slli	r3,r10,31
    32c4:	480cd07a 	srli	r6,r9,1
    32c8:	500ed07a 	srli	r7,r10,1
    32cc:	12d6b03a 	or	r11,r2,r11
    32d0:	00800044 	movi	r2,1
    32d4:	198cb03a 	or	r6,r3,r6
    32d8:	4888703a 	and	r4,r9,r2
    32dc:	9818d07a 	srli	r12,r19,1
    32e0:	001b883a 	mov	r13,zero
    32e4:	03a00034 	movhi	r14,32768
    32e8:	3013883a 	mov	r9,r6
    32ec:	3815883a 	mov	r10,r7
    32f0:	4091883a 	add	r8,r8,r2
    32f4:	20000226 	beq	r4,zero,3300 <__muldf3+0x284>
    32f8:	5b64b03a 	or	r18,r11,r13
    32fc:	63a6b03a 	or	r19,r12,r14
    3300:	7abfed36 	bltu	r15,r10,32b8 <__muldf3+0x23c>
    3304:	da001015 	stw	r8,64(sp)
    3308:	00840034 	movhi	r2,4096
    330c:	10bfffc4 	addi	r2,r2,-1
    3310:	12801436 	bltu	r2,r10,3364 <__muldf3+0x2e8>
    3314:	da001017 	ldw	r8,64(sp)
    3318:	101f883a 	mov	r15,r2
    331c:	4a45883a 	add	r2,r9,r9
    3320:	124d803a 	cmpltu	r6,r2,r9
    3324:	5287883a 	add	r3,r10,r10
    3328:	9497883a 	add	r11,r18,r18
    332c:	5c8f803a 	cmpltu	r7,r11,r18
    3330:	9cd9883a 	add	r12,r19,r19
    3334:	01000044 	movi	r4,1
    3338:	30cd883a 	add	r6,r6,r3
    333c:	3b0f883a 	add	r7,r7,r12
    3340:	423fffc4 	addi	r8,r8,-1
    3344:	1013883a 	mov	r9,r2
    3348:	3015883a 	mov	r10,r6
    334c:	111ab03a 	or	r13,r2,r4
    3350:	98003016 	blt	r19,zero,3414 <__muldf3+0x398>
    3354:	5825883a 	mov	r18,r11
    3358:	3827883a 	mov	r19,r7
    335c:	7abfef2e 	bgeu	r15,r10,331c <__muldf3+0x2a0>
    3360:	da001015 	stw	r8,64(sp)
    3364:	00803fc4 	movi	r2,255
    3368:	488e703a 	and	r7,r9,r2
    336c:	00802004 	movi	r2,128
    3370:	0007883a 	mov	r3,zero
    3374:	0011883a 	mov	r8,zero
    3378:	38801826 	beq	r7,r2,33dc <__muldf3+0x360>
    337c:	008000c4 	movi	r2,3
    3380:	d9000e04 	addi	r4,sp,56
    3384:	da801215 	stw	r10,72(sp)
    3388:	d8800e15 	stw	r2,56(sp)
    338c:	da401115 	stw	r9,68(sp)
    3390:	003f6a06 	br	313c <__muldf3+0xc0>
    3394:	89802126 	beq	r17,r6,341c <__muldf3+0x3a0>
    3398:	0009883a 	mov	r4,zero
    339c:	5105883a 	add	r2,r10,r4
    33a0:	128d803a 	cmpltu	r6,r2,r10
    33a4:	5d07883a 	add	r3,r11,r20
    33a8:	30cd883a 	add	r6,r6,r3
    33ac:	0021883a 	mov	r16,zero
    33b0:	0023883a 	mov	r17,zero
    33b4:	1025883a 	mov	r18,r2
    33b8:	3027883a 	mov	r19,r6
    33bc:	32ff9e2e 	bgeu	r6,r11,3238 <__muldf3+0x1bc>
    33c0:	00800044 	movi	r2,1
    33c4:	8089883a 	add	r4,r16,r2
    33c8:	240d803a 	cmpltu	r6,r4,r16
    33cc:	344d883a 	add	r6,r6,r17
    33d0:	2021883a 	mov	r16,r4
    33d4:	3023883a 	mov	r17,r6
    33d8:	003f9806 	br	323c <__muldf3+0x1c0>
    33dc:	403fe71e 	bne	r8,zero,337c <__muldf3+0x300>
    33e0:	01004004 	movi	r4,256
    33e4:	4904703a 	and	r2,r9,r4
    33e8:	10c4b03a 	or	r2,r2,r3
    33ec:	103fe31e 	bne	r2,zero,337c <__muldf3+0x300>
    33f0:	94c4b03a 	or	r2,r18,r19
    33f4:	103fe126 	beq	r2,zero,337c <__muldf3+0x300>
    33f8:	49c5883a 	add	r2,r9,r7
    33fc:	1251803a 	cmpltu	r8,r2,r9
    3400:	4291883a 	add	r8,r8,r10
    3404:	013fc004 	movi	r4,-256
    3408:	1112703a 	and	r9,r2,r4
    340c:	4015883a 	mov	r10,r8
    3410:	003fda06 	br	337c <__muldf3+0x300>
    3414:	6813883a 	mov	r9,r13
    3418:	003fce06 	br	3354 <__muldf3+0x2d8>
    341c:	143f7c36 	bltu	r2,r16,3210 <__muldf3+0x194>
    3420:	003fdd06 	br	3398 <__muldf3+0x31c>
    3424:	12bf852e 	bgeu	r2,r10,323c <__muldf3+0x1c0>
    3428:	003fe506 	br	33c0 <__muldf3+0x344>
    342c:	00800084 	movi	r2,2
    3430:	20bf351e 	bne	r4,r2,3108 <__muldf3+0x8c>
    3434:	01000074 	movhi	r4,1
    3438:	2132fc04 	addi	r4,r4,-13328
    343c:	003f3f06 	br	313c <__muldf3+0xc0>

00003440 <__gedf2>:
    3440:	deffef04 	addi	sp,sp,-68
    3444:	dc400f15 	stw	r17,60(sp)
    3448:	dc400404 	addi	r17,sp,16
    344c:	2005883a 	mov	r2,r4
    3450:	2807883a 	mov	r3,r5
    3454:	dc000e15 	stw	r16,56(sp)
    3458:	d809883a 	mov	r4,sp
    345c:	880b883a 	mov	r5,r17
    3460:	dc000904 	addi	r16,sp,36
    3464:	d8c00115 	stw	r3,4(sp)
    3468:	d8800015 	stw	r2,0(sp)
    346c:	d9800215 	stw	r6,8(sp)
    3470:	dfc01015 	stw	ra,64(sp)
    3474:	d9c00315 	stw	r7,12(sp)
    3478:	0003ce00 	call	3ce0 <__unpack_d>
    347c:	d9000204 	addi	r4,sp,8
    3480:	800b883a 	mov	r5,r16
    3484:	0003ce00 	call	3ce0 <__unpack_d>
    3488:	d8800417 	ldw	r2,16(sp)
    348c:	00c00044 	movi	r3,1
    3490:	01bfffc4 	movi	r6,-1
    3494:	1880062e 	bgeu	r3,r2,34b0 <__gedf2+0x70>
    3498:	d8800917 	ldw	r2,36(sp)
    349c:	8809883a 	mov	r4,r17
    34a0:	800b883a 	mov	r5,r16
    34a4:	1880022e 	bgeu	r3,r2,34b0 <__gedf2+0x70>
    34a8:	0003e180 	call	3e18 <__fpcmp_parts_d>
    34ac:	100d883a 	mov	r6,r2
    34b0:	3005883a 	mov	r2,r6
    34b4:	dfc01017 	ldw	ra,64(sp)
    34b8:	dc400f17 	ldw	r17,60(sp)
    34bc:	dc000e17 	ldw	r16,56(sp)
    34c0:	dec01104 	addi	sp,sp,68
    34c4:	f800283a 	ret

000034c8 <__fixdfsi>:
    34c8:	defff804 	addi	sp,sp,-32
    34cc:	2005883a 	mov	r2,r4
    34d0:	2807883a 	mov	r3,r5
    34d4:	d809883a 	mov	r4,sp
    34d8:	d9400204 	addi	r5,sp,8
    34dc:	d8c00115 	stw	r3,4(sp)
    34e0:	d8800015 	stw	r2,0(sp)
    34e4:	dfc00715 	stw	ra,28(sp)
    34e8:	0003ce00 	call	3ce0 <__unpack_d>
    34ec:	d8c00217 	ldw	r3,8(sp)
    34f0:	00800084 	movi	r2,2
    34f4:	1880051e 	bne	r3,r2,350c <__fixdfsi+0x44>
    34f8:	0007883a 	mov	r3,zero
    34fc:	1805883a 	mov	r2,r3
    3500:	dfc00717 	ldw	ra,28(sp)
    3504:	dec00804 	addi	sp,sp,32
    3508:	f800283a 	ret
    350c:	00800044 	movi	r2,1
    3510:	10fff92e 	bgeu	r2,r3,34f8 <__fixdfsi+0x30>
    3514:	00800104 	movi	r2,4
    3518:	18800426 	beq	r3,r2,352c <__fixdfsi+0x64>
    351c:	d8c00417 	ldw	r3,16(sp)
    3520:	183ff516 	blt	r3,zero,34f8 <__fixdfsi+0x30>
    3524:	00800784 	movi	r2,30
    3528:	10c0080e 	bge	r2,r3,354c <__fixdfsi+0x84>
    352c:	d8800317 	ldw	r2,12(sp)
    3530:	1000121e 	bne	r2,zero,357c <__fixdfsi+0xb4>
    3534:	00e00034 	movhi	r3,32768
    3538:	18ffffc4 	addi	r3,r3,-1
    353c:	1805883a 	mov	r2,r3
    3540:	dfc00717 	ldw	ra,28(sp)
    3544:	dec00804 	addi	sp,sp,32
    3548:	f800283a 	ret
    354c:	00800f04 	movi	r2,60
    3550:	10d1c83a 	sub	r8,r2,r3
    3554:	40bff804 	addi	r2,r8,-32
    3558:	d9800517 	ldw	r6,20(sp)
    355c:	d9c00617 	ldw	r7,24(sp)
    3560:	10000816 	blt	r2,zero,3584 <__fixdfsi+0xbc>
    3564:	3888d83a 	srl	r4,r7,r2
    3568:	d8800317 	ldw	r2,12(sp)
    356c:	2007883a 	mov	r3,r4
    3570:	103fe226 	beq	r2,zero,34fc <__fixdfsi+0x34>
    3574:	0107c83a 	sub	r3,zero,r4
    3578:	003fe006 	br	34fc <__fixdfsi+0x34>
    357c:	00e00034 	movhi	r3,32768
    3580:	003fde06 	br	34fc <__fixdfsi+0x34>
    3584:	39c7883a 	add	r3,r7,r7
    3588:	008007c4 	movi	r2,31
    358c:	1205c83a 	sub	r2,r2,r8
    3590:	1886983a 	sll	r3,r3,r2
    3594:	3208d83a 	srl	r4,r6,r8
    3598:	1908b03a 	or	r4,r3,r4
    359c:	003ff206 	br	3568 <__fixdfsi+0xa0>

000035a0 <__make_dp>:
    35a0:	defff904 	addi	sp,sp,-28
    35a4:	d8c00717 	ldw	r3,28(sp)
    35a8:	d9000015 	stw	r4,0(sp)
    35ac:	d809883a 	mov	r4,sp
    35b0:	dfc00515 	stw	ra,20(sp)
    35b4:	d9c00615 	stw	r7,24(sp)
    35b8:	d9400115 	stw	r5,4(sp)
    35bc:	d9800215 	stw	r6,8(sp)
    35c0:	d8c00415 	stw	r3,16(sp)
    35c4:	d9c00315 	stw	r7,12(sp)
    35c8:	00039cc0 	call	39cc <__pack_d>
    35cc:	dfc00517 	ldw	ra,20(sp)
    35d0:	dec00704 	addi	sp,sp,28
    35d4:	f800283a 	ret

000035d8 <udivmodsi4>:
    35d8:	29001b2e 	bgeu	r5,r4,3648 <udivmodsi4+0x70>
    35dc:	28001a16 	blt	r5,zero,3648 <udivmodsi4+0x70>
    35e0:	00800044 	movi	r2,1
    35e4:	0007883a 	mov	r3,zero
    35e8:	01c007c4 	movi	r7,31
    35ec:	00000306 	br	35fc <udivmodsi4+0x24>
    35f0:	19c01326 	beq	r3,r7,3640 <udivmodsi4+0x68>
    35f4:	18c00044 	addi	r3,r3,1
    35f8:	28000416 	blt	r5,zero,360c <udivmodsi4+0x34>
    35fc:	294b883a 	add	r5,r5,r5
    3600:	1085883a 	add	r2,r2,r2
    3604:	293ffa36 	bltu	r5,r4,35f0 <udivmodsi4+0x18>
    3608:	10000d26 	beq	r2,zero,3640 <udivmodsi4+0x68>
    360c:	0007883a 	mov	r3,zero
    3610:	21400236 	bltu	r4,r5,361c <udivmodsi4+0x44>
    3614:	2149c83a 	sub	r4,r4,r5
    3618:	1886b03a 	or	r3,r3,r2
    361c:	1004d07a 	srli	r2,r2,1
    3620:	280ad07a 	srli	r5,r5,1
    3624:	103ffa1e 	bne	r2,zero,3610 <udivmodsi4+0x38>
    3628:	30000226 	beq	r6,zero,3634 <udivmodsi4+0x5c>
    362c:	2005883a 	mov	r2,r4
    3630:	f800283a 	ret
    3634:	1809883a 	mov	r4,r3
    3638:	2005883a 	mov	r2,r4
    363c:	f800283a 	ret
    3640:	0007883a 	mov	r3,zero
    3644:	003ff806 	br	3628 <udivmodsi4+0x50>
    3648:	00800044 	movi	r2,1
    364c:	0007883a 	mov	r3,zero
    3650:	003fef06 	br	3610 <udivmodsi4+0x38>

00003654 <__divsi3>:
    3654:	defffe04 	addi	sp,sp,-8
    3658:	dc000015 	stw	r16,0(sp)
    365c:	dfc00115 	stw	ra,4(sp)
    3660:	0021883a 	mov	r16,zero
    3664:	20000c16 	blt	r4,zero,3698 <__divsi3+0x44>
    3668:	000d883a 	mov	r6,zero
    366c:	28000e16 	blt	r5,zero,36a8 <__divsi3+0x54>
    3670:	00035d80 	call	35d8 <udivmodsi4>
    3674:	1007883a 	mov	r3,r2
    3678:	8005003a 	cmpeq	r2,r16,zero
    367c:	1000011e 	bne	r2,zero,3684 <__divsi3+0x30>
    3680:	00c7c83a 	sub	r3,zero,r3
    3684:	1805883a 	mov	r2,r3
    3688:	dfc00117 	ldw	ra,4(sp)
    368c:	dc000017 	ldw	r16,0(sp)
    3690:	dec00204 	addi	sp,sp,8
    3694:	f800283a 	ret
    3698:	0109c83a 	sub	r4,zero,r4
    369c:	04000044 	movi	r16,1
    36a0:	000d883a 	mov	r6,zero
    36a4:	283ff20e 	bge	r5,zero,3670 <__divsi3+0x1c>
    36a8:	014bc83a 	sub	r5,zero,r5
    36ac:	8021003a 	cmpeq	r16,r16,zero
    36b0:	003fef06 	br	3670 <__divsi3+0x1c>

000036b4 <__modsi3>:
    36b4:	deffff04 	addi	sp,sp,-4
    36b8:	dfc00015 	stw	ra,0(sp)
    36bc:	01800044 	movi	r6,1
    36c0:	2807883a 	mov	r3,r5
    36c4:	20000416 	blt	r4,zero,36d8 <__modsi3+0x24>
    36c8:	28000c16 	blt	r5,zero,36fc <__modsi3+0x48>
    36cc:	dfc00017 	ldw	ra,0(sp)
    36d0:	dec00104 	addi	sp,sp,4
    36d4:	00035d81 	jmpi	35d8 <udivmodsi4>
    36d8:	0109c83a 	sub	r4,zero,r4
    36dc:	28000b16 	blt	r5,zero,370c <__modsi3+0x58>
    36e0:	180b883a 	mov	r5,r3
    36e4:	01800044 	movi	r6,1
    36e8:	00035d80 	call	35d8 <udivmodsi4>
    36ec:	0085c83a 	sub	r2,zero,r2
    36f0:	dfc00017 	ldw	ra,0(sp)
    36f4:	dec00104 	addi	sp,sp,4
    36f8:	f800283a 	ret
    36fc:	014bc83a 	sub	r5,zero,r5
    3700:	dfc00017 	ldw	ra,0(sp)
    3704:	dec00104 	addi	sp,sp,4
    3708:	00035d81 	jmpi	35d8 <udivmodsi4>
    370c:	0147c83a 	sub	r3,zero,r5
    3710:	003ff306 	br	36e0 <__modsi3+0x2c>

00003714 <__udivsi3>:
    3714:	000d883a 	mov	r6,zero
    3718:	00035d81 	jmpi	35d8 <udivmodsi4>

0000371c <__umodsi3>:
    371c:	01800044 	movi	r6,1
    3720:	00035d81 	jmpi	35d8 <udivmodsi4>

00003724 <__clzsi2>:
    3724:	00bfffd4 	movui	r2,65535
    3728:	11000e36 	bltu	r2,r4,3764 <__clzsi2+0x40>
    372c:	00803fc4 	movi	r2,255
    3730:	01400204 	movi	r5,8
    3734:	0007883a 	mov	r3,zero
    3738:	11001036 	bltu	r2,r4,377c <__clzsi2+0x58>
    373c:	000b883a 	mov	r5,zero
    3740:	20c6d83a 	srl	r3,r4,r3
    3744:	00800074 	movhi	r2,1
    3748:	10b30104 	addi	r2,r2,-13308
    374c:	1887883a 	add	r3,r3,r2
    3750:	18800003 	ldbu	r2,0(r3)
    3754:	00c00804 	movi	r3,32
    3758:	2885883a 	add	r2,r5,r2
    375c:	1885c83a 	sub	r2,r3,r2
    3760:	f800283a 	ret
    3764:	01400404 	movi	r5,16
    3768:	00804034 	movhi	r2,256
    376c:	10bfffc4 	addi	r2,r2,-1
    3770:	2807883a 	mov	r3,r5
    3774:	113ff22e 	bgeu	r2,r4,3740 <__clzsi2+0x1c>
    3778:	01400604 	movi	r5,24
    377c:	2807883a 	mov	r3,r5
    3780:	20c6d83a 	srl	r3,r4,r3
    3784:	00800074 	movhi	r2,1
    3788:	10b30104 	addi	r2,r2,-13308
    378c:	1887883a 	add	r3,r3,r2
    3790:	18800003 	ldbu	r2,0(r3)
    3794:	00c00804 	movi	r3,32
    3798:	2885883a 	add	r2,r5,r2
    379c:	1885c83a 	sub	r2,r3,r2
    37a0:	f800283a 	ret

000037a4 <__pack_f>:
    37a4:	20c00017 	ldw	r3,0(r4)
    37a8:	01c00044 	movi	r7,1
    37ac:	21800317 	ldw	r6,12(r4)
    37b0:	21400117 	ldw	r5,4(r4)
    37b4:	38c02d2e 	bgeu	r7,r3,386c <__pack_f+0xc8>
    37b8:	00800104 	movi	r2,4
    37bc:	18802826 	beq	r3,r2,3860 <__pack_f+0xbc>
    37c0:	00800084 	movi	r2,2
    37c4:	18800126 	beq	r3,r2,37cc <__pack_f+0x28>
    37c8:	3000101e 	bne	r6,zero,380c <__pack_f+0x68>
    37cc:	000d883a 	mov	r6,zero
    37d0:	0007883a 	mov	r3,zero
    37d4:	19003fcc 	andi	r4,r3,255
    37d8:	200895fa 	slli	r4,r4,23
    37dc:	00c02034 	movhi	r3,128
    37e0:	18ffffc4 	addi	r3,r3,-1
    37e4:	30c6703a 	and	r3,r6,r3
    37e8:	10a0002c 	andhi	r2,r2,32768
    37ec:	10c4b03a 	or	r2,r2,r3
    37f0:	280a97fa 	slli	r5,r5,31
    37f4:	1104b03a 	or	r2,r2,r4
    37f8:	00e00034 	movhi	r3,32768
    37fc:	18ffffc4 	addi	r3,r3,-1
    3800:	10c4703a 	and	r2,r2,r3
    3804:	1144b03a 	or	r2,r2,r5
    3808:	f800283a 	ret
    380c:	21000217 	ldw	r4,8(r4)
    3810:	00bfe084 	movi	r2,-126
    3814:	20801b16 	blt	r4,r2,3884 <__pack_f+0xe0>
    3818:	00801fc4 	movi	r2,127
    381c:	11001016 	blt	r2,r4,3860 <__pack_f+0xbc>
    3820:	308e703a 	and	r7,r6,r2
    3824:	2087883a 	add	r3,r4,r2
    3828:	00801004 	movi	r2,64
    382c:	38800526 	beq	r7,r2,3844 <__pack_f+0xa0>
    3830:	31800fc4 	addi	r6,r6,63
    3834:	30000716 	blt	r6,zero,3854 <__pack_f+0xb0>
    3838:	300490ba 	slli	r2,r6,2
    383c:	100cd27a 	srli	r6,r2,9
    3840:	003fe406 	br	37d4 <__pack_f+0x30>
    3844:	3080200c 	andi	r2,r6,128
    3848:	103ffa26 	beq	r2,zero,3834 <__pack_f+0x90>
    384c:	31cd883a 	add	r6,r6,r7
    3850:	003ff806 	br	3834 <__pack_f+0x90>
    3854:	300cd07a 	srli	r6,r6,1
    3858:	18c00044 	addi	r3,r3,1
    385c:	003ff606 	br	3838 <__pack_f+0x94>
    3860:	000d883a 	mov	r6,zero
    3864:	00ffffc4 	movi	r3,-1
    3868:	003fda06 	br	37d4 <__pack_f+0x30>
    386c:	31800434 	orhi	r6,r6,16
    3870:	00802034 	movhi	r2,128
    3874:	10bfffc4 	addi	r2,r2,-1
    3878:	308c703a 	and	r6,r6,r2
    387c:	00ffffc4 	movi	r3,-1
    3880:	003fd406 	br	37d4 <__pack_f+0x30>
    3884:	1109c83a 	sub	r4,r2,r4
    3888:	00800644 	movi	r2,25
    388c:	11001216 	blt	r2,r4,38d8 <__pack_f+0x134>
    3890:	3904983a 	sll	r2,r7,r4
    3894:	3106d83a 	srl	r3,r6,r4
    3898:	10bfffc4 	addi	r2,r2,-1
    389c:	3084703a 	and	r2,r6,r2
    38a0:	1004c03a 	cmpne	r2,r2,zero
    38a4:	1886b03a 	or	r3,r3,r2
    38a8:	19001fcc 	andi	r4,r3,127
    38ac:	00801004 	movi	r2,64
    38b0:	20800c26 	beq	r4,r2,38e4 <__pack_f+0x140>
    38b4:	18c00fc4 	addi	r3,r3,63
    38b8:	00900034 	movhi	r2,16384
    38bc:	10bfffc4 	addi	r2,r2,-1
    38c0:	180cd1fa 	srli	r6,r3,7
    38c4:	10c7803a 	cmpltu	r3,r2,r3
    38c8:	00802034 	movhi	r2,128
    38cc:	10bfffc4 	addi	r2,r2,-1
    38d0:	308c703a 	and	r6,r6,r2
    38d4:	003fbf06 	br	37d4 <__pack_f+0x30>
    38d8:	0007883a 	mov	r3,zero
    38dc:	000d883a 	mov	r6,zero
    38e0:	003ff906 	br	38c8 <__pack_f+0x124>
    38e4:	1880200c 	andi	r2,r3,128
    38e8:	10000126 	beq	r2,zero,38f0 <__pack_f+0x14c>
    38ec:	1907883a 	add	r3,r3,r4
    38f0:	180cd1fa 	srli	r6,r3,7
    38f4:	00900034 	movhi	r2,16384
    38f8:	10bfffc4 	addi	r2,r2,-1
    38fc:	10c7803a 	cmpltu	r3,r2,r3
    3900:	003ff106 	br	38c8 <__pack_f+0x124>

00003904 <__unpack_f>:
    3904:	21800017 	ldw	r6,0(r4)
    3908:	00c02034 	movhi	r3,128
    390c:	18ffffc4 	addi	r3,r3,-1
    3910:	3004d5fa 	srli	r2,r6,23
    3914:	3008d7fa 	srli	r4,r6,31
    3918:	30ce703a 	and	r7,r6,r3
    391c:	10c03fcc 	andi	r3,r2,255
    3920:	29000115 	stw	r4,4(r5)
    3924:	1800131e 	bne	r3,zero,3974 <__unpack_f+0x70>
    3928:	38000f26 	beq	r7,zero,3968 <__unpack_f+0x64>
    392c:	380691fa 	slli	r3,r7,7
    3930:	01bfe084 	movi	r6,-126
    3934:	008000c4 	movi	r2,3
    3938:	01100034 	movhi	r4,16384
    393c:	213fffc4 	addi	r4,r4,-1
    3940:	28800015 	stw	r2,0(r5)
    3944:	29800215 	stw	r6,8(r5)
    3948:	20c00536 	bltu	r4,r3,3960 <__unpack_f+0x5c>
    394c:	3005883a 	mov	r2,r6
    3950:	18c7883a 	add	r3,r3,r3
    3954:	10bfffc4 	addi	r2,r2,-1
    3958:	20fffd2e 	bgeu	r4,r3,3950 <__unpack_f+0x4c>
    395c:	28800215 	stw	r2,8(r5)
    3960:	28c00315 	stw	r3,12(r5)
    3964:	f800283a 	ret
    3968:	00800084 	movi	r2,2
    396c:	28800015 	stw	r2,0(r5)
    3970:	f800283a 	ret
    3974:	00803fc4 	movi	r2,255
    3978:	18800826 	beq	r3,r2,399c <__unpack_f+0x98>
    397c:	380491fa 	slli	r2,r7,7
    3980:	18ffe044 	addi	r3,r3,-127
    3984:	28c00215 	stw	r3,8(r5)
    3988:	10900034 	orhi	r2,r2,16384
    398c:	28800315 	stw	r2,12(r5)
    3990:	008000c4 	movi	r2,3
    3994:	28800015 	stw	r2,0(r5)
    3998:	f800283a 	ret
    399c:	3800031e 	bne	r7,zero,39ac <__unpack_f+0xa8>
    39a0:	00800104 	movi	r2,4
    39a4:	28800015 	stw	r2,0(r5)
    39a8:	f800283a 	ret
    39ac:	3080042c 	andhi	r2,r6,16
    39b0:	10000426 	beq	r2,zero,39c4 <__unpack_f+0xc0>
    39b4:	00800044 	movi	r2,1
    39b8:	28800015 	stw	r2,0(r5)
    39bc:	29c00315 	stw	r7,12(r5)
    39c0:	f800283a 	ret
    39c4:	28000015 	stw	zero,0(r5)
    39c8:	003ffc06 	br	39bc <__unpack_f+0xb8>

000039cc <__pack_d>:
    39cc:	20c00017 	ldw	r3,0(r4)
    39d0:	defffd04 	addi	sp,sp,-12
    39d4:	dc000015 	stw	r16,0(sp)
    39d8:	dc800215 	stw	r18,8(sp)
    39dc:	dc400115 	stw	r17,4(sp)
    39e0:	00800044 	movi	r2,1
    39e4:	22000317 	ldw	r8,12(r4)
    39e8:	001f883a 	mov	r15,zero
    39ec:	22400417 	ldw	r9,16(r4)
    39f0:	24000117 	ldw	r16,4(r4)
    39f4:	10c0552e 	bgeu	r2,r3,3b4c <__pack_d+0x180>
    39f8:	00800104 	movi	r2,4
    39fc:	18804f26 	beq	r3,r2,3b3c <__pack_d+0x170>
    3a00:	00800084 	movi	r2,2
    3a04:	18800226 	beq	r3,r2,3a10 <__pack_d+0x44>
    3a08:	4244b03a 	or	r2,r8,r9
    3a0c:	10001a1e 	bne	r2,zero,3a78 <__pack_d+0xac>
    3a10:	000d883a 	mov	r6,zero
    3a14:	000f883a 	mov	r7,zero
    3a18:	0011883a 	mov	r8,zero
    3a1c:	00800434 	movhi	r2,16
    3a20:	10bfffc4 	addi	r2,r2,-1
    3a24:	301d883a 	mov	r14,r6
    3a28:	3884703a 	and	r2,r7,r2
    3a2c:	400a953a 	slli	r5,r8,20
    3a30:	79bffc2c 	andhi	r6,r15,65520
    3a34:	308cb03a 	or	r6,r6,r2
    3a38:	00e00434 	movhi	r3,32784
    3a3c:	18ffffc4 	addi	r3,r3,-1
    3a40:	800497fa 	slli	r2,r16,31
    3a44:	30c6703a 	and	r3,r6,r3
    3a48:	1946b03a 	or	r3,r3,r5
    3a4c:	01600034 	movhi	r5,32768
    3a50:	297fffc4 	addi	r5,r5,-1
    3a54:	194a703a 	and	r5,r3,r5
    3a58:	288ab03a 	or	r5,r5,r2
    3a5c:	2807883a 	mov	r3,r5
    3a60:	7005883a 	mov	r2,r14
    3a64:	dc800217 	ldw	r18,8(sp)
    3a68:	dc400117 	ldw	r17,4(sp)
    3a6c:	dc000017 	ldw	r16,0(sp)
    3a70:	dec00304 	addi	sp,sp,12
    3a74:	f800283a 	ret
    3a78:	21000217 	ldw	r4,8(r4)
    3a7c:	00bf0084 	movi	r2,-1022
    3a80:	20803f16 	blt	r4,r2,3b80 <__pack_d+0x1b4>
    3a84:	0080ffc4 	movi	r2,1023
    3a88:	11002c16 	blt	r2,r4,3b3c <__pack_d+0x170>
    3a8c:	00803fc4 	movi	r2,255
    3a90:	408c703a 	and	r6,r8,r2
    3a94:	00802004 	movi	r2,128
    3a98:	0007883a 	mov	r3,zero
    3a9c:	000f883a 	mov	r7,zero
    3aa0:	2280ffc4 	addi	r10,r4,1023
    3aa4:	30801e26 	beq	r6,r2,3b20 <__pack_d+0x154>
    3aa8:	00801fc4 	movi	r2,127
    3aac:	4089883a 	add	r4,r8,r2
    3ab0:	220d803a 	cmpltu	r6,r4,r8
    3ab4:	324d883a 	add	r6,r6,r9
    3ab8:	2011883a 	mov	r8,r4
    3abc:	3013883a 	mov	r9,r6
    3ac0:	00880034 	movhi	r2,8192
    3ac4:	10bfffc4 	addi	r2,r2,-1
    3ac8:	12400d36 	bltu	r2,r9,3b00 <__pack_d+0x134>
    3acc:	4804963a 	slli	r2,r9,24
    3ad0:	400cd23a 	srli	r6,r8,8
    3ad4:	480ed23a 	srli	r7,r9,8
    3ad8:	013fffc4 	movi	r4,-1
    3adc:	118cb03a 	or	r6,r2,r6
    3ae0:	01400434 	movhi	r5,16
    3ae4:	297fffc4 	addi	r5,r5,-1
    3ae8:	3104703a 	and	r2,r6,r4
    3aec:	3946703a 	and	r3,r7,r5
    3af0:	5201ffcc 	andi	r8,r10,2047
    3af4:	100d883a 	mov	r6,r2
    3af8:	180f883a 	mov	r7,r3
    3afc:	003fc706 	br	3a1c <__pack_d+0x50>
    3b00:	480897fa 	slli	r4,r9,31
    3b04:	4004d07a 	srli	r2,r8,1
    3b08:	4806d07a 	srli	r3,r9,1
    3b0c:	52800044 	addi	r10,r10,1
    3b10:	2084b03a 	or	r2,r4,r2
    3b14:	1011883a 	mov	r8,r2
    3b18:	1813883a 	mov	r9,r3
    3b1c:	003feb06 	br	3acc <__pack_d+0x100>
    3b20:	383fe11e 	bne	r7,zero,3aa8 <__pack_d+0xdc>
    3b24:	01004004 	movi	r4,256
    3b28:	4104703a 	and	r2,r8,r4
    3b2c:	10c4b03a 	or	r2,r2,r3
    3b30:	103fe326 	beq	r2,zero,3ac0 <__pack_d+0xf4>
    3b34:	3005883a 	mov	r2,r6
    3b38:	003fdc06 	br	3aac <__pack_d+0xe0>
    3b3c:	000d883a 	mov	r6,zero
    3b40:	000f883a 	mov	r7,zero
    3b44:	0201ffc4 	movi	r8,2047
    3b48:	003fb406 	br	3a1c <__pack_d+0x50>
    3b4c:	0005883a 	mov	r2,zero
    3b50:	00c00234 	movhi	r3,8
    3b54:	408cb03a 	or	r6,r8,r2
    3b58:	48ceb03a 	or	r7,r9,r3
    3b5c:	013fffc4 	movi	r4,-1
    3b60:	01400434 	movhi	r5,16
    3b64:	297fffc4 	addi	r5,r5,-1
    3b68:	3104703a 	and	r2,r6,r4
    3b6c:	3946703a 	and	r3,r7,r5
    3b70:	100d883a 	mov	r6,r2
    3b74:	180f883a 	mov	r7,r3
    3b78:	0201ffc4 	movi	r8,2047
    3b7c:	003fa706 	br	3a1c <__pack_d+0x50>
    3b80:	1109c83a 	sub	r4,r2,r4
    3b84:	00800e04 	movi	r2,56
    3b88:	11004316 	blt	r2,r4,3c98 <__pack_d+0x2cc>
    3b8c:	21fff804 	addi	r7,r4,-32
    3b90:	38004516 	blt	r7,zero,3ca8 <__pack_d+0x2dc>
    3b94:	49d8d83a 	srl	r12,r9,r7
    3b98:	001b883a 	mov	r13,zero
    3b9c:	0023883a 	mov	r17,zero
    3ba0:	01400044 	movi	r5,1
    3ba4:	0025883a 	mov	r18,zero
    3ba8:	38004716 	blt	r7,zero,3cc8 <__pack_d+0x2fc>
    3bac:	29d6983a 	sll	r11,r5,r7
    3bb0:	0015883a 	mov	r10,zero
    3bb4:	00bfffc4 	movi	r2,-1
    3bb8:	5089883a 	add	r4,r10,r2
    3bbc:	588b883a 	add	r5,r11,r2
    3bc0:	228d803a 	cmpltu	r6,r4,r10
    3bc4:	314b883a 	add	r5,r6,r5
    3bc8:	4104703a 	and	r2,r8,r4
    3bcc:	4946703a 	and	r3,r9,r5
    3bd0:	10c4b03a 	or	r2,r2,r3
    3bd4:	10000226 	beq	r2,zero,3be0 <__pack_d+0x214>
    3bd8:	04400044 	movi	r17,1
    3bdc:	0025883a 	mov	r18,zero
    3be0:	00803fc4 	movi	r2,255
    3be4:	644eb03a 	or	r7,r12,r17
    3be8:	3892703a 	and	r9,r7,r2
    3bec:	00802004 	movi	r2,128
    3bf0:	6c90b03a 	or	r8,r13,r18
    3bf4:	0015883a 	mov	r10,zero
    3bf8:	48801626 	beq	r9,r2,3c54 <__pack_d+0x288>
    3bfc:	01001fc4 	movi	r4,127
    3c00:	3905883a 	add	r2,r7,r4
    3c04:	11cd803a 	cmpltu	r6,r2,r7
    3c08:	320d883a 	add	r6,r6,r8
    3c0c:	100f883a 	mov	r7,r2
    3c10:	00840034 	movhi	r2,4096
    3c14:	10bfffc4 	addi	r2,r2,-1
    3c18:	3011883a 	mov	r8,r6
    3c1c:	0007883a 	mov	r3,zero
    3c20:	11801b36 	bltu	r2,r6,3c90 <__pack_d+0x2c4>
    3c24:	4004963a 	slli	r2,r8,24
    3c28:	3808d23a 	srli	r4,r7,8
    3c2c:	400ad23a 	srli	r5,r8,8
    3c30:	1813883a 	mov	r9,r3
    3c34:	1108b03a 	or	r4,r2,r4
    3c38:	00bfffc4 	movi	r2,-1
    3c3c:	00c00434 	movhi	r3,16
    3c40:	18ffffc4 	addi	r3,r3,-1
    3c44:	208c703a 	and	r6,r4,r2
    3c48:	28ce703a 	and	r7,r5,r3
    3c4c:	4a01ffcc 	andi	r8,r9,2047
    3c50:	003f7206 	br	3a1c <__pack_d+0x50>
    3c54:	503fe91e 	bne	r10,zero,3bfc <__pack_d+0x230>
    3c58:	01004004 	movi	r4,256
    3c5c:	3904703a 	and	r2,r7,r4
    3c60:	0007883a 	mov	r3,zero
    3c64:	10c4b03a 	or	r2,r2,r3
    3c68:	10000626 	beq	r2,zero,3c84 <__pack_d+0x2b8>
    3c6c:	3a45883a 	add	r2,r7,r9
    3c70:	11cd803a 	cmpltu	r6,r2,r7
    3c74:	320d883a 	add	r6,r6,r8
    3c78:	100f883a 	mov	r7,r2
    3c7c:	3011883a 	mov	r8,r6
    3c80:	0007883a 	mov	r3,zero
    3c84:	00840034 	movhi	r2,4096
    3c88:	10bfffc4 	addi	r2,r2,-1
    3c8c:	123fe52e 	bgeu	r2,r8,3c24 <__pack_d+0x258>
    3c90:	00c00044 	movi	r3,1
    3c94:	003fe306 	br	3c24 <__pack_d+0x258>
    3c98:	0009883a 	mov	r4,zero
    3c9c:	0013883a 	mov	r9,zero
    3ca0:	000b883a 	mov	r5,zero
    3ca4:	003fe406 	br	3c38 <__pack_d+0x26c>
    3ca8:	4a47883a 	add	r3,r9,r9
    3cac:	008007c4 	movi	r2,31
    3cb0:	1105c83a 	sub	r2,r2,r4
    3cb4:	1886983a 	sll	r3,r3,r2
    3cb8:	4118d83a 	srl	r12,r8,r4
    3cbc:	491ad83a 	srl	r13,r9,r4
    3cc0:	1b18b03a 	or	r12,r3,r12
    3cc4:	003fb506 	br	3b9c <__pack_d+0x1d0>
    3cc8:	2806d07a 	srli	r3,r5,1
    3ccc:	008007c4 	movi	r2,31
    3cd0:	1105c83a 	sub	r2,r2,r4
    3cd4:	1896d83a 	srl	r11,r3,r2
    3cd8:	2914983a 	sll	r10,r5,r4
    3cdc:	003fb506 	br	3bb4 <__pack_d+0x1e8>

00003ce0 <__unpack_d>:
    3ce0:	20c00117 	ldw	r3,4(r4)
    3ce4:	22400017 	ldw	r9,0(r4)
    3ce8:	00800434 	movhi	r2,16
    3cec:	10bfffc4 	addi	r2,r2,-1
    3cf0:	1808d53a 	srli	r4,r3,20
    3cf4:	180cd7fa 	srli	r6,r3,31
    3cf8:	1894703a 	and	r10,r3,r2
    3cfc:	2201ffcc 	andi	r8,r4,2047
    3d00:	281b883a 	mov	r13,r5
    3d04:	4817883a 	mov	r11,r9
    3d08:	29800115 	stw	r6,4(r5)
    3d0c:	5019883a 	mov	r12,r10
    3d10:	40001e1e 	bne	r8,zero,3d8c <__unpack_d+0xac>
    3d14:	4a84b03a 	or	r2,r9,r10
    3d18:	10001926 	beq	r2,zero,3d80 <__unpack_d+0xa0>
    3d1c:	4804d63a 	srli	r2,r9,24
    3d20:	500c923a 	slli	r6,r10,8
    3d24:	013f0084 	movi	r4,-1022
    3d28:	00c40034 	movhi	r3,4096
    3d2c:	18ffffc4 	addi	r3,r3,-1
    3d30:	118cb03a 	or	r6,r2,r6
    3d34:	008000c4 	movi	r2,3
    3d38:	480a923a 	slli	r5,r9,8
    3d3c:	68800015 	stw	r2,0(r13)
    3d40:	69000215 	stw	r4,8(r13)
    3d44:	19800b36 	bltu	r3,r6,3d74 <__unpack_d+0x94>
    3d48:	200f883a 	mov	r7,r4
    3d4c:	1811883a 	mov	r8,r3
    3d50:	2945883a 	add	r2,r5,r5
    3d54:	1149803a 	cmpltu	r4,r2,r5
    3d58:	3187883a 	add	r3,r6,r6
    3d5c:	20c9883a 	add	r4,r4,r3
    3d60:	100b883a 	mov	r5,r2
    3d64:	200d883a 	mov	r6,r4
    3d68:	39ffffc4 	addi	r7,r7,-1
    3d6c:	413ff82e 	bgeu	r8,r4,3d50 <__unpack_d+0x70>
    3d70:	69c00215 	stw	r7,8(r13)
    3d74:	69800415 	stw	r6,16(r13)
    3d78:	69400315 	stw	r5,12(r13)
    3d7c:	f800283a 	ret
    3d80:	00800084 	movi	r2,2
    3d84:	28800015 	stw	r2,0(r5)
    3d88:	f800283a 	ret
    3d8c:	0081ffc4 	movi	r2,2047
    3d90:	40800f26 	beq	r8,r2,3dd0 <__unpack_d+0xf0>
    3d94:	480cd63a 	srli	r6,r9,24
    3d98:	5006923a 	slli	r3,r10,8
    3d9c:	4804923a 	slli	r2,r9,8
    3da0:	0009883a 	mov	r4,zero
    3da4:	30c6b03a 	or	r3,r6,r3
    3da8:	01440034 	movhi	r5,4096
    3dac:	110cb03a 	or	r6,r2,r4
    3db0:	423f0044 	addi	r8,r8,-1023
    3db4:	194eb03a 	or	r7,r3,r5
    3db8:	008000c4 	movi	r2,3
    3dbc:	69c00415 	stw	r7,16(r13)
    3dc0:	6a000215 	stw	r8,8(r13)
    3dc4:	68800015 	stw	r2,0(r13)
    3dc8:	69800315 	stw	r6,12(r13)
    3dcc:	f800283a 	ret
    3dd0:	4a84b03a 	or	r2,r9,r10
    3dd4:	1000031e 	bne	r2,zero,3de4 <__unpack_d+0x104>
    3dd8:	00800104 	movi	r2,4
    3ddc:	28800015 	stw	r2,0(r5)
    3de0:	f800283a 	ret
    3de4:	0009883a 	mov	r4,zero
    3de8:	01400234 	movhi	r5,8
    3dec:	4904703a 	and	r2,r9,r4
    3df0:	5146703a 	and	r3,r10,r5
    3df4:	10c4b03a 	or	r2,r2,r3
    3df8:	10000526 	beq	r2,zero,3e10 <__unpack_d+0x130>
    3dfc:	00800044 	movi	r2,1
    3e00:	68800015 	stw	r2,0(r13)
    3e04:	6b000415 	stw	r12,16(r13)
    3e08:	6ac00315 	stw	r11,12(r13)
    3e0c:	f800283a 	ret
    3e10:	68000015 	stw	zero,0(r13)
    3e14:	003ffb06 	br	3e04 <__unpack_d+0x124>

00003e18 <__fpcmp_parts_d>:
    3e18:	21800017 	ldw	r6,0(r4)
    3e1c:	00c00044 	movi	r3,1
    3e20:	19800a2e 	bgeu	r3,r6,3e4c <__fpcmp_parts_d+0x34>
    3e24:	28800017 	ldw	r2,0(r5)
    3e28:	1880082e 	bgeu	r3,r2,3e4c <__fpcmp_parts_d+0x34>
    3e2c:	00c00104 	movi	r3,4
    3e30:	30c02626 	beq	r6,r3,3ecc <__fpcmp_parts_d+0xb4>
    3e34:	10c02226 	beq	r2,r3,3ec0 <__fpcmp_parts_d+0xa8>
    3e38:	00c00084 	movi	r3,2
    3e3c:	30c00526 	beq	r6,r3,3e54 <__fpcmp_parts_d+0x3c>
    3e40:	10c0071e 	bne	r2,r3,3e60 <__fpcmp_parts_d+0x48>
    3e44:	20800117 	ldw	r2,4(r4)
    3e48:	1000091e 	bne	r2,zero,3e70 <__fpcmp_parts_d+0x58>
    3e4c:	00800044 	movi	r2,1
    3e50:	f800283a 	ret
    3e54:	10c01a1e 	bne	r2,r3,3ec0 <__fpcmp_parts_d+0xa8>
    3e58:	0005883a 	mov	r2,zero
    3e5c:	f800283a 	ret
    3e60:	22000117 	ldw	r8,4(r4)
    3e64:	28800117 	ldw	r2,4(r5)
    3e68:	40800326 	beq	r8,r2,3e78 <__fpcmp_parts_d+0x60>
    3e6c:	403ff726 	beq	r8,zero,3e4c <__fpcmp_parts_d+0x34>
    3e70:	00bfffc4 	movi	r2,-1
    3e74:	f800283a 	ret
    3e78:	20c00217 	ldw	r3,8(r4)
    3e7c:	28800217 	ldw	r2,8(r5)
    3e80:	10fffa16 	blt	r2,r3,3e6c <__fpcmp_parts_d+0x54>
    3e84:	18800916 	blt	r3,r2,3eac <__fpcmp_parts_d+0x94>
    3e88:	21c00417 	ldw	r7,16(r4)
    3e8c:	28c00417 	ldw	r3,16(r5)
    3e90:	21800317 	ldw	r6,12(r4)
    3e94:	28800317 	ldw	r2,12(r5)
    3e98:	19fff436 	bltu	r3,r7,3e6c <__fpcmp_parts_d+0x54>
    3e9c:	38c00526 	beq	r7,r3,3eb4 <__fpcmp_parts_d+0x9c>
    3ea0:	38c00236 	bltu	r7,r3,3eac <__fpcmp_parts_d+0x94>
    3ea4:	19ffec1e 	bne	r3,r7,3e58 <__fpcmp_parts_d+0x40>
    3ea8:	30bfeb2e 	bgeu	r6,r2,3e58 <__fpcmp_parts_d+0x40>
    3eac:	403fe71e 	bne	r8,zero,3e4c <__fpcmp_parts_d+0x34>
    3eb0:	003fef06 	br	3e70 <__fpcmp_parts_d+0x58>
    3eb4:	11bffa2e 	bgeu	r2,r6,3ea0 <__fpcmp_parts_d+0x88>
    3eb8:	403fe426 	beq	r8,zero,3e4c <__fpcmp_parts_d+0x34>
    3ebc:	003fec06 	br	3e70 <__fpcmp_parts_d+0x58>
    3ec0:	28800117 	ldw	r2,4(r5)
    3ec4:	103fe11e 	bne	r2,zero,3e4c <__fpcmp_parts_d+0x34>
    3ec8:	003fe906 	br	3e70 <__fpcmp_parts_d+0x58>
    3ecc:	11bfdd1e 	bne	r2,r6,3e44 <__fpcmp_parts_d+0x2c>
    3ed0:	28c00117 	ldw	r3,4(r5)
    3ed4:	20800117 	ldw	r2,4(r4)
    3ed8:	1885c83a 	sub	r2,r3,r2
    3edc:	f800283a 	ret

00003ee0 <memcpy>:
    3ee0:	01c003c4 	movi	r7,15
    3ee4:	2007883a 	mov	r3,r4
    3ee8:	3980032e 	bgeu	r7,r6,3ef8 <memcpy+0x18>
    3eec:	2904b03a 	or	r2,r5,r4
    3ef0:	108000cc 	andi	r2,r2,3
    3ef4:	10000926 	beq	r2,zero,3f1c <memcpy+0x3c>
    3ef8:	30000626 	beq	r6,zero,3f14 <memcpy+0x34>
    3efc:	30cd883a 	add	r6,r6,r3
    3f00:	28800003 	ldbu	r2,0(r5)
    3f04:	29400044 	addi	r5,r5,1
    3f08:	18800005 	stb	r2,0(r3)
    3f0c:	18c00044 	addi	r3,r3,1
    3f10:	30fffb1e 	bne	r6,r3,3f00 <memcpy+0x20>
    3f14:	2005883a 	mov	r2,r4
    3f18:	f800283a 	ret
    3f1c:	3811883a 	mov	r8,r7
    3f20:	200f883a 	mov	r7,r4
    3f24:	28c00017 	ldw	r3,0(r5)
    3f28:	31bffc04 	addi	r6,r6,-16
    3f2c:	38c00015 	stw	r3,0(r7)
    3f30:	28800117 	ldw	r2,4(r5)
    3f34:	38800115 	stw	r2,4(r7)
    3f38:	28c00217 	ldw	r3,8(r5)
    3f3c:	38c00215 	stw	r3,8(r7)
    3f40:	28800317 	ldw	r2,12(r5)
    3f44:	29400404 	addi	r5,r5,16
    3f48:	38800315 	stw	r2,12(r7)
    3f4c:	39c00404 	addi	r7,r7,16
    3f50:	41bff436 	bltu	r8,r6,3f24 <memcpy+0x44>
    3f54:	008000c4 	movi	r2,3
    3f58:	1180072e 	bgeu	r2,r6,3f78 <memcpy+0x98>
    3f5c:	1007883a 	mov	r3,r2
    3f60:	28800017 	ldw	r2,0(r5)
    3f64:	31bfff04 	addi	r6,r6,-4
    3f68:	29400104 	addi	r5,r5,4
    3f6c:	38800015 	stw	r2,0(r7)
    3f70:	39c00104 	addi	r7,r7,4
    3f74:	19bffa36 	bltu	r3,r6,3f60 <memcpy+0x80>
    3f78:	3807883a 	mov	r3,r7
    3f7c:	003fde06 	br	3ef8 <memcpy+0x18>

00003f80 <memset>:
    3f80:	008000c4 	movi	r2,3
    3f84:	29403fcc 	andi	r5,r5,255
    3f88:	2007883a 	mov	r3,r4
    3f8c:	1180022e 	bgeu	r2,r6,3f98 <memset+0x18>
    3f90:	2084703a 	and	r2,r4,r2
    3f94:	10000826 	beq	r2,zero,3fb8 <memset+0x38>
    3f98:	30000526 	beq	r6,zero,3fb0 <memset+0x30>
    3f9c:	2805883a 	mov	r2,r5
    3fa0:	30cd883a 	add	r6,r6,r3
    3fa4:	18800005 	stb	r2,0(r3)
    3fa8:	18c00044 	addi	r3,r3,1
    3fac:	19bffd1e 	bne	r3,r6,3fa4 <memset+0x24>
    3fb0:	2005883a 	mov	r2,r4
    3fb4:	f800283a 	ret
    3fb8:	2804923a 	slli	r2,r5,8
    3fbc:	020003c4 	movi	r8,15
    3fc0:	200f883a 	mov	r7,r4
    3fc4:	2884b03a 	or	r2,r5,r2
    3fc8:	1006943a 	slli	r3,r2,16
    3fcc:	10c6b03a 	or	r3,r2,r3
    3fd0:	41800a2e 	bgeu	r8,r6,3ffc <memset+0x7c>
    3fd4:	4005883a 	mov	r2,r8
    3fd8:	31bffc04 	addi	r6,r6,-16
    3fdc:	38c00015 	stw	r3,0(r7)
    3fe0:	38c00115 	stw	r3,4(r7)
    3fe4:	38c00215 	stw	r3,8(r7)
    3fe8:	38c00315 	stw	r3,12(r7)
    3fec:	39c00404 	addi	r7,r7,16
    3ff0:	11bff936 	bltu	r2,r6,3fd8 <memset+0x58>
    3ff4:	008000c4 	movi	r2,3
    3ff8:	1180052e 	bgeu	r2,r6,4010 <memset+0x90>
    3ffc:	31bfff04 	addi	r6,r6,-4
    4000:	008000c4 	movi	r2,3
    4004:	38c00015 	stw	r3,0(r7)
    4008:	39c00104 	addi	r7,r7,4
    400c:	11bffb36 	bltu	r2,r6,3ffc <memset+0x7c>
    4010:	3807883a 	mov	r3,r7
    4014:	003fe006 	br	3f98 <memset+0x18>

00004018 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    4018:	deffef04 	addi	sp,sp,-68
    401c:	df001015 	stw	fp,64(sp)
    4020:	df001004 	addi	fp,sp,64
    4024:	e13ffc15 	stw	r4,-16(fp)
    4028:	e17ffd15 	stw	r5,-12(fp)
    402c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    4030:	00bffa84 	movi	r2,-22
    4034:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4038:	e0bffc17 	ldw	r2,-16(fp)
    403c:	10800828 	cmpgeui	r2,r2,32
    4040:	1000601e 	bne	r2,zero,41c4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4044:	0005303a 	rdctl	r2,status
    4048:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    404c:	e0fff917 	ldw	r3,-28(fp)
    4050:	00bfff84 	movi	r2,-2
    4054:	1884703a 	and	r2,r3,r2
    4058:	1001703a 	wrctl	status,r2
  
  return context;
    405c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    4060:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    4064:	e0bffc17 	ldw	r2,-16(fp)
    4068:	00c01ef4 	movhi	r3,123
    406c:	18c87104 	addi	r3,r3,8644
    4070:	100490fa 	slli	r2,r2,3
    4074:	10c7883a 	add	r3,r2,r3
    4078:	e0bffe17 	ldw	r2,-8(fp)
    407c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    4080:	e0bffc17 	ldw	r2,-16(fp)
    4084:	00c01ef4 	movhi	r3,123
    4088:	18c87104 	addi	r3,r3,8644
    408c:	100490fa 	slli	r2,r2,3
    4090:	10c5883a 	add	r2,r2,r3
    4094:	10c00104 	addi	r3,r2,4
    4098:	e0bffd17 	ldw	r2,-12(fp)
    409c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    40a0:	e0bffe17 	ldw	r2,-8(fp)
    40a4:	1005003a 	cmpeq	r2,r2,zero
    40a8:	1000201e 	bne	r2,zero,412c <alt_irq_register+0x114>
    40ac:	e0bffc17 	ldw	r2,-16(fp)
    40b0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    40b4:	0005303a 	rdctl	r2,status
    40b8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    40bc:	e0fff617 	ldw	r3,-40(fp)
    40c0:	00bfff84 	movi	r2,-2
    40c4:	1884703a 	and	r2,r3,r2
    40c8:	1001703a 	wrctl	status,r2
  
  return context;
    40cc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    40d0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    40d4:	e0fff717 	ldw	r3,-36(fp)
    40d8:	00800044 	movi	r2,1
    40dc:	10c4983a 	sll	r2,r2,r3
    40e0:	1007883a 	mov	r3,r2
    40e4:	00800074 	movhi	r2,1
    40e8:	10834504 	addi	r2,r2,3348
    40ec:	10800017 	ldw	r2,0(r2)
    40f0:	1886b03a 	or	r3,r3,r2
    40f4:	00800074 	movhi	r2,1
    40f8:	10834504 	addi	r2,r2,3348
    40fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4100:	00800074 	movhi	r2,1
    4104:	10834504 	addi	r2,r2,3348
    4108:	10800017 	ldw	r2,0(r2)
    410c:	100170fa 	wrctl	ienable,r2
    4110:	e0bff817 	ldw	r2,-32(fp)
    4114:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4118:	e0bff517 	ldw	r2,-44(fp)
    411c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4120:	0005883a 	mov	r2,zero
    4124:	e0bfff15 	stw	r2,-4(fp)
    4128:	00002006 	br	41ac <alt_irq_register+0x194>
    412c:	e0bffc17 	ldw	r2,-16(fp)
    4130:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4134:	0005303a 	rdctl	r2,status
    4138:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    413c:	e0fff217 	ldw	r3,-56(fp)
    4140:	00bfff84 	movi	r2,-2
    4144:	1884703a 	and	r2,r3,r2
    4148:	1001703a 	wrctl	status,r2
  
  return context;
    414c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4150:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    4154:	e0fff317 	ldw	r3,-52(fp)
    4158:	00800044 	movi	r2,1
    415c:	10c4983a 	sll	r2,r2,r3
    4160:	0084303a 	nor	r2,zero,r2
    4164:	1007883a 	mov	r3,r2
    4168:	00800074 	movhi	r2,1
    416c:	10834504 	addi	r2,r2,3348
    4170:	10800017 	ldw	r2,0(r2)
    4174:	1886703a 	and	r3,r3,r2
    4178:	00800074 	movhi	r2,1
    417c:	10834504 	addi	r2,r2,3348
    4180:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4184:	00800074 	movhi	r2,1
    4188:	10834504 	addi	r2,r2,3348
    418c:	10800017 	ldw	r2,0(r2)
    4190:	100170fa 	wrctl	ienable,r2
    4194:	e0bff417 	ldw	r2,-48(fp)
    4198:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    419c:	e0bff117 	ldw	r2,-60(fp)
    41a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    41a4:	0005883a 	mov	r2,zero
    41a8:	e0bfff15 	stw	r2,-4(fp)
    41ac:	e0bfff17 	ldw	r2,-4(fp)
    41b0:	e0bffb15 	stw	r2,-20(fp)
    41b4:	e0bffa17 	ldw	r2,-24(fp)
    41b8:	e0bff015 	stw	r2,-64(fp)
    41bc:	e0bff017 	ldw	r2,-64(fp)
    41c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    41c4:	e0bffb17 	ldw	r2,-20(fp)
}
    41c8:	e037883a 	mov	sp,fp
    41cc:	df000017 	ldw	fp,0(sp)
    41d0:	dec00104 	addi	sp,sp,4
    41d4:	f800283a 	ret

000041d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    41d8:	defffe04 	addi	sp,sp,-8
    41dc:	dfc00115 	stw	ra,4(sp)
    41e0:	df000015 	stw	fp,0(sp)
    41e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    41e8:	01000074 	movhi	r4,1
    41ec:	213b7404 	addi	r4,r4,-4656
    41f0:	01400074 	movhi	r5,1
    41f4:	2973af04 	addi	r5,r5,-12612
    41f8:	01800074 	movhi	r6,1
    41fc:	31bb7404 	addi	r6,r6,-4656
    4200:	00042580 	call	4258 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4204:	01000034 	movhi	r4,0
    4208:	21000804 	addi	r4,r4,32
    420c:	01400034 	movhi	r5,0
    4210:	29400804 	addi	r5,r5,32
    4214:	01800034 	movhi	r6,0
    4218:	31806e04 	addi	r6,r6,440
    421c:	00042580 	call	4258 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4220:	01000074 	movhi	r4,1
    4224:	2131da04 	addi	r4,r4,-14488
    4228:	01400074 	movhi	r5,1
    422c:	2971da04 	addi	r5,r5,-14488
    4230:	01800074 	movhi	r6,1
    4234:	31b3af04 	addi	r6,r6,-12612
    4238:	00042580 	call	4258 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    423c:	00090280 	call	9028 <alt_dcache_flush_all>
  alt_icache_flush_all();
    4240:	00092e00 	call	92e0 <alt_icache_flush_all>
}
    4244:	e037883a 	mov	sp,fp
    4248:	dfc00117 	ldw	ra,4(sp)
    424c:	df000017 	ldw	fp,0(sp)
    4250:	dec00204 	addi	sp,sp,8
    4254:	f800283a 	ret

00004258 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4258:	defffc04 	addi	sp,sp,-16
    425c:	df000315 	stw	fp,12(sp)
    4260:	df000304 	addi	fp,sp,12
    4264:	e13ffd15 	stw	r4,-12(fp)
    4268:	e17ffe15 	stw	r5,-8(fp)
    426c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4270:	e0fffe17 	ldw	r3,-8(fp)
    4274:	e0bffd17 	ldw	r2,-12(fp)
    4278:	18800e26 	beq	r3,r2,42b4 <alt_load_section+0x5c>
  {
    while( to != end )
    427c:	00000a06 	br	42a8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    4280:	e0bffd17 	ldw	r2,-12(fp)
    4284:	10c00017 	ldw	r3,0(r2)
    4288:	e0bffe17 	ldw	r2,-8(fp)
    428c:	10c00015 	stw	r3,0(r2)
    4290:	e0bffe17 	ldw	r2,-8(fp)
    4294:	10800104 	addi	r2,r2,4
    4298:	e0bffe15 	stw	r2,-8(fp)
    429c:	e0bffd17 	ldw	r2,-12(fp)
    42a0:	10800104 	addi	r2,r2,4
    42a4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    42a8:	e0fffe17 	ldw	r3,-8(fp)
    42ac:	e0bfff17 	ldw	r2,-4(fp)
    42b0:	18bff31e 	bne	r3,r2,4280 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    42b4:	e037883a 	mov	sp,fp
    42b8:	df000017 	ldw	fp,0(sp)
    42bc:	dec00104 	addi	sp,sp,4
    42c0:	f800283a 	ret

000042c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    42c4:	defffd04 	addi	sp,sp,-12
    42c8:	dfc00215 	stw	ra,8(sp)
    42cc:	df000115 	stw	fp,4(sp)
    42d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    42d4:	0009883a 	mov	r4,zero
    42d8:	00045c80 	call	45c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    42dc:	00045fc0 	call	45fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    42e0:	01000074 	movhi	r4,1
    42e4:	21334104 	addi	r4,r4,-13052
    42e8:	01400074 	movhi	r5,1
    42ec:	29734104 	addi	r5,r5,-13052
    42f0:	01800074 	movhi	r6,1
    42f4:	31b34104 	addi	r6,r6,-13052
    42f8:	00093d40 	call	93d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    42fc:	00091840 	call	9184 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4300:	01000074 	movhi	r4,1
    4304:	21247a04 	addi	r4,r4,-28184
    4308:	0009cf80 	call	9cf8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    430c:	d127e617 	ldw	r4,-24680(gp)
    4310:	d167e717 	ldw	r5,-24676(gp)
    4314:	d1a7e817 	ldw	r6,-24672(gp)
    4318:	0000ccc0 	call	ccc <main>
    431c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4320:	01000044 	movi	r4,1
    4324:	0008ecc0 	call	8ecc <close>
  exit (result);
    4328:	e13fff17 	ldw	r4,-4(fp)
    432c:	0009d0c0 	call	9d0c <exit>

00004330 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    4330:	defff204 	addi	sp,sp,-56
    4334:	dfc00a15 	stw	ra,40(sp)
    4338:	df000915 	stw	fp,36(sp)
    433c:	df000904 	addi	fp,sp,36
    4340:	e1400215 	stw	r5,8(fp)
    4344:	e1800315 	stw	r6,12(fp)
    4348:	e1c00415 	stw	r7,16(fp)
    434c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    4350:	e0800204 	addi	r2,fp,8
    4354:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    4358:	e0bfff17 	ldw	r2,-4(fp)
    435c:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    4360:	00007806 	br	4544 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    4364:	e0bffc07 	ldb	r2,-16(fp)
    4368:	10800960 	cmpeqi	r2,r2,37
    436c:	1000031e 	bne	r2,zero,437c <alt_printf+0x4c>
        {
            alt_putchar(c);
    4370:	e13ffc07 	ldb	r4,-16(fp)
    4374:	00045880 	call	4588 <alt_putchar>
    4378:	00007206 	br	4544 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    437c:	e0bffd17 	ldw	r2,-12(fp)
    4380:	10800003 	ldbu	r2,0(r2)
    4384:	e0bffc05 	stb	r2,-16(fp)
    4388:	e0bffc07 	ldb	r2,-16(fp)
    438c:	1004c03a 	cmpne	r2,r2,zero
    4390:	1007883a 	mov	r3,r2
    4394:	e0bffd17 	ldw	r2,-12(fp)
    4398:	10800044 	addi	r2,r2,1
    439c:	e0bffd15 	stw	r2,-12(fp)
    43a0:	18803fcc 	andi	r2,r3,255
    43a4:	1005003a 	cmpeq	r2,r2,zero
    43a8:	1000721e 	bne	r2,zero,4574 <alt_printf+0x244>
            {
                if (c == '%')
    43ac:	e0bffc07 	ldb	r2,-16(fp)
    43b0:	10800958 	cmpnei	r2,r2,37
    43b4:	1000031e 	bne	r2,zero,43c4 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    43b8:	e13ffc07 	ldb	r4,-16(fp)
    43bc:	00045880 	call	4588 <alt_putchar>
    43c0:	00006006 	br	4544 <alt_printf+0x214>
                } 
                else if (c == 'c')
    43c4:	e0bffc07 	ldb	r2,-16(fp)
    43c8:	108018d8 	cmpnei	r2,r2,99
    43cc:	1000091e 	bne	r2,zero,43f4 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    43d0:	e0fffe17 	ldw	r3,-8(fp)
    43d4:	18800104 	addi	r2,r3,4
    43d8:	e0bffe15 	stw	r2,-8(fp)
    43dc:	1805883a 	mov	r2,r3
    43e0:	10800017 	ldw	r2,0(r2)
    43e4:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    43e8:	e13ffb17 	ldw	r4,-20(fp)
    43ec:	00045880 	call	4588 <alt_putchar>
    43f0:	00005406 	br	4544 <alt_printf+0x214>
                }
                else if (c == 'x')
    43f4:	e0bffc07 	ldb	r2,-16(fp)
    43f8:	10801e18 	cmpnei	r2,r2,120
    43fc:	1000371e 	bne	r2,zero,44dc <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    4400:	e0fffe17 	ldw	r3,-8(fp)
    4404:	18800104 	addi	r2,r3,4
    4408:	e0bffe15 	stw	r2,-8(fp)
    440c:	1805883a 	mov	r2,r3
    4410:	10800017 	ldw	r2,0(r2)
    4414:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    4418:	e0bffa17 	ldw	r2,-24(fp)
    441c:	1004c03a 	cmpne	r2,r2,zero
    4420:	1000031e 	bne	r2,zero,4430 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    4424:	01000c04 	movi	r4,48
    4428:	00045880 	call	4588 <alt_putchar>
                        continue;
    442c:	00004506 	br	4544 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    4430:	00800704 	movi	r2,28
    4434:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    4438:	00000306 	br	4448 <alt_printf+0x118>
                        digit_shift -= 4;
    443c:	e0bff817 	ldw	r2,-32(fp)
    4440:	10bfff04 	addi	r2,r2,-4
    4444:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    4448:	00c003c4 	movi	r3,15
    444c:	e0bff817 	ldw	r2,-32(fp)
    4450:	1884983a 	sll	r2,r3,r2
    4454:	1007883a 	mov	r3,r2
    4458:	e0bffa17 	ldw	r2,-24(fp)
    445c:	1884703a 	and	r2,r3,r2
    4460:	1005003a 	cmpeq	r2,r2,zero
    4464:	103ff51e 	bne	r2,zero,443c <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    4468:	00001806 	br	44cc <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    446c:	00c003c4 	movi	r3,15
    4470:	e0bff817 	ldw	r2,-32(fp)
    4474:	1884983a 	sll	r2,r3,r2
    4478:	1007883a 	mov	r3,r2
    447c:	e0bffa17 	ldw	r2,-24(fp)
    4480:	1886703a 	and	r3,r3,r2
    4484:	e0bff817 	ldw	r2,-32(fp)
    4488:	1884d83a 	srl	r2,r3,r2
    448c:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    4490:	e0bff917 	ldw	r2,-28(fp)
    4494:	108002a8 	cmpgeui	r2,r2,10
    4498:	1000041e 	bne	r2,zero,44ac <alt_printf+0x17c>
                            c = '0' + digit;
    449c:	e0bff917 	ldw	r2,-28(fp)
    44a0:	10800c04 	addi	r2,r2,48
    44a4:	e0bffc05 	stb	r2,-16(fp)
    44a8:	00000306 	br	44b8 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    44ac:	e0bff917 	ldw	r2,-28(fp)
    44b0:	108015c4 	addi	r2,r2,87
    44b4:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    44b8:	e13ffc07 	ldb	r4,-16(fp)
    44bc:	00045880 	call	4588 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    44c0:	e0bff817 	ldw	r2,-32(fp)
    44c4:	10bfff04 	addi	r2,r2,-4
    44c8:	e0bff815 	stw	r2,-32(fp)
    44cc:	e0bff817 	ldw	r2,-32(fp)
    44d0:	1004403a 	cmpge	r2,r2,zero
    44d4:	103fe51e 	bne	r2,zero,446c <alt_printf+0x13c>
    44d8:	00001a06 	br	4544 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    44dc:	e0bffc07 	ldb	r2,-16(fp)
    44e0:	10801cd8 	cmpnei	r2,r2,115
    44e4:	1000171e 	bne	r2,zero,4544 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    44e8:	e0fffe17 	ldw	r3,-8(fp)
    44ec:	18800104 	addi	r2,r3,4
    44f0:	e0bffe15 	stw	r2,-8(fp)
    44f4:	1805883a 	mov	r2,r3
    44f8:	10800017 	ldw	r2,0(r2)
    44fc:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    4500:	00000906 	br	4528 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    4504:	e0bff717 	ldw	r2,-36(fp)
    4508:	10800003 	ldbu	r2,0(r2)
    450c:	11003fcc 	andi	r4,r2,255
    4510:	2100201c 	xori	r4,r4,128
    4514:	213fe004 	addi	r4,r4,-128
    4518:	e0bff717 	ldw	r2,-36(fp)
    451c:	10800044 	addi	r2,r2,1
    4520:	e0bff715 	stw	r2,-36(fp)
    4524:	00045880 	call	4588 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    4528:	e0bff717 	ldw	r2,-36(fp)
    452c:	10800003 	ldbu	r2,0(r2)
    4530:	10803fcc 	andi	r2,r2,255
    4534:	1080201c 	xori	r2,r2,128
    4538:	10bfe004 	addi	r2,r2,-128
    453c:	1004c03a 	cmpne	r2,r2,zero
    4540:	103ff01e 	bne	r2,zero,4504 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    4544:	e0bffd17 	ldw	r2,-12(fp)
    4548:	10800003 	ldbu	r2,0(r2)
    454c:	e0bffc05 	stb	r2,-16(fp)
    4550:	e0bffc07 	ldb	r2,-16(fp)
    4554:	1004c03a 	cmpne	r2,r2,zero
    4558:	1007883a 	mov	r3,r2
    455c:	e0bffd17 	ldw	r2,-12(fp)
    4560:	10800044 	addi	r2,r2,1
    4564:	e0bffd15 	stw	r2,-12(fp)
    4568:	18803fcc 	andi	r2,r3,255
    456c:	1004c03a 	cmpne	r2,r2,zero
    4570:	103f7c1e 	bne	r2,zero,4364 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    4574:	e037883a 	mov	sp,fp
    4578:	dfc00117 	ldw	ra,4(sp)
    457c:	df000017 	ldw	fp,0(sp)
    4580:	dec00504 	addi	sp,sp,20
    4584:	f800283a 	ret

00004588 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    4588:	defffd04 	addi	sp,sp,-12
    458c:	dfc00215 	stw	ra,8(sp)
    4590:	df000115 	stw	fp,4(sp)
    4594:	df000104 	addi	fp,sp,4
    4598:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    459c:	00800074 	movhi	r2,1
    45a0:	10bb6f04 	addi	r2,r2,-4676
    45a4:	10800017 	ldw	r2,0(r2)
    45a8:	11400217 	ldw	r5,8(r2)
    45ac:	e13fff17 	ldw	r4,-4(fp)
    45b0:	0009db80 	call	9db8 <putc>
#endif
}
    45b4:	e037883a 	mov	sp,fp
    45b8:	dfc00117 	ldw	ra,4(sp)
    45bc:	df000017 	ldw	fp,0(sp)
    45c0:	dec00204 	addi	sp,sp,8
    45c4:	f800283a 	ret

000045c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    45c8:	defffd04 	addi	sp,sp,-12
    45cc:	dfc00215 	stw	ra,8(sp)
    45d0:	df000115 	stw	fp,4(sp)
    45d4:	df000104 	addi	fp,sp,4
    45d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    45dc:	00099440 	call	9944 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    45e0:	00800044 	movi	r2,1
    45e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    45e8:	e037883a 	mov	sp,fp
    45ec:	dfc00117 	ldw	ra,4(sp)
    45f0:	df000017 	ldw	fp,0(sp)
    45f4:	dec00204 	addi	sp,sp,8
    45f8:	f800283a 	ret

000045fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    45fc:	defffd04 	addi	sp,sp,-12
    4600:	dfc00215 	stw	ra,8(sp)
    4604:	df000115 	stw	fp,4(sp)
    4608:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    460c:	01040034 	movhi	r4,4096
    4610:	21080004 	addi	r4,r4,8192
    4614:	000b883a 	mov	r5,zero
    4618:	000d883a 	mov	r6,zero
    461c:	01c00204 	movi	r7,8
    4620:	00055500 	call	5550 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    4624:	01000074 	movhi	r4,1
    4628:	2133f904 	addi	r4,r4,-12316
    462c:	000b883a 	mov	r5,zero
    4630:	01800204 	movi	r6,8
    4634:	0004b7c0 	call	4b7c <altera_avalon_jtag_uart_init>
    4638:	01000074 	movhi	r4,1
    463c:	2133ef04 	addi	r4,r4,-12356
    4640:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    4644:	01000074 	movhi	r4,1
    4648:	21380704 	addi	r4,r4,-8164
    464c:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    4650:	01000074 	movhi	r4,1
    4654:	21381304 	addi	r4,r4,-8116
    4658:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    465c:	01000074 	movhi	r4,1
    4660:	21381f04 	addi	r4,r4,-8068
    4664:	0005e940 	call	5e94 <alt_up_character_lcd_init>
    4668:	01000074 	movhi	r4,1
    466c:	21381f04 	addi	r4,r4,-8068
    4670:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    4674:	01000074 	movhi	r4,1
    4678:	21382a04 	addi	r4,r4,-8024
    467c:	00063140 	call	6314 <alt_up_ethernet_init>
    4680:	01000074 	movhi	r4,1
    4684:	21382a04 	addi	r4,r4,-8024
    4688:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    468c:	01000074 	movhi	r4,1
    4690:	21383904 	addi	r4,r4,-7964
    4694:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    4698:	01000074 	movhi	r4,1
    469c:	21384404 	addi	r4,r4,-7920
    46a0:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    46a4:	01000074 	movhi	r4,1
    46a8:	21384f04 	addi	r4,r4,-7876
    46ac:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    46b0:	01000074 	movhi	r4,1
    46b4:	21385a04 	addi	r4,r4,-7832
    46b8:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    46bc:	01000074 	movhi	r4,1
    46c0:	21386504 	addi	r4,r4,-7788
    46c4:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    46c8:	01000074 	movhi	r4,1
    46cc:	21387004 	addi	r4,r4,-7744
    46d0:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    46d4:	01000074 	movhi	r4,1
    46d8:	21387b04 	addi	r4,r4,-7700
    46dc:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    46e0:	01000074 	movhi	r4,1
    46e4:	21388604 	addi	r4,r4,-7656
    46e8:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    46ec:	01000074 	movhi	r4,1
    46f0:	21389104 	addi	r4,r4,-7612
    46f4:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    46f8:	01000074 	movhi	r4,1
    46fc:	21389c04 	addi	r4,r4,-7568
    4700:	0006b9c0 	call	6b9c <alt_up_ps2_init>
    4704:	01000074 	movhi	r4,1
    4708:	21389c04 	addi	r4,r4,-7568
    470c:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    4710:	01000074 	movhi	r4,1
    4714:	2138aa04 	addi	r4,r4,-7512
    4718:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    471c:	01000074 	movhi	r4,1
    4720:	2138b504 	addi	r4,r4,-7468
    4724:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    4728:	00800074 	movhi	r2,1
    472c:	10b8c204 	addi	r2,r2,-7416
    4730:	10800a17 	ldw	r2,40(r2)
    4734:	10800104 	addi	r2,r2,4
    4738:	10800017 	ldw	r2,0(r2)
    473c:	10ffffcc 	andi	r3,r2,65535
    4740:	00800074 	movhi	r2,1
    4744:	10b8c204 	addi	r2,r2,-7416
    4748:	10c00c15 	stw	r3,48(r2)
    474c:	00800074 	movhi	r2,1
    4750:	10b8c204 	addi	r2,r2,-7416
    4754:	10800a17 	ldw	r2,40(r2)
    4758:	10800104 	addi	r2,r2,4
    475c:	10800017 	ldw	r2,0(r2)
    4760:	1005d43a 	srai	r2,r2,16
    4764:	10ffffcc 	andi	r3,r2,65535
    4768:	00800074 	movhi	r2,1
    476c:	10b8c204 	addi	r2,r2,-7416
    4770:	10c00d15 	stw	r3,52(r2)
    4774:	00800074 	movhi	r2,1
    4778:	10b8c204 	addi	r2,r2,-7416
    477c:	10800c17 	ldw	r2,48(r2)
    4780:	10801068 	cmpgeui	r2,r2,65
    4784:	1000081e 	bne	r2,zero,47a8 <alt_sys_init+0x1ac>
    4788:	00c00074 	movhi	r3,1
    478c:	18f8c204 	addi	r3,r3,-7416
    4790:	00800fc4 	movi	r2,63
    4794:	18800f15 	stw	r2,60(r3)
    4798:	00c00074 	movhi	r3,1
    479c:	18f8c204 	addi	r3,r3,-7416
    47a0:	00800184 	movi	r2,6
    47a4:	18801015 	stw	r2,64(r3)
    47a8:	00800074 	movhi	r2,1
    47ac:	10b8c204 	addi	r2,r2,-7416
    47b0:	10800d17 	ldw	r2,52(r2)
    47b4:	10800868 	cmpgeui	r2,r2,33
    47b8:	1000041e 	bne	r2,zero,47cc <alt_sys_init+0x1d0>
    47bc:	00c00074 	movhi	r3,1
    47c0:	18f8c204 	addi	r3,r3,-7416
    47c4:	008007c4 	movi	r2,31
    47c8:	18801115 	stw	r2,68(r3)
    47cc:	01000074 	movhi	r4,1
    47d0:	2138c204 	addi	r4,r4,-7416
    47d4:	00075080 	call	7508 <alt_up_char_buffer_init>
    47d8:	01000074 	movhi	r4,1
    47dc:	2138c204 	addi	r4,r4,-7416
    47e0:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    47e4:	00800074 	movhi	r2,1
    47e8:	10b8d404 	addi	r2,r2,-7344
    47ec:	10800a17 	ldw	r2,40(r2)
    47f0:	10800017 	ldw	r2,0(r2)
    47f4:	1007883a 	mov	r3,r2
    47f8:	00800074 	movhi	r2,1
    47fc:	10b8d404 	addi	r2,r2,-7344
    4800:	10c00b15 	stw	r3,44(r2)
    4804:	00800074 	movhi	r2,1
    4808:	10b8d404 	addi	r2,r2,-7344
    480c:	10800a17 	ldw	r2,40(r2)
    4810:	10800104 	addi	r2,r2,4
    4814:	10800017 	ldw	r2,0(r2)
    4818:	1007883a 	mov	r3,r2
    481c:	00800074 	movhi	r2,1
    4820:	10b8d404 	addi	r2,r2,-7344
    4824:	10c00c15 	stw	r3,48(r2)
    4828:	00800074 	movhi	r2,1
    482c:	10b8d404 	addi	r2,r2,-7344
    4830:	10800a17 	ldw	r2,40(r2)
    4834:	10800204 	addi	r2,r2,8
    4838:	10800017 	ldw	r2,0(r2)
    483c:	10ffffcc 	andi	r3,r2,65535
    4840:	00800074 	movhi	r2,1
    4844:	10b8d404 	addi	r2,r2,-7344
    4848:	10c00f15 	stw	r3,60(r2)
    484c:	00800074 	movhi	r2,1
    4850:	10b8d404 	addi	r2,r2,-7344
    4854:	10800a17 	ldw	r2,40(r2)
    4858:	10800204 	addi	r2,r2,8
    485c:	10800017 	ldw	r2,0(r2)
    4860:	1005d43a 	srai	r2,r2,16
    4864:	10ffffcc 	andi	r3,r2,65535
    4868:	00800074 	movhi	r2,1
    486c:	10b8d404 	addi	r2,r2,-7344
    4870:	10c01015 	stw	r3,64(r2)
    4874:	00800074 	movhi	r2,1
    4878:	10b8d404 	addi	r2,r2,-7344
    487c:	10800a17 	ldw	r2,40(r2)
    4880:	10800304 	addi	r2,r2,12
    4884:	10800017 	ldw	r2,0(r2)
    4888:	1005d07a 	srai	r2,r2,1
    488c:	10c0004c 	andi	r3,r2,1
    4890:	00800074 	movhi	r2,1
    4894:	10b8d404 	addi	r2,r2,-7344
    4898:	10c00d15 	stw	r3,52(r2)
    489c:	00800074 	movhi	r2,1
    48a0:	10b8d404 	addi	r2,r2,-7344
    48a4:	10800a17 	ldw	r2,40(r2)
    48a8:	10800304 	addi	r2,r2,12
    48ac:	10800017 	ldw	r2,0(r2)
    48b0:	1005d13a 	srai	r2,r2,4
    48b4:	10c003cc 	andi	r3,r2,15
    48b8:	00800074 	movhi	r2,1
    48bc:	10b8d404 	addi	r2,r2,-7344
    48c0:	10c00e15 	stw	r3,56(r2)
    48c4:	00800074 	movhi	r2,1
    48c8:	10b8d404 	addi	r2,r2,-7344
    48cc:	10800a17 	ldw	r2,40(r2)
    48d0:	10800304 	addi	r2,r2,12
    48d4:	10800017 	ldw	r2,0(r2)
    48d8:	1005d43a 	srai	r2,r2,16
    48dc:	1007883a 	mov	r3,r2
    48e0:	00bfffc4 	movi	r2,-1
    48e4:	1884703a 	and	r2,r3,r2
    48e8:	e0bfff45 	stb	r2,-3(fp)
    48ec:	00800074 	movhi	r2,1
    48f0:	10b8d404 	addi	r2,r2,-7344
    48f4:	10800a17 	ldw	r2,40(r2)
    48f8:	10800304 	addi	r2,r2,12
    48fc:	10800017 	ldw	r2,0(r2)
    4900:	1005d63a 	srai	r2,r2,24
    4904:	1007883a 	mov	r3,r2
    4908:	00bfffc4 	movi	r2,-1
    490c:	1884703a 	and	r2,r3,r2
    4910:	e0bfff05 	stb	r2,-4(fp)
    4914:	00800074 	movhi	r2,1
    4918:	10b8d404 	addi	r2,r2,-7344
    491c:	10800e17 	ldw	r2,56(r2)
    4920:	10800058 	cmpnei	r2,r2,1
    4924:	1000041e 	bne	r2,zero,4938 <alt_sys_init+0x33c>
    4928:	00800074 	movhi	r2,1
    492c:	10b8d404 	addi	r2,r2,-7344
    4930:	10001115 	stw	zero,68(r2)
    4934:	00000e06 	br	4970 <alt_sys_init+0x374>
    4938:	00800074 	movhi	r2,1
    493c:	10b8d404 	addi	r2,r2,-7344
    4940:	10800e17 	ldw	r2,56(r2)
    4944:	10800098 	cmpnei	r2,r2,2
    4948:	1000051e 	bne	r2,zero,4960 <alt_sys_init+0x364>
    494c:	00c00074 	movhi	r3,1
    4950:	18f8d404 	addi	r3,r3,-7344
    4954:	00800044 	movi	r2,1
    4958:	18801115 	stw	r2,68(r3)
    495c:	00000406 	br	4970 <alt_sys_init+0x374>
    4960:	00c00074 	movhi	r3,1
    4964:	18f8d404 	addi	r3,r3,-7344
    4968:	00800084 	movi	r2,2
    496c:	18801115 	stw	r2,68(r3)
    4970:	e0ffff43 	ldbu	r3,-3(fp)
    4974:	00800804 	movi	r2,32
    4978:	10c7c83a 	sub	r3,r2,r3
    497c:	00bfffc4 	movi	r2,-1
    4980:	10c6d83a 	srl	r3,r2,r3
    4984:	00800074 	movhi	r2,1
    4988:	10b8d404 	addi	r2,r2,-7344
    498c:	10c01215 	stw	r3,72(r2)
    4990:	e0ffff43 	ldbu	r3,-3(fp)
    4994:	00800074 	movhi	r2,1
    4998:	10b8d404 	addi	r2,r2,-7344
    499c:	10801117 	ldw	r2,68(r2)
    49a0:	1887883a 	add	r3,r3,r2
    49a4:	00800074 	movhi	r2,1
    49a8:	10b8d404 	addi	r2,r2,-7344
    49ac:	10c01315 	stw	r3,76(r2)
    49b0:	e0ffff03 	ldbu	r3,-4(fp)
    49b4:	00800804 	movi	r2,32
    49b8:	10c7c83a 	sub	r3,r2,r3
    49bc:	00bfffc4 	movi	r2,-1
    49c0:	10c6d83a 	srl	r3,r2,r3
    49c4:	00800074 	movhi	r2,1
    49c8:	10b8d404 	addi	r2,r2,-7344
    49cc:	10c01415 	stw	r3,80(r2)
    49d0:	01000074 	movhi	r4,1
    49d4:	2138d404 	addi	r4,r4,-7344
    49d8:	00049fc0 	call	49fc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    49dc:	01000074 	movhi	r4,1
    49e0:	2138e904 	addi	r4,r4,-7260
    49e4:	00049fc0 	call	49fc <alt_dev_reg>
}
    49e8:	e037883a 	mov	sp,fp
    49ec:	dfc00117 	ldw	ra,4(sp)
    49f0:	df000017 	ldw	fp,0(sp)
    49f4:	dec00204 	addi	sp,sp,8
    49f8:	f800283a 	ret

000049fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    49fc:	defffd04 	addi	sp,sp,-12
    4a00:	dfc00215 	stw	ra,8(sp)
    4a04:	df000115 	stw	fp,4(sp)
    4a08:	df000104 	addi	fp,sp,4
    4a0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4a10:	e13fff17 	ldw	r4,-4(fp)
    4a14:	01400074 	movhi	r5,1
    4a18:	297b6904 	addi	r5,r5,-4700
    4a1c:	00090700 	call	9070 <alt_dev_llist_insert>
}
    4a20:	e037883a 	mov	sp,fp
    4a24:	dfc00117 	ldw	ra,4(sp)
    4a28:	df000017 	ldw	fp,0(sp)
    4a2c:	dec00204 	addi	sp,sp,8
    4a30:	f800283a 	ret

00004a34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    4a34:	defffa04 	addi	sp,sp,-24
    4a38:	dfc00515 	stw	ra,20(sp)
    4a3c:	df000415 	stw	fp,16(sp)
    4a40:	df000404 	addi	fp,sp,16
    4a44:	e13ffd15 	stw	r4,-12(fp)
    4a48:	e17ffe15 	stw	r5,-8(fp)
    4a4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4a50:	e0bffd17 	ldw	r2,-12(fp)
    4a54:	10800017 	ldw	r2,0(r2)
    4a58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    4a5c:	e0bffc17 	ldw	r2,-16(fp)
    4a60:	11000a04 	addi	r4,r2,40
    4a64:	e0bffd17 	ldw	r2,-12(fp)
    4a68:	11c00217 	ldw	r7,8(r2)
    4a6c:	e17ffe17 	ldw	r5,-8(fp)
    4a70:	e1bfff17 	ldw	r6,-4(fp)
    4a74:	00050780 	call	5078 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    4a78:	e037883a 	mov	sp,fp
    4a7c:	dfc00117 	ldw	ra,4(sp)
    4a80:	df000017 	ldw	fp,0(sp)
    4a84:	dec00204 	addi	sp,sp,8
    4a88:	f800283a 	ret

00004a8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4a8c:	defffa04 	addi	sp,sp,-24
    4a90:	dfc00515 	stw	ra,20(sp)
    4a94:	df000415 	stw	fp,16(sp)
    4a98:	df000404 	addi	fp,sp,16
    4a9c:	e13ffd15 	stw	r4,-12(fp)
    4aa0:	e17ffe15 	stw	r5,-8(fp)
    4aa4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4aa8:	e0bffd17 	ldw	r2,-12(fp)
    4aac:	10800017 	ldw	r2,0(r2)
    4ab0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4ab4:	e0bffc17 	ldw	r2,-16(fp)
    4ab8:	11000a04 	addi	r4,r2,40
    4abc:	e0bffd17 	ldw	r2,-12(fp)
    4ac0:	11c00217 	ldw	r7,8(r2)
    4ac4:	e17ffe17 	ldw	r5,-8(fp)
    4ac8:	e1bfff17 	ldw	r6,-4(fp)
    4acc:	000529c0 	call	529c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    4ad0:	e037883a 	mov	sp,fp
    4ad4:	dfc00117 	ldw	ra,4(sp)
    4ad8:	df000017 	ldw	fp,0(sp)
    4adc:	dec00204 	addi	sp,sp,8
    4ae0:	f800283a 	ret

00004ae4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    4ae4:	defffc04 	addi	sp,sp,-16
    4ae8:	dfc00315 	stw	ra,12(sp)
    4aec:	df000215 	stw	fp,8(sp)
    4af0:	df000204 	addi	fp,sp,8
    4af4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    4af8:	e0bfff17 	ldw	r2,-4(fp)
    4afc:	10800017 	ldw	r2,0(r2)
    4b00:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    4b04:	e0bffe17 	ldw	r2,-8(fp)
    4b08:	11000a04 	addi	r4,r2,40
    4b0c:	e0bfff17 	ldw	r2,-4(fp)
    4b10:	11400217 	ldw	r5,8(r2)
    4b14:	0004f100 	call	4f10 <altera_avalon_jtag_uart_close>
}
    4b18:	e037883a 	mov	sp,fp
    4b1c:	dfc00117 	ldw	ra,4(sp)
    4b20:	df000017 	ldw	fp,0(sp)
    4b24:	dec00204 	addi	sp,sp,8
    4b28:	f800283a 	ret

00004b2c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    4b2c:	defffa04 	addi	sp,sp,-24
    4b30:	dfc00515 	stw	ra,20(sp)
    4b34:	df000415 	stw	fp,16(sp)
    4b38:	df000404 	addi	fp,sp,16
    4b3c:	e13ffd15 	stw	r4,-12(fp)
    4b40:	e17ffe15 	stw	r5,-8(fp)
    4b44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    4b48:	e0bffd17 	ldw	r2,-12(fp)
    4b4c:	10800017 	ldw	r2,0(r2)
    4b50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    4b54:	e0bffc17 	ldw	r2,-16(fp)
    4b58:	11000a04 	addi	r4,r2,40
    4b5c:	e17ffe17 	ldw	r5,-8(fp)
    4b60:	e1bfff17 	ldw	r6,-4(fp)
    4b64:	0004f840 	call	4f84 <altera_avalon_jtag_uart_ioctl>
}
    4b68:	e037883a 	mov	sp,fp
    4b6c:	dfc00117 	ldw	ra,4(sp)
    4b70:	df000017 	ldw	fp,0(sp)
    4b74:	dec00204 	addi	sp,sp,8
    4b78:	f800283a 	ret

00004b7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    4b7c:	defffb04 	addi	sp,sp,-20
    4b80:	dfc00415 	stw	ra,16(sp)
    4b84:	df000315 	stw	fp,12(sp)
    4b88:	df000304 	addi	fp,sp,12
    4b8c:	e13ffd15 	stw	r4,-12(fp)
    4b90:	e17ffe15 	stw	r5,-8(fp)
    4b94:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4b98:	e0fffd17 	ldw	r3,-12(fp)
    4b9c:	00800044 	movi	r2,1
    4ba0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    4ba4:	e0bffd17 	ldw	r2,-12(fp)
    4ba8:	10800017 	ldw	r2,0(r2)
    4bac:	11000104 	addi	r4,r2,4
    4bb0:	e0bffd17 	ldw	r2,-12(fp)
    4bb4:	10800817 	ldw	r2,32(r2)
    4bb8:	1007883a 	mov	r3,r2
    4bbc:	2005883a 	mov	r2,r4
    4bc0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    4bc4:	e13fff17 	ldw	r4,-4(fp)
    4bc8:	e17ffd17 	ldw	r5,-12(fp)
    4bcc:	01800034 	movhi	r6,0
    4bd0:	31930d04 	addi	r6,r6,19508
    4bd4:	00040180 	call	4018 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    4bd8:	e0bffd17 	ldw	r2,-12(fp)
    4bdc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    4be0:	e0bffd17 	ldw	r2,-12(fp)
    4be4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4be8:	00800074 	movhi	r2,1
    4bec:	10834904 	addi	r2,r2,3364
    4bf0:	10800017 	ldw	r2,0(r2)
    4bf4:	100b883a 	mov	r5,r2
    4bf8:	01800034 	movhi	r6,0
    4bfc:	31939804 	addi	r6,r6,20064
    4c00:	e1fffd17 	ldw	r7,-12(fp)
    4c04:	0008d780 	call	8d78 <alt_alarm_start>
    4c08:	1004403a 	cmpge	r2,r2,zero
    4c0c:	1000041e 	bne	r2,zero,4c20 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    4c10:	e0fffd17 	ldw	r3,-12(fp)
    4c14:	00a00034 	movhi	r2,32768
    4c18:	10bfffc4 	addi	r2,r2,-1
    4c1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    4c20:	e037883a 	mov	sp,fp
    4c24:	dfc00117 	ldw	ra,4(sp)
    4c28:	df000017 	ldw	fp,0(sp)
    4c2c:	dec00204 	addi	sp,sp,8
    4c30:	f800283a 	ret

00004c34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    4c34:	defff704 	addi	sp,sp,-36
    4c38:	df000815 	stw	fp,32(sp)
    4c3c:	df000804 	addi	fp,sp,32
    4c40:	e13ffe15 	stw	r4,-8(fp)
    4c44:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    4c48:	e0bffe17 	ldw	r2,-8(fp)
    4c4c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    4c50:	e0bffd17 	ldw	r2,-12(fp)
    4c54:	10800017 	ldw	r2,0(r2)
    4c58:	e0bffc15 	stw	r2,-16(fp)
    4c5c:	00000006 	br	4c60 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4c60:	e0bffc17 	ldw	r2,-16(fp)
    4c64:	10800104 	addi	r2,r2,4
    4c68:	10800037 	ldwio	r2,0(r2)
    4c6c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    4c70:	e0bffb17 	ldw	r2,-20(fp)
    4c74:	1080c00c 	andi	r2,r2,768
    4c78:	1005003a 	cmpeq	r2,r2,zero
    4c7c:	1000741e 	bne	r2,zero,4e50 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    4c80:	e0bffb17 	ldw	r2,-20(fp)
    4c84:	1080400c 	andi	r2,r2,256
    4c88:	1005003a 	cmpeq	r2,r2,zero
    4c8c:	1000351e 	bne	r2,zero,4d64 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    4c90:	00800074 	movhi	r2,1
    4c94:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4c98:	e0bffd17 	ldw	r2,-12(fp)
    4c9c:	10800a17 	ldw	r2,40(r2)
    4ca0:	10800044 	addi	r2,r2,1
    4ca4:	1081ffcc 	andi	r2,r2,2047
    4ca8:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    4cac:	e0bffd17 	ldw	r2,-12(fp)
    4cb0:	10c00b17 	ldw	r3,44(r2)
    4cb4:	e0bff917 	ldw	r2,-28(fp)
    4cb8:	18801626 	beq	r3,r2,4d14 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    4cbc:	e0bffc17 	ldw	r2,-16(fp)
    4cc0:	10800037 	ldwio	r2,0(r2)
    4cc4:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    4cc8:	e0bffa17 	ldw	r2,-24(fp)
    4ccc:	10a0000c 	andi	r2,r2,32768
    4cd0:	1005003a 	cmpeq	r2,r2,zero
    4cd4:	10000f1e 	bne	r2,zero,4d14 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    4cd8:	e0bffd17 	ldw	r2,-12(fp)
    4cdc:	10c00a17 	ldw	r3,40(r2)
    4ce0:	e0bffa17 	ldw	r2,-24(fp)
    4ce4:	1009883a 	mov	r4,r2
    4ce8:	e0bffd17 	ldw	r2,-12(fp)
    4cec:	1885883a 	add	r2,r3,r2
    4cf0:	10800e04 	addi	r2,r2,56
    4cf4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4cf8:	e0bffd17 	ldw	r2,-12(fp)
    4cfc:	10800a17 	ldw	r2,40(r2)
    4d00:	10800044 	addi	r2,r2,1
    4d04:	10c1ffcc 	andi	r3,r2,2047
    4d08:	e0bffd17 	ldw	r2,-12(fp)
    4d0c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    4d10:	003fe106 	br	4c98 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    4d14:	e0bffa17 	ldw	r2,-24(fp)
    4d18:	10bfffec 	andhi	r2,r2,65535
    4d1c:	1005003a 	cmpeq	r2,r2,zero
    4d20:	1000101e 	bne	r2,zero,4d64 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4d24:	e0bffd17 	ldw	r2,-12(fp)
    4d28:	10c00817 	ldw	r3,32(r2)
    4d2c:	00bfff84 	movi	r2,-2
    4d30:	1886703a 	and	r3,r3,r2
    4d34:	e0bffd17 	ldw	r2,-12(fp)
    4d38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    4d3c:	e0bffc17 	ldw	r2,-16(fp)
    4d40:	11000104 	addi	r4,r2,4
    4d44:	e0bffd17 	ldw	r2,-12(fp)
    4d48:	10800817 	ldw	r2,32(r2)
    4d4c:	1007883a 	mov	r3,r2
    4d50:	2005883a 	mov	r2,r4
    4d54:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4d58:	e0bffc17 	ldw	r2,-16(fp)
    4d5c:	10800104 	addi	r2,r2,4
    4d60:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    4d64:	e0bffb17 	ldw	r2,-20(fp)
    4d68:	1080800c 	andi	r2,r2,512
    4d6c:	1005003a 	cmpeq	r2,r2,zero
    4d70:	103fbb1e 	bne	r2,zero,4c60 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    4d74:	e0bffb17 	ldw	r2,-20(fp)
    4d78:	10bfffec 	andhi	r2,r2,65535
    4d7c:	1004d43a 	srli	r2,r2,16
    4d80:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    4d84:	00001506 	br	4ddc <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    4d88:	e13ffc17 	ldw	r4,-16(fp)
    4d8c:	e0bffd17 	ldw	r2,-12(fp)
    4d90:	10c00d17 	ldw	r3,52(r2)
    4d94:	e0bffd17 	ldw	r2,-12(fp)
    4d98:	1885883a 	add	r2,r3,r2
    4d9c:	10820e04 	addi	r2,r2,2104
    4da0:	10800003 	ldbu	r2,0(r2)
    4da4:	10c03fcc 	andi	r3,r2,255
    4da8:	18c0201c 	xori	r3,r3,128
    4dac:	18ffe004 	addi	r3,r3,-128
    4db0:	2005883a 	mov	r2,r4
    4db4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    4db8:	e0bffd17 	ldw	r2,-12(fp)
    4dbc:	10800d17 	ldw	r2,52(r2)
    4dc0:	10800044 	addi	r2,r2,1
    4dc4:	10c1ffcc 	andi	r3,r2,2047
    4dc8:	e0bffd17 	ldw	r2,-12(fp)
    4dcc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    4dd0:	e0bff817 	ldw	r2,-32(fp)
    4dd4:	10bfffc4 	addi	r2,r2,-1
    4dd8:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    4ddc:	e0bff817 	ldw	r2,-32(fp)
    4de0:	1005003a 	cmpeq	r2,r2,zero
    4de4:	1000051e 	bne	r2,zero,4dfc <altera_avalon_jtag_uart_irq+0x1c8>
    4de8:	e0bffd17 	ldw	r2,-12(fp)
    4dec:	10c00d17 	ldw	r3,52(r2)
    4df0:	e0bffd17 	ldw	r2,-12(fp)
    4df4:	10800c17 	ldw	r2,48(r2)
    4df8:	18bfe31e 	bne	r3,r2,4d88 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    4dfc:	e0bff817 	ldw	r2,-32(fp)
    4e00:	1005003a 	cmpeq	r2,r2,zero
    4e04:	103f961e 	bne	r2,zero,4c60 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4e08:	e0bffd17 	ldw	r2,-12(fp)
    4e0c:	10c00817 	ldw	r3,32(r2)
    4e10:	00bfff44 	movi	r2,-3
    4e14:	1886703a 	and	r3,r3,r2
    4e18:	e0bffd17 	ldw	r2,-12(fp)
    4e1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4e20:	e0bffd17 	ldw	r2,-12(fp)
    4e24:	10800017 	ldw	r2,0(r2)
    4e28:	11000104 	addi	r4,r2,4
    4e2c:	e0bffd17 	ldw	r2,-12(fp)
    4e30:	10800817 	ldw	r2,32(r2)
    4e34:	1007883a 	mov	r3,r2
    4e38:	2005883a 	mov	r2,r4
    4e3c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    4e40:	e0bffc17 	ldw	r2,-16(fp)
    4e44:	10800104 	addi	r2,r2,4
    4e48:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    4e4c:	003f8406 	br	4c60 <altera_avalon_jtag_uart_irq+0x2c>
}
    4e50:	e037883a 	mov	sp,fp
    4e54:	df000017 	ldw	fp,0(sp)
    4e58:	dec00104 	addi	sp,sp,4
    4e5c:	f800283a 	ret

00004e60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    4e60:	defffc04 	addi	sp,sp,-16
    4e64:	df000315 	stw	fp,12(sp)
    4e68:	df000304 	addi	fp,sp,12
    4e6c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    4e70:	e0bfff17 	ldw	r2,-4(fp)
    4e74:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    4e78:	e0bffe17 	ldw	r2,-8(fp)
    4e7c:	10800017 	ldw	r2,0(r2)
    4e80:	10800104 	addi	r2,r2,4
    4e84:	10800037 	ldwio	r2,0(r2)
    4e88:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    4e8c:	e0bffd17 	ldw	r2,-12(fp)
    4e90:	1081000c 	andi	r2,r2,1024
    4e94:	1005003a 	cmpeq	r2,r2,zero
    4e98:	10000c1e 	bne	r2,zero,4ecc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    4e9c:	e0bffe17 	ldw	r2,-8(fp)
    4ea0:	10800017 	ldw	r2,0(r2)
    4ea4:	11000104 	addi	r4,r2,4
    4ea8:	e0bffe17 	ldw	r2,-8(fp)
    4eac:	10800817 	ldw	r2,32(r2)
    4eb0:	10810014 	ori	r2,r2,1024
    4eb4:	1007883a 	mov	r3,r2
    4eb8:	2005883a 	mov	r2,r4
    4ebc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    4ec0:	e0bffe17 	ldw	r2,-8(fp)
    4ec4:	10000915 	stw	zero,36(r2)
    4ec8:	00000a06 	br	4ef4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    4ecc:	e0bffe17 	ldw	r2,-8(fp)
    4ed0:	10c00917 	ldw	r3,36(r2)
    4ed4:	00a00034 	movhi	r2,32768
    4ed8:	10bfff04 	addi	r2,r2,-4
    4edc:	10c00536 	bltu	r2,r3,4ef4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    4ee0:	e0bffe17 	ldw	r2,-8(fp)
    4ee4:	10800917 	ldw	r2,36(r2)
    4ee8:	10c00044 	addi	r3,r2,1
    4eec:	e0bffe17 	ldw	r2,-8(fp)
    4ef0:	10c00915 	stw	r3,36(r2)
    4ef4:	00800074 	movhi	r2,1
    4ef8:	10834904 	addi	r2,r2,3364
    4efc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    4f00:	e037883a 	mov	sp,fp
    4f04:	df000017 	ldw	fp,0(sp)
    4f08:	dec00104 	addi	sp,sp,4
    4f0c:	f800283a 	ret

00004f10 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    4f10:	defffc04 	addi	sp,sp,-16
    4f14:	df000315 	stw	fp,12(sp)
    4f18:	df000304 	addi	fp,sp,12
    4f1c:	e13ffd15 	stw	r4,-12(fp)
    4f20:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4f24:	00000706 	br	4f44 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    4f28:	e0bffe17 	ldw	r2,-8(fp)
    4f2c:	1090000c 	andi	r2,r2,16384
    4f30:	1005003a 	cmpeq	r2,r2,zero
    4f34:	1000031e 	bne	r2,zero,4f44 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    4f38:	00bffd44 	movi	r2,-11
    4f3c:	e0bfff15 	stw	r2,-4(fp)
    4f40:	00000b06 	br	4f70 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    4f44:	e0bffd17 	ldw	r2,-12(fp)
    4f48:	10c00d17 	ldw	r3,52(r2)
    4f4c:	e0bffd17 	ldw	r2,-12(fp)
    4f50:	10800c17 	ldw	r2,48(r2)
    4f54:	18800526 	beq	r3,r2,4f6c <altera_avalon_jtag_uart_close+0x5c>
    4f58:	e0bffd17 	ldw	r2,-12(fp)
    4f5c:	10c00917 	ldw	r3,36(r2)
    4f60:	e0bffd17 	ldw	r2,-12(fp)
    4f64:	10800117 	ldw	r2,4(r2)
    4f68:	18bfef36 	bltu	r3,r2,4f28 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    4f6c:	e03fff15 	stw	zero,-4(fp)
    4f70:	e0bfff17 	ldw	r2,-4(fp)
}
    4f74:	e037883a 	mov	sp,fp
    4f78:	df000017 	ldw	fp,0(sp)
    4f7c:	dec00104 	addi	sp,sp,4
    4f80:	f800283a 	ret

00004f84 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    4f84:	defff804 	addi	sp,sp,-32
    4f88:	df000715 	stw	fp,28(sp)
    4f8c:	df000704 	addi	fp,sp,28
    4f90:	e13ffb15 	stw	r4,-20(fp)
    4f94:	e17ffc15 	stw	r5,-16(fp)
    4f98:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    4f9c:	00bff9c4 	movi	r2,-25
    4fa0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    4fa4:	e0bffc17 	ldw	r2,-16(fp)
    4fa8:	e0bfff15 	stw	r2,-4(fp)
    4fac:	e0ffff17 	ldw	r3,-4(fp)
    4fb0:	189a8060 	cmpeqi	r2,r3,27137
    4fb4:	1000041e 	bne	r2,zero,4fc8 <altera_avalon_jtag_uart_ioctl+0x44>
    4fb8:	e0ffff17 	ldw	r3,-4(fp)
    4fbc:	189a80a0 	cmpeqi	r2,r3,27138
    4fc0:	10001b1e 	bne	r2,zero,5030 <altera_avalon_jtag_uart_ioctl+0xac>
    4fc4:	00002706 	br	5064 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    4fc8:	e0bffb17 	ldw	r2,-20(fp)
    4fcc:	10c00117 	ldw	r3,4(r2)
    4fd0:	00a00034 	movhi	r2,32768
    4fd4:	10bfffc4 	addi	r2,r2,-1
    4fd8:	18802226 	beq	r3,r2,5064 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    4fdc:	e0bffd17 	ldw	r2,-12(fp)
    4fe0:	10800017 	ldw	r2,0(r2)
    4fe4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    4fe8:	e0bff917 	ldw	r2,-28(fp)
    4fec:	10800090 	cmplti	r2,r2,2
    4ff0:	1000071e 	bne	r2,zero,5010 <altera_avalon_jtag_uart_ioctl+0x8c>
    4ff4:	e0fff917 	ldw	r3,-28(fp)
    4ff8:	00a00034 	movhi	r2,32768
    4ffc:	10bfffc4 	addi	r2,r2,-1
    5000:	18800326 	beq	r3,r2,5010 <altera_avalon_jtag_uart_ioctl+0x8c>
    5004:	e0bff917 	ldw	r2,-28(fp)
    5008:	e0bffe15 	stw	r2,-8(fp)
    500c:	00000306 	br	501c <altera_avalon_jtag_uart_ioctl+0x98>
    5010:	00e00034 	movhi	r3,32768
    5014:	18ffff84 	addi	r3,r3,-2
    5018:	e0fffe15 	stw	r3,-8(fp)
    501c:	e0bffb17 	ldw	r2,-20(fp)
    5020:	e0fffe17 	ldw	r3,-8(fp)
    5024:	10c00115 	stw	r3,4(r2)
      rc = 0;
    5028:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    502c:	00000d06 	br	5064 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    5030:	e0bffb17 	ldw	r2,-20(fp)
    5034:	10c00117 	ldw	r3,4(r2)
    5038:	00a00034 	movhi	r2,32768
    503c:	10bfffc4 	addi	r2,r2,-1
    5040:	18800826 	beq	r3,r2,5064 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    5044:	e13ffd17 	ldw	r4,-12(fp)
    5048:	e0bffb17 	ldw	r2,-20(fp)
    504c:	10c00917 	ldw	r3,36(r2)
    5050:	e0bffb17 	ldw	r2,-20(fp)
    5054:	10800117 	ldw	r2,4(r2)
    5058:	1885803a 	cmpltu	r2,r3,r2
    505c:	20800015 	stw	r2,0(r4)
      rc = 0;
    5060:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    5064:	e0bffa17 	ldw	r2,-24(fp)
}
    5068:	e037883a 	mov	sp,fp
    506c:	df000017 	ldw	fp,0(sp)
    5070:	dec00104 	addi	sp,sp,4
    5074:	f800283a 	ret

00005078 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    5078:	defff204 	addi	sp,sp,-56
    507c:	dfc00d15 	stw	ra,52(sp)
    5080:	df000c15 	stw	fp,48(sp)
    5084:	df000c04 	addi	fp,sp,48
    5088:	e13ffb15 	stw	r4,-20(fp)
    508c:	e17ffc15 	stw	r5,-16(fp)
    5090:	e1bffd15 	stw	r6,-12(fp)
    5094:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    5098:	e0bffc17 	ldw	r2,-16(fp)
    509c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    50a0:	00004806 	br	51c4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    50a4:	e0bffb17 	ldw	r2,-20(fp)
    50a8:	10800a17 	ldw	r2,40(r2)
    50ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    50b0:	e0bffb17 	ldw	r2,-20(fp)
    50b4:	10800b17 	ldw	r2,44(r2)
    50b8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    50bc:	e0fff717 	ldw	r3,-36(fp)
    50c0:	e0bff617 	ldw	r2,-40(fp)
    50c4:	18800536 	bltu	r3,r2,50dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    50c8:	e0bff717 	ldw	r2,-36(fp)
    50cc:	e0fff617 	ldw	r3,-40(fp)
    50d0:	10c5c83a 	sub	r2,r2,r3
    50d4:	e0bff815 	stw	r2,-32(fp)
    50d8:	00000406 	br	50ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    50dc:	00820004 	movi	r2,2048
    50e0:	e0fff617 	ldw	r3,-40(fp)
    50e4:	10c5c83a 	sub	r2,r2,r3
    50e8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    50ec:	e0bff817 	ldw	r2,-32(fp)
    50f0:	1005003a 	cmpeq	r2,r2,zero
    50f4:	10001f1e 	bne	r2,zero,5174 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    50f8:	e0fffd17 	ldw	r3,-12(fp)
    50fc:	e0bff817 	ldw	r2,-32(fp)
    5100:	1880022e 	bgeu	r3,r2,510c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    5104:	e0bffd17 	ldw	r2,-12(fp)
    5108:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    510c:	e0bffb17 	ldw	r2,-20(fp)
    5110:	10c00e04 	addi	r3,r2,56
    5114:	e0bff617 	ldw	r2,-40(fp)
    5118:	1887883a 	add	r3,r3,r2
    511c:	e0bffa17 	ldw	r2,-24(fp)
    5120:	1009883a 	mov	r4,r2
    5124:	180b883a 	mov	r5,r3
    5128:	e1bff817 	ldw	r6,-32(fp)
    512c:	0003ee00 	call	3ee0 <memcpy>
      ptr   += n;
    5130:	e0fff817 	ldw	r3,-32(fp)
    5134:	e0bffa17 	ldw	r2,-24(fp)
    5138:	10c5883a 	add	r2,r2,r3
    513c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    5140:	e0fffd17 	ldw	r3,-12(fp)
    5144:	e0bff817 	ldw	r2,-32(fp)
    5148:	1885c83a 	sub	r2,r3,r2
    514c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    5150:	e0fff617 	ldw	r3,-40(fp)
    5154:	e0bff817 	ldw	r2,-32(fp)
    5158:	1885883a 	add	r2,r3,r2
    515c:	10c1ffcc 	andi	r3,r2,2047
    5160:	e0bffb17 	ldw	r2,-20(fp)
    5164:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    5168:	e0bffd17 	ldw	r2,-12(fp)
    516c:	10800048 	cmpgei	r2,r2,1
    5170:	103fcc1e 	bne	r2,zero,50a4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    5174:	e0fffa17 	ldw	r3,-24(fp)
    5178:	e0bffc17 	ldw	r2,-16(fp)
    517c:	1880141e 	bne	r3,r2,51d0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    5180:	e0bffe17 	ldw	r2,-8(fp)
    5184:	1090000c 	andi	r2,r2,16384
    5188:	1004c03a 	cmpne	r2,r2,zero
    518c:	1000101e 	bne	r2,zero,51d0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    5190:	e0bffb17 	ldw	r2,-20(fp)
    5194:	10c00a17 	ldw	r3,40(r2)
    5198:	e0bff717 	ldw	r2,-36(fp)
    519c:	1880051e 	bne	r3,r2,51b4 <altera_avalon_jtag_uart_read+0x13c>
    51a0:	e0bffb17 	ldw	r2,-20(fp)
    51a4:	10c00917 	ldw	r3,36(r2)
    51a8:	e0bffb17 	ldw	r2,-20(fp)
    51ac:	10800117 	ldw	r2,4(r2)
    51b0:	18bff736 	bltu	r3,r2,5190 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    51b4:	e0bffb17 	ldw	r2,-20(fp)
    51b8:	10c00a17 	ldw	r3,40(r2)
    51bc:	e0bff717 	ldw	r2,-36(fp)
    51c0:	18800326 	beq	r3,r2,51d0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    51c4:	e0bffd17 	ldw	r2,-12(fp)
    51c8:	10800048 	cmpgei	r2,r2,1
    51cc:	103fb51e 	bne	r2,zero,50a4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    51d0:	e0fffa17 	ldw	r3,-24(fp)
    51d4:	e0bffc17 	ldw	r2,-16(fp)
    51d8:	18801926 	beq	r3,r2,5240 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51dc:	0005303a 	rdctl	r2,status
    51e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51e4:	e0fff517 	ldw	r3,-44(fp)
    51e8:	00bfff84 	movi	r2,-2
    51ec:	1884703a 	and	r2,r3,r2
    51f0:	1001703a 	wrctl	status,r2
  
  return context;
    51f4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    51f8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    51fc:	e0bffb17 	ldw	r2,-20(fp)
    5200:	10800817 	ldw	r2,32(r2)
    5204:	10c00054 	ori	r3,r2,1
    5208:	e0bffb17 	ldw	r2,-20(fp)
    520c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    5210:	e0bffb17 	ldw	r2,-20(fp)
    5214:	10800017 	ldw	r2,0(r2)
    5218:	11000104 	addi	r4,r2,4
    521c:	e0bffb17 	ldw	r2,-20(fp)
    5220:	10800817 	ldw	r2,32(r2)
    5224:	1007883a 	mov	r3,r2
    5228:	2005883a 	mov	r2,r4
    522c:	10c00035 	stwio	r3,0(r2)
    5230:	e0bff917 	ldw	r2,-28(fp)
    5234:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5238:	e0bff417 	ldw	r2,-48(fp)
    523c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    5240:	e0fffa17 	ldw	r3,-24(fp)
    5244:	e0bffc17 	ldw	r2,-16(fp)
    5248:	18800526 	beq	r3,r2,5260 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    524c:	e0fffa17 	ldw	r3,-24(fp)
    5250:	e0bffc17 	ldw	r2,-16(fp)
    5254:	1887c83a 	sub	r3,r3,r2
    5258:	e0ffff15 	stw	r3,-4(fp)
    525c:	00000906 	br	5284 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    5260:	e0bffe17 	ldw	r2,-8(fp)
    5264:	1090000c 	andi	r2,r2,16384
    5268:	1005003a 	cmpeq	r2,r2,zero
    526c:	1000031e 	bne	r2,zero,527c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    5270:	00bffd44 	movi	r2,-11
    5274:	e0bfff15 	stw	r2,-4(fp)
    5278:	00000206 	br	5284 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    527c:	00bffec4 	movi	r2,-5
    5280:	e0bfff15 	stw	r2,-4(fp)
    5284:	e0bfff17 	ldw	r2,-4(fp)
}
    5288:	e037883a 	mov	sp,fp
    528c:	dfc00117 	ldw	ra,4(sp)
    5290:	df000017 	ldw	fp,0(sp)
    5294:	dec00204 	addi	sp,sp,8
    5298:	f800283a 	ret

0000529c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    529c:	defff204 	addi	sp,sp,-56
    52a0:	dfc00d15 	stw	ra,52(sp)
    52a4:	df000c15 	stw	fp,48(sp)
    52a8:	df000c04 	addi	fp,sp,48
    52ac:	e13ffb15 	stw	r4,-20(fp)
    52b0:	e17ffc15 	stw	r5,-16(fp)
    52b4:	e1bffd15 	stw	r6,-12(fp)
    52b8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    52bc:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    52c0:	e0bffc17 	ldw	r2,-16(fp)
    52c4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    52c8:	00003a06 	br	53b4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    52cc:	e0bffb17 	ldw	r2,-20(fp)
    52d0:	10800c17 	ldw	r2,48(r2)
    52d4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    52d8:	e0bffb17 	ldw	r2,-20(fp)
    52dc:	10800d17 	ldw	r2,52(r2)
    52e0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    52e4:	e0fffa17 	ldw	r3,-24(fp)
    52e8:	e0bff917 	ldw	r2,-28(fp)
    52ec:	1880062e 	bgeu	r3,r2,5308 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    52f0:	e0fff917 	ldw	r3,-28(fp)
    52f4:	e0bffa17 	ldw	r2,-24(fp)
    52f8:	1885c83a 	sub	r2,r3,r2
    52fc:	10bfffc4 	addi	r2,r2,-1
    5300:	e0bff815 	stw	r2,-32(fp)
    5304:	00000c06 	br	5338 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    5308:	e0bff917 	ldw	r2,-28(fp)
    530c:	1005003a 	cmpeq	r2,r2,zero
    5310:	1000051e 	bne	r2,zero,5328 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    5314:	00820004 	movi	r2,2048
    5318:	e0fffa17 	ldw	r3,-24(fp)
    531c:	10c5c83a 	sub	r2,r2,r3
    5320:	e0bff815 	stw	r2,-32(fp)
    5324:	00000406 	br	5338 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    5328:	0081ffc4 	movi	r2,2047
    532c:	e0fffa17 	ldw	r3,-24(fp)
    5330:	10c5c83a 	sub	r2,r2,r3
    5334:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    5338:	e0bff817 	ldw	r2,-32(fp)
    533c:	1005003a 	cmpeq	r2,r2,zero
    5340:	10001f1e 	bne	r2,zero,53c0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    5344:	e0fffd17 	ldw	r3,-12(fp)
    5348:	e0bff817 	ldw	r2,-32(fp)
    534c:	1880022e 	bgeu	r3,r2,5358 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    5350:	e0bffd17 	ldw	r2,-12(fp)
    5354:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    5358:	e0bffb17 	ldw	r2,-20(fp)
    535c:	10c20e04 	addi	r3,r2,2104
    5360:	e0bffa17 	ldw	r2,-24(fp)
    5364:	1885883a 	add	r2,r3,r2
    5368:	e0fffc17 	ldw	r3,-16(fp)
    536c:	1009883a 	mov	r4,r2
    5370:	180b883a 	mov	r5,r3
    5374:	e1bff817 	ldw	r6,-32(fp)
    5378:	0003ee00 	call	3ee0 <memcpy>
      ptr   += n;
    537c:	e0fff817 	ldw	r3,-32(fp)
    5380:	e0bffc17 	ldw	r2,-16(fp)
    5384:	10c5883a 	add	r2,r2,r3
    5388:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    538c:	e0fffd17 	ldw	r3,-12(fp)
    5390:	e0bff817 	ldw	r2,-32(fp)
    5394:	1885c83a 	sub	r2,r3,r2
    5398:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    539c:	e0fffa17 	ldw	r3,-24(fp)
    53a0:	e0bff817 	ldw	r2,-32(fp)
    53a4:	1885883a 	add	r2,r3,r2
    53a8:	10c1ffcc 	andi	r3,r2,2047
    53ac:	e0bffb17 	ldw	r2,-20(fp)
    53b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    53b4:	e0bffd17 	ldw	r2,-12(fp)
    53b8:	10800048 	cmpgei	r2,r2,1
    53bc:	103fc31e 	bne	r2,zero,52cc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    53c0:	0005303a 	rdctl	r2,status
    53c4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    53c8:	e0fff517 	ldw	r3,-44(fp)
    53cc:	00bfff84 	movi	r2,-2
    53d0:	1884703a 	and	r2,r3,r2
    53d4:	1001703a 	wrctl	status,r2
  
  return context;
    53d8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    53dc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    53e0:	e0bffb17 	ldw	r2,-20(fp)
    53e4:	10800817 	ldw	r2,32(r2)
    53e8:	10c00094 	ori	r3,r2,2
    53ec:	e0bffb17 	ldw	r2,-20(fp)
    53f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    53f4:	e0bffb17 	ldw	r2,-20(fp)
    53f8:	10800017 	ldw	r2,0(r2)
    53fc:	11000104 	addi	r4,r2,4
    5400:	e0bffb17 	ldw	r2,-20(fp)
    5404:	10800817 	ldw	r2,32(r2)
    5408:	1007883a 	mov	r3,r2
    540c:	2005883a 	mov	r2,r4
    5410:	10c00035 	stwio	r3,0(r2)
    5414:	e0bff717 	ldw	r2,-36(fp)
    5418:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    541c:	e0bff417 	ldw	r2,-48(fp)
    5420:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    5424:	e0bffd17 	ldw	r2,-12(fp)
    5428:	10800050 	cmplti	r2,r2,1
    542c:	1000111e 	bne	r2,zero,5474 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    5430:	e0bffe17 	ldw	r2,-8(fp)
    5434:	1090000c 	andi	r2,r2,16384
    5438:	1004c03a 	cmpne	r2,r2,zero
    543c:	1000101e 	bne	r2,zero,5480 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    5440:	e0bffb17 	ldw	r2,-20(fp)
    5444:	10c00d17 	ldw	r3,52(r2)
    5448:	e0bff917 	ldw	r2,-28(fp)
    544c:	1880051e 	bne	r3,r2,5464 <altera_avalon_jtag_uart_write+0x1c8>
    5450:	e0bffb17 	ldw	r2,-20(fp)
    5454:	10c00917 	ldw	r3,36(r2)
    5458:	e0bffb17 	ldw	r2,-20(fp)
    545c:	10800117 	ldw	r2,4(r2)
    5460:	18bff736 	bltu	r3,r2,5440 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    5464:	e0bffb17 	ldw	r2,-20(fp)
    5468:	10c00d17 	ldw	r3,52(r2)
    546c:	e0bff917 	ldw	r2,-28(fp)
    5470:	18800326 	beq	r3,r2,5480 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    5474:	e0bffd17 	ldw	r2,-12(fp)
    5478:	10800048 	cmpgei	r2,r2,1
    547c:	103fcd1e 	bne	r2,zero,53b4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    5480:	e0fffc17 	ldw	r3,-16(fp)
    5484:	e0bff617 	ldw	r2,-40(fp)
    5488:	18800526 	beq	r3,r2,54a0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    548c:	e0fffc17 	ldw	r3,-16(fp)
    5490:	e0bff617 	ldw	r2,-40(fp)
    5494:	1887c83a 	sub	r3,r3,r2
    5498:	e0ffff15 	stw	r3,-4(fp)
    549c:	00000906 	br	54c4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    54a0:	e0bffe17 	ldw	r2,-8(fp)
    54a4:	1090000c 	andi	r2,r2,16384
    54a8:	1005003a 	cmpeq	r2,r2,zero
    54ac:	1000031e 	bne	r2,zero,54bc <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    54b0:	00bffd44 	movi	r2,-11
    54b4:	e0bfff15 	stw	r2,-4(fp)
    54b8:	00000206 	br	54c4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    54bc:	00bffec4 	movi	r2,-5
    54c0:	e0bfff15 	stw	r2,-4(fp)
    54c4:	e0bfff17 	ldw	r2,-4(fp)
}
    54c8:	e037883a 	mov	sp,fp
    54cc:	dfc00117 	ldw	ra,4(sp)
    54d0:	df000017 	ldw	fp,0(sp)
    54d4:	dec00204 	addi	sp,sp,8
    54d8:	f800283a 	ret

000054dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    54dc:	defff904 	addi	sp,sp,-28
    54e0:	dfc00615 	stw	ra,24(sp)
    54e4:	df000515 	stw	fp,20(sp)
    54e8:	df000504 	addi	fp,sp,20
    54ec:	e13ffe15 	stw	r4,-8(fp)
    54f0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    54f4:	e0bffe17 	ldw	r2,-8(fp)
    54f8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    54fc:	e0bffe17 	ldw	r2,-8(fp)
    5500:	10800104 	addi	r2,r2,4
    5504:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5508:	0005303a 	rdctl	r2,status
    550c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5510:	e0fffc17 	ldw	r3,-16(fp)
    5514:	00bfff84 	movi	r2,-2
    5518:	1884703a 	and	r2,r3,r2
    551c:	1001703a 	wrctl	status,r2
  
  return context;
    5520:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    5524:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    5528:	00098080 	call	9808 <alt_tick>
    552c:	e0bffd17 	ldw	r2,-12(fp)
    5530:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5534:	e0bffb17 	ldw	r2,-20(fp)
    5538:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    553c:	e037883a 	mov	sp,fp
    5540:	dfc00117 	ldw	ra,4(sp)
    5544:	df000017 	ldw	fp,0(sp)
    5548:	dec00204 	addi	sp,sp,8
    554c:	f800283a 	ret

00005550 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    5550:	defff904 	addi	sp,sp,-28
    5554:	dfc00615 	stw	ra,24(sp)
    5558:	df000515 	stw	fp,20(sp)
    555c:	df000504 	addi	fp,sp,20
    5560:	e13ffc15 	stw	r4,-16(fp)
    5564:	e17ffd15 	stw	r5,-12(fp)
    5568:	e1bffe15 	stw	r6,-8(fp)
    556c:	e1ffff15 	stw	r7,-4(fp)
    5570:	e0bfff17 	ldw	r2,-4(fp)
    5574:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    5578:	00800074 	movhi	r2,1
    557c:	10834904 	addi	r2,r2,3364
    5580:	10800017 	ldw	r2,0(r2)
    5584:	1004c03a 	cmpne	r2,r2,zero
    5588:	1000041e 	bne	r2,zero,559c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    558c:	00c00074 	movhi	r3,1
    5590:	18c34904 	addi	r3,r3,3364
    5594:	e0bffb17 	ldw	r2,-20(fp)
    5598:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    559c:	e0bffc17 	ldw	r2,-16(fp)
    55a0:	10800104 	addi	r2,r2,4
    55a4:	1007883a 	mov	r3,r2
    55a8:	008001c4 	movi	r2,7
    55ac:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    55b0:	e13ffe17 	ldw	r4,-8(fp)
    55b4:	e17ffc17 	ldw	r5,-16(fp)
    55b8:	01800034 	movhi	r6,0
    55bc:	31953704 	addi	r6,r6,21724
    55c0:	00040180 	call	4018 <alt_irq_register>
#endif  
}
    55c4:	e037883a 	mov	sp,fp
    55c8:	dfc00117 	ldw	ra,4(sp)
    55cc:	df000017 	ldw	fp,0(sp)
    55d0:	dec00204 	addi	sp,sp,8
    55d4:	f800283a 	ret

000055d8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    55d8:	defffc04 	addi	sp,sp,-16
    55dc:	dfc00315 	stw	ra,12(sp)
    55e0:	df000215 	stw	fp,8(sp)
    55e4:	df000204 	addi	fp,sp,8
    55e8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    55ec:	e13fff17 	ldw	r4,-4(fp)
    55f0:	01400074 	movhi	r5,1
    55f4:	297b6904 	addi	r5,r5,-4700
    55f8:	000924c0 	call	924c <alt_find_dev>
    55fc:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    5600:	e0bffe17 	ldw	r2,-8(fp)
}
    5604:	e037883a 	mov	sp,fp
    5608:	dfc00117 	ldw	ra,4(sp)
    560c:	df000017 	ldw	fp,0(sp)
    5610:	dec00204 	addi	sp,sp,8
    5614:	f800283a 	ret

00005618 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    5618:	defffd04 	addi	sp,sp,-12
    561c:	df000215 	stw	fp,8(sp)
    5620:	df000204 	addi	fp,sp,8
    5624:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    5628:	e0bfff17 	ldw	r2,-4(fp)
    562c:	10800a17 	ldw	r2,40(r2)
    5630:	10800037 	ldwio	r2,0(r2)
    5634:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    5638:	e0bffe17 	ldw	r2,-8(fp)
    563c:	10800054 	ori	r2,r2,1
    5640:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    5644:	e0bfff17 	ldw	r2,-4(fp)
    5648:	10800a17 	ldw	r2,40(r2)
    564c:	e0fffe17 	ldw	r3,-8(fp)
    5650:	10c00035 	stwio	r3,0(r2)
}
    5654:	e037883a 	mov	sp,fp
    5658:	df000017 	ldw	fp,0(sp)
    565c:	dec00104 	addi	sp,sp,4
    5660:	f800283a 	ret

00005664 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    5664:	defffd04 	addi	sp,sp,-12
    5668:	df000215 	stw	fp,8(sp)
    566c:	df000204 	addi	fp,sp,8
    5670:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    5674:	e0bfff17 	ldw	r2,-4(fp)
    5678:	10800a17 	ldw	r2,40(r2)
    567c:	10800037 	ldwio	r2,0(r2)
    5680:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    5684:	e0fffe17 	ldw	r3,-8(fp)
    5688:	00bfff84 	movi	r2,-2
    568c:	1884703a 	and	r2,r3,r2
    5690:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    5694:	e0bfff17 	ldw	r2,-4(fp)
    5698:	10800a17 	ldw	r2,40(r2)
    569c:	e0fffe17 	ldw	r3,-8(fp)
    56a0:	10c00035 	stwio	r3,0(r2)
}
    56a4:	e037883a 	mov	sp,fp
    56a8:	df000017 	ldw	fp,0(sp)
    56ac:	dec00104 	addi	sp,sp,4
    56b0:	f800283a 	ret

000056b4 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    56b4:	defffd04 	addi	sp,sp,-12
    56b8:	df000215 	stw	fp,8(sp)
    56bc:	df000204 	addi	fp,sp,8
    56c0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    56c4:	e0bfff17 	ldw	r2,-4(fp)
    56c8:	10800a17 	ldw	r2,40(r2)
    56cc:	10800037 	ldwio	r2,0(r2)
    56d0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    56d4:	e0bffe17 	ldw	r2,-8(fp)
    56d8:	10800094 	ori	r2,r2,2
    56dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    56e0:	e0bfff17 	ldw	r2,-4(fp)
    56e4:	10800a17 	ldw	r2,40(r2)
    56e8:	e0fffe17 	ldw	r3,-8(fp)
    56ec:	10c00035 	stwio	r3,0(r2)
}
    56f0:	e037883a 	mov	sp,fp
    56f4:	df000017 	ldw	fp,0(sp)
    56f8:	dec00104 	addi	sp,sp,4
    56fc:	f800283a 	ret

00005700 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    5700:	defffd04 	addi	sp,sp,-12
    5704:	df000215 	stw	fp,8(sp)
    5708:	df000204 	addi	fp,sp,8
    570c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    5710:	e0bfff17 	ldw	r2,-4(fp)
    5714:	10800a17 	ldw	r2,40(r2)
    5718:	10800037 	ldwio	r2,0(r2)
    571c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    5720:	e0fffe17 	ldw	r3,-8(fp)
    5724:	00bfff44 	movi	r2,-3
    5728:	1884703a 	and	r2,r3,r2
    572c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    5730:	e0bfff17 	ldw	r2,-4(fp)
    5734:	10800a17 	ldw	r2,40(r2)
    5738:	e0fffe17 	ldw	r3,-8(fp)
    573c:	10c00035 	stwio	r3,0(r2)
}
    5740:	e037883a 	mov	sp,fp
    5744:	df000017 	ldw	fp,0(sp)
    5748:	dec00104 	addi	sp,sp,4
    574c:	f800283a 	ret

00005750 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    5750:	defffd04 	addi	sp,sp,-12
    5754:	df000215 	stw	fp,8(sp)
    5758:	df000204 	addi	fp,sp,8
    575c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    5760:	e0bfff17 	ldw	r2,-4(fp)
    5764:	10800a17 	ldw	r2,40(r2)
    5768:	10800037 	ldwio	r2,0(r2)
    576c:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    5770:	e0bffe17 	ldw	r2,-8(fp)
    5774:	1080400c 	andi	r2,r2,256
    5778:	1004c03a 	cmpne	r2,r2,zero
}
    577c:	e037883a 	mov	sp,fp
    5780:	df000017 	ldw	fp,0(sp)
    5784:	dec00104 	addi	sp,sp,4
    5788:	f800283a 	ret

0000578c <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    578c:	defffd04 	addi	sp,sp,-12
    5790:	df000215 	stw	fp,8(sp)
    5794:	df000204 	addi	fp,sp,8
    5798:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    579c:	e0bfff17 	ldw	r2,-4(fp)
    57a0:	10800a17 	ldw	r2,40(r2)
    57a4:	10800037 	ldwio	r2,0(r2)
    57a8:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    57ac:	e0bffe17 	ldw	r2,-8(fp)
    57b0:	1080800c 	andi	r2,r2,512
    57b4:	1004c03a 	cmpne	r2,r2,zero
}
    57b8:	e037883a 	mov	sp,fp
    57bc:	df000017 	ldw	fp,0(sp)
    57c0:	dec00104 	addi	sp,sp,4
    57c4:	f800283a 	ret

000057c8 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    57c8:	defffd04 	addi	sp,sp,-12
    57cc:	df000215 	stw	fp,8(sp)
    57d0:	df000204 	addi	fp,sp,8
    57d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    57d8:	e0bfff17 	ldw	r2,-4(fp)
    57dc:	10800a17 	ldw	r2,40(r2)
    57e0:	10800037 	ldwio	r2,0(r2)
    57e4:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    57e8:	e0bffe17 	ldw	r2,-8(fp)
    57ec:	10800114 	ori	r2,r2,4
    57f0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    57f4:	e0bffe17 	ldw	r2,-8(fp)
    57f8:	10800214 	ori	r2,r2,8
    57fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    5800:	e0bfff17 	ldw	r2,-4(fp)
    5804:	10800a17 	ldw	r2,40(r2)
    5808:	e0fffe17 	ldw	r3,-8(fp)
    580c:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    5810:	e0fffe17 	ldw	r3,-8(fp)
    5814:	00bffec4 	movi	r2,-5
    5818:	1884703a 	and	r2,r3,r2
    581c:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    5820:	e0fffe17 	ldw	r3,-8(fp)
    5824:	00bffdc4 	movi	r2,-9
    5828:	1884703a 	and	r2,r3,r2
    582c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    5830:	e0bfff17 	ldw	r2,-4(fp)
    5834:	10800a17 	ldw	r2,40(r2)
    5838:	e0fffe17 	ldw	r3,-8(fp)
    583c:	10c00035 	stwio	r3,0(r2)
}
    5840:	e037883a 	mov	sp,fp
    5844:	df000017 	ldw	fp,0(sp)
    5848:	dec00104 	addi	sp,sp,4
    584c:	f800283a 	ret

00005850 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    5850:	defffb04 	addi	sp,sp,-20
    5854:	df000415 	stw	fp,16(sp)
    5858:	df000404 	addi	fp,sp,16
    585c:	e13ffd15 	stw	r4,-12(fp)
    5860:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    5864:	e0bffd17 	ldw	r2,-12(fp)
    5868:	10800a17 	ldw	r2,40(r2)
    586c:	10800104 	addi	r2,r2,4
    5870:	10800037 	ldwio	r2,0(r2)
    5874:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    5878:	e0bffe17 	ldw	r2,-8(fp)
    587c:	1004c03a 	cmpne	r2,r2,zero
    5880:	1000051e 	bne	r2,zero,5898 <alt_up_audio_read_fifo_avail+0x48>
    5884:	e0bffc17 	ldw	r2,-16(fp)
    5888:	10bfc00c 	andi	r2,r2,65280
    588c:	1004d23a 	srli	r2,r2,8
    5890:	e0bfff15 	stw	r2,-4(fp)
    5894:	00000306 	br	58a4 <alt_up_audio_read_fifo_avail+0x54>
    5898:	e0bffc17 	ldw	r2,-16(fp)
    589c:	10803fcc 	andi	r2,r2,255
    58a0:	e0bfff15 	stw	r2,-4(fp)
    58a4:	e0bfff17 	ldw	r2,-4(fp)
    58a8:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    58ac:	e0bffc17 	ldw	r2,-16(fp)
}
    58b0:	e037883a 	mov	sp,fp
    58b4:	df000017 	ldw	fp,0(sp)
    58b8:	dec00104 	addi	sp,sp,4
    58bc:	f800283a 	ret

000058c0 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    58c0:	defff904 	addi	sp,sp,-28
    58c4:	dfc00615 	stw	ra,24(sp)
    58c8:	df000515 	stw	fp,20(sp)
    58cc:	df000504 	addi	fp,sp,20
    58d0:	e13ffc15 	stw	r4,-16(fp)
    58d4:	e17ffd15 	stw	r5,-12(fp)
    58d8:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    58dc:	e13ffc17 	ldw	r4,-16(fp)
    58e0:	01400044 	movi	r5,1
    58e4:	00058500 	call	5850 <alt_up_audio_read_fifo_avail>
    58e8:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    58ec:	e0bffb17 	ldw	r2,-20(fp)
    58f0:	10801868 	cmpgeui	r2,r2,97
    58f4:	1000021e 	bne	r2,zero,5900 <alt_up_audio_record_r+0x40>
		return 0;
    58f8:	e03fff15 	stw	zero,-4(fp)
    58fc:	00000606 	br	5918 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    5900:	e13ffc17 	ldw	r4,-16(fp)
    5904:	e17ffd17 	ldw	r5,-12(fp)
    5908:	e1bffe17 	ldw	r6,-8(fp)
    590c:	01c00044 	movi	r7,1
    5910:	0005af40 	call	5af4 <alt_up_audio_read_fifo>
    5914:	e0bfff15 	stw	r2,-4(fp)
    5918:	e0bfff17 	ldw	r2,-4(fp)
}
    591c:	e037883a 	mov	sp,fp
    5920:	dfc00117 	ldw	ra,4(sp)
    5924:	df000017 	ldw	fp,0(sp)
    5928:	dec00204 	addi	sp,sp,8
    592c:	f800283a 	ret

00005930 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    5930:	defff904 	addi	sp,sp,-28
    5934:	dfc00615 	stw	ra,24(sp)
    5938:	df000515 	stw	fp,20(sp)
    593c:	df000504 	addi	fp,sp,20
    5940:	e13ffc15 	stw	r4,-16(fp)
    5944:	e17ffd15 	stw	r5,-12(fp)
    5948:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    594c:	e13ffc17 	ldw	r4,-16(fp)
    5950:	000b883a 	mov	r5,zero
    5954:	00058500 	call	5850 <alt_up_audio_read_fifo_avail>
    5958:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    595c:	e0bffb17 	ldw	r2,-20(fp)
    5960:	10801868 	cmpgeui	r2,r2,97
    5964:	1000021e 	bne	r2,zero,5970 <alt_up_audio_record_l+0x40>
		return 0;
    5968:	e03fff15 	stw	zero,-4(fp)
    596c:	00000606 	br	5988 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    5970:	e13ffc17 	ldw	r4,-16(fp)
    5974:	e17ffd17 	ldw	r5,-12(fp)
    5978:	e1bffe17 	ldw	r6,-8(fp)
    597c:	000f883a 	mov	r7,zero
    5980:	0005af40 	call	5af4 <alt_up_audio_read_fifo>
    5984:	e0bfff15 	stw	r2,-4(fp)
    5988:	e0bfff17 	ldw	r2,-4(fp)
}
    598c:	e037883a 	mov	sp,fp
    5990:	dfc00117 	ldw	ra,4(sp)
    5994:	df000017 	ldw	fp,0(sp)
    5998:	dec00204 	addi	sp,sp,8
    599c:	f800283a 	ret

000059a0 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    59a0:	defffb04 	addi	sp,sp,-20
    59a4:	df000415 	stw	fp,16(sp)
    59a8:	df000404 	addi	fp,sp,16
    59ac:	e13ffd15 	stw	r4,-12(fp)
    59b0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    59b4:	e0bffd17 	ldw	r2,-12(fp)
    59b8:	10800a17 	ldw	r2,40(r2)
    59bc:	10800104 	addi	r2,r2,4
    59c0:	10800037 	ldwio	r2,0(r2)
    59c4:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    59c8:	e0bffe17 	ldw	r2,-8(fp)
    59cc:	1004c03a 	cmpne	r2,r2,zero
    59d0:	1000051e 	bne	r2,zero,59e8 <alt_up_audio_write_fifo_space+0x48>
    59d4:	e0bffc17 	ldw	r2,-16(fp)
    59d8:	10bfc02c 	andhi	r2,r2,65280
    59dc:	1004d63a 	srli	r2,r2,24
    59e0:	e0bfff15 	stw	r2,-4(fp)
    59e4:	00000406 	br	59f8 <alt_up_audio_write_fifo_space+0x58>
    59e8:	e0bffc17 	ldw	r2,-16(fp)
    59ec:	10803fec 	andhi	r2,r2,255
    59f0:	1004d43a 	srli	r2,r2,16
    59f4:	e0bfff15 	stw	r2,-4(fp)
    59f8:	e0bfff17 	ldw	r2,-4(fp)
    59fc:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    5a00:	e0bffc17 	ldw	r2,-16(fp)
}
    5a04:	e037883a 	mov	sp,fp
    5a08:	df000017 	ldw	fp,0(sp)
    5a0c:	dec00104 	addi	sp,sp,4
    5a10:	f800283a 	ret

00005a14 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    5a14:	defff904 	addi	sp,sp,-28
    5a18:	dfc00615 	stw	ra,24(sp)
    5a1c:	df000515 	stw	fp,20(sp)
    5a20:	df000504 	addi	fp,sp,20
    5a24:	e13ffc15 	stw	r4,-16(fp)
    5a28:	e17ffd15 	stw	r5,-12(fp)
    5a2c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    5a30:	e13ffc17 	ldw	r4,-16(fp)
    5a34:	01400044 	movi	r5,1
    5a38:	00059a00 	call	59a0 <alt_up_audio_write_fifo_space>
    5a3c:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    5a40:	e0bffb17 	ldw	r2,-20(fp)
    5a44:	10801868 	cmpgeui	r2,r2,97
    5a48:	1000021e 	bne	r2,zero,5a54 <alt_up_audio_play_r+0x40>
		return 0;
    5a4c:	e03fff15 	stw	zero,-4(fp)
    5a50:	00000606 	br	5a6c <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    5a54:	e13ffc17 	ldw	r4,-16(fp)
    5a58:	e17ffd17 	ldw	r5,-12(fp)
    5a5c:	e1bffe17 	ldw	r6,-8(fp)
    5a60:	01c00044 	movi	r7,1
    5a64:	0005bf80 	call	5bf8 <alt_up_audio_write_fifo>
    5a68:	e0bfff15 	stw	r2,-4(fp)
    5a6c:	e0bfff17 	ldw	r2,-4(fp)
}
    5a70:	e037883a 	mov	sp,fp
    5a74:	dfc00117 	ldw	ra,4(sp)
    5a78:	df000017 	ldw	fp,0(sp)
    5a7c:	dec00204 	addi	sp,sp,8
    5a80:	f800283a 	ret

00005a84 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    5a84:	defff904 	addi	sp,sp,-28
    5a88:	dfc00615 	stw	ra,24(sp)
    5a8c:	df000515 	stw	fp,20(sp)
    5a90:	df000504 	addi	fp,sp,20
    5a94:	e13ffc15 	stw	r4,-16(fp)
    5a98:	e17ffd15 	stw	r5,-12(fp)
    5a9c:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    5aa0:	e13ffc17 	ldw	r4,-16(fp)
    5aa4:	000b883a 	mov	r5,zero
    5aa8:	00059a00 	call	59a0 <alt_up_audio_write_fifo_space>
    5aac:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    5ab0:	e0bffb17 	ldw	r2,-20(fp)
    5ab4:	10801868 	cmpgeui	r2,r2,97
    5ab8:	1000021e 	bne	r2,zero,5ac4 <alt_up_audio_play_l+0x40>
		return 0;
    5abc:	e03fff15 	stw	zero,-4(fp)
    5ac0:	00000606 	br	5adc <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    5ac4:	e13ffc17 	ldw	r4,-16(fp)
    5ac8:	e17ffd17 	ldw	r5,-12(fp)
    5acc:	e1bffe17 	ldw	r6,-8(fp)
    5ad0:	000f883a 	mov	r7,zero
    5ad4:	0005bf80 	call	5bf8 <alt_up_audio_write_fifo>
    5ad8:	e0bfff15 	stw	r2,-4(fp)
    5adc:	e0bfff17 	ldw	r2,-4(fp)
}
    5ae0:	e037883a 	mov	sp,fp
    5ae4:	dfc00117 	ldw	ra,4(sp)
    5ae8:	df000017 	ldw	fp,0(sp)
    5aec:	dec00204 	addi	sp,sp,8
    5af0:	f800283a 	ret

00005af4 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    5af4:	defff604 	addi	sp,sp,-40
    5af8:	df000915 	stw	fp,36(sp)
    5afc:	df000904 	addi	fp,sp,36
    5b00:	e13ff915 	stw	r4,-28(fp)
    5b04:	e17ffa15 	stw	r5,-24(fp)
    5b08:	e1bffb15 	stw	r6,-20(fp)
    5b0c:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    5b10:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    5b14:	00003006 	br	5bd8 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    5b18:	e0bff917 	ldw	r2,-28(fp)
    5b1c:	10800a17 	ldw	r2,40(r2)
    5b20:	10800104 	addi	r2,r2,4
    5b24:	10800037 	ldwio	r2,0(r2)
    5b28:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    5b2c:	e0bffc17 	ldw	r2,-16(fp)
    5b30:	1004c03a 	cmpne	r2,r2,zero
    5b34:	1000051e 	bne	r2,zero,5b4c <alt_up_audio_read_fifo+0x58>
    5b38:	e0bff817 	ldw	r2,-32(fp)
    5b3c:	10bfc00c 	andi	r2,r2,65280
    5b40:	1004d23a 	srli	r2,r2,8
    5b44:	e0bfff15 	stw	r2,-4(fp)
    5b48:	00000306 	br	5b58 <alt_up_audio_read_fifo+0x64>
    5b4c:	e0bff817 	ldw	r2,-32(fp)
    5b50:	10803fcc 	andi	r2,r2,255
    5b54:	e0bfff15 	stw	r2,-4(fp)
    5b58:	e0bfff17 	ldw	r2,-4(fp)
    5b5c:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    5b60:	e0bff817 	ldw	r2,-32(fp)
    5b64:	1005003a 	cmpeq	r2,r2,zero
    5b68:	10001e1e 	bne	r2,zero,5be4 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    5b6c:	e0bff717 	ldw	r2,-36(fp)
    5b70:	1085883a 	add	r2,r2,r2
    5b74:	1085883a 	add	r2,r2,r2
    5b78:	1007883a 	mov	r3,r2
    5b7c:	e0bffa17 	ldw	r2,-24(fp)
    5b80:	1887883a 	add	r3,r3,r2
    5b84:	e0fffe15 	stw	r3,-8(fp)
    5b88:	e0bffc17 	ldw	r2,-16(fp)
    5b8c:	1004c03a 	cmpne	r2,r2,zero
    5b90:	1000061e 	bne	r2,zero,5bac <alt_up_audio_read_fifo+0xb8>
    5b94:	e0bff917 	ldw	r2,-28(fp)
    5b98:	10800a17 	ldw	r2,40(r2)
    5b9c:	10800204 	addi	r2,r2,8
    5ba0:	10800037 	ldwio	r2,0(r2)
    5ba4:	e0bffd15 	stw	r2,-12(fp)
    5ba8:	00000506 	br	5bc0 <alt_up_audio_read_fifo+0xcc>
    5bac:	e0bff917 	ldw	r2,-28(fp)
    5bb0:	10800a17 	ldw	r2,40(r2)
    5bb4:	10800304 	addi	r2,r2,12
    5bb8:	10800037 	ldwio	r2,0(r2)
    5bbc:	e0bffd15 	stw	r2,-12(fp)
    5bc0:	e0fffd17 	ldw	r3,-12(fp)
    5bc4:	e0bffe17 	ldw	r2,-8(fp)
    5bc8:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    5bcc:	e0bff717 	ldw	r2,-36(fp)
    5bd0:	10800044 	addi	r2,r2,1
    5bd4:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    5bd8:	e0fff717 	ldw	r3,-36(fp)
    5bdc:	e0bffb17 	ldw	r2,-20(fp)
    5be0:	18bfcd16 	blt	r3,r2,5b18 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    5be4:	e0bff717 	ldw	r2,-36(fp)
}
    5be8:	e037883a 	mov	sp,fp
    5bec:	df000017 	ldw	fp,0(sp)
    5bf0:	dec00104 	addi	sp,sp,4
    5bf4:	f800283a 	ret

00005bf8 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    5bf8:	defff804 	addi	sp,sp,-32
    5bfc:	df000715 	stw	fp,28(sp)
    5c00:	df000704 	addi	fp,sp,28
    5c04:	e13ffb15 	stw	r4,-20(fp)
    5c08:	e17ffc15 	stw	r5,-16(fp)
    5c0c:	e1bffd15 	stw	r6,-12(fp)
    5c10:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    5c14:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    5c18:	00003a06 	br	5d04 <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    5c1c:	e0bffb17 	ldw	r2,-20(fp)
    5c20:	10800a17 	ldw	r2,40(r2)
    5c24:	10800104 	addi	r2,r2,4
    5c28:	10800037 	ldwio	r2,0(r2)
    5c2c:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    5c30:	e0bffe17 	ldw	r2,-8(fp)
    5c34:	1004c03a 	cmpne	r2,r2,zero
    5c38:	1000051e 	bne	r2,zero,5c50 <alt_up_audio_write_fifo+0x58>
    5c3c:	e0bffa17 	ldw	r2,-24(fp)
    5c40:	10bfc02c 	andhi	r2,r2,65280
    5c44:	1004d63a 	srli	r2,r2,24
    5c48:	e0bfff15 	stw	r2,-4(fp)
    5c4c:	00000406 	br	5c60 <alt_up_audio_write_fifo+0x68>
    5c50:	e0bffa17 	ldw	r2,-24(fp)
    5c54:	10803fec 	andhi	r2,r2,255
    5c58:	1004d43a 	srli	r2,r2,16
    5c5c:	e0bfff15 	stw	r2,-4(fp)
    5c60:	e0bfff17 	ldw	r2,-4(fp)
    5c64:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    5c68:	e0bffa17 	ldw	r2,-24(fp)
    5c6c:	1005003a 	cmpeq	r2,r2,zero
    5c70:	1000271e 	bne	r2,zero,5d10 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    5c74:	e0bffe17 	ldw	r2,-8(fp)
    5c78:	1004c03a 	cmpne	r2,r2,zero
    5c7c:	1000111e 	bne	r2,zero,5cc4 <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    5c80:	e0bffb17 	ldw	r2,-20(fp)
    5c84:	10800a17 	ldw	r2,40(r2)
    5c88:	11000204 	addi	r4,r2,8
    5c8c:	e0bff917 	ldw	r2,-28(fp)
    5c90:	1085883a 	add	r2,r2,r2
    5c94:	1085883a 	add	r2,r2,r2
    5c98:	1007883a 	mov	r3,r2
    5c9c:	e0bffc17 	ldw	r2,-16(fp)
    5ca0:	1885883a 	add	r2,r3,r2
    5ca4:	10800017 	ldw	r2,0(r2)
    5ca8:	1007883a 	mov	r3,r2
    5cac:	e0bff917 	ldw	r2,-28(fp)
    5cb0:	10800044 	addi	r2,r2,1
    5cb4:	e0bff915 	stw	r2,-28(fp)
    5cb8:	2005883a 	mov	r2,r4
    5cbc:	10c00035 	stwio	r3,0(r2)
    5cc0:	00001006 	br	5d04 <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    5cc4:	e0bffb17 	ldw	r2,-20(fp)
    5cc8:	10800a17 	ldw	r2,40(r2)
    5ccc:	11000304 	addi	r4,r2,12
    5cd0:	e0bff917 	ldw	r2,-28(fp)
    5cd4:	1085883a 	add	r2,r2,r2
    5cd8:	1085883a 	add	r2,r2,r2
    5cdc:	1007883a 	mov	r3,r2
    5ce0:	e0bffc17 	ldw	r2,-16(fp)
    5ce4:	1885883a 	add	r2,r3,r2
    5ce8:	10800017 	ldw	r2,0(r2)
    5cec:	1007883a 	mov	r3,r2
    5cf0:	e0bff917 	ldw	r2,-28(fp)
    5cf4:	10800044 	addi	r2,r2,1
    5cf8:	e0bff915 	stw	r2,-28(fp)
    5cfc:	2005883a 	mov	r2,r4
    5d00:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    5d04:	e0fff917 	ldw	r3,-28(fp)
    5d08:	e0bffd17 	ldw	r2,-12(fp)
    5d0c:	18bfc316 	blt	r3,r2,5c1c <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    5d10:	e0bff917 	ldw	r2,-28(fp)
}
    5d14:	e037883a 	mov	sp,fp
    5d18:	df000017 	ldw	fp,0(sp)
    5d1c:	dec00104 	addi	sp,sp,4
    5d20:	f800283a 	ret

00005d24 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    5d24:	defffc04 	addi	sp,sp,-16
    5d28:	df000315 	stw	fp,12(sp)
    5d2c:	df000304 	addi	fp,sp,12
    5d30:	e13ffd15 	stw	r4,-12(fp)
    5d34:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    5d38:	e0bffe17 	ldw	r2,-8(fp)
    5d3c:	1004c03a 	cmpne	r2,r2,zero
    5d40:	1000061e 	bne	r2,zero,5d5c <alt_up_audio_read_fifo_head+0x38>
    5d44:	e0bffd17 	ldw	r2,-12(fp)
    5d48:	10800a17 	ldw	r2,40(r2)
    5d4c:	10800204 	addi	r2,r2,8
    5d50:	10800037 	ldwio	r2,0(r2)
    5d54:	e0bfff15 	stw	r2,-4(fp)
    5d58:	00000506 	br	5d70 <alt_up_audio_read_fifo_head+0x4c>
    5d5c:	e0bffd17 	ldw	r2,-12(fp)
    5d60:	10800a17 	ldw	r2,40(r2)
    5d64:	10800304 	addi	r2,r2,12
    5d68:	10800037 	ldwio	r2,0(r2)
    5d6c:	e0bfff15 	stw	r2,-4(fp)
    5d70:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    5d74:	e037883a 	mov	sp,fp
    5d78:	df000017 	ldw	fp,0(sp)
    5d7c:	dec00104 	addi	sp,sp,4
    5d80:	f800283a 	ret

00005d84 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    5d84:	defffc04 	addi	sp,sp,-16
    5d88:	df000315 	stw	fp,12(sp)
    5d8c:	df000304 	addi	fp,sp,12
    5d90:	e13ffd15 	stw	r4,-12(fp)
    5d94:	e17ffe15 	stw	r5,-8(fp)
    5d98:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    5d9c:	e0bfff17 	ldw	r2,-4(fp)
    5da0:	1004c03a 	cmpne	r2,r2,zero
    5da4:	1000061e 	bne	r2,zero,5dc0 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    5da8:	e0bffd17 	ldw	r2,-12(fp)
    5dac:	10800a17 	ldw	r2,40(r2)
    5db0:	10800204 	addi	r2,r2,8
    5db4:	e0fffe17 	ldw	r3,-8(fp)
    5db8:	10c00035 	stwio	r3,0(r2)
    5dbc:	00000506 	br	5dd4 <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    5dc0:	e0bffd17 	ldw	r2,-12(fp)
    5dc4:	10800a17 	ldw	r2,40(r2)
    5dc8:	10800304 	addi	r2,r2,12
    5dcc:	e0fffe17 	ldw	r3,-8(fp)
    5dd0:	10c00035 	stwio	r3,0(r2)
}
    5dd4:	e037883a 	mov	sp,fp
    5dd8:	df000017 	ldw	fp,0(sp)
    5ddc:	dec00104 	addi	sp,sp,4
    5de0:	f800283a 	ret

00005de4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    5de4:	defffc04 	addi	sp,sp,-16
    5de8:	df000315 	stw	fp,12(sp)
    5dec:	df000304 	addi	fp,sp,12
    5df0:	e13ffe15 	stw	r4,-8(fp)
    5df4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    5df8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    5dfc:	e0bfff17 	ldw	r2,-4(fp)
    5e00:	1004c03a 	cmpne	r2,r2,zero
    5e04:	1000061e 	bne	r2,zero,5e20 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    5e08:	e0bffe17 	ldw	r2,-8(fp)
    5e0c:	1007883a 	mov	r3,r2
    5e10:	e0bffd03 	ldbu	r2,-12(fp)
    5e14:	10c4b03a 	or	r2,r2,r3
    5e18:	e0bffd05 	stb	r2,-12(fp)
    5e1c:	00000806 	br	5e40 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    5e20:	e0bffe17 	ldw	r2,-8(fp)
    5e24:	1007883a 	mov	r3,r2
    5e28:	e0bffd03 	ldbu	r2,-12(fp)
    5e2c:	10c4b03a 	or	r2,r2,r3
    5e30:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    5e34:	e0bffd03 	ldbu	r2,-12(fp)
    5e38:	10801014 	ori	r2,r2,64
    5e3c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    5e40:	e0fffd03 	ldbu	r3,-12(fp)
    5e44:	00bfe004 	movi	r2,-128
    5e48:	1884b03a 	or	r2,r3,r2
    5e4c:	10803fcc 	andi	r2,r2,255
}
    5e50:	e037883a 	mov	sp,fp
    5e54:	df000017 	ldw	fp,0(sp)
    5e58:	dec00104 	addi	sp,sp,4
    5e5c:	f800283a 	ret

00005e60 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    5e60:	defffd04 	addi	sp,sp,-12
    5e64:	df000215 	stw	fp,8(sp)
    5e68:	df000204 	addi	fp,sp,8
    5e6c:	e13ffe15 	stw	r4,-8(fp)
    5e70:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    5e74:	e0bffe17 	ldw	r2,-8(fp)
    5e78:	10800a17 	ldw	r2,40(r2)
    5e7c:	e0ffff03 	ldbu	r3,-4(fp)
    5e80:	10c00025 	stbio	r3,0(r2)
}
    5e84:	e037883a 	mov	sp,fp
    5e88:	df000017 	ldw	fp,0(sp)
    5e8c:	dec00104 	addi	sp,sp,4
    5e90:	f800283a 	ret

00005e94 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    5e94:	defffe04 	addi	sp,sp,-8
    5e98:	df000115 	stw	fp,4(sp)
    5e9c:	df000104 	addi	fp,sp,4
    5ea0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    5ea4:	e0bfff17 	ldw	r2,-4(fp)
    5ea8:	10800a17 	ldw	r2,40(r2)
    5eac:	1007883a 	mov	r3,r2
    5eb0:	00800044 	movi	r2,1
    5eb4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    5eb8:	e037883a 	mov	sp,fp
    5ebc:	df000017 	ldw	fp,0(sp)
    5ec0:	dec00104 	addi	sp,sp,4
    5ec4:	f800283a 	ret

00005ec8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    5ec8:	defffc04 	addi	sp,sp,-16
    5ecc:	dfc00315 	stw	ra,12(sp)
    5ed0:	df000215 	stw	fp,8(sp)
    5ed4:	df000204 	addi	fp,sp,8
    5ed8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    5edc:	e13fff17 	ldw	r4,-4(fp)
    5ee0:	01400074 	movhi	r5,1
    5ee4:	297b6904 	addi	r5,r5,-4700
    5ee8:	000924c0 	call	924c <alt_find_dev>
    5eec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    5ef0:	e0bffe17 	ldw	r2,-8(fp)
}
    5ef4:	e037883a 	mov	sp,fp
    5ef8:	dfc00117 	ldw	ra,4(sp)
    5efc:	df000017 	ldw	fp,0(sp)
    5f00:	dec00204 	addi	sp,sp,8
    5f04:	f800283a 	ret

00005f08 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    5f08:	defffb04 	addi	sp,sp,-20
    5f0c:	df000415 	stw	fp,16(sp)
    5f10:	df000404 	addi	fp,sp,16
    5f14:	e13ffd15 	stw	r4,-12(fp)
    5f18:	e17ffe15 	stw	r5,-8(fp)
    5f1c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    5f20:	e03ffc15 	stw	zero,-16(fp)
    5f24:	00000f06 	br	5f64 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    5f28:	e0bffd17 	ldw	r2,-12(fp)
    5f2c:	10800a17 	ldw	r2,40(r2)
    5f30:	11000044 	addi	r4,r2,1
    5f34:	e0fffc17 	ldw	r3,-16(fp)
    5f38:	e0bffe17 	ldw	r2,-8(fp)
    5f3c:	1885883a 	add	r2,r3,r2
    5f40:	10800003 	ldbu	r2,0(r2)
    5f44:	10c03fcc 	andi	r3,r2,255
    5f48:	18c0201c 	xori	r3,r3,128
    5f4c:	18ffe004 	addi	r3,r3,-128
    5f50:	2005883a 	mov	r2,r4
    5f54:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    5f58:	e0bffc17 	ldw	r2,-16(fp)
    5f5c:	10800044 	addi	r2,r2,1
    5f60:	e0bffc15 	stw	r2,-16(fp)
    5f64:	e0fffc17 	ldw	r3,-16(fp)
    5f68:	e0bfff17 	ldw	r2,-4(fp)
    5f6c:	18bfee36 	bltu	r3,r2,5f28 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    5f70:	e037883a 	mov	sp,fp
    5f74:	df000017 	ldw	fp,0(sp)
    5f78:	dec00104 	addi	sp,sp,4
    5f7c:	f800283a 	ret

00005f80 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    5f80:	defffd04 	addi	sp,sp,-12
    5f84:	df000215 	stw	fp,8(sp)
    5f88:	df000204 	addi	fp,sp,8
    5f8c:	e13ffe15 	stw	r4,-8(fp)
    5f90:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    5f94:	00000d06 	br	5fcc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    5f98:	e0bffe17 	ldw	r2,-8(fp)
    5f9c:	10800a17 	ldw	r2,40(r2)
    5fa0:	11000044 	addi	r4,r2,1
    5fa4:	e0bfff17 	ldw	r2,-4(fp)
    5fa8:	10800003 	ldbu	r2,0(r2)
    5fac:	10c03fcc 	andi	r3,r2,255
    5fb0:	18c0201c 	xori	r3,r3,128
    5fb4:	18ffe004 	addi	r3,r3,-128
    5fb8:	2005883a 	mov	r2,r4
    5fbc:	10c00025 	stbio	r3,0(r2)
		++ptr;
    5fc0:	e0bfff17 	ldw	r2,-4(fp)
    5fc4:	10800044 	addi	r2,r2,1
    5fc8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    5fcc:	e0bfff17 	ldw	r2,-4(fp)
    5fd0:	10800003 	ldbu	r2,0(r2)
    5fd4:	10803fcc 	andi	r2,r2,255
    5fd8:	1080201c 	xori	r2,r2,128
    5fdc:	10bfe004 	addi	r2,r2,-128
    5fe0:	1004c03a 	cmpne	r2,r2,zero
    5fe4:	103fec1e 	bne	r2,zero,5f98 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    5fe8:	e037883a 	mov	sp,fp
    5fec:	df000017 	ldw	fp,0(sp)
    5ff0:	dec00104 	addi	sp,sp,4
    5ff4:	f800283a 	ret

00005ff8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    5ff8:	defffb04 	addi	sp,sp,-20
    5ffc:	dfc00415 	stw	ra,16(sp)
    6000:	df000315 	stw	fp,12(sp)
    6004:	df000304 	addi	fp,sp,12
    6008:	e13ffd15 	stw	r4,-12(fp)
    600c:	e17ffe15 	stw	r5,-8(fp)
    6010:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    6014:	e0bffd17 	ldw	r2,-12(fp)
    6018:	10800017 	ldw	r2,0(r2)
    601c:	1009883a 	mov	r4,r2
    6020:	e1bfff17 	ldw	r6,-4(fp)
    6024:	e17ffe17 	ldw	r5,-8(fp)
    6028:	0005f080 	call	5f08 <alt_up_character_lcd_write>
	return 0;
    602c:	0005883a 	mov	r2,zero
}
    6030:	e037883a 	mov	sp,fp
    6034:	dfc00117 	ldw	ra,4(sp)
    6038:	df000017 	ldw	fp,0(sp)
    603c:	dec00204 	addi	sp,sp,8
    6040:	f800283a 	ret

00006044 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    6044:	defff904 	addi	sp,sp,-28
    6048:	dfc00615 	stw	ra,24(sp)
    604c:	df000515 	stw	fp,20(sp)
    6050:	df000504 	addi	fp,sp,20
    6054:	e13ffc15 	stw	r4,-16(fp)
    6058:	e17ffd15 	stw	r5,-12(fp)
    605c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    6060:	e0bffd17 	ldw	r2,-12(fp)
    6064:	10800a28 	cmpgeui	r2,r2,40
    6068:	1000031e 	bne	r2,zero,6078 <alt_up_character_lcd_set_cursor_pos+0x34>
    606c:	e0bffe17 	ldw	r2,-8(fp)
    6070:	108000b0 	cmpltui	r2,r2,2
    6074:	1000031e 	bne	r2,zero,6084 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    6078:	00bfffc4 	movi	r2,-1
    607c:	e0bfff15 	stw	r2,-4(fp)
    6080:	00000806 	br	60a4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    6084:	e13ffd17 	ldw	r4,-12(fp)
    6088:	e17ffe17 	ldw	r5,-8(fp)
    608c:	0005de40 	call	5de4 <get_DDRAM_addr>
    6090:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    6094:	e17ffb03 	ldbu	r5,-20(fp)
    6098:	e13ffc17 	ldw	r4,-16(fp)
    609c:	0005e600 	call	5e60 <alt_up_character_lcd_send_cmd>
	return 0;
    60a0:	e03fff15 	stw	zero,-4(fp)
    60a4:	e0bfff17 	ldw	r2,-4(fp)
}
    60a8:	e037883a 	mov	sp,fp
    60ac:	dfc00117 	ldw	ra,4(sp)
    60b0:	df000017 	ldw	fp,0(sp)
    60b4:	dec00204 	addi	sp,sp,8
    60b8:	f800283a 	ret

000060bc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    60bc:	defff904 	addi	sp,sp,-28
    60c0:	dfc00615 	stw	ra,24(sp)
    60c4:	df000515 	stw	fp,20(sp)
    60c8:	df000504 	addi	fp,sp,20
    60cc:	e13ffc15 	stw	r4,-16(fp)
    60d0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    60d4:	e0bffd17 	ldw	r2,-12(fp)
    60d8:	1005003a 	cmpeq	r2,r2,zero
    60dc:	10001e1e 	bne	r2,zero,6158 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    60e0:	e0bffd17 	ldw	r2,-12(fp)
    60e4:	10800050 	cmplti	r2,r2,1
    60e8:	1000031e 	bne	r2,zero,60f8 <alt_up_character_lcd_shift_cursor+0x3c>
    60ec:	00800504 	movi	r2,20
    60f0:	e0bfff05 	stb	r2,-4(fp)
    60f4:	00000206 	br	6100 <alt_up_character_lcd_shift_cursor+0x44>
    60f8:	00c00404 	movi	r3,16
    60fc:	e0ffff05 	stb	r3,-4(fp)
    6100:	e0bfff03 	ldbu	r2,-4(fp)
    6104:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    6108:	e0fffd17 	ldw	r3,-12(fp)
    610c:	e0fffe15 	stw	r3,-8(fp)
    6110:	e0fffe17 	ldw	r3,-8(fp)
    6114:	1804403a 	cmpge	r2,r3,zero
    6118:	1000031e 	bne	r2,zero,6128 <alt_up_character_lcd_shift_cursor+0x6c>
    611c:	e0bffe17 	ldw	r2,-8(fp)
    6120:	0085c83a 	sub	r2,zero,r2
    6124:	e0bffe15 	stw	r2,-8(fp)
    6128:	e0fffe17 	ldw	r3,-8(fp)
    612c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    6130:	00000306 	br	6140 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    6134:	e17ffb43 	ldbu	r5,-19(fp)
    6138:	e13ffc17 	ldw	r4,-16(fp)
    613c:	0005e600 	call	5e60 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    6140:	e0bffb03 	ldbu	r2,-20(fp)
    6144:	10bfffc4 	addi	r2,r2,-1
    6148:	e0bffb05 	stb	r2,-20(fp)
    614c:	e0bffb03 	ldbu	r2,-20(fp)
    6150:	10803fd8 	cmpnei	r2,r2,255
    6154:	103ff71e 	bne	r2,zero,6134 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    6158:	e037883a 	mov	sp,fp
    615c:	dfc00117 	ldw	ra,4(sp)
    6160:	df000017 	ldw	fp,0(sp)
    6164:	dec00204 	addi	sp,sp,8
    6168:	f800283a 	ret

0000616c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    616c:	defff904 	addi	sp,sp,-28
    6170:	dfc00615 	stw	ra,24(sp)
    6174:	df000515 	stw	fp,20(sp)
    6178:	df000504 	addi	fp,sp,20
    617c:	e13ffc15 	stw	r4,-16(fp)
    6180:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    6184:	e0bffd17 	ldw	r2,-12(fp)
    6188:	1005003a 	cmpeq	r2,r2,zero
    618c:	10001e1e 	bne	r2,zero,6208 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    6190:	e0bffd17 	ldw	r2,-12(fp)
    6194:	10800050 	cmplti	r2,r2,1
    6198:	1000031e 	bne	r2,zero,61a8 <alt_up_character_lcd_shift_display+0x3c>
    619c:	00800704 	movi	r2,28
    61a0:	e0bfff05 	stb	r2,-4(fp)
    61a4:	00000206 	br	61b0 <alt_up_character_lcd_shift_display+0x44>
    61a8:	00c00604 	movi	r3,24
    61ac:	e0ffff05 	stb	r3,-4(fp)
    61b0:	e0bfff03 	ldbu	r2,-4(fp)
    61b4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    61b8:	e0fffd17 	ldw	r3,-12(fp)
    61bc:	e0fffe15 	stw	r3,-8(fp)
    61c0:	e0fffe17 	ldw	r3,-8(fp)
    61c4:	1804403a 	cmpge	r2,r3,zero
    61c8:	1000031e 	bne	r2,zero,61d8 <alt_up_character_lcd_shift_display+0x6c>
    61cc:	e0bffe17 	ldw	r2,-8(fp)
    61d0:	0085c83a 	sub	r2,zero,r2
    61d4:	e0bffe15 	stw	r2,-8(fp)
    61d8:	e0fffe17 	ldw	r3,-8(fp)
    61dc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    61e0:	00000306 	br	61f0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    61e4:	e17ffb43 	ldbu	r5,-19(fp)
    61e8:	e13ffc17 	ldw	r4,-16(fp)
    61ec:	0005e600 	call	5e60 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    61f0:	e0bffb03 	ldbu	r2,-20(fp)
    61f4:	10bfffc4 	addi	r2,r2,-1
    61f8:	e0bffb05 	stb	r2,-20(fp)
    61fc:	e0bffb03 	ldbu	r2,-20(fp)
    6200:	10803fd8 	cmpnei	r2,r2,255
    6204:	103ff71e 	bne	r2,zero,61e4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    6208:	e037883a 	mov	sp,fp
    620c:	dfc00117 	ldw	ra,4(sp)
    6210:	df000017 	ldw	fp,0(sp)
    6214:	dec00204 	addi	sp,sp,8
    6218:	f800283a 	ret

0000621c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    621c:	defff904 	addi	sp,sp,-28
    6220:	dfc00615 	stw	ra,24(sp)
    6224:	df000515 	stw	fp,20(sp)
    6228:	df000504 	addi	fp,sp,20
    622c:	e13ffc15 	stw	r4,-16(fp)
    6230:	e17ffd15 	stw	r5,-12(fp)
    6234:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    6238:	e0bffd17 	ldw	r2,-12(fp)
    623c:	10800a28 	cmpgeui	r2,r2,40
    6240:	1000031e 	bne	r2,zero,6250 <alt_up_character_lcd_erase_pos+0x34>
    6244:	e0bffe17 	ldw	r2,-8(fp)
    6248:	108000b0 	cmpltui	r2,r2,2
    624c:	1000031e 	bne	r2,zero,625c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    6250:	00bfffc4 	movi	r2,-1
    6254:	e0bfff15 	stw	r2,-4(fp)
    6258:	00000e06 	br	6294 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    625c:	e13ffd17 	ldw	r4,-12(fp)
    6260:	e17ffe17 	ldw	r5,-8(fp)
    6264:	0005de40 	call	5de4 <get_DDRAM_addr>
    6268:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    626c:	e17ffb03 	ldbu	r5,-20(fp)
    6270:	e13ffc17 	ldw	r4,-16(fp)
    6274:	0005e600 	call	5e60 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    6278:	e0bffc17 	ldw	r2,-16(fp)
    627c:	10800a17 	ldw	r2,40(r2)
    6280:	10800044 	addi	r2,r2,1
    6284:	1007883a 	mov	r3,r2
    6288:	00800084 	movi	r2,2
    628c:	18800025 	stbio	r2,0(r3)
	return 0;
    6290:	e03fff15 	stw	zero,-4(fp)
    6294:	e0bfff17 	ldw	r2,-4(fp)
}
    6298:	e037883a 	mov	sp,fp
    629c:	dfc00117 	ldw	ra,4(sp)
    62a0:	df000017 	ldw	fp,0(sp)
    62a4:	dec00204 	addi	sp,sp,8
    62a8:	f800283a 	ret

000062ac <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    62ac:	defffd04 	addi	sp,sp,-12
    62b0:	dfc00215 	stw	ra,8(sp)
    62b4:	df000115 	stw	fp,4(sp)
    62b8:	df000104 	addi	fp,sp,4
    62bc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    62c0:	e13fff17 	ldw	r4,-4(fp)
    62c4:	01400304 	movi	r5,12
    62c8:	0005e600 	call	5e60 <alt_up_character_lcd_send_cmd>
}
    62cc:	e037883a 	mov	sp,fp
    62d0:	dfc00117 	ldw	ra,4(sp)
    62d4:	df000017 	ldw	fp,0(sp)
    62d8:	dec00204 	addi	sp,sp,8
    62dc:	f800283a 	ret

000062e0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    62e0:	defffd04 	addi	sp,sp,-12
    62e4:	dfc00215 	stw	ra,8(sp)
    62e8:	df000115 	stw	fp,4(sp)
    62ec:	df000104 	addi	fp,sp,4
    62f0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    62f4:	e13fff17 	ldw	r4,-4(fp)
    62f8:	014003c4 	movi	r5,15
    62fc:	0005e600 	call	5e60 <alt_up_character_lcd_send_cmd>
}
    6300:	e037883a 	mov	sp,fp
    6304:	dfc00117 	ldw	ra,4(sp)
    6308:	df000017 	ldw	fp,0(sp)
    630c:	dec00204 	addi	sp,sp,8
    6310:	f800283a 	ret

00006314 <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    6314:	defffb04 	addi	sp,sp,-20
    6318:	dfc00415 	stw	ra,16(sp)
    631c:	df000315 	stw	fp,12(sp)
    6320:	df000304 	addi	fp,sp,12
    6324:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    6328:	e0bfff17 	ldw	r2,-4(fp)
    632c:	10800a17 	ldw	r2,40(r2)
    6330:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    6334:	e13ffe17 	ldw	r4,-8(fp)
    6338:	014007c4 	movi	r5,31
    633c:	000d883a 	mov	r6,zero
    6340:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    6344:	e13ffe17 	ldw	r4,-8(fp)
    6348:	000b883a 	mov	r5,zero
    634c:	01800044 	movi	r6,1
    6350:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>
	usleep(10);
    6354:	01000284 	movi	r4,10
    6358:	00099140 	call	9914 <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    635c:	e13ffe17 	ldw	r4,-8(fp)
    6360:	000b883a 	mov	r5,zero
    6364:	000d883a 	mov	r6,zero
    6368:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>
	usleep(1);
    636c:	01000044 	movi	r4,1
    6370:	00099140 	call	9914 <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    6374:	e03ffd15 	stw	zero,-12(fp)
    6378:	00000e06 	br	63b4 <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    637c:	e0bffd17 	ldw	r2,-12(fp)
    6380:	10800404 	addi	r2,r2,16
    6384:	100b883a 	mov	r5,r2
    6388:	e0fffd17 	ldw	r3,-12(fp)
    638c:	e0bfff17 	ldw	r2,-4(fp)
    6390:	1885883a 	add	r2,r3,r2
    6394:	10800d04 	addi	r2,r2,52
    6398:	10800003 	ldbu	r2,0(r2)
    639c:	11803fcc 	andi	r6,r2,255
    63a0:	e13ffe17 	ldw	r4,-8(fp)
    63a4:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    63a8:	e0bffd17 	ldw	r2,-12(fp)
    63ac:	10800044 	addi	r2,r2,1
    63b0:	e0bffd15 	stw	r2,-12(fp)
    63b4:	e0bffd17 	ldw	r2,-12(fp)
    63b8:	10800190 	cmplti	r2,r2,6
    63bc:	103fef1e 	bne	r2,zero,637c <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    63c0:	e13ffe17 	ldw	r4,-8(fp)
    63c4:	01403f84 	movi	r5,254
    63c8:	01800fc4 	movi	r6,63
    63cc:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    63d0:	e13ffe17 	ldw	r4,-8(fp)
    63d4:	01400044 	movi	r5,1
    63d8:	01800b04 	movi	r6,44
    63dc:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    63e0:	e13ffe17 	ldw	r4,-8(fp)
    63e4:	01403fc4 	movi	r5,255
    63e8:	01802004 	movi	r6,128
    63ec:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    63f0:	e13ffe17 	ldw	r4,-8(fp)
    63f4:	01400144 	movi	r5,5
    63f8:	01800e44 	movi	r6,57
    63fc:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    6400:	e13ffe17 	ldw	r4,-8(fp)
    6404:	01400c04 	movi	r5,48
    6408:	018000c4 	movi	r6,3
    640c:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	return;
}
    6410:	e037883a 	mov	sp,fp
    6414:	dfc00117 	ldw	ra,4(sp)
    6418:	df000017 	ldw	fp,0(sp)
    641c:	dec00204 	addi	sp,sp,8
    6420:	f800283a 	ret

00006424 <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    6424:	defffc04 	addi	sp,sp,-16
    6428:	dfc00315 	stw	ra,12(sp)
    642c:	df000215 	stw	fp,8(sp)
    6430:	df000204 	addi	fp,sp,8
    6434:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    6438:	e13fff17 	ldw	r4,-4(fp)
    643c:	01400074 	movhi	r5,1
    6440:	297b6904 	addi	r5,r5,-4700
    6444:	000924c0 	call	924c <alt_find_dev>
    6448:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    644c:	e0bffe17 	ldw	r2,-8(fp)
}
    6450:	e037883a 	mov	sp,fp
    6454:	dfc00117 	ldw	ra,4(sp)
    6458:	df000017 	ldw	fp,0(sp)
    645c:	dec00204 	addi	sp,sp,8
    6460:	f800283a 	ret

00006464 <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    6464:	defffd04 	addi	sp,sp,-12
    6468:	df000215 	stw	fp,8(sp)
    646c:	df000204 	addi	fp,sp,8
    6470:	e13ffe15 	stw	r4,-8(fp)
    6474:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    6478:	e0bffe17 	ldw	r2,-8(fp)
    647c:	e0ffff17 	ldw	r3,-4(fp)
    6480:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    6484:	e0bffe17 	ldw	r2,-8(fp)
    6488:	10800104 	addi	r2,r2,4
    648c:	10800037 	ldwio	r2,0(r2)
}
    6490:	e037883a 	mov	sp,fp
    6494:	df000017 	ldw	fp,0(sp)
    6498:	dec00104 	addi	sp,sp,4
    649c:	f800283a 	ret

000064a0 <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    64a0:	defffc04 	addi	sp,sp,-16
    64a4:	df000315 	stw	fp,12(sp)
    64a8:	df000304 	addi	fp,sp,12
    64ac:	e13ffd15 	stw	r4,-12(fp)
    64b0:	e17ffe15 	stw	r5,-8(fp)
    64b4:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    64b8:	e0bffd17 	ldw	r2,-12(fp)
    64bc:	e0fffe17 	ldw	r3,-8(fp)
    64c0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    64c4:	e0bffd17 	ldw	r2,-12(fp)
    64c8:	10800104 	addi	r2,r2,4
    64cc:	e0ffff17 	ldw	r3,-4(fp)
    64d0:	10c00035 	stwio	r3,0(r2)
}
    64d4:	e037883a 	mov	sp,fp
    64d8:	df000017 	ldw	fp,0(sp)
    64dc:	dec00104 	addi	sp,sp,4
    64e0:	f800283a 	ret

000064e4 <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    64e4:	defffa04 	addi	sp,sp,-24
    64e8:	dfc00515 	stw	ra,20(sp)
    64ec:	df000415 	stw	fp,16(sp)
    64f0:	df000404 	addi	fp,sp,16
    64f4:	e13ffe15 	stw	r4,-8(fp)
    64f8:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    64fc:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    6500:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    6504:	e0bfff17 	ldw	r2,-4(fp)
    6508:	11801014 	ori	r6,r2,64
    650c:	e13ffe17 	ldw	r4,-8(fp)
    6510:	01400304 	movi	r5,12
    6514:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    6518:	e13ffe17 	ldw	r4,-8(fp)
    651c:	014002c4 	movi	r5,11
    6520:	01800304 	movi	r6,12
    6524:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    6528:	01000044 	movi	r4,1
    652c:	00099140 	call	9914 <usleep>
		timeout++;
    6530:	e0bffc17 	ldw	r2,-16(fp)
    6534:	10800044 	addi	r2,r2,1
    6538:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    653c:	e0bffc17 	ldw	r2,-16(fp)
    6540:	10800ca8 	cmpgeui	r2,r2,50
    6544:	1000071e 	bne	r2,zero,6564 <alt_up_ethernet_phy_reg_read+0x80>
    6548:	e13ffe17 	ldw	r4,-8(fp)
    654c:	014002c4 	movi	r5,11
    6550:	00064640 	call	6464 <alt_up_ethernet_reg_read>
    6554:	1080004c 	andi	r2,r2,1
    6558:	10803fcc 	andi	r2,r2,255
    655c:	1004c03a 	cmpne	r2,r2,zero
    6560:	103ff11e 	bne	r2,zero,6528 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    6564:	01000044 	movi	r4,1
    6568:	00099140 	call	9914 <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    656c:	e13ffe17 	ldw	r4,-8(fp)
    6570:	014002c4 	movi	r5,11
    6574:	01800204 	movi	r6,8
    6578:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    657c:	e13ffe17 	ldw	r4,-8(fp)
    6580:	01400384 	movi	r5,14
    6584:	00064640 	call	6464 <alt_up_ethernet_reg_read>
    6588:	1004923a 	slli	r2,r2,8
    658c:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    6590:	e13ffe17 	ldw	r4,-8(fp)
    6594:	01400344 	movi	r5,13
    6598:	00064640 	call	6464 <alt_up_ethernet_reg_read>
    659c:	1007883a 	mov	r3,r2
    65a0:	e0bffd17 	ldw	r2,-12(fp)
    65a4:	10c4b03a 	or	r2,r2,r3
    65a8:	e0bffd15 	stw	r2,-12(fp)

	return result;
    65ac:	e0bffd17 	ldw	r2,-12(fp)
}
    65b0:	e037883a 	mov	sp,fp
    65b4:	dfc00117 	ldw	ra,4(sp)
    65b8:	df000017 	ldw	fp,0(sp)
    65bc:	dec00204 	addi	sp,sp,8
    65c0:	f800283a 	ret

000065c4 <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    65c4:	defffa04 	addi	sp,sp,-24
    65c8:	dfc00515 	stw	ra,20(sp)
    65cc:	df000415 	stw	fp,16(sp)
    65d0:	df000404 	addi	fp,sp,16
    65d4:	e13ffd15 	stw	r4,-12(fp)
    65d8:	e17ffe15 	stw	r5,-8(fp)
    65dc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    65e0:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    65e4:	e0bffe17 	ldw	r2,-8(fp)
    65e8:	11801014 	ori	r6,r2,64
    65ec:	e13ffd17 	ldw	r4,-12(fp)
    65f0:	01400304 	movi	r5,12
    65f4:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    65f8:	e0bfff17 	ldw	r2,-4(fp)
    65fc:	1004d23a 	srli	r2,r2,8
    6600:	11803fcc 	andi	r6,r2,255
    6604:	e13ffd17 	ldw	r4,-12(fp)
    6608:	01400384 	movi	r5,14
    660c:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    6610:	e0bfff17 	ldw	r2,-4(fp)
    6614:	11803fcc 	andi	r6,r2,255
    6618:	e13ffd17 	ldw	r4,-12(fp)
    661c:	01400344 	movi	r5,13
    6620:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    6624:	e13ffd17 	ldw	r4,-12(fp)
    6628:	014002c4 	movi	r5,11
    662c:	01800284 	movi	r6,10
    6630:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    6634:	01000044 	movi	r4,1
    6638:	00099140 	call	9914 <usleep>
		timeout++;
    663c:	e0bffc17 	ldw	r2,-16(fp)
    6640:	10800044 	addi	r2,r2,1
    6644:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    6648:	e0bffc17 	ldw	r2,-16(fp)
    664c:	10800ca8 	cmpgeui	r2,r2,50
    6650:	1000071e 	bne	r2,zero,6670 <alt_up_ethernet_phy_reg_write+0xac>
    6654:	e13ffd17 	ldw	r4,-12(fp)
    6658:	014002c4 	movi	r5,11
    665c:	00064640 	call	6464 <alt_up_ethernet_reg_read>
    6660:	1080004c 	andi	r2,r2,1
    6664:	10803fcc 	andi	r2,r2,255
    6668:	1004c03a 	cmpne	r2,r2,zero
    666c:	103ff11e 	bne	r2,zero,6634 <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    6670:	01000044 	movi	r4,1
    6674:	00099140 	call	9914 <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    6678:	e13ffd17 	ldw	r4,-12(fp)
    667c:	014002c4 	movi	r5,11
    6680:	01800204 	movi	r6,8
    6684:	00064a00 	call	64a0 <alt_up_ethernet_reg_write>
}
    6688:	e037883a 	mov	sp,fp
    668c:	dfc00117 	ldw	ra,4(sp)
    6690:	df000017 	ldw	fp,0(sp)
    6694:	dec00204 	addi	sp,sp,8
    6698:	f800283a 	ret

0000669c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    669c:	defffd04 	addi	sp,sp,-12
    66a0:	df000215 	stw	fp,8(sp)
    66a4:	df000204 	addi	fp,sp,8
    66a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    66ac:	e0bfff17 	ldw	r2,-4(fp)
    66b0:	10800a17 	ldw	r2,40(r2)
    66b4:	10800104 	addi	r2,r2,4
    66b8:	10800037 	ldwio	r2,0(r2)
    66bc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    66c0:	e0bffe17 	ldw	r2,-8(fp)
    66c4:	10800054 	ori	r2,r2,1
    66c8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    66cc:	e0bfff17 	ldw	r2,-4(fp)
    66d0:	10800a17 	ldw	r2,40(r2)
    66d4:	10800104 	addi	r2,r2,4
    66d8:	e0fffe17 	ldw	r3,-8(fp)
    66dc:	10c00035 	stwio	r3,0(r2)
}
    66e0:	e037883a 	mov	sp,fp
    66e4:	df000017 	ldw	fp,0(sp)
    66e8:	dec00104 	addi	sp,sp,4
    66ec:	f800283a 	ret

000066f0 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    66f0:	defffd04 	addi	sp,sp,-12
    66f4:	df000215 	stw	fp,8(sp)
    66f8:	df000204 	addi	fp,sp,8
    66fc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    6700:	e0bfff17 	ldw	r2,-4(fp)
    6704:	10800a17 	ldw	r2,40(r2)
    6708:	10800104 	addi	r2,r2,4
    670c:	10800037 	ldwio	r2,0(r2)
    6710:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    6714:	e0fffe17 	ldw	r3,-8(fp)
    6718:	00bfff84 	movi	r2,-2
    671c:	1884703a 	and	r2,r3,r2
    6720:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    6724:	e0bfff17 	ldw	r2,-4(fp)
    6728:	10800a17 	ldw	r2,40(r2)
    672c:	10800104 	addi	r2,r2,4
    6730:	e0fffe17 	ldw	r3,-8(fp)
    6734:	10c00035 	stwio	r3,0(r2)
}
    6738:	e037883a 	mov	sp,fp
    673c:	df000017 	ldw	fp,0(sp)
    6740:	dec00104 	addi	sp,sp,4
    6744:	f800283a 	ret

00006748 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    6748:	defffd04 	addi	sp,sp,-12
    674c:	df000215 	stw	fp,8(sp)
    6750:	df000204 	addi	fp,sp,8
    6754:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    6758:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    675c:	e0bfff17 	ldw	r2,-4(fp)
    6760:	10800a17 	ldw	r2,40(r2)
    6764:	10800084 	addi	r2,r2,2
    6768:	1080002b 	ldhuio	r2,0(r2)
    676c:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    6770:	e0bffe0b 	ldhu	r2,-8(fp)
}
    6774:	e037883a 	mov	sp,fp
    6778:	df000017 	ldw	fp,0(sp)
    677c:	dec00104 	addi	sp,sp,4
    6780:	f800283a 	ret

00006784 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    6784:	defffd04 	addi	sp,sp,-12
    6788:	df000215 	stw	fp,8(sp)
    678c:	df000204 	addi	fp,sp,8
    6790:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    6794:	e0bfff17 	ldw	r2,-4(fp)
    6798:	10800a17 	ldw	r2,40(r2)
    679c:	10800104 	addi	r2,r2,4
    67a0:	10800037 	ldwio	r2,0(r2)
    67a4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    67a8:	e0bffe17 	ldw	r2,-8(fp)
    67ac:	10bfffec 	andhi	r2,r2,65535
    67b0:	1004d43a 	srli	r2,r2,16
}
    67b4:	e037883a 	mov	sp,fp
    67b8:	df000017 	ldw	fp,0(sp)
    67bc:	dec00104 	addi	sp,sp,4
    67c0:	f800283a 	ret

000067c4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    67c4:	defffc04 	addi	sp,sp,-16
    67c8:	df000315 	stw	fp,12(sp)
    67cc:	df000304 	addi	fp,sp,12
    67d0:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    67d4:	e0bffe17 	ldw	r2,-8(fp)
    67d8:	1080800c 	andi	r2,r2,512
    67dc:	1004d27a 	srli	r2,r2,9
    67e0:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    67e4:	e0bffd17 	ldw	r2,-12(fp)
    67e8:	1005003a 	cmpeq	r2,r2,zero
    67ec:	1000031e 	bne	r2,zero,67fc <alt_up_irda_check_parity+0x38>
    67f0:	00bfffc4 	movi	r2,-1
    67f4:	e0bfff15 	stw	r2,-4(fp)
    67f8:	00000106 	br	6800 <alt_up_irda_check_parity+0x3c>
    67fc:	e03fff15 	stw	zero,-4(fp)
    6800:	e0bfff17 	ldw	r2,-4(fp)
}
    6804:	e037883a 	mov	sp,fp
    6808:	df000017 	ldw	fp,0(sp)
    680c:	dec00104 	addi	sp,sp,4
    6810:	f800283a 	ret

00006814 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    6814:	defffc04 	addi	sp,sp,-16
    6818:	df000315 	stw	fp,12(sp)
    681c:	df000304 	addi	fp,sp,12
    6820:	e13ffe15 	stw	r4,-8(fp)
    6824:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    6828:	e0bffe17 	ldw	r2,-8(fp)
    682c:	10800a17 	ldw	r2,40(r2)
    6830:	10800037 	ldwio	r2,0(r2)
    6834:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    6838:	e0bffe17 	ldw	r2,-8(fp)
    683c:	10800a17 	ldw	r2,40(r2)
    6840:	e0ffff03 	ldbu	r3,-4(fp)
    6844:	10c00035 	stwio	r3,0(r2)
	return 0;
    6848:	0005883a 	mov	r2,zero
}
    684c:	e037883a 	mov	sp,fp
    6850:	df000017 	ldw	fp,0(sp)
    6854:	dec00104 	addi	sp,sp,4
    6858:	f800283a 	ret

0000685c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    685c:	defffa04 	addi	sp,sp,-24
    6860:	dfc00515 	stw	ra,20(sp)
    6864:	df000415 	stw	fp,16(sp)
    6868:	df000404 	addi	fp,sp,16
    686c:	e13ffd15 	stw	r4,-12(fp)
    6870:	e17ffe15 	stw	r5,-8(fp)
    6874:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    6878:	e0bffd17 	ldw	r2,-12(fp)
    687c:	10800a17 	ldw	r2,40(r2)
    6880:	10800037 	ldwio	r2,0(r2)
    6884:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    6888:	e0bffc17 	ldw	r2,-16(fp)
    688c:	1007883a 	mov	r3,r2
    6890:	e0bffe17 	ldw	r2,-8(fp)
    6894:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    6898:	e13ffc17 	ldw	r4,-16(fp)
    689c:	00067c40 	call	67c4 <alt_up_irda_check_parity>
    68a0:	1007883a 	mov	r3,r2
    68a4:	e0bfff17 	ldw	r2,-4(fp)
    68a8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    68ac:	e0bffc17 	ldw	r2,-16(fp)
    68b0:	10a0000c 	andi	r2,r2,32768
    68b4:	1004d3fa 	srli	r2,r2,15
    68b8:	10bfffc4 	addi	r2,r2,-1
}
    68bc:	e037883a 	mov	sp,fp
    68c0:	dfc00117 	ldw	ra,4(sp)
    68c4:	df000017 	ldw	fp,0(sp)
    68c8:	dec00204 	addi	sp,sp,8
    68cc:	f800283a 	ret

000068d0 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    68d0:	defff804 	addi	sp,sp,-32
    68d4:	dfc00715 	stw	ra,28(sp)
    68d8:	df000615 	stw	fp,24(sp)
    68dc:	df000604 	addi	fp,sp,24
    68e0:	e13ffd15 	stw	r4,-12(fp)
    68e4:	e17ffe15 	stw	r5,-8(fp)
    68e8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    68ec:	e0bffd17 	ldw	r2,-12(fp)
    68f0:	10800017 	ldw	r2,0(r2)
    68f4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    68f8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    68fc:	00000c06 	br	6930 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    6900:	e17ffe17 	ldw	r5,-8(fp)
    6904:	e0bffe17 	ldw	r2,-8(fp)
    6908:	10800044 	addi	r2,r2,1
    690c:	e0bffe15 	stw	r2,-8(fp)
    6910:	e1bffc04 	addi	r6,fp,-16
    6914:	e13ffb17 	ldw	r4,-20(fp)
    6918:	000685c0 	call	685c <alt_up_irda_read_data>
    691c:	1004c03a 	cmpne	r2,r2,zero
    6920:	1000091e 	bne	r2,zero,6948 <alt_up_irda_read_fd+0x78>
			count++;
    6924:	e0bffa17 	ldw	r2,-24(fp)
    6928:	10800044 	addi	r2,r2,1
    692c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    6930:	e0bfff17 	ldw	r2,-4(fp)
    6934:	10bfffc4 	addi	r2,r2,-1
    6938:	e0bfff15 	stw	r2,-4(fp)
    693c:	e0bfff17 	ldw	r2,-4(fp)
    6940:	10bfffd8 	cmpnei	r2,r2,-1
    6944:	103fee1e 	bne	r2,zero,6900 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    6948:	e0bffa17 	ldw	r2,-24(fp)
}
    694c:	e037883a 	mov	sp,fp
    6950:	dfc00117 	ldw	ra,4(sp)
    6954:	df000017 	ldw	fp,0(sp)
    6958:	dec00204 	addi	sp,sp,8
    695c:	f800283a 	ret

00006960 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    6960:	defff904 	addi	sp,sp,-28
    6964:	dfc00615 	stw	ra,24(sp)
    6968:	df000515 	stw	fp,20(sp)
    696c:	df000504 	addi	fp,sp,20
    6970:	e13ffd15 	stw	r4,-12(fp)
    6974:	e17ffe15 	stw	r5,-8(fp)
    6978:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    697c:	e0bffd17 	ldw	r2,-12(fp)
    6980:	10800017 	ldw	r2,0(r2)
    6984:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    6988:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    698c:	00000c06 	br	69c0 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    6990:	e0bffe17 	ldw	r2,-8(fp)
    6994:	11403fcc 	andi	r5,r2,255
    6998:	e0bffe17 	ldw	r2,-8(fp)
    699c:	10800044 	addi	r2,r2,1
    69a0:	e0bffe15 	stw	r2,-8(fp)
    69a4:	e13ffc17 	ldw	r4,-16(fp)
    69a8:	00068140 	call	6814 <alt_up_irda_write_data>
    69ac:	1004c03a 	cmpne	r2,r2,zero
    69b0:	1000091e 	bne	r2,zero,69d8 <alt_up_irda_write_fd+0x78>
			count++;
    69b4:	e0bffb17 	ldw	r2,-20(fp)
    69b8:	10800044 	addi	r2,r2,1
    69bc:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    69c0:	e0bfff17 	ldw	r2,-4(fp)
    69c4:	10bfffc4 	addi	r2,r2,-1
    69c8:	e0bfff15 	stw	r2,-4(fp)
    69cc:	e0bfff17 	ldw	r2,-4(fp)
    69d0:	10bfffd8 	cmpnei	r2,r2,-1
    69d4:	103fee1e 	bne	r2,zero,6990 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    69d8:	e0bffb17 	ldw	r2,-20(fp)
}
    69dc:	e037883a 	mov	sp,fp
    69e0:	dfc00117 	ldw	ra,4(sp)
    69e4:	df000017 	ldw	fp,0(sp)
    69e8:	dec00204 	addi	sp,sp,8
    69ec:	f800283a 	ret

000069f0 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    69f0:	defffc04 	addi	sp,sp,-16
    69f4:	dfc00315 	stw	ra,12(sp)
    69f8:	df000215 	stw	fp,8(sp)
    69fc:	df000204 	addi	fp,sp,8
    6a00:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    6a04:	e13fff17 	ldw	r4,-4(fp)
    6a08:	01400074 	movhi	r5,1
    6a0c:	297b6904 	addi	r5,r5,-4700
    6a10:	000924c0 	call	924c <alt_find_dev>
    6a14:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    6a18:	e0bffe17 	ldw	r2,-8(fp)
}
    6a1c:	e037883a 	mov	sp,fp
    6a20:	dfc00117 	ldw	ra,4(sp)
    6a24:	df000017 	ldw	fp,0(sp)
    6a28:	dec00204 	addi	sp,sp,8
    6a2c:	f800283a 	ret

00006a30 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    6a30:	defffc04 	addi	sp,sp,-16
    6a34:	dfc00315 	stw	ra,12(sp)
    6a38:	df000215 	stw	fp,8(sp)
    6a3c:	df000204 	addi	fp,sp,8
    6a40:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    6a44:	e13fff17 	ldw	r4,-4(fp)
    6a48:	01400074 	movhi	r5,1
    6a4c:	297b6904 	addi	r5,r5,-4700
    6a50:	000924c0 	call	924c <alt_find_dev>
    6a54:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    6a58:	e0bffe17 	ldw	r2,-8(fp)
}
    6a5c:	e037883a 	mov	sp,fp
    6a60:	dfc00117 	ldw	ra,4(sp)
    6a64:	df000017 	ldw	fp,0(sp)
    6a68:	dec00204 	addi	sp,sp,8
    6a6c:	f800283a 	ret

00006a70 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    6a70:	defffd04 	addi	sp,sp,-12
    6a74:	df000215 	stw	fp,8(sp)
    6a78:	df000204 	addi	fp,sp,8
    6a7c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    6a80:	e0bfff17 	ldw	r2,-4(fp)
    6a84:	1080400c 	andi	r2,r2,256
    6a88:	1004d23a 	srli	r2,r2,8
    6a8c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    6a90:	e0bffe03 	ldbu	r2,-8(fp)
}
    6a94:	e037883a 	mov	sp,fp
    6a98:	df000017 	ldw	fp,0(sp)
    6a9c:	dec00104 	addi	sp,sp,4
    6aa0:	f800283a 	ret

00006aa4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    6aa4:	defffd04 	addi	sp,sp,-12
    6aa8:	df000215 	stw	fp,8(sp)
    6aac:	df000204 	addi	fp,sp,8
    6ab0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    6ab4:	e0bfff17 	ldw	r2,-4(fp)
    6ab8:	1080004c 	andi	r2,r2,1
    6abc:	e0bffe05 	stb	r2,-8(fp)
	return re;
    6ac0:	e0bffe03 	ldbu	r2,-8(fp)
}
    6ac4:	e037883a 	mov	sp,fp
    6ac8:	df000017 	ldw	fp,0(sp)
    6acc:	dec00104 	addi	sp,sp,4
    6ad0:	f800283a 	ret

00006ad4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    6ad4:	defffd04 	addi	sp,sp,-12
    6ad8:	df000215 	stw	fp,8(sp)
    6adc:	df000204 	addi	fp,sp,8
    6ae0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    6ae4:	e0bfff17 	ldw	r2,-4(fp)
    6ae8:	1081000c 	andi	r2,r2,1024
    6aec:	1004d2ba 	srli	r2,r2,10
    6af0:	e0bffe05 	stb	r2,-8(fp)
	return re;
    6af4:	e0bffe03 	ldbu	r2,-8(fp)
}
    6af8:	e037883a 	mov	sp,fp
    6afc:	df000017 	ldw	fp,0(sp)
    6b00:	dec00104 	addi	sp,sp,4
    6b04:	f800283a 	ret

00006b08 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    6b08:	defffd04 	addi	sp,sp,-12
    6b0c:	df000215 	stw	fp,8(sp)
    6b10:	df000204 	addi	fp,sp,8
    6b14:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    6b18:	e0bfff17 	ldw	r2,-4(fp)
    6b1c:	10bfffec 	andhi	r2,r2,65535
    6b20:	1004d43a 	srli	r2,r2,16
    6b24:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    6b28:	e0bffe0b 	ldhu	r2,-8(fp)
}
    6b2c:	e037883a 	mov	sp,fp
    6b30:	df000017 	ldw	fp,0(sp)
    6b34:	dec00104 	addi	sp,sp,4
    6b38:	f800283a 	ret

00006b3c <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    6b3c:	defffd04 	addi	sp,sp,-12
    6b40:	df000215 	stw	fp,8(sp)
    6b44:	df000204 	addi	fp,sp,8
    6b48:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    6b4c:	e0bfff17 	ldw	r2,-4(fp)
    6b50:	10a0000c 	andi	r2,r2,32768
    6b54:	1004d3fa 	srli	r2,r2,15
    6b58:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    6b5c:	e0bffe03 	ldbu	r2,-8(fp)
}
    6b60:	e037883a 	mov	sp,fp
    6b64:	df000017 	ldw	fp,0(sp)
    6b68:	dec00104 	addi	sp,sp,4
    6b6c:	f800283a 	ret

00006b70 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    6b70:	defffd04 	addi	sp,sp,-12
    6b74:	df000215 	stw	fp,8(sp)
    6b78:	df000204 	addi	fp,sp,8
    6b7c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    6b80:	e0bfff17 	ldw	r2,-4(fp)
    6b84:	e0bffe05 	stb	r2,-8(fp)
	return data;
    6b88:	e0bffe03 	ldbu	r2,-8(fp)
}
    6b8c:	e037883a 	mov	sp,fp
    6b90:	df000017 	ldw	fp,0(sp)
    6b94:	dec00104 	addi	sp,sp,4
    6b98:	f800283a 	ret

00006b9c <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    6b9c:	defffb04 	addi	sp,sp,-20
    6ba0:	dfc00415 	stw	ra,16(sp)
    6ba4:	df000315 	stw	fp,12(sp)
    6ba8:	df000304 	addi	fp,sp,12
    6bac:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    6bb0:	e13fff17 	ldw	r4,-4(fp)
    6bb4:	01403fc4 	movi	r5,255
    6bb8:	0006dfc0 	call	6dfc <alt_up_ps2_write_data_byte_with_ack>
    6bbc:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    6bc0:	e0bffd17 	ldw	r2,-12(fp)
    6bc4:	1004c03a 	cmpne	r2,r2,zero
    6bc8:	1000221e 	bne	r2,zero,6c54 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    6bcc:	e17ffe04 	addi	r5,fp,-8
    6bd0:	e13fff17 	ldw	r4,-4(fp)
    6bd4:	0006e680 	call	6e68 <alt_up_ps2_read_data_byte_timeout>
    6bd8:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    6bdc:	e0bffd17 	ldw	r2,-12(fp)
    6be0:	1004c03a 	cmpne	r2,r2,zero
    6be4:	10001b1e 	bne	r2,zero,6c54 <alt_up_ps2_init+0xb8>
    6be8:	e0bffe03 	ldbu	r2,-8(fp)
    6bec:	10803fcc 	andi	r2,r2,255
    6bf0:	10802a98 	cmpnei	r2,r2,170
    6bf4:	1000171e 	bne	r2,zero,6c54 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    6bf8:	e17ffe04 	addi	r5,fp,-8
    6bfc:	e13fff17 	ldw	r4,-4(fp)
    6c00:	0006e680 	call	6e68 <alt_up_ps2_read_data_byte_timeout>
    6c04:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    6c08:	e0bffd17 	ldw	r2,-12(fp)
    6c0c:	10bfe318 	cmpnei	r2,r2,-116
    6c10:	1000041e 	bne	r2,zero,6c24 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    6c14:	e0ffff17 	ldw	r3,-4(fp)
    6c18:	00800044 	movi	r2,1
    6c1c:	18800d15 	stw	r2,52(r3)
    6c20:	00000c06 	br	6c54 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    6c24:	e0bffd17 	ldw	r2,-12(fp)
    6c28:	1004c03a 	cmpne	r2,r2,zero
    6c2c:	1000091e 	bne	r2,zero,6c54 <alt_up_ps2_init+0xb8>
    6c30:	e0bffe03 	ldbu	r2,-8(fp)
    6c34:	10803fcc 	andi	r2,r2,255
    6c38:	1004c03a 	cmpne	r2,r2,zero
    6c3c:	1000051e 	bne	r2,zero,6c54 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    6c40:	e0bfff17 	ldw	r2,-4(fp)
    6c44:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    6c48:	e13fff17 	ldw	r4,-4(fp)
    6c4c:	01403d04 	movi	r5,244
    6c50:	0006d140 	call	6d14 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    6c54:	e037883a 	mov	sp,fp
    6c58:	dfc00117 	ldw	ra,4(sp)
    6c5c:	df000017 	ldw	fp,0(sp)
    6c60:	dec00204 	addi	sp,sp,8
    6c64:	f800283a 	ret

00006c68 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    6c68:	defffd04 	addi	sp,sp,-12
    6c6c:	df000215 	stw	fp,8(sp)
    6c70:	df000204 	addi	fp,sp,8
    6c74:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    6c78:	e0bfff17 	ldw	r2,-4(fp)
    6c7c:	10800a17 	ldw	r2,40(r2)
    6c80:	10800104 	addi	r2,r2,4
    6c84:	10800037 	ldwio	r2,0(r2)
    6c88:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    6c8c:	e0bffe17 	ldw	r2,-8(fp)
    6c90:	10800054 	ori	r2,r2,1
    6c94:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    6c98:	e0bfff17 	ldw	r2,-4(fp)
    6c9c:	10800a17 	ldw	r2,40(r2)
    6ca0:	10800104 	addi	r2,r2,4
    6ca4:	e0fffe17 	ldw	r3,-8(fp)
    6ca8:	10c00035 	stwio	r3,0(r2)
}
    6cac:	e037883a 	mov	sp,fp
    6cb0:	df000017 	ldw	fp,0(sp)
    6cb4:	dec00104 	addi	sp,sp,4
    6cb8:	f800283a 	ret

00006cbc <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    6cbc:	defffd04 	addi	sp,sp,-12
    6cc0:	df000215 	stw	fp,8(sp)
    6cc4:	df000204 	addi	fp,sp,8
    6cc8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    6ccc:	e0bfff17 	ldw	r2,-4(fp)
    6cd0:	10800a17 	ldw	r2,40(r2)
    6cd4:	10800104 	addi	r2,r2,4
    6cd8:	10800037 	ldwio	r2,0(r2)
    6cdc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    6ce0:	e0fffe17 	ldw	r3,-8(fp)
    6ce4:	00bfff84 	movi	r2,-2
    6ce8:	1884703a 	and	r2,r3,r2
    6cec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    6cf0:	e0bfff17 	ldw	r2,-4(fp)
    6cf4:	10800a17 	ldw	r2,40(r2)
    6cf8:	10800104 	addi	r2,r2,4
    6cfc:	e0fffe17 	ldw	r3,-8(fp)
    6d00:	10c00035 	stwio	r3,0(r2)
}
    6d04:	e037883a 	mov	sp,fp
    6d08:	df000017 	ldw	fp,0(sp)
    6d0c:	dec00104 	addi	sp,sp,4
    6d10:	f800283a 	ret

00006d14 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    6d14:	defffa04 	addi	sp,sp,-24
    6d18:	dfc00515 	stw	ra,20(sp)
    6d1c:	df000415 	stw	fp,16(sp)
    6d20:	df000404 	addi	fp,sp,16
    6d24:	e13ffd15 	stw	r4,-12(fp)
    6d28:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    6d2c:	e0bffd17 	ldw	r2,-12(fp)
    6d30:	10800a17 	ldw	r2,40(r2)
    6d34:	e0fffe03 	ldbu	r3,-8(fp)
    6d38:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    6d3c:	e0bffd17 	ldw	r2,-12(fp)
    6d40:	10800a17 	ldw	r2,40(r2)
    6d44:	10800104 	addi	r2,r2,4
    6d48:	10800037 	ldwio	r2,0(r2)
    6d4c:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    6d50:	e13ffc17 	ldw	r4,-16(fp)
    6d54:	0006ad40 	call	6ad4 <read_CE_bit>
    6d58:	10803fcc 	andi	r2,r2,255
    6d5c:	1005003a 	cmpeq	r2,r2,zero
    6d60:	1000031e 	bne	r2,zero,6d70 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    6d64:	00bffec4 	movi	r2,-5
    6d68:	e0bfff15 	stw	r2,-4(fp)
    6d6c:	00000106 	br	6d74 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    6d70:	e03fff15 	stw	zero,-4(fp)
    6d74:	e0bfff17 	ldw	r2,-4(fp)
}
    6d78:	e037883a 	mov	sp,fp
    6d7c:	dfc00117 	ldw	ra,4(sp)
    6d80:	df000017 	ldw	fp,0(sp)
    6d84:	dec00204 	addi	sp,sp,8
    6d88:	f800283a 	ret

00006d8c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    6d8c:	defffb04 	addi	sp,sp,-20
    6d90:	dfc00415 	stw	ra,16(sp)
    6d94:	df000315 	stw	fp,12(sp)
    6d98:	df000304 	addi	fp,sp,12
    6d9c:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    6da0:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    6da4:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    6da8:	e17ffd44 	addi	r5,fp,-11
    6dac:	e13ffe17 	ldw	r4,-8(fp)
    6db0:	0006e680 	call	6e68 <alt_up_ps2_read_data_byte_timeout>
    6db4:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    6db8:	e0bffd03 	ldbu	r2,-12(fp)
    6dbc:	1004c03a 	cmpne	r2,r2,zero
    6dc0:	1000061e 	bne	r2,zero,6ddc <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    6dc4:	e0bffd43 	ldbu	r2,-11(fp)
    6dc8:	10803fcc 	andi	r2,r2,255
    6dcc:	10803e98 	cmpnei	r2,r2,250
    6dd0:	103ff51e 	bne	r2,zero,6da8 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    6dd4:	e03fff15 	stw	zero,-4(fp)
    6dd8:	00000206 	br	6de4 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    6ddc:	e0bffd03 	ldbu	r2,-12(fp)
    6de0:	e0bfff15 	stw	r2,-4(fp)
    6de4:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    6de8:	e037883a 	mov	sp,fp
    6dec:	dfc00117 	ldw	ra,4(sp)
    6df0:	df000017 	ldw	fp,0(sp)
    6df4:	dec00204 	addi	sp,sp,8
    6df8:	f800283a 	ret

00006dfc <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    6dfc:	defff904 	addi	sp,sp,-28
    6e00:	dfc00615 	stw	ra,24(sp)
    6e04:	df000515 	stw	fp,20(sp)
    6e08:	df000504 	addi	fp,sp,20
    6e0c:	e13ffd15 	stw	r4,-12(fp)
    6e10:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    6e14:	e17ffe03 	ldbu	r5,-8(fp)
    6e18:	e13ffd17 	ldw	r4,-12(fp)
    6e1c:	0006d140 	call	6d14 <alt_up_ps2_write_data_byte>
    6e20:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    6e24:	e0bffc17 	ldw	r2,-16(fp)
    6e28:	1005003a 	cmpeq	r2,r2,zero
    6e2c:	1000031e 	bne	r2,zero,6e3c <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    6e30:	e0bffc17 	ldw	r2,-16(fp)
    6e34:	e0bfff15 	stw	r2,-4(fp)
    6e38:	00000506 	br	6e50 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    6e3c:	e13ffd17 	ldw	r4,-12(fp)
    6e40:	0006d8c0 	call	6d8c <alt_up_ps2_wait_for_ack>
    6e44:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    6e48:	e0bffb17 	ldw	r2,-20(fp)
    6e4c:	e0bfff15 	stw	r2,-4(fp)
    6e50:	e0bfff17 	ldw	r2,-4(fp)
}
    6e54:	e037883a 	mov	sp,fp
    6e58:	dfc00117 	ldw	ra,4(sp)
    6e5c:	df000017 	ldw	fp,0(sp)
    6e60:	dec00204 	addi	sp,sp,8
    6e64:	f800283a 	ret

00006e68 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    6e68:	defff904 	addi	sp,sp,-28
    6e6c:	dfc00615 	stw	ra,24(sp)
    6e70:	df000515 	stw	fp,20(sp)
    6e74:	df000504 	addi	fp,sp,20
    6e78:	e13ffd15 	stw	r4,-12(fp)
    6e7c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    6e80:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    6e84:	e03ffb15 	stw	zero,-20(fp)
    6e88:	00000006 	br	6e8c <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    6e8c:	e0bffb17 	ldw	r2,-20(fp)
    6e90:	10800044 	addi	r2,r2,1
    6e94:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    6e98:	e0bffd17 	ldw	r2,-12(fp)
    6e9c:	10800a17 	ldw	r2,40(r2)
    6ea0:	10800037 	ldwio	r2,0(r2)
    6ea4:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    6ea8:	e13ffc17 	ldw	r4,-16(fp)
    6eac:	0006b3c0 	call	6b3c <read_data_valid>
    6eb0:	10803fcc 	andi	r2,r2,255
    6eb4:	1005003a 	cmpeq	r2,r2,zero
    6eb8:	1000071e 	bne	r2,zero,6ed8 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    6ebc:	e13ffc17 	ldw	r4,-16(fp)
    6ec0:	0006b700 	call	6b70 <read_data_byte>
    6ec4:	1007883a 	mov	r3,r2
    6ec8:	e0bffe17 	ldw	r2,-8(fp)
    6ecc:	10c00005 	stb	r3,0(r2)
			return 0;
    6ed0:	e03fff15 	stw	zero,-4(fp)
    6ed4:	00000a06 	br	6f00 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    6ed8:	e0bffd17 	ldw	r2,-12(fp)
    6edc:	10800c17 	ldw	r2,48(r2)
    6ee0:	1005003a 	cmpeq	r2,r2,zero
    6ee4:	103fe91e 	bne	r2,zero,6e8c <alt_up_ps2_read_data_byte_timeout+0x24>
    6ee8:	e0bffd17 	ldw	r2,-12(fp)
    6eec:	10c00c17 	ldw	r3,48(r2)
    6ef0:	e0bffb17 	ldw	r2,-20(fp)
    6ef4:	18bfe52e 	bgeu	r3,r2,6e8c <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    6ef8:	00bfe304 	movi	r2,-116
    6efc:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    6f00:	e0bfff17 	ldw	r2,-4(fp)
}
    6f04:	e037883a 	mov	sp,fp
    6f08:	dfc00117 	ldw	ra,4(sp)
    6f0c:	df000017 	ldw	fp,0(sp)
    6f10:	dec00204 	addi	sp,sp,8
    6f14:	f800283a 	ret

00006f18 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    6f18:	defffa04 	addi	sp,sp,-24
    6f1c:	dfc00515 	stw	ra,20(sp)
    6f20:	df000415 	stw	fp,16(sp)
    6f24:	df000404 	addi	fp,sp,16
    6f28:	e13ffd15 	stw	r4,-12(fp)
    6f2c:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    6f30:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    6f34:	e0bffd17 	ldw	r2,-12(fp)
    6f38:	10800a17 	ldw	r2,40(r2)
    6f3c:	10800037 	ldwio	r2,0(r2)
    6f40:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    6f44:	e13ffc17 	ldw	r4,-16(fp)
    6f48:	0006b3c0 	call	6b3c <read_data_valid>
    6f4c:	10803fcc 	andi	r2,r2,255
    6f50:	1005003a 	cmpeq	r2,r2,zero
    6f54:	1000071e 	bne	r2,zero,6f74 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    6f58:	e13ffc17 	ldw	r4,-16(fp)
    6f5c:	0006b700 	call	6b70 <read_data_byte>
    6f60:	1007883a 	mov	r3,r2
    6f64:	e0bffe17 	ldw	r2,-8(fp)
    6f68:	10c00005 	stb	r3,0(r2)
		return 0;
    6f6c:	e03fff15 	stw	zero,-4(fp)
    6f70:	00000206 	br	6f7c <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    6f74:	00bfffc4 	movi	r2,-1
    6f78:	e0bfff15 	stw	r2,-4(fp)
    6f7c:	e0bfff17 	ldw	r2,-4(fp)
}
    6f80:	e037883a 	mov	sp,fp
    6f84:	dfc00117 	ldw	ra,4(sp)
    6f88:	df000017 	ldw	fp,0(sp)
    6f8c:	dec00204 	addi	sp,sp,8
    6f90:	f800283a 	ret

00006f94 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    6f94:	defffb04 	addi	sp,sp,-20
    6f98:	dfc00415 	stw	ra,16(sp)
    6f9c:	df000315 	stw	fp,12(sp)
    6fa0:	df000304 	addi	fp,sp,12
    6fa4:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    6fa8:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    6fac:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    6fb0:	e0bfff17 	ldw	r2,-4(fp)
    6fb4:	10800a17 	ldw	r2,40(r2)
    6fb8:	10800037 	ldwio	r2,0(r2)
    6fbc:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    6fc0:	e13ffd17 	ldw	r4,-12(fp)
    6fc4:	0006b080 	call	6b08 <read_num_bytes_available>
    6fc8:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    6fcc:	e0bffe0b 	ldhu	r2,-8(fp)
    6fd0:	1004c03a 	cmpne	r2,r2,zero
    6fd4:	103ff61e 	bne	r2,zero,6fb0 <alt_up_ps2_clear_fifo+0x1c>
}
    6fd8:	e037883a 	mov	sp,fp
    6fdc:	dfc00117 	ldw	ra,4(sp)
    6fe0:	df000017 	ldw	fp,0(sp)
    6fe4:	dec00204 	addi	sp,sp,8
    6fe8:	f800283a 	ret

00006fec <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    6fec:	defff704 	addi	sp,sp,-36
    6ff0:	dfc00815 	stw	ra,32(sp)
    6ff4:	df000715 	stw	fp,28(sp)
    6ff8:	df000704 	addi	fp,sp,28
    6ffc:	e13ffc15 	stw	r4,-16(fp)
    7000:	e17ffd15 	stw	r5,-12(fp)
    7004:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    7008:	e0bffc17 	ldw	r2,-16(fp)
    700c:	10800017 	ldw	r2,0(r2)
    7010:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    7014:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    7018:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    701c:	e0fff917 	ldw	r3,-28(fp)
    7020:	e0bffe17 	ldw	r2,-8(fp)
    7024:	18bffd16 	blt	r3,r2,701c <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    7028:	e17ffd17 	ldw	r5,-12(fp)
    702c:	e0bffd17 	ldw	r2,-12(fp)
    7030:	10800044 	addi	r2,r2,1
    7034:	e0bffd15 	stw	r2,-12(fp)
    7038:	e13ffb17 	ldw	r4,-20(fp)
    703c:	0006e680 	call	6e68 <alt_up_ps2_read_data_byte_timeout>
    7040:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    7044:	e0bffa17 	ldw	r2,-24(fp)
    7048:	1005003a 	cmpeq	r2,r2,zero
    704c:	1000031e 	bne	r2,zero,705c <alt_up_ps2_read_fd+0x70>
			return count;
    7050:	e0bff917 	ldw	r2,-28(fp)
    7054:	e0bfff15 	stw	r2,-4(fp)
    7058:	00000506 	br	7070 <alt_up_ps2_read_fd+0x84>
		count++;
    705c:	e0bff917 	ldw	r2,-28(fp)
    7060:	10800044 	addi	r2,r2,1
    7064:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    7068:	e0bff917 	ldw	r2,-28(fp)
    706c:	e0bfff15 	stw	r2,-4(fp)
    7070:	e0bfff17 	ldw	r2,-4(fp)
}
    7074:	e037883a 	mov	sp,fp
    7078:	dfc00117 	ldw	ra,4(sp)
    707c:	df000017 	ldw	fp,0(sp)
    7080:	dec00204 	addi	sp,sp,8
    7084:	f800283a 	ret

00007088 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    7088:	defff704 	addi	sp,sp,-36
    708c:	dfc00815 	stw	ra,32(sp)
    7090:	df000715 	stw	fp,28(sp)
    7094:	df000704 	addi	fp,sp,28
    7098:	e13ffc15 	stw	r4,-16(fp)
    709c:	e17ffd15 	stw	r5,-12(fp)
    70a0:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    70a4:	e0bffc17 	ldw	r2,-16(fp)
    70a8:	10800017 	ldw	r2,0(r2)
    70ac:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    70b0:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    70b4:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    70b8:	00001206 	br	7104 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    70bc:	e0bffd17 	ldw	r2,-12(fp)
    70c0:	10800003 	ldbu	r2,0(r2)
    70c4:	11403fcc 	andi	r5,r2,255
    70c8:	e0bffd17 	ldw	r2,-12(fp)
    70cc:	10800044 	addi	r2,r2,1
    70d0:	e0bffd15 	stw	r2,-12(fp)
    70d4:	e13ffb17 	ldw	r4,-20(fp)
    70d8:	0006d140 	call	6d14 <alt_up_ps2_write_data_byte>
    70dc:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    70e0:	e0bffa17 	ldw	r2,-24(fp)
    70e4:	1005003a 	cmpeq	r2,r2,zero
    70e8:	1000031e 	bne	r2,zero,70f8 <alt_up_ps2_write_fd+0x70>
			return count;
    70ec:	e0bff917 	ldw	r2,-28(fp)
    70f0:	e0bfff15 	stw	r2,-4(fp)
    70f4:	00000806 	br	7118 <alt_up_ps2_write_fd+0x90>
		count++;
    70f8:	e0bff917 	ldw	r2,-28(fp)
    70fc:	10800044 	addi	r2,r2,1
    7100:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    7104:	e0fff917 	ldw	r3,-28(fp)
    7108:	e0bffe17 	ldw	r2,-8(fp)
    710c:	18bfeb16 	blt	r3,r2,70bc <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    7110:	e0bff917 	ldw	r2,-28(fp)
    7114:	e0bfff15 	stw	r2,-4(fp)
    7118:	e0bfff17 	ldw	r2,-4(fp)
}
    711c:	e037883a 	mov	sp,fp
    7120:	dfc00117 	ldw	ra,4(sp)
    7124:	df000017 	ldw	fp,0(sp)
    7128:	dec00204 	addi	sp,sp,8
    712c:	f800283a 	ret

00007130 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    7130:	defffc04 	addi	sp,sp,-16
    7134:	dfc00315 	stw	ra,12(sp)
    7138:	df000215 	stw	fp,8(sp)
    713c:	df000204 	addi	fp,sp,8
    7140:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    7144:	e13fff17 	ldw	r4,-4(fp)
    7148:	01400074 	movhi	r5,1
    714c:	297b6904 	addi	r5,r5,-4700
    7150:	000924c0 	call	924c <alt_find_dev>
    7154:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    7158:	e0bffe17 	ldw	r2,-8(fp)
}
    715c:	e037883a 	mov	sp,fp
    7160:	dfc00117 	ldw	ra,4(sp)
    7164:	df000017 	ldw	fp,0(sp)
    7168:	dec00204 	addi	sp,sp,8
    716c:	f800283a 	ret

00007170 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    7170:	defffd04 	addi	sp,sp,-12
    7174:	df000215 	stw	fp,8(sp)
    7178:	df000204 	addi	fp,sp,8
    717c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    7180:	e0bfff17 	ldw	r2,-4(fp)
    7184:	10800a17 	ldw	r2,40(r2)
    7188:	10800104 	addi	r2,r2,4
    718c:	10800037 	ldwio	r2,0(r2)
    7190:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    7194:	e0bffe17 	ldw	r2,-8(fp)
    7198:	10800054 	ori	r2,r2,1
    719c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    71a0:	e0bfff17 	ldw	r2,-4(fp)
    71a4:	10800a17 	ldw	r2,40(r2)
    71a8:	10800104 	addi	r2,r2,4
    71ac:	e0fffe17 	ldw	r3,-8(fp)
    71b0:	10c00035 	stwio	r3,0(r2)
}
    71b4:	e037883a 	mov	sp,fp
    71b8:	df000017 	ldw	fp,0(sp)
    71bc:	dec00104 	addi	sp,sp,4
    71c0:	f800283a 	ret

000071c4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    71c4:	defffd04 	addi	sp,sp,-12
    71c8:	df000215 	stw	fp,8(sp)
    71cc:	df000204 	addi	fp,sp,8
    71d0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    71d4:	e0bfff17 	ldw	r2,-4(fp)
    71d8:	10800a17 	ldw	r2,40(r2)
    71dc:	10800104 	addi	r2,r2,4
    71e0:	10800037 	ldwio	r2,0(r2)
    71e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    71e8:	e0fffe17 	ldw	r3,-8(fp)
    71ec:	00bfff84 	movi	r2,-2
    71f0:	1884703a 	and	r2,r3,r2
    71f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    71f8:	e0bfff17 	ldw	r2,-4(fp)
    71fc:	10800a17 	ldw	r2,40(r2)
    7200:	10800104 	addi	r2,r2,4
    7204:	e0fffe17 	ldw	r3,-8(fp)
    7208:	10c00035 	stwio	r3,0(r2)
}
    720c:	e037883a 	mov	sp,fp
    7210:	df000017 	ldw	fp,0(sp)
    7214:	dec00104 	addi	sp,sp,4
    7218:	f800283a 	ret

0000721c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    721c:	defffd04 	addi	sp,sp,-12
    7220:	df000215 	stw	fp,8(sp)
    7224:	df000204 	addi	fp,sp,8
    7228:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    722c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    7230:	e0bfff17 	ldw	r2,-4(fp)
    7234:	10800a17 	ldw	r2,40(r2)
    7238:	10800084 	addi	r2,r2,2
    723c:	1080002b 	ldhuio	r2,0(r2)
    7240:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    7244:	e0bffe0b 	ldhu	r2,-8(fp)
}
    7248:	e037883a 	mov	sp,fp
    724c:	df000017 	ldw	fp,0(sp)
    7250:	dec00104 	addi	sp,sp,4
    7254:	f800283a 	ret

00007258 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    7258:	defffd04 	addi	sp,sp,-12
    725c:	df000215 	stw	fp,8(sp)
    7260:	df000204 	addi	fp,sp,8
    7264:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    7268:	e0bfff17 	ldw	r2,-4(fp)
    726c:	10800a17 	ldw	r2,40(r2)
    7270:	10800104 	addi	r2,r2,4
    7274:	10800037 	ldwio	r2,0(r2)
    7278:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    727c:	e0bffe17 	ldw	r2,-8(fp)
    7280:	10bfffec 	andhi	r2,r2,65535
    7284:	1004d43a 	srli	r2,r2,16
}
    7288:	e037883a 	mov	sp,fp
    728c:	df000017 	ldw	fp,0(sp)
    7290:	dec00104 	addi	sp,sp,4
    7294:	f800283a 	ret

00007298 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    7298:	defffc04 	addi	sp,sp,-16
    729c:	df000315 	stw	fp,12(sp)
    72a0:	df000304 	addi	fp,sp,12
    72a4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    72a8:	e0bffe17 	ldw	r2,-8(fp)
    72ac:	1080800c 	andi	r2,r2,512
    72b0:	1004d27a 	srli	r2,r2,9
    72b4:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    72b8:	e0bffd17 	ldw	r2,-12(fp)
    72bc:	1005003a 	cmpeq	r2,r2,zero
    72c0:	1000031e 	bne	r2,zero,72d0 <alt_up_rs232_check_parity+0x38>
    72c4:	00bfffc4 	movi	r2,-1
    72c8:	e0bfff15 	stw	r2,-4(fp)
    72cc:	00000106 	br	72d4 <alt_up_rs232_check_parity+0x3c>
    72d0:	e03fff15 	stw	zero,-4(fp)
    72d4:	e0bfff17 	ldw	r2,-4(fp)
}
    72d8:	e037883a 	mov	sp,fp
    72dc:	df000017 	ldw	fp,0(sp)
    72e0:	dec00104 	addi	sp,sp,4
    72e4:	f800283a 	ret

000072e8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    72e8:	defffc04 	addi	sp,sp,-16
    72ec:	df000315 	stw	fp,12(sp)
    72f0:	df000304 	addi	fp,sp,12
    72f4:	e13ffe15 	stw	r4,-8(fp)
    72f8:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    72fc:	e0bffe17 	ldw	r2,-8(fp)
    7300:	10800a17 	ldw	r2,40(r2)
    7304:	10800037 	ldwio	r2,0(r2)
    7308:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    730c:	e0bffe17 	ldw	r2,-8(fp)
    7310:	10800a17 	ldw	r2,40(r2)
    7314:	e0ffff03 	ldbu	r3,-4(fp)
    7318:	10c00035 	stwio	r3,0(r2)
	return 0;
    731c:	0005883a 	mov	r2,zero
}
    7320:	e037883a 	mov	sp,fp
    7324:	df000017 	ldw	fp,0(sp)
    7328:	dec00104 	addi	sp,sp,4
    732c:	f800283a 	ret

00007330 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    7330:	defffa04 	addi	sp,sp,-24
    7334:	dfc00515 	stw	ra,20(sp)
    7338:	df000415 	stw	fp,16(sp)
    733c:	df000404 	addi	fp,sp,16
    7340:	e13ffd15 	stw	r4,-12(fp)
    7344:	e17ffe15 	stw	r5,-8(fp)
    7348:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    734c:	e0bffd17 	ldw	r2,-12(fp)
    7350:	10800a17 	ldw	r2,40(r2)
    7354:	10800037 	ldwio	r2,0(r2)
    7358:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    735c:	e0bffc17 	ldw	r2,-16(fp)
    7360:	1007883a 	mov	r3,r2
    7364:	e0bffe17 	ldw	r2,-8(fp)
    7368:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    736c:	e13ffc17 	ldw	r4,-16(fp)
    7370:	00072980 	call	7298 <alt_up_rs232_check_parity>
    7374:	1007883a 	mov	r3,r2
    7378:	e0bfff17 	ldw	r2,-4(fp)
    737c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    7380:	e0bffc17 	ldw	r2,-16(fp)
    7384:	10a0000c 	andi	r2,r2,32768
    7388:	1004d3fa 	srli	r2,r2,15
    738c:	10bfffc4 	addi	r2,r2,-1
}
    7390:	e037883a 	mov	sp,fp
    7394:	dfc00117 	ldw	ra,4(sp)
    7398:	df000017 	ldw	fp,0(sp)
    739c:	dec00204 	addi	sp,sp,8
    73a0:	f800283a 	ret

000073a4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    73a4:	defff804 	addi	sp,sp,-32
    73a8:	dfc00715 	stw	ra,28(sp)
    73ac:	df000615 	stw	fp,24(sp)
    73b0:	df000604 	addi	fp,sp,24
    73b4:	e13ffd15 	stw	r4,-12(fp)
    73b8:	e17ffe15 	stw	r5,-8(fp)
    73bc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    73c0:	e0bffd17 	ldw	r2,-12(fp)
    73c4:	10800017 	ldw	r2,0(r2)
    73c8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    73cc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    73d0:	00000c06 	br	7404 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    73d4:	e17ffe17 	ldw	r5,-8(fp)
    73d8:	e0bffe17 	ldw	r2,-8(fp)
    73dc:	10800044 	addi	r2,r2,1
    73e0:	e0bffe15 	stw	r2,-8(fp)
    73e4:	e1bffc04 	addi	r6,fp,-16
    73e8:	e13ffb17 	ldw	r4,-20(fp)
    73ec:	00073300 	call	7330 <alt_up_rs232_read_data>
    73f0:	1004c03a 	cmpne	r2,r2,zero
    73f4:	1000091e 	bne	r2,zero,741c <alt_up_rs232_read_fd+0x78>
			count++;
    73f8:	e0bffa17 	ldw	r2,-24(fp)
    73fc:	10800044 	addi	r2,r2,1
    7400:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    7404:	e0bfff17 	ldw	r2,-4(fp)
    7408:	10bfffc4 	addi	r2,r2,-1
    740c:	e0bfff15 	stw	r2,-4(fp)
    7410:	e0bfff17 	ldw	r2,-4(fp)
    7414:	10bfffd8 	cmpnei	r2,r2,-1
    7418:	103fee1e 	bne	r2,zero,73d4 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    741c:	e0bffa17 	ldw	r2,-24(fp)
}
    7420:	e037883a 	mov	sp,fp
    7424:	dfc00117 	ldw	ra,4(sp)
    7428:	df000017 	ldw	fp,0(sp)
    742c:	dec00204 	addi	sp,sp,8
    7430:	f800283a 	ret

00007434 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    7434:	defff904 	addi	sp,sp,-28
    7438:	dfc00615 	stw	ra,24(sp)
    743c:	df000515 	stw	fp,20(sp)
    7440:	df000504 	addi	fp,sp,20
    7444:	e13ffd15 	stw	r4,-12(fp)
    7448:	e17ffe15 	stw	r5,-8(fp)
    744c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    7450:	e0bffd17 	ldw	r2,-12(fp)
    7454:	10800017 	ldw	r2,0(r2)
    7458:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    745c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    7460:	00000d06 	br	7498 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    7464:	e0bffe17 	ldw	r2,-8(fp)
    7468:	10800003 	ldbu	r2,0(r2)
    746c:	11403fcc 	andi	r5,r2,255
    7470:	e13ffc17 	ldw	r4,-16(fp)
    7474:	00072e80 	call	72e8 <alt_up_rs232_write_data>
    7478:	1004c03a 	cmpne	r2,r2,zero
    747c:	10000c1e 	bne	r2,zero,74b0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    7480:	e0bffb17 	ldw	r2,-20(fp)
    7484:	10800044 	addi	r2,r2,1
    7488:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    748c:	e0bffe17 	ldw	r2,-8(fp)
    7490:	10800044 	addi	r2,r2,1
    7494:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    7498:	e0bfff17 	ldw	r2,-4(fp)
    749c:	10bfffc4 	addi	r2,r2,-1
    74a0:	e0bfff15 	stw	r2,-4(fp)
    74a4:	e0bfff17 	ldw	r2,-4(fp)
    74a8:	10bfffd8 	cmpnei	r2,r2,-1
    74ac:	103fed1e 	bne	r2,zero,7464 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    74b0:	e0bffb17 	ldw	r2,-20(fp)
}
    74b4:	e037883a 	mov	sp,fp
    74b8:	dfc00117 	ldw	ra,4(sp)
    74bc:	df000017 	ldw	fp,0(sp)
    74c0:	dec00204 	addi	sp,sp,8
    74c4:	f800283a 	ret

000074c8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    74c8:	defffc04 	addi	sp,sp,-16
    74cc:	dfc00315 	stw	ra,12(sp)
    74d0:	df000215 	stw	fp,8(sp)
    74d4:	df000204 	addi	fp,sp,8
    74d8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    74dc:	e13fff17 	ldw	r4,-4(fp)
    74e0:	01400074 	movhi	r5,1
    74e4:	297b6904 	addi	r5,r5,-4700
    74e8:	000924c0 	call	924c <alt_find_dev>
    74ec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    74f0:	e0bffe17 	ldw	r2,-8(fp)
}
    74f4:	e037883a 	mov	sp,fp
    74f8:	dfc00117 	ldw	ra,4(sp)
    74fc:	df000017 	ldw	fp,0(sp)
    7500:	dec00204 	addi	sp,sp,8
    7504:	f800283a 	ret

00007508 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    7508:	defffc04 	addi	sp,sp,-16
    750c:	dfc00315 	stw	ra,12(sp)
    7510:	df000215 	stw	fp,8(sp)
    7514:	df000204 	addi	fp,sp,8
    7518:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    751c:	e0bfff17 	ldw	r2,-4(fp)
    7520:	10800217 	ldw	r2,8(r2)
    7524:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    7528:	00000c06 	br	755c <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    752c:	e13ffe17 	ldw	r4,-8(fp)
    7530:	01400074 	movhi	r5,1
    7534:	2973a404 	addi	r5,r5,-12656
    7538:	0009fa40 	call	9fa4 <strcmp>
    753c:	1004c03a 	cmpne	r2,r2,zero
    7540:	1000031e 	bne	r2,zero,7550 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    7544:	e0bffe17 	ldw	r2,-8(fp)
    7548:	10000005 	stb	zero,0(r2)
			break;
    754c:	00000a06 	br	7578 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    7550:	e0bffe17 	ldw	r2,-8(fp)
    7554:	10800044 	addi	r2,r2,1
    7558:	e0bffe15 	stw	r2,-8(fp)
    755c:	e0bffe17 	ldw	r2,-8(fp)
    7560:	10800003 	ldbu	r2,0(r2)
    7564:	10803fcc 	andi	r2,r2,255
    7568:	1080201c 	xori	r2,r2,128
    756c:	10bfe004 	addi	r2,r2,-128
    7570:	1004c03a 	cmpne	r2,r2,zero
    7574:	103fed1e 	bne	r2,zero,752c <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    7578:	e037883a 	mov	sp,fp
    757c:	dfc00117 	ldw	ra,4(sp)
    7580:	df000017 	ldw	fp,0(sp)
    7584:	dec00204 	addi	sp,sp,8
    7588:	f800283a 	ret

0000758c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    758c:	defffc04 	addi	sp,sp,-16
    7590:	dfc00315 	stw	ra,12(sp)
    7594:	df000215 	stw	fp,8(sp)
    7598:	df000204 	addi	fp,sp,8
    759c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    75a0:	e13fff17 	ldw	r4,-4(fp)
    75a4:	01400074 	movhi	r5,1
    75a8:	297b6904 	addi	r5,r5,-4700
    75ac:	000924c0 	call	924c <alt_find_dev>
    75b0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    75b4:	e0bffe17 	ldw	r2,-8(fp)
}
    75b8:	e037883a 	mov	sp,fp
    75bc:	dfc00117 	ldw	ra,4(sp)
    75c0:	df000017 	ldw	fp,0(sp)
    75c4:	dec00204 	addi	sp,sp,8
    75c8:	f800283a 	ret

000075cc <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    75cc:	defff904 	addi	sp,sp,-28
    75d0:	df000615 	stw	fp,24(sp)
    75d4:	df000604 	addi	fp,sp,24
    75d8:	e13ffb15 	stw	r4,-20(fp)
    75dc:	e1bffd15 	stw	r6,-12(fp)
    75e0:	e1fffe15 	stw	r7,-8(fp)
    75e4:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    75e8:	e0bffb17 	ldw	r2,-20(fp)
    75ec:	10c00c17 	ldw	r3,48(r2)
    75f0:	e0bffd17 	ldw	r2,-12(fp)
    75f4:	10c0042e 	bgeu	r2,r3,7608 <alt_up_char_buffer_draw+0x3c>
    75f8:	e0bffb17 	ldw	r2,-20(fp)
    75fc:	10c00d17 	ldw	r3,52(r2)
    7600:	e0bffe17 	ldw	r2,-8(fp)
    7604:	10c00336 	bltu	r2,r3,7614 <alt_up_char_buffer_draw+0x48>
		return -1;
    7608:	00bfffc4 	movi	r2,-1
    760c:	e0bfff15 	stw	r2,-4(fp)
    7610:	00001d06 	br	7688 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    7614:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    7618:	e0bffb17 	ldw	r2,-20(fp)
    761c:	10c00f17 	ldw	r3,60(r2)
    7620:	e0bffd17 	ldw	r2,-12(fp)
    7624:	1886703a 	and	r3,r3,r2
    7628:	e0bffb17 	ldw	r2,-20(fp)
    762c:	10800e17 	ldw	r2,56(r2)
    7630:	1886983a 	sll	r3,r3,r2
    7634:	e0bffa17 	ldw	r2,-24(fp)
    7638:	10c4b03a 	or	r2,r2,r3
    763c:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    7640:	e0bffb17 	ldw	r2,-20(fp)
    7644:	10c01117 	ldw	r3,68(r2)
    7648:	e0bffe17 	ldw	r2,-8(fp)
    764c:	1886703a 	and	r3,r3,r2
    7650:	e0bffb17 	ldw	r2,-20(fp)
    7654:	10801017 	ldw	r2,64(r2)
    7658:	1886983a 	sll	r3,r3,r2
    765c:	e0bffa17 	ldw	r2,-24(fp)
    7660:	10c4b03a 	or	r2,r2,r3
    7664:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    7668:	e0bffb17 	ldw	r2,-20(fp)
    766c:	10800b17 	ldw	r2,44(r2)
    7670:	1007883a 	mov	r3,r2
    7674:	e0bffa17 	ldw	r2,-24(fp)
    7678:	1885883a 	add	r2,r3,r2
    767c:	e0fffc03 	ldbu	r3,-16(fp)
    7680:	10c00025 	stbio	r3,0(r2)

	return 0;
    7684:	e03fff15 	stw	zero,-4(fp)
    7688:	e0bfff17 	ldw	r2,-4(fp)
}
    768c:	e037883a 	mov	sp,fp
    7690:	df000017 	ldw	fp,0(sp)
    7694:	dec00104 	addi	sp,sp,4
    7698:	f800283a 	ret

0000769c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    769c:	defff904 	addi	sp,sp,-28
    76a0:	df000615 	stw	fp,24(sp)
    76a4:	df000604 	addi	fp,sp,24
    76a8:	e13ffb15 	stw	r4,-20(fp)
    76ac:	e17ffc15 	stw	r5,-16(fp)
    76b0:	e1bffd15 	stw	r6,-12(fp)
    76b4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    76b8:	e0bffb17 	ldw	r2,-20(fp)
    76bc:	10c00c17 	ldw	r3,48(r2)
    76c0:	e0bffd17 	ldw	r2,-12(fp)
    76c4:	10c0042e 	bgeu	r2,r3,76d8 <alt_up_char_buffer_string+0x3c>
    76c8:	e0bffb17 	ldw	r2,-20(fp)
    76cc:	10c00d17 	ldw	r3,52(r2)
    76d0:	e0bffe17 	ldw	r2,-8(fp)
    76d4:	10c00336 	bltu	r2,r3,76e4 <alt_up_char_buffer_string+0x48>
		return -1;
    76d8:	00bfffc4 	movi	r2,-1
    76dc:	e0bfff15 	stw	r2,-4(fp)
    76e0:	00002e06 	br	779c <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    76e4:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    76e8:	e0bffb17 	ldw	r2,-20(fp)
    76ec:	10801017 	ldw	r2,64(r2)
    76f0:	1007883a 	mov	r3,r2
    76f4:	e0bffe17 	ldw	r2,-8(fp)
    76f8:	10c6983a 	sll	r3,r2,r3
    76fc:	e0bffd17 	ldw	r2,-12(fp)
    7700:	1885883a 	add	r2,r3,r2
    7704:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    7708:	00001c06 	br	777c <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    770c:	e0bffb17 	ldw	r2,-20(fp)
    7710:	10800b17 	ldw	r2,44(r2)
    7714:	1007883a 	mov	r3,r2
    7718:	e0bffa17 	ldw	r2,-24(fp)
    771c:	1889883a 	add	r4,r3,r2
    7720:	e0bffc17 	ldw	r2,-16(fp)
    7724:	10800003 	ldbu	r2,0(r2)
    7728:	10c03fcc 	andi	r3,r2,255
    772c:	18c0201c 	xori	r3,r3,128
    7730:	18ffe004 	addi	r3,r3,-128
    7734:	2005883a 	mov	r2,r4
    7738:	10c00025 	stbio	r3,0(r2)
		++ptr;
    773c:	e0bffc17 	ldw	r2,-16(fp)
    7740:	10800044 	addi	r2,r2,1
    7744:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    7748:	e0bffd17 	ldw	r2,-12(fp)
    774c:	10800044 	addi	r2,r2,1
    7750:	e0bffd15 	stw	r2,-12(fp)
    7754:	e0bffb17 	ldw	r2,-20(fp)
    7758:	10c00c17 	ldw	r3,48(r2)
    775c:	e0bffd17 	ldw	r2,-12(fp)
    7760:	10c00336 	bltu	r2,r3,7770 <alt_up_char_buffer_string+0xd4>
			return -1;
    7764:	00bfffc4 	movi	r2,-1
    7768:	e0bfff15 	stw	r2,-4(fp)
    776c:	00000b06 	br	779c <alt_up_char_buffer_string+0x100>
		++offset;
    7770:	e0bffa17 	ldw	r2,-24(fp)
    7774:	10800044 	addi	r2,r2,1
    7778:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    777c:	e0bffc17 	ldw	r2,-16(fp)
    7780:	10800003 	ldbu	r2,0(r2)
    7784:	10803fcc 	andi	r2,r2,255
    7788:	1080201c 	xori	r2,r2,128
    778c:	10bfe004 	addi	r2,r2,-128
    7790:	1004c03a 	cmpne	r2,r2,zero
    7794:	103fdd1e 	bne	r2,zero,770c <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    7798:	e03fff15 	stw	zero,-4(fp)
    779c:	e0bfff17 	ldw	r2,-4(fp)
}
    77a0:	e037883a 	mov	sp,fp
    77a4:	df000017 	ldw	fp,0(sp)
    77a8:	dec00104 	addi	sp,sp,4
    77ac:	f800283a 	ret

000077b0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    77b0:	defffe04 	addi	sp,sp,-8
    77b4:	df000115 	stw	fp,4(sp)
    77b8:	df000104 	addi	fp,sp,4
    77bc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    77c0:	e0bfff17 	ldw	r2,-4(fp)
    77c4:	10800a17 	ldw	r2,40(r2)
    77c8:	10800084 	addi	r2,r2,2
    77cc:	1007883a 	mov	r3,r2
    77d0:	00800044 	movi	r2,1
    77d4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    77d8:	e0bfff17 	ldw	r2,-4(fp)
    77dc:	10800a17 	ldw	r2,40(r2)
    77e0:	10800084 	addi	r2,r2,2
    77e4:	10800023 	ldbuio	r2,0(r2)
    77e8:	1080004c 	andi	r2,r2,1
    77ec:	10803fcc 	andi	r2,r2,255
    77f0:	1004c03a 	cmpne	r2,r2,zero
    77f4:	103ff81e 	bne	r2,zero,77d8 <alt_up_char_buffer_clear+0x28>
	return 0;
    77f8:	0005883a 	mov	r2,zero
}
    77fc:	e037883a 	mov	sp,fp
    7800:	df000017 	ldw	fp,0(sp)
    7804:	dec00104 	addi	sp,sp,4
    7808:	f800283a 	ret

0000780c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    780c:	defffc04 	addi	sp,sp,-16
    7810:	dfc00315 	stw	ra,12(sp)
    7814:	df000215 	stw	fp,8(sp)
    7818:	df000204 	addi	fp,sp,8
    781c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    7820:	e13fff17 	ldw	r4,-4(fp)
    7824:	01400074 	movhi	r5,1
    7828:	297b6904 	addi	r5,r5,-4700
    782c:	000924c0 	call	924c <alt_find_dev>
    7830:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    7834:	e0bffe17 	ldw	r2,-8(fp)
}
    7838:	e037883a 	mov	sp,fp
    783c:	dfc00117 	ldw	ra,4(sp)
    7840:	df000017 	ldw	fp,0(sp)
    7844:	dec00204 	addi	sp,sp,8
    7848:	f800283a 	ret

0000784c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    784c:	defff904 	addi	sp,sp,-28
    7850:	df000615 	stw	fp,24(sp)
    7854:	df000604 	addi	fp,sp,24
    7858:	e13ffb15 	stw	r4,-20(fp)
    785c:	e17ffc15 	stw	r5,-16(fp)
    7860:	e1bffd15 	stw	r6,-12(fp)
    7864:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    7868:	e0bffb17 	ldw	r2,-20(fp)
    786c:	10c00f17 	ldw	r3,60(r2)
    7870:	e0bffd17 	ldw	r2,-12(fp)
    7874:	10c0042e 	bgeu	r2,r3,7888 <alt_up_pixel_buffer_dma_draw+0x3c>
    7878:	e0bffb17 	ldw	r2,-20(fp)
    787c:	10c01017 	ldw	r3,64(r2)
    7880:	e0bffe17 	ldw	r2,-8(fp)
    7884:	10c00336 	bltu	r2,r3,7894 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
    7888:	00bfffc4 	movi	r2,-1
    788c:	e0bfff15 	stw	r2,-4(fp)
    7890:	00005106 	br	79d8 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
    7894:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    7898:	e0bffb17 	ldw	r2,-20(fp)
    789c:	10800d17 	ldw	r2,52(r2)
    78a0:	1004c03a 	cmpne	r2,r2,zero
    78a4:	1000151e 	bne	r2,zero,78fc <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    78a8:	e0bffb17 	ldw	r2,-20(fp)
    78ac:	10c01217 	ldw	r3,72(r2)
    78b0:	e0bffd17 	ldw	r2,-12(fp)
    78b4:	1886703a 	and	r3,r3,r2
    78b8:	e0bffb17 	ldw	r2,-20(fp)
    78bc:	10801117 	ldw	r2,68(r2)
    78c0:	1886983a 	sll	r3,r3,r2
    78c4:	e0bffa17 	ldw	r2,-24(fp)
    78c8:	10c4b03a 	or	r2,r2,r3
    78cc:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    78d0:	e0bffb17 	ldw	r2,-20(fp)
    78d4:	10c01417 	ldw	r3,80(r2)
    78d8:	e0bffe17 	ldw	r2,-8(fp)
    78dc:	1886703a 	and	r3,r3,r2
    78e0:	e0bffb17 	ldw	r2,-20(fp)
    78e4:	10801317 	ldw	r2,76(r2)
    78e8:	1886983a 	sll	r3,r3,r2
    78ec:	e0bffa17 	ldw	r2,-24(fp)
    78f0:	10c4b03a 	or	r2,r2,r3
    78f4:	e0bffa15 	stw	r2,-24(fp)
    78f8:	00001706 	br	7958 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    78fc:	e0bffb17 	ldw	r2,-20(fp)
    7900:	10c01217 	ldw	r3,72(r2)
    7904:	e0bffd17 	ldw	r2,-12(fp)
    7908:	1886703a 	and	r3,r3,r2
    790c:	e0bffb17 	ldw	r2,-20(fp)
    7910:	10801117 	ldw	r2,68(r2)
    7914:	1886983a 	sll	r3,r3,r2
    7918:	e0bffa17 	ldw	r2,-24(fp)
    791c:	10c5883a 	add	r2,r2,r3
    7920:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    7924:	e0bffb17 	ldw	r2,-20(fp)
    7928:	10c01417 	ldw	r3,80(r2)
    792c:	e0bffe17 	ldw	r2,-8(fp)
    7930:	1886703a 	and	r3,r3,r2
    7934:	e0bffb17 	ldw	r2,-20(fp)
    7938:	10800f17 	ldw	r2,60(r2)
    793c:	1887383a 	mul	r3,r3,r2
    7940:	e0bffb17 	ldw	r2,-20(fp)
    7944:	10801117 	ldw	r2,68(r2)
    7948:	1886983a 	sll	r3,r3,r2
    794c:	e0bffa17 	ldw	r2,-24(fp)
    7950:	10c5883a 	add	r2,r2,r3
    7954:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    7958:	e0bffb17 	ldw	r2,-20(fp)
    795c:	10800e17 	ldw	r2,56(r2)
    7960:	10800058 	cmpnei	r2,r2,1
    7964:	1000081e 	bne	r2,zero,7988 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    7968:	e0bffb17 	ldw	r2,-20(fp)
    796c:	10800c17 	ldw	r2,48(r2)
    7970:	1007883a 	mov	r3,r2
    7974:	e0bffa17 	ldw	r2,-24(fp)
    7978:	1885883a 	add	r2,r3,r2
    797c:	e0fffc17 	ldw	r3,-16(fp)
    7980:	10c00025 	stbio	r3,0(r2)
    7984:	00001306 	br	79d4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7988:	e0bffb17 	ldw	r2,-20(fp)
    798c:	10800e17 	ldw	r2,56(r2)
    7990:	10800098 	cmpnei	r2,r2,2
    7994:	1000081e 	bne	r2,zero,79b8 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    7998:	e0bffb17 	ldw	r2,-20(fp)
    799c:	10800c17 	ldw	r2,48(r2)
    79a0:	1007883a 	mov	r3,r2
    79a4:	e0bffa17 	ldw	r2,-24(fp)
    79a8:	1885883a 	add	r2,r3,r2
    79ac:	e0fffc17 	ldw	r3,-16(fp)
    79b0:	10c0002d 	sthio	r3,0(r2)
    79b4:	00000706 	br	79d4 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    79b8:	e0bffb17 	ldw	r2,-20(fp)
    79bc:	10800c17 	ldw	r2,48(r2)
    79c0:	1007883a 	mov	r3,r2
    79c4:	e0bffa17 	ldw	r2,-24(fp)
    79c8:	1885883a 	add	r2,r3,r2
    79cc:	e0fffc17 	ldw	r3,-16(fp)
    79d0:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
    79d4:	e03fff15 	stw	zero,-4(fp)
    79d8:	e0bfff17 	ldw	r2,-4(fp)
}
    79dc:	e037883a 	mov	sp,fp
    79e0:	df000017 	ldw	fp,0(sp)
    79e4:	dec00104 	addi	sp,sp,4
    79e8:	f800283a 	ret

000079ec <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    79ec:	defffd04 	addi	sp,sp,-12
    79f0:	df000215 	stw	fp,8(sp)
    79f4:	df000204 	addi	fp,sp,8
    79f8:	e13ffe15 	stw	r4,-8(fp)
    79fc:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    7a00:	e0bffe17 	ldw	r2,-8(fp)
    7a04:	10800a17 	ldw	r2,40(r2)
    7a08:	10800104 	addi	r2,r2,4
    7a0c:	e0ffff17 	ldw	r3,-4(fp)
    7a10:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    7a14:	e0bffe17 	ldw	r2,-8(fp)
    7a18:	10800a17 	ldw	r2,40(r2)
    7a1c:	10800104 	addi	r2,r2,4
    7a20:	10800037 	ldwio	r2,0(r2)
    7a24:	1007883a 	mov	r3,r2
    7a28:	e0bffe17 	ldw	r2,-8(fp)
    7a2c:	10c00c15 	stw	r3,48(r2)
	return 0;
    7a30:	0005883a 	mov	r2,zero
}
    7a34:	e037883a 	mov	sp,fp
    7a38:	df000017 	ldw	fp,0(sp)
    7a3c:	dec00104 	addi	sp,sp,4
    7a40:	f800283a 	ret

00007a44 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    7a44:	defffe04 	addi	sp,sp,-8
    7a48:	df000115 	stw	fp,4(sp)
    7a4c:	df000104 	addi	fp,sp,4
    7a50:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    7a54:	e0bfff17 	ldw	r2,-4(fp)
    7a58:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    7a5c:	e0bfff17 	ldw	r2,-4(fp)
    7a60:	10800a17 	ldw	r2,40(r2)
    7a64:	1007883a 	mov	r3,r2
    7a68:	00800044 	movi	r2,1
    7a6c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    7a70:	e0bfff17 	ldw	r2,-4(fp)
    7a74:	10c00b17 	ldw	r3,44(r2)
    7a78:	e0bfff17 	ldw	r2,-4(fp)
    7a7c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    7a80:	e0bfff17 	ldw	r2,-4(fp)
    7a84:	11000b15 	stw	r4,44(r2)
	return 0;
    7a88:	0005883a 	mov	r2,zero
}
    7a8c:	e037883a 	mov	sp,fp
    7a90:	df000017 	ldw	fp,0(sp)
    7a94:	dec00104 	addi	sp,sp,4
    7a98:	f800283a 	ret

00007a9c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    7a9c:	defffe04 	addi	sp,sp,-8
    7aa0:	df000115 	stw	fp,4(sp)
    7aa4:	df000104 	addi	fp,sp,4
    7aa8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    7aac:	e0bfff17 	ldw	r2,-4(fp)
    7ab0:	10800a17 	ldw	r2,40(r2)
    7ab4:	10800304 	addi	r2,r2,12
    7ab8:	10800037 	ldwio	r2,0(r2)
    7abc:	1080004c 	andi	r2,r2,1
}
    7ac0:	e037883a 	mov	sp,fp
    7ac4:	df000017 	ldw	fp,0(sp)
    7ac8:	dec00104 	addi	sp,sp,4
    7acc:	f800283a 	ret

00007ad0 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    7ad0:	defff604 	addi	sp,sp,-40
    7ad4:	df000915 	stw	fp,36(sp)
    7ad8:	df000904 	addi	fp,sp,36
    7adc:	e13ff715 	stw	r4,-36(fp)
    7ae0:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    7ae4:	e0bff817 	ldw	r2,-32(fp)
    7ae8:	10800058 	cmpnei	r2,r2,1
    7aec:	1000041e 	bne	r2,zero,7b00 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
    7af0:	e0bff717 	ldw	r2,-36(fp)
    7af4:	10800c17 	ldw	r2,48(r2)
    7af8:	e0bfff15 	stw	r2,-4(fp)
    7afc:	00000306 	br	7b0c <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
    7b00:	e0bff717 	ldw	r2,-36(fp)
    7b04:	10800b17 	ldw	r2,44(r2)
    7b08:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
    7b0c:	e0bff717 	ldw	r2,-36(fp)
    7b10:	10800f17 	ldw	r2,60(r2)
    7b14:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7b18:	e0bff717 	ldw	r2,-36(fp)
    7b1c:	10800e17 	ldw	r2,56(r2)
    7b20:	10800098 	cmpnei	r2,r2,2
    7b24:	1000051e 	bne	r2,zero,7b3c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
    7b28:	e0fffe17 	ldw	r3,-8(fp)
    7b2c:	e0fffe17 	ldw	r3,-8(fp)
    7b30:	18c5883a 	add	r2,r3,r3
    7b34:	e0bffe15 	stw	r2,-8(fp)
    7b38:	00000506 	br	7b50 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
    7b3c:	e13ffe17 	ldw	r4,-8(fp)
    7b40:	e13ffe17 	ldw	r4,-8(fp)
    7b44:	2105883a 	add	r2,r4,r4
    7b48:	1085883a 	add	r2,r2,r2
    7b4c:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
    7b50:	e0bff717 	ldw	r2,-36(fp)
    7b54:	10801017 	ldw	r2,64(r2)
    7b58:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    7b5c:	e0bff717 	ldw	r2,-36(fp)
    7b60:	10800d17 	ldw	r2,52(r2)
    7b64:	1004c03a 	cmpne	r2,r2,zero
    7b68:	10001e1e 	bne	r2,zero,7be4 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    7b6c:	e0bff717 	ldw	r2,-36(fp)
    7b70:	10801317 	ldw	r2,76(r2)
    7b74:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
    7b78:	e03ffb15 	stw	zero,-20(fp)
    7b7c:	00001506 	br	7bd4 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
    7b80:	e03ffc15 	stw	zero,-16(fp)
    7b84:	00000706 	br	7ba4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
    7b88:	e0ffff17 	ldw	r3,-4(fp)
    7b8c:	e0bffc17 	ldw	r2,-16(fp)
    7b90:	1885883a 	add	r2,r3,r2
    7b94:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    7b98:	e0bffc17 	ldw	r2,-16(fp)
    7b9c:	10800104 	addi	r2,r2,4
    7ba0:	e0bffc15 	stw	r2,-16(fp)
    7ba4:	e0fffc17 	ldw	r3,-16(fp)
    7ba8:	e13ffe17 	ldw	r4,-8(fp)
    7bac:	193ff636 	bltu	r3,r4,7b88 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    7bb0:	e0fffa17 	ldw	r3,-24(fp)
    7bb4:	00800044 	movi	r2,1
    7bb8:	10c4983a 	sll	r2,r2,r3
    7bbc:	e0ffff17 	ldw	r3,-4(fp)
    7bc0:	1887883a 	add	r3,r3,r2
    7bc4:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    7bc8:	e13ffb17 	ldw	r4,-20(fp)
    7bcc:	21000044 	addi	r4,r4,1
    7bd0:	e13ffb15 	stw	r4,-20(fp)
    7bd4:	e0bffb17 	ldw	r2,-20(fp)
    7bd8:	e0fffd17 	ldw	r3,-12(fp)
    7bdc:	10ffe836 	bltu	r2,r3,7b80 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    7be0:	00001006 	br	7c24 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    7be4:	e13ffd17 	ldw	r4,-12(fp)
    7be8:	e0bffe17 	ldw	r2,-8(fp)
    7bec:	2089383a 	mul	r4,r4,r2
    7bf0:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
    7bf4:	e03ff915 	stw	zero,-28(fp)
    7bf8:	00000706 	br	7c18 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
    7bfc:	e0ffff17 	ldw	r3,-4(fp)
    7c00:	e0bff917 	ldw	r2,-28(fp)
    7c04:	1885883a 	add	r2,r3,r2
    7c08:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    7c0c:	e0fff917 	ldw	r3,-28(fp)
    7c10:	18c00104 	addi	r3,r3,4
    7c14:	e0fff915 	stw	r3,-28(fp)
    7c18:	e0bff917 	ldw	r2,-28(fp)
    7c1c:	e13ffd17 	ldw	r4,-12(fp)
    7c20:	113ff636 	bltu	r2,r4,7bfc <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    7c24:	e037883a 	mov	sp,fp
    7c28:	df000017 	ldw	fp,0(sp)
    7c2c:	dec00104 	addi	sp,sp,4
    7c30:	f800283a 	ret

00007c34 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    7c34:	deffed04 	addi	sp,sp,-76
    7c38:	df001215 	stw	fp,72(sp)
    7c3c:	df001204 	addi	fp,sp,72
    7c40:	e13fee15 	stw	r4,-72(fp)
    7c44:	e17fef15 	stw	r5,-68(fp)
    7c48:	e1bff015 	stw	r6,-64(fp)
    7c4c:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    7c50:	e0bfee17 	ldw	r2,-72(fp)
    7c54:	10800f17 	ldw	r2,60(r2)
    7c58:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    7c5c:	e0bfee17 	ldw	r2,-72(fp)
    7c60:	10801017 	ldw	r2,64(r2)
    7c64:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    7c68:	e0bfef17 	ldw	r2,-68(fp)
    7c6c:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
    7c70:	e0fff117 	ldw	r3,-60(fp)
    7c74:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
    7c78:	e13ff017 	ldw	r4,-64(fp)
    7c7c:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
    7c80:	e0800117 	ldw	r2,4(fp)
    7c84:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
    7c88:	e0c00217 	ldw	r3,8(fp)
    7c8c:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    7c90:	e13ffa17 	ldw	r4,-24(fp)
    7c94:	e0bffb17 	ldw	r2,-20(fp)
    7c98:	2080062e 	bgeu	r4,r2,7cb4 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
    7c9c:	e0fffb17 	ldw	r3,-20(fp)
    7ca0:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
    7ca4:	e13ffa17 	ldw	r4,-24(fp)
    7ca8:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
    7cac:	e0bffc17 	ldw	r2,-16(fp)
    7cb0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
    7cb4:	e0fff817 	ldw	r3,-32(fp)
    7cb8:	e13ff917 	ldw	r4,-28(fp)
    7cbc:	1900062e 	bgeu	r3,r4,7cd8 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
    7cc0:	e0bff917 	ldw	r2,-28(fp)
    7cc4:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
    7cc8:	e0fff817 	ldw	r3,-32(fp)
    7ccc:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
    7cd0:	e13ffc17 	ldw	r4,-16(fp)
    7cd4:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    7cd8:	e0bffb17 	ldw	r2,-20(fp)
    7cdc:	e0fffe17 	ldw	r3,-8(fp)
    7ce0:	10c10d2e 	bgeu	r2,r3,8118 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
    7ce4:	e13ff917 	ldw	r4,-28(fp)
    7ce8:	e0bffd17 	ldw	r2,-12(fp)
    7cec:	20800136 	bltu	r4,r2,7cf4 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    7cf0:	00010906 	br	8118 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    7cf4:	e0fffa17 	ldw	r3,-24(fp)
    7cf8:	e13ffe17 	ldw	r4,-8(fp)
    7cfc:	19000336 	bltu	r3,r4,7d0c <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
    7d00:	e0bffe17 	ldw	r2,-8(fp)
    7d04:	10bfffc4 	addi	r2,r2,-1
    7d08:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    7d0c:	e0fff817 	ldw	r3,-32(fp)
    7d10:	e13ffd17 	ldw	r4,-12(fp)
    7d14:	19000336 	bltu	r3,r4,7d24 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
    7d18:	e0bffd17 	ldw	r2,-12(fp)
    7d1c:	10bfffc4 	addi	r2,r2,-1
    7d20:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    7d24:	e0800317 	ldw	r2,12(fp)
    7d28:	10800058 	cmpnei	r2,r2,1
    7d2c:	1000041e 	bne	r2,zero,7d40 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
    7d30:	e0bfee17 	ldw	r2,-72(fp)
    7d34:	10800c17 	ldw	r2,48(r2)
    7d38:	e0bfff15 	stw	r2,-4(fp)
    7d3c:	00000306 	br	7d4c <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
    7d40:	e0bfee17 	ldw	r2,-72(fp)
    7d44:	10800b17 	ldw	r2,44(r2)
    7d48:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    7d4c:	e0bfee17 	ldw	r2,-72(fp)
    7d50:	10800d17 	ldw	r2,52(r2)
    7d54:	1004c03a 	cmpne	r2,r2,zero
    7d58:	1000721e 	bne	r2,zero,7f24 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    7d5c:	e0bfee17 	ldw	r2,-72(fp)
    7d60:	10801317 	ldw	r2,76(r2)
    7d64:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
    7d68:	e0bff417 	ldw	r2,-48(fp)
    7d6c:	e0fff917 	ldw	r3,-28(fp)
    7d70:	1884983a 	sll	r2,r3,r2
    7d74:	e13fff17 	ldw	r4,-4(fp)
    7d78:	2089883a 	add	r4,r4,r2
    7d7c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    7d80:	e0bfee17 	ldw	r2,-72(fp)
    7d84:	10800e17 	ldw	r2,56(r2)
    7d88:	10800058 	cmpnei	r2,r2,1
    7d8c:	10001e1e 	bne	r2,zero,7e08 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
    7d90:	e0bff917 	ldw	r2,-28(fp)
    7d94:	e0bff515 	stw	r2,-44(fp)
    7d98:	00001706 	br	7df8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
    7d9c:	e0fffb17 	ldw	r3,-20(fp)
    7da0:	e0fff615 	stw	r3,-40(fp)
    7da4:	00000806 	br	7dc8 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
    7da8:	e0ffff17 	ldw	r3,-4(fp)
    7dac:	e0bff617 	ldw	r2,-40(fp)
    7db0:	1885883a 	add	r2,r3,r2
    7db4:	e0fff717 	ldw	r3,-36(fp)
    7db8:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7dbc:	e13ff617 	ldw	r4,-40(fp)
    7dc0:	21000044 	addi	r4,r4,1
    7dc4:	e13ff615 	stw	r4,-40(fp)
    7dc8:	e0bffa17 	ldw	r2,-24(fp)
    7dcc:	e0fff617 	ldw	r3,-40(fp)
    7dd0:	10fff52e 	bgeu	r2,r3,7da8 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    7dd4:	e0fff417 	ldw	r3,-48(fp)
    7dd8:	00800044 	movi	r2,1
    7ddc:	10c4983a 	sll	r2,r2,r3
    7de0:	e13fff17 	ldw	r4,-4(fp)
    7de4:	2089883a 	add	r4,r4,r2
    7de8:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    7dec:	e0bff517 	ldw	r2,-44(fp)
    7df0:	10800044 	addi	r2,r2,1
    7df4:	e0bff515 	stw	r2,-44(fp)
    7df8:	e0fff817 	ldw	r3,-32(fp)
    7dfc:	e13ff517 	ldw	r4,-44(fp)
    7e00:	193fe62e 	bgeu	r3,r4,7d9c <alt_up_pixel_buffer_dma_draw_box+0x168>
    7e04:	0000c406 	br	8118 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7e08:	e0bfee17 	ldw	r2,-72(fp)
    7e0c:	10800e17 	ldw	r2,56(r2)
    7e10:	10800098 	cmpnei	r2,r2,2
    7e14:	1000211e 	bne	r2,zero,7e9c <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
    7e18:	e0bff917 	ldw	r2,-28(fp)
    7e1c:	e0bff515 	stw	r2,-44(fp)
    7e20:	00001a06 	br	7e8c <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
    7e24:	e0fffb17 	ldw	r3,-20(fp)
    7e28:	e0fff615 	stw	r3,-40(fp)
    7e2c:	00000b06 	br	7e5c <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    7e30:	e13ff617 	ldw	r4,-40(fp)
    7e34:	e13ff617 	ldw	r4,-40(fp)
    7e38:	2105883a 	add	r2,r4,r4
    7e3c:	1007883a 	mov	r3,r2
    7e40:	e0bfff17 	ldw	r2,-4(fp)
    7e44:	1885883a 	add	r2,r3,r2
    7e48:	e0fff717 	ldw	r3,-36(fp)
    7e4c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7e50:	e0bff617 	ldw	r2,-40(fp)
    7e54:	10800044 	addi	r2,r2,1
    7e58:	e0bff615 	stw	r2,-40(fp)
    7e5c:	e0fffa17 	ldw	r3,-24(fp)
    7e60:	e13ff617 	ldw	r4,-40(fp)
    7e64:	193ff22e 	bgeu	r3,r4,7e30 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    7e68:	e0fff417 	ldw	r3,-48(fp)
    7e6c:	00800044 	movi	r2,1
    7e70:	10c4983a 	sll	r2,r2,r3
    7e74:	e0ffff17 	ldw	r3,-4(fp)
    7e78:	1887883a 	add	r3,r3,r2
    7e7c:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    7e80:	e13ff517 	ldw	r4,-44(fp)
    7e84:	21000044 	addi	r4,r4,1
    7e88:	e13ff515 	stw	r4,-44(fp)
    7e8c:	e0bff817 	ldw	r2,-32(fp)
    7e90:	e0fff517 	ldw	r3,-44(fp)
    7e94:	10ffe32e 	bgeu	r2,r3,7e24 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
    7e98:	00009f06 	br	8118 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    7e9c:	e13ff917 	ldw	r4,-28(fp)
    7ea0:	e13ff515 	stw	r4,-44(fp)
    7ea4:	00001b06 	br	7f14 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
    7ea8:	e0bffb17 	ldw	r2,-20(fp)
    7eac:	e0bff615 	stw	r2,-40(fp)
    7eb0:	00000c06 	br	7ee4 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    7eb4:	e0fff617 	ldw	r3,-40(fp)
    7eb8:	e0fff617 	ldw	r3,-40(fp)
    7ebc:	18c5883a 	add	r2,r3,r3
    7ec0:	1085883a 	add	r2,r2,r2
    7ec4:	1007883a 	mov	r3,r2
    7ec8:	e0bfff17 	ldw	r2,-4(fp)
    7ecc:	1885883a 	add	r2,r3,r2
    7ed0:	e0fff717 	ldw	r3,-36(fp)
    7ed4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7ed8:	e13ff617 	ldw	r4,-40(fp)
    7edc:	21000044 	addi	r4,r4,1
    7ee0:	e13ff615 	stw	r4,-40(fp)
    7ee4:	e0bffa17 	ldw	r2,-24(fp)
    7ee8:	e0fff617 	ldw	r3,-40(fp)
    7eec:	10fff12e 	bgeu	r2,r3,7eb4 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    7ef0:	e0fff417 	ldw	r3,-48(fp)
    7ef4:	00800044 	movi	r2,1
    7ef8:	10c4983a 	sll	r2,r2,r3
    7efc:	e13fff17 	ldw	r4,-4(fp)
    7f00:	2089883a 	add	r4,r4,r2
    7f04:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    7f08:	e0bff517 	ldw	r2,-44(fp)
    7f0c:	10800044 	addi	r2,r2,1
    7f10:	e0bff515 	stw	r2,-44(fp)
    7f14:	e0fff817 	ldw	r3,-32(fp)
    7f18:	e13ff517 	ldw	r4,-44(fp)
    7f1c:	193fe22e 	bgeu	r3,r4,7ea8 <alt_up_pixel_buffer_dma_draw_box+0x274>
    7f20:	00007d06 	br	8118 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    7f24:	e0bfee17 	ldw	r2,-72(fp)
    7f28:	10800e17 	ldw	r2,56(r2)
    7f2c:	10800058 	cmpnei	r2,r2,1
    7f30:	1000221e 	bne	r2,zero,7fbc <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
    7f34:	e0fff917 	ldw	r3,-28(fp)
    7f38:	e13ffe17 	ldw	r4,-8(fp)
    7f3c:	1905383a 	mul	r2,r3,r4
    7f40:	e0ffff17 	ldw	r3,-4(fp)
    7f44:	1887883a 	add	r3,r3,r2
    7f48:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    7f4c:	e13ff917 	ldw	r4,-28(fp)
    7f50:	e13ff215 	stw	r4,-56(fp)
    7f54:	00001506 	br	7fac <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
    7f58:	e0bffb17 	ldw	r2,-20(fp)
    7f5c:	e0bff315 	stw	r2,-52(fp)
    7f60:	00000806 	br	7f84 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
    7f64:	e0ffff17 	ldw	r3,-4(fp)
    7f68:	e0bff317 	ldw	r2,-52(fp)
    7f6c:	1885883a 	add	r2,r3,r2
    7f70:	e0fff717 	ldw	r3,-36(fp)
    7f74:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    7f78:	e0fff317 	ldw	r3,-52(fp)
    7f7c:	18c00044 	addi	r3,r3,1
    7f80:	e0fff315 	stw	r3,-52(fp)
    7f84:	e13ffa17 	ldw	r4,-24(fp)
    7f88:	e0bff317 	ldw	r2,-52(fp)
    7f8c:	20bff52e 	bgeu	r4,r2,7f64 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    7f90:	e0ffff17 	ldw	r3,-4(fp)
    7f94:	e13ffe17 	ldw	r4,-8(fp)
    7f98:	1907883a 	add	r3,r3,r4
    7f9c:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    7fa0:	e0bff217 	ldw	r2,-56(fp)
    7fa4:	10800044 	addi	r2,r2,1
    7fa8:	e0bff215 	stw	r2,-56(fp)
    7fac:	e0fff817 	ldw	r3,-32(fp)
    7fb0:	e13ff217 	ldw	r4,-56(fp)
    7fb4:	193fe82e 	bgeu	r3,r4,7f58 <alt_up_pixel_buffer_dma_draw_box+0x324>
    7fb8:	00005706 	br	8118 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    7fbc:	e0bfee17 	ldw	r2,-72(fp)
    7fc0:	10800e17 	ldw	r2,56(r2)
    7fc4:	10800098 	cmpnei	r2,r2,2
    7fc8:	1000291e 	bne	r2,zero,8070 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
    7fcc:	e0fffe17 	ldw	r3,-8(fp)
    7fd0:	e0fffe17 	ldw	r3,-8(fp)
    7fd4:	18c5883a 	add	r2,r3,r3
    7fd8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    7fdc:	e13ff917 	ldw	r4,-28(fp)
    7fe0:	e0fffe17 	ldw	r3,-8(fp)
    7fe4:	20c5383a 	mul	r2,r4,r3
    7fe8:	e13fff17 	ldw	r4,-4(fp)
    7fec:	2089883a 	add	r4,r4,r2
    7ff0:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    7ff4:	e0bff917 	ldw	r2,-28(fp)
    7ff8:	e0bff215 	stw	r2,-56(fp)
    7ffc:	00001806 	br	8060 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
    8000:	e0fffb17 	ldw	r3,-20(fp)
    8004:	e0fff315 	stw	r3,-52(fp)
    8008:	00000b06 	br	8038 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    800c:	e13ff317 	ldw	r4,-52(fp)
    8010:	e13ff317 	ldw	r4,-52(fp)
    8014:	2105883a 	add	r2,r4,r4
    8018:	1007883a 	mov	r3,r2
    801c:	e0bfff17 	ldw	r2,-4(fp)
    8020:	1885883a 	add	r2,r3,r2
    8024:	e0fff717 	ldw	r3,-36(fp)
    8028:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    802c:	e0bff317 	ldw	r2,-52(fp)
    8030:	10800044 	addi	r2,r2,1
    8034:	e0bff315 	stw	r2,-52(fp)
    8038:	e0fffa17 	ldw	r3,-24(fp)
    803c:	e13ff317 	ldw	r4,-52(fp)
    8040:	193ff22e 	bgeu	r3,r4,800c <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    8044:	e0bfff17 	ldw	r2,-4(fp)
    8048:	e0fffe17 	ldw	r3,-8(fp)
    804c:	10c5883a 	add	r2,r2,r3
    8050:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    8054:	e13ff217 	ldw	r4,-56(fp)
    8058:	21000044 	addi	r4,r4,1
    805c:	e13ff215 	stw	r4,-56(fp)
    8060:	e0bff817 	ldw	r2,-32(fp)
    8064:	e0fff217 	ldw	r3,-56(fp)
    8068:	10ffe52e 	bgeu	r2,r3,8000 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
    806c:	00002a06 	br	8118 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    8070:	e13ffe17 	ldw	r4,-8(fp)
    8074:	e13ffe17 	ldw	r4,-8(fp)
    8078:	2105883a 	add	r2,r4,r4
    807c:	1085883a 	add	r2,r2,r2
    8080:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    8084:	e0fff917 	ldw	r3,-28(fp)
    8088:	e13ffe17 	ldw	r4,-8(fp)
    808c:	1905383a 	mul	r2,r3,r4
    8090:	e0ffff17 	ldw	r3,-4(fp)
    8094:	1887883a 	add	r3,r3,r2
    8098:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    809c:	e13ff917 	ldw	r4,-28(fp)
    80a0:	e13ff215 	stw	r4,-56(fp)
    80a4:	00001906 	br	810c <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
    80a8:	e0bffb17 	ldw	r2,-20(fp)
    80ac:	e0bff315 	stw	r2,-52(fp)
    80b0:	00000c06 	br	80e4 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    80b4:	e0fff317 	ldw	r3,-52(fp)
    80b8:	e0fff317 	ldw	r3,-52(fp)
    80bc:	18c5883a 	add	r2,r3,r3
    80c0:	1085883a 	add	r2,r2,r2
    80c4:	1007883a 	mov	r3,r2
    80c8:	e0bfff17 	ldw	r2,-4(fp)
    80cc:	1885883a 	add	r2,r3,r2
    80d0:	e0fff717 	ldw	r3,-36(fp)
    80d4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    80d8:	e13ff317 	ldw	r4,-52(fp)
    80dc:	21000044 	addi	r4,r4,1
    80e0:	e13ff315 	stw	r4,-52(fp)
    80e4:	e0bffa17 	ldw	r2,-24(fp)
    80e8:	e0fff317 	ldw	r3,-52(fp)
    80ec:	10fff12e 	bgeu	r2,r3,80b4 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    80f0:	e13fff17 	ldw	r4,-4(fp)
    80f4:	e0bffe17 	ldw	r2,-8(fp)
    80f8:	2089883a 	add	r4,r4,r2
    80fc:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    8100:	e0fff217 	ldw	r3,-56(fp)
    8104:	18c00044 	addi	r3,r3,1
    8108:	e0fff215 	stw	r3,-56(fp)
    810c:	e13ff817 	ldw	r4,-32(fp)
    8110:	e0bff217 	ldw	r2,-56(fp)
    8114:	20bfe42e 	bgeu	r4,r2,80a8 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
    8118:	e037883a 	mov	sp,fp
    811c:	df000017 	ldw	fp,0(sp)
    8120:	dec00104 	addi	sp,sp,4
    8124:	f800283a 	ret

00008128 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    8128:	defff204 	addi	sp,sp,-56
    812c:	df000d15 	stw	fp,52(sp)
    8130:	df000d04 	addi	fp,sp,52
    8134:	e13ff315 	stw	r4,-52(fp)
    8138:	e17ff415 	stw	r5,-48(fp)
    813c:	e1bff515 	stw	r6,-44(fp)
    8140:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    8144:	e0bff317 	ldw	r2,-52(fp)
    8148:	10800f17 	ldw	r2,60(r2)
    814c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    8150:	e0bff317 	ldw	r2,-52(fp)
    8154:	10801017 	ldw	r2,64(r2)
    8158:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    815c:	e0bff417 	ldw	r2,-48(fp)
    8160:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
    8164:	e0fff517 	ldw	r3,-44(fp)
    8168:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
    816c:	e13ff617 	ldw	r4,-40(fp)
    8170:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    8174:	e0800117 	ldw	r2,4(fp)
    8178:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    817c:	e0fffb17 	ldw	r3,-20(fp)
    8180:	e13ffc17 	ldw	r4,-16(fp)
    8184:	1900042e 	bgeu	r3,r4,8198 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
    8188:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
    818c:	e0fffb17 	ldw	r3,-20(fp)
    8190:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
    8194:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    8198:	e13ffc17 	ldw	r4,-16(fp)
    819c:	e0bffe17 	ldw	r2,-8(fp)
    81a0:	2080b12e 	bgeu	r4,r2,8468 <alt_up_pixel_buffer_dma_draw_hline+0x340>
    81a4:	e0fffa17 	ldw	r3,-24(fp)
    81a8:	e13ffd17 	ldw	r4,-12(fp)
    81ac:	19000136 	bltu	r3,r4,81b4 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    81b0:	0000ad06 	br	8468 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    81b4:	e0bffb17 	ldw	r2,-20(fp)
    81b8:	e0fffe17 	ldw	r3,-8(fp)
    81bc:	10c00336 	bltu	r2,r3,81cc <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
    81c0:	e13ffe17 	ldw	r4,-8(fp)
    81c4:	213fffc4 	addi	r4,r4,-1
    81c8:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    81cc:	e0800217 	ldw	r2,8(fp)
    81d0:	10800058 	cmpnei	r2,r2,1
    81d4:	1000041e 	bne	r2,zero,81e8 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    81d8:	e0bff317 	ldw	r2,-52(fp)
    81dc:	10800c17 	ldw	r2,48(r2)
    81e0:	e0bfff15 	stw	r2,-4(fp)
    81e4:	00000306 	br	81f4 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    81e8:	e0bff317 	ldw	r2,-52(fp)
    81ec:	10800b17 	ldw	r2,44(r2)
    81f0:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    81f4:	e0bff317 	ldw	r2,-52(fp)
    81f8:	10800d17 	ldw	r2,52(r2)
    81fc:	1004c03a 	cmpne	r2,r2,zero
    8200:	1000431e 	bne	r2,zero,8310 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    8204:	e0bff317 	ldw	r2,-52(fp)
    8208:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
    820c:	e0fffa17 	ldw	r3,-24(fp)
    8210:	1884983a 	sll	r2,r3,r2
    8214:	e13fff17 	ldw	r4,-4(fp)
    8218:	2089883a 	add	r4,r4,r2
    821c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    8220:	e0bff317 	ldw	r2,-52(fp)
    8224:	10800e17 	ldw	r2,56(r2)
    8228:	10800058 	cmpnei	r2,r2,1
    822c:	10000f1e 	bne	r2,zero,826c <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
    8230:	e0bffc17 	ldw	r2,-16(fp)
    8234:	e0bff815 	stw	r2,-32(fp)
    8238:	00000806 	br	825c <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
    823c:	e0ffff17 	ldw	r3,-4(fp)
    8240:	e0bff817 	ldw	r2,-32(fp)
    8244:	1885883a 	add	r2,r3,r2
    8248:	e0fff917 	ldw	r3,-28(fp)
    824c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    8250:	e0fff817 	ldw	r3,-32(fp)
    8254:	18c00044 	addi	r3,r3,1
    8258:	e0fff815 	stw	r3,-32(fp)
    825c:	e13ffb17 	ldw	r4,-20(fp)
    8260:	e0bff817 	ldw	r2,-32(fp)
    8264:	20bff52e 	bgeu	r4,r2,823c <alt_up_pixel_buffer_dma_draw_hline+0x114>
    8268:	00007f06 	br	8468 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    826c:	e0bff317 	ldw	r2,-52(fp)
    8270:	10800e17 	ldw	r2,56(r2)
    8274:	10800098 	cmpnei	r2,r2,2
    8278:	1000121e 	bne	r2,zero,82c4 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
    827c:	e0fffc17 	ldw	r3,-16(fp)
    8280:	e0fff815 	stw	r3,-32(fp)
    8284:	00000b06 	br	82b4 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    8288:	e13ff817 	ldw	r4,-32(fp)
    828c:	e13ff817 	ldw	r4,-32(fp)
    8290:	2105883a 	add	r2,r4,r4
    8294:	1007883a 	mov	r3,r2
    8298:	e0bfff17 	ldw	r2,-4(fp)
    829c:	1885883a 	add	r2,r3,r2
    82a0:	e0fff917 	ldw	r3,-28(fp)
    82a4:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    82a8:	e0bff817 	ldw	r2,-32(fp)
    82ac:	10800044 	addi	r2,r2,1
    82b0:	e0bff815 	stw	r2,-32(fp)
    82b4:	e0fffb17 	ldw	r3,-20(fp)
    82b8:	e13ff817 	ldw	r4,-32(fp)
    82bc:	193ff22e 	bgeu	r3,r4,8288 <alt_up_pixel_buffer_dma_draw_hline+0x160>
    82c0:	00006906 	br	8468 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    82c4:	e0bffc17 	ldw	r2,-16(fp)
    82c8:	e0bff815 	stw	r2,-32(fp)
    82cc:	00000c06 	br	8300 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    82d0:	e0fff817 	ldw	r3,-32(fp)
    82d4:	e0fff817 	ldw	r3,-32(fp)
    82d8:	18c5883a 	add	r2,r3,r3
    82dc:	1085883a 	add	r2,r2,r2
    82e0:	1007883a 	mov	r3,r2
    82e4:	e0bfff17 	ldw	r2,-4(fp)
    82e8:	1885883a 	add	r2,r3,r2
    82ec:	e0fff917 	ldw	r3,-28(fp)
    82f0:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    82f4:	e13ff817 	ldw	r4,-32(fp)
    82f8:	21000044 	addi	r4,r4,1
    82fc:	e13ff815 	stw	r4,-32(fp)
    8300:	e0bffb17 	ldw	r2,-20(fp)
    8304:	e0fff817 	ldw	r3,-32(fp)
    8308:	10fff12e 	bgeu	r2,r3,82d0 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
    830c:	00005606 	br	8468 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    8310:	e0bff317 	ldw	r2,-52(fp)
    8314:	10800e17 	ldw	r2,56(r2)
    8318:	10800058 	cmpnei	r2,r2,1
    831c:	1000151e 	bne	r2,zero,8374 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
    8320:	e13ffa17 	ldw	r4,-24(fp)
    8324:	e0fffe17 	ldw	r3,-8(fp)
    8328:	20c5383a 	mul	r2,r4,r3
    832c:	e13fff17 	ldw	r4,-4(fp)
    8330:	2089883a 	add	r4,r4,r2
    8334:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    8338:	e0bffc17 	ldw	r2,-16(fp)
    833c:	e0bff715 	stw	r2,-36(fp)
    8340:	00000806 	br	8364 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    8344:	e0ffff17 	ldw	r3,-4(fp)
    8348:	e0bff717 	ldw	r2,-36(fp)
    834c:	1885883a 	add	r2,r3,r2
    8350:	e0fff917 	ldw	r3,-28(fp)
    8354:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    8358:	e0fff717 	ldw	r3,-36(fp)
    835c:	18c00044 	addi	r3,r3,1
    8360:	e0fff715 	stw	r3,-36(fp)
    8364:	e13ffb17 	ldw	r4,-20(fp)
    8368:	e0bff717 	ldw	r2,-36(fp)
    836c:	20bff52e 	bgeu	r4,r2,8344 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
    8370:	00003d06 	br	8468 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    8374:	e0bff317 	ldw	r2,-52(fp)
    8378:	10800e17 	ldw	r2,56(r2)
    837c:	10800098 	cmpnei	r2,r2,2
    8380:	10001c1e 	bne	r2,zero,83f4 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
    8384:	e0fffe17 	ldw	r3,-8(fp)
    8388:	e0fffe17 	ldw	r3,-8(fp)
    838c:	18c5883a 	add	r2,r3,r3
    8390:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    8394:	e13ffa17 	ldw	r4,-24(fp)
    8398:	e0fffe17 	ldw	r3,-8(fp)
    839c:	20c5383a 	mul	r2,r4,r3
    83a0:	e13fff17 	ldw	r4,-4(fp)
    83a4:	2089883a 	add	r4,r4,r2
    83a8:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    83ac:	e0bffc17 	ldw	r2,-16(fp)
    83b0:	e0bff715 	stw	r2,-36(fp)
    83b4:	00000b06 	br	83e4 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    83b8:	e0fff717 	ldw	r3,-36(fp)
    83bc:	e0fff717 	ldw	r3,-36(fp)
    83c0:	18c5883a 	add	r2,r3,r3
    83c4:	1007883a 	mov	r3,r2
    83c8:	e0bfff17 	ldw	r2,-4(fp)
    83cc:	1885883a 	add	r2,r3,r2
    83d0:	e0fff917 	ldw	r3,-28(fp)
    83d4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    83d8:	e13ff717 	ldw	r4,-36(fp)
    83dc:	21000044 	addi	r4,r4,1
    83e0:	e13ff715 	stw	r4,-36(fp)
    83e4:	e0bffb17 	ldw	r2,-20(fp)
    83e8:	e0fff717 	ldw	r3,-36(fp)
    83ec:	10fff22e 	bgeu	r2,r3,83b8 <alt_up_pixel_buffer_dma_draw_hline+0x290>
    83f0:	00001d06 	br	8468 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    83f4:	e13ffe17 	ldw	r4,-8(fp)
    83f8:	e13ffe17 	ldw	r4,-8(fp)
    83fc:	2105883a 	add	r2,r4,r4
    8400:	1085883a 	add	r2,r2,r2
    8404:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
    8408:	e0fffa17 	ldw	r3,-24(fp)
    840c:	e13ffe17 	ldw	r4,-8(fp)
    8410:	1905383a 	mul	r2,r3,r4
    8414:	e0ffff17 	ldw	r3,-4(fp)
    8418:	1887883a 	add	r3,r3,r2
    841c:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
    8420:	e13ffc17 	ldw	r4,-16(fp)
    8424:	e13ff715 	stw	r4,-36(fp)
    8428:	00000c06 	br	845c <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    842c:	e0fff717 	ldw	r3,-36(fp)
    8430:	e0fff717 	ldw	r3,-36(fp)
    8434:	18c5883a 	add	r2,r3,r3
    8438:	1085883a 	add	r2,r2,r2
    843c:	1007883a 	mov	r3,r2
    8440:	e0bfff17 	ldw	r2,-4(fp)
    8444:	1885883a 	add	r2,r3,r2
    8448:	e0fff917 	ldw	r3,-28(fp)
    844c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    8450:	e13ff717 	ldw	r4,-36(fp)
    8454:	21000044 	addi	r4,r4,1
    8458:	e13ff715 	stw	r4,-36(fp)
    845c:	e0bffb17 	ldw	r2,-20(fp)
    8460:	e0fff717 	ldw	r3,-36(fp)
    8464:	10fff12e 	bgeu	r2,r3,842c <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
    8468:	e037883a 	mov	sp,fp
    846c:	df000017 	ldw	fp,0(sp)
    8470:	dec00104 	addi	sp,sp,4
    8474:	f800283a 	ret

00008478 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    8478:	defff104 	addi	sp,sp,-60
    847c:	df000e15 	stw	fp,56(sp)
    8480:	df000e04 	addi	fp,sp,56
    8484:	e13ff215 	stw	r4,-56(fp)
    8488:	e17ff315 	stw	r5,-52(fp)
    848c:	e1bff415 	stw	r6,-48(fp)
    8490:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    8494:	e0bff217 	ldw	r2,-56(fp)
    8498:	10800f17 	ldw	r2,60(r2)
    849c:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    84a0:	e0bff217 	ldw	r2,-56(fp)
    84a4:	10801017 	ldw	r2,64(r2)
    84a8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
    84ac:	e0bff317 	ldw	r2,-52(fp)
    84b0:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
    84b4:	e0fff417 	ldw	r3,-48(fp)
    84b8:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
    84bc:	e13ff517 	ldw	r4,-44(fp)
    84c0:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    84c4:	e0800117 	ldw	r2,4(fp)
    84c8:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    84cc:	e0fffa17 	ldw	r3,-24(fp)
    84d0:	e13ffb17 	ldw	r4,-20(fp)
    84d4:	1900042e 	bgeu	r3,r4,84e8 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
    84d8:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
    84dc:	e0fffa17 	ldw	r3,-24(fp)
    84e0:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
    84e4:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    84e8:	e13ffc17 	ldw	r4,-16(fp)
    84ec:	e0bffe17 	ldw	r2,-8(fp)
    84f0:	2080d12e 	bgeu	r4,r2,8838 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
    84f4:	e0fffb17 	ldw	r3,-20(fp)
    84f8:	e13ffd17 	ldw	r4,-12(fp)
    84fc:	19000136 	bltu	r3,r4,8504 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    8500:	0000cd06 	br	8838 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    8504:	e0bffa17 	ldw	r2,-24(fp)
    8508:	e0fffd17 	ldw	r3,-12(fp)
    850c:	10c00336 	bltu	r2,r3,851c <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
    8510:	e13ffd17 	ldw	r4,-12(fp)
    8514:	213fffc4 	addi	r4,r4,-1
    8518:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    851c:	e0800217 	ldw	r2,8(fp)
    8520:	10800058 	cmpnei	r2,r2,1
    8524:	1000041e 	bne	r2,zero,8538 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    8528:	e0bff217 	ldw	r2,-56(fp)
    852c:	10800c17 	ldw	r2,48(r2)
    8530:	e0bfff15 	stw	r2,-4(fp)
    8534:	00000306 	br	8544 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    8538:	e0bff217 	ldw	r2,-56(fp)
    853c:	10800b17 	ldw	r2,44(r2)
    8540:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    8544:	e0bff217 	ldw	r2,-56(fp)
    8548:	10800d17 	ldw	r2,52(r2)
    854c:	1004c03a 	cmpne	r2,r2,zero
    8550:	1000571e 	bne	r2,zero,86b0 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    8554:	e0bff217 	ldw	r2,-56(fp)
    8558:	10801317 	ldw	r2,76(r2)
    855c:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
    8560:	e0bff717 	ldw	r2,-36(fp)
    8564:	e0fffb17 	ldw	r3,-20(fp)
    8568:	1884983a 	sll	r2,r3,r2
    856c:	e13fff17 	ldw	r4,-4(fp)
    8570:	2089883a 	add	r4,r4,r2
    8574:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    8578:	e0bff217 	ldw	r2,-56(fp)
    857c:	10800e17 	ldw	r2,56(r2)
    8580:	10800058 	cmpnei	r2,r2,1
    8584:	1000151e 	bne	r2,zero,85dc <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
    8588:	e0bffb17 	ldw	r2,-20(fp)
    858c:	e0bff815 	stw	r2,-32(fp)
    8590:	00000e06 	br	85cc <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    8594:	e0ffff17 	ldw	r3,-4(fp)
    8598:	e0bffc17 	ldw	r2,-16(fp)
    859c:	1885883a 	add	r2,r3,r2
    85a0:	e0fff917 	ldw	r3,-28(fp)
    85a4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    85a8:	e0fff717 	ldw	r3,-36(fp)
    85ac:	00800044 	movi	r2,1
    85b0:	10c4983a 	sll	r2,r2,r3
    85b4:	e0ffff17 	ldw	r3,-4(fp)
    85b8:	1887883a 	add	r3,r3,r2
    85bc:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    85c0:	e13ff817 	ldw	r4,-32(fp)
    85c4:	21000044 	addi	r4,r4,1
    85c8:	e13ff815 	stw	r4,-32(fp)
    85cc:	e0bffa17 	ldw	r2,-24(fp)
    85d0:	e0fff817 	ldw	r3,-32(fp)
    85d4:	10ffef2e 	bgeu	r2,r3,8594 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
    85d8:	00009706 	br	8838 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    85dc:	e0bff217 	ldw	r2,-56(fp)
    85e0:	10800e17 	ldw	r2,56(r2)
    85e4:	10800098 	cmpnei	r2,r2,2
    85e8:	1000181e 	bne	r2,zero,864c <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
    85ec:	e13ffb17 	ldw	r4,-20(fp)
    85f0:	e13ff815 	stw	r4,-32(fp)
    85f4:	00001106 	br	863c <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    85f8:	e0fffc17 	ldw	r3,-16(fp)
    85fc:	e0fffc17 	ldw	r3,-16(fp)
    8600:	18c5883a 	add	r2,r3,r3
    8604:	1007883a 	mov	r3,r2
    8608:	e0bfff17 	ldw	r2,-4(fp)
    860c:	1885883a 	add	r2,r3,r2
    8610:	e0fff917 	ldw	r3,-28(fp)
    8614:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    8618:	e0fff717 	ldw	r3,-36(fp)
    861c:	00800044 	movi	r2,1
    8620:	10c4983a 	sll	r2,r2,r3
    8624:	e13fff17 	ldw	r4,-4(fp)
    8628:	2089883a 	add	r4,r4,r2
    862c:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    8630:	e0bff817 	ldw	r2,-32(fp)
    8634:	10800044 	addi	r2,r2,1
    8638:	e0bff815 	stw	r2,-32(fp)
    863c:	e0fffa17 	ldw	r3,-24(fp)
    8640:	e13ff817 	ldw	r4,-32(fp)
    8644:	193fec2e 	bgeu	r3,r4,85f8 <alt_up_pixel_buffer_dma_draw_vline+0x180>
    8648:	00007b06 	br	8838 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    864c:	e0bffb17 	ldw	r2,-20(fp)
    8650:	e0bff815 	stw	r2,-32(fp)
    8654:	00001206 	br	86a0 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    8658:	e0fffc17 	ldw	r3,-16(fp)
    865c:	e0fffc17 	ldw	r3,-16(fp)
    8660:	18c5883a 	add	r2,r3,r3
    8664:	1085883a 	add	r2,r2,r2
    8668:	1007883a 	mov	r3,r2
    866c:	e0bfff17 	ldw	r2,-4(fp)
    8670:	1885883a 	add	r2,r3,r2
    8674:	e0fff917 	ldw	r3,-28(fp)
    8678:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    867c:	e0fff717 	ldw	r3,-36(fp)
    8680:	00800044 	movi	r2,1
    8684:	10c4983a 	sll	r2,r2,r3
    8688:	e13fff17 	ldw	r4,-4(fp)
    868c:	2089883a 	add	r4,r4,r2
    8690:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    8694:	e0bff817 	ldw	r2,-32(fp)
    8698:	10800044 	addi	r2,r2,1
    869c:	e0bff815 	stw	r2,-32(fp)
    86a0:	e0fffa17 	ldw	r3,-24(fp)
    86a4:	e13ff817 	ldw	r4,-32(fp)
    86a8:	193feb2e 	bgeu	r3,r4,8658 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
    86ac:	00006206 	br	8838 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    86b0:	e0bff217 	ldw	r2,-56(fp)
    86b4:	10800e17 	ldw	r2,56(r2)
    86b8:	10800058 	cmpnei	r2,r2,1
    86bc:	1000191e 	bne	r2,zero,8724 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
    86c0:	e0fffb17 	ldw	r3,-20(fp)
    86c4:	e13ffe17 	ldw	r4,-8(fp)
    86c8:	1905383a 	mul	r2,r3,r4
    86cc:	e0ffff17 	ldw	r3,-4(fp)
    86d0:	1887883a 	add	r3,r3,r2
    86d4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    86d8:	e13ffb17 	ldw	r4,-20(fp)
    86dc:	e13ff615 	stw	r4,-40(fp)
    86e0:	00000c06 	br	8714 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    86e4:	e0ffff17 	ldw	r3,-4(fp)
    86e8:	e0bffc17 	ldw	r2,-16(fp)
    86ec:	1885883a 	add	r2,r3,r2
    86f0:	e0fff917 	ldw	r3,-28(fp)
    86f4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
    86f8:	e0bfff17 	ldw	r2,-4(fp)
    86fc:	e0fffe17 	ldw	r3,-8(fp)
    8700:	10c5883a 	add	r2,r2,r3
    8704:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    8708:	e13ff617 	ldw	r4,-40(fp)
    870c:	21000044 	addi	r4,r4,1
    8710:	e13ff615 	stw	r4,-40(fp)
    8714:	e0bffa17 	ldw	r2,-24(fp)
    8718:	e0fff617 	ldw	r3,-40(fp)
    871c:	10fff12e 	bgeu	r2,r3,86e4 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
    8720:	00004506 	br	8838 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    8724:	e0bff217 	ldw	r2,-56(fp)
    8728:	10800e17 	ldw	r2,56(r2)
    872c:	10800098 	cmpnei	r2,r2,2
    8730:	1000201e 	bne	r2,zero,87b4 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
    8734:	e13ffe17 	ldw	r4,-8(fp)
    8738:	e13ffe17 	ldw	r4,-8(fp)
    873c:	2105883a 	add	r2,r4,r4
    8740:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    8744:	e0fffb17 	ldw	r3,-20(fp)
    8748:	e13ffe17 	ldw	r4,-8(fp)
    874c:	1905383a 	mul	r2,r3,r4
    8750:	e0ffff17 	ldw	r3,-4(fp)
    8754:	1887883a 	add	r3,r3,r2
    8758:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    875c:	e13ffb17 	ldw	r4,-20(fp)
    8760:	e13ff615 	stw	r4,-40(fp)
    8764:	00000f06 	br	87a4 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    8768:	e0fffc17 	ldw	r3,-16(fp)
    876c:	e0fffc17 	ldw	r3,-16(fp)
    8770:	18c5883a 	add	r2,r3,r3
    8774:	1007883a 	mov	r3,r2
    8778:	e0bfff17 	ldw	r2,-4(fp)
    877c:	1885883a 	add	r2,r3,r2
    8780:	e0fff917 	ldw	r3,-28(fp)
    8784:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
    8788:	e13fff17 	ldw	r4,-4(fp)
    878c:	e0bffe17 	ldw	r2,-8(fp)
    8790:	2089883a 	add	r4,r4,r2
    8794:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    8798:	e0fff617 	ldw	r3,-40(fp)
    879c:	18c00044 	addi	r3,r3,1
    87a0:	e0fff615 	stw	r3,-40(fp)
    87a4:	e13ffa17 	ldw	r4,-24(fp)
    87a8:	e0bff617 	ldw	r2,-40(fp)
    87ac:	20bfee2e 	bgeu	r4,r2,8768 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
    87b0:	00002106 	br	8838 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    87b4:	e0fffe17 	ldw	r3,-8(fp)
    87b8:	e0fffe17 	ldw	r3,-8(fp)
    87bc:	18c5883a 	add	r2,r3,r3
    87c0:	1085883a 	add	r2,r2,r2
    87c4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    87c8:	e13ffb17 	ldw	r4,-20(fp)
    87cc:	e0fffe17 	ldw	r3,-8(fp)
    87d0:	20c5383a 	mul	r2,r4,r3
    87d4:	e13fff17 	ldw	r4,-4(fp)
    87d8:	2089883a 	add	r4,r4,r2
    87dc:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    87e0:	e0bffb17 	ldw	r2,-20(fp)
    87e4:	e0bff615 	stw	r2,-40(fp)
    87e8:	00001006 	br	882c <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    87ec:	e0fffc17 	ldw	r3,-16(fp)
    87f0:	e0fffc17 	ldw	r3,-16(fp)
    87f4:	18c5883a 	add	r2,r3,r3
    87f8:	1085883a 	add	r2,r2,r2
    87fc:	1007883a 	mov	r3,r2
    8800:	e0bfff17 	ldw	r2,-4(fp)
    8804:	1885883a 	add	r2,r3,r2
    8808:	e0fff917 	ldw	r3,-28(fp)
    880c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
    8810:	e13fff17 	ldw	r4,-4(fp)
    8814:	e0bffe17 	ldw	r2,-8(fp)
    8818:	2089883a 	add	r4,r4,r2
    881c:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    8820:	e0fff617 	ldw	r3,-40(fp)
    8824:	18c00044 	addi	r3,r3,1
    8828:	e0fff615 	stw	r3,-40(fp)
    882c:	e13ffa17 	ldw	r4,-24(fp)
    8830:	e0bff617 	ldw	r2,-40(fp)
    8834:	20bfed2e 	bgeu	r4,r2,87ec <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
    8838:	e037883a 	mov	sp,fp
    883c:	df000017 	ldw	fp,0(sp)
    8840:	dec00104 	addi	sp,sp,4
    8844:	f800283a 	ret

00008848 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    8848:	defff804 	addi	sp,sp,-32
    884c:	dfc00715 	stw	ra,28(sp)
    8850:	df000615 	stw	fp,24(sp)
    8854:	df000604 	addi	fp,sp,24
    8858:	e13ffc15 	stw	r4,-16(fp)
    885c:	e17ffd15 	stw	r5,-12(fp)
    8860:	e1bffe15 	stw	r6,-8(fp)
    8864:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    8868:	e0800317 	ldw	r2,12(fp)
    886c:	d8800015 	stw	r2,0(sp)
    8870:	e0800417 	ldw	r2,16(fp)
    8874:	d8800115 	stw	r2,4(sp)
    8878:	e13ffc17 	ldw	r4,-16(fp)
    887c:	e17ffd17 	ldw	r5,-12(fp)
    8880:	e1bfff17 	ldw	r6,-4(fp)
    8884:	e1fffe17 	ldw	r7,-8(fp)
    8888:	00081280 	call	8128 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    888c:	e0800317 	ldw	r2,12(fp)
    8890:	d8800015 	stw	r2,0(sp)
    8894:	e0800417 	ldw	r2,16(fp)
    8898:	d8800115 	stw	r2,4(sp)
    889c:	e13ffc17 	ldw	r4,-16(fp)
    88a0:	e17ffd17 	ldw	r5,-12(fp)
    88a4:	e1bfff17 	ldw	r6,-4(fp)
    88a8:	e1c00217 	ldw	r7,8(fp)
    88ac:	00081280 	call	8128 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    88b0:	e0800317 	ldw	r2,12(fp)
    88b4:	d8800015 	stw	r2,0(sp)
    88b8:	e0800417 	ldw	r2,16(fp)
    88bc:	d8800115 	stw	r2,4(sp)
    88c0:	e13ffc17 	ldw	r4,-16(fp)
    88c4:	e17ffd17 	ldw	r5,-12(fp)
    88c8:	e1bffe17 	ldw	r6,-8(fp)
    88cc:	e1c00217 	ldw	r7,8(fp)
    88d0:	00084780 	call	8478 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    88d4:	e0800317 	ldw	r2,12(fp)
    88d8:	d8800015 	stw	r2,0(sp)
    88dc:	e0800417 	ldw	r2,16(fp)
    88e0:	d8800115 	stw	r2,4(sp)
    88e4:	e13ffc17 	ldw	r4,-16(fp)
    88e8:	e17fff17 	ldw	r5,-4(fp)
    88ec:	e1bffe17 	ldw	r6,-8(fp)
    88f0:	e1c00217 	ldw	r7,8(fp)
    88f4:	00084780 	call	8478 <alt_up_pixel_buffer_dma_draw_vline>
}
    88f8:	e037883a 	mov	sp,fp
    88fc:	dfc00117 	ldw	ra,4(sp)
    8900:	df000017 	ldw	fp,0(sp)
    8904:	dec00204 	addi	sp,sp,8
    8908:	f800283a 	ret

0000890c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    890c:	defffb04 	addi	sp,sp,-20
    8910:	df000415 	stw	fp,16(sp)
    8914:	df000404 	addi	fp,sp,16
    8918:	e13ffc15 	stw	r4,-16(fp)
    891c:	e17ffd15 	stw	r5,-12(fp)
    8920:	e1bffe15 	stw	r6,-8(fp)
    8924:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
    8928:	e0c00217 	ldw	r3,8(fp)
    892c:	1804c03a 	cmpne	r2,r3,zero
    8930:	10000b1e 	bne	r2,zero,8960 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    8934:	e13ffd17 	ldw	r4,-12(fp)
    8938:	e0ffff17 	ldw	r3,-4(fp)
    893c:	20c5383a 	mul	r2,r4,r3
    8940:	e13ffe17 	ldw	r4,-8(fp)
    8944:	1105883a 	add	r2,r2,r4
    8948:	1007883a 	mov	r3,r2
    894c:	e0bffc17 	ldw	r2,-16(fp)
    8950:	1885883a 	add	r2,r3,r2
    8954:	e0c00117 	ldw	r3,4(fp)
    8958:	10c00025 	stbio	r3,0(r2)
    895c:	00001b06 	br	89cc <helper_plot_pixel+0xc0>
	else if (mode == 1)
    8960:	e1000217 	ldw	r4,8(fp)
    8964:	20800058 	cmpnei	r2,r4,1
    8968:	10000c1e 	bne	r2,zero,899c <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    896c:	e0fffd17 	ldw	r3,-12(fp)
    8970:	e13fff17 	ldw	r4,-4(fp)
    8974:	1905383a 	mul	r2,r3,r4
    8978:	e0fffe17 	ldw	r3,-8(fp)
    897c:	10c5883a 	add	r2,r2,r3
    8980:	1085883a 	add	r2,r2,r2
    8984:	1007883a 	mov	r3,r2
    8988:	e0bffc17 	ldw	r2,-16(fp)
    898c:	1885883a 	add	r2,r3,r2
    8990:	e1000117 	ldw	r4,4(fp)
    8994:	1100002d 	sthio	r4,0(r2)
    8998:	00000c06 	br	89cc <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    899c:	e0fffd17 	ldw	r3,-12(fp)
    89a0:	e13fff17 	ldw	r4,-4(fp)
    89a4:	1905383a 	mul	r2,r3,r4
    89a8:	e0fffe17 	ldw	r3,-8(fp)
    89ac:	10c5883a 	add	r2,r2,r3
    89b0:	1085883a 	add	r2,r2,r2
    89b4:	1085883a 	add	r2,r2,r2
    89b8:	1007883a 	mov	r3,r2
    89bc:	e0bffc17 	ldw	r2,-16(fp)
    89c0:	1885883a 	add	r2,r3,r2
    89c4:	e1000117 	ldw	r4,4(fp)
    89c8:	11000035 	stwio	r4,0(r2)
}
    89cc:	e037883a 	mov	sp,fp
    89d0:	df000017 	ldw	fp,0(sp)
    89d4:	dec00104 	addi	sp,sp,4
    89d8:	f800283a 	ret

000089dc <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    89dc:	deffe404 	addi	sp,sp,-112
    89e0:	dfc01b15 	stw	ra,108(sp)
    89e4:	df001a15 	stw	fp,104(sp)
    89e8:	df001a04 	addi	fp,sp,104
    89ec:	e13fe815 	stw	r4,-96(fp)
    89f0:	e17fe915 	stw	r5,-92(fp)
    89f4:	e1bfea15 	stw	r6,-88(fp)
    89f8:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
    89fc:	e0bfe917 	ldw	r2,-92(fp)
    8a00:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
    8a04:	e0ffea17 	ldw	r3,-88(fp)
    8a08:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
    8a0c:	e13feb17 	ldw	r4,-84(fp)
    8a10:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
    8a14:	e0800217 	ldw	r2,8(fp)
    8a18:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    8a1c:	e0fff717 	ldw	r3,-36(fp)
    8a20:	e13ff917 	ldw	r4,-28(fp)
    8a24:	1905c83a 	sub	r2,r3,r4
    8a28:	e0bfff15 	stw	r2,-4(fp)
    8a2c:	e0ffff17 	ldw	r3,-4(fp)
    8a30:	1804403a 	cmpge	r2,r3,zero
    8a34:	1000031e 	bne	r2,zero,8a44 <alt_up_pixel_buffer_dma_draw_line+0x68>
    8a38:	e13fff17 	ldw	r4,-4(fp)
    8a3c:	0109c83a 	sub	r4,zero,r4
    8a40:	e13fff15 	stw	r4,-4(fp)
    8a44:	e0fff817 	ldw	r3,-32(fp)
    8a48:	e13ffa17 	ldw	r4,-24(fp)
    8a4c:	1905c83a 	sub	r2,r3,r4
    8a50:	e0bffe15 	stw	r2,-8(fp)
    8a54:	e0fffe17 	ldw	r3,-8(fp)
    8a58:	1804403a 	cmpge	r2,r3,zero
    8a5c:	1000031e 	bne	r2,zero,8a6c <alt_up_pixel_buffer_dma_draw_line+0x90>
    8a60:	e13ffe17 	ldw	r4,-8(fp)
    8a64:	0109c83a 	sub	r4,zero,r4
    8a68:	e13ffe15 	stw	r4,-8(fp)
    8a6c:	e0fffe17 	ldw	r3,-8(fp)
    8a70:	e13fff17 	ldw	r4,-4(fp)
    8a74:	1904803a 	cmplt	r2,r3,r4
    8a78:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    8a7c:	e0bfe817 	ldw	r2,-96(fp)
    8a80:	10800e17 	ldw	r2,56(r2)
    8a84:	10800060 	cmpeqi	r2,r2,1
    8a88:	10000c1e 	bne	r2,zero,8abc <alt_up_pixel_buffer_dma_draw_line+0xe0>
    8a8c:	e0bfe817 	ldw	r2,-96(fp)
    8a90:	10800e17 	ldw	r2,56(r2)
    8a94:	10800098 	cmpnei	r2,r2,2
    8a98:	1000031e 	bne	r2,zero,8aa8 <alt_up_pixel_buffer_dma_draw_line+0xcc>
    8a9c:	00800044 	movi	r2,1
    8aa0:	e0bffc15 	stw	r2,-16(fp)
    8aa4:	00000206 	br	8ab0 <alt_up_pixel_buffer_dma_draw_line+0xd4>
    8aa8:	00c00084 	movi	r3,2
    8aac:	e0fffc15 	stw	r3,-16(fp)
    8ab0:	e13ffc17 	ldw	r4,-16(fp)
    8ab4:	e13ffd15 	stw	r4,-12(fp)
    8ab8:	00000106 	br	8ac0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
    8abc:	e03ffd15 	stw	zero,-12(fp)
    8ac0:	e0bffd17 	ldw	r2,-12(fp)
    8ac4:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
    8ac8:	e0c00317 	ldw	r3,12(fp)
    8acc:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    8ad0:	e0bfe817 	ldw	r2,-96(fp)
    8ad4:	10800d17 	ldw	r2,52(r2)
    8ad8:	1004c03a 	cmpne	r2,r2,zero
    8adc:	1000091e 	bne	r2,zero,8b04 <alt_up_pixel_buffer_dma_draw_line+0x128>
    8ae0:	e0bfe817 	ldw	r2,-96(fp)
    8ae4:	10c01317 	ldw	r3,76(r2)
    8ae8:	e0bfef17 	ldw	r2,-68(fp)
    8aec:	1885c83a 	sub	r2,r3,r2
    8af0:	1007883a 	mov	r3,r2
    8af4:	00800044 	movi	r2,1
    8af8:	10c4983a 	sll	r2,r2,r3
    8afc:	e0bffb15 	stw	r2,-20(fp)
    8b00:	00000306 	br	8b10 <alt_up_pixel_buffer_dma_draw_line+0x134>
    8b04:	e0bfe817 	ldw	r2,-96(fp)
    8b08:	10800f17 	ldw	r2,60(r2)
    8b0c:	e0bffb15 	stw	r2,-20(fp)
    8b10:	e13ffb17 	ldw	r4,-20(fp)
    8b14:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
    8b18:	e0800417 	ldw	r2,16(fp)
    8b1c:	10800058 	cmpnei	r2,r2,1
    8b20:	1000041e 	bne	r2,zero,8b34 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
    8b24:	e0bfe817 	ldw	r2,-96(fp)
    8b28:	10800c17 	ldw	r2,48(r2)
    8b2c:	e0bfed15 	stw	r2,-76(fp)
    8b30:	00000306 	br	8b40 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    8b34:	e0bfe817 	ldw	r2,-96(fp)
    8b38:	10800b17 	ldw	r2,44(r2)
    8b3c:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
    8b40:	e0fff603 	ldbu	r3,-40(fp)
    8b44:	18803fcc 	andi	r2,r3,255
    8b48:	1080201c 	xori	r2,r2,128
    8b4c:	10bfe004 	addi	r2,r2,-128
    8b50:	10800050 	cmplti	r2,r2,1
    8b54:	10000c1e 	bne	r2,zero,8b88 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
    8b58:	e13ffa17 	ldw	r4,-24(fp)
    8b5c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
    8b60:	e0bff917 	ldw	r2,-28(fp)
    8b64:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
    8b68:	e0fff317 	ldw	r3,-52(fp)
    8b6c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
    8b70:	e13ff817 	ldw	r4,-32(fp)
    8b74:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
    8b78:	e0bff717 	ldw	r2,-36(fp)
    8b7c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
    8b80:	e0fff317 	ldw	r3,-52(fp)
    8b84:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
    8b88:	e13ff817 	ldw	r4,-32(fp)
    8b8c:	e0bffa17 	ldw	r2,-24(fp)
    8b90:	20800c0e 	bge	r4,r2,8bc4 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
    8b94:	e0fffa17 	ldw	r3,-24(fp)
    8b98:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
    8b9c:	e13ff817 	ldw	r4,-32(fp)
    8ba0:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
    8ba4:	e0bff317 	ldw	r2,-52(fp)
    8ba8:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
    8bac:	e0fff917 	ldw	r3,-28(fp)
    8bb0:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
    8bb4:	e13ff717 	ldw	r4,-36(fp)
    8bb8:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
    8bbc:	e0bff317 	ldw	r2,-52(fp)
    8bc0:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    8bc4:	e0fff817 	ldw	r3,-32(fp)
    8bc8:	e13ffa17 	ldw	r4,-24(fp)
    8bcc:	1907c83a 	sub	r3,r3,r4
    8bd0:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
    8bd4:	e0fff717 	ldw	r3,-36(fp)
    8bd8:	e13ff917 	ldw	r4,-28(fp)
    8bdc:	1905c83a 	sub	r2,r3,r4
    8be0:	e0bff415 	stw	r2,-48(fp)
    8be4:	e0fff417 	ldw	r3,-48(fp)
    8be8:	1804403a 	cmpge	r2,r3,zero
    8bec:	1000031e 	bne	r2,zero,8bfc <alt_up_pixel_buffer_dma_draw_line+0x220>
    8bf0:	e13ff417 	ldw	r4,-48(fp)
    8bf4:	0109c83a 	sub	r4,zero,r4
    8bf8:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
    8bfc:	e0fff517 	ldw	r3,-44(fp)
    8c00:	1804d7fa 	srli	r2,r3,31
    8c04:	e13ff517 	ldw	r4,-44(fp)
    8c08:	1105883a 	add	r2,r2,r4
    8c0c:	1005d07a 	srai	r2,r2,1
    8c10:	0085c83a 	sub	r2,zero,r2
    8c14:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
    8c18:	e0bff917 	ldw	r2,-28(fp)
    8c1c:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
    8c20:	e0fff917 	ldw	r3,-28(fp)
    8c24:	e13ff717 	ldw	r4,-36(fp)
    8c28:	1900030e 	bge	r3,r4,8c38 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
    8c2c:	00800044 	movi	r2,1
    8c30:	e0bff215 	stw	r2,-56(fp)
    8c34:	00000206 	br	8c40 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
    8c38:	00ffffc4 	movi	r3,-1
    8c3c:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    8c40:	e13ff603 	ldbu	r4,-40(fp)
    8c44:	20803fcc 	andi	r2,r4,255
    8c48:	1080201c 	xori	r2,r2,128
    8c4c:	10bfe004 	addi	r2,r2,-128
    8c50:	10800058 	cmpnei	r2,r2,1
    8c54:	1000221e 	bne	r2,zero,8ce0 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
    8c58:	e0bffa17 	ldw	r2,-24(fp)
    8c5c:	e0bff115 	stw	r2,-60(fp)
    8c60:	00001b06 	br	8cd0 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    8c64:	e0ffee17 	ldw	r3,-72(fp)
    8c68:	d8c00015 	stw	r3,0(sp)
    8c6c:	e13fef17 	ldw	r4,-68(fp)
    8c70:	d9000115 	stw	r4,4(sp)
    8c74:	e13fed17 	ldw	r4,-76(fp)
    8c78:	e17fec17 	ldw	r5,-80(fp)
    8c7c:	e1bff017 	ldw	r6,-64(fp)
    8c80:	e1fff117 	ldw	r7,-60(fp)
    8c84:	000890c0 	call	890c <helper_plot_pixel>
			error = error + deltay;
    8c88:	e0bff317 	ldw	r2,-52(fp)
    8c8c:	e0fff417 	ldw	r3,-48(fp)
    8c90:	10c5883a 	add	r2,r2,r3
    8c94:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
    8c98:	e13ff317 	ldw	r4,-52(fp)
    8c9c:	20800050 	cmplti	r2,r4,1
    8ca0:	1000081e 	bne	r2,zero,8cc4 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
    8ca4:	e0bff017 	ldw	r2,-64(fp)
    8ca8:	e0fff217 	ldw	r3,-56(fp)
    8cac:	10c5883a 	add	r2,r2,r3
    8cb0:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
    8cb4:	e13ff317 	ldw	r4,-52(fp)
    8cb8:	e0bff517 	ldw	r2,-44(fp)
    8cbc:	2089c83a 	sub	r4,r4,r2
    8cc0:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    8cc4:	e0fff117 	ldw	r3,-60(fp)
    8cc8:	18c00044 	addi	r3,r3,1
    8ccc:	e0fff115 	stw	r3,-60(fp)
    8cd0:	e13ff817 	ldw	r4,-32(fp)
    8cd4:	e0bff117 	ldw	r2,-60(fp)
    8cd8:	20bfe20e 	bge	r4,r2,8c64 <alt_up_pixel_buffer_dma_draw_line+0x288>
    8cdc:	00002106 	br	8d64 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    8ce0:	e0fffa17 	ldw	r3,-24(fp)
    8ce4:	e0fff115 	stw	r3,-60(fp)
    8ce8:	00001b06 	br	8d58 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    8cec:	e13fee17 	ldw	r4,-72(fp)
    8cf0:	d9000015 	stw	r4,0(sp)
    8cf4:	e0bfef17 	ldw	r2,-68(fp)
    8cf8:	d8800115 	stw	r2,4(sp)
    8cfc:	e13fed17 	ldw	r4,-76(fp)
    8d00:	e17fec17 	ldw	r5,-80(fp)
    8d04:	e1bff117 	ldw	r6,-60(fp)
    8d08:	e1fff017 	ldw	r7,-64(fp)
    8d0c:	000890c0 	call	890c <helper_plot_pixel>
			error = error + deltay;
    8d10:	e0fff317 	ldw	r3,-52(fp)
    8d14:	e13ff417 	ldw	r4,-48(fp)
    8d18:	1907883a 	add	r3,r3,r4
    8d1c:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
    8d20:	e0fff317 	ldw	r3,-52(fp)
    8d24:	18800050 	cmplti	r2,r3,1
    8d28:	1000081e 	bne	r2,zero,8d4c <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
    8d2c:	e13ff017 	ldw	r4,-64(fp)
    8d30:	e0bff217 	ldw	r2,-56(fp)
    8d34:	2089883a 	add	r4,r4,r2
    8d38:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
    8d3c:	e0fff317 	ldw	r3,-52(fp)
    8d40:	e13ff517 	ldw	r4,-44(fp)
    8d44:	1907c83a 	sub	r3,r3,r4
    8d48:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    8d4c:	e0bff117 	ldw	r2,-60(fp)
    8d50:	10800044 	addi	r2,r2,1
    8d54:	e0bff115 	stw	r2,-60(fp)
    8d58:	e0fff817 	ldw	r3,-32(fp)
    8d5c:	e13ff117 	ldw	r4,-60(fp)
    8d60:	193fe20e 	bge	r3,r4,8cec <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    8d64:	e037883a 	mov	sp,fp
    8d68:	dfc00117 	ldw	ra,4(sp)
    8d6c:	df000017 	ldw	fp,0(sp)
    8d70:	dec00204 	addi	sp,sp,8
    8d74:	f800283a 	ret

00008d78 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    8d78:	defff404 	addi	sp,sp,-48
    8d7c:	df000b15 	stw	fp,44(sp)
    8d80:	df000b04 	addi	fp,sp,44
    8d84:	e13ffb15 	stw	r4,-20(fp)
    8d88:	e17ffc15 	stw	r5,-16(fp)
    8d8c:	e1bffd15 	stw	r6,-12(fp)
    8d90:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    8d94:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    8d98:	00800074 	movhi	r2,1
    8d9c:	10834904 	addi	r2,r2,3364
    8da0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    8da4:	1005003a 	cmpeq	r2,r2,zero
    8da8:	1000411e 	bne	r2,zero,8eb0 <alt_alarm_start+0x138>
  {
    if (alarm)
    8dac:	e0bffb17 	ldw	r2,-20(fp)
    8db0:	1005003a 	cmpeq	r2,r2,zero
    8db4:	10003b1e 	bne	r2,zero,8ea4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    8db8:	e0fffb17 	ldw	r3,-20(fp)
    8dbc:	e0bffd17 	ldw	r2,-12(fp)
    8dc0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    8dc4:	e0fffb17 	ldw	r3,-20(fp)
    8dc8:	e0bffe17 	ldw	r2,-8(fp)
    8dcc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8dd0:	0005303a 	rdctl	r2,status
    8dd4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8dd8:	e0fff817 	ldw	r3,-32(fp)
    8ddc:	00bfff84 	movi	r2,-2
    8de0:	1884703a 	and	r2,r3,r2
    8de4:	1001703a 	wrctl	status,r2
  
  return context;
    8de8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    8dec:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    8df0:	00800074 	movhi	r2,1
    8df4:	10834a04 	addi	r2,r2,3368
    8df8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    8dfc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    8e00:	e0fffc17 	ldw	r3,-16(fp)
    8e04:	e0bff917 	ldw	r2,-28(fp)
    8e08:	1885883a 	add	r2,r3,r2
    8e0c:	10c00044 	addi	r3,r2,1
    8e10:	e0bffb17 	ldw	r2,-20(fp)
    8e14:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    8e18:	e0bffb17 	ldw	r2,-20(fp)
    8e1c:	10c00217 	ldw	r3,8(r2)
    8e20:	e0bff917 	ldw	r2,-28(fp)
    8e24:	1880042e 	bgeu	r3,r2,8e38 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    8e28:	e0fffb17 	ldw	r3,-20(fp)
    8e2c:	00800044 	movi	r2,1
    8e30:	18800405 	stb	r2,16(r3)
    8e34:	00000206 	br	8e40 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    8e38:	e0bffb17 	ldw	r2,-20(fp)
    8e3c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    8e40:	e0fffb17 	ldw	r3,-20(fp)
    8e44:	00800074 	movhi	r2,1
    8e48:	10bb6d04 	addi	r2,r2,-4684
    8e4c:	e0bff615 	stw	r2,-40(fp)
    8e50:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8e54:	e0fff717 	ldw	r3,-36(fp)
    8e58:	e0bff617 	ldw	r2,-40(fp)
    8e5c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    8e60:	e0bff617 	ldw	r2,-40(fp)
    8e64:	10c00017 	ldw	r3,0(r2)
    8e68:	e0bff717 	ldw	r2,-36(fp)
    8e6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8e70:	e0bff617 	ldw	r2,-40(fp)
    8e74:	10c00017 	ldw	r3,0(r2)
    8e78:	e0bff717 	ldw	r2,-36(fp)
    8e7c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    8e80:	e0fff617 	ldw	r3,-40(fp)
    8e84:	e0bff717 	ldw	r2,-36(fp)
    8e88:	18800015 	stw	r2,0(r3)
    8e8c:	e0bffa17 	ldw	r2,-24(fp)
    8e90:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e94:	e0bff517 	ldw	r2,-44(fp)
    8e98:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    8e9c:	e03fff15 	stw	zero,-4(fp)
    8ea0:	00000506 	br	8eb8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    8ea4:	00bffa84 	movi	r2,-22
    8ea8:	e0bfff15 	stw	r2,-4(fp)
    8eac:	00000206 	br	8eb8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    8eb0:	00bfde84 	movi	r2,-134
    8eb4:	e0bfff15 	stw	r2,-4(fp)
    8eb8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    8ebc:	e037883a 	mov	sp,fp
    8ec0:	df000017 	ldw	fp,0(sp)
    8ec4:	dec00104 	addi	sp,sp,4
    8ec8:	f800283a 	ret

00008ecc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8ecc:	defff804 	addi	sp,sp,-32
    8ed0:	dfc00715 	stw	ra,28(sp)
    8ed4:	df000615 	stw	fp,24(sp)
    8ed8:	df000604 	addi	fp,sp,24
    8edc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8ee0:	e0bffc17 	ldw	r2,-16(fp)
    8ee4:	1004803a 	cmplt	r2,r2,zero
    8ee8:	1000081e 	bne	r2,zero,8f0c <close+0x40>
    8eec:	e0bffc17 	ldw	r2,-16(fp)
    8ef0:	10800324 	muli	r2,r2,12
    8ef4:	1007883a 	mov	r3,r2
    8ef8:	00800074 	movhi	r2,1
    8efc:	10b8fe04 	addi	r2,r2,-7176
    8f00:	1887883a 	add	r3,r3,r2
    8f04:	e0ffff15 	stw	r3,-4(fp)
    8f08:	00000106 	br	8f10 <close+0x44>
    8f0c:	e03fff15 	stw	zero,-4(fp)
    8f10:	e0bfff17 	ldw	r2,-4(fp)
    8f14:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    8f18:	e0bffb17 	ldw	r2,-20(fp)
    8f1c:	1005003a 	cmpeq	r2,r2,zero
    8f20:	10001d1e 	bne	r2,zero,8f98 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8f24:	e0bffb17 	ldw	r2,-20(fp)
    8f28:	10800017 	ldw	r2,0(r2)
    8f2c:	10800417 	ldw	r2,16(r2)
    8f30:	1005003a 	cmpeq	r2,r2,zero
    8f34:	1000071e 	bne	r2,zero,8f54 <close+0x88>
    8f38:	e0bffb17 	ldw	r2,-20(fp)
    8f3c:	10800017 	ldw	r2,0(r2)
    8f40:	10800417 	ldw	r2,16(r2)
    8f44:	e13ffb17 	ldw	r4,-20(fp)
    8f48:	103ee83a 	callr	r2
    8f4c:	e0bffe15 	stw	r2,-8(fp)
    8f50:	00000106 	br	8f58 <close+0x8c>
    8f54:	e03ffe15 	stw	zero,-8(fp)
    8f58:	e0bffe17 	ldw	r2,-8(fp)
    8f5c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8f60:	e13ffc17 	ldw	r4,-16(fp)
    8f64:	00097100 	call	9710 <alt_release_fd>
    if (rval < 0)
    8f68:	e0bffa17 	ldw	r2,-24(fp)
    8f6c:	1004403a 	cmpge	r2,r2,zero
    8f70:	1000071e 	bne	r2,zero,8f90 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    8f74:	0008fc80 	call	8fc8 <alt_get_errno>
    8f78:	e0fffa17 	ldw	r3,-24(fp)
    8f7c:	00c7c83a 	sub	r3,zero,r3
    8f80:	10c00015 	stw	r3,0(r2)
      return -1;
    8f84:	00bfffc4 	movi	r2,-1
    8f88:	e0bffd15 	stw	r2,-12(fp)
    8f8c:	00000806 	br	8fb0 <close+0xe4>
    }
    return 0;
    8f90:	e03ffd15 	stw	zero,-12(fp)
    8f94:	00000606 	br	8fb0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8f98:	0008fc80 	call	8fc8 <alt_get_errno>
    8f9c:	1007883a 	mov	r3,r2
    8fa0:	00801444 	movi	r2,81
    8fa4:	18800015 	stw	r2,0(r3)
    return -1;
    8fa8:	00bfffc4 	movi	r2,-1
    8fac:	e0bffd15 	stw	r2,-12(fp)
    8fb0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    8fb4:	e037883a 	mov	sp,fp
    8fb8:	dfc00117 	ldw	ra,4(sp)
    8fbc:	df000017 	ldw	fp,0(sp)
    8fc0:	dec00204 	addi	sp,sp,8
    8fc4:	f800283a 	ret

00008fc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8fc8:	defffd04 	addi	sp,sp,-12
    8fcc:	dfc00215 	stw	ra,8(sp)
    8fd0:	df000115 	stw	fp,4(sp)
    8fd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8fd8:	00800074 	movhi	r2,1
    8fdc:	10bb6c04 	addi	r2,r2,-4688
    8fe0:	10800017 	ldw	r2,0(r2)
    8fe4:	1005003a 	cmpeq	r2,r2,zero
    8fe8:	1000061e 	bne	r2,zero,9004 <alt_get_errno+0x3c>
    8fec:	00800074 	movhi	r2,1
    8ff0:	10bb6c04 	addi	r2,r2,-4688
    8ff4:	10800017 	ldw	r2,0(r2)
    8ff8:	103ee83a 	callr	r2
    8ffc:	e0bfff15 	stw	r2,-4(fp)
    9000:	00000306 	br	9010 <alt_get_errno+0x48>
    9004:	00800074 	movhi	r2,1
    9008:	10834b04 	addi	r2,r2,3372
    900c:	e0bfff15 	stw	r2,-4(fp)
    9010:	e0bfff17 	ldw	r2,-4(fp)
}
    9014:	e037883a 	mov	sp,fp
    9018:	dfc00117 	ldw	ra,4(sp)
    901c:	df000017 	ldw	fp,0(sp)
    9020:	dec00204 	addi	sp,sp,8
    9024:	f800283a 	ret

00009028 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9028:	deffff04 	addi	sp,sp,-4
    902c:	df000015 	stw	fp,0(sp)
    9030:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9034:	e037883a 	mov	sp,fp
    9038:	df000017 	ldw	fp,0(sp)
    903c:	dec00104 	addi	sp,sp,4
    9040:	f800283a 	ret

00009044 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9044:	defffc04 	addi	sp,sp,-16
    9048:	df000315 	stw	fp,12(sp)
    904c:	df000304 	addi	fp,sp,12
    9050:	e13ffd15 	stw	r4,-12(fp)
    9054:	e17ffe15 	stw	r5,-8(fp)
    9058:	e1bfff15 	stw	r6,-4(fp)
  return len;
    905c:	e0bfff17 	ldw	r2,-4(fp)
}
    9060:	e037883a 	mov	sp,fp
    9064:	df000017 	ldw	fp,0(sp)
    9068:	dec00104 	addi	sp,sp,4
    906c:	f800283a 	ret

00009070 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9070:	defff904 	addi	sp,sp,-28
    9074:	dfc00615 	stw	ra,24(sp)
    9078:	df000515 	stw	fp,20(sp)
    907c:	df000504 	addi	fp,sp,20
    9080:	e13ffd15 	stw	r4,-12(fp)
    9084:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9088:	e0bffd17 	ldw	r2,-12(fp)
    908c:	1005003a 	cmpeq	r2,r2,zero
    9090:	1000041e 	bne	r2,zero,90a4 <alt_dev_llist_insert+0x34>
    9094:	e0bffd17 	ldw	r2,-12(fp)
    9098:	10800217 	ldw	r2,8(r2)
    909c:	1004c03a 	cmpne	r2,r2,zero
    90a0:	1000071e 	bne	r2,zero,90c0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    90a4:	00091240 	call	9124 <alt_get_errno>
    90a8:	1007883a 	mov	r3,r2
    90ac:	00800584 	movi	r2,22
    90b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    90b4:	00bffa84 	movi	r2,-22
    90b8:	e0bfff15 	stw	r2,-4(fp)
    90bc:	00001306 	br	910c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    90c0:	e0fffd17 	ldw	r3,-12(fp)
    90c4:	e0bffe17 	ldw	r2,-8(fp)
    90c8:	e0bffb15 	stw	r2,-20(fp)
    90cc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    90d0:	e0fffc17 	ldw	r3,-16(fp)
    90d4:	e0bffb17 	ldw	r2,-20(fp)
    90d8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    90dc:	e0bffb17 	ldw	r2,-20(fp)
    90e0:	10c00017 	ldw	r3,0(r2)
    90e4:	e0bffc17 	ldw	r2,-16(fp)
    90e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    90ec:	e0bffb17 	ldw	r2,-20(fp)
    90f0:	10c00017 	ldw	r3,0(r2)
    90f4:	e0bffc17 	ldw	r2,-16(fp)
    90f8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    90fc:	e0fffb17 	ldw	r3,-20(fp)
    9100:	e0bffc17 	ldw	r2,-16(fp)
    9104:	18800015 	stw	r2,0(r3)

  return 0;  
    9108:	e03fff15 	stw	zero,-4(fp)
    910c:	e0bfff17 	ldw	r2,-4(fp)
}
    9110:	e037883a 	mov	sp,fp
    9114:	dfc00117 	ldw	ra,4(sp)
    9118:	df000017 	ldw	fp,0(sp)
    911c:	dec00204 	addi	sp,sp,8
    9120:	f800283a 	ret

00009124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9124:	defffd04 	addi	sp,sp,-12
    9128:	dfc00215 	stw	ra,8(sp)
    912c:	df000115 	stw	fp,4(sp)
    9130:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9134:	00800074 	movhi	r2,1
    9138:	10bb6c04 	addi	r2,r2,-4688
    913c:	10800017 	ldw	r2,0(r2)
    9140:	1005003a 	cmpeq	r2,r2,zero
    9144:	1000061e 	bne	r2,zero,9160 <alt_get_errno+0x3c>
    9148:	00800074 	movhi	r2,1
    914c:	10bb6c04 	addi	r2,r2,-4688
    9150:	10800017 	ldw	r2,0(r2)
    9154:	103ee83a 	callr	r2
    9158:	e0bfff15 	stw	r2,-4(fp)
    915c:	00000306 	br	916c <alt_get_errno+0x48>
    9160:	00800074 	movhi	r2,1
    9164:	10834b04 	addi	r2,r2,3372
    9168:	e0bfff15 	stw	r2,-4(fp)
    916c:	e0bfff17 	ldw	r2,-4(fp)
}
    9170:	e037883a 	mov	sp,fp
    9174:	dfc00117 	ldw	ra,4(sp)
    9178:	df000017 	ldw	fp,0(sp)
    917c:	dec00204 	addi	sp,sp,8
    9180:	f800283a 	ret

00009184 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9184:	defffd04 	addi	sp,sp,-12
    9188:	dfc00215 	stw	ra,8(sp)
    918c:	df000115 	stw	fp,4(sp)
    9190:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9194:	00bfff04 	movi	r2,-4
    9198:	00c00074 	movhi	r3,1
    919c:	18f1da04 	addi	r3,r3,-14488
    91a0:	1885883a 	add	r2,r3,r2
    91a4:	e0bfff15 	stw	r2,-4(fp)
    91a8:	00000606 	br	91c4 <_do_ctors+0x40>
        (*ctor) (); 
    91ac:	e0bfff17 	ldw	r2,-4(fp)
    91b0:	10800017 	ldw	r2,0(r2)
    91b4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    91b8:	e0bfff17 	ldw	r2,-4(fp)
    91bc:	10bfff04 	addi	r2,r2,-4
    91c0:	e0bfff15 	stw	r2,-4(fp)
    91c4:	e0ffff17 	ldw	r3,-4(fp)
    91c8:	00800074 	movhi	r2,1
    91cc:	10b1d904 	addi	r2,r2,-14492
    91d0:	18bff62e 	bgeu	r3,r2,91ac <_do_ctors+0x28>
        (*ctor) (); 
}
    91d4:	e037883a 	mov	sp,fp
    91d8:	dfc00117 	ldw	ra,4(sp)
    91dc:	df000017 	ldw	fp,0(sp)
    91e0:	dec00204 	addi	sp,sp,8
    91e4:	f800283a 	ret

000091e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    91e8:	defffd04 	addi	sp,sp,-12
    91ec:	dfc00215 	stw	ra,8(sp)
    91f0:	df000115 	stw	fp,4(sp)
    91f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    91f8:	00bfff04 	movi	r2,-4
    91fc:	00c00074 	movhi	r3,1
    9200:	18f1da04 	addi	r3,r3,-14488
    9204:	1885883a 	add	r2,r3,r2
    9208:	e0bfff15 	stw	r2,-4(fp)
    920c:	00000606 	br	9228 <_do_dtors+0x40>
        (*dtor) (); 
    9210:	e0bfff17 	ldw	r2,-4(fp)
    9214:	10800017 	ldw	r2,0(r2)
    9218:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    921c:	e0bfff17 	ldw	r2,-4(fp)
    9220:	10bfff04 	addi	r2,r2,-4
    9224:	e0bfff15 	stw	r2,-4(fp)
    9228:	e0ffff17 	ldw	r3,-4(fp)
    922c:	00800074 	movhi	r2,1
    9230:	10b1da04 	addi	r2,r2,-14488
    9234:	18bff62e 	bgeu	r3,r2,9210 <_do_dtors+0x28>
        (*dtor) (); 
}
    9238:	e037883a 	mov	sp,fp
    923c:	dfc00117 	ldw	ra,4(sp)
    9240:	df000017 	ldw	fp,0(sp)
    9244:	dec00204 	addi	sp,sp,8
    9248:	f800283a 	ret

0000924c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    924c:	defff904 	addi	sp,sp,-28
    9250:	dfc00615 	stw	ra,24(sp)
    9254:	df000515 	stw	fp,20(sp)
    9258:	df000504 	addi	fp,sp,20
    925c:	e13ffd15 	stw	r4,-12(fp)
    9260:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9264:	e0bffe17 	ldw	r2,-8(fp)
    9268:	10800017 	ldw	r2,0(r2)
    926c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9270:	e13ffd17 	ldw	r4,-12(fp)
    9274:	000a0600 	call	a060 <strlen>
    9278:	10800044 	addi	r2,r2,1
    927c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9280:	00000d06 	br	92b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9284:	e0bffc17 	ldw	r2,-16(fp)
    9288:	11000217 	ldw	r4,8(r2)
    928c:	e1bffb17 	ldw	r6,-20(fp)
    9290:	e17ffd17 	ldw	r5,-12(fp)
    9294:	0009d440 	call	9d44 <memcmp>
    9298:	1004c03a 	cmpne	r2,r2,zero
    929c:	1000031e 	bne	r2,zero,92ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    92a0:	e0bffc17 	ldw	r2,-16(fp)
    92a4:	e0bfff15 	stw	r2,-4(fp)
    92a8:	00000706 	br	92c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    92ac:	e0bffc17 	ldw	r2,-16(fp)
    92b0:	10800017 	ldw	r2,0(r2)
    92b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    92b8:	e0fffe17 	ldw	r3,-8(fp)
    92bc:	e0bffc17 	ldw	r2,-16(fp)
    92c0:	10fff01e 	bne	r2,r3,9284 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    92c4:	e03fff15 	stw	zero,-4(fp)
    92c8:	e0bfff17 	ldw	r2,-4(fp)
}
    92cc:	e037883a 	mov	sp,fp
    92d0:	dfc00117 	ldw	ra,4(sp)
    92d4:	df000017 	ldw	fp,0(sp)
    92d8:	dec00204 	addi	sp,sp,8
    92dc:	f800283a 	ret

000092e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    92e0:	defffe04 	addi	sp,sp,-8
    92e4:	dfc00115 	stw	ra,4(sp)
    92e8:	df000015 	stw	fp,0(sp)
    92ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    92f0:	0009883a 	mov	r4,zero
    92f4:	01440004 	movi	r5,4096
    92f8:	0009c680 	call	9c68 <alt_icache_flush>
#endif
}
    92fc:	e037883a 	mov	sp,fp
    9300:	dfc00117 	ldw	ra,4(sp)
    9304:	df000017 	ldw	fp,0(sp)
    9308:	dec00204 	addi	sp,sp,8
    930c:	f800283a 	ret

00009310 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9310:	defff904 	addi	sp,sp,-28
    9314:	dfc00615 	stw	ra,24(sp)
    9318:	df000515 	stw	fp,20(sp)
    931c:	df000504 	addi	fp,sp,20
    9320:	e13ffc15 	stw	r4,-16(fp)
    9324:	e17ffd15 	stw	r5,-12(fp)
    9328:	e1bffe15 	stw	r6,-8(fp)
    932c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9330:	e13ffd17 	ldw	r4,-12(fp)
    9334:	e17ffe17 	ldw	r5,-8(fp)
    9338:	e1bfff17 	ldw	r6,-4(fp)
    933c:	00095280 	call	9528 <open>
    9340:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9344:	e0bffb17 	ldw	r2,-20(fp)
    9348:	1004803a 	cmplt	r2,r2,zero
    934c:	10001c1e 	bne	r2,zero,93c0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    9350:	e0bffb17 	ldw	r2,-20(fp)
    9354:	00c00074 	movhi	r3,1
    9358:	18f8fe04 	addi	r3,r3,-7176
    935c:	10800324 	muli	r2,r2,12
    9360:	10c5883a 	add	r2,r2,r3
    9364:	10c00017 	ldw	r3,0(r2)
    9368:	e0bffc17 	ldw	r2,-16(fp)
    936c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9370:	e0bffb17 	ldw	r2,-20(fp)
    9374:	00c00074 	movhi	r3,1
    9378:	18f8fe04 	addi	r3,r3,-7176
    937c:	10800324 	muli	r2,r2,12
    9380:	10c5883a 	add	r2,r2,r3
    9384:	10800104 	addi	r2,r2,4
    9388:	10c00017 	ldw	r3,0(r2)
    938c:	e0bffc17 	ldw	r2,-16(fp)
    9390:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9394:	e0bffb17 	ldw	r2,-20(fp)
    9398:	00c00074 	movhi	r3,1
    939c:	18f8fe04 	addi	r3,r3,-7176
    93a0:	10800324 	muli	r2,r2,12
    93a4:	10c5883a 	add	r2,r2,r3
    93a8:	10800204 	addi	r2,r2,8
    93ac:	10c00017 	ldw	r3,0(r2)
    93b0:	e0bffc17 	ldw	r2,-16(fp)
    93b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    93b8:	e13ffb17 	ldw	r4,-20(fp)
    93bc:	00097100 	call	9710 <alt_release_fd>
  }
} 
    93c0:	e037883a 	mov	sp,fp
    93c4:	dfc00117 	ldw	ra,4(sp)
    93c8:	df000017 	ldw	fp,0(sp)
    93cc:	dec00204 	addi	sp,sp,8
    93d0:	f800283a 	ret

000093d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    93d4:	defffb04 	addi	sp,sp,-20
    93d8:	dfc00415 	stw	ra,16(sp)
    93dc:	df000315 	stw	fp,12(sp)
    93e0:	df000304 	addi	fp,sp,12
    93e4:	e13ffd15 	stw	r4,-12(fp)
    93e8:	e17ffe15 	stw	r5,-8(fp)
    93ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    93f0:	01000074 	movhi	r4,1
    93f4:	21390104 	addi	r4,r4,-7164
    93f8:	e17ffd17 	ldw	r5,-12(fp)
    93fc:	01800044 	movi	r6,1
    9400:	01c07fc4 	movi	r7,511
    9404:	00093100 	call	9310 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9408:	01000074 	movhi	r4,1
    940c:	2138fe04 	addi	r4,r4,-7176
    9410:	e17ffe17 	ldw	r5,-8(fp)
    9414:	000d883a 	mov	r6,zero
    9418:	01c07fc4 	movi	r7,511
    941c:	00093100 	call	9310 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9420:	01000074 	movhi	r4,1
    9424:	21390404 	addi	r4,r4,-7152
    9428:	e17fff17 	ldw	r5,-4(fp)
    942c:	01800044 	movi	r6,1
    9430:	01c07fc4 	movi	r7,511
    9434:	00093100 	call	9310 <alt_open_fd>
}  
    9438:	e037883a 	mov	sp,fp
    943c:	dfc00117 	ldw	ra,4(sp)
    9440:	df000017 	ldw	fp,0(sp)
    9444:	dec00204 	addi	sp,sp,8
    9448:	f800283a 	ret

0000944c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    944c:	defffc04 	addi	sp,sp,-16
    9450:	df000315 	stw	fp,12(sp)
    9454:	df000304 	addi	fp,sp,12
    9458:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    945c:	e0bffe17 	ldw	r2,-8(fp)
    9460:	10800217 	ldw	r2,8(r2)
    9464:	10d00034 	orhi	r3,r2,16384
    9468:	e0bffe17 	ldw	r2,-8(fp)
    946c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9470:	e03ffd15 	stw	zero,-12(fp)
    9474:	00002006 	br	94f8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9478:	e0bffd17 	ldw	r2,-12(fp)
    947c:	00c00074 	movhi	r3,1
    9480:	18f8fe04 	addi	r3,r3,-7176
    9484:	10800324 	muli	r2,r2,12
    9488:	10c5883a 	add	r2,r2,r3
    948c:	10c00017 	ldw	r3,0(r2)
    9490:	e0bffe17 	ldw	r2,-8(fp)
    9494:	10800017 	ldw	r2,0(r2)
    9498:	1880141e 	bne	r3,r2,94ec <alt_file_locked+0xa0>
    949c:	e0bffd17 	ldw	r2,-12(fp)
    94a0:	00c00074 	movhi	r3,1
    94a4:	18f8fe04 	addi	r3,r3,-7176
    94a8:	10800324 	muli	r2,r2,12
    94ac:	10c5883a 	add	r2,r2,r3
    94b0:	10800204 	addi	r2,r2,8
    94b4:	10800017 	ldw	r2,0(r2)
    94b8:	1004403a 	cmpge	r2,r2,zero
    94bc:	10000b1e 	bne	r2,zero,94ec <alt_file_locked+0xa0>
    94c0:	e0bffd17 	ldw	r2,-12(fp)
    94c4:	10800324 	muli	r2,r2,12
    94c8:	1007883a 	mov	r3,r2
    94cc:	00800074 	movhi	r2,1
    94d0:	10b8fe04 	addi	r2,r2,-7176
    94d4:	1887883a 	add	r3,r3,r2
    94d8:	e0bffe17 	ldw	r2,-8(fp)
    94dc:	18800326 	beq	r3,r2,94ec <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    94e0:	00bffcc4 	movi	r2,-13
    94e4:	e0bfff15 	stw	r2,-4(fp)
    94e8:	00000a06 	br	9514 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    94ec:	e0bffd17 	ldw	r2,-12(fp)
    94f0:	10800044 	addi	r2,r2,1
    94f4:	e0bffd15 	stw	r2,-12(fp)
    94f8:	00800074 	movhi	r2,1
    94fc:	10bb6b04 	addi	r2,r2,-4692
    9500:	10800017 	ldw	r2,0(r2)
    9504:	1007883a 	mov	r3,r2
    9508:	e0bffd17 	ldw	r2,-12(fp)
    950c:	18bfda2e 	bgeu	r3,r2,9478 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9510:	e03fff15 	stw	zero,-4(fp)
    9514:	e0bfff17 	ldw	r2,-4(fp)
}
    9518:	e037883a 	mov	sp,fp
    951c:	df000017 	ldw	fp,0(sp)
    9520:	dec00104 	addi	sp,sp,4
    9524:	f800283a 	ret

00009528 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9528:	defff404 	addi	sp,sp,-48
    952c:	dfc00b15 	stw	ra,44(sp)
    9530:	df000a15 	stw	fp,40(sp)
    9534:	df000a04 	addi	fp,sp,40
    9538:	e13ffb15 	stw	r4,-20(fp)
    953c:	e17ffc15 	stw	r5,-16(fp)
    9540:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9544:	00bfffc4 	movi	r2,-1
    9548:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    954c:	00bffb44 	movi	r2,-19
    9550:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    9554:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9558:	e13ffb17 	ldw	r4,-20(fp)
    955c:	01400074 	movhi	r5,1
    9560:	297b6904 	addi	r5,r5,-4700
    9564:	000924c0 	call	924c <alt_find_dev>
    9568:	e0bffa15 	stw	r2,-24(fp)
    956c:	e0bffa17 	ldw	r2,-24(fp)
    9570:	1004c03a 	cmpne	r2,r2,zero
    9574:	1000051e 	bne	r2,zero,958c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9578:	e13ffb17 	ldw	r4,-20(fp)
    957c:	0009a900 	call	9a90 <alt_find_file>
    9580:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    9584:	00800044 	movi	r2,1
    9588:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    958c:	e0bffa17 	ldw	r2,-24(fp)
    9590:	1005003a 	cmpeq	r2,r2,zero
    9594:	1000301e 	bne	r2,zero,9658 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9598:	e13ffa17 	ldw	r4,-24(fp)
    959c:	0009bb00 	call	9bb0 <alt_get_fd>
    95a0:	e0bff815 	stw	r2,-32(fp)
    95a4:	e0bff817 	ldw	r2,-32(fp)
    95a8:	1004403a 	cmpge	r2,r2,zero
    95ac:	1000031e 	bne	r2,zero,95bc <open+0x94>
    {
      status = index;
    95b0:	e0bff817 	ldw	r2,-32(fp)
    95b4:	e0bff715 	stw	r2,-36(fp)
    95b8:	00002906 	br	9660 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    95bc:	e0bff817 	ldw	r2,-32(fp)
    95c0:	10800324 	muli	r2,r2,12
    95c4:	1007883a 	mov	r3,r2
    95c8:	00800074 	movhi	r2,1
    95cc:	10b8fe04 	addi	r2,r2,-7176
    95d0:	1885883a 	add	r2,r3,r2
    95d4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    95d8:	e0fffc17 	ldw	r3,-16(fp)
    95dc:	00900034 	movhi	r2,16384
    95e0:	10bfffc4 	addi	r2,r2,-1
    95e4:	1886703a 	and	r3,r3,r2
    95e8:	e0bff917 	ldw	r2,-28(fp)
    95ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    95f0:	e0bff617 	ldw	r2,-40(fp)
    95f4:	1004c03a 	cmpne	r2,r2,zero
    95f8:	1000061e 	bne	r2,zero,9614 <open+0xec>
    95fc:	e13ff917 	ldw	r4,-28(fp)
    9600:	000944c0 	call	944c <alt_file_locked>
    9604:	e0bff715 	stw	r2,-36(fp)
    9608:	e0bff717 	ldw	r2,-36(fp)
    960c:	1004803a 	cmplt	r2,r2,zero
    9610:	1000131e 	bne	r2,zero,9660 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9614:	e0bffa17 	ldw	r2,-24(fp)
    9618:	10800317 	ldw	r2,12(r2)
    961c:	1005003a 	cmpeq	r2,r2,zero
    9620:	1000091e 	bne	r2,zero,9648 <open+0x120>
    9624:	e0bffa17 	ldw	r2,-24(fp)
    9628:	10800317 	ldw	r2,12(r2)
    962c:	e13ff917 	ldw	r4,-28(fp)
    9630:	e17ffb17 	ldw	r5,-20(fp)
    9634:	e1bffc17 	ldw	r6,-16(fp)
    9638:	e1fffd17 	ldw	r7,-12(fp)
    963c:	103ee83a 	callr	r2
    9640:	e0bfff15 	stw	r2,-4(fp)
    9644:	00000106 	br	964c <open+0x124>
    9648:	e03fff15 	stw	zero,-4(fp)
    964c:	e0bfff17 	ldw	r2,-4(fp)
    9650:	e0bff715 	stw	r2,-36(fp)
    9654:	00000206 	br	9660 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9658:	00bffb44 	movi	r2,-19
    965c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9660:	e0bff717 	ldw	r2,-36(fp)
    9664:	1004403a 	cmpge	r2,r2,zero
    9668:	1000091e 	bne	r2,zero,9690 <open+0x168>
  {
    alt_release_fd (index);  
    966c:	e13ff817 	ldw	r4,-32(fp)
    9670:	00097100 	call	9710 <alt_release_fd>
    ALT_ERRNO = -status;
    9674:	00096b00 	call	96b0 <alt_get_errno>
    9678:	e0fff717 	ldw	r3,-36(fp)
    967c:	00c7c83a 	sub	r3,zero,r3
    9680:	10c00015 	stw	r3,0(r2)
    return -1;
    9684:	00bfffc4 	movi	r2,-1
    9688:	e0bffe15 	stw	r2,-8(fp)
    968c:	00000206 	br	9698 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    9690:	e0bff817 	ldw	r2,-32(fp)
    9694:	e0bffe15 	stw	r2,-8(fp)
    9698:	e0bffe17 	ldw	r2,-8(fp)
}
    969c:	e037883a 	mov	sp,fp
    96a0:	dfc00117 	ldw	ra,4(sp)
    96a4:	df000017 	ldw	fp,0(sp)
    96a8:	dec00204 	addi	sp,sp,8
    96ac:	f800283a 	ret

000096b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    96b0:	defffd04 	addi	sp,sp,-12
    96b4:	dfc00215 	stw	ra,8(sp)
    96b8:	df000115 	stw	fp,4(sp)
    96bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    96c0:	00800074 	movhi	r2,1
    96c4:	10bb6c04 	addi	r2,r2,-4688
    96c8:	10800017 	ldw	r2,0(r2)
    96cc:	1005003a 	cmpeq	r2,r2,zero
    96d0:	1000061e 	bne	r2,zero,96ec <alt_get_errno+0x3c>
    96d4:	00800074 	movhi	r2,1
    96d8:	10bb6c04 	addi	r2,r2,-4688
    96dc:	10800017 	ldw	r2,0(r2)
    96e0:	103ee83a 	callr	r2
    96e4:	e0bfff15 	stw	r2,-4(fp)
    96e8:	00000306 	br	96f8 <alt_get_errno+0x48>
    96ec:	00800074 	movhi	r2,1
    96f0:	10834b04 	addi	r2,r2,3372
    96f4:	e0bfff15 	stw	r2,-4(fp)
    96f8:	e0bfff17 	ldw	r2,-4(fp)
}
    96fc:	e037883a 	mov	sp,fp
    9700:	dfc00117 	ldw	ra,4(sp)
    9704:	df000017 	ldw	fp,0(sp)
    9708:	dec00204 	addi	sp,sp,8
    970c:	f800283a 	ret

00009710 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9710:	defffe04 	addi	sp,sp,-8
    9714:	df000115 	stw	fp,4(sp)
    9718:	df000104 	addi	fp,sp,4
    971c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9720:	e0bfff17 	ldw	r2,-4(fp)
    9724:	108000d0 	cmplti	r2,r2,3
    9728:	10000d1e 	bne	r2,zero,9760 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    972c:	e0bfff17 	ldw	r2,-4(fp)
    9730:	00c00074 	movhi	r3,1
    9734:	18f8fe04 	addi	r3,r3,-7176
    9738:	10800324 	muli	r2,r2,12
    973c:	10c5883a 	add	r2,r2,r3
    9740:	10800204 	addi	r2,r2,8
    9744:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9748:	e0bfff17 	ldw	r2,-4(fp)
    974c:	00c00074 	movhi	r3,1
    9750:	18f8fe04 	addi	r3,r3,-7176
    9754:	10800324 	muli	r2,r2,12
    9758:	10c5883a 	add	r2,r2,r3
    975c:	10000015 	stw	zero,0(r2)
  }
}
    9760:	e037883a 	mov	sp,fp
    9764:	df000017 	ldw	fp,0(sp)
    9768:	dec00104 	addi	sp,sp,4
    976c:	f800283a 	ret

00009770 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9770:	defffa04 	addi	sp,sp,-24
    9774:	df000515 	stw	fp,20(sp)
    9778:	df000504 	addi	fp,sp,20
    977c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9780:	0005303a 	rdctl	r2,status
    9784:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9788:	e0fffd17 	ldw	r3,-12(fp)
    978c:	00bfff84 	movi	r2,-2
    9790:	1884703a 	and	r2,r3,r2
    9794:	1001703a 	wrctl	status,r2
  
  return context;
    9798:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    979c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    97a0:	e0bfff17 	ldw	r2,-4(fp)
    97a4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    97a8:	e0bffc17 	ldw	r2,-16(fp)
    97ac:	10c00017 	ldw	r3,0(r2)
    97b0:	e0bffc17 	ldw	r2,-16(fp)
    97b4:	10800117 	ldw	r2,4(r2)
    97b8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    97bc:	e0bffc17 	ldw	r2,-16(fp)
    97c0:	10c00117 	ldw	r3,4(r2)
    97c4:	e0bffc17 	ldw	r2,-16(fp)
    97c8:	10800017 	ldw	r2,0(r2)
    97cc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    97d0:	e0fffc17 	ldw	r3,-16(fp)
    97d4:	e0bffc17 	ldw	r2,-16(fp)
    97d8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    97dc:	e0fffc17 	ldw	r3,-16(fp)
    97e0:	e0bffc17 	ldw	r2,-16(fp)
    97e4:	18800015 	stw	r2,0(r3)
    97e8:	e0bffe17 	ldw	r2,-8(fp)
    97ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97f0:	e0bffb17 	ldw	r2,-20(fp)
    97f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    97f8:	e037883a 	mov	sp,fp
    97fc:	df000017 	ldw	fp,0(sp)
    9800:	dec00104 	addi	sp,sp,4
    9804:	f800283a 	ret

00009808 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9808:	defffb04 	addi	sp,sp,-20
    980c:	dfc00415 	stw	ra,16(sp)
    9810:	df000315 	stw	fp,12(sp)
    9814:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9818:	d0a00d17 	ldw	r2,-32716(gp)
    981c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9820:	d0a7ea17 	ldw	r2,-24664(gp)
    9824:	10800044 	addi	r2,r2,1
    9828:	d0a7ea15 	stw	r2,-24664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    982c:	00003106 	br	98f4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    9830:	e0bffe17 	ldw	r2,-8(fp)
    9834:	10800017 	ldw	r2,0(r2)
    9838:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    983c:	e0bffe17 	ldw	r2,-8(fp)
    9840:	10800403 	ldbu	r2,16(r2)
    9844:	10803fcc 	andi	r2,r2,255
    9848:	1005003a 	cmpeq	r2,r2,zero
    984c:	1000051e 	bne	r2,zero,9864 <alt_tick+0x5c>
    9850:	d0a7ea17 	ldw	r2,-24664(gp)
    9854:	1004c03a 	cmpne	r2,r2,zero
    9858:	1000021e 	bne	r2,zero,9864 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    985c:	e0bffe17 	ldw	r2,-8(fp)
    9860:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9864:	e0bffe17 	ldw	r2,-8(fp)
    9868:	10c00217 	ldw	r3,8(r2)
    986c:	d0a7ea17 	ldw	r2,-24664(gp)
    9870:	10c01e36 	bltu	r2,r3,98ec <alt_tick+0xe4>
    9874:	e0bffe17 	ldw	r2,-8(fp)
    9878:	10800403 	ldbu	r2,16(r2)
    987c:	10803fcc 	andi	r2,r2,255
    9880:	1004c03a 	cmpne	r2,r2,zero
    9884:	1000191e 	bne	r2,zero,98ec <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    9888:	e0bffe17 	ldw	r2,-8(fp)
    988c:	10c00317 	ldw	r3,12(r2)
    9890:	e0bffe17 	ldw	r2,-8(fp)
    9894:	11000517 	ldw	r4,20(r2)
    9898:	183ee83a 	callr	r3
    989c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    98a0:	e0bffd17 	ldw	r2,-12(fp)
    98a4:	1004c03a 	cmpne	r2,r2,zero
    98a8:	1000031e 	bne	r2,zero,98b8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    98ac:	e13ffe17 	ldw	r4,-8(fp)
    98b0:	00097700 	call	9770 <alt_alarm_stop>
    98b4:	00000d06 	br	98ec <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    98b8:	e0bffe17 	ldw	r2,-8(fp)
    98bc:	10c00217 	ldw	r3,8(r2)
    98c0:	e0bffd17 	ldw	r2,-12(fp)
    98c4:	1887883a 	add	r3,r3,r2
    98c8:	e0bffe17 	ldw	r2,-8(fp)
    98cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    98d0:	e0bffe17 	ldw	r2,-8(fp)
    98d4:	10c00217 	ldw	r3,8(r2)
    98d8:	d0a7ea17 	ldw	r2,-24664(gp)
    98dc:	1880032e 	bgeu	r3,r2,98ec <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    98e0:	e0fffe17 	ldw	r3,-8(fp)
    98e4:	00800044 	movi	r2,1
    98e8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    98ec:	e0bfff17 	ldw	r2,-4(fp)
    98f0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    98f4:	d0e00d04 	addi	r3,gp,-32716
    98f8:	e0bffe17 	ldw	r2,-8(fp)
    98fc:	10ffcc1e 	bne	r2,r3,9830 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    9900:	e037883a 	mov	sp,fp
    9904:	dfc00117 	ldw	ra,4(sp)
    9908:	df000017 	ldw	fp,0(sp)
    990c:	dec00204 	addi	sp,sp,8
    9910:	f800283a 	ret

00009914 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    9914:	defffd04 	addi	sp,sp,-12
    9918:	dfc00215 	stw	ra,8(sp)
    991c:	df000115 	stw	fp,4(sp)
    9920:	df000104 	addi	fp,sp,4
    9924:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9928:	e13fff17 	ldw	r4,-4(fp)
    992c:	00099640 	call	9964 <alt_busy_sleep>
}
    9930:	e037883a 	mov	sp,fp
    9934:	dfc00117 	ldw	ra,4(sp)
    9938:	df000017 	ldw	fp,0(sp)
    993c:	dec00204 	addi	sp,sp,8
    9940:	f800283a 	ret

00009944 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9944:	deffff04 	addi	sp,sp,-4
    9948:	df000015 	stw	fp,0(sp)
    994c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9950:	000170fa 	wrctl	ienable,zero
}
    9954:	e037883a 	mov	sp,fp
    9958:	df000017 	ldw	fp,0(sp)
    995c:	dec00104 	addi	sp,sp,4
    9960:	f800283a 	ret

00009964 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9964:	defffb04 	addi	sp,sp,-20
    9968:	df000415 	stw	fp,16(sp)
    996c:	df000404 	addi	fp,sp,16
    9970:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    9974:	008000c4 	movi	r2,3
    9978:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    997c:	e0fffc17 	ldw	r3,-16(fp)
    9980:	008003f4 	movhi	r2,15
    9984:	10909004 	addi	r2,r2,16960
    9988:	1887383a 	mul	r3,r3,r2
    998c:	0080bef4 	movhi	r2,763
    9990:	10bc2004 	addi	r2,r2,-3968
    9994:	10c7203a 	divu	r3,r2,r3
    9998:	00a00034 	movhi	r2,32768
    999c:	10bfffc4 	addi	r2,r2,-1
    99a0:	10c7203a 	divu	r3,r2,r3
    99a4:	e0bfff17 	ldw	r2,-4(fp)
    99a8:	10c5203a 	divu	r2,r2,r3
    99ac:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    99b0:	e0bffd17 	ldw	r2,-12(fp)
    99b4:	1005003a 	cmpeq	r2,r2,zero
    99b8:	1000251e 	bne	r2,zero,9a50 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
    99bc:	e03ffe15 	stw	zero,-8(fp)
    99c0:	00001406 	br	9a14 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    99c4:	00a00034 	movhi	r2,32768
    99c8:	10bfffc4 	addi	r2,r2,-1
    99cc:	10bfffc4 	addi	r2,r2,-1
    99d0:	103ffe1e 	bne	r2,zero,99cc <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    99d4:	e0fffc17 	ldw	r3,-16(fp)
    99d8:	008003f4 	movhi	r2,15
    99dc:	10909004 	addi	r2,r2,16960
    99e0:	1887383a 	mul	r3,r3,r2
    99e4:	0080bef4 	movhi	r2,763
    99e8:	10bc2004 	addi	r2,r2,-3968
    99ec:	10c7203a 	divu	r3,r2,r3
    99f0:	00a00034 	movhi	r2,32768
    99f4:	10bfffc4 	addi	r2,r2,-1
    99f8:	10c7203a 	divu	r3,r2,r3
    99fc:	e0bfff17 	ldw	r2,-4(fp)
    9a00:	10c5c83a 	sub	r2,r2,r3
    9a04:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9a08:	e0bffe17 	ldw	r2,-8(fp)
    9a0c:	10800044 	addi	r2,r2,1
    9a10:	e0bffe15 	stw	r2,-8(fp)
    9a14:	e0fffe17 	ldw	r3,-8(fp)
    9a18:	e0bffd17 	ldw	r2,-12(fp)
    9a1c:	18bfe916 	blt	r3,r2,99c4 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9a20:	e0fffc17 	ldw	r3,-16(fp)
    9a24:	008003f4 	movhi	r2,15
    9a28:	10909004 	addi	r2,r2,16960
    9a2c:	1887383a 	mul	r3,r3,r2
    9a30:	0080bef4 	movhi	r2,763
    9a34:	10bc2004 	addi	r2,r2,-3968
    9a38:	10c7203a 	divu	r3,r2,r3
    9a3c:	e0bfff17 	ldw	r2,-4(fp)
    9a40:	1885383a 	mul	r2,r3,r2
    9a44:	10bfffc4 	addi	r2,r2,-1
    9a48:	103ffe1e 	bne	r2,zero,9a44 <alt_busy_sleep+0xe0>
    9a4c:	00000b06 	br	9a7c <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9a50:	e0fffc17 	ldw	r3,-16(fp)
    9a54:	008003f4 	movhi	r2,15
    9a58:	10909004 	addi	r2,r2,16960
    9a5c:	1887383a 	mul	r3,r3,r2
    9a60:	0080bef4 	movhi	r2,763
    9a64:	10bc2004 	addi	r2,r2,-3968
    9a68:	10c7203a 	divu	r3,r2,r3
    9a6c:	e0bfff17 	ldw	r2,-4(fp)
    9a70:	1885383a 	mul	r2,r3,r2
    9a74:	10bfffc4 	addi	r2,r2,-1
    9a78:	00bffe16 	blt	zero,r2,9a74 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9a7c:	0005883a 	mov	r2,zero
}
    9a80:	e037883a 	mov	sp,fp
    9a84:	df000017 	ldw	fp,0(sp)
    9a88:	dec00104 	addi	sp,sp,4
    9a8c:	f800283a 	ret

00009a90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9a90:	defffa04 	addi	sp,sp,-24
    9a94:	dfc00515 	stw	ra,20(sp)
    9a98:	df000415 	stw	fp,16(sp)
    9a9c:	df000404 	addi	fp,sp,16
    9aa0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9aa4:	00800074 	movhi	r2,1
    9aa8:	10bb6704 	addi	r2,r2,-4708
    9aac:	10800017 	ldw	r2,0(r2)
    9ab0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9ab4:	00003306 	br	9b84 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    9ab8:	e0bffd17 	ldw	r2,-12(fp)
    9abc:	11000217 	ldw	r4,8(r2)
    9ac0:	000a0600 	call	a060 <strlen>
    9ac4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    9ac8:	e0bffd17 	ldw	r2,-12(fp)
    9acc:	10c00217 	ldw	r3,8(r2)
    9ad0:	e0bffc17 	ldw	r2,-16(fp)
    9ad4:	1885883a 	add	r2,r3,r2
    9ad8:	10bfffc4 	addi	r2,r2,-1
    9adc:	10800003 	ldbu	r2,0(r2)
    9ae0:	10803fcc 	andi	r2,r2,255
    9ae4:	1080201c 	xori	r2,r2,128
    9ae8:	10bfe004 	addi	r2,r2,-128
    9aec:	10800bd8 	cmpnei	r2,r2,47
    9af0:	1000031e 	bne	r2,zero,9b00 <alt_find_file+0x70>
    {
      len -= 1;
    9af4:	e0bffc17 	ldw	r2,-16(fp)
    9af8:	10bfffc4 	addi	r2,r2,-1
    9afc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9b00:	e0bffc17 	ldw	r2,-16(fp)
    9b04:	1007883a 	mov	r3,r2
    9b08:	e0bffe17 	ldw	r2,-8(fp)
    9b0c:	1885883a 	add	r2,r3,r2
    9b10:	10800003 	ldbu	r2,0(r2)
    9b14:	10803fcc 	andi	r2,r2,255
    9b18:	1080201c 	xori	r2,r2,128
    9b1c:	10bfe004 	addi	r2,r2,-128
    9b20:	10800be0 	cmpeqi	r2,r2,47
    9b24:	10000a1e 	bne	r2,zero,9b50 <alt_find_file+0xc0>
    9b28:	e0bffc17 	ldw	r2,-16(fp)
    9b2c:	1007883a 	mov	r3,r2
    9b30:	e0bffe17 	ldw	r2,-8(fp)
    9b34:	1885883a 	add	r2,r3,r2
    9b38:	10800003 	ldbu	r2,0(r2)
    9b3c:	10803fcc 	andi	r2,r2,255
    9b40:	1080201c 	xori	r2,r2,128
    9b44:	10bfe004 	addi	r2,r2,-128
    9b48:	1004c03a 	cmpne	r2,r2,zero
    9b4c:	10000a1e 	bne	r2,zero,9b78 <alt_find_file+0xe8>
    9b50:	e0bffd17 	ldw	r2,-12(fp)
    9b54:	11000217 	ldw	r4,8(r2)
    9b58:	e1bffc17 	ldw	r6,-16(fp)
    9b5c:	e17ffe17 	ldw	r5,-8(fp)
    9b60:	0009d440 	call	9d44 <memcmp>
    9b64:	1004c03a 	cmpne	r2,r2,zero
    9b68:	1000031e 	bne	r2,zero,9b78 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9b6c:	e0bffd17 	ldw	r2,-12(fp)
    9b70:	e0bfff15 	stw	r2,-4(fp)
    9b74:	00000806 	br	9b98 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    9b78:	e0bffd17 	ldw	r2,-12(fp)
    9b7c:	10800017 	ldw	r2,0(r2)
    9b80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9b84:	00c00074 	movhi	r3,1
    9b88:	18fb6704 	addi	r3,r3,-4708
    9b8c:	e0bffd17 	ldw	r2,-12(fp)
    9b90:	10ffc91e 	bne	r2,r3,9ab8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9b94:	e03fff15 	stw	zero,-4(fp)
    9b98:	e0bfff17 	ldw	r2,-4(fp)
}
    9b9c:	e037883a 	mov	sp,fp
    9ba0:	dfc00117 	ldw	ra,4(sp)
    9ba4:	df000017 	ldw	fp,0(sp)
    9ba8:	dec00204 	addi	sp,sp,8
    9bac:	f800283a 	ret

00009bb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9bb0:	defffc04 	addi	sp,sp,-16
    9bb4:	df000315 	stw	fp,12(sp)
    9bb8:	df000304 	addi	fp,sp,12
    9bbc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9bc0:	00bffa04 	movi	r2,-24
    9bc4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9bc8:	e03ffe15 	stw	zero,-8(fp)
    9bcc:	00001e06 	br	9c48 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    9bd0:	e0bffe17 	ldw	r2,-8(fp)
    9bd4:	00c00074 	movhi	r3,1
    9bd8:	18f8fe04 	addi	r3,r3,-7176
    9bdc:	10800324 	muli	r2,r2,12
    9be0:	10c5883a 	add	r2,r2,r3
    9be4:	10800017 	ldw	r2,0(r2)
    9be8:	1004c03a 	cmpne	r2,r2,zero
    9bec:	1000131e 	bne	r2,zero,9c3c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    9bf0:	e0bffe17 	ldw	r2,-8(fp)
    9bf4:	00c00074 	movhi	r3,1
    9bf8:	18f8fe04 	addi	r3,r3,-7176
    9bfc:	10800324 	muli	r2,r2,12
    9c00:	10c7883a 	add	r3,r2,r3
    9c04:	e0bfff17 	ldw	r2,-4(fp)
    9c08:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    9c0c:	00800074 	movhi	r2,1
    9c10:	10bb6b04 	addi	r2,r2,-4692
    9c14:	10c00017 	ldw	r3,0(r2)
    9c18:	e0bffe17 	ldw	r2,-8(fp)
    9c1c:	1880040e 	bge	r3,r2,9c30 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    9c20:	00c00074 	movhi	r3,1
    9c24:	18fb6b04 	addi	r3,r3,-4692
    9c28:	e0bffe17 	ldw	r2,-8(fp)
    9c2c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    9c30:	e0bffe17 	ldw	r2,-8(fp)
    9c34:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9c38:	00000606 	br	9c54 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9c3c:	e0bffe17 	ldw	r2,-8(fp)
    9c40:	10800044 	addi	r2,r2,1
    9c44:	e0bffe15 	stw	r2,-8(fp)
    9c48:	e0bffe17 	ldw	r2,-8(fp)
    9c4c:	10800810 	cmplti	r2,r2,32
    9c50:	103fdf1e 	bne	r2,zero,9bd0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9c54:	e0bffd17 	ldw	r2,-12(fp)
}
    9c58:	e037883a 	mov	sp,fp
    9c5c:	df000017 	ldw	fp,0(sp)
    9c60:	dec00104 	addi	sp,sp,4
    9c64:	f800283a 	ret

00009c68 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    9c68:	defffb04 	addi	sp,sp,-20
    9c6c:	df000415 	stw	fp,16(sp)
    9c70:	df000404 	addi	fp,sp,16
    9c74:	e13ffe15 	stw	r4,-8(fp)
    9c78:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    9c7c:	e0bfff17 	ldw	r2,-4(fp)
    9c80:	10840070 	cmpltui	r2,r2,4097
    9c84:	1000021e 	bne	r2,zero,9c90 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    9c88:	00840004 	movi	r2,4096
    9c8c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    9c90:	e0fffe17 	ldw	r3,-8(fp)
    9c94:	e0bfff17 	ldw	r2,-4(fp)
    9c98:	1885883a 	add	r2,r3,r2
    9c9c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9ca0:	e0bffe17 	ldw	r2,-8(fp)
    9ca4:	e0bffd15 	stw	r2,-12(fp)
    9ca8:	00000506 	br	9cc0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9cac:	e0bffd17 	ldw	r2,-12(fp)
    9cb0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9cb4:	e0bffd17 	ldw	r2,-12(fp)
    9cb8:	10800804 	addi	r2,r2,32
    9cbc:	e0bffd15 	stw	r2,-12(fp)
    9cc0:	e0fffd17 	ldw	r3,-12(fp)
    9cc4:	e0bffc17 	ldw	r2,-16(fp)
    9cc8:	18bff836 	bltu	r3,r2,9cac <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    9ccc:	e0bffe17 	ldw	r2,-8(fp)
    9cd0:	108007cc 	andi	r2,r2,31
    9cd4:	1005003a 	cmpeq	r2,r2,zero
    9cd8:	1000021e 	bne	r2,zero,9ce4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9cdc:	e0bffd17 	ldw	r2,-12(fp)
    9ce0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    9ce4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    9ce8:	e037883a 	mov	sp,fp
    9cec:	df000017 	ldw	fp,0(sp)
    9cf0:	dec00104 	addi	sp,sp,4
    9cf4:	f800283a 	ret

00009cf8 <atexit>:
    9cf8:	200b883a 	mov	r5,r4
    9cfc:	000d883a 	mov	r6,zero
    9d00:	0009883a 	mov	r4,zero
    9d04:	000f883a 	mov	r7,zero
    9d08:	000a35c1 	jmpi	a35c <__register_exitproc>

00009d0c <exit>:
    9d0c:	defffe04 	addi	sp,sp,-8
    9d10:	000b883a 	mov	r5,zero
    9d14:	dc000015 	stw	r16,0(sp)
    9d18:	dfc00115 	stw	ra,4(sp)
    9d1c:	2021883a 	mov	r16,r4
    9d20:	000a4940 	call	a494 <__call_exitprocs>
    9d24:	00800074 	movhi	r2,1
    9d28:	10bb7004 	addi	r2,r2,-4672
    9d2c:	11000017 	ldw	r4,0(r2)
    9d30:	20800f17 	ldw	r2,60(r4)
    9d34:	10000126 	beq	r2,zero,9d3c <exit+0x30>
    9d38:	103ee83a 	callr	r2
    9d3c:	8009883a 	mov	r4,r16
    9d40:	000bfa40 	call	bfa4 <_exit>

00009d44 <memcmp>:
    9d44:	00c000c4 	movi	r3,3
    9d48:	1980032e 	bgeu	r3,r6,9d58 <memcmp+0x14>
    9d4c:	2144b03a 	or	r2,r4,r5
    9d50:	10c4703a 	and	r2,r2,r3
    9d54:	10000f26 	beq	r2,zero,9d94 <memcmp+0x50>
    9d58:	31ffffc4 	addi	r7,r6,-1
    9d5c:	3000061e 	bne	r6,zero,9d78 <memcmp+0x34>
    9d60:	00000a06 	br	9d8c <memcmp+0x48>
    9d64:	39ffffc4 	addi	r7,r7,-1
    9d68:	00bfffc4 	movi	r2,-1
    9d6c:	21000044 	addi	r4,r4,1
    9d70:	29400044 	addi	r5,r5,1
    9d74:	38800526 	beq	r7,r2,9d8c <memcmp+0x48>
    9d78:	20c00003 	ldbu	r3,0(r4)
    9d7c:	28800003 	ldbu	r2,0(r5)
    9d80:	18bff826 	beq	r3,r2,9d64 <memcmp+0x20>
    9d84:	1885c83a 	sub	r2,r3,r2
    9d88:	f800283a 	ret
    9d8c:	0005883a 	mov	r2,zero
    9d90:	f800283a 	ret
    9d94:	180f883a 	mov	r7,r3
    9d98:	20c00017 	ldw	r3,0(r4)
    9d9c:	28800017 	ldw	r2,0(r5)
    9da0:	18bfed1e 	bne	r3,r2,9d58 <memcmp+0x14>
    9da4:	31bfff04 	addi	r6,r6,-4
    9da8:	21000104 	addi	r4,r4,4
    9dac:	29400104 	addi	r5,r5,4
    9db0:	39bff936 	bltu	r7,r6,9d98 <memcmp+0x54>
    9db4:	003fe806 	br	9d58 <memcmp+0x14>

00009db8 <putc>:
    9db8:	defffc04 	addi	sp,sp,-16
    9dbc:	dc800215 	stw	r18,8(sp)
    9dc0:	04800074 	movhi	r18,1
    9dc4:	94bb6f04 	addi	r18,r18,-4676
    9dc8:	90c00017 	ldw	r3,0(r18)
    9dcc:	dc400115 	stw	r17,4(sp)
    9dd0:	dc000015 	stw	r16,0(sp)
    9dd4:	dfc00315 	stw	ra,12(sp)
    9dd8:	2023883a 	mov	r17,r4
    9ddc:	2821883a 	mov	r16,r5
    9de0:	18000226 	beq	r3,zero,9dec <putc+0x34>
    9de4:	18800e17 	ldw	r2,56(r3)
    9de8:	10001126 	beq	r2,zero,9e30 <putc+0x78>
    9dec:	80800217 	ldw	r2,8(r16)
    9df0:	10ffffc4 	addi	r3,r2,-1
    9df4:	80c00215 	stw	r3,8(r16)
    9df8:	18001316 	blt	r3,zero,9e48 <putc+0x90>
    9dfc:	80800017 	ldw	r2,0(r16)
    9e00:	14400005 	stb	r17,0(r2)
    9e04:	80c00017 	ldw	r3,0(r16)
    9e08:	18800044 	addi	r2,r3,1
    9e0c:	18c00003 	ldbu	r3,0(r3)
    9e10:	80800015 	stw	r2,0(r16)
    9e14:	1805883a 	mov	r2,r3
    9e18:	dfc00317 	ldw	ra,12(sp)
    9e1c:	dc800217 	ldw	r18,8(sp)
    9e20:	dc400117 	ldw	r17,4(sp)
    9e24:	dc000017 	ldw	r16,0(sp)
    9e28:	dec00404 	addi	sp,sp,16
    9e2c:	f800283a 	ret
    9e30:	1809883a 	mov	r4,r3
    9e34:	000a8dc0 	call	a8dc <__sinit>
    9e38:	80800217 	ldw	r2,8(r16)
    9e3c:	10ffffc4 	addi	r3,r2,-1
    9e40:	80c00215 	stw	r3,8(r16)
    9e44:	183fed0e 	bge	r3,zero,9dfc <putc+0x44>
    9e48:	80800617 	ldw	r2,24(r16)
    9e4c:	18800f16 	blt	r3,r2,9e8c <putc+0xd4>
    9e50:	80800017 	ldw	r2,0(r16)
    9e54:	14400005 	stb	r17,0(r2)
    9e58:	81000017 	ldw	r4,0(r16)
    9e5c:	00800284 	movi	r2,10
    9e60:	20c00003 	ldbu	r3,0(r4)
    9e64:	18801226 	beq	r3,r2,9eb0 <putc+0xf8>
    9e68:	20800044 	addi	r2,r4,1
    9e6c:	80800015 	stw	r2,0(r16)
    9e70:	1805883a 	mov	r2,r3
    9e74:	dfc00317 	ldw	ra,12(sp)
    9e78:	dc800217 	ldw	r18,8(sp)
    9e7c:	dc400117 	ldw	r17,4(sp)
    9e80:	dc000017 	ldw	r16,0(sp)
    9e84:	dec00404 	addi	sp,sp,16
    9e88:	f800283a 	ret
    9e8c:	91000017 	ldw	r4,0(r18)
    9e90:	880b883a 	mov	r5,r17
    9e94:	800d883a 	mov	r6,r16
    9e98:	dfc00317 	ldw	ra,12(sp)
    9e9c:	dc800217 	ldw	r18,8(sp)
    9ea0:	dc400117 	ldw	r17,4(sp)
    9ea4:	dc000017 	ldw	r16,0(sp)
    9ea8:	dec00404 	addi	sp,sp,16
    9eac:	000a0d41 	jmpi	a0d4 <__swbuf_r>
    9eb0:	91000017 	ldw	r4,0(r18)
    9eb4:	180b883a 	mov	r5,r3
    9eb8:	003ff606 	br	9e94 <putc+0xdc>

00009ebc <_putc_r>:
    9ebc:	defffc04 	addi	sp,sp,-16
    9ec0:	dc400215 	stw	r17,8(sp)
    9ec4:	dc000115 	stw	r16,4(sp)
    9ec8:	dfc00315 	stw	ra,12(sp)
    9ecc:	2021883a 	mov	r16,r4
    9ed0:	2823883a 	mov	r17,r5
    9ed4:	20000226 	beq	r4,zero,9ee0 <_putc_r+0x24>
    9ed8:	20800e17 	ldw	r2,56(r4)
    9edc:	10001026 	beq	r2,zero,9f20 <_putc_r+0x64>
    9ee0:	30800217 	ldw	r2,8(r6)
    9ee4:	10ffffc4 	addi	r3,r2,-1
    9ee8:	30c00215 	stw	r3,8(r6)
    9eec:	18001316 	blt	r3,zero,9f3c <_putc_r+0x80>
    9ef0:	30800017 	ldw	r2,0(r6)
    9ef4:	14400005 	stb	r17,0(r2)
    9ef8:	30c00017 	ldw	r3,0(r6)
    9efc:	18800044 	addi	r2,r3,1
    9f00:	18c00003 	ldbu	r3,0(r3)
    9f04:	30800015 	stw	r2,0(r6)
    9f08:	1805883a 	mov	r2,r3
    9f0c:	dfc00317 	ldw	ra,12(sp)
    9f10:	dc400217 	ldw	r17,8(sp)
    9f14:	dc000117 	ldw	r16,4(sp)
    9f18:	dec00404 	addi	sp,sp,16
    9f1c:	f800283a 	ret
    9f20:	d9800015 	stw	r6,0(sp)
    9f24:	000a8dc0 	call	a8dc <__sinit>
    9f28:	d9800017 	ldw	r6,0(sp)
    9f2c:	30800217 	ldw	r2,8(r6)
    9f30:	10ffffc4 	addi	r3,r2,-1
    9f34:	30c00215 	stw	r3,8(r6)
    9f38:	183fed0e 	bge	r3,zero,9ef0 <_putc_r+0x34>
    9f3c:	30800617 	ldw	r2,24(r6)
    9f40:	18800e16 	blt	r3,r2,9f7c <_putc_r+0xc0>
    9f44:	30800017 	ldw	r2,0(r6)
    9f48:	14400005 	stb	r17,0(r2)
    9f4c:	31000017 	ldw	r4,0(r6)
    9f50:	00800284 	movi	r2,10
    9f54:	20c00003 	ldbu	r3,0(r4)
    9f58:	18800f26 	beq	r3,r2,9f98 <_putc_r+0xdc>
    9f5c:	20800044 	addi	r2,r4,1
    9f60:	30800015 	stw	r2,0(r6)
    9f64:	1805883a 	mov	r2,r3
    9f68:	dfc00317 	ldw	ra,12(sp)
    9f6c:	dc400217 	ldw	r17,8(sp)
    9f70:	dc000117 	ldw	r16,4(sp)
    9f74:	dec00404 	addi	sp,sp,16
    9f78:	f800283a 	ret
    9f7c:	8009883a 	mov	r4,r16
    9f80:	880b883a 	mov	r5,r17
    9f84:	dfc00317 	ldw	ra,12(sp)
    9f88:	dc400217 	ldw	r17,8(sp)
    9f8c:	dc000117 	ldw	r16,4(sp)
    9f90:	dec00404 	addi	sp,sp,16
    9f94:	000a0d41 	jmpi	a0d4 <__swbuf_r>
    9f98:	8009883a 	mov	r4,r16
    9f9c:	180b883a 	mov	r5,r3
    9fa0:	003ff806 	br	9f84 <_putc_r+0xc8>

00009fa4 <strcmp>:
    9fa4:	2144b03a 	or	r2,r4,r5
    9fa8:	108000cc 	andi	r2,r2,3
    9fac:	10001d1e 	bne	r2,zero,a024 <strcmp+0x80>
    9fb0:	200f883a 	mov	r7,r4
    9fb4:	28800017 	ldw	r2,0(r5)
    9fb8:	21000017 	ldw	r4,0(r4)
    9fbc:	280d883a 	mov	r6,r5
    9fc0:	2080161e 	bne	r4,r2,a01c <strcmp+0x78>
    9fc4:	023fbff4 	movhi	r8,65279
    9fc8:	423fbfc4 	addi	r8,r8,-257
    9fcc:	2207883a 	add	r3,r4,r8
    9fd0:	01602074 	movhi	r5,32897
    9fd4:	29602004 	addi	r5,r5,-32640
    9fd8:	1946703a 	and	r3,r3,r5
    9fdc:	0104303a 	nor	r2,zero,r4
    9fe0:	10c4703a 	and	r2,r2,r3
    9fe4:	10001c1e 	bne	r2,zero,a058 <strcmp+0xb4>
    9fe8:	4013883a 	mov	r9,r8
    9fec:	2811883a 	mov	r8,r5
    9ff0:	00000106 	br	9ff8 <strcmp+0x54>
    9ff4:	1800181e 	bne	r3,zero,a058 <strcmp+0xb4>
    9ff8:	39c00104 	addi	r7,r7,4
    9ffc:	39000017 	ldw	r4,0(r7)
    a000:	31800104 	addi	r6,r6,4
    a004:	31400017 	ldw	r5,0(r6)
    a008:	2245883a 	add	r2,r4,r9
    a00c:	1204703a 	and	r2,r2,r8
    a010:	0106303a 	nor	r3,zero,r4
    a014:	1886703a 	and	r3,r3,r2
    a018:	217ff626 	beq	r4,r5,9ff4 <strcmp+0x50>
    a01c:	3809883a 	mov	r4,r7
    a020:	300b883a 	mov	r5,r6
    a024:	20c00007 	ldb	r3,0(r4)
    a028:	1800051e 	bne	r3,zero,a040 <strcmp+0x9c>
    a02c:	00000606 	br	a048 <strcmp+0xa4>
    a030:	21000044 	addi	r4,r4,1
    a034:	20c00007 	ldb	r3,0(r4)
    a038:	29400044 	addi	r5,r5,1
    a03c:	18000226 	beq	r3,zero,a048 <strcmp+0xa4>
    a040:	28800007 	ldb	r2,0(r5)
    a044:	18bffa26 	beq	r3,r2,a030 <strcmp+0x8c>
    a048:	20c00003 	ldbu	r3,0(r4)
    a04c:	28800003 	ldbu	r2,0(r5)
    a050:	1885c83a 	sub	r2,r3,r2
    a054:	f800283a 	ret
    a058:	0005883a 	mov	r2,zero
    a05c:	f800283a 	ret

0000a060 <strlen>:
    a060:	208000cc 	andi	r2,r4,3
    a064:	2011883a 	mov	r8,r4
    a068:	1000161e 	bne	r2,zero,a0c4 <strlen+0x64>
    a06c:	20c00017 	ldw	r3,0(r4)
    a070:	017fbff4 	movhi	r5,65279
    a074:	297fbfc4 	addi	r5,r5,-257
    a078:	01e02074 	movhi	r7,32897
    a07c:	39e02004 	addi	r7,r7,-32640
    a080:	1945883a 	add	r2,r3,r5
    a084:	11c4703a 	and	r2,r2,r7
    a088:	00c6303a 	nor	r3,zero,r3
    a08c:	1886703a 	and	r3,r3,r2
    a090:	18000c1e 	bne	r3,zero,a0c4 <strlen+0x64>
    a094:	280d883a 	mov	r6,r5
    a098:	380b883a 	mov	r5,r7
    a09c:	21000104 	addi	r4,r4,4
    a0a0:	20800017 	ldw	r2,0(r4)
    a0a4:	1187883a 	add	r3,r2,r6
    a0a8:	1946703a 	and	r3,r3,r5
    a0ac:	0084303a 	nor	r2,zero,r2
    a0b0:	10c4703a 	and	r2,r2,r3
    a0b4:	103ff926 	beq	r2,zero,a09c <strlen+0x3c>
    a0b8:	20800007 	ldb	r2,0(r4)
    a0bc:	10000326 	beq	r2,zero,a0cc <strlen+0x6c>
    a0c0:	21000044 	addi	r4,r4,1
    a0c4:	20800007 	ldb	r2,0(r4)
    a0c8:	103ffd1e 	bne	r2,zero,a0c0 <strlen+0x60>
    a0cc:	2205c83a 	sub	r2,r4,r8
    a0d0:	f800283a 	ret

0000a0d4 <__swbuf_r>:
    a0d4:	defffc04 	addi	sp,sp,-16
    a0d8:	dc400215 	stw	r17,8(sp)
    a0dc:	dc000115 	stw	r16,4(sp)
    a0e0:	dfc00315 	stw	ra,12(sp)
    a0e4:	2023883a 	mov	r17,r4
    a0e8:	2821883a 	mov	r16,r5
    a0ec:	20000226 	beq	r4,zero,a0f8 <__swbuf_r+0x24>
    a0f0:	20800e17 	ldw	r2,56(r4)
    a0f4:	10002f26 	beq	r2,zero,a1b4 <__swbuf_r+0xe0>
    a0f8:	3080030b 	ldhu	r2,12(r6)
    a0fc:	30c00617 	ldw	r3,24(r6)
    a100:	1080020c 	andi	r2,r2,8
    a104:	30c00215 	stw	r3,8(r6)
    a108:	10002226 	beq	r2,zero,a194 <__swbuf_r+0xc0>
    a10c:	30c00417 	ldw	r3,16(r6)
    a110:	18002026 	beq	r3,zero,a194 <__swbuf_r+0xc0>
    a114:	31000017 	ldw	r4,0(r6)
    a118:	30800517 	ldw	r2,20(r6)
    a11c:	20c7c83a 	sub	r3,r4,r3
    a120:	18802f0e 	bge	r3,r2,a1e0 <__swbuf_r+0x10c>
    a124:	19400044 	addi	r5,r3,1
    a128:	30800217 	ldw	r2,8(r6)
    a12c:	84003fcc 	andi	r16,r16,255
    a130:	20c00044 	addi	r3,r4,1
    a134:	10bfffc4 	addi	r2,r2,-1
    a138:	30800215 	stw	r2,8(r6)
    a13c:	24000005 	stb	r16,0(r4)
    a140:	30800517 	ldw	r2,20(r6)
    a144:	30c00015 	stw	r3,0(r6)
    a148:	11400c26 	beq	r2,r5,a17c <__swbuf_r+0xa8>
    a14c:	3080030b 	ldhu	r2,12(r6)
    a150:	1080004c 	andi	r2,r2,1
    a154:	1005003a 	cmpeq	r2,r2,zero
    a158:	10000626 	beq	r2,zero,a174 <__swbuf_r+0xa0>
    a15c:	8005883a 	mov	r2,r16
    a160:	dfc00317 	ldw	ra,12(sp)
    a164:	dc400217 	ldw	r17,8(sp)
    a168:	dc000117 	ldw	r16,4(sp)
    a16c:	dec00404 	addi	sp,sp,16
    a170:	f800283a 	ret
    a174:	00800284 	movi	r2,10
    a178:	80bff81e 	bne	r16,r2,a15c <__swbuf_r+0x88>
    a17c:	8809883a 	mov	r4,r17
    a180:	300b883a 	mov	r5,r6
    a184:	000a6440 	call	a644 <_fflush_r>
    a188:	103ff426 	beq	r2,zero,a15c <__swbuf_r+0x88>
    a18c:	043fffc4 	movi	r16,-1
    a190:	003ff206 	br	a15c <__swbuf_r+0x88>
    a194:	300b883a 	mov	r5,r6
    a198:	8809883a 	mov	r4,r17
    a19c:	d9800015 	stw	r6,0(sp)
    a1a0:	000a2200 	call	a220 <__swsetup_r>
    a1a4:	d9800017 	ldw	r6,0(sp)
    a1a8:	1000061e 	bne	r2,zero,a1c4 <__swbuf_r+0xf0>
    a1ac:	30c00417 	ldw	r3,16(r6)
    a1b0:	003fd806 	br	a114 <__swbuf_r+0x40>
    a1b4:	d9800015 	stw	r6,0(sp)
    a1b8:	000a8dc0 	call	a8dc <__sinit>
    a1bc:	d9800017 	ldw	r6,0(sp)
    a1c0:	003fcd06 	br	a0f8 <__swbuf_r+0x24>
    a1c4:	3080030b 	ldhu	r2,12(r6)
    a1c8:	00c00244 	movi	r3,9
    a1cc:	043fffc4 	movi	r16,-1
    a1d0:	10801014 	ori	r2,r2,64
    a1d4:	3080030d 	sth	r2,12(r6)
    a1d8:	88c00015 	stw	r3,0(r17)
    a1dc:	003fdf06 	br	a15c <__swbuf_r+0x88>
    a1e0:	300b883a 	mov	r5,r6
    a1e4:	8809883a 	mov	r4,r17
    a1e8:	d9800015 	stw	r6,0(sp)
    a1ec:	000a6440 	call	a644 <_fflush_r>
    a1f0:	d9800017 	ldw	r6,0(sp)
    a1f4:	103fe51e 	bne	r2,zero,a18c <__swbuf_r+0xb8>
    a1f8:	31000017 	ldw	r4,0(r6)
    a1fc:	01400044 	movi	r5,1
    a200:	003fc906 	br	a128 <__swbuf_r+0x54>

0000a204 <__swbuf>:
    a204:	01800074 	movhi	r6,1
    a208:	31bb6f04 	addi	r6,r6,-4676
    a20c:	2007883a 	mov	r3,r4
    a210:	31000017 	ldw	r4,0(r6)
    a214:	280d883a 	mov	r6,r5
    a218:	180b883a 	mov	r5,r3
    a21c:	000a0d41 	jmpi	a0d4 <__swbuf_r>

0000a220 <__swsetup_r>:
    a220:	00800074 	movhi	r2,1
    a224:	10bb6f04 	addi	r2,r2,-4676
    a228:	10c00017 	ldw	r3,0(r2)
    a22c:	defffd04 	addi	sp,sp,-12
    a230:	dc400115 	stw	r17,4(sp)
    a234:	dc000015 	stw	r16,0(sp)
    a238:	dfc00215 	stw	ra,8(sp)
    a23c:	2023883a 	mov	r17,r4
    a240:	2821883a 	mov	r16,r5
    a244:	18000226 	beq	r3,zero,a250 <__swsetup_r+0x30>
    a248:	18800e17 	ldw	r2,56(r3)
    a24c:	10001f26 	beq	r2,zero,a2cc <__swsetup_r+0xac>
    a250:	8100030b 	ldhu	r4,12(r16)
    a254:	2080020c 	andi	r2,r4,8
    a258:	10002826 	beq	r2,zero,a2fc <__swsetup_r+0xdc>
    a25c:	81400417 	ldw	r5,16(r16)
    a260:	28001d26 	beq	r5,zero,a2d8 <__swsetup_r+0xb8>
    a264:	2080004c 	andi	r2,r4,1
    a268:	1005003a 	cmpeq	r2,r2,zero
    a26c:	10000b26 	beq	r2,zero,a29c <__swsetup_r+0x7c>
    a270:	2080008c 	andi	r2,r4,2
    a274:	10001226 	beq	r2,zero,a2c0 <__swsetup_r+0xa0>
    a278:	0005883a 	mov	r2,zero
    a27c:	80800215 	stw	r2,8(r16)
    a280:	28000b26 	beq	r5,zero,a2b0 <__swsetup_r+0x90>
    a284:	0005883a 	mov	r2,zero
    a288:	dfc00217 	ldw	ra,8(sp)
    a28c:	dc400117 	ldw	r17,4(sp)
    a290:	dc000017 	ldw	r16,0(sp)
    a294:	dec00304 	addi	sp,sp,12
    a298:	f800283a 	ret
    a29c:	80800517 	ldw	r2,20(r16)
    a2a0:	80000215 	stw	zero,8(r16)
    a2a4:	0085c83a 	sub	r2,zero,r2
    a2a8:	80800615 	stw	r2,24(r16)
    a2ac:	283ff51e 	bne	r5,zero,a284 <__swsetup_r+0x64>
    a2b0:	2080200c 	andi	r2,r4,128
    a2b4:	103ff326 	beq	r2,zero,a284 <__swsetup_r+0x64>
    a2b8:	00bfffc4 	movi	r2,-1
    a2bc:	003ff206 	br	a288 <__swsetup_r+0x68>
    a2c0:	80800517 	ldw	r2,20(r16)
    a2c4:	80800215 	stw	r2,8(r16)
    a2c8:	003fed06 	br	a280 <__swsetup_r+0x60>
    a2cc:	1809883a 	mov	r4,r3
    a2d0:	000a8dc0 	call	a8dc <__sinit>
    a2d4:	003fde06 	br	a250 <__swsetup_r+0x30>
    a2d8:	20c0a00c 	andi	r3,r4,640
    a2dc:	00808004 	movi	r2,512
    a2e0:	18bfe026 	beq	r3,r2,a264 <__swsetup_r+0x44>
    a2e4:	8809883a 	mov	r4,r17
    a2e8:	800b883a 	mov	r5,r16
    a2ec:	000b0f40 	call	b0f4 <__smakebuf_r>
    a2f0:	8100030b 	ldhu	r4,12(r16)
    a2f4:	81400417 	ldw	r5,16(r16)
    a2f8:	003fda06 	br	a264 <__swsetup_r+0x44>
    a2fc:	2080040c 	andi	r2,r4,16
    a300:	103fed26 	beq	r2,zero,a2b8 <__swsetup_r+0x98>
    a304:	2080010c 	andi	r2,r4,4
    a308:	10001226 	beq	r2,zero,a354 <__swsetup_r+0x134>
    a30c:	81400c17 	ldw	r5,48(r16)
    a310:	28000526 	beq	r5,zero,a328 <__swsetup_r+0x108>
    a314:	80801004 	addi	r2,r16,64
    a318:	28800226 	beq	r5,r2,a324 <__swsetup_r+0x104>
    a31c:	8809883a 	mov	r4,r17
    a320:	000ac600 	call	ac60 <_free_r>
    a324:	80000c15 	stw	zero,48(r16)
    a328:	8080030b 	ldhu	r2,12(r16)
    a32c:	81400417 	ldw	r5,16(r16)
    a330:	80000115 	stw	zero,4(r16)
    a334:	10bff6cc 	andi	r2,r2,65499
    a338:	8080030d 	sth	r2,12(r16)
    a33c:	81400015 	stw	r5,0(r16)
    a340:	8080030b 	ldhu	r2,12(r16)
    a344:	10800214 	ori	r2,r2,8
    a348:	113fffcc 	andi	r4,r2,65535
    a34c:	8080030d 	sth	r2,12(r16)
    a350:	003fc306 	br	a260 <__swsetup_r+0x40>
    a354:	81400417 	ldw	r5,16(r16)
    a358:	003ff906 	br	a340 <__swsetup_r+0x120>

0000a35c <__register_exitproc>:
    a35c:	defffa04 	addi	sp,sp,-24
    a360:	00800074 	movhi	r2,1
    a364:	10bb7004 	addi	r2,r2,-4672
    a368:	dc000015 	stw	r16,0(sp)
    a36c:	14000017 	ldw	r16,0(r2)
    a370:	dd000415 	stw	r20,16(sp)
    a374:	2829883a 	mov	r20,r5
    a378:	81405217 	ldw	r5,328(r16)
    a37c:	dcc00315 	stw	r19,12(sp)
    a380:	dc800215 	stw	r18,8(sp)
    a384:	dc400115 	stw	r17,4(sp)
    a388:	dfc00515 	stw	ra,20(sp)
    a38c:	2023883a 	mov	r17,r4
    a390:	3027883a 	mov	r19,r6
    a394:	3825883a 	mov	r18,r7
    a398:	28002526 	beq	r5,zero,a430 <__register_exitproc+0xd4>
    a39c:	29000117 	ldw	r4,4(r5)
    a3a0:	008007c4 	movi	r2,31
    a3a4:	11002716 	blt	r2,r4,a444 <__register_exitproc+0xe8>
    a3a8:	8800101e 	bne	r17,zero,a3ec <__register_exitproc+0x90>
    a3ac:	2105883a 	add	r2,r4,r4
    a3b0:	1085883a 	add	r2,r2,r2
    a3b4:	20c00044 	addi	r3,r4,1
    a3b8:	1145883a 	add	r2,r2,r5
    a3bc:	0009883a 	mov	r4,zero
    a3c0:	15000215 	stw	r20,8(r2)
    a3c4:	28c00115 	stw	r3,4(r5)
    a3c8:	2005883a 	mov	r2,r4
    a3cc:	dfc00517 	ldw	ra,20(sp)
    a3d0:	dd000417 	ldw	r20,16(sp)
    a3d4:	dcc00317 	ldw	r19,12(sp)
    a3d8:	dc800217 	ldw	r18,8(sp)
    a3dc:	dc400117 	ldw	r17,4(sp)
    a3e0:	dc000017 	ldw	r16,0(sp)
    a3e4:	dec00604 	addi	sp,sp,24
    a3e8:	f800283a 	ret
    a3ec:	29802204 	addi	r6,r5,136
    a3f0:	00800044 	movi	r2,1
    a3f4:	110e983a 	sll	r7,r2,r4
    a3f8:	30c04017 	ldw	r3,256(r6)
    a3fc:	2105883a 	add	r2,r4,r4
    a400:	1085883a 	add	r2,r2,r2
    a404:	1185883a 	add	r2,r2,r6
    a408:	19c6b03a 	or	r3,r3,r7
    a40c:	14802015 	stw	r18,128(r2)
    a410:	14c00015 	stw	r19,0(r2)
    a414:	00800084 	movi	r2,2
    a418:	30c04015 	stw	r3,256(r6)
    a41c:	88bfe31e 	bne	r17,r2,a3ac <__register_exitproc+0x50>
    a420:	30804117 	ldw	r2,260(r6)
    a424:	11c4b03a 	or	r2,r2,r7
    a428:	30804115 	stw	r2,260(r6)
    a42c:	003fdf06 	br	a3ac <__register_exitproc+0x50>
    a430:	00801ef4 	movhi	r2,123
    a434:	1088b104 	addi	r2,r2,8900
    a438:	100b883a 	mov	r5,r2
    a43c:	80805215 	stw	r2,328(r16)
    a440:	003fd606 	br	a39c <__register_exitproc+0x40>
    a444:	00800034 	movhi	r2,0
    a448:	10800004 	addi	r2,r2,0
    a44c:	1000021e 	bne	r2,zero,a458 <__register_exitproc+0xfc>
    a450:	013fffc4 	movi	r4,-1
    a454:	003fdc06 	br	a3c8 <__register_exitproc+0x6c>
    a458:	01006404 	movi	r4,400
    a45c:	103ee83a 	callr	r2
    a460:	1007883a 	mov	r3,r2
    a464:	103ffa26 	beq	r2,zero,a450 <__register_exitproc+0xf4>
    a468:	80805217 	ldw	r2,328(r16)
    a46c:	180b883a 	mov	r5,r3
    a470:	18000115 	stw	zero,4(r3)
    a474:	18800015 	stw	r2,0(r3)
    a478:	80c05215 	stw	r3,328(r16)
    a47c:	18006215 	stw	zero,392(r3)
    a480:	18006315 	stw	zero,396(r3)
    a484:	0009883a 	mov	r4,zero
    a488:	883fc826 	beq	r17,zero,a3ac <__register_exitproc+0x50>
    a48c:	003fd706 	br	a3ec <__register_exitproc+0x90>

0000a490 <register_fini>:
    a490:	f800283a 	ret

0000a494 <__call_exitprocs>:
    a494:	00800074 	movhi	r2,1
    a498:	10bb7004 	addi	r2,r2,-4672
    a49c:	10800017 	ldw	r2,0(r2)
    a4a0:	defff304 	addi	sp,sp,-52
    a4a4:	df000b15 	stw	fp,44(sp)
    a4a8:	d8800115 	stw	r2,4(sp)
    a4ac:	00800034 	movhi	r2,0
    a4b0:	10800004 	addi	r2,r2,0
    a4b4:	1005003a 	cmpeq	r2,r2,zero
    a4b8:	d8800215 	stw	r2,8(sp)
    a4bc:	d8800117 	ldw	r2,4(sp)
    a4c0:	dd400815 	stw	r21,32(sp)
    a4c4:	dd000715 	stw	r20,28(sp)
    a4c8:	10805204 	addi	r2,r2,328
    a4cc:	dfc00c15 	stw	ra,48(sp)
    a4d0:	ddc00a15 	stw	r23,40(sp)
    a4d4:	dd800915 	stw	r22,36(sp)
    a4d8:	dcc00615 	stw	r19,24(sp)
    a4dc:	dc800515 	stw	r18,20(sp)
    a4e0:	dc400415 	stw	r17,16(sp)
    a4e4:	dc000315 	stw	r16,12(sp)
    a4e8:	282b883a 	mov	r21,r5
    a4ec:	2039883a 	mov	fp,r4
    a4f0:	d8800015 	stw	r2,0(sp)
    a4f4:	2829003a 	cmpeq	r20,r5,zero
    a4f8:	d8800117 	ldw	r2,4(sp)
    a4fc:	14405217 	ldw	r17,328(r2)
    a500:	88001026 	beq	r17,zero,a544 <__call_exitprocs+0xb0>
    a504:	ddc00017 	ldw	r23,0(sp)
    a508:	88800117 	ldw	r2,4(r17)
    a50c:	8c802204 	addi	r18,r17,136
    a510:	143fffc4 	addi	r16,r2,-1
    a514:	80000916 	blt	r16,zero,a53c <__call_exitprocs+0xa8>
    a518:	05bfffc4 	movi	r22,-1
    a51c:	a000151e 	bne	r20,zero,a574 <__call_exitprocs+0xe0>
    a520:	8409883a 	add	r4,r16,r16
    a524:	2105883a 	add	r2,r4,r4
    a528:	1485883a 	add	r2,r2,r18
    a52c:	10c02017 	ldw	r3,128(r2)
    a530:	a8c01126 	beq	r21,r3,a578 <__call_exitprocs+0xe4>
    a534:	843fffc4 	addi	r16,r16,-1
    a538:	85bff81e 	bne	r16,r22,a51c <__call_exitprocs+0x88>
    a53c:	d8800217 	ldw	r2,8(sp)
    a540:	10003126 	beq	r2,zero,a608 <__call_exitprocs+0x174>
    a544:	dfc00c17 	ldw	ra,48(sp)
    a548:	df000b17 	ldw	fp,44(sp)
    a54c:	ddc00a17 	ldw	r23,40(sp)
    a550:	dd800917 	ldw	r22,36(sp)
    a554:	dd400817 	ldw	r21,32(sp)
    a558:	dd000717 	ldw	r20,28(sp)
    a55c:	dcc00617 	ldw	r19,24(sp)
    a560:	dc800517 	ldw	r18,20(sp)
    a564:	dc400417 	ldw	r17,16(sp)
    a568:	dc000317 	ldw	r16,12(sp)
    a56c:	dec00d04 	addi	sp,sp,52
    a570:	f800283a 	ret
    a574:	8409883a 	add	r4,r16,r16
    a578:	88c00117 	ldw	r3,4(r17)
    a57c:	2105883a 	add	r2,r4,r4
    a580:	1445883a 	add	r2,r2,r17
    a584:	18ffffc4 	addi	r3,r3,-1
    a588:	11800217 	ldw	r6,8(r2)
    a58c:	1c001526 	beq	r3,r16,a5e4 <__call_exitprocs+0x150>
    a590:	10000215 	stw	zero,8(r2)
    a594:	303fe726 	beq	r6,zero,a534 <__call_exitprocs+0xa0>
    a598:	00c00044 	movi	r3,1
    a59c:	1c06983a 	sll	r3,r3,r16
    a5a0:	90804017 	ldw	r2,256(r18)
    a5a4:	8cc00117 	ldw	r19,4(r17)
    a5a8:	1884703a 	and	r2,r3,r2
    a5ac:	10001426 	beq	r2,zero,a600 <__call_exitprocs+0x16c>
    a5b0:	90804117 	ldw	r2,260(r18)
    a5b4:	1884703a 	and	r2,r3,r2
    a5b8:	10000c1e 	bne	r2,zero,a5ec <__call_exitprocs+0x158>
    a5bc:	2105883a 	add	r2,r4,r4
    a5c0:	1485883a 	add	r2,r2,r18
    a5c4:	11400017 	ldw	r5,0(r2)
    a5c8:	e009883a 	mov	r4,fp
    a5cc:	303ee83a 	callr	r6
    a5d0:	88800117 	ldw	r2,4(r17)
    a5d4:	98bfc81e 	bne	r19,r2,a4f8 <__call_exitprocs+0x64>
    a5d8:	b8800017 	ldw	r2,0(r23)
    a5dc:	147fd526 	beq	r2,r17,a534 <__call_exitprocs+0xa0>
    a5e0:	003fc506 	br	a4f8 <__call_exitprocs+0x64>
    a5e4:	8c000115 	stw	r16,4(r17)
    a5e8:	003fea06 	br	a594 <__call_exitprocs+0x100>
    a5ec:	2105883a 	add	r2,r4,r4
    a5f0:	1485883a 	add	r2,r2,r18
    a5f4:	11000017 	ldw	r4,0(r2)
    a5f8:	303ee83a 	callr	r6
    a5fc:	003ff406 	br	a5d0 <__call_exitprocs+0x13c>
    a600:	303ee83a 	callr	r6
    a604:	003ff206 	br	a5d0 <__call_exitprocs+0x13c>
    a608:	88800117 	ldw	r2,4(r17)
    a60c:	1000081e 	bne	r2,zero,a630 <__call_exitprocs+0x19c>
    a610:	89000017 	ldw	r4,0(r17)
    a614:	20000726 	beq	r4,zero,a634 <__call_exitprocs+0x1a0>
    a618:	b9000015 	stw	r4,0(r23)
    a61c:	8809883a 	mov	r4,r17
    a620:	00000000 	call	0 <__alt_mem_SDRAM>
    a624:	bc400017 	ldw	r17,0(r23)
    a628:	883fb71e 	bne	r17,zero,a508 <__call_exitprocs+0x74>
    a62c:	003fc506 	br	a544 <__call_exitprocs+0xb0>
    a630:	89000017 	ldw	r4,0(r17)
    a634:	882f883a 	mov	r23,r17
    a638:	2023883a 	mov	r17,r4
    a63c:	883fb21e 	bne	r17,zero,a508 <__call_exitprocs+0x74>
    a640:	003fc006 	br	a544 <__call_exitprocs+0xb0>

0000a644 <_fflush_r>:
    a644:	defffb04 	addi	sp,sp,-20
    a648:	dcc00315 	stw	r19,12(sp)
    a64c:	dc800215 	stw	r18,8(sp)
    a650:	dfc00415 	stw	ra,16(sp)
    a654:	dc400115 	stw	r17,4(sp)
    a658:	dc000015 	stw	r16,0(sp)
    a65c:	2027883a 	mov	r19,r4
    a660:	2825883a 	mov	r18,r5
    a664:	20000226 	beq	r4,zero,a670 <_fflush_r+0x2c>
    a668:	20800e17 	ldw	r2,56(r4)
    a66c:	10005626 	beq	r2,zero,a7c8 <_fflush_r+0x184>
    a670:	9100030b 	ldhu	r4,12(r18)
    a674:	20ffffcc 	andi	r3,r4,65535
    a678:	18e0001c 	xori	r3,r3,32768
    a67c:	18e00004 	addi	r3,r3,-32768
    a680:	1880020c 	andi	r2,r3,8
    a684:	1000261e 	bne	r2,zero,a720 <_fflush_r+0xdc>
    a688:	90c00117 	ldw	r3,4(r18)
    a68c:	20820014 	ori	r2,r4,2048
    a690:	9080030d 	sth	r2,12(r18)
    a694:	1009883a 	mov	r4,r2
    a698:	00c0400e 	bge	zero,r3,a79c <_fflush_r+0x158>
    a69c:	92000a17 	ldw	r8,40(r18)
    a6a0:	40004026 	beq	r8,zero,a7a4 <_fflush_r+0x160>
    a6a4:	2084000c 	andi	r2,r4,4096
    a6a8:	10005326 	beq	r2,zero,a7f8 <_fflush_r+0x1b4>
    a6ac:	94001417 	ldw	r16,80(r18)
    a6b0:	9080030b 	ldhu	r2,12(r18)
    a6b4:	1080010c 	andi	r2,r2,4
    a6b8:	1000481e 	bne	r2,zero,a7dc <_fflush_r+0x198>
    a6bc:	91400717 	ldw	r5,28(r18)
    a6c0:	9809883a 	mov	r4,r19
    a6c4:	800d883a 	mov	r6,r16
    a6c8:	000f883a 	mov	r7,zero
    a6cc:	403ee83a 	callr	r8
    a6d0:	8080261e 	bne	r16,r2,a76c <_fflush_r+0x128>
    a6d4:	9080030b 	ldhu	r2,12(r18)
    a6d8:	91000417 	ldw	r4,16(r18)
    a6dc:	90000115 	stw	zero,4(r18)
    a6e0:	10bdffcc 	andi	r2,r2,63487
    a6e4:	10ffffcc 	andi	r3,r2,65535
    a6e8:	18c4000c 	andi	r3,r3,4096
    a6ec:	9080030d 	sth	r2,12(r18)
    a6f0:	91000015 	stw	r4,0(r18)
    a6f4:	18002b26 	beq	r3,zero,a7a4 <_fflush_r+0x160>
    a6f8:	0007883a 	mov	r3,zero
    a6fc:	1805883a 	mov	r2,r3
    a700:	94001415 	stw	r16,80(r18)
    a704:	dfc00417 	ldw	ra,16(sp)
    a708:	dcc00317 	ldw	r19,12(sp)
    a70c:	dc800217 	ldw	r18,8(sp)
    a710:	dc400117 	ldw	r17,4(sp)
    a714:	dc000017 	ldw	r16,0(sp)
    a718:	dec00504 	addi	sp,sp,20
    a71c:	f800283a 	ret
    a720:	94400417 	ldw	r17,16(r18)
    a724:	88001f26 	beq	r17,zero,a7a4 <_fflush_r+0x160>
    a728:	90800017 	ldw	r2,0(r18)
    a72c:	18c000cc 	andi	r3,r3,3
    a730:	94400015 	stw	r17,0(r18)
    a734:	1461c83a 	sub	r16,r2,r17
    a738:	18002526 	beq	r3,zero,a7d0 <_fflush_r+0x18c>
    a73c:	0005883a 	mov	r2,zero
    a740:	90800215 	stw	r2,8(r18)
    a744:	0400170e 	bge	zero,r16,a7a4 <_fflush_r+0x160>
    a748:	90c00917 	ldw	r3,36(r18)
    a74c:	91400717 	ldw	r5,28(r18)
    a750:	880d883a 	mov	r6,r17
    a754:	800f883a 	mov	r7,r16
    a758:	9809883a 	mov	r4,r19
    a75c:	183ee83a 	callr	r3
    a760:	88a3883a 	add	r17,r17,r2
    a764:	80a1c83a 	sub	r16,r16,r2
    a768:	00bff616 	blt	zero,r2,a744 <_fflush_r+0x100>
    a76c:	9080030b 	ldhu	r2,12(r18)
    a770:	00ffffc4 	movi	r3,-1
    a774:	10801014 	ori	r2,r2,64
    a778:	9080030d 	sth	r2,12(r18)
    a77c:	1805883a 	mov	r2,r3
    a780:	dfc00417 	ldw	ra,16(sp)
    a784:	dcc00317 	ldw	r19,12(sp)
    a788:	dc800217 	ldw	r18,8(sp)
    a78c:	dc400117 	ldw	r17,4(sp)
    a790:	dc000017 	ldw	r16,0(sp)
    a794:	dec00504 	addi	sp,sp,20
    a798:	f800283a 	ret
    a79c:	90800f17 	ldw	r2,60(r18)
    a7a0:	00bfbe16 	blt	zero,r2,a69c <_fflush_r+0x58>
    a7a4:	0007883a 	mov	r3,zero
    a7a8:	1805883a 	mov	r2,r3
    a7ac:	dfc00417 	ldw	ra,16(sp)
    a7b0:	dcc00317 	ldw	r19,12(sp)
    a7b4:	dc800217 	ldw	r18,8(sp)
    a7b8:	dc400117 	ldw	r17,4(sp)
    a7bc:	dc000017 	ldw	r16,0(sp)
    a7c0:	dec00504 	addi	sp,sp,20
    a7c4:	f800283a 	ret
    a7c8:	000a8dc0 	call	a8dc <__sinit>
    a7cc:	003fa806 	br	a670 <_fflush_r+0x2c>
    a7d0:	90800517 	ldw	r2,20(r18)
    a7d4:	90800215 	stw	r2,8(r18)
    a7d8:	003fda06 	br	a744 <_fflush_r+0x100>
    a7dc:	90800117 	ldw	r2,4(r18)
    a7e0:	90c00c17 	ldw	r3,48(r18)
    a7e4:	80a1c83a 	sub	r16,r16,r2
    a7e8:	183fb426 	beq	r3,zero,a6bc <_fflush_r+0x78>
    a7ec:	90800f17 	ldw	r2,60(r18)
    a7f0:	80a1c83a 	sub	r16,r16,r2
    a7f4:	003fb106 	br	a6bc <_fflush_r+0x78>
    a7f8:	91400717 	ldw	r5,28(r18)
    a7fc:	9809883a 	mov	r4,r19
    a800:	000d883a 	mov	r6,zero
    a804:	01c00044 	movi	r7,1
    a808:	403ee83a 	callr	r8
    a80c:	1021883a 	mov	r16,r2
    a810:	00bfffc4 	movi	r2,-1
    a814:	80800226 	beq	r16,r2,a820 <_fflush_r+0x1dc>
    a818:	92000a17 	ldw	r8,40(r18)
    a81c:	003fa406 	br	a6b0 <_fflush_r+0x6c>
    a820:	98c00017 	ldw	r3,0(r19)
    a824:	00800744 	movi	r2,29
    a828:	18bfde26 	beq	r3,r2,a7a4 <_fflush_r+0x160>
    a82c:	9080030b 	ldhu	r2,12(r18)
    a830:	8007883a 	mov	r3,r16
    a834:	10801014 	ori	r2,r2,64
    a838:	9080030d 	sth	r2,12(r18)
    a83c:	003fcf06 	br	a77c <_fflush_r+0x138>

0000a840 <fflush>:
    a840:	01400074 	movhi	r5,1
    a844:	29699104 	addi	r5,r5,-22972
    a848:	2007883a 	mov	r3,r4
    a84c:	20000526 	beq	r4,zero,a864 <fflush+0x24>
    a850:	00800074 	movhi	r2,1
    a854:	10bb6f04 	addi	r2,r2,-4676
    a858:	11000017 	ldw	r4,0(r2)
    a85c:	180b883a 	mov	r5,r3
    a860:	000a6441 	jmpi	a644 <_fflush_r>
    a864:	00800074 	movhi	r2,1
    a868:	10bb7004 	addi	r2,r2,-4672
    a86c:	11000017 	ldw	r4,0(r2)
    a870:	000af741 	jmpi	af74 <_fwalk_reent>

0000a874 <std>:
    a874:	00800074 	movhi	r2,1
    a878:	10ae8e04 	addi	r2,r2,-17864
    a87c:	20800b15 	stw	r2,44(r4)
    a880:	00800074 	movhi	r2,1
    a884:	10aec904 	addi	r2,r2,-17628
    a888:	20800815 	stw	r2,32(r4)
    a88c:	00c00074 	movhi	r3,1
    a890:	18eeaa04 	addi	r3,r3,-17752
    a894:	00800074 	movhi	r2,1
    a898:	10ae9004 	addi	r2,r2,-17856
    a89c:	2140030d 	sth	r5,12(r4)
    a8a0:	2180038d 	sth	r6,14(r4)
    a8a4:	20c00915 	stw	r3,36(r4)
    a8a8:	20800a15 	stw	r2,40(r4)
    a8ac:	20000015 	stw	zero,0(r4)
    a8b0:	20000115 	stw	zero,4(r4)
    a8b4:	20000215 	stw	zero,8(r4)
    a8b8:	20000415 	stw	zero,16(r4)
    a8bc:	20000515 	stw	zero,20(r4)
    a8c0:	20000615 	stw	zero,24(r4)
    a8c4:	21000715 	stw	r4,28(r4)
    a8c8:	f800283a 	ret

0000a8cc <__sfp_lock_acquire>:
    a8cc:	f800283a 	ret

0000a8d0 <__sfp_lock_release>:
    a8d0:	f800283a 	ret

0000a8d4 <__sinit_lock_acquire>:
    a8d4:	f800283a 	ret

0000a8d8 <__sinit_lock_release>:
    a8d8:	f800283a 	ret

0000a8dc <__sinit>:
    a8dc:	20800e17 	ldw	r2,56(r4)
    a8e0:	defffd04 	addi	sp,sp,-12
    a8e4:	dc400115 	stw	r17,4(sp)
    a8e8:	dc000015 	stw	r16,0(sp)
    a8ec:	dfc00215 	stw	ra,8(sp)
    a8f0:	04400044 	movi	r17,1
    a8f4:	01400104 	movi	r5,4
    a8f8:	000d883a 	mov	r6,zero
    a8fc:	2021883a 	mov	r16,r4
    a900:	2200bb04 	addi	r8,r4,748
    a904:	200f883a 	mov	r7,r4
    a908:	10000526 	beq	r2,zero,a920 <__sinit+0x44>
    a90c:	dfc00217 	ldw	ra,8(sp)
    a910:	dc400117 	ldw	r17,4(sp)
    a914:	dc000017 	ldw	r16,0(sp)
    a918:	dec00304 	addi	sp,sp,12
    a91c:	f800283a 	ret
    a920:	21000117 	ldw	r4,4(r4)
    a924:	00800074 	movhi	r2,1
    a928:	10aa7004 	addi	r2,r2,-22080
    a92c:	00c000c4 	movi	r3,3
    a930:	80800f15 	stw	r2,60(r16)
    a934:	80c0b915 	stw	r3,740(r16)
    a938:	8200ba15 	stw	r8,744(r16)
    a93c:	84400e15 	stw	r17,56(r16)
    a940:	8000b815 	stw	zero,736(r16)
    a944:	000a8740 	call	a874 <std>
    a948:	81000217 	ldw	r4,8(r16)
    a94c:	880d883a 	mov	r6,r17
    a950:	800f883a 	mov	r7,r16
    a954:	01400284 	movi	r5,10
    a958:	000a8740 	call	a874 <std>
    a95c:	81000317 	ldw	r4,12(r16)
    a960:	800f883a 	mov	r7,r16
    a964:	01400484 	movi	r5,18
    a968:	01800084 	movi	r6,2
    a96c:	dfc00217 	ldw	ra,8(sp)
    a970:	dc400117 	ldw	r17,4(sp)
    a974:	dc000017 	ldw	r16,0(sp)
    a978:	dec00304 	addi	sp,sp,12
    a97c:	000a8741 	jmpi	a874 <std>

0000a980 <__fp_lock>:
    a980:	0005883a 	mov	r2,zero
    a984:	f800283a 	ret

0000a988 <__fp_unlock>:
    a988:	0005883a 	mov	r2,zero
    a98c:	f800283a 	ret

0000a990 <__fp_unlock_all>:
    a990:	00800074 	movhi	r2,1
    a994:	10bb6f04 	addi	r2,r2,-4676
    a998:	11000017 	ldw	r4,0(r2)
    a99c:	01400074 	movhi	r5,1
    a9a0:	296a6204 	addi	r5,r5,-22136
    a9a4:	000b03c1 	jmpi	b03c <_fwalk>

0000a9a8 <__fp_lock_all>:
    a9a8:	00800074 	movhi	r2,1
    a9ac:	10bb6f04 	addi	r2,r2,-4676
    a9b0:	11000017 	ldw	r4,0(r2)
    a9b4:	01400074 	movhi	r5,1
    a9b8:	296a6004 	addi	r5,r5,-22144
    a9bc:	000b03c1 	jmpi	b03c <_fwalk>

0000a9c0 <_cleanup_r>:
    a9c0:	01400074 	movhi	r5,1
    a9c4:	296f5f04 	addi	r5,r5,-17028
    a9c8:	000b03c1 	jmpi	b03c <_fwalk>

0000a9cc <_cleanup>:
    a9cc:	00800074 	movhi	r2,1
    a9d0:	10bb7004 	addi	r2,r2,-4672
    a9d4:	11000017 	ldw	r4,0(r2)
    a9d8:	000a9c01 	jmpi	a9c0 <_cleanup_r>

0000a9dc <__sfmoreglue>:
    a9dc:	defffc04 	addi	sp,sp,-16
    a9e0:	dc400115 	stw	r17,4(sp)
    a9e4:	2c401724 	muli	r17,r5,92
    a9e8:	dc800215 	stw	r18,8(sp)
    a9ec:	2825883a 	mov	r18,r5
    a9f0:	89400304 	addi	r5,r17,12
    a9f4:	dc000015 	stw	r16,0(sp)
    a9f8:	dfc00315 	stw	ra,12(sp)
    a9fc:	000b2880 	call	b288 <_malloc_r>
    aa00:	0021883a 	mov	r16,zero
    aa04:	880d883a 	mov	r6,r17
    aa08:	000b883a 	mov	r5,zero
    aa0c:	10000626 	beq	r2,zero,aa28 <__sfmoreglue+0x4c>
    aa10:	11000304 	addi	r4,r2,12
    aa14:	14800115 	stw	r18,4(r2)
    aa18:	10000015 	stw	zero,0(r2)
    aa1c:	11000215 	stw	r4,8(r2)
    aa20:	1021883a 	mov	r16,r2
    aa24:	0003f800 	call	3f80 <memset>
    aa28:	8005883a 	mov	r2,r16
    aa2c:	dfc00317 	ldw	ra,12(sp)
    aa30:	dc800217 	ldw	r18,8(sp)
    aa34:	dc400117 	ldw	r17,4(sp)
    aa38:	dc000017 	ldw	r16,0(sp)
    aa3c:	dec00404 	addi	sp,sp,16
    aa40:	f800283a 	ret

0000aa44 <__sfp>:
    aa44:	defffd04 	addi	sp,sp,-12
    aa48:	00800074 	movhi	r2,1
    aa4c:	10bb7004 	addi	r2,r2,-4672
    aa50:	dc000015 	stw	r16,0(sp)
    aa54:	14000017 	ldw	r16,0(r2)
    aa58:	dc400115 	stw	r17,4(sp)
    aa5c:	dfc00215 	stw	ra,8(sp)
    aa60:	80800e17 	ldw	r2,56(r16)
    aa64:	2023883a 	mov	r17,r4
    aa68:	10002626 	beq	r2,zero,ab04 <__sfp+0xc0>
    aa6c:	8400b804 	addi	r16,r16,736
    aa70:	80800117 	ldw	r2,4(r16)
    aa74:	81000217 	ldw	r4,8(r16)
    aa78:	10ffffc4 	addi	r3,r2,-1
    aa7c:	18000916 	blt	r3,zero,aaa4 <__sfp+0x60>
    aa80:	2080030f 	ldh	r2,12(r4)
    aa84:	10000b26 	beq	r2,zero,aab4 <__sfp+0x70>
    aa88:	017fffc4 	movi	r5,-1
    aa8c:	00000206 	br	aa98 <__sfp+0x54>
    aa90:	2080030f 	ldh	r2,12(r4)
    aa94:	10000726 	beq	r2,zero,aab4 <__sfp+0x70>
    aa98:	18ffffc4 	addi	r3,r3,-1
    aa9c:	21001704 	addi	r4,r4,92
    aaa0:	197ffb1e 	bne	r3,r5,aa90 <__sfp+0x4c>
    aaa4:	80800017 	ldw	r2,0(r16)
    aaa8:	10001926 	beq	r2,zero,ab10 <__sfp+0xcc>
    aaac:	1021883a 	mov	r16,r2
    aab0:	003fef06 	br	aa70 <__sfp+0x2c>
    aab4:	00bfffc4 	movi	r2,-1
    aab8:	00c00044 	movi	r3,1
    aabc:	2080038d 	sth	r2,14(r4)
    aac0:	20c0030d 	sth	r3,12(r4)
    aac4:	20000015 	stw	zero,0(r4)
    aac8:	20000215 	stw	zero,8(r4)
    aacc:	20000115 	stw	zero,4(r4)
    aad0:	20000415 	stw	zero,16(r4)
    aad4:	20000515 	stw	zero,20(r4)
    aad8:	20000615 	stw	zero,24(r4)
    aadc:	20000c15 	stw	zero,48(r4)
    aae0:	20000d15 	stw	zero,52(r4)
    aae4:	20001115 	stw	zero,68(r4)
    aae8:	20001215 	stw	zero,72(r4)
    aaec:	2005883a 	mov	r2,r4
    aaf0:	dfc00217 	ldw	ra,8(sp)
    aaf4:	dc400117 	ldw	r17,4(sp)
    aaf8:	dc000017 	ldw	r16,0(sp)
    aafc:	dec00304 	addi	sp,sp,12
    ab00:	f800283a 	ret
    ab04:	8009883a 	mov	r4,r16
    ab08:	000a8dc0 	call	a8dc <__sinit>
    ab0c:	003fd706 	br	aa6c <__sfp+0x28>
    ab10:	8809883a 	mov	r4,r17
    ab14:	01400104 	movi	r5,4
    ab18:	000a9dc0 	call	a9dc <__sfmoreglue>
    ab1c:	80800015 	stw	r2,0(r16)
    ab20:	103fe21e 	bne	r2,zero,aaac <__sfp+0x68>
    ab24:	00800304 	movi	r2,12
    ab28:	0009883a 	mov	r4,zero
    ab2c:	88800015 	stw	r2,0(r17)
    ab30:	003fee06 	br	aaec <__sfp+0xa8>

0000ab34 <_malloc_trim_r>:
    ab34:	defffb04 	addi	sp,sp,-20
    ab38:	dcc00315 	stw	r19,12(sp)
    ab3c:	04c00074 	movhi	r19,1
    ab40:	9cfa5e04 	addi	r19,r19,-5768
    ab44:	dc800215 	stw	r18,8(sp)
    ab48:	dc400115 	stw	r17,4(sp)
    ab4c:	dc000015 	stw	r16,0(sp)
    ab50:	2823883a 	mov	r17,r5
    ab54:	2025883a 	mov	r18,r4
    ab58:	dfc00415 	stw	ra,16(sp)
    ab5c:	000c3680 	call	c368 <__malloc_lock>
    ab60:	98800217 	ldw	r2,8(r19)
    ab64:	9009883a 	mov	r4,r18
    ab68:	000b883a 	mov	r5,zero
    ab6c:	10c00117 	ldw	r3,4(r2)
    ab70:	00bfff04 	movi	r2,-4
    ab74:	18a0703a 	and	r16,r3,r2
    ab78:	8463c83a 	sub	r17,r16,r17
    ab7c:	8c43fbc4 	addi	r17,r17,4079
    ab80:	8822d33a 	srli	r17,r17,12
    ab84:	0083ffc4 	movi	r2,4095
    ab88:	8c7fffc4 	addi	r17,r17,-1
    ab8c:	8822933a 	slli	r17,r17,12
    ab90:	1440060e 	bge	r2,r17,abac <_malloc_trim_r+0x78>
    ab94:	000b9c80 	call	b9c8 <_sbrk_r>
    ab98:	98c00217 	ldw	r3,8(r19)
    ab9c:	9009883a 	mov	r4,r18
    aba0:	044bc83a 	sub	r5,zero,r17
    aba4:	80c7883a 	add	r3,r16,r3
    aba8:	10c00926 	beq	r2,r3,abd0 <_malloc_trim_r+0x9c>
    abac:	000c3880 	call	c388 <__malloc_unlock>
    abb0:	0005883a 	mov	r2,zero
    abb4:	dfc00417 	ldw	ra,16(sp)
    abb8:	dcc00317 	ldw	r19,12(sp)
    abbc:	dc800217 	ldw	r18,8(sp)
    abc0:	dc400117 	ldw	r17,4(sp)
    abc4:	dc000017 	ldw	r16,0(sp)
    abc8:	dec00504 	addi	sp,sp,20
    abcc:	f800283a 	ret
    abd0:	9009883a 	mov	r4,r18
    abd4:	000b9c80 	call	b9c8 <_sbrk_r>
    abd8:	844dc83a 	sub	r6,r16,r17
    abdc:	00ffffc4 	movi	r3,-1
    abe0:	9009883a 	mov	r4,r18
    abe4:	000b883a 	mov	r5,zero
    abe8:	01c00074 	movhi	r7,1
    abec:	39c3b704 	addi	r7,r7,3804
    abf0:	31800054 	ori	r6,r6,1
    abf4:	10c00926 	beq	r2,r3,ac1c <_malloc_trim_r+0xe8>
    abf8:	38800017 	ldw	r2,0(r7)
    abfc:	98c00217 	ldw	r3,8(r19)
    ac00:	9009883a 	mov	r4,r18
    ac04:	1445c83a 	sub	r2,r2,r17
    ac08:	38800015 	stw	r2,0(r7)
    ac0c:	19800115 	stw	r6,4(r3)
    ac10:	000c3880 	call	c388 <__malloc_unlock>
    ac14:	00800044 	movi	r2,1
    ac18:	003fe606 	br	abb4 <_malloc_trim_r+0x80>
    ac1c:	000b9c80 	call	b9c8 <_sbrk_r>
    ac20:	99800217 	ldw	r6,8(r19)
    ac24:	100f883a 	mov	r7,r2
    ac28:	9009883a 	mov	r4,r18
    ac2c:	1187c83a 	sub	r3,r2,r6
    ac30:	008003c4 	movi	r2,15
    ac34:	19400054 	ori	r5,r3,1
    ac38:	10ffdc0e 	bge	r2,r3,abac <_malloc_trim_r+0x78>
    ac3c:	00800074 	movhi	r2,1
    ac40:	10bb7204 	addi	r2,r2,-4664
    ac44:	10c00017 	ldw	r3,0(r2)
    ac48:	00800074 	movhi	r2,1
    ac4c:	1083b704 	addi	r2,r2,3804
    ac50:	31400115 	stw	r5,4(r6)
    ac54:	38c7c83a 	sub	r3,r7,r3
    ac58:	10c00015 	stw	r3,0(r2)
    ac5c:	003fd306 	br	abac <_malloc_trim_r+0x78>

0000ac60 <_free_r>:
    ac60:	defffd04 	addi	sp,sp,-12
    ac64:	dc400115 	stw	r17,4(sp)
    ac68:	dc000015 	stw	r16,0(sp)
    ac6c:	dfc00215 	stw	ra,8(sp)
    ac70:	2821883a 	mov	r16,r5
    ac74:	2023883a 	mov	r17,r4
    ac78:	28005a26 	beq	r5,zero,ade4 <_free_r+0x184>
    ac7c:	000c3680 	call	c368 <__malloc_lock>
    ac80:	823ffe04 	addi	r8,r16,-8
    ac84:	41400117 	ldw	r5,4(r8)
    ac88:	00bfff84 	movi	r2,-2
    ac8c:	02800074 	movhi	r10,1
    ac90:	52ba5e04 	addi	r10,r10,-5768
    ac94:	288e703a 	and	r7,r5,r2
    ac98:	41cd883a 	add	r6,r8,r7
    ac9c:	30c00117 	ldw	r3,4(r6)
    aca0:	51000217 	ldw	r4,8(r10)
    aca4:	00bfff04 	movi	r2,-4
    aca8:	1892703a 	and	r9,r3,r2
    acac:	5017883a 	mov	r11,r10
    acb0:	31006726 	beq	r6,r4,ae50 <_free_r+0x1f0>
    acb4:	2880004c 	andi	r2,r5,1
    acb8:	1005003a 	cmpeq	r2,r2,zero
    acbc:	32400115 	stw	r9,4(r6)
    acc0:	10001a1e 	bne	r2,zero,ad2c <_free_r+0xcc>
    acc4:	000b883a 	mov	r5,zero
    acc8:	3247883a 	add	r3,r6,r9
    accc:	18800117 	ldw	r2,4(r3)
    acd0:	1080004c 	andi	r2,r2,1
    acd4:	1000231e 	bne	r2,zero,ad64 <_free_r+0x104>
    acd8:	280ac03a 	cmpne	r5,r5,zero
    acdc:	3a4f883a 	add	r7,r7,r9
    ace0:	2800451e 	bne	r5,zero,adf8 <_free_r+0x198>
    ace4:	31000217 	ldw	r4,8(r6)
    ace8:	00800074 	movhi	r2,1
    acec:	10ba6004 	addi	r2,r2,-5760
    acf0:	20807b26 	beq	r4,r2,aee0 <_free_r+0x280>
    acf4:	30800317 	ldw	r2,12(r6)
    acf8:	3a07883a 	add	r3,r7,r8
    acfc:	19c00015 	stw	r7,0(r3)
    ad00:	11000215 	stw	r4,8(r2)
    ad04:	20800315 	stw	r2,12(r4)
    ad08:	38800054 	ori	r2,r7,1
    ad0c:	40800115 	stw	r2,4(r8)
    ad10:	28001a26 	beq	r5,zero,ad7c <_free_r+0x11c>
    ad14:	8809883a 	mov	r4,r17
    ad18:	dfc00217 	ldw	ra,8(sp)
    ad1c:	dc400117 	ldw	r17,4(sp)
    ad20:	dc000017 	ldw	r16,0(sp)
    ad24:	dec00304 	addi	sp,sp,12
    ad28:	000c3881 	jmpi	c388 <__malloc_unlock>
    ad2c:	80bffe17 	ldw	r2,-8(r16)
    ad30:	50c00204 	addi	r3,r10,8
    ad34:	4091c83a 	sub	r8,r8,r2
    ad38:	41000217 	ldw	r4,8(r8)
    ad3c:	388f883a 	add	r7,r7,r2
    ad40:	20c06126 	beq	r4,r3,aec8 <_free_r+0x268>
    ad44:	40800317 	ldw	r2,12(r8)
    ad48:	3247883a 	add	r3,r6,r9
    ad4c:	000b883a 	mov	r5,zero
    ad50:	11000215 	stw	r4,8(r2)
    ad54:	20800315 	stw	r2,12(r4)
    ad58:	18800117 	ldw	r2,4(r3)
    ad5c:	1080004c 	andi	r2,r2,1
    ad60:	103fdd26 	beq	r2,zero,acd8 <_free_r+0x78>
    ad64:	38800054 	ori	r2,r7,1
    ad68:	3a07883a 	add	r3,r7,r8
    ad6c:	280ac03a 	cmpne	r5,r5,zero
    ad70:	40800115 	stw	r2,4(r8)
    ad74:	19c00015 	stw	r7,0(r3)
    ad78:	283fe61e 	bne	r5,zero,ad14 <_free_r+0xb4>
    ad7c:	00807fc4 	movi	r2,511
    ad80:	11c01f2e 	bgeu	r2,r7,ae00 <_free_r+0x1a0>
    ad84:	3806d27a 	srli	r3,r7,9
    ad88:	1800481e 	bne	r3,zero,aeac <_free_r+0x24c>
    ad8c:	3804d0fa 	srli	r2,r7,3
    ad90:	100690fa 	slli	r3,r2,3
    ad94:	1acd883a 	add	r6,r3,r11
    ad98:	31400217 	ldw	r5,8(r6)
    ad9c:	31405926 	beq	r6,r5,af04 <_free_r+0x2a4>
    ada0:	28800117 	ldw	r2,4(r5)
    ada4:	00ffff04 	movi	r3,-4
    ada8:	10c4703a 	and	r2,r2,r3
    adac:	3880022e 	bgeu	r7,r2,adb8 <_free_r+0x158>
    adb0:	29400217 	ldw	r5,8(r5)
    adb4:	317ffa1e 	bne	r6,r5,ada0 <_free_r+0x140>
    adb8:	29800317 	ldw	r6,12(r5)
    adbc:	41800315 	stw	r6,12(r8)
    adc0:	41400215 	stw	r5,8(r8)
    adc4:	8809883a 	mov	r4,r17
    adc8:	2a000315 	stw	r8,12(r5)
    adcc:	32000215 	stw	r8,8(r6)
    add0:	dfc00217 	ldw	ra,8(sp)
    add4:	dc400117 	ldw	r17,4(sp)
    add8:	dc000017 	ldw	r16,0(sp)
    addc:	dec00304 	addi	sp,sp,12
    ade0:	000c3881 	jmpi	c388 <__malloc_unlock>
    ade4:	dfc00217 	ldw	ra,8(sp)
    ade8:	dc400117 	ldw	r17,4(sp)
    adec:	dc000017 	ldw	r16,0(sp)
    adf0:	dec00304 	addi	sp,sp,12
    adf4:	f800283a 	ret
    adf8:	31000217 	ldw	r4,8(r6)
    adfc:	003fbd06 	br	acf4 <_free_r+0x94>
    ae00:	3806d0fa 	srli	r3,r7,3
    ae04:	00800044 	movi	r2,1
    ae08:	51400117 	ldw	r5,4(r10)
    ae0c:	180890fa 	slli	r4,r3,3
    ae10:	1807d0ba 	srai	r3,r3,2
    ae14:	22c9883a 	add	r4,r4,r11
    ae18:	21800217 	ldw	r6,8(r4)
    ae1c:	10c4983a 	sll	r2,r2,r3
    ae20:	41000315 	stw	r4,12(r8)
    ae24:	41800215 	stw	r6,8(r8)
    ae28:	288ab03a 	or	r5,r5,r2
    ae2c:	22000215 	stw	r8,8(r4)
    ae30:	8809883a 	mov	r4,r17
    ae34:	51400115 	stw	r5,4(r10)
    ae38:	32000315 	stw	r8,12(r6)
    ae3c:	dfc00217 	ldw	ra,8(sp)
    ae40:	dc400117 	ldw	r17,4(sp)
    ae44:	dc000017 	ldw	r16,0(sp)
    ae48:	dec00304 	addi	sp,sp,12
    ae4c:	000c3881 	jmpi	c388 <__malloc_unlock>
    ae50:	2880004c 	andi	r2,r5,1
    ae54:	3a4d883a 	add	r6,r7,r9
    ae58:	1000071e 	bne	r2,zero,ae78 <_free_r+0x218>
    ae5c:	80bffe17 	ldw	r2,-8(r16)
    ae60:	4091c83a 	sub	r8,r8,r2
    ae64:	41000317 	ldw	r4,12(r8)
    ae68:	40c00217 	ldw	r3,8(r8)
    ae6c:	308d883a 	add	r6,r6,r2
    ae70:	20c00215 	stw	r3,8(r4)
    ae74:	19000315 	stw	r4,12(r3)
    ae78:	00800074 	movhi	r2,1
    ae7c:	10bb7104 	addi	r2,r2,-4668
    ae80:	11000017 	ldw	r4,0(r2)
    ae84:	30c00054 	ori	r3,r6,1
    ae88:	52000215 	stw	r8,8(r10)
    ae8c:	40c00115 	stw	r3,4(r8)
    ae90:	313fa036 	bltu	r6,r4,ad14 <_free_r+0xb4>
    ae94:	00800074 	movhi	r2,1
    ae98:	10834c04 	addi	r2,r2,3376
    ae9c:	11400017 	ldw	r5,0(r2)
    aea0:	8809883a 	mov	r4,r17
    aea4:	000ab340 	call	ab34 <_malloc_trim_r>
    aea8:	003f9a06 	br	ad14 <_free_r+0xb4>
    aeac:	00800104 	movi	r2,4
    aeb0:	10c0072e 	bgeu	r2,r3,aed0 <_free_r+0x270>
    aeb4:	00800504 	movi	r2,20
    aeb8:	10c01936 	bltu	r2,r3,af20 <_free_r+0x2c0>
    aebc:	188016c4 	addi	r2,r3,91
    aec0:	100690fa 	slli	r3,r2,3
    aec4:	003fb306 	br	ad94 <_free_r+0x134>
    aec8:	01400044 	movi	r5,1
    aecc:	003f7e06 	br	acc8 <_free_r+0x68>
    aed0:	3804d1ba 	srli	r2,r7,6
    aed4:	10800e04 	addi	r2,r2,56
    aed8:	100690fa 	slli	r3,r2,3
    aedc:	003fad06 	br	ad94 <_free_r+0x134>
    aee0:	22000315 	stw	r8,12(r4)
    aee4:	22000215 	stw	r8,8(r4)
    aee8:	3a05883a 	add	r2,r7,r8
    aeec:	38c00054 	ori	r3,r7,1
    aef0:	11c00015 	stw	r7,0(r2)
    aef4:	41000215 	stw	r4,8(r8)
    aef8:	40c00115 	stw	r3,4(r8)
    aefc:	41000315 	stw	r4,12(r8)
    af00:	003f8406 	br	ad14 <_free_r+0xb4>
    af04:	1005d0ba 	srai	r2,r2,2
    af08:	00c00044 	movi	r3,1
    af0c:	51000117 	ldw	r4,4(r10)
    af10:	1886983a 	sll	r3,r3,r2
    af14:	20c8b03a 	or	r4,r4,r3
    af18:	51000115 	stw	r4,4(r10)
    af1c:	003fa706 	br	adbc <_free_r+0x15c>
    af20:	00801504 	movi	r2,84
    af24:	10c00436 	bltu	r2,r3,af38 <_free_r+0x2d8>
    af28:	3804d33a 	srli	r2,r7,12
    af2c:	10801b84 	addi	r2,r2,110
    af30:	100690fa 	slli	r3,r2,3
    af34:	003f9706 	br	ad94 <_free_r+0x134>
    af38:	00805504 	movi	r2,340
    af3c:	10c00436 	bltu	r2,r3,af50 <_free_r+0x2f0>
    af40:	3804d3fa 	srli	r2,r7,15
    af44:	10801dc4 	addi	r2,r2,119
    af48:	100690fa 	slli	r3,r2,3
    af4c:	003f9106 	br	ad94 <_free_r+0x134>
    af50:	00815504 	movi	r2,1364
    af54:	10c0032e 	bgeu	r2,r3,af64 <_free_r+0x304>
    af58:	00801f84 	movi	r2,126
    af5c:	00c0fc04 	movi	r3,1008
    af60:	003f8c06 	br	ad94 <_free_r+0x134>
    af64:	3804d4ba 	srli	r2,r7,18
    af68:	10801f04 	addi	r2,r2,124
    af6c:	100690fa 	slli	r3,r2,3
    af70:	003f8806 	br	ad94 <_free_r+0x134>

0000af74 <_fwalk_reent>:
    af74:	defff704 	addi	sp,sp,-36
    af78:	dcc00315 	stw	r19,12(sp)
    af7c:	24c0b804 	addi	r19,r4,736
    af80:	dd800615 	stw	r22,24(sp)
    af84:	dd400515 	stw	r21,20(sp)
    af88:	dfc00815 	stw	ra,32(sp)
    af8c:	ddc00715 	stw	r23,28(sp)
    af90:	dd000415 	stw	r20,16(sp)
    af94:	dc800215 	stw	r18,8(sp)
    af98:	dc400115 	stw	r17,4(sp)
    af9c:	dc000015 	stw	r16,0(sp)
    afa0:	202b883a 	mov	r21,r4
    afa4:	282d883a 	mov	r22,r5
    afa8:	000a8cc0 	call	a8cc <__sfp_lock_acquire>
    afac:	98002126 	beq	r19,zero,b034 <_fwalk_reent+0xc0>
    afb0:	002f883a 	mov	r23,zero
    afb4:	9c800117 	ldw	r18,4(r19)
    afb8:	9c000217 	ldw	r16,8(r19)
    afbc:	90bfffc4 	addi	r2,r18,-1
    afc0:	10000d16 	blt	r2,zero,aff8 <_fwalk_reent+0x84>
    afc4:	0023883a 	mov	r17,zero
    afc8:	053fffc4 	movi	r20,-1
    afcc:	8080030f 	ldh	r2,12(r16)
    afd0:	8c400044 	addi	r17,r17,1
    afd4:	10000626 	beq	r2,zero,aff0 <_fwalk_reent+0x7c>
    afd8:	8080038f 	ldh	r2,14(r16)
    afdc:	800b883a 	mov	r5,r16
    afe0:	a809883a 	mov	r4,r21
    afe4:	15000226 	beq	r2,r20,aff0 <_fwalk_reent+0x7c>
    afe8:	b03ee83a 	callr	r22
    afec:	b8aeb03a 	or	r23,r23,r2
    aff0:	84001704 	addi	r16,r16,92
    aff4:	947ff51e 	bne	r18,r17,afcc <_fwalk_reent+0x58>
    aff8:	9cc00017 	ldw	r19,0(r19)
    affc:	983fed1e 	bne	r19,zero,afb4 <_fwalk_reent+0x40>
    b000:	000a8d00 	call	a8d0 <__sfp_lock_release>
    b004:	b805883a 	mov	r2,r23
    b008:	dfc00817 	ldw	ra,32(sp)
    b00c:	ddc00717 	ldw	r23,28(sp)
    b010:	dd800617 	ldw	r22,24(sp)
    b014:	dd400517 	ldw	r21,20(sp)
    b018:	dd000417 	ldw	r20,16(sp)
    b01c:	dcc00317 	ldw	r19,12(sp)
    b020:	dc800217 	ldw	r18,8(sp)
    b024:	dc400117 	ldw	r17,4(sp)
    b028:	dc000017 	ldw	r16,0(sp)
    b02c:	dec00904 	addi	sp,sp,36
    b030:	f800283a 	ret
    b034:	002f883a 	mov	r23,zero
    b038:	003ff106 	br	b000 <_fwalk_reent+0x8c>

0000b03c <_fwalk>:
    b03c:	defff804 	addi	sp,sp,-32
    b040:	dcc00315 	stw	r19,12(sp)
    b044:	24c0b804 	addi	r19,r4,736
    b048:	dd400515 	stw	r21,20(sp)
    b04c:	dfc00715 	stw	ra,28(sp)
    b050:	dd800615 	stw	r22,24(sp)
    b054:	dd000415 	stw	r20,16(sp)
    b058:	dc800215 	stw	r18,8(sp)
    b05c:	dc400115 	stw	r17,4(sp)
    b060:	dc000015 	stw	r16,0(sp)
    b064:	282b883a 	mov	r21,r5
    b068:	000a8cc0 	call	a8cc <__sfp_lock_acquire>
    b06c:	98001f26 	beq	r19,zero,b0ec <_fwalk+0xb0>
    b070:	002d883a 	mov	r22,zero
    b074:	9c800117 	ldw	r18,4(r19)
    b078:	9c000217 	ldw	r16,8(r19)
    b07c:	90bfffc4 	addi	r2,r18,-1
    b080:	10000c16 	blt	r2,zero,b0b4 <_fwalk+0x78>
    b084:	0023883a 	mov	r17,zero
    b088:	053fffc4 	movi	r20,-1
    b08c:	8080030f 	ldh	r2,12(r16)
    b090:	8c400044 	addi	r17,r17,1
    b094:	10000526 	beq	r2,zero,b0ac <_fwalk+0x70>
    b098:	8080038f 	ldh	r2,14(r16)
    b09c:	8009883a 	mov	r4,r16
    b0a0:	15000226 	beq	r2,r20,b0ac <_fwalk+0x70>
    b0a4:	a83ee83a 	callr	r21
    b0a8:	b0acb03a 	or	r22,r22,r2
    b0ac:	84001704 	addi	r16,r16,92
    b0b0:	947ff61e 	bne	r18,r17,b08c <_fwalk+0x50>
    b0b4:	9cc00017 	ldw	r19,0(r19)
    b0b8:	983fee1e 	bne	r19,zero,b074 <_fwalk+0x38>
    b0bc:	000a8d00 	call	a8d0 <__sfp_lock_release>
    b0c0:	b005883a 	mov	r2,r22
    b0c4:	dfc00717 	ldw	ra,28(sp)
    b0c8:	dd800617 	ldw	r22,24(sp)
    b0cc:	dd400517 	ldw	r21,20(sp)
    b0d0:	dd000417 	ldw	r20,16(sp)
    b0d4:	dcc00317 	ldw	r19,12(sp)
    b0d8:	dc800217 	ldw	r18,8(sp)
    b0dc:	dc400117 	ldw	r17,4(sp)
    b0e0:	dc000017 	ldw	r16,0(sp)
    b0e4:	dec00804 	addi	sp,sp,32
    b0e8:	f800283a 	ret
    b0ec:	002d883a 	mov	r22,zero
    b0f0:	003ff206 	br	b0bc <_fwalk+0x80>

0000b0f4 <__smakebuf_r>:
    b0f4:	2880030b 	ldhu	r2,12(r5)
    b0f8:	deffed04 	addi	sp,sp,-76
    b0fc:	dc401015 	stw	r17,64(sp)
    b100:	1080008c 	andi	r2,r2,2
    b104:	dc000f15 	stw	r16,60(sp)
    b108:	dfc01215 	stw	ra,72(sp)
    b10c:	dc801115 	stw	r18,68(sp)
    b110:	2821883a 	mov	r16,r5
    b114:	2023883a 	mov	r17,r4
    b118:	10000b26 	beq	r2,zero,b148 <__smakebuf_r+0x54>
    b11c:	28c010c4 	addi	r3,r5,67
    b120:	00800044 	movi	r2,1
    b124:	28800515 	stw	r2,20(r5)
    b128:	28c00415 	stw	r3,16(r5)
    b12c:	28c00015 	stw	r3,0(r5)
    b130:	dfc01217 	ldw	ra,72(sp)
    b134:	dc801117 	ldw	r18,68(sp)
    b138:	dc401017 	ldw	r17,64(sp)
    b13c:	dc000f17 	ldw	r16,60(sp)
    b140:	dec01304 	addi	sp,sp,76
    b144:	f800283a 	ret
    b148:	2940038f 	ldh	r5,14(r5)
    b14c:	28002116 	blt	r5,zero,b1d4 <__smakebuf_r+0xe0>
    b150:	d80d883a 	mov	r6,sp
    b154:	000bd900 	call	bd90 <_fstat_r>
    b158:	10001e16 	blt	r2,zero,b1d4 <__smakebuf_r+0xe0>
    b15c:	d8800117 	ldw	r2,4(sp)
    b160:	00e00014 	movui	r3,32768
    b164:	113c000c 	andi	r4,r2,61440
    b168:	20c03126 	beq	r4,r3,b230 <__smakebuf_r+0x13c>
    b16c:	8080030b 	ldhu	r2,12(r16)
    b170:	00c80004 	movi	r3,8192
    b174:	10820014 	ori	r2,r2,2048
    b178:	8080030d 	sth	r2,12(r16)
    b17c:	20c01e26 	beq	r4,r3,b1f8 <__smakebuf_r+0x104>
    b180:	04810004 	movi	r18,1024
    b184:	8809883a 	mov	r4,r17
    b188:	900b883a 	mov	r5,r18
    b18c:	000b2880 	call	b288 <_malloc_r>
    b190:	1009883a 	mov	r4,r2
    b194:	10003126 	beq	r2,zero,b25c <__smakebuf_r+0x168>
    b198:	80c0030b 	ldhu	r3,12(r16)
    b19c:	00800074 	movhi	r2,1
    b1a0:	10aa7004 	addi	r2,r2,-22080
    b1a4:	88800f15 	stw	r2,60(r17)
    b1a8:	18c02014 	ori	r3,r3,128
    b1ac:	84800515 	stw	r18,20(r16)
    b1b0:	80c0030d 	sth	r3,12(r16)
    b1b4:	81000415 	stw	r4,16(r16)
    b1b8:	81000015 	stw	r4,0(r16)
    b1bc:	dfc01217 	ldw	ra,72(sp)
    b1c0:	dc801117 	ldw	r18,68(sp)
    b1c4:	dc401017 	ldw	r17,64(sp)
    b1c8:	dc000f17 	ldw	r16,60(sp)
    b1cc:	dec01304 	addi	sp,sp,76
    b1d0:	f800283a 	ret
    b1d4:	80c0030b 	ldhu	r3,12(r16)
    b1d8:	1880200c 	andi	r2,r3,128
    b1dc:	10000426 	beq	r2,zero,b1f0 <__smakebuf_r+0xfc>
    b1e0:	04801004 	movi	r18,64
    b1e4:	18820014 	ori	r2,r3,2048
    b1e8:	8080030d 	sth	r2,12(r16)
    b1ec:	003fe506 	br	b184 <__smakebuf_r+0x90>
    b1f0:	04810004 	movi	r18,1024
    b1f4:	003ffb06 	br	b1e4 <__smakebuf_r+0xf0>
    b1f8:	8140038f 	ldh	r5,14(r16)
    b1fc:	8809883a 	mov	r4,r17
    b200:	000be040 	call	be04 <_isatty_r>
    b204:	103fde26 	beq	r2,zero,b180 <__smakebuf_r+0x8c>
    b208:	8080030b 	ldhu	r2,12(r16)
    b20c:	80c010c4 	addi	r3,r16,67
    b210:	04810004 	movi	r18,1024
    b214:	10800054 	ori	r2,r2,1
    b218:	8080030d 	sth	r2,12(r16)
    b21c:	00800044 	movi	r2,1
    b220:	80c00415 	stw	r3,16(r16)
    b224:	80800515 	stw	r2,20(r16)
    b228:	80c00015 	stw	r3,0(r16)
    b22c:	003fd506 	br	b184 <__smakebuf_r+0x90>
    b230:	80c00a17 	ldw	r3,40(r16)
    b234:	00800074 	movhi	r2,1
    b238:	10ae9004 	addi	r2,r2,-17856
    b23c:	18bfcb1e 	bne	r3,r2,b16c <__smakebuf_r+0x78>
    b240:	8080030b 	ldhu	r2,12(r16)
    b244:	00c10004 	movi	r3,1024
    b248:	1825883a 	mov	r18,r3
    b24c:	10c4b03a 	or	r2,r2,r3
    b250:	8080030d 	sth	r2,12(r16)
    b254:	80c01315 	stw	r3,76(r16)
    b258:	003fca06 	br	b184 <__smakebuf_r+0x90>
    b25c:	8100030b 	ldhu	r4,12(r16)
    b260:	2080800c 	andi	r2,r4,512
    b264:	103fb21e 	bne	r2,zero,b130 <__smakebuf_r+0x3c>
    b268:	80c010c4 	addi	r3,r16,67
    b26c:	21000094 	ori	r4,r4,2
    b270:	00800044 	movi	r2,1
    b274:	80800515 	stw	r2,20(r16)
    b278:	8100030d 	sth	r4,12(r16)
    b27c:	80c00415 	stw	r3,16(r16)
    b280:	80c00015 	stw	r3,0(r16)
    b284:	003faa06 	br	b130 <__smakebuf_r+0x3c>

0000b288 <_malloc_r>:
    b288:	defff604 	addi	sp,sp,-40
    b28c:	28c002c4 	addi	r3,r5,11
    b290:	00800584 	movi	r2,22
    b294:	dc800215 	stw	r18,8(sp)
    b298:	dfc00915 	stw	ra,36(sp)
    b29c:	df000815 	stw	fp,32(sp)
    b2a0:	ddc00715 	stw	r23,28(sp)
    b2a4:	dd800615 	stw	r22,24(sp)
    b2a8:	dd400515 	stw	r21,20(sp)
    b2ac:	dd000415 	stw	r20,16(sp)
    b2b0:	dcc00315 	stw	r19,12(sp)
    b2b4:	dc400115 	stw	r17,4(sp)
    b2b8:	dc000015 	stw	r16,0(sp)
    b2bc:	2025883a 	mov	r18,r4
    b2c0:	10c01236 	bltu	r2,r3,b30c <_malloc_r+0x84>
    b2c4:	04400404 	movi	r17,16
    b2c8:	8940142e 	bgeu	r17,r5,b31c <_malloc_r+0x94>
    b2cc:	00800304 	movi	r2,12
    b2d0:	0007883a 	mov	r3,zero
    b2d4:	90800015 	stw	r2,0(r18)
    b2d8:	1805883a 	mov	r2,r3
    b2dc:	dfc00917 	ldw	ra,36(sp)
    b2e0:	df000817 	ldw	fp,32(sp)
    b2e4:	ddc00717 	ldw	r23,28(sp)
    b2e8:	dd800617 	ldw	r22,24(sp)
    b2ec:	dd400517 	ldw	r21,20(sp)
    b2f0:	dd000417 	ldw	r20,16(sp)
    b2f4:	dcc00317 	ldw	r19,12(sp)
    b2f8:	dc800217 	ldw	r18,8(sp)
    b2fc:	dc400117 	ldw	r17,4(sp)
    b300:	dc000017 	ldw	r16,0(sp)
    b304:	dec00a04 	addi	sp,sp,40
    b308:	f800283a 	ret
    b30c:	00bffe04 	movi	r2,-8
    b310:	18a2703a 	and	r17,r3,r2
    b314:	883fed16 	blt	r17,zero,b2cc <_malloc_r+0x44>
    b318:	897fec36 	bltu	r17,r5,b2cc <_malloc_r+0x44>
    b31c:	9009883a 	mov	r4,r18
    b320:	000c3680 	call	c368 <__malloc_lock>
    b324:	00807dc4 	movi	r2,503
    b328:	14402b2e 	bgeu	r2,r17,b3d8 <_malloc_r+0x150>
    b32c:	8806d27a 	srli	r3,r17,9
    b330:	18003f1e 	bne	r3,zero,b430 <_malloc_r+0x1a8>
    b334:	880cd0fa 	srli	r6,r17,3
    b338:	300490fa 	slli	r2,r6,3
    b33c:	02c00074 	movhi	r11,1
    b340:	5afa5e04 	addi	r11,r11,-5768
    b344:	12cb883a 	add	r5,r2,r11
    b348:	2c000317 	ldw	r16,12(r5)
    b34c:	580f883a 	mov	r7,r11
    b350:	2c00041e 	bne	r5,r16,b364 <_malloc_r+0xdc>
    b354:	00000a06 	br	b380 <_malloc_r+0xf8>
    b358:	1800860e 	bge	r3,zero,b574 <_malloc_r+0x2ec>
    b35c:	84000317 	ldw	r16,12(r16)
    b360:	2c000726 	beq	r5,r16,b380 <_malloc_r+0xf8>
    b364:	80800117 	ldw	r2,4(r16)
    b368:	00ffff04 	movi	r3,-4
    b36c:	10c8703a 	and	r4,r2,r3
    b370:	2447c83a 	sub	r3,r4,r17
    b374:	008003c4 	movi	r2,15
    b378:	10fff70e 	bge	r2,r3,b358 <_malloc_r+0xd0>
    b37c:	31bfffc4 	addi	r6,r6,-1
    b380:	32400044 	addi	r9,r6,1
    b384:	02800074 	movhi	r10,1
    b388:	52ba6004 	addi	r10,r10,-5760
    b38c:	54000217 	ldw	r16,8(r10)
    b390:	8280a026 	beq	r16,r10,b614 <_malloc_r+0x38c>
    b394:	80800117 	ldw	r2,4(r16)
    b398:	00ffff04 	movi	r3,-4
    b39c:	10ca703a 	and	r5,r2,r3
    b3a0:	2c4dc83a 	sub	r6,r5,r17
    b3a4:	008003c4 	movi	r2,15
    b3a8:	11808316 	blt	r2,r6,b5b8 <_malloc_r+0x330>
    b3ac:	52800315 	stw	r10,12(r10)
    b3b0:	52800215 	stw	r10,8(r10)
    b3b4:	30002916 	blt	r6,zero,b45c <_malloc_r+0x1d4>
    b3b8:	8147883a 	add	r3,r16,r5
    b3bc:	18800117 	ldw	r2,4(r3)
    b3c0:	9009883a 	mov	r4,r18
    b3c4:	10800054 	ori	r2,r2,1
    b3c8:	18800115 	stw	r2,4(r3)
    b3cc:	000c3880 	call	c388 <__malloc_unlock>
    b3d0:	80c00204 	addi	r3,r16,8
    b3d4:	003fc006 	br	b2d8 <_malloc_r+0x50>
    b3d8:	02c00074 	movhi	r11,1
    b3dc:	5afa5e04 	addi	r11,r11,-5768
    b3e0:	8ac5883a 	add	r2,r17,r11
    b3e4:	14000317 	ldw	r16,12(r2)
    b3e8:	580f883a 	mov	r7,r11
    b3ec:	8806d0fa 	srli	r3,r17,3
    b3f0:	14006c26 	beq	r2,r16,b5a4 <_malloc_r+0x31c>
    b3f4:	80c00117 	ldw	r3,4(r16)
    b3f8:	00bfff04 	movi	r2,-4
    b3fc:	81800317 	ldw	r6,12(r16)
    b400:	1886703a 	and	r3,r3,r2
    b404:	80c7883a 	add	r3,r16,r3
    b408:	18800117 	ldw	r2,4(r3)
    b40c:	81400217 	ldw	r5,8(r16)
    b410:	9009883a 	mov	r4,r18
    b414:	10800054 	ori	r2,r2,1
    b418:	18800115 	stw	r2,4(r3)
    b41c:	31400215 	stw	r5,8(r6)
    b420:	29800315 	stw	r6,12(r5)
    b424:	000c3880 	call	c388 <__malloc_unlock>
    b428:	80c00204 	addi	r3,r16,8
    b42c:	003faa06 	br	b2d8 <_malloc_r+0x50>
    b430:	00800104 	movi	r2,4
    b434:	10c0052e 	bgeu	r2,r3,b44c <_malloc_r+0x1c4>
    b438:	00800504 	movi	r2,20
    b43c:	10c07836 	bltu	r2,r3,b620 <_malloc_r+0x398>
    b440:	198016c4 	addi	r6,r3,91
    b444:	300490fa 	slli	r2,r6,3
    b448:	003fbc06 	br	b33c <_malloc_r+0xb4>
    b44c:	8804d1ba 	srli	r2,r17,6
    b450:	11800e04 	addi	r6,r2,56
    b454:	300490fa 	slli	r2,r6,3
    b458:	003fb806 	br	b33c <_malloc_r+0xb4>
    b45c:	00807fc4 	movi	r2,511
    b460:	1140bb36 	bltu	r2,r5,b750 <_malloc_r+0x4c8>
    b464:	2806d0fa 	srli	r3,r5,3
    b468:	573ffe04 	addi	fp,r10,-8
    b46c:	00800044 	movi	r2,1
    b470:	180890fa 	slli	r4,r3,3
    b474:	1807d0ba 	srai	r3,r3,2
    b478:	e1c00117 	ldw	r7,4(fp)
    b47c:	5909883a 	add	r4,r11,r4
    b480:	21400217 	ldw	r5,8(r4)
    b484:	10c4983a 	sll	r2,r2,r3
    b488:	81000315 	stw	r4,12(r16)
    b48c:	81400215 	stw	r5,8(r16)
    b490:	388eb03a 	or	r7,r7,r2
    b494:	2c000315 	stw	r16,12(r5)
    b498:	24000215 	stw	r16,8(r4)
    b49c:	e1c00115 	stw	r7,4(fp)
    b4a0:	4807883a 	mov	r3,r9
    b4a4:	4800cd16 	blt	r9,zero,b7dc <_malloc_r+0x554>
    b4a8:	1807d0ba 	srai	r3,r3,2
    b4ac:	00800044 	movi	r2,1
    b4b0:	10c8983a 	sll	r4,r2,r3
    b4b4:	39004436 	bltu	r7,r4,b5c8 <_malloc_r+0x340>
    b4b8:	21c4703a 	and	r2,r4,r7
    b4bc:	10000a1e 	bne	r2,zero,b4e8 <_malloc_r+0x260>
    b4c0:	2109883a 	add	r4,r4,r4
    b4c4:	00bfff04 	movi	r2,-4
    b4c8:	4884703a 	and	r2,r9,r2
    b4cc:	3906703a 	and	r3,r7,r4
    b4d0:	12400104 	addi	r9,r2,4
    b4d4:	1800041e 	bne	r3,zero,b4e8 <_malloc_r+0x260>
    b4d8:	2109883a 	add	r4,r4,r4
    b4dc:	3904703a 	and	r2,r7,r4
    b4e0:	4a400104 	addi	r9,r9,4
    b4e4:	103ffc26 	beq	r2,zero,b4d8 <_malloc_r+0x250>
    b4e8:	480490fa 	slli	r2,r9,3
    b4ec:	4819883a 	mov	r12,r9
    b4f0:	023fff04 	movi	r8,-4
    b4f4:	589b883a 	add	r13,r11,r2
    b4f8:	6807883a 	mov	r3,r13
    b4fc:	014003c4 	movi	r5,15
    b500:	1c000317 	ldw	r16,12(r3)
    b504:	1c00041e 	bne	r3,r16,b518 <_malloc_r+0x290>
    b508:	0000a706 	br	b7a8 <_malloc_r+0x520>
    b50c:	3000ab0e 	bge	r6,zero,b7bc <_malloc_r+0x534>
    b510:	84000317 	ldw	r16,12(r16)
    b514:	1c00a426 	beq	r3,r16,b7a8 <_malloc_r+0x520>
    b518:	80800117 	ldw	r2,4(r16)
    b51c:	1204703a 	and	r2,r2,r8
    b520:	144dc83a 	sub	r6,r2,r17
    b524:	29bff90e 	bge	r5,r6,b50c <_malloc_r+0x284>
    b528:	81000317 	ldw	r4,12(r16)
    b52c:	80c00217 	ldw	r3,8(r16)
    b530:	89400054 	ori	r5,r17,1
    b534:	8445883a 	add	r2,r16,r17
    b538:	20c00215 	stw	r3,8(r4)
    b53c:	19000315 	stw	r4,12(r3)
    b540:	81400115 	stw	r5,4(r16)
    b544:	1187883a 	add	r3,r2,r6
    b548:	31000054 	ori	r4,r6,1
    b54c:	50800315 	stw	r2,12(r10)
    b550:	50800215 	stw	r2,8(r10)
    b554:	19800015 	stw	r6,0(r3)
    b558:	11000115 	stw	r4,4(r2)
    b55c:	12800215 	stw	r10,8(r2)
    b560:	12800315 	stw	r10,12(r2)
    b564:	9009883a 	mov	r4,r18
    b568:	000c3880 	call	c388 <__malloc_unlock>
    b56c:	80c00204 	addi	r3,r16,8
    b570:	003f5906 	br	b2d8 <_malloc_r+0x50>
    b574:	8109883a 	add	r4,r16,r4
    b578:	20800117 	ldw	r2,4(r4)
    b57c:	80c00217 	ldw	r3,8(r16)
    b580:	81400317 	ldw	r5,12(r16)
    b584:	10800054 	ori	r2,r2,1
    b588:	20800115 	stw	r2,4(r4)
    b58c:	28c00215 	stw	r3,8(r5)
    b590:	19400315 	stw	r5,12(r3)
    b594:	9009883a 	mov	r4,r18
    b598:	000c3880 	call	c388 <__malloc_unlock>
    b59c:	80c00204 	addi	r3,r16,8
    b5a0:	003f4d06 	br	b2d8 <_malloc_r+0x50>
    b5a4:	80800204 	addi	r2,r16,8
    b5a8:	14000317 	ldw	r16,12(r2)
    b5ac:	143f911e 	bne	r2,r16,b3f4 <_malloc_r+0x16c>
    b5b0:	1a400084 	addi	r9,r3,2
    b5b4:	003f7306 	br	b384 <_malloc_r+0xfc>
    b5b8:	88c00054 	ori	r3,r17,1
    b5bc:	8445883a 	add	r2,r16,r17
    b5c0:	80c00115 	stw	r3,4(r16)
    b5c4:	003fdf06 	br	b544 <_malloc_r+0x2bc>
    b5c8:	e4000217 	ldw	r16,8(fp)
    b5cc:	00bfff04 	movi	r2,-4
    b5d0:	80c00117 	ldw	r3,4(r16)
    b5d4:	802d883a 	mov	r22,r16
    b5d8:	18aa703a 	and	r21,r3,r2
    b5dc:	ac401636 	bltu	r21,r17,b638 <_malloc_r+0x3b0>
    b5e0:	ac49c83a 	sub	r4,r21,r17
    b5e4:	008003c4 	movi	r2,15
    b5e8:	1100130e 	bge	r2,r4,b638 <_malloc_r+0x3b0>
    b5ec:	88800054 	ori	r2,r17,1
    b5f0:	8447883a 	add	r3,r16,r17
    b5f4:	80800115 	stw	r2,4(r16)
    b5f8:	20800054 	ori	r2,r4,1
    b5fc:	18800115 	stw	r2,4(r3)
    b600:	e0c00215 	stw	r3,8(fp)
    b604:	9009883a 	mov	r4,r18
    b608:	000c3880 	call	c388 <__malloc_unlock>
    b60c:	80c00204 	addi	r3,r16,8
    b610:	003f3106 	br	b2d8 <_malloc_r+0x50>
    b614:	39c00117 	ldw	r7,4(r7)
    b618:	573ffe04 	addi	fp,r10,-8
    b61c:	003fa006 	br	b4a0 <_malloc_r+0x218>
    b620:	00801504 	movi	r2,84
    b624:	10c06736 	bltu	r2,r3,b7c4 <_malloc_r+0x53c>
    b628:	8804d33a 	srli	r2,r17,12
    b62c:	11801b84 	addi	r6,r2,110
    b630:	300490fa 	slli	r2,r6,3
    b634:	003f4106 	br	b33c <_malloc_r+0xb4>
    b638:	d0a7ec17 	ldw	r2,-24656(gp)
    b63c:	d0e01217 	ldw	r3,-32696(gp)
    b640:	053fffc4 	movi	r20,-1
    b644:	10800404 	addi	r2,r2,16
    b648:	88a7883a 	add	r19,r17,r2
    b64c:	1d000326 	beq	r3,r20,b65c <_malloc_r+0x3d4>
    b650:	98c3ffc4 	addi	r3,r19,4095
    b654:	00bc0004 	movi	r2,-4096
    b658:	18a6703a 	and	r19,r3,r2
    b65c:	9009883a 	mov	r4,r18
    b660:	980b883a 	mov	r5,r19
    b664:	000b9c80 	call	b9c8 <_sbrk_r>
    b668:	1009883a 	mov	r4,r2
    b66c:	15000426 	beq	r2,r20,b680 <_malloc_r+0x3f8>
    b670:	854b883a 	add	r5,r16,r21
    b674:	1029883a 	mov	r20,r2
    b678:	11405a2e 	bgeu	r2,r5,b7e4 <_malloc_r+0x55c>
    b67c:	87000c26 	beq	r16,fp,b6b0 <_malloc_r+0x428>
    b680:	e4000217 	ldw	r16,8(fp)
    b684:	80c00117 	ldw	r3,4(r16)
    b688:	00bfff04 	movi	r2,-4
    b68c:	1884703a 	and	r2,r3,r2
    b690:	14400336 	bltu	r2,r17,b6a0 <_malloc_r+0x418>
    b694:	1449c83a 	sub	r4,r2,r17
    b698:	008003c4 	movi	r2,15
    b69c:	113fd316 	blt	r2,r4,b5ec <_malloc_r+0x364>
    b6a0:	9009883a 	mov	r4,r18
    b6a4:	000c3880 	call	c388 <__malloc_unlock>
    b6a8:	0007883a 	mov	r3,zero
    b6ac:	003f0a06 	br	b2d8 <_malloc_r+0x50>
    b6b0:	05c00074 	movhi	r23,1
    b6b4:	bdc3b704 	addi	r23,r23,3804
    b6b8:	b8800017 	ldw	r2,0(r23)
    b6bc:	988d883a 	add	r6,r19,r2
    b6c0:	b9800015 	stw	r6,0(r23)
    b6c4:	d0e01217 	ldw	r3,-32696(gp)
    b6c8:	00bfffc4 	movi	r2,-1
    b6cc:	18808e26 	beq	r3,r2,b908 <_malloc_r+0x680>
    b6d0:	2145c83a 	sub	r2,r4,r5
    b6d4:	3085883a 	add	r2,r6,r2
    b6d8:	b8800015 	stw	r2,0(r23)
    b6dc:	20c001cc 	andi	r3,r4,7
    b6e0:	18005f1e 	bne	r3,zero,b860 <_malloc_r+0x5d8>
    b6e4:	000b883a 	mov	r5,zero
    b6e8:	a4c5883a 	add	r2,r20,r19
    b6ec:	1083ffcc 	andi	r2,r2,4095
    b6f0:	00c40004 	movi	r3,4096
    b6f4:	1887c83a 	sub	r3,r3,r2
    b6f8:	28e7883a 	add	r19,r5,r3
    b6fc:	9009883a 	mov	r4,r18
    b700:	980b883a 	mov	r5,r19
    b704:	000b9c80 	call	b9c8 <_sbrk_r>
    b708:	1007883a 	mov	r3,r2
    b70c:	00bfffc4 	movi	r2,-1
    b710:	18807a26 	beq	r3,r2,b8fc <_malloc_r+0x674>
    b714:	1d05c83a 	sub	r2,r3,r20
    b718:	9885883a 	add	r2,r19,r2
    b71c:	10c00054 	ori	r3,r2,1
    b720:	b8800017 	ldw	r2,0(r23)
    b724:	a021883a 	mov	r16,r20
    b728:	a0c00115 	stw	r3,4(r20)
    b72c:	9885883a 	add	r2,r19,r2
    b730:	b8800015 	stw	r2,0(r23)
    b734:	e5000215 	stw	r20,8(fp)
    b738:	b7003626 	beq	r22,fp,b814 <_malloc_r+0x58c>
    b73c:	018003c4 	movi	r6,15
    b740:	35404b36 	bltu	r6,r21,b870 <_malloc_r+0x5e8>
    b744:	00800044 	movi	r2,1
    b748:	a0800115 	stw	r2,4(r20)
    b74c:	003fcd06 	br	b684 <_malloc_r+0x3fc>
    b750:	2808d27a 	srli	r4,r5,9
    b754:	2000371e 	bne	r4,zero,b834 <_malloc_r+0x5ac>
    b758:	2808d0fa 	srli	r4,r5,3
    b75c:	200690fa 	slli	r3,r4,3
    b760:	1ad1883a 	add	r8,r3,r11
    b764:	41800217 	ldw	r6,8(r8)
    b768:	41805b26 	beq	r8,r6,b8d8 <_malloc_r+0x650>
    b76c:	30800117 	ldw	r2,4(r6)
    b770:	00ffff04 	movi	r3,-4
    b774:	10c4703a 	and	r2,r2,r3
    b778:	2880022e 	bgeu	r5,r2,b784 <_malloc_r+0x4fc>
    b77c:	31800217 	ldw	r6,8(r6)
    b780:	41bffa1e 	bne	r8,r6,b76c <_malloc_r+0x4e4>
    b784:	32000317 	ldw	r8,12(r6)
    b788:	39c00117 	ldw	r7,4(r7)
    b78c:	82000315 	stw	r8,12(r16)
    b790:	81800215 	stw	r6,8(r16)
    b794:	07000074 	movhi	fp,1
    b798:	e73a5e04 	addi	fp,fp,-5768
    b79c:	34000315 	stw	r16,12(r6)
    b7a0:	44000215 	stw	r16,8(r8)
    b7a4:	003f3e06 	br	b4a0 <_malloc_r+0x218>
    b7a8:	63000044 	addi	r12,r12,1
    b7ac:	608000cc 	andi	r2,r12,3
    b7b0:	10005d26 	beq	r2,zero,b928 <_malloc_r+0x6a0>
    b7b4:	18c00204 	addi	r3,r3,8
    b7b8:	003f5106 	br	b500 <_malloc_r+0x278>
    b7bc:	8089883a 	add	r4,r16,r2
    b7c0:	003f6d06 	br	b578 <_malloc_r+0x2f0>
    b7c4:	00805504 	movi	r2,340
    b7c8:	10c02036 	bltu	r2,r3,b84c <_malloc_r+0x5c4>
    b7cc:	8804d3fa 	srli	r2,r17,15
    b7d0:	11801dc4 	addi	r6,r2,119
    b7d4:	300490fa 	slli	r2,r6,3
    b7d8:	003ed806 	br	b33c <_malloc_r+0xb4>
    b7dc:	48c000c4 	addi	r3,r9,3
    b7e0:	003f3106 	br	b4a8 <_malloc_r+0x220>
    b7e4:	05c00074 	movhi	r23,1
    b7e8:	bdc3b704 	addi	r23,r23,3804
    b7ec:	b8800017 	ldw	r2,0(r23)
    b7f0:	988d883a 	add	r6,r19,r2
    b7f4:	b9800015 	stw	r6,0(r23)
    b7f8:	293fb21e 	bne	r5,r4,b6c4 <_malloc_r+0x43c>
    b7fc:	2083ffcc 	andi	r2,r4,4095
    b800:	103fb01e 	bne	r2,zero,b6c4 <_malloc_r+0x43c>
    b804:	e4000217 	ldw	r16,8(fp)
    b808:	9d45883a 	add	r2,r19,r21
    b80c:	10800054 	ori	r2,r2,1
    b810:	80800115 	stw	r2,4(r16)
    b814:	b8c00017 	ldw	r3,0(r23)
    b818:	d0a7ed17 	ldw	r2,-24652(gp)
    b81c:	10c0012e 	bgeu	r2,r3,b824 <_malloc_r+0x59c>
    b820:	d0e7ed15 	stw	r3,-24652(gp)
    b824:	d0a7ee17 	ldw	r2,-24648(gp)
    b828:	10ff962e 	bgeu	r2,r3,b684 <_malloc_r+0x3fc>
    b82c:	d0e7ee15 	stw	r3,-24648(gp)
    b830:	003f9406 	br	b684 <_malloc_r+0x3fc>
    b834:	00800104 	movi	r2,4
    b838:	11001e36 	bltu	r2,r4,b8b4 <_malloc_r+0x62c>
    b83c:	2804d1ba 	srli	r2,r5,6
    b840:	11000e04 	addi	r4,r2,56
    b844:	200690fa 	slli	r3,r4,3
    b848:	003fc506 	br	b760 <_malloc_r+0x4d8>
    b84c:	00815504 	movi	r2,1364
    b850:	10c01d2e 	bgeu	r2,r3,b8c8 <_malloc_r+0x640>
    b854:	01801f84 	movi	r6,126
    b858:	0080fc04 	movi	r2,1008
    b85c:	003eb706 	br	b33c <_malloc_r+0xb4>
    b860:	00800204 	movi	r2,8
    b864:	10cbc83a 	sub	r5,r2,r3
    b868:	2169883a 	add	r20,r4,r5
    b86c:	003f9e06 	br	b6e8 <_malloc_r+0x460>
    b870:	00bffe04 	movi	r2,-8
    b874:	a93ffd04 	addi	r4,r21,-12
    b878:	2088703a 	and	r4,r4,r2
    b87c:	b10b883a 	add	r5,r22,r4
    b880:	00c00144 	movi	r3,5
    b884:	28c00215 	stw	r3,8(r5)
    b888:	28c00115 	stw	r3,4(r5)
    b88c:	b0800117 	ldw	r2,4(r22)
    b890:	1080004c 	andi	r2,r2,1
    b894:	2084b03a 	or	r2,r4,r2
    b898:	b0800115 	stw	r2,4(r22)
    b89c:	313fdd2e 	bgeu	r6,r4,b814 <_malloc_r+0x58c>
    b8a0:	b1400204 	addi	r5,r22,8
    b8a4:	9009883a 	mov	r4,r18
    b8a8:	000ac600 	call	ac60 <_free_r>
    b8ac:	e4000217 	ldw	r16,8(fp)
    b8b0:	003fd806 	br	b814 <_malloc_r+0x58c>
    b8b4:	00800504 	movi	r2,20
    b8b8:	11001536 	bltu	r2,r4,b910 <_malloc_r+0x688>
    b8bc:	210016c4 	addi	r4,r4,91
    b8c0:	200690fa 	slli	r3,r4,3
    b8c4:	003fa606 	br	b760 <_malloc_r+0x4d8>
    b8c8:	8804d4ba 	srli	r2,r17,18
    b8cc:	11801f04 	addi	r6,r2,124
    b8d0:	300490fa 	slli	r2,r6,3
    b8d4:	003e9906 	br	b33c <_malloc_r+0xb4>
    b8d8:	2009d0ba 	srai	r4,r4,2
    b8dc:	01400074 	movhi	r5,1
    b8e0:	297a5e04 	addi	r5,r5,-5768
    b8e4:	00c00044 	movi	r3,1
    b8e8:	28800117 	ldw	r2,4(r5)
    b8ec:	1906983a 	sll	r3,r3,r4
    b8f0:	10c4b03a 	or	r2,r2,r3
    b8f4:	28800115 	stw	r2,4(r5)
    b8f8:	003fa306 	br	b788 <_malloc_r+0x500>
    b8fc:	0027883a 	mov	r19,zero
    b900:	00c00044 	movi	r3,1
    b904:	003f8606 	br	b720 <_malloc_r+0x498>
    b908:	d1201215 	stw	r4,-32696(gp)
    b90c:	003f7306 	br	b6dc <_malloc_r+0x454>
    b910:	00801504 	movi	r2,84
    b914:	11001936 	bltu	r2,r4,b97c <_malloc_r+0x6f4>
    b918:	2804d33a 	srli	r2,r5,12
    b91c:	11001b84 	addi	r4,r2,110
    b920:	200690fa 	slli	r3,r4,3
    b924:	003f8e06 	br	b760 <_malloc_r+0x4d8>
    b928:	480b883a 	mov	r5,r9
    b92c:	6807883a 	mov	r3,r13
    b930:	288000cc 	andi	r2,r5,3
    b934:	18fffe04 	addi	r3,r3,-8
    b938:	297fffc4 	addi	r5,r5,-1
    b93c:	10001526 	beq	r2,zero,b994 <_malloc_r+0x70c>
    b940:	18800217 	ldw	r2,8(r3)
    b944:	10fffa26 	beq	r2,r3,b930 <_malloc_r+0x6a8>
    b948:	2109883a 	add	r4,r4,r4
    b94c:	393f1e36 	bltu	r7,r4,b5c8 <_malloc_r+0x340>
    b950:	203f1d26 	beq	r4,zero,b5c8 <_malloc_r+0x340>
    b954:	21c4703a 	and	r2,r4,r7
    b958:	10000226 	beq	r2,zero,b964 <_malloc_r+0x6dc>
    b95c:	6013883a 	mov	r9,r12
    b960:	003ee106 	br	b4e8 <_malloc_r+0x260>
    b964:	2109883a 	add	r4,r4,r4
    b968:	3904703a 	and	r2,r7,r4
    b96c:	63000104 	addi	r12,r12,4
    b970:	103ffc26 	beq	r2,zero,b964 <_malloc_r+0x6dc>
    b974:	6013883a 	mov	r9,r12
    b978:	003edb06 	br	b4e8 <_malloc_r+0x260>
    b97c:	00805504 	movi	r2,340
    b980:	11000836 	bltu	r2,r4,b9a4 <_malloc_r+0x71c>
    b984:	2804d3fa 	srli	r2,r5,15
    b988:	11001dc4 	addi	r4,r2,119
    b98c:	200690fa 	slli	r3,r4,3
    b990:	003f7306 	br	b760 <_malloc_r+0x4d8>
    b994:	0104303a 	nor	r2,zero,r4
    b998:	388e703a 	and	r7,r7,r2
    b99c:	e1c00115 	stw	r7,4(fp)
    b9a0:	003fe906 	br	b948 <_malloc_r+0x6c0>
    b9a4:	00815504 	movi	r2,1364
    b9a8:	1100032e 	bgeu	r2,r4,b9b8 <_malloc_r+0x730>
    b9ac:	01001f84 	movi	r4,126
    b9b0:	00c0fc04 	movi	r3,1008
    b9b4:	003f6a06 	br	b760 <_malloc_r+0x4d8>
    b9b8:	2804d4ba 	srli	r2,r5,18
    b9bc:	11001f04 	addi	r4,r2,124
    b9c0:	200690fa 	slli	r3,r4,3
    b9c4:	003f6606 	br	b760 <_malloc_r+0x4d8>

0000b9c8 <_sbrk_r>:
    b9c8:	defffd04 	addi	sp,sp,-12
    b9cc:	dc000015 	stw	r16,0(sp)
    b9d0:	04000074 	movhi	r16,1
    b9d4:	84034b04 	addi	r16,r16,3372
    b9d8:	dc400115 	stw	r17,4(sp)
    b9dc:	80000015 	stw	zero,0(r16)
    b9e0:	2023883a 	mov	r17,r4
    b9e4:	2809883a 	mov	r4,r5
    b9e8:	dfc00215 	stw	ra,8(sp)
    b9ec:	000c5280 	call	c528 <sbrk>
    b9f0:	1007883a 	mov	r3,r2
    b9f4:	00bfffc4 	movi	r2,-1
    b9f8:	18800626 	beq	r3,r2,ba14 <_sbrk_r+0x4c>
    b9fc:	1805883a 	mov	r2,r3
    ba00:	dfc00217 	ldw	ra,8(sp)
    ba04:	dc400117 	ldw	r17,4(sp)
    ba08:	dc000017 	ldw	r16,0(sp)
    ba0c:	dec00304 	addi	sp,sp,12
    ba10:	f800283a 	ret
    ba14:	80800017 	ldw	r2,0(r16)
    ba18:	103ff826 	beq	r2,zero,b9fc <_sbrk_r+0x34>
    ba1c:	88800015 	stw	r2,0(r17)
    ba20:	1805883a 	mov	r2,r3
    ba24:	dfc00217 	ldw	ra,8(sp)
    ba28:	dc400117 	ldw	r17,4(sp)
    ba2c:	dc000017 	ldw	r16,0(sp)
    ba30:	dec00304 	addi	sp,sp,12
    ba34:	f800283a 	ret

0000ba38 <__sclose>:
    ba38:	2940038f 	ldh	r5,14(r5)
    ba3c:	000bbfc1 	jmpi	bbfc <_close_r>

0000ba40 <__sseek>:
    ba40:	defffe04 	addi	sp,sp,-8
    ba44:	dc000015 	stw	r16,0(sp)
    ba48:	2821883a 	mov	r16,r5
    ba4c:	2940038f 	ldh	r5,14(r5)
    ba50:	dfc00115 	stw	ra,4(sp)
    ba54:	000be740 	call	be74 <_lseek_r>
    ba58:	1007883a 	mov	r3,r2
    ba5c:	00bfffc4 	movi	r2,-1
    ba60:	18800926 	beq	r3,r2,ba88 <__sseek+0x48>
    ba64:	8080030b 	ldhu	r2,12(r16)
    ba68:	80c01415 	stw	r3,80(r16)
    ba6c:	10840014 	ori	r2,r2,4096
    ba70:	8080030d 	sth	r2,12(r16)
    ba74:	1805883a 	mov	r2,r3
    ba78:	dfc00117 	ldw	ra,4(sp)
    ba7c:	dc000017 	ldw	r16,0(sp)
    ba80:	dec00204 	addi	sp,sp,8
    ba84:	f800283a 	ret
    ba88:	8080030b 	ldhu	r2,12(r16)
    ba8c:	10bbffcc 	andi	r2,r2,61439
    ba90:	8080030d 	sth	r2,12(r16)
    ba94:	1805883a 	mov	r2,r3
    ba98:	dfc00117 	ldw	ra,4(sp)
    ba9c:	dc000017 	ldw	r16,0(sp)
    baa0:	dec00204 	addi	sp,sp,8
    baa4:	f800283a 	ret

0000baa8 <__swrite>:
    baa8:	2880030b 	ldhu	r2,12(r5)
    baac:	defffb04 	addi	sp,sp,-20
    bab0:	dcc00315 	stw	r19,12(sp)
    bab4:	1080400c 	andi	r2,r2,256
    bab8:	dc800215 	stw	r18,8(sp)
    babc:	dc400115 	stw	r17,4(sp)
    bac0:	dc000015 	stw	r16,0(sp)
    bac4:	3027883a 	mov	r19,r6
    bac8:	3825883a 	mov	r18,r7
    bacc:	dfc00415 	stw	ra,16(sp)
    bad0:	2821883a 	mov	r16,r5
    bad4:	000d883a 	mov	r6,zero
    bad8:	01c00084 	movi	r7,2
    badc:	2023883a 	mov	r17,r4
    bae0:	10000226 	beq	r2,zero,baec <__swrite+0x44>
    bae4:	2940038f 	ldh	r5,14(r5)
    bae8:	000be740 	call	be74 <_lseek_r>
    baec:	8080030b 	ldhu	r2,12(r16)
    baf0:	8140038f 	ldh	r5,14(r16)
    baf4:	8809883a 	mov	r4,r17
    baf8:	10bbffcc 	andi	r2,r2,61439
    bafc:	980d883a 	mov	r6,r19
    bb00:	900f883a 	mov	r7,r18
    bb04:	8080030d 	sth	r2,12(r16)
    bb08:	dfc00417 	ldw	ra,16(sp)
    bb0c:	dcc00317 	ldw	r19,12(sp)
    bb10:	dc800217 	ldw	r18,8(sp)
    bb14:	dc400117 	ldw	r17,4(sp)
    bb18:	dc000017 	ldw	r16,0(sp)
    bb1c:	dec00504 	addi	sp,sp,20
    bb20:	000bb841 	jmpi	bb84 <_write_r>

0000bb24 <__sread>:
    bb24:	defffe04 	addi	sp,sp,-8
    bb28:	dc000015 	stw	r16,0(sp)
    bb2c:	2821883a 	mov	r16,r5
    bb30:	2940038f 	ldh	r5,14(r5)
    bb34:	dfc00115 	stw	ra,4(sp)
    bb38:	000beec0 	call	beec <_read_r>
    bb3c:	1007883a 	mov	r3,r2
    bb40:	10000816 	blt	r2,zero,bb64 <__sread+0x40>
    bb44:	80801417 	ldw	r2,80(r16)
    bb48:	10c5883a 	add	r2,r2,r3
    bb4c:	80801415 	stw	r2,80(r16)
    bb50:	1805883a 	mov	r2,r3
    bb54:	dfc00117 	ldw	ra,4(sp)
    bb58:	dc000017 	ldw	r16,0(sp)
    bb5c:	dec00204 	addi	sp,sp,8
    bb60:	f800283a 	ret
    bb64:	8080030b 	ldhu	r2,12(r16)
    bb68:	10bbffcc 	andi	r2,r2,61439
    bb6c:	8080030d 	sth	r2,12(r16)
    bb70:	1805883a 	mov	r2,r3
    bb74:	dfc00117 	ldw	ra,4(sp)
    bb78:	dc000017 	ldw	r16,0(sp)
    bb7c:	dec00204 	addi	sp,sp,8
    bb80:	f800283a 	ret

0000bb84 <_write_r>:
    bb84:	defffd04 	addi	sp,sp,-12
    bb88:	dc000015 	stw	r16,0(sp)
    bb8c:	04000074 	movhi	r16,1
    bb90:	84034b04 	addi	r16,r16,3372
    bb94:	dc400115 	stw	r17,4(sp)
    bb98:	80000015 	stw	zero,0(r16)
    bb9c:	2023883a 	mov	r17,r4
    bba0:	2809883a 	mov	r4,r5
    bba4:	300b883a 	mov	r5,r6
    bba8:	380d883a 	mov	r6,r7
    bbac:	dfc00215 	stw	ra,8(sp)
    bbb0:	000c5e40 	call	c5e4 <write>
    bbb4:	1007883a 	mov	r3,r2
    bbb8:	00bfffc4 	movi	r2,-1
    bbbc:	18800626 	beq	r3,r2,bbd8 <_write_r+0x54>
    bbc0:	1805883a 	mov	r2,r3
    bbc4:	dfc00217 	ldw	ra,8(sp)
    bbc8:	dc400117 	ldw	r17,4(sp)
    bbcc:	dc000017 	ldw	r16,0(sp)
    bbd0:	dec00304 	addi	sp,sp,12
    bbd4:	f800283a 	ret
    bbd8:	80800017 	ldw	r2,0(r16)
    bbdc:	103ff826 	beq	r2,zero,bbc0 <_write_r+0x3c>
    bbe0:	88800015 	stw	r2,0(r17)
    bbe4:	1805883a 	mov	r2,r3
    bbe8:	dfc00217 	ldw	ra,8(sp)
    bbec:	dc400117 	ldw	r17,4(sp)
    bbf0:	dc000017 	ldw	r16,0(sp)
    bbf4:	dec00304 	addi	sp,sp,12
    bbf8:	f800283a 	ret

0000bbfc <_close_r>:
    bbfc:	defffd04 	addi	sp,sp,-12
    bc00:	dc000015 	stw	r16,0(sp)
    bc04:	04000074 	movhi	r16,1
    bc08:	84034b04 	addi	r16,r16,3372
    bc0c:	dc400115 	stw	r17,4(sp)
    bc10:	80000015 	stw	zero,0(r16)
    bc14:	2023883a 	mov	r17,r4
    bc18:	2809883a 	mov	r4,r5
    bc1c:	dfc00215 	stw	ra,8(sp)
    bc20:	0008ecc0 	call	8ecc <close>
    bc24:	1007883a 	mov	r3,r2
    bc28:	00bfffc4 	movi	r2,-1
    bc2c:	18800626 	beq	r3,r2,bc48 <_close_r+0x4c>
    bc30:	1805883a 	mov	r2,r3
    bc34:	dfc00217 	ldw	ra,8(sp)
    bc38:	dc400117 	ldw	r17,4(sp)
    bc3c:	dc000017 	ldw	r16,0(sp)
    bc40:	dec00304 	addi	sp,sp,12
    bc44:	f800283a 	ret
    bc48:	80800017 	ldw	r2,0(r16)
    bc4c:	103ff826 	beq	r2,zero,bc30 <_close_r+0x34>
    bc50:	88800015 	stw	r2,0(r17)
    bc54:	1805883a 	mov	r2,r3
    bc58:	dfc00217 	ldw	ra,8(sp)
    bc5c:	dc400117 	ldw	r17,4(sp)
    bc60:	dc000017 	ldw	r16,0(sp)
    bc64:	dec00304 	addi	sp,sp,12
    bc68:	f800283a 	ret

0000bc6c <_fclose_r>:
    bc6c:	defffc04 	addi	sp,sp,-16
    bc70:	dc400115 	stw	r17,4(sp)
    bc74:	dc000015 	stw	r16,0(sp)
    bc78:	dfc00315 	stw	ra,12(sp)
    bc7c:	dc800215 	stw	r18,8(sp)
    bc80:	2821883a 	mov	r16,r5
    bc84:	2023883a 	mov	r17,r4
    bc88:	28002926 	beq	r5,zero,bd30 <_fclose_r+0xc4>
    bc8c:	000a8cc0 	call	a8cc <__sfp_lock_acquire>
    bc90:	88000226 	beq	r17,zero,bc9c <_fclose_r+0x30>
    bc94:	88800e17 	ldw	r2,56(r17)
    bc98:	10002d26 	beq	r2,zero,bd50 <_fclose_r+0xe4>
    bc9c:	8080030f 	ldh	r2,12(r16)
    bca0:	10002226 	beq	r2,zero,bd2c <_fclose_r+0xc0>
    bca4:	8809883a 	mov	r4,r17
    bca8:	800b883a 	mov	r5,r16
    bcac:	000a6440 	call	a644 <_fflush_r>
    bcb0:	1025883a 	mov	r18,r2
    bcb4:	80800b17 	ldw	r2,44(r16)
    bcb8:	10000426 	beq	r2,zero,bccc <_fclose_r+0x60>
    bcbc:	81400717 	ldw	r5,28(r16)
    bcc0:	8809883a 	mov	r4,r17
    bcc4:	103ee83a 	callr	r2
    bcc8:	10002a16 	blt	r2,zero,bd74 <_fclose_r+0x108>
    bccc:	8080030b 	ldhu	r2,12(r16)
    bcd0:	1080200c 	andi	r2,r2,128
    bcd4:	1000231e 	bne	r2,zero,bd64 <_fclose_r+0xf8>
    bcd8:	81400c17 	ldw	r5,48(r16)
    bcdc:	28000526 	beq	r5,zero,bcf4 <_fclose_r+0x88>
    bce0:	80801004 	addi	r2,r16,64
    bce4:	28800226 	beq	r5,r2,bcf0 <_fclose_r+0x84>
    bce8:	8809883a 	mov	r4,r17
    bcec:	000ac600 	call	ac60 <_free_r>
    bcf0:	80000c15 	stw	zero,48(r16)
    bcf4:	81401117 	ldw	r5,68(r16)
    bcf8:	28000326 	beq	r5,zero,bd08 <_fclose_r+0x9c>
    bcfc:	8809883a 	mov	r4,r17
    bd00:	000ac600 	call	ac60 <_free_r>
    bd04:	80001115 	stw	zero,68(r16)
    bd08:	8000030d 	sth	zero,12(r16)
    bd0c:	000a8d00 	call	a8d0 <__sfp_lock_release>
    bd10:	9005883a 	mov	r2,r18
    bd14:	dfc00317 	ldw	ra,12(sp)
    bd18:	dc800217 	ldw	r18,8(sp)
    bd1c:	dc400117 	ldw	r17,4(sp)
    bd20:	dc000017 	ldw	r16,0(sp)
    bd24:	dec00404 	addi	sp,sp,16
    bd28:	f800283a 	ret
    bd2c:	000a8d00 	call	a8d0 <__sfp_lock_release>
    bd30:	0025883a 	mov	r18,zero
    bd34:	9005883a 	mov	r2,r18
    bd38:	dfc00317 	ldw	ra,12(sp)
    bd3c:	dc800217 	ldw	r18,8(sp)
    bd40:	dc400117 	ldw	r17,4(sp)
    bd44:	dc000017 	ldw	r16,0(sp)
    bd48:	dec00404 	addi	sp,sp,16
    bd4c:	f800283a 	ret
    bd50:	8809883a 	mov	r4,r17
    bd54:	000a8dc0 	call	a8dc <__sinit>
    bd58:	8080030f 	ldh	r2,12(r16)
    bd5c:	103fd11e 	bne	r2,zero,bca4 <_fclose_r+0x38>
    bd60:	003ff206 	br	bd2c <_fclose_r+0xc0>
    bd64:	81400417 	ldw	r5,16(r16)
    bd68:	8809883a 	mov	r4,r17
    bd6c:	000ac600 	call	ac60 <_free_r>
    bd70:	003fd906 	br	bcd8 <_fclose_r+0x6c>
    bd74:	04bfffc4 	movi	r18,-1
    bd78:	003fd406 	br	bccc <_fclose_r+0x60>

0000bd7c <fclose>:
    bd7c:	00800074 	movhi	r2,1
    bd80:	10bb6f04 	addi	r2,r2,-4676
    bd84:	200b883a 	mov	r5,r4
    bd88:	11000017 	ldw	r4,0(r2)
    bd8c:	000bc6c1 	jmpi	bc6c <_fclose_r>

0000bd90 <_fstat_r>:
    bd90:	defffd04 	addi	sp,sp,-12
    bd94:	dc000015 	stw	r16,0(sp)
    bd98:	04000074 	movhi	r16,1
    bd9c:	84034b04 	addi	r16,r16,3372
    bda0:	dc400115 	stw	r17,4(sp)
    bda4:	80000015 	stw	zero,0(r16)
    bda8:	2023883a 	mov	r17,r4
    bdac:	2809883a 	mov	r4,r5
    bdb0:	300b883a 	mov	r5,r6
    bdb4:	dfc00215 	stw	ra,8(sp)
    bdb8:	000bfc40 	call	bfc4 <fstat>
    bdbc:	1007883a 	mov	r3,r2
    bdc0:	00bfffc4 	movi	r2,-1
    bdc4:	18800626 	beq	r3,r2,bde0 <_fstat_r+0x50>
    bdc8:	1805883a 	mov	r2,r3
    bdcc:	dfc00217 	ldw	ra,8(sp)
    bdd0:	dc400117 	ldw	r17,4(sp)
    bdd4:	dc000017 	ldw	r16,0(sp)
    bdd8:	dec00304 	addi	sp,sp,12
    bddc:	f800283a 	ret
    bde0:	80800017 	ldw	r2,0(r16)
    bde4:	103ff826 	beq	r2,zero,bdc8 <_fstat_r+0x38>
    bde8:	88800015 	stw	r2,0(r17)
    bdec:	1805883a 	mov	r2,r3
    bdf0:	dfc00217 	ldw	ra,8(sp)
    bdf4:	dc400117 	ldw	r17,4(sp)
    bdf8:	dc000017 	ldw	r16,0(sp)
    bdfc:	dec00304 	addi	sp,sp,12
    be00:	f800283a 	ret

0000be04 <_isatty_r>:
    be04:	defffd04 	addi	sp,sp,-12
    be08:	dc000015 	stw	r16,0(sp)
    be0c:	04000074 	movhi	r16,1
    be10:	84034b04 	addi	r16,r16,3372
    be14:	dc400115 	stw	r17,4(sp)
    be18:	80000015 	stw	zero,0(r16)
    be1c:	2023883a 	mov	r17,r4
    be20:	2809883a 	mov	r4,r5
    be24:	dfc00215 	stw	ra,8(sp)
    be28:	000c0f80 	call	c0f8 <isatty>
    be2c:	1007883a 	mov	r3,r2
    be30:	00bfffc4 	movi	r2,-1
    be34:	18800626 	beq	r3,r2,be50 <_isatty_r+0x4c>
    be38:	1805883a 	mov	r2,r3
    be3c:	dfc00217 	ldw	ra,8(sp)
    be40:	dc400117 	ldw	r17,4(sp)
    be44:	dc000017 	ldw	r16,0(sp)
    be48:	dec00304 	addi	sp,sp,12
    be4c:	f800283a 	ret
    be50:	80800017 	ldw	r2,0(r16)
    be54:	103ff826 	beq	r2,zero,be38 <_isatty_r+0x34>
    be58:	88800015 	stw	r2,0(r17)
    be5c:	1805883a 	mov	r2,r3
    be60:	dfc00217 	ldw	ra,8(sp)
    be64:	dc400117 	ldw	r17,4(sp)
    be68:	dc000017 	ldw	r16,0(sp)
    be6c:	dec00304 	addi	sp,sp,12
    be70:	f800283a 	ret

0000be74 <_lseek_r>:
    be74:	defffd04 	addi	sp,sp,-12
    be78:	dc000015 	stw	r16,0(sp)
    be7c:	04000074 	movhi	r16,1
    be80:	84034b04 	addi	r16,r16,3372
    be84:	dc400115 	stw	r17,4(sp)
    be88:	80000015 	stw	zero,0(r16)
    be8c:	2023883a 	mov	r17,r4
    be90:	2809883a 	mov	r4,r5
    be94:	300b883a 	mov	r5,r6
    be98:	380d883a 	mov	r6,r7
    be9c:	dfc00215 	stw	ra,8(sp)
    bea0:	000c2180 	call	c218 <lseek>
    bea4:	1007883a 	mov	r3,r2
    bea8:	00bfffc4 	movi	r2,-1
    beac:	18800626 	beq	r3,r2,bec8 <_lseek_r+0x54>
    beb0:	1805883a 	mov	r2,r3
    beb4:	dfc00217 	ldw	ra,8(sp)
    beb8:	dc400117 	ldw	r17,4(sp)
    bebc:	dc000017 	ldw	r16,0(sp)
    bec0:	dec00304 	addi	sp,sp,12
    bec4:	f800283a 	ret
    bec8:	80800017 	ldw	r2,0(r16)
    becc:	103ff826 	beq	r2,zero,beb0 <_lseek_r+0x3c>
    bed0:	88800015 	stw	r2,0(r17)
    bed4:	1805883a 	mov	r2,r3
    bed8:	dfc00217 	ldw	ra,8(sp)
    bedc:	dc400117 	ldw	r17,4(sp)
    bee0:	dc000017 	ldw	r16,0(sp)
    bee4:	dec00304 	addi	sp,sp,12
    bee8:	f800283a 	ret

0000beec <_read_r>:
    beec:	defffd04 	addi	sp,sp,-12
    bef0:	dc000015 	stw	r16,0(sp)
    bef4:	04000074 	movhi	r16,1
    bef8:	84034b04 	addi	r16,r16,3372
    befc:	dc400115 	stw	r17,4(sp)
    bf00:	80000015 	stw	zero,0(r16)
    bf04:	2023883a 	mov	r17,r4
    bf08:	2809883a 	mov	r4,r5
    bf0c:	300b883a 	mov	r5,r6
    bf10:	380d883a 	mov	r6,r7
    bf14:	dfc00215 	stw	ra,8(sp)
    bf18:	000c3a80 	call	c3a8 <read>
    bf1c:	1007883a 	mov	r3,r2
    bf20:	00bfffc4 	movi	r2,-1
    bf24:	18800626 	beq	r3,r2,bf40 <_read_r+0x54>
    bf28:	1805883a 	mov	r2,r3
    bf2c:	dfc00217 	ldw	ra,8(sp)
    bf30:	dc400117 	ldw	r17,4(sp)
    bf34:	dc000017 	ldw	r16,0(sp)
    bf38:	dec00304 	addi	sp,sp,12
    bf3c:	f800283a 	ret
    bf40:	80800017 	ldw	r2,0(r16)
    bf44:	103ff826 	beq	r2,zero,bf28 <_read_r+0x3c>
    bf48:	88800015 	stw	r2,0(r17)
    bf4c:	1805883a 	mov	r2,r3
    bf50:	dfc00217 	ldw	ra,8(sp)
    bf54:	dc400117 	ldw	r17,4(sp)
    bf58:	dc000017 	ldw	r16,0(sp)
    bf5c:	dec00304 	addi	sp,sp,12
    bf60:	f800283a 	ret

0000bf64 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    bf64:	defffd04 	addi	sp,sp,-12
    bf68:	df000215 	stw	fp,8(sp)
    bf6c:	df000204 	addi	fp,sp,8
    bf70:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    bf74:	e0bfff17 	ldw	r2,-4(fp)
    bf78:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    bf7c:	e0bffe17 	ldw	r2,-8(fp)
    bf80:	1005003a 	cmpeq	r2,r2,zero
    bf84:	1000021e 	bne	r2,zero,bf90 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    bf88:	002af070 	cmpltui	zero,zero,43969
    bf8c:	00000106 	br	bf94 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    bf90:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    bf94:	e037883a 	mov	sp,fp
    bf98:	df000017 	ldw	fp,0(sp)
    bf9c:	dec00104 	addi	sp,sp,4
    bfa0:	f800283a 	ret

0000bfa4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    bfa4:	defffd04 	addi	sp,sp,-12
    bfa8:	dfc00215 	stw	ra,8(sp)
    bfac:	df000115 	stw	fp,4(sp)
    bfb0:	df000104 	addi	fp,sp,4
    bfb4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    bfb8:	e13fff17 	ldw	r4,-4(fp)
    bfbc:	000bf640 	call	bf64 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    bfc0:	003fff06 	br	bfc0 <_exit+0x1c>

0000bfc4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    bfc4:	defff904 	addi	sp,sp,-28
    bfc8:	dfc00615 	stw	ra,24(sp)
    bfcc:	df000515 	stw	fp,20(sp)
    bfd0:	df000504 	addi	fp,sp,20
    bfd4:	e13ffc15 	stw	r4,-16(fp)
    bfd8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bfdc:	e0bffc17 	ldw	r2,-16(fp)
    bfe0:	1004803a 	cmplt	r2,r2,zero
    bfe4:	1000081e 	bne	r2,zero,c008 <fstat+0x44>
    bfe8:	e0bffc17 	ldw	r2,-16(fp)
    bfec:	10800324 	muli	r2,r2,12
    bff0:	1007883a 	mov	r3,r2
    bff4:	00800074 	movhi	r2,1
    bff8:	10b8fe04 	addi	r2,r2,-7176
    bffc:	1887883a 	add	r3,r3,r2
    c000:	e0ffff15 	stw	r3,-4(fp)
    c004:	00000106 	br	c00c <fstat+0x48>
    c008:	e03fff15 	stw	zero,-4(fp)
    c00c:	e0bfff17 	ldw	r2,-4(fp)
    c010:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    c014:	e0bffb17 	ldw	r2,-20(fp)
    c018:	1005003a 	cmpeq	r2,r2,zero
    c01c:	1000121e 	bne	r2,zero,c068 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    c020:	e0bffb17 	ldw	r2,-20(fp)
    c024:	10800017 	ldw	r2,0(r2)
    c028:	10800817 	ldw	r2,32(r2)
    c02c:	1005003a 	cmpeq	r2,r2,zero
    c030:	1000081e 	bne	r2,zero,c054 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    c034:	e0bffb17 	ldw	r2,-20(fp)
    c038:	10800017 	ldw	r2,0(r2)
    c03c:	10800817 	ldw	r2,32(r2)
    c040:	e13ffb17 	ldw	r4,-20(fp)
    c044:	e17ffd17 	ldw	r5,-12(fp)
    c048:	103ee83a 	callr	r2
    c04c:	e0bffe15 	stw	r2,-8(fp)
    c050:	00000b06 	br	c080 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    c054:	e0fffd17 	ldw	r3,-12(fp)
    c058:	00880004 	movi	r2,8192
    c05c:	18800115 	stw	r2,4(r3)
      return 0;
    c060:	e03ffe15 	stw	zero,-8(fp)
    c064:	00000606 	br	c080 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c068:	000c0980 	call	c098 <alt_get_errno>
    c06c:	1007883a 	mov	r3,r2
    c070:	00801444 	movi	r2,81
    c074:	18800015 	stw	r2,0(r3)
    return -1;
    c078:	00bfffc4 	movi	r2,-1
    c07c:	e0bffe15 	stw	r2,-8(fp)
    c080:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c084:	e037883a 	mov	sp,fp
    c088:	dfc00117 	ldw	ra,4(sp)
    c08c:	df000017 	ldw	fp,0(sp)
    c090:	dec00204 	addi	sp,sp,8
    c094:	f800283a 	ret

0000c098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c098:	defffd04 	addi	sp,sp,-12
    c09c:	dfc00215 	stw	ra,8(sp)
    c0a0:	df000115 	stw	fp,4(sp)
    c0a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c0a8:	00800074 	movhi	r2,1
    c0ac:	10bb6c04 	addi	r2,r2,-4688
    c0b0:	10800017 	ldw	r2,0(r2)
    c0b4:	1005003a 	cmpeq	r2,r2,zero
    c0b8:	1000061e 	bne	r2,zero,c0d4 <alt_get_errno+0x3c>
    c0bc:	00800074 	movhi	r2,1
    c0c0:	10bb6c04 	addi	r2,r2,-4688
    c0c4:	10800017 	ldw	r2,0(r2)
    c0c8:	103ee83a 	callr	r2
    c0cc:	e0bfff15 	stw	r2,-4(fp)
    c0d0:	00000306 	br	c0e0 <alt_get_errno+0x48>
    c0d4:	00800074 	movhi	r2,1
    c0d8:	10834b04 	addi	r2,r2,3372
    c0dc:	e0bfff15 	stw	r2,-4(fp)
    c0e0:	e0bfff17 	ldw	r2,-4(fp)
}
    c0e4:	e037883a 	mov	sp,fp
    c0e8:	dfc00117 	ldw	ra,4(sp)
    c0ec:	df000017 	ldw	fp,0(sp)
    c0f0:	dec00204 	addi	sp,sp,8
    c0f4:	f800283a 	ret

0000c0f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    c0f8:	deffeb04 	addi	sp,sp,-84
    c0fc:	dfc01415 	stw	ra,80(sp)
    c100:	df001315 	stw	fp,76(sp)
    c104:	df001304 	addi	fp,sp,76
    c108:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c10c:	e0bffd17 	ldw	r2,-12(fp)
    c110:	1004803a 	cmplt	r2,r2,zero
    c114:	1000081e 	bne	r2,zero,c138 <isatty+0x40>
    c118:	e0bffd17 	ldw	r2,-12(fp)
    c11c:	10800324 	muli	r2,r2,12
    c120:	1007883a 	mov	r3,r2
    c124:	00800074 	movhi	r2,1
    c128:	10b8fe04 	addi	r2,r2,-7176
    c12c:	1887883a 	add	r3,r3,r2
    c130:	e0ffff15 	stw	r3,-4(fp)
    c134:	00000106 	br	c13c <isatty+0x44>
    c138:	e03fff15 	stw	zero,-4(fp)
    c13c:	e0bfff17 	ldw	r2,-4(fp)
    c140:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    c144:	e0bfed17 	ldw	r2,-76(fp)
    c148:	1005003a 	cmpeq	r2,r2,zero
    c14c:	10000f1e 	bne	r2,zero,c18c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    c150:	e0bfed17 	ldw	r2,-76(fp)
    c154:	10800017 	ldw	r2,0(r2)
    c158:	10800817 	ldw	r2,32(r2)
    c15c:	1004c03a 	cmpne	r2,r2,zero
    c160:	1000031e 	bne	r2,zero,c170 <isatty+0x78>
    {
      return 1;
    c164:	00800044 	movi	r2,1
    c168:	e0bffe15 	stw	r2,-8(fp)
    c16c:	00000c06 	br	c1a0 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    c170:	e17fee04 	addi	r5,fp,-72
    c174:	e13ffd17 	ldw	r4,-12(fp)
    c178:	000bfc40 	call	bfc4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    c17c:	e0bfef17 	ldw	r2,-68(fp)
    c180:	10880020 	cmpeqi	r2,r2,8192
    c184:	e0bffe15 	stw	r2,-8(fp)
    c188:	00000506 	br	c1a0 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c18c:	000c1b80 	call	c1b8 <alt_get_errno>
    c190:	1007883a 	mov	r3,r2
    c194:	00801444 	movi	r2,81
    c198:	18800015 	stw	r2,0(r3)
    return 0;
    c19c:	e03ffe15 	stw	zero,-8(fp)
    c1a0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    c1a4:	e037883a 	mov	sp,fp
    c1a8:	dfc00117 	ldw	ra,4(sp)
    c1ac:	df000017 	ldw	fp,0(sp)
    c1b0:	dec00204 	addi	sp,sp,8
    c1b4:	f800283a 	ret

0000c1b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c1b8:	defffd04 	addi	sp,sp,-12
    c1bc:	dfc00215 	stw	ra,8(sp)
    c1c0:	df000115 	stw	fp,4(sp)
    c1c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c1c8:	00800074 	movhi	r2,1
    c1cc:	10bb6c04 	addi	r2,r2,-4688
    c1d0:	10800017 	ldw	r2,0(r2)
    c1d4:	1005003a 	cmpeq	r2,r2,zero
    c1d8:	1000061e 	bne	r2,zero,c1f4 <alt_get_errno+0x3c>
    c1dc:	00800074 	movhi	r2,1
    c1e0:	10bb6c04 	addi	r2,r2,-4688
    c1e4:	10800017 	ldw	r2,0(r2)
    c1e8:	103ee83a 	callr	r2
    c1ec:	e0bfff15 	stw	r2,-4(fp)
    c1f0:	00000306 	br	c200 <alt_get_errno+0x48>
    c1f4:	00800074 	movhi	r2,1
    c1f8:	10834b04 	addi	r2,r2,3372
    c1fc:	e0bfff15 	stw	r2,-4(fp)
    c200:	e0bfff17 	ldw	r2,-4(fp)
}
    c204:	e037883a 	mov	sp,fp
    c208:	dfc00117 	ldw	ra,4(sp)
    c20c:	df000017 	ldw	fp,0(sp)
    c210:	dec00204 	addi	sp,sp,8
    c214:	f800283a 	ret

0000c218 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    c218:	defff804 	addi	sp,sp,-32
    c21c:	dfc00715 	stw	ra,28(sp)
    c220:	df000615 	stw	fp,24(sp)
    c224:	df000604 	addi	fp,sp,24
    c228:	e13ffc15 	stw	r4,-16(fp)
    c22c:	e17ffd15 	stw	r5,-12(fp)
    c230:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    c234:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c238:	e0bffc17 	ldw	r2,-16(fp)
    c23c:	1004803a 	cmplt	r2,r2,zero
    c240:	1000081e 	bne	r2,zero,c264 <lseek+0x4c>
    c244:	e0bffc17 	ldw	r2,-16(fp)
    c248:	10800324 	muli	r2,r2,12
    c24c:	1007883a 	mov	r3,r2
    c250:	00800074 	movhi	r2,1
    c254:	10b8fe04 	addi	r2,r2,-7176
    c258:	1887883a 	add	r3,r3,r2
    c25c:	e0ffff15 	stw	r3,-4(fp)
    c260:	00000106 	br	c268 <lseek+0x50>
    c264:	e03fff15 	stw	zero,-4(fp)
    c268:	e0bfff17 	ldw	r2,-4(fp)
    c26c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    c270:	e0bffb17 	ldw	r2,-20(fp)
    c274:	1005003a 	cmpeq	r2,r2,zero
    c278:	1000111e 	bne	r2,zero,c2c0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    c27c:	e0bffb17 	ldw	r2,-20(fp)
    c280:	10800017 	ldw	r2,0(r2)
    c284:	10800717 	ldw	r2,28(r2)
    c288:	1005003a 	cmpeq	r2,r2,zero
    c28c:	1000091e 	bne	r2,zero,c2b4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    c290:	e0bffb17 	ldw	r2,-20(fp)
    c294:	10800017 	ldw	r2,0(r2)
    c298:	10800717 	ldw	r2,28(r2)
    c29c:	e13ffb17 	ldw	r4,-20(fp)
    c2a0:	e17ffd17 	ldw	r5,-12(fp)
    c2a4:	e1bffe17 	ldw	r6,-8(fp)
    c2a8:	103ee83a 	callr	r2
    c2ac:	e0bffa15 	stw	r2,-24(fp)
    c2b0:	00000506 	br	c2c8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    c2b4:	00bfde84 	movi	r2,-134
    c2b8:	e0bffa15 	stw	r2,-24(fp)
    c2bc:	00000206 	br	c2c8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    c2c0:	00bfebc4 	movi	r2,-81
    c2c4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    c2c8:	e0bffa17 	ldw	r2,-24(fp)
    c2cc:	1004403a 	cmpge	r2,r2,zero
    c2d0:	1000071e 	bne	r2,zero,c2f0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    c2d4:	000c3080 	call	c308 <alt_get_errno>
    c2d8:	1007883a 	mov	r3,r2
    c2dc:	e0bffa17 	ldw	r2,-24(fp)
    c2e0:	0085c83a 	sub	r2,zero,r2
    c2e4:	18800015 	stw	r2,0(r3)
    rc = -1;
    c2e8:	00bfffc4 	movi	r2,-1
    c2ec:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    c2f0:	e0bffa17 	ldw	r2,-24(fp)
}
    c2f4:	e037883a 	mov	sp,fp
    c2f8:	dfc00117 	ldw	ra,4(sp)
    c2fc:	df000017 	ldw	fp,0(sp)
    c300:	dec00204 	addi	sp,sp,8
    c304:	f800283a 	ret

0000c308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c308:	defffd04 	addi	sp,sp,-12
    c30c:	dfc00215 	stw	ra,8(sp)
    c310:	df000115 	stw	fp,4(sp)
    c314:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c318:	00800074 	movhi	r2,1
    c31c:	10bb6c04 	addi	r2,r2,-4688
    c320:	10800017 	ldw	r2,0(r2)
    c324:	1005003a 	cmpeq	r2,r2,zero
    c328:	1000061e 	bne	r2,zero,c344 <alt_get_errno+0x3c>
    c32c:	00800074 	movhi	r2,1
    c330:	10bb6c04 	addi	r2,r2,-4688
    c334:	10800017 	ldw	r2,0(r2)
    c338:	103ee83a 	callr	r2
    c33c:	e0bfff15 	stw	r2,-4(fp)
    c340:	00000306 	br	c350 <alt_get_errno+0x48>
    c344:	00800074 	movhi	r2,1
    c348:	10834b04 	addi	r2,r2,3372
    c34c:	e0bfff15 	stw	r2,-4(fp)
    c350:	e0bfff17 	ldw	r2,-4(fp)
}
    c354:	e037883a 	mov	sp,fp
    c358:	dfc00117 	ldw	ra,4(sp)
    c35c:	df000017 	ldw	fp,0(sp)
    c360:	dec00204 	addi	sp,sp,8
    c364:	f800283a 	ret

0000c368 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    c368:	defffe04 	addi	sp,sp,-8
    c36c:	df000115 	stw	fp,4(sp)
    c370:	df000104 	addi	fp,sp,4
    c374:	e13fff15 	stw	r4,-4(fp)
}
    c378:	e037883a 	mov	sp,fp
    c37c:	df000017 	ldw	fp,0(sp)
    c380:	dec00104 	addi	sp,sp,4
    c384:	f800283a 	ret

0000c388 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    c388:	defffe04 	addi	sp,sp,-8
    c38c:	df000115 	stw	fp,4(sp)
    c390:	df000104 	addi	fp,sp,4
    c394:	e13fff15 	stw	r4,-4(fp)
}
    c398:	e037883a 	mov	sp,fp
    c39c:	df000017 	ldw	fp,0(sp)
    c3a0:	dec00104 	addi	sp,sp,4
    c3a4:	f800283a 	ret

0000c3a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    c3a8:	defff704 	addi	sp,sp,-36
    c3ac:	dfc00815 	stw	ra,32(sp)
    c3b0:	df000715 	stw	fp,28(sp)
    c3b4:	df000704 	addi	fp,sp,28
    c3b8:	e13ffb15 	stw	r4,-20(fp)
    c3bc:	e17ffc15 	stw	r5,-16(fp)
    c3c0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c3c4:	e0bffb17 	ldw	r2,-20(fp)
    c3c8:	1004803a 	cmplt	r2,r2,zero
    c3cc:	1000081e 	bne	r2,zero,c3f0 <read+0x48>
    c3d0:	e0bffb17 	ldw	r2,-20(fp)
    c3d4:	10800324 	muli	r2,r2,12
    c3d8:	1007883a 	mov	r3,r2
    c3dc:	00800074 	movhi	r2,1
    c3e0:	10b8fe04 	addi	r2,r2,-7176
    c3e4:	1887883a 	add	r3,r3,r2
    c3e8:	e0ffff15 	stw	r3,-4(fp)
    c3ec:	00000106 	br	c3f4 <read+0x4c>
    c3f0:	e03fff15 	stw	zero,-4(fp)
    c3f4:	e0bfff17 	ldw	r2,-4(fp)
    c3f8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c3fc:	e0bffa17 	ldw	r2,-24(fp)
    c400:	1005003a 	cmpeq	r2,r2,zero
    c404:	1000241e 	bne	r2,zero,c498 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    c408:	e0bffa17 	ldw	r2,-24(fp)
    c40c:	10800217 	ldw	r2,8(r2)
    c410:	108000cc 	andi	r2,r2,3
    c414:	10800060 	cmpeqi	r2,r2,1
    c418:	10001a1e 	bne	r2,zero,c484 <read+0xdc>
    c41c:	e0bffa17 	ldw	r2,-24(fp)
    c420:	10800017 	ldw	r2,0(r2)
    c424:	10800517 	ldw	r2,20(r2)
    c428:	1005003a 	cmpeq	r2,r2,zero
    c42c:	1000151e 	bne	r2,zero,c484 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    c430:	e0bffa17 	ldw	r2,-24(fp)
    c434:	10800017 	ldw	r2,0(r2)
    c438:	10800517 	ldw	r2,20(r2)
    c43c:	e17ffc17 	ldw	r5,-16(fp)
    c440:	e1bffd17 	ldw	r6,-12(fp)
    c444:	e13ffa17 	ldw	r4,-24(fp)
    c448:	103ee83a 	callr	r2
    c44c:	e0bff915 	stw	r2,-28(fp)
    c450:	e0bff917 	ldw	r2,-28(fp)
    c454:	1004403a 	cmpge	r2,r2,zero
    c458:	1000071e 	bne	r2,zero,c478 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    c45c:	000c4c80 	call	c4c8 <alt_get_errno>
    c460:	e0fff917 	ldw	r3,-28(fp)
    c464:	00c7c83a 	sub	r3,zero,r3
    c468:	10c00015 	stw	r3,0(r2)
          return -1;
    c46c:	00bfffc4 	movi	r2,-1
    c470:	e0bffe15 	stw	r2,-8(fp)
    c474:	00000e06 	br	c4b0 <read+0x108>
        }
        return rval;
    c478:	e0bff917 	ldw	r2,-28(fp)
    c47c:	e0bffe15 	stw	r2,-8(fp)
    c480:	00000b06 	br	c4b0 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    c484:	000c4c80 	call	c4c8 <alt_get_errno>
    c488:	1007883a 	mov	r3,r2
    c48c:	00800344 	movi	r2,13
    c490:	18800015 	stw	r2,0(r3)
    c494:	00000406 	br	c4a8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    c498:	000c4c80 	call	c4c8 <alt_get_errno>
    c49c:	1007883a 	mov	r3,r2
    c4a0:	00801444 	movi	r2,81
    c4a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c4a8:	00bfffc4 	movi	r2,-1
    c4ac:	e0bffe15 	stw	r2,-8(fp)
    c4b0:	e0bffe17 	ldw	r2,-8(fp)
}
    c4b4:	e037883a 	mov	sp,fp
    c4b8:	dfc00117 	ldw	ra,4(sp)
    c4bc:	df000017 	ldw	fp,0(sp)
    c4c0:	dec00204 	addi	sp,sp,8
    c4c4:	f800283a 	ret

0000c4c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c4c8:	defffd04 	addi	sp,sp,-12
    c4cc:	dfc00215 	stw	ra,8(sp)
    c4d0:	df000115 	stw	fp,4(sp)
    c4d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c4d8:	00800074 	movhi	r2,1
    c4dc:	10bb6c04 	addi	r2,r2,-4688
    c4e0:	10800017 	ldw	r2,0(r2)
    c4e4:	1005003a 	cmpeq	r2,r2,zero
    c4e8:	1000061e 	bne	r2,zero,c504 <alt_get_errno+0x3c>
    c4ec:	00800074 	movhi	r2,1
    c4f0:	10bb6c04 	addi	r2,r2,-4688
    c4f4:	10800017 	ldw	r2,0(r2)
    c4f8:	103ee83a 	callr	r2
    c4fc:	e0bfff15 	stw	r2,-4(fp)
    c500:	00000306 	br	c510 <alt_get_errno+0x48>
    c504:	00800074 	movhi	r2,1
    c508:	10834b04 	addi	r2,r2,3372
    c50c:	e0bfff15 	stw	r2,-4(fp)
    c510:	e0bfff17 	ldw	r2,-4(fp)
}
    c514:	e037883a 	mov	sp,fp
    c518:	dfc00117 	ldw	ra,4(sp)
    c51c:	df000017 	ldw	fp,0(sp)
    c520:	dec00204 	addi	sp,sp,8
    c524:	f800283a 	ret

0000c528 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    c528:	defff804 	addi	sp,sp,-32
    c52c:	df000715 	stw	fp,28(sp)
    c530:	df000704 	addi	fp,sp,28
    c534:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c538:	0005303a 	rdctl	r2,status
    c53c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c540:	e0fffb17 	ldw	r3,-20(fp)
    c544:	00bfff84 	movi	r2,-2
    c548:	1884703a 	and	r2,r3,r2
    c54c:	1001703a 	wrctl	status,r2
  
  return context;
    c550:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    c554:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    c558:	d0a01317 	ldw	r2,-32692(gp)
    c55c:	10c000c4 	addi	r3,r2,3
    c560:	00bfff04 	movi	r2,-4
    c564:	1884703a 	and	r2,r3,r2
    c568:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    c56c:	d0e01317 	ldw	r3,-32692(gp)
    c570:	e0bffe17 	ldw	r2,-8(fp)
    c574:	1887883a 	add	r3,r3,r2
    c578:	00802034 	movhi	r2,128
    c57c:	10800004 	addi	r2,r2,0
    c580:	10c0072e 	bgeu	r2,r3,c5a0 <sbrk+0x78>
    c584:	e0bffd17 	ldw	r2,-12(fp)
    c588:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c58c:	e0bffa17 	ldw	r2,-24(fp)
    c590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    c594:	00bfffc4 	movi	r2,-1
    c598:	e0bfff15 	stw	r2,-4(fp)
    c59c:	00000c06 	br	c5d0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    c5a0:	d0a01317 	ldw	r2,-32692(gp)
    c5a4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    c5a8:	d0e01317 	ldw	r3,-32692(gp)
    c5ac:	e0bffe17 	ldw	r2,-8(fp)
    c5b0:	1885883a 	add	r2,r3,r2
    c5b4:	d0a01315 	stw	r2,-32692(gp)
    c5b8:	e0bffd17 	ldw	r2,-12(fp)
    c5bc:	e0bff915 	stw	r2,-28(fp)
    c5c0:	e0bff917 	ldw	r2,-28(fp)
    c5c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    c5c8:	e0bffc17 	ldw	r2,-16(fp)
    c5cc:	e0bfff15 	stw	r2,-4(fp)
    c5d0:	e0bfff17 	ldw	r2,-4(fp)
} 
    c5d4:	e037883a 	mov	sp,fp
    c5d8:	df000017 	ldw	fp,0(sp)
    c5dc:	dec00104 	addi	sp,sp,4
    c5e0:	f800283a 	ret

0000c5e4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c5e4:	defff704 	addi	sp,sp,-36
    c5e8:	dfc00815 	stw	ra,32(sp)
    c5ec:	df000715 	stw	fp,28(sp)
    c5f0:	df000704 	addi	fp,sp,28
    c5f4:	e13ffb15 	stw	r4,-20(fp)
    c5f8:	e17ffc15 	stw	r5,-16(fp)
    c5fc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c600:	e0bffb17 	ldw	r2,-20(fp)
    c604:	1004803a 	cmplt	r2,r2,zero
    c608:	1000081e 	bne	r2,zero,c62c <write+0x48>
    c60c:	e0bffb17 	ldw	r2,-20(fp)
    c610:	10800324 	muli	r2,r2,12
    c614:	1007883a 	mov	r3,r2
    c618:	00800074 	movhi	r2,1
    c61c:	10b8fe04 	addi	r2,r2,-7176
    c620:	1887883a 	add	r3,r3,r2
    c624:	e0ffff15 	stw	r3,-4(fp)
    c628:	00000106 	br	c630 <write+0x4c>
    c62c:	e03fff15 	stw	zero,-4(fp)
    c630:	e0bfff17 	ldw	r2,-4(fp)
    c634:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c638:	e0bffa17 	ldw	r2,-24(fp)
    c63c:	1005003a 	cmpeq	r2,r2,zero
    c640:	1000241e 	bne	r2,zero,c6d4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c644:	e0bffa17 	ldw	r2,-24(fp)
    c648:	10800217 	ldw	r2,8(r2)
    c64c:	108000cc 	andi	r2,r2,3
    c650:	1005003a 	cmpeq	r2,r2,zero
    c654:	10001a1e 	bne	r2,zero,c6c0 <write+0xdc>
    c658:	e0bffa17 	ldw	r2,-24(fp)
    c65c:	10800017 	ldw	r2,0(r2)
    c660:	10800617 	ldw	r2,24(r2)
    c664:	1005003a 	cmpeq	r2,r2,zero
    c668:	1000151e 	bne	r2,zero,c6c0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c66c:	e0bffa17 	ldw	r2,-24(fp)
    c670:	10800017 	ldw	r2,0(r2)
    c674:	10800617 	ldw	r2,24(r2)
    c678:	e17ffc17 	ldw	r5,-16(fp)
    c67c:	e1bffd17 	ldw	r6,-12(fp)
    c680:	e13ffa17 	ldw	r4,-24(fp)
    c684:	103ee83a 	callr	r2
    c688:	e0bff915 	stw	r2,-28(fp)
    c68c:	e0bff917 	ldw	r2,-28(fp)
    c690:	1004403a 	cmpge	r2,r2,zero
    c694:	1000071e 	bne	r2,zero,c6b4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    c698:	000c7040 	call	c704 <alt_get_errno>
    c69c:	e0fff917 	ldw	r3,-28(fp)
    c6a0:	00c7c83a 	sub	r3,zero,r3
    c6a4:	10c00015 	stw	r3,0(r2)
        return -1;
    c6a8:	00bfffc4 	movi	r2,-1
    c6ac:	e0bffe15 	stw	r2,-8(fp)
    c6b0:	00000e06 	br	c6ec <write+0x108>
      }
      return rval;
    c6b4:	e0bff917 	ldw	r2,-28(fp)
    c6b8:	e0bffe15 	stw	r2,-8(fp)
    c6bc:	00000b06 	br	c6ec <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c6c0:	000c7040 	call	c704 <alt_get_errno>
    c6c4:	1007883a 	mov	r3,r2
    c6c8:	00800344 	movi	r2,13
    c6cc:	18800015 	stw	r2,0(r3)
    c6d0:	00000406 	br	c6e4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c6d4:	000c7040 	call	c704 <alt_get_errno>
    c6d8:	1007883a 	mov	r3,r2
    c6dc:	00801444 	movi	r2,81
    c6e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c6e4:	00bfffc4 	movi	r2,-1
    c6e8:	e0bffe15 	stw	r2,-8(fp)
    c6ec:	e0bffe17 	ldw	r2,-8(fp)
}
    c6f0:	e037883a 	mov	sp,fp
    c6f4:	dfc00117 	ldw	ra,4(sp)
    c6f8:	df000017 	ldw	fp,0(sp)
    c6fc:	dec00204 	addi	sp,sp,8
    c700:	f800283a 	ret

0000c704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c704:	defffd04 	addi	sp,sp,-12
    c708:	dfc00215 	stw	ra,8(sp)
    c70c:	df000115 	stw	fp,4(sp)
    c710:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c714:	00800074 	movhi	r2,1
    c718:	10bb6c04 	addi	r2,r2,-4688
    c71c:	10800017 	ldw	r2,0(r2)
    c720:	1005003a 	cmpeq	r2,r2,zero
    c724:	1000061e 	bne	r2,zero,c740 <alt_get_errno+0x3c>
    c728:	00800074 	movhi	r2,1
    c72c:	10bb6c04 	addi	r2,r2,-4688
    c730:	10800017 	ldw	r2,0(r2)
    c734:	103ee83a 	callr	r2
    c738:	e0bfff15 	stw	r2,-4(fp)
    c73c:	00000306 	br	c74c <alt_get_errno+0x48>
    c740:	00800074 	movhi	r2,1
    c744:	10834b04 	addi	r2,r2,3372
    c748:	e0bfff15 	stw	r2,-4(fp)
    c74c:	e0bfff17 	ldw	r2,-4(fp)
}
    c750:	e037883a 	mov	sp,fp
    c754:	dfc00117 	ldw	ra,4(sp)
    c758:	df000017 	ldw	fp,0(sp)
    c75c:	dec00204 	addi	sp,sp,8
    c760:	f800283a 	ret
    c764:	0000a490 	cmplti	zero,zero,658
