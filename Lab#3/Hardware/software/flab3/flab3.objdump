
flab3.elf:     file format elf32-littlenios2
flab3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012cc8 memsz 0x00012cc8 flags r-x
    LOAD off    0x00013ce8 vaddr 0x00012ce8 paddr 0x00014bf8 align 2**12
         filesz 0x00001f10 memsz 0x00001f10 flags rw-
    LOAD off    0x00016b08 vaddr 0x00016b08 paddr 0x00016b08 align 2**12
         filesz 0x00000000 memsz 0x005b92b4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000120c4  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a6c  0001227c  0001227c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f10  00012ce8  00014bf8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          005b958e  00016b08  00016b08  00016b08  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00015bf8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f98  00000000  00000000  00015c20  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000023b5  00000000  00000000  00016bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002ed3f  00000000  00000000  00018f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000981c  00000000  00000000  00047cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000197aa  00000000  00000000  000514c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025f0  00000000  00000000  0006ac74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c36  00000000  00000000  0006d264  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d486  00000000  00000000  0006fe9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0007d320  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009d0  00000000  00000000  0007d370  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000826f5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000826f8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000826fb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000826fc  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000826fd  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00082701  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00082705  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00082709  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00082712  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0008271b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00082724  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  0008272f  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ec8  00000000  00000000  00082753  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00100c59  00000000  00000000  0008761b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
0001227c l    d  .rodata	00000000 .rodata
00012ce8 l    d  .rwdata	00000000 .rwdata
00016b08 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 filter.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
000127f2 l     O .rodata	00000010 C.54.2485
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00001c98 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002ffc l     F .text	00000058 __sprint_r
000129aa l     O .rodata	00000010 blanks.3452
0001299a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005060 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006a5c l     F .text	00000058 std
00006b68 l     F .text	00000008 __fp_lock
00006b70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012de8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00014bc4 l     O .rwdata	00000004 charset
000129e0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00012b28 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000b428 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b738 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b798 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b898 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000bb78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000bc58 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000bdb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000c278 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014bec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000c514 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000137a4 l     O .rwdata	00001060 JTAG_UART
00014804 l     O .rwdata	00000030 AV_Config
00014834 l     O .rwdata	00000030 Audio
00014864 l     O .rwdata	0000002c Char_LCD_16x2
00014890 l     O .rwdata	0000003c Ethernet
000148cc l     O .rwdata	0000002c IrDA_UART
000148f8 l     O .rwdata	0000002c Expansion_JP1
00014924 l     O .rwdata	0000002c Expansion_JP2
00014950 l     O .rwdata	0000002c Green_LEDs
0001497c l     O .rwdata	0000002c HEX3_HEX0
000149a8 l     O .rwdata	0000002c HEX7_HEX4
000149d4 l     O .rwdata	0000002c Pushbuttons
00014a00 l     O .rwdata	0000002c Red_LEDs
00014a2c l     O .rwdata	0000002c Slider_Switches
00014a58 l     O .rwdata	00000038 PS2_Port
00014a90 l     O .rwdata	0000002c Serial_Port
00014abc l     O .rwdata	00000034 USB
00014af0 l     O .rwdata	00000048 VGA_Char_Buffer
00014b38 l     O .rwdata	00000054 VGA_Pixel_Buffer
00014b8c l     O .rwdata	0000002c SD_Card
0000c9b8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000cbf0 l     F .text	0000022c altera_avalon_jtag_uart_irq
0000ce1c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010fc4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000111b0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000112ec l     F .text	000000dc alt_file_locked
00011550 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00012064 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00012218 l     F .text	00000040 alt_sim_halt
000086e0 g     F .text	00000094 _mprec_log10
000087cc g     F .text	00000088 __any_on
00009ed8 g     F .text	00000070 _isatty_r
00012b00 g     O .rodata	00000028 __mprec_tinytens
0000be14 g     F .text	0000006c alt_main
000104a0 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
00002ed4 g     F .text	000000a0 _puts_r
00000814 g     F .text	00000060 interval_timer_ISR
0000ece4 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
005cfb2c g     O .bss	00000100 alt_irq
00009f48 g     F .text	00000078 _lseek_r
00014bf8 g       *ABS*	00000000 __flash_rwdata_start
0000de88 g     F .text	00000034 alt_up_character_lcd_send_cmd
0000ae1c g     F .text	00000088 __eqdf2
00016b08 g     O .bss	00000001 byte2
0000d878 g     F .text	00000070 alt_up_audio_read_fifo_avail
005cfdbc g       *ABS*	00000000 __alt_heap_start
00002e5c g     F .text	00000044 printf
0000d8e8 g     F .text	00000070 alt_up_audio_record_r
00016b09 g     O .bss	00000001 byte3
000099a4 g     F .text	00000068 __sseek
00006ac4 g     F .text	000000a4 __sinit
00011de4 g     F .text	00000130 __swbuf_r
0000f6c4 g     F .text	00000114 alt_up_char_buffer_string
0000eafc g     F .text	00000034 read_CE_bit
000017a4 g     F .text	000001a8 run_command
0000779c g     F .text	00000084 _setlocale_r
00006bc4 g     F .text	00000068 __sfmoreglue
0000bea0 g     F .text	00000020 __malloc_unlock
0000ee90 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0000f3cc g     F .text	00000090 alt_up_rs232_read_fd
0000f5f4 g     F .text	000000d0 alt_up_char_buffer_draw
0000d7f0 g     F .text	00000088 alt_up_audio_reset_audio_core
00016b58 g     O .bss	00000004 altera_avalon_timer_ts_freq
000081f4 g     F .text	000000e0 memmove
00016b0a g     O .bss	00000001 byte1
00006bb4 g     F .text	00000010 _cleanup
00001250 g     F .text	00000210 setMouseBounds
00008854 g     F .text	000000bc _Balloc
00012ce8 g     O .rwdata	00000100 cursor_shape
0000f874 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0000af2c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000de0c g     F .text	0000007c get_DDRAM_addr
0000f834 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009e64 g     F .text	00000074 _fstat_r
00016b40 g     O .bss	00000004 errno
00002560 g     F .text	00000038 __make_dp
0000d7b4 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00016b4c g     O .bss	00000004 alt_argv
0001cbb8 g       *ABS*	00000000 _gp
00011754 g     F .text	00000030 usleep
0000fa14 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
00013624 g     O .rwdata	00000180 alt_fd_list
000110ec g     F .text	00000094 alt_find_dev
00002d24 g     F .text	000000a0 memcpy
0000e020 g     F .text	0000004c alt_up_character_lcd_write_fd
0000f7d8 g     F .text	0000005c alt_up_char_buffer_clear
00006ba8 g     F .text	0000000c _cleanup_r
0000b0c4 g     F .text	000000f8 __floatsidf
00011274 g     F .text	00000078 alt_io_redirect
0000b03c g     F .text	00000088 __ltdf2
0001227c g       *ABS*	00000000 __DTOR_END__
0000e988 g     F .text	00000090 alt_up_irda_write_fd
0000f358 g     F .text	00000074 alt_up_rs232_read_data
00002f74 g     F .text	00000014 puts
00008630 g     F .text	000000b0 __ratio
00016b0b g     O .bss	00000001 valid_byte3
0000dd4c g     F .text	00000060 alt_up_audio_read_fifo_head
0000fac4 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000e770 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
0000d034 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002ea0 g     F .text	00000034 _printf_r
0000b564 g     F .text	00000008 __udivsi3
0000bab8 g     F .text	000000c0 isatty
0000e4c8 g     F .text	00000044 alt_up_ethernet_reg_write
00012a10 g     O .rodata	000000c8 __mprec_tens
00010150 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00007778 g     F .text	00000008 __locale_charset
0000e718 g     F .text	00000058 alt_up_irda_disable_read_interrupt
00016b0c g     O .bss	00000001 cnt
00011aa8 g     F .text	00000090 alt_icache_flush
00016b34 g     O .bss	00000004 __malloc_top_pad
00014bc0 g     O .rwdata	00000004 __mb_cur_max
00007780 g     F .text	0000000c _localeconv_r
00008f4c g     F .text	0000003c __i2b
0000715c g     F .text	0000049c __sfvwrite_r
0000992c g     F .text	00000070 _sbrk_r
001ff20c g     O .bss	00000020 up_dev
00010934 g     F .text	000000d0 helper_plot_pixel
00016b0d g     O .bss	00000001 flag_denoise
00009fc0 g     F .text	00000078 _read_r
00016b0e g     O .bss	00000001 command
000131e8 g     O .rwdata	0000000c __lc_ctype
00014be0 g     O .rwdata	00000004 alt_max_fd
0000f2c0 g     F .text	00000050 alt_up_rs232_check_parity
0000ddac g     F .text	00000060 alt_up_audio_write_fifo_head
0000e33c g     F .text	00000110 alt_up_ethernet_init
00002bec g     F .text	00000138 __unpack_d
00009d40 g     F .text	00000110 _fclose_r
0000eb30 g     F .text	00000034 read_num_bytes_available
00006a28 g     F .text	00000034 fflush
00016b38 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b8f8 g     F .text	000001c0 alt_irq_register
0000ea98 g     F .text	00000034 read_RI_bit
00001b84 g     F .text	00000054 __extendsfdf2
00002128 g     F .text	00000074 __adddf3
00008510 g     F .text	00000120 __b2d
0000faf8 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
0000a614 g     F .text	000005b0 __umoddi3
0000bcc4 g     F .text	000000f0 lseek
00014bbc g     O .rwdata	00000004 _global_impure_ptr
000092c8 g     F .text	000005f4 _realloc_r
005cfdbc g       *ABS*	00000000 __bss_end
0000fc5c g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00011648 g     F .text	0000010c alt_tick
0000a038 g     F .text	000005dc __udivdi3
001ff22c g     O .bss	000f4240 r_buf_Denoise
00012ad8 g     O .rodata	00000028 __mprec_bigtens
000091a8 g     F .text	00000120 __s2b
0000b294 g     F .text	00000194 __floatunsidf
00008430 g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000d600 g     F .text	00000040 alt_up_audio_open_dev
0000eb98 g     F .text	0000002c read_data_byte
00006b90 g     F .text	00000018 __fp_lock_all
0000116c g     F .text	000000e4 mouse_color
0000da3c g     F .text	00000070 alt_up_audio_play_r
000115b0 g     F .text	00000098 alt_alarm_stop
0000eacc g     F .text	00000030 read_RE_bit
00016b44 g     O .bss	00000004 alt_irq_active
0000e7ac g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
000135fc g     O .rwdata	00000028 alt_dev_null
00002810 g     F .text	000000c8 __unpack_f
0000e308 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00016b0f g     O .bss	00000001 flag_mouse
00016b22 g     O .bss	00000002 y_axis_mouse
0000ea58 g     F .text	00000040 alt_up_parallel_port_open_dev
0000ed3c g     F .text	00000078 alt_up_ps2_write_data_byte
00010ef4 g     F .text	0000001c alt_dcache_flush_all
000082fc g     F .text	00000070 __hi0bits
00010870 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0000b1bc g     F .text	000000d8 __fixdfsi
000016c0 g     F .text	000000e4 make_Denoise
00014bf8 g       *ABS*	00000000 __ram_rwdata_end
0000194c g     F .text	00000180 command_det
00014bd8 g     O .rwdata	00000008 alt_dev_list
0000c3f4 g     F .text	00000120 write
00011cfc g     F .text	000000e8 _putc_r
0000d5d8 g     F .text	00000028 alt_timestamp_freq
00010a04 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
00012ce8 g       *ABS*	00000000 __ram_rodata_end
0000b7c4 g     F .text	000000d4 fstat
0000f45c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00009088 g     F .text	00000120 __pow5mult
00016b28 g     O .bss	00000004 __nlocale_changed
0000b56c g     F .text	00000008 __umodsi3
0001227c g     O .rodata	00000200 coef
005cfdbc g       *ABS*	00000000 end
0000f0b0 g     F .text	000000a8 alt_up_ps2_write_fd
000026b0 g     F .text	00000160 __pack_f
0000e7ec g     F .text	00000050 alt_up_irda_check_parity
0000f530 g     F .text	00000084 alt_up_char_buffer_init
00016d8c g     O .bss	000f4240 r_buf
0000cb38 g     F .text	000000b8 altera_avalon_jtag_uart_init
00012278 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00002630 g     F .text	00000080 __clzsi2
0000d258 g     F .text	00000240 altera_avalon_jtag_uart_write
00006ab4 g     F .text	00000004 __sfp_lock_acquire
00008110 g     F .text	000000e4 memchr
0000df30 g     F .text	00000078 alt_up_character_lcd_write
00003054 g     F .text	00001eac ___vfprintf_internal_r
00006e48 g     F .text	00000314 _free_r
0000bec0 g     F .text	00000258 alt_printf
00012068 g     F .text	000001b0 __call_exitprocs
00016b2c g     O .bss	00000004 __mlocale_changed
00014bcc g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00016b5c g     O .bss	00000004 _alt_tick_rate
003e76ac g     O .bss	000f4240 r_buf_backup
0000dc20 g     F .text	0000012c alt_up_audio_write_fifo
00008c18 g     F .text	0000014c __lshift
00016b60 g     O .bss	00000004 _alt_nticks
0000c158 g     F .text	00000120 read
0000c5a8 g     F .text	00000410 alt_sys_init
0000e194 g     F .text	000000b0 alt_up_character_lcd_shift_display
0000db1c g     F .text	00000104 alt_up_audio_read_fifo
00011f30 g     F .text	00000134 __register_exitproc
00016b24 g     O .bss	00000002 x_axis_mouse
0000d728 g     F .text	00000050 alt_up_audio_disable_write_interrupt
0000efbc g     F .text	00000058 alt_up_ps2_clear_fifo
0000f280 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
000006b0 g     F .text	00000164 filter
00008d64 g     F .text	000001e8 __multiply
0000e244 g     F .text	00000090 alt_up_character_lcd_erase_pos
0000cecc g     F .text	00000074 altera_avalon_jtag_uart_close
00012ce8 g       *ABS*	00000000 __ram_rwdata_start
00016b10 g     O .bss	00000001 valid_byte2
0001227c g       *ABS*	00000000 __ram_rodata_start
00016d64 g     O .bss	00000028 __malloc_current_mallinfo
00008910 g     F .text	0000017c __d2b
0000c9f0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000119f0 g     F .text	000000b8 alt_get_fd
000117a4 g     F .text	0000012c alt_busy_sleep
0000b574 g     F .text	000000c8 __fpcmp_parts_d
00009cd0 g     F .text	00000070 _close_r
00016b64 g     O .bss	00000200 mem
0000d6dc g     F .text	0000004c alt_up_audio_enable_write_interrupt
00011b84 g     F .text	00000074 memcmp
0000caa0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
005cfdbc g       *ABS*	00000000 __alt_stack_base
0000cae8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000e6c4 g     F .text	00000054 alt_up_irda_enable_read_interrupt
00004f24 g     F .text	0000013c __swsetup_r
0000abc4 g     F .text	00000258 __divdf3
0000d68c g     F .text	00000050 alt_up_audio_disable_read_interrupt
00006c2c g     F .text	000000f0 __sfp
00008774 g     F .text	00000058 __copybits
000131f4 g     O .rwdata	00000408 __malloc_av_
00006ac0 g     F .text	00000004 __sinit_lock_release
0000219c g     F .text	000003c4 __muldf3
00009a88 g     F .text	00000060 __sread
0000f1ec g     F .text	00000058 alt_up_rs232_disable_read_interrupt
000118d0 g     F .text	00000120 alt_find_file
00010f10 g     F .text	000000b4 alt_dev_llist_insert
0000be80 g     F .text	00000020 __malloc_lock
0000c338 g     F .text	000000bc sbrk
0000682c g     F .text	000001fc _fflush_r
00009c1c g     F .text	000000b4 _calloc_r
00016b08 g       *ABS*	00000000 __bss_start
00002dc4 g     F .text	00000098 memset
00000874 g     F .text	000008f8 main
0000d9c8 g     F .text	00000074 alt_up_audio_write_fifo_space
00016b50 g     O .bss	00000004 alt_envp
00016b3c g     O .bss	00000004 __malloc_max_total_mem
0000fa6c g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0000f5b4 g     F .text	00000040 alt_up_char_buffer_open_dev
0000ca48 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00011f14 g     F .text	0000001c __swbuf
0000e0e4 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0000999c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00009e50 g     F .text	00000014 fclose
0000ef40 g     F .text	0000007c alt_up_ps2_read_data_byte
00016b14 g     O .bss	00000004 timeout
0000d498 g     F .text	000000a4 alt_timestamp_start
005cfc2c g     O .bss	00000190 _atexit0
00005278 g     F .text	000015b4 _dtoa_r
000079d0 g     F .text	00000740 _malloc_r
00014be4 g     O .rwdata	00000004 alt_errno
000076c0 g     F .text	000000b8 _fwalk
0000e83c g     F .text	00000048 alt_up_irda_write_data
0000f158 g     F .text	00000040 alt_up_ps2_open_dev
00011bf8 g     F .text	00000104 putc
0000b4a4 g     F .text	00000060 __divsi3
00012824 g     O .rodata	00000014 __thenan_df
0000def0 g     F .text	00000040 alt_up_character_lcd_open_dev
00006d1c g     F .text	0000012c _malloc_trim_r
0000ec90 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
0001227c g       *ABS*	00000000 __CTOR_END__
0000debc g     F .text	00000034 alt_up_character_lcd_init
00009ae8 g     F .text	000000bc strcmp
0001227c g       *ABS*	00000000 __flash_rodata_start
002f346c g     O .bss	000f4240 l_buf_Denoise
0001227c g       *ABS*	00000000 __DTOR_LIST__
0000f4f0 g     F .text	00000040 alt_up_rs232_open_dev
0000aea4 g     F .text	00000088 __nedf2
0000c574 g     F .text	00000034 alt_irq_init
0000c2d8 g     F .text	00000060 alt_release_fd
0000eb64 g     F .text	00000034 read_data_valid
0000e2d4 g     F .text	00000034 alt_up_character_lcd_cursor_off
00012838 g     O .rodata	00000100 __clz_tab
00016b30 g     O .bss	00000004 _PathLocale
00011b38 g     F .text	00000014 atexit
0000ee24 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00009ba4 g     F .text	00000078 _write_r
00007820 g     F .text	0000001c setlocale
00001acc g     F .text	000000b8 pushbutton_ISR
000001f4 g     F .text	0000018c PS2_ISR
00014bb8 g     O .rwdata	00000004 _impure_ptr
00016b18 g     O .bss	00000004 buf_index_play
00016b48 g     O .bss	00000004 alt_argc
00016b54 g     O .bss	00000004 altera_avalon_timer_ts_base
00011088 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00008490 g     F .text	00000080 __ulp
000098bc g     F .text	00000040 __isinfd
00006b78 g     F .text	00000018 __fp_unlock_all
00014bd0 g     O .rwdata	00000008 alt_fs_list
0000f198 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0000d958 g     F .text	00000070 alt_up_audio_record_l
0000f310 g     F .text	00000048 alt_up_rs232_write_data
0000e50c g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000778c g     F .text	00000010 localeconv
0000d53c g     F .text	0000009c alt_timestamp
00014bf8 g       *ABS*	00000000 _edata
005cfdbc g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000cf40 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000380 g     F .text	00000330 audio_ISR
0010afcc g     O .bss	000f4240 l_buf
0000daac g     F .text	00000070 alt_up_audio_play_l
00009a0c g     F .text	0000007c __swrite
00014bc8 g     O .rwdata	00000004 __malloc_trim_threshold
00011784 g     F .text	00000020 altera_nios2_qsys_irq_init
00011b4c g     F .text	00000038 exit
0000e884 g     F .text	00000074 alt_up_irda_read_data
000075f8 g     F .text	000000c8 _fwalk_reent
00001bd8 g     F .text	000000c0 __floatunsisf
0000ebc4 g     F .text	000000cc alt_up_ps2_init
00008a8c g     F .text	0000018c __mdiff
0000b504 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006ab8 g     F .text	00000004 __sfp_lock_release
0000dfa8 g     F .text	00000078 alt_up_character_lcd_string
0000ea18 g     F .text	00000040 alt_up_irda_open_dev
00012258 g     F .text	00000020 _exit
000098fc g     F .text	00000030 __isnand
00010da0 g     F .text	00000154 alt_alarm_start
00002598 g     F .text	00000098 __muldi3
0000783c g     F .text	00000194 __smakebuf_r
0000edb4 g     F .text	00000070 alt_up_ps2_wait_for_ack
00002f88 g     F .text	00000074 strlen
0000e44c g     F .text	00000040 alt_up_ethernet_open_dev
000113c8 g     F .text	00000188 open
0000afb4 g     F .text	00000088 __gedf2
0000c118 g     F .text	00000040 alt_putchar
00016b1c g     O .bss	00000004 buf_index_record
00011180 g     F .text	00000030 alt_icache_flush_all
0000e5ec g     F .text	000000d8 alt_up_ethernet_phy_reg_write
0000e06c g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00014be8 g     O .rwdata	00000004 alt_priority_mask
00004f00 g     F .text	00000024 __vfprintf_internal
0000f014 g     F .text	0000009c alt_up_ps2_read_fd
004db8ec g     O .bss	000f4240 l_buf_backup
000020a8 g     F .text	00000080 __subdf3
0000e8f8 g     F .text	00000090 alt_up_irda_read_fd
0000836c g     F .text	000000c4 __lo0bits
00014bf0 g     O .rwdata	00000008 alt_alarm_list
00011024 g     F .text	00000064 _do_ctors
0000f244 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00001460 g     F .text	00000260 Mouse_ISR
0000b63c g     F .text	000000fc close
00016b20 g     O .bss	00000001 valid_byte1
0000bbd8 g     F .text	00000080 alt_load
0000e48c g     F .text	0000003c alt_up_ethernet_reg_read
0000d640 g     F .text	0000004c alt_up_audio_enable_read_interrupt
000028d8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00006abc g     F .text	00000004 __sinit_lock_acquire
00008f88 g     F .text	00000100 __multadd
000082d4 g     F .text	00000028 _Bfree
0000d778 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c01774 	movhi	r3,93
 134:	18fecb04 	addi	r3,r3,-1236
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c01774 	movhi	r3,93
 14c:	18fecb04 	addi	r3,r3,-1236
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6b2ee14 	ori	gp,gp,52152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	109ac214 	ori	r2,r2,27400

    movhi r3, %hi(__bss_end)
     1d0:	00c01734 	movhi	r3,92
    ori r3, r3, %lo(__bss_end)
     1d4:	18ff6f14 	ori	r3,r3,64956

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	000bbd80 	call	bbd8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000be140 	call	be14 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * This routine checks which KEY has been pressed. If it is KEY1 or KEY2, it writes this 
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/
void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000317 	ldw	r4,12(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	000ef400 	call	ef40 <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000521e 	bne	r2,zero,36c <PS2_ISR+0x178>
	{
		if(cnt >= 1) cnt++;
     224:	00800074 	movhi	r2,1
     228:	109ac304 	addi	r2,r2,27404
     22c:	10800003 	ldbu	r2,0(r2)
     230:	10803fcc 	andi	r2,r2,255
     234:	1005003a 	cmpeq	r2,r2,zero
     238:	1000081e 	bne	r2,zero,25c <PS2_ISR+0x68>
     23c:	00800074 	movhi	r2,1
     240:	109ac304 	addi	r2,r2,27404
     244:	10800003 	ldbu	r2,0(r2)
     248:	10800044 	addi	r2,r2,1
     24c:	1007883a 	mov	r3,r2
     250:	00800074 	movhi	r2,1
     254:	109ac304 	addi	r2,r2,27404
     258:	10c00005 	stb	r3,0(r2)
		
		/* allows save the last three bytes of data */
		byte1 = byte2;
     25c:	00800074 	movhi	r2,1
     260:	109ac204 	addi	r2,r2,27400
     264:	10c00003 	ldbu	r3,0(r2)
     268:	00800074 	movhi	r2,1
     26c:	109ac284 	addi	r2,r2,27402
     270:	10c00005 	stb	r3,0(r2)
		byte2 = byte3;
     274:	00800074 	movhi	r2,1
     278:	109ac244 	addi	r2,r2,27401
     27c:	10c00003 	ldbu	r3,0(r2)
     280:	00800074 	movhi	r2,1
     284:	109ac204 	addi	r2,r2,27400
     288:	10c00005 	stb	r3,0(r2)
		byte3 = PS2_data;
     28c:	e0fffd03 	ldbu	r3,-12(fp)
     290:	00800074 	movhi	r2,1
     294:	109ac244 	addi	r2,r2,27401
     298:	10c00005 	stb	r3,0(r2)
		if(cnt == 4){
     29c:	00800074 	movhi	r2,1
     2a0:	109ac304 	addi	r2,r2,27404
     2a4:	10800003 	ldbu	r2,0(r2)
     2a8:	10803fcc 	andi	r2,r2,255
     2ac:	10800118 	cmpnei	r2,r2,4
     2b0:	10001a1e 	bne	r2,zero,31c <PS2_ISR+0x128>
			cnt = 1;
     2b4:	00c00074 	movhi	r3,1
     2b8:	18dac304 	addi	r3,r3,27404
     2bc:	00800044 	movi	r2,1
     2c0:	18800005 	stb	r2,0(r3)
			valid_byte1 = byte1;
     2c4:	00800074 	movhi	r2,1
     2c8:	109ac284 	addi	r2,r2,27402
     2cc:	10c00003 	ldbu	r3,0(r2)
     2d0:	00800074 	movhi	r2,1
     2d4:	109ac804 	addi	r2,r2,27424
     2d8:	10c00005 	stb	r3,0(r2)
			valid_byte2 = byte2;
     2dc:	00800074 	movhi	r2,1
     2e0:	109ac204 	addi	r2,r2,27400
     2e4:	10c00003 	ldbu	r3,0(r2)
     2e8:	00800074 	movhi	r2,1
     2ec:	109ac404 	addi	r2,r2,27408
     2f0:	10c00005 	stb	r3,0(r2)
			valid_byte3 = byte3;
     2f4:	00800074 	movhi	r2,1
     2f8:	109ac244 	addi	r2,r2,27401
     2fc:	10c00003 	ldbu	r3,0(r2)
     300:	00800074 	movhi	r2,1
     304:	109ac2c4 	addi	r2,r2,27403
     308:	10c00005 	stb	r3,0(r2)
			flag_mouse = 1;
     30c:	00c00074 	movhi	r3,1
     310:	18dac3c4 	addi	r3,r3,27407
     314:	00800044 	movi	r2,1
     318:	18800005 	stb	r2,0(r3)
		}
		if ( (byte2 == (unsigned char) 0xAA) && (byte3 == (unsigned char) 0x00) ){
     31c:	00800074 	movhi	r2,1
     320:	109ac204 	addi	r2,r2,27400
     324:	10800003 	ldbu	r2,0(r2)
     328:	10803fcc 	andi	r2,r2,255
     32c:	10802a98 	cmpnei	r2,r2,170
     330:	10000e1e 	bne	r2,zero,36c <PS2_ISR+0x178>
     334:	00800074 	movhi	r2,1
     338:	109ac244 	addi	r2,r2,27401
     33c:	10800003 	ldbu	r2,0(r2)
     340:	10803fcc 	andi	r2,r2,255
     344:	1004c03a 	cmpne	r2,r2,zero
     348:	1000081e 	bne	r2,zero,36c <PS2_ISR+0x178>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte_with_ack (up_dev->PS2_dev, (unsigned char) 0xF4);
     34c:	e0bffe17 	ldw	r2,-8(fp)
     350:	11000317 	ldw	r4,12(r2)
     354:	01403d04 	movi	r5,244
     358:	000ee240 	call	ee24 <alt_up_ps2_write_data_byte_with_ack>
			cnt = 1; // enable cnt
     35c:	00c00074 	movhi	r3,1
     360:	18dac304 	addi	r3,r3,27404
     364:	00800044 	movi	r2,1
     368:	18800005 	stb	r2,0(r3)
			
		}
	}
	return;
}
     36c:	e037883a 	mov	sp,fp
     370:	dfc00117 	ldw	ra,4(sp)
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00204 	addi	sp,sp,8
     37c:	f800283a 	ret

00000380 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     380:	defff904 	addi	sp,sp,-28
     384:	dfc00615 	stw	ra,24(sp)
     388:	df000515 	stw	fp,20(sp)
     38c:	df000504 	addi	fp,sp,20
     390:	e13ffe15 	stw	r4,-8(fp)
     394:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     398:	e0bffe17 	ldw	r2,-8(fp)
     39c:	11000517 	ldw	r4,20(r2)
     3a0:	000d7780 	call	d778 <alt_up_audio_read_interrupt_pending>
     3a4:	1005003a 	cmpeq	r2,r2,zero
     3a8:	1000411e 	bne	r2,zero,4b0 <audio_ISR+0x130>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     3ac:	e0bffe17 	ldw	r2,-8(fp)
     3b0:	10800117 	ldw	r2,4(r2)
     3b4:	10800a17 	ldw	r2,40(r2)
     3b8:	1007883a 	mov	r3,r2
     3bc:	00800044 	movi	r2,1
     3c0:	18800035 	stwio	r2,0(r3)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     3c4:	00800074 	movhi	r2,1
     3c8:	109ac704 	addi	r2,r2,27420
     3cc:	10c00017 	ldw	r3,0(r2)
     3d0:	00800134 	movhi	r2,4
     3d4:	10b423c4 	addi	r2,r2,-12145
     3d8:	10c03516 	blt	r2,r3,4b0 <audio_ISR+0x130>
		{
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(r_buf[buf_index_record]), 
     3dc:	e0bffe17 	ldw	r2,-8(fp)
     3e0:	11000517 	ldw	r4,20(r2)
     3e4:	00800074 	movhi	r2,1
     3e8:	109ac704 	addi	r2,r2,27420
     3ec:	10800017 	ldw	r2,0(r2)
     3f0:	1085883a 	add	r2,r2,r2
     3f4:	1085883a 	add	r2,r2,r2
     3f8:	1007883a 	mov	r3,r2
     3fc:	00800074 	movhi	r2,1
     400:	109b6304 	addi	r2,r2,28044
     404:	188b883a 	add	r5,r3,r2
     408:	00800074 	movhi	r2,1
     40c:	109ac704 	addi	r2,r2,27420
     410:	10c00017 	ldw	r3,0(r2)
     414:	00800134 	movhi	r2,4
     418:	10b42404 	addi	r2,r2,-12144
     41c:	10cdc83a 	sub	r6,r2,r3
     420:	000d8e80 	call	d8e8 <alt_up_audio_record_r>
     424:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(l_buf[buf_index_record]), 
     428:	e0bffe17 	ldw	r2,-8(fp)
     42c:	11000517 	ldw	r4,20(r2)
     430:	00800074 	movhi	r2,1
     434:	109ac704 	addi	r2,r2,27420
     438:	10800017 	ldw	r2,0(r2)
     43c:	1085883a 	add	r2,r2,r2
     440:	1085883a 	add	r2,r2,r2
     444:	1007883a 	mov	r3,r2
     448:	00800474 	movhi	r2,17
     44c:	10abf304 	addi	r2,r2,-20532
     450:	188b883a 	add	r5,r3,r2
     454:	e1bffd17 	ldw	r6,-12(fp)
     458:	000d9580 	call	d958 <alt_up_audio_record_l>
				num_read);
			buf_index_record += num_read;
     45c:	00800074 	movhi	r2,1
     460:	109ac704 	addi	r2,r2,27420
     464:	10c00017 	ldw	r3,0(r2)
     468:	e0bffd17 	ldw	r2,-12(fp)
     46c:	1887883a 	add	r3,r3,r2
     470:	00800074 	movhi	r2,1
     474:	109ac704 	addi	r2,r2,27420
     478:	10c00015 	stw	r3,0(r2)

			if (buf_index_record == BUF_SIZE)
     47c:	00800074 	movhi	r2,1
     480:	109ac704 	addi	r2,r2,27420
     484:	10c00017 	ldw	r3,0(r2)
     488:	00800134 	movhi	r2,4
     48c:	10b42404 	addi	r2,r2,-12144
     490:	1880071e 	bne	r3,r2,4b0 <audio_ISR+0x130>
			{
				// done recording
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     494:	e0bffe17 	ldw	r2,-8(fp)
     498:	10800117 	ldw	r2,4(r2)
     49c:	10800a17 	ldw	r2,40(r2)
     4a0:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     4a4:	e0bffe17 	ldw	r2,-8(fp)
     4a8:	11000517 	ldw	r4,20(r2)
     4ac:	000d68c0 	call	d68c <alt_up_audio_disable_read_interrupt>
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     4b0:	e0bffe17 	ldw	r2,-8(fp)
     4b4:	11000517 	ldw	r4,20(r2)
     4b8:	000d7b40 	call	d7b4 <alt_up_audio_write_interrupt_pending>
     4bc:	1005003a 	cmpeq	r2,r2,zero
     4c0:	1000761e 	bne	r2,zero,69c <audio_ISR+0x31c>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[1] on
     4c4:	e0bffe17 	ldw	r2,-8(fp)
     4c8:	10800117 	ldw	r2,4(r2)
     4cc:	10800a17 	ldw	r2,40(r2)
     4d0:	1007883a 	mov	r3,r2
     4d4:	00800084 	movi	r2,2
     4d8:	18800035 	stwio	r2,0(r3)

		// output data until the buffer is empty 
		if (buf_index_play < BUF_SIZE)
     4dc:	00800074 	movhi	r2,1
     4e0:	109ac604 	addi	r2,r2,27416
     4e4:	10c00017 	ldw	r3,0(r2)
     4e8:	00800134 	movhi	r2,4
     4ec:	10b423c4 	addi	r2,r2,-12145
     4f0:	10c06a16 	blt	r2,r3,69c <audio_ISR+0x31c>
		{
			if(!flag_denoise){
     4f4:	00800074 	movhi	r2,1
     4f8:	109ac344 	addi	r2,r2,27405
     4fc:	10800003 	ldbu	r2,0(r2)
     500:	10803fcc 	andi	r2,r2,255
     504:	1004c03a 	cmpne	r2,r2,zero
     508:	1000291e 	bne	r2,zero,5b0 <audio_ISR+0x230>
				num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf[buf_index_play]), 
     50c:	e0bffe17 	ldw	r2,-8(fp)
     510:	11000517 	ldw	r4,20(r2)
     514:	00800074 	movhi	r2,1
     518:	109ac604 	addi	r2,r2,27416
     51c:	10800017 	ldw	r2,0(r2)
     520:	1085883a 	add	r2,r2,r2
     524:	1085883a 	add	r2,r2,r2
     528:	1007883a 	mov	r3,r2
     52c:	00800074 	movhi	r2,1
     530:	109b6304 	addi	r2,r2,28044
     534:	188b883a 	add	r5,r3,r2
     538:	00800074 	movhi	r2,1
     53c:	109ac604 	addi	r2,r2,27416
     540:	10c00017 	ldw	r3,0(r2)
     544:	00800134 	movhi	r2,4
     548:	10b42404 	addi	r2,r2,-12144
     54c:	10cdc83a 	sub	r6,r2,r3
     550:	000da3c0 	call	da3c <alt_up_audio_play_r>
     554:	e0bffc15 	stw	r2,-16(fp)
					BUF_SIZE - buf_index_play);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf[buf_index_play]), 
     558:	e0bffe17 	ldw	r2,-8(fp)
     55c:	11000517 	ldw	r4,20(r2)
     560:	00800074 	movhi	r2,1
     564:	109ac604 	addi	r2,r2,27416
     568:	10800017 	ldw	r2,0(r2)
     56c:	1085883a 	add	r2,r2,r2
     570:	1085883a 	add	r2,r2,r2
     574:	1007883a 	mov	r3,r2
     578:	00800474 	movhi	r2,17
     57c:	10abf304 	addi	r2,r2,-20532
     580:	188b883a 	add	r5,r3,r2
     584:	e1bffc17 	ldw	r6,-16(fp)
     588:	000daac0 	call	daac <alt_up_audio_play_l>
					num_written);
				buf_index_play += num_written;
     58c:	00800074 	movhi	r2,1
     590:	109ac604 	addi	r2,r2,27416
     594:	10c00017 	ldw	r3,0(r2)
     598:	e0bffc17 	ldw	r2,-16(fp)
     59c:	1887883a 	add	r3,r3,r2
     5a0:	00800074 	movhi	r2,1
     5a4:	109ac604 	addi	r2,r2,27416
     5a8:	10c00015 	stw	r3,0(r2)
     5ac:	00002e06 	br	668 <audio_ISR+0x2e8>
			}
			else if(flag_denoise){
     5b0:	00800074 	movhi	r2,1
     5b4:	109ac344 	addi	r2,r2,27405
     5b8:	10800003 	ldbu	r2,0(r2)
     5bc:	10803fcc 	andi	r2,r2,255
     5c0:	1005003a 	cmpeq	r2,r2,zero
     5c4:	1000281e 	bne	r2,zero,668 <audio_ISR+0x2e8>
				num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf_Denoise[buf_index_play]), 
     5c8:	e0bffe17 	ldw	r2,-8(fp)
     5cc:	11000517 	ldw	r4,20(r2)
     5d0:	00800074 	movhi	r2,1
     5d4:	109ac604 	addi	r2,r2,27416
     5d8:	10800017 	ldw	r2,0(r2)
     5dc:	1085883a 	add	r2,r2,r2
     5e0:	1085883a 	add	r2,r2,r2
     5e4:	1007883a 	mov	r3,r2
     5e8:	00800834 	movhi	r2,32
     5ec:	10bc8b04 	addi	r2,r2,-3540
     5f0:	188b883a 	add	r5,r3,r2
     5f4:	00800074 	movhi	r2,1
     5f8:	109ac604 	addi	r2,r2,27416
     5fc:	10c00017 	ldw	r3,0(r2)
     600:	00800134 	movhi	r2,4
     604:	10b42404 	addi	r2,r2,-12144
     608:	10cdc83a 	sub	r6,r2,r3
     60c:	000da3c0 	call	da3c <alt_up_audio_play_r>
     610:	e0bffc15 	stw	r2,-16(fp)
					BUF_SIZE - buf_index_play);
				/* assume that we can write the same # words to the left and right */
				(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf_Denoise[buf_index_play]), 
     614:	e0bffe17 	ldw	r2,-8(fp)
     618:	11000517 	ldw	r4,20(r2)
     61c:	00800074 	movhi	r2,1
     620:	109ac604 	addi	r2,r2,27416
     624:	10800017 	ldw	r2,0(r2)
     628:	1085883a 	add	r2,r2,r2
     62c:	1085883a 	add	r2,r2,r2
     630:	1007883a 	mov	r3,r2
     634:	00800bf4 	movhi	r2,47
     638:	108d1b04 	addi	r2,r2,13420
     63c:	188b883a 	add	r5,r3,r2
     640:	e1bffc17 	ldw	r6,-16(fp)
     644:	000daac0 	call	daac <alt_up_audio_play_l>
					num_written);
				buf_index_play += num_written;
     648:	00800074 	movhi	r2,1
     64c:	109ac604 	addi	r2,r2,27416
     650:	10c00017 	ldw	r3,0(r2)
     654:	e0bffc17 	ldw	r2,-16(fp)
     658:	1887883a 	add	r3,r3,r2
     65c:	00800074 	movhi	r2,1
     660:	109ac604 	addi	r2,r2,27416
     664:	10c00015 	stw	r3,0(r2)
			}
			if (buf_index_play == BUF_SIZE)
     668:	00800074 	movhi	r2,1
     66c:	109ac604 	addi	r2,r2,27416
     670:	10c00017 	ldw	r3,0(r2)
     674:	00800134 	movhi	r2,4
     678:	10b42404 	addi	r2,r2,-12144
     67c:	1880071e 	bne	r3,r2,69c <audio_ISR+0x31c>
			{
				// done playback
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     680:	e0bffe17 	ldw	r2,-8(fp)
     684:	10800117 	ldw	r2,4(r2)
     688:	10800a17 	ldw	r2,40(r2)
     68c:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     690:	e0bffe17 	ldw	r2,-8(fp)
     694:	11000517 	ldw	r4,20(r2)
     698:	000d7280 	call	d728 <alt_up_audio_disable_write_interrupt>
			}
		}
	}
	return;
}
     69c:	e037883a 	mov	sp,fp
     6a0:	dfc00117 	ldw	ra,4(sp)
     6a4:	df000017 	ldw	fp,0(sp)
     6a8:	dec00204 	addi	sp,sp,8
     6ac:	f800283a 	ret

000006b0 <filter>:
-0.0019989013671875                                             
};

extern double mem[64];

double filter(double in){
     6b0:	defff904 	addi	sp,sp,-28
     6b4:	dfc00615 	stw	ra,24(sp)
     6b8:	df000515 	stw	fp,20(sp)
     6bc:	df000504 	addi	fp,sp,20
     6c0:	e13ffe15 	stw	r4,-8(fp)
     6c4:	e17fff15 	stw	r5,-4(fp)
    int i;
    for (i=63;i>0;i--){
     6c8:	00800fc4 	movi	r2,63
     6cc:	e0bffd15 	stw	r2,-12(fp)
     6d0:	00001206 	br	71c <filter+0x6c>
        mem[i]=mem[i-1];
     6d4:	e1bffd17 	ldw	r6,-12(fp)
     6d8:	e0bffd17 	ldw	r2,-12(fp)
     6dc:	10bfffc4 	addi	r2,r2,-1
     6e0:	00c00074 	movhi	r3,1
     6e4:	18dad904 	addi	r3,r3,27492
     6e8:	100490fa 	slli	r2,r2,3
     6ec:	10c9883a 	add	r4,r2,r3
     6f0:	20800017 	ldw	r2,0(r4)
     6f4:	20c00117 	ldw	r3,4(r4)
     6f8:	01400074 	movhi	r5,1
     6fc:	295ad904 	addi	r5,r5,27492
     700:	300890fa 	slli	r4,r6,3
     704:	2149883a 	add	r4,r4,r5
     708:	20800015 	stw	r2,0(r4)
     70c:	20c00115 	stw	r3,4(r4)

extern double mem[64];

double filter(double in){
    int i;
    for (i=63;i>0;i--){
     710:	e0bffd17 	ldw	r2,-12(fp)
     714:	10bfffc4 	addi	r2,r2,-1
     718:	e0bffd15 	stw	r2,-12(fp)
     71c:	e0bffd17 	ldw	r2,-12(fp)
     720:	10800048 	cmpgei	r2,r2,1
     724:	103feb1e 	bne	r2,zero,6d4 <filter+0x24>
        mem[i]=mem[i-1];
    }
    mem[0]=in;
     728:	00800074 	movhi	r2,1
     72c:	109ad904 	addi	r2,r2,27492
     730:	e0fffe17 	ldw	r3,-8(fp)
     734:	10c00015 	stw	r3,0(r2)
     738:	e0ffff17 	ldw	r3,-4(fp)
     73c:	10c00115 	stw	r3,4(r2)
    double res=0;
     740:	e03ffb15 	stw	zero,-20(fp)
     744:	e03ffc15 	stw	zero,-16(fp)
    for(i=0;i<64;i++){
     748:	e03ffd15 	stw	zero,-12(fp)
     74c:	00002306 	br	7dc <filter+0x12c>
        res+=mem[i]*coef[i];
     750:	e0bffd17 	ldw	r2,-12(fp)
     754:	00c00074 	movhi	r3,1
     758:	18dad904 	addi	r3,r3,27492
     75c:	100490fa 	slli	r2,r2,3
     760:	10c5883a 	add	r2,r2,r3
     764:	11400017 	ldw	r5,0(r2)
     768:	11800117 	ldw	r6,4(r2)
     76c:	e0bffd17 	ldw	r2,-12(fp)
     770:	00c00074 	movhi	r3,1
     774:	18c89f04 	addi	r3,r3,8828
     778:	100490fa 	slli	r2,r2,3
     77c:	10c9883a 	add	r4,r2,r3
     780:	20800017 	ldw	r2,0(r4)
     784:	20c00117 	ldw	r3,4(r4)
     788:	2809883a 	mov	r4,r5
     78c:	300b883a 	mov	r5,r6
     790:	100d883a 	mov	r6,r2
     794:	180f883a 	mov	r7,r3
     798:	000219c0 	call	219c <__muldf3>
     79c:	1009883a 	mov	r4,r2
     7a0:	180b883a 	mov	r5,r3
     7a4:	2005883a 	mov	r2,r4
     7a8:	2807883a 	mov	r3,r5
     7ac:	e13ffb17 	ldw	r4,-20(fp)
     7b0:	e17ffc17 	ldw	r5,-16(fp)
     7b4:	100d883a 	mov	r6,r2
     7b8:	180f883a 	mov	r7,r3
     7bc:	00021280 	call	2128 <__adddf3>
     7c0:	1009883a 	mov	r4,r2
     7c4:	180b883a 	mov	r5,r3
     7c8:	e13ffb15 	stw	r4,-20(fp)
     7cc:	e17ffc15 	stw	r5,-16(fp)
    for (i=63;i>0;i--){
        mem[i]=mem[i-1];
    }
    mem[0]=in;
    double res=0;
    for(i=0;i<64;i++){
     7d0:	e0bffd17 	ldw	r2,-12(fp)
     7d4:	10800044 	addi	r2,r2,1
     7d8:	e0bffd15 	stw	r2,-12(fp)
     7dc:	e0bffd17 	ldw	r2,-12(fp)
     7e0:	10801010 	cmplti	r2,r2,64
     7e4:	103fda1e 	bne	r2,zero,750 <filter+0xa0>
        res+=mem[i]*coef[i];
    }
    return res;
     7e8:	e17ffb17 	ldw	r5,-20(fp)
     7ec:	e1bffc17 	ldw	r6,-16(fp)
     7f0:	2807883a 	mov	r3,r5
     7f4:	3009883a 	mov	r4,r6
     7f8:	1805883a 	mov	r2,r3
     7fc:	2007883a 	mov	r3,r4
     800:	e037883a 	mov	sp,fp
     804:	dfc00117 	ldw	ra,4(sp)
     808:	df000017 	ldw	fp,0(sp)
     80c:	dec00204 	addi	sp,sp,8
     810:	f800283a 	ret

00000814 <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     814:	defffb04 	addi	sp,sp,-20
     818:	dfc00415 	stw	ra,16(sp)
     81c:	df000315 	stw	fp,12(sp)
     820:	df000304 	addi	fp,sp,12
     824:	e13ffe15 	stw	r4,-8(fp)
     828:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     82c:	00840034 	movhi	r2,4096
     830:	10880004 	addi	r2,r2,8192
     834:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     838:	e0bffd17 	ldw	r2,-12(fp)
     83c:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     840:	00c00074 	movhi	r3,1
     844:	18dac504 	addi	r3,r3,27412
     848:	00800044 	movi	r2,1
     84c:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     850:	e0bffe17 	ldw	r2,-8(fp)
     854:	11000417 	ldw	r4,16(r2)
     858:	017fffc4 	movi	r5,-1
     85c:	000e1940 	call	e194 <alt_up_character_lcd_shift_display>

	return;
}
     860:	e037883a 	mov	sp,fp
     864:	dfc00117 	ldw	ra,4(sp)
     868:	df000017 	ldw	fp,0(sp)
     86c:	dec00204 	addi	sp,sp,8
     870:	f800283a 	ret

00000874 <main>:
 * 	   interrupts
 * 	6. The speed of scrolling the LCD display and of refreshing the VGA screen
 * 	   are controlled by interrupts from the interval timer
********************************************************************************/
int main(void)
{
     874:	deffa804 	addi	sp,sp,-352
     878:	dfc05715 	stw	ra,348(sp)
     87c:	df005615 	stw	fp,344(sp)
     880:	df005604 	addi	fp,sp,344
	signed short pre_x_axis_mouse, pre_y_axis_mouse;
	x_axis_mouse = 160;
     884:	00802804 	movi	r2,160
     888:	d0a7db0d 	sth	r2,-24724(gp)
	y_axis_mouse = 120;
     88c:	00801e04 	movi	r2,120
     890:	d0a7da8d 	sth	r2,-24726(gp)
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address
     894:	00840034 	movhi	r2,4096
     898:	10880004 	addi	r2,r2,8192
     89c:	e0bfc815 	stw	r2,-224(fp)

	/* initialize some variables */
	valid_byte1 = 0; valid_byte2 = 0; valid_byte3 = 0; 			// used to hold PS/2 data
     8a0:	00800074 	movhi	r2,1
     8a4:	109ac804 	addi	r2,r2,27424
     8a8:	10000005 	stb	zero,0(r2)
     8ac:	00800074 	movhi	r2,1
     8b0:	109ac404 	addi	r2,r2,27408
     8b4:	10000005 	stb	zero,0(r2)
     8b8:	00800074 	movhi	r2,1
     8bc:	109ac2c4 	addi	r2,r2,27403
     8c0:	10000005 	stb	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     8c4:	00800074 	movhi	r2,1
     8c8:	109ac504 	addi	r2,r2,27412
     8cc:	10000015 	stw	zero,0(r2)
	int record_box_x1, record_box_x2, record_box_y1, record_box_y2;
	int play_box_x1, play_box_x2, play_box_y1, play_box_y2;
	int Denoise_box_x1, Denoise_box_x2, Denoise_box_y1, Denoise_box_y2;

	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     8d0:	008025b4 	movhi	r2,150
     8d4:	e0bfad15 	stw	r2,-332(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     8d8:	e0bfc817 	ldw	r2,-224(fp)
     8dc:	10c00204 	addi	r3,r2,8
     8e0:	e0bfad17 	ldw	r2,-332(fp)
     8e4:	10bfffcc 	andi	r2,r2,65535
     8e8:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     8ec:	e0bfc817 	ldw	r2,-224(fp)
     8f0:	10c00304 	addi	r3,r2,12
     8f4:	e0bfad17 	ldw	r2,-332(fp)
     8f8:	1005d43a 	srai	r2,r2,16
     8fc:	10bfffcc 	andi	r2,r2,65535
     900:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1 
     904:	e0bfc817 	ldw	r2,-224(fp)
     908:	10c00104 	addi	r3,r2,4
     90c:	008001c4 	movi	r2,7
     910:	18800015 	stw	r2,0(r3)
	
	// open the pushbuttom KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     914:	01000074 	movhi	r4,1
     918:	21091f04 	addi	r4,r4,9340
     91c:	000ea580 	call	ea58 <alt_up_parallel_port_open_dev>
     920:	e0bfd015 	stw	r2,-192(fp)
	if ( KEY_dev == NULL)
     924:	e0bfd017 	ldw	r2,-192(fp)
     928:	1004c03a 	cmpne	r2,r2,zero
     92c:	1000061e 	bne	r2,zero,948 <main+0xd4>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     930:	01000074 	movhi	r4,1
     934:	21092404 	addi	r4,r4,9360
     938:	000bec00 	call	bec0 <alt_printf>
		return -1;
     93c:	00bfffc4 	movi	r2,-1
     940:	e0bfff15 	stw	r2,-4(fp)
     944:	00020306 	br	1154 <main+0x8e0>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     948:	01000074 	movhi	r4,1
     94c:	21093004 	addi	r4,r4,9408
     950:	000bec00 	call	bec0 <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     954:	00c00834 	movhi	r3,32
     958:	18fc8304 	addi	r3,r3,-3572
     95c:	e0bfd017 	ldw	r2,-192(fp)
     960:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1 
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     964:	e0bfd017 	ldw	r2,-192(fp)
     968:	10800a17 	ldw	r2,40(r2)
     96c:	10800204 	addi	r2,r2,8
     970:	1007883a 	mov	r3,r2
     974:	00800384 	movi	r2,14
     978:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     97c:	01000074 	movhi	r4,1
     980:	21093804 	addi	r4,r4,9440
     984:	000ea580 	call	ea58 <alt_up_parallel_port_open_dev>
     988:	e0bfcf15 	stw	r2,-196(fp)
	if ( green_LEDs_dev == NULL)
     98c:	e0bfcf17 	ldw	r2,-196(fp)
     990:	1004c03a 	cmpne	r2,r2,zero
     994:	1000061e 	bne	r2,zero,9b0 <main+0x13c>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     998:	01000074 	movhi	r4,1
     99c:	21093c04 	addi	r4,r4,9456
     9a0:	000bec00 	call	bec0 <alt_printf>
		return -1;
     9a4:	00bfffc4 	movi	r2,-1
     9a8:	e0bfff15 	stw	r2,-4(fp)
     9ac:	0001e906 	br	1154 <main+0x8e0>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     9b0:	01000074 	movhi	r4,1
     9b4:	21094704 	addi	r4,r4,9500
     9b8:	000bec00 	call	bec0 <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     9bc:	00c00834 	movhi	r3,32
     9c0:	18fc8304 	addi	r3,r3,-3572
     9c4:	e0bfcf17 	ldw	r2,-196(fp)
     9c8:	18800115 	stw	r2,4(r3)
	}

	// open the red LEDs parallel port
	red_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Red_LEDs");
     9cc:	01000074 	movhi	r4,1
     9d0:	21094e04 	addi	r4,r4,9528
     9d4:	000ea580 	call	ea58 <alt_up_parallel_port_open_dev>
     9d8:	e0bfce15 	stw	r2,-200(fp)
	if ( red_LEDs_dev == NULL)
     9dc:	e0bfce17 	ldw	r2,-200(fp)
     9e0:	1004c03a 	cmpne	r2,r2,zero
     9e4:	1000061e 	bne	r2,zero,a00 <main+0x18c>
	{
		alt_printf ("Error: could not open red LEDs device\n");
     9e8:	01000074 	movhi	r4,1
     9ec:	21095204 	addi	r4,r4,9544
     9f0:	000bec00 	call	bec0 <alt_printf>
		return -1;
     9f4:	00bfffc4 	movi	r2,-1
     9f8:	e0bfff15 	stw	r2,-4(fp)
     9fc:	0001d506 	br	1154 <main+0x8e0>
	}
	else
	{
		alt_printf ("Opened red LEDs device\n");
     a00:	01000074 	movhi	r4,1
     a04:	21095c04 	addi	r4,r4,9584
     a08:	000bec00 	call	bec0 <alt_printf>
		up_dev.red_LEDs_dev = red_LEDs_dev;	// store for use by ISRs
     a0c:	00c00834 	movhi	r3,32
     a10:	18fc8304 	addi	r3,r3,-3572
     a14:	e0bfce17 	ldw	r2,-200(fp)
     a18:	18800215 	stw	r2,8(r3)
	}


	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     a1c:	01000074 	movhi	r4,1
     a20:	21096204 	addi	r4,r4,9608
     a24:	000f1580 	call	f158 <alt_up_ps2_open_dev>
     a28:	e0bfcd15 	stw	r2,-204(fp)
	if ( PS2_dev == NULL)
     a2c:	e0bfcd17 	ldw	r2,-204(fp)
     a30:	1004c03a 	cmpne	r2,r2,zero
     a34:	1000061e 	bne	r2,zero,a50 <main+0x1dc>
	{
		alt_printf ("Error: could not open PS2 device\n");
     a38:	01000074 	movhi	r4,1
     a3c:	21096604 	addi	r4,r4,9624
     a40:	000bec00 	call	bec0 <alt_printf>
		return -1;
     a44:	00bfffc4 	movi	r2,-1
     a48:	e0bfff15 	stw	r2,-4(fp)
     a4c:	0001c106 	br	1154 <main+0x8e0>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     a50:	01000074 	movhi	r4,1
     a54:	21096f04 	addi	r4,r4,9660
     a58:	000bec00 	call	bec0 <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     a5c:	00c00834 	movhi	r3,32
     a60:	18fc8304 	addi	r3,r3,-3572
     a64:	e0bfcd17 	ldw	r2,-204(fp)
     a68:	18800315 	stw	r2,12(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     a6c:	e13fcd17 	ldw	r4,-204(fp)
     a70:	01403fc4 	movi	r5,255
     a74:	000ed3c0 	call	ed3c <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     a78:	e13fcd17 	ldw	r4,-204(fp)
     a7c:	000ec900 	call	ec90 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     a80:	01000074 	movhi	r4,1
     a84:	21097404 	addi	r4,r4,9680
     a88:	000d6000 	call	d600 <alt_up_audio_open_dev>
     a8c:	e0bfcb15 	stw	r2,-212(fp)
	if ( audio_dev == NULL)
     a90:	e0bfcb17 	ldw	r2,-212(fp)
     a94:	1004c03a 	cmpne	r2,r2,zero
     a98:	1000061e 	bne	r2,zero,ab4 <main+0x240>
	{
		alt_printf ("Error: could not open audio device\n");
     a9c:	01000074 	movhi	r4,1
     aa0:	21097704 	addi	r4,r4,9692
     aa4:	000bec00 	call	bec0 <alt_printf>
		return -1;
     aa8:	00bfffc4 	movi	r2,-1
     aac:	e0bfff15 	stw	r2,-4(fp)
     ab0:	0001a806 	br	1154 <main+0x8e0>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     ab4:	01000074 	movhi	r4,1
     ab8:	21098004 	addi	r4,r4,9728
     abc:	000bec00 	call	bec0 <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     ac0:	00c00834 	movhi	r3,32
     ac4:	18fc8304 	addi	r3,r3,-3572
     ac8:	e0bfcb17 	ldw	r2,-212(fp)
     acc:	18800515 	stw	r2,20(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     ad0:	01000074 	movhi	r4,1
     ad4:	21098604 	addi	r4,r4,9752
     ad8:	000def00 	call	def0 <alt_up_character_lcd_open_dev>
     adc:	e0bfcc15 	stw	r2,-208(fp)
	if ( lcd_dev == NULL)
     ae0:	e0bfcc17 	ldw	r2,-208(fp)
     ae4:	1004c03a 	cmpne	r2,r2,zero
     ae8:	1000061e 	bne	r2,zero,b04 <main+0x290>
	{
		alt_printf ("Error: could not open character LCD device\n");
     aec:	01000074 	movhi	r4,1
     af0:	21098b04 	addi	r4,r4,9772
     af4:	000bec00 	call	bec0 <alt_printf>
		return -1;
     af8:	00bfffc4 	movi	r2,-1
     afc:	e0bfff15 	stw	r2,-4(fp)
     b00:	00019406 	br	1154 <main+0x8e0>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     b04:	01000074 	movhi	r4,1
     b08:	21099604 	addi	r4,r4,9816
     b0c:	000bec00 	call	bec0 <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     b10:	00c00834 	movhi	r3,32
     b14:	18fc8304 	addi	r3,r3,-3572
     b18:	e0bfcc17 	ldw	r2,-208(fp)
     b1c:	18800415 	stw	r2,16(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passsing a pointer to up_dev to each ISR (using the context argument) as 
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     b20:	01800034 	movhi	r6,0
     b24:	31820504 	addi	r6,r6,2068
     b28:	0009883a 	mov	r4,zero
     b2c:	01400834 	movhi	r5,32
     b30:	297c8304 	addi	r5,r5,-3572
     b34:	000b8f80 	call	b8f8 <alt_irq_register>
	alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
     b38:	01800034 	movhi	r6,0
     b3c:	3186b304 	addi	r6,r6,6860
     b40:	01000044 	movi	r4,1
     b44:	01400834 	movhi	r5,32
     b48:	297c8304 	addi	r5,r5,-3572
     b4c:	000b8f80 	call	b8f8 <alt_irq_register>
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     b50:	01800034 	movhi	r6,0
     b54:	3180e004 	addi	r6,r6,896
     b58:	01000184 	movi	r4,6
     b5c:	01400834 	movhi	r5,32
     b60:	297c8304 	addi	r5,r5,-3572
     b64:	000b8f80 	call	b8f8 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     b68:	01800034 	movhi	r6,0
     b6c:	31807d04 	addi	r6,r6,500
     b70:	010001c4 	movi	r4,7
     b74:	01400834 	movhi	r5,32
     b78:	297c8304 	addi	r5,r5,-3572
     b7c:	000b8f80 	call	b8f8 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     b80:	00c00074 	movhi	r3,1
     b84:	18c9d004 	addi	r3,r3,10048
     b88:	18800017 	ldw	r2,0(r3)
     b8c:	e0bfd415 	stw	r2,-176(fp)
     b90:	18800117 	ldw	r2,4(r3)
     b94:	e0bfd515 	stw	r2,-172(fp)
     b98:	18800217 	ldw	r2,8(r3)
     b9c:	e0bfd615 	stw	r2,-168(fp)
     ba0:	18800317 	ldw	r2,12(r3)
     ba4:	e0bfd715 	stw	r2,-164(fp)
     ba8:	18800417 	ldw	r2,16(r3)
     bac:	e0bfd815 	stw	r2,-160(fp)
     bb0:	18800517 	ldw	r2,20(r3)
     bb4:	e0bfd915 	stw	r2,-156(fp)
     bb8:	18800617 	ldw	r2,24(r3)
     bbc:	e0bfda15 	stw	r2,-152(fp)
     bc0:	18800717 	ldw	r2,28(r3)
     bc4:	e0bfdb15 	stw	r2,-148(fp)
     bc8:	18800817 	ldw	r2,32(r3)
     bcc:	e0bfdc15 	stw	r2,-144(fp)
     bd0:	1880090b 	ldhu	r2,36(r3)
     bd4:	e0bfdd0d 	sth	r2,-140(fp)
     bd8:	e13fdd84 	addi	r4,fp,-138
     bdc:	01800a84 	movi	r6,42
     be0:	000b883a 	mov	r5,zero
     be4:	0002dc40 	call	2dc4 <memset>
	char text_top_VGA[20] = "Altera DE2\0";
     be8:	00c00074 	movhi	r3,1
     bec:	18c9e404 	addi	r3,r3,10128
     bf0:	18800017 	ldw	r2,0(r3)
     bf4:	e0bfe815 	stw	r2,-96(fp)
     bf8:	18800117 	ldw	r2,4(r3)
     bfc:	e0bfe915 	stw	r2,-92(fp)
     c00:	18800217 	ldw	r2,8(r3)
     c04:	e0bfea15 	stw	r2,-88(fp)
     c08:	e03feb15 	stw	zero,-84(fp)
     c0c:	e03fec15 	stw	zero,-80(fp)
	char text_bottom_VGA[20] = "Media Computer\0";
     c10:	00c00074 	movhi	r3,1
     c14:	18c9e904 	addi	r3,r3,10148
     c18:	18800017 	ldw	r2,0(r3)
     c1c:	e0bfed15 	stw	r2,-76(fp)
     c20:	18800117 	ldw	r2,4(r3)
     c24:	e0bfee15 	stw	r2,-72(fp)
     c28:	18800217 	ldw	r2,8(r3)
     c2c:	e0bfef15 	stw	r2,-68(fp)
     c30:	18800317 	ldw	r2,12(r3)
     c34:	e0bff015 	stw	r2,-64(fp)
     c38:	e03ff115 	stw	zero,-60(fp)
	char text_ALTERA[10] = "SAEED\0";
     c3c:	00c00074 	movhi	r3,1
     c40:	18c9ee04 	addi	r3,r3,10168
     c44:	18800017 	ldw	r2,0(r3)
     c48:	e0bff215 	stw	r2,-56(fp)
     c4c:	1880010b 	ldhu	r2,4(r3)
     c50:	e0bff30d 	sth	r2,-52(fp)
     c54:	18800183 	ldbu	r2,6(r3)
     c58:	e0bff385 	stb	r2,-50(fp)
     c5c:	e03ff3c5 	stb	zero,-49(fp)
     c60:	e03ff405 	stb	zero,-48(fp)
     c64:	e03ff445 	stb	zero,-47(fp)
	char text_erase[10] = "      \0";
     c68:	00c00074 	movhi	r3,1
     c6c:	18c9f104 	addi	r3,r3,10180
     c70:	1880000b 	ldhu	r2,0(r3)
     c74:	e0bff48d 	sth	r2,-46(fp)
     c78:	1880008b 	ldhu	r2,2(r3)
     c7c:	e0bff50d 	sth	r2,-44(fp)
     c80:	1880010b 	ldhu	r2,4(r3)
     c84:	e0bff58d 	sth	r2,-42(fp)
     c88:	1880018b 	ldhu	r2,6(r3)
     c8c:	e0bff60d 	sth	r2,-40(fp)
     c90:	e03ff68d 	sth	zero,-38(fp)
	char text_Denoise[10] = "Denoise\0";
     c94:	00c00074 	movhi	r3,1
     c98:	18c9f404 	addi	r3,r3,10192
     c9c:	18800017 	ldw	r2,0(r3)
     ca0:	e0bff715 	stw	r2,-36(fp)
     ca4:	18800117 	ldw	r2,4(r3)
     ca8:	e0bff815 	stw	r2,-32(fp)
     cac:	18800203 	ldbu	r2,8(r3)
     cb0:	e0bff905 	stb	r2,-28(fp)
     cb4:	e03ff945 	stb	zero,-27(fp)
	char text_play[10] = "Play\0";
     cb8:	00c00074 	movhi	r3,1
     cbc:	18c9f704 	addi	r3,r3,10204
     cc0:	1880000b 	ldhu	r2,0(r3)
     cc4:	e0bff98d 	sth	r2,-26(fp)
     cc8:	1880008b 	ldhu	r2,2(r3)
     ccc:	e0bffa0d 	sth	r2,-24(fp)
     cd0:	1880010b 	ldhu	r2,4(r3)
     cd4:	e0bffa8d 	sth	r2,-22(fp)
     cd8:	e03ffb0d 	sth	zero,-20(fp)
     cdc:	e03ffb8d 	sth	zero,-18(fp)
	char text_record[10] = "Record\0";
     ce0:	00c00074 	movhi	r3,1
     ce4:	18c9fa04 	addi	r3,r3,10216
     ce8:	18800017 	ldw	r2,0(r3)
     cec:	e0bffc15 	stw	r2,-16(fp)
     cf0:	18800117 	ldw	r2,4(r3)
     cf4:	e0bffd15 	stw	r2,-12(fp)
     cf8:	e03ffe0d 	sth	zero,-8(fp)


	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     cfc:	e13fcc17 	ldw	r4,-208(fp)
     d00:	000b883a 	mov	r5,zero
     d04:	000d883a 	mov	r6,zero
     d08:	000e06c0 	call	e06c <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     d0c:	e17fd404 	addi	r5,fp,-176
     d10:	e13fcc17 	ldw	r4,-208(fp)
     d14:	000dfa80 	call	dfa8 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor 
     d18:	e13fcc17 	ldw	r4,-208(fp)
     d1c:	000e2d40 	call	e2d4 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     d20:	01000074 	movhi	r4,1
     d24:	21099e04 	addi	r4,r4,9848
     d28:	000f8340 	call	f834 <alt_up_pixel_buffer_dma_open_dev>
     d2c:	e0bfc915 	stw	r2,-220(fp)
	if ( pixel_buffer_dev == NULL)
     d30:	e0bfc917 	ldw	r2,-220(fp)
     d34:	1004c03a 	cmpne	r2,r2,zero
     d38:	1000041e 	bne	r2,zero,d4c <main+0x4d8>
		alt_printf ("Error: could not open pixel buffer device\n");
     d3c:	01000074 	movhi	r4,1
     d40:	2109a404 	addi	r4,r4,9872
     d44:	000bec00 	call	bec0 <alt_printf>
     d48:	00000306 	br	d58 <main+0x4e4>
	else
		alt_printf ("Opened pixel buffer device\n");
     d4c:	01000074 	movhi	r4,1
     d50:	2109af04 	addi	r4,r4,9916
     d54:	000bec00 	call	bec0 <alt_printf>

	/* the following variables give the size of the pixel buffer */
	screen_x = 319; screen_y = 239;
     d58:	00804fc4 	movi	r2,319
     d5c:	e0bfbe15 	stw	r2,-264(fp)
     d60:	00803bc4 	movi	r2,239
     d64:	e0bfbd15 	stw	r2,-268(fp)
	color = 0x5550;		// a dark grey color
     d68:	00955404 	movi	r2,21840
     d6c:	e0bfba0d 	sth	r2,-280(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
     d70:	e0ffba0f 	ldh	r3,-280(fp)
     d74:	e0bfbd17 	ldw	r2,-268(fp)
     d78:	d8800015 	stw	r2,0(sp)
     d7c:	d8c00115 	stw	r3,4(sp)
     d80:	d8000215 	stw	zero,8(sp)
     d84:	e13fc917 	ldw	r4,-220(fp)
     d88:	000b883a 	mov	r5,zero
     d8c:	000d883a 	mov	r6,zero
     d90:	e1ffbe17 	ldw	r7,-264(fp)
     d94:	000fc5c0 	call	fc5c <alt_up_pixel_buffer_dma_draw_box>
	// color = 0x187F;		// a medium blue color
	// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4, 
	// 	blue_y2 * 4, color, 0);

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     d98:	01000074 	movhi	r4,1
     d9c:	2109b604 	addi	r4,r4,9944
     da0:	000f5b40 	call	f5b4 <alt_up_char_buffer_open_dev>
     da4:	e0bfca15 	stw	r2,-216(fp)
	if ( char_buffer_dev == NULL)
     da8:	e0bfca17 	ldw	r2,-216(fp)
     dac:	1004c03a 	cmpne	r2,r2,zero
     db0:	1000041e 	bne	r2,zero,dc4 <main+0x550>
		alt_printf ("Error: could not open character buffer device\n");
     db4:	01000074 	movhi	r4,1
     db8:	2109bc04 	addi	r4,r4,9968
     dbc:	000bec00 	call	bec0 <alt_printf>
     dc0:	00000306 	br	dd0 <main+0x55c>
	else
		alt_printf ("Opened character buffer device\n");
     dc4:	01000074 	movhi	r4,1
     dc8:	2109c804 	addi	r4,r4,10016
     dcc:	000bec00 	call	bec0 <alt_printf>




	// Place your code here
	record_box_x1 = 35; record_box_x2 = 100; record_box_y1 = 92; record_box_y2 = 136;
     dd0:	008008c4 	movi	r2,35
     dd4:	e0bfb915 	stw	r2,-284(fp)
     dd8:	00801904 	movi	r2,100
     ddc:	e0bfb815 	stw	r2,-288(fp)
     de0:	00801704 	movi	r2,92
     de4:	e0bfb715 	stw	r2,-292(fp)
     de8:	00802204 	movi	r2,136
     dec:	e0bfb615 	stw	r2,-296(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x6F00;		// a bad yellow color
     df0:	009bc004 	movi	r2,28416
     df4:	e0bfba0d 	sth	r2,-280(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, record_box_x1, record_box_y1,
     df8:	e0ffba0f 	ldh	r3,-280(fp)
     dfc:	e0bfb617 	ldw	r2,-296(fp)
     e00:	d8800015 	stw	r2,0(sp)
     e04:	d8c00115 	stw	r3,4(sp)
     e08:	d8000215 	stw	zero,8(sp)
     e0c:	e13fc917 	ldw	r4,-220(fp)
     e10:	e17fb917 	ldw	r5,-284(fp)
     e14:	e1bfb717 	ldw	r6,-292(fp)
     e18:	e1ffb817 	ldw	r7,-288(fp)
     e1c:	000fc5c0 	call	fc5c <alt_up_pixel_buffer_dma_draw_box>
									  record_box_x2, record_box_y2, color, 0);
	play_box_x1 = 125; play_box_x2 = 190; play_box_y1 = 92; play_box_y2 = 136;
     e20:	00801f44 	movi	r2,125
     e24:	e0bfb515 	stw	r2,-300(fp)
     e28:	00802f84 	movi	r2,190
     e2c:	e0bfb415 	stw	r2,-304(fp)
     e30:	00801704 	movi	r2,92
     e34:	e0bfb315 	stw	r2,-308(fp)
     e38:	00802204 	movi	r2,136
     e3c:	e0bfb215 	stw	r2,-312(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, play_box_x1, play_box_y1,
     e40:	e0ffba0f 	ldh	r3,-280(fp)
     e44:	e0bfb217 	ldw	r2,-312(fp)
     e48:	d8800015 	stw	r2,0(sp)
     e4c:	d8c00115 	stw	r3,4(sp)
     e50:	d8000215 	stw	zero,8(sp)
     e54:	e13fc917 	ldw	r4,-220(fp)
     e58:	e17fb517 	ldw	r5,-300(fp)
     e5c:	e1bfb317 	ldw	r6,-308(fp)
     e60:	e1ffb417 	ldw	r7,-304(fp)
     e64:	000fc5c0 	call	fc5c <alt_up_pixel_buffer_dma_draw_box>
									  play_box_x2, play_box_y2, color, 0);
	Denoise_box_x1 = 215; Denoise_box_x2 = 280; Denoise_box_y1 = 92; Denoise_box_y2 = 136;
     e68:	008035c4 	movi	r2,215
     e6c:	e0bfb115 	stw	r2,-316(fp)
     e70:	00804604 	movi	r2,280
     e74:	e0bfb015 	stw	r2,-320(fp)
     e78:	00801704 	movi	r2,92
     e7c:	e0bfaf15 	stw	r2,-324(fp)
     e80:	00802204 	movi	r2,136
     e84:	e0bfae15 	stw	r2,-328(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, Denoise_box_x1, Denoise_box_y1,
     e88:	e0ffba0f 	ldh	r3,-280(fp)
     e8c:	e0bfae17 	ldw	r2,-328(fp)
     e90:	d8800015 	stw	r2,0(sp)
     e94:	d8c00115 	stw	r3,4(sp)
     e98:	d8000215 	stw	zero,8(sp)
     e9c:	e13fc917 	ldw	r4,-220(fp)
     ea0:	e17fb117 	ldw	r5,-316(fp)
     ea4:	e1bfaf17 	ldw	r6,-324(fp)
     ea8:	e1ffb017 	ldw	r7,-320(fp)
     eac:	000fc5c0 	call	fc5c <alt_up_pixel_buffer_dma_draw_box>
									  Denoise_box_x2, Denoise_box_y2, color, 0);
	

	alt_up_char_buffer_string (char_buffer_dev, text_record, 14, 28);
     eb0:	e17ffc04 	addi	r5,fp,-16
     eb4:	e13fca17 	ldw	r4,-216(fp)
     eb8:	01800384 	movi	r6,14
     ebc:	01c00704 	movi	r7,28
     ec0:	000f6c40 	call	f6c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_play, 37, 28);
     ec4:	e17ff984 	addi	r5,fp,-26
     ec8:	e13fca17 	ldw	r4,-216(fp)
     ecc:	01800944 	movi	r6,37
     ed0:	01c00704 	movi	r7,28
     ed4:	000f6c40 	call	f6c4 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_Denoise, 60, 28);
     ed8:	e17ff704 	addi	r5,fp,-36
     edc:	e13fca17 	ldw	r4,-216(fp)
     ee0:	01800f04 	movi	r6,60
     ee4:	01c00704 	movi	r7,28
     ee8:	000f6c40 	call	f6c4 <alt_up_char_buffer_string>
		/* also, display any PS/2 data (from its interrupt service routine) on HEX displays */
		// HEX_PS2 (byte1, byte2, byte3);


		
		if(flag_mouse){
     eec:	00800074 	movhi	r2,1
     ef0:	109ac3c4 	addi	r2,r2,27407
     ef4:	10800003 	ldbu	r2,0(r2)
     ef8:	10803fcc 	andi	r2,r2,255
     efc:	1005003a 	cmpeq	r2,r2,zero
     f00:	1000061e 	bne	r2,zero,f1c <main+0x6a8>
			Mouse_ISR(&up_dev);
     f04:	01000834 	movhi	r4,32
     f08:	213c8304 	addi	r4,r4,-3572
     f0c:	00014600 	call	1460 <Mouse_ISR>
			flag_mouse = 0;
     f10:	00800074 	movhi	r2,1
     f14:	109ac3c4 	addi	r2,r2,27407
     f18:	10000005 	stb	zero,0(r2)
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, pre_x_axis_mouse - 2, pre_y_axis_mouse - 2,
		// 								pre_x_axis_mouse + 2, pre_y_axis_mouse + 2, color, 0);
		// // short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
     f1c:	d0a7db0b 	ldhu	r2,-24724(gp)
     f20:	e0ffd38f 	ldh	r3,-178(fp)
     f24:	10bfffcc 	andi	r2,r2,65535
     f28:	10a0001c 	xori	r2,r2,32768
     f2c:	10a00004 	addi	r2,r2,-32768
     f30:	1880061e 	bne	r3,r2,f4c <main+0x6d8>
     f34:	d0a7da8b 	ldhu	r2,-24726(gp)
     f38:	e0ffd30f 	ldh	r3,-180(fp)
     f3c:	10bfffcc 	andi	r2,r2,65535
     f40:	10a0001c 	xori	r2,r2,32768
     f44:	10a00004 	addi	r2,r2,-32768
     f48:	18803226 	beq	r3,r2,1014 <main+0x7a0>
			for(j = 0; j < 8; j++){ //clear previous mouse cursor
     f4c:	e03fd115 	stw	zero,-188(fp)
     f50:	00002d06 	br	1008 <main+0x794>
				for(i = 0; i < 16; i++){
     f54:	e03fd215 	stw	zero,-184(fp)
     f58:	00002506 	br	ff0 <main+0x77c>
					if(cursor_shape[i][j] != -1)
     f5c:	e0bfd217 	ldw	r2,-184(fp)
     f60:	e0ffd117 	ldw	r3,-188(fp)
     f64:	01000074 	movhi	r4,1
     f68:	210b3a04 	addi	r4,r4,11496
     f6c:	100490fa 	slli	r2,r2,3
     f70:	10c5883a 	add	r2,r2,r3
     f74:	1085883a 	add	r2,r2,r2
     f78:	1105883a 	add	r2,r2,r4
     f7c:	1080000b 	ldhu	r2,0(r2)
     f80:	10bfffcc 	andi	r2,r2,65535
     f84:	10a0001c 	xori	r2,r2,32768
     f88:	10a00004 	addi	r2,r2,-32768
     f8c:	10bfffe0 	cmpeqi	r2,r2,-1
     f90:	1000141e 	bne	r2,zero,fe4 <main+0x770>
						alt_up_pixel_buffer_dma_draw(pixel_buffer_dev,
     f94:	e0ffd38f 	ldh	r3,-178(fp)
     f98:	e0bfd117 	ldw	r2,-188(fp)
     f9c:	1889883a 	add	r4,r3,r2
     fa0:	e0ffd30f 	ldh	r3,-180(fp)
     fa4:	e0bfd217 	ldw	r2,-184(fp)
     fa8:	188b883a 	add	r5,r3,r2
     fac:	000116c0 	call	116c <mouse_color>
     fb0:	117fffcc 	andi	r5,r2,65535
     fb4:	2960001c 	xori	r5,r5,32768
     fb8:	29600004 	addi	r5,r5,-32768
     fbc:	e0ffd38f 	ldh	r3,-178(fp)
     fc0:	e0bfd117 	ldw	r2,-188(fp)
     fc4:	1885883a 	add	r2,r3,r2
     fc8:	100d883a 	mov	r6,r2
     fcc:	e0ffd30f 	ldh	r3,-180(fp)
     fd0:	e0bfd217 	ldw	r2,-184(fp)
     fd4:	1885883a 	add	r2,r3,r2
     fd8:	100f883a 	mov	r7,r2
     fdc:	e13fc917 	ldw	r4,-220(fp)
     fe0:	000f8740 	call	f874 <alt_up_pixel_buffer_dma_draw>
		// // short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
			for(j = 0; j < 8; j++){ //clear previous mouse cursor
				for(i = 0; i < 16; i++){
     fe4:	e0bfd217 	ldw	r2,-184(fp)
     fe8:	10800044 	addi	r2,r2,1
     fec:	e0bfd215 	stw	r2,-184(fp)
     ff0:	e0bfd217 	ldw	r2,-184(fp)
     ff4:	10800410 	cmplti	r2,r2,16
     ff8:	103fd81e 	bne	r2,zero,f5c <main+0x6e8>
		// 								pre_x_axis_mouse + 2, pre_y_axis_mouse + 2, color, 0);
		// // short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
			for(j = 0; j < 8; j++){ //clear previous mouse cursor
     ffc:	e0bfd117 	ldw	r2,-188(fp)
    1000:	10800044 	addi	r2,r2,1
    1004:	e0bfd115 	stw	r2,-188(fp)
    1008:	e0bfd117 	ldw	r2,-188(fp)
    100c:	10800210 	cmplti	r2,r2,8
    1010:	103fd01e 	bne	r2,zero,f54 <main+0x6e0>
				}
			}
		}


		for(j =0; j < 8; j++){ //print mouse cursor
    1014:	e03fd115 	stw	zero,-188(fp)
    1018:	00003706 	br	10f8 <main+0x884>
			for(i = 0; i < 16; i++){
    101c:	e03fd215 	stw	zero,-184(fp)
    1020:	00002f06 	br	10e0 <main+0x86c>
				if(cursor_shape[i][j] != -1)
    1024:	e0bfd217 	ldw	r2,-184(fp)
    1028:	e0ffd117 	ldw	r3,-188(fp)
    102c:	01000074 	movhi	r4,1
    1030:	210b3a04 	addi	r4,r4,11496
    1034:	100490fa 	slli	r2,r2,3
    1038:	10c5883a 	add	r2,r2,r3
    103c:	1085883a 	add	r2,r2,r2
    1040:	1105883a 	add	r2,r2,r4
    1044:	1080000b 	ldhu	r2,0(r2)
    1048:	10bfffcc 	andi	r2,r2,65535
    104c:	10a0001c 	xori	r2,r2,32768
    1050:	10a00004 	addi	r2,r2,-32768
    1054:	10bfffe0 	cmpeqi	r2,r2,-1
    1058:	10001e1e 	bne	r2,zero,10d4 <main+0x860>
					alt_up_pixel_buffer_dma_draw(pixel_buffer_dev, cursor_shape[i][j] * (-1),
    105c:	e0bfd217 	ldw	r2,-184(fp)
    1060:	e0ffd117 	ldw	r3,-188(fp)
    1064:	01000074 	movhi	r4,1
    1068:	210b3a04 	addi	r4,r4,11496
    106c:	100490fa 	slli	r2,r2,3
    1070:	10c5883a 	add	r2,r2,r3
    1074:	1085883a 	add	r2,r2,r2
    1078:	1105883a 	add	r2,r2,r4
    107c:	1080000b 	ldhu	r2,0(r2)
    1080:	10bfffcc 	andi	r2,r2,65535
    1084:	10a0001c 	xori	r2,r2,32768
    1088:	10a00004 	addi	r2,r2,-32768
    108c:	0085c83a 	sub	r2,zero,r2
    1090:	100b883a 	mov	r5,r2
    1094:	d0a7db0b 	ldhu	r2,-24724(gp)
    1098:	10ffffcc 	andi	r3,r2,65535
    109c:	18e0001c 	xori	r3,r3,32768
    10a0:	18e00004 	addi	r3,r3,-32768
    10a4:	e0bfd117 	ldw	r2,-188(fp)
    10a8:	1885883a 	add	r2,r3,r2
    10ac:	100d883a 	mov	r6,r2
    10b0:	d0a7da8b 	ldhu	r2,-24726(gp)
    10b4:	10ffffcc 	andi	r3,r2,65535
    10b8:	18e0001c 	xori	r3,r3,32768
    10bc:	18e00004 	addi	r3,r3,-32768
    10c0:	e0bfd217 	ldw	r2,-184(fp)
    10c4:	1885883a 	add	r2,r3,r2
    10c8:	100f883a 	mov	r7,r2
    10cc:	e13fc917 	ldw	r4,-220(fp)
    10d0:	000f8740 	call	f874 <alt_up_pixel_buffer_dma_draw>
			}
		}


		for(j =0; j < 8; j++){ //print mouse cursor
			for(i = 0; i < 16; i++){
    10d4:	e0bfd217 	ldw	r2,-184(fp)
    10d8:	10800044 	addi	r2,r2,1
    10dc:	e0bfd215 	stw	r2,-184(fp)
    10e0:	e0bfd217 	ldw	r2,-184(fp)
    10e4:	10800410 	cmplti	r2,r2,16
    10e8:	103fce1e 	bne	r2,zero,1024 <main+0x7b0>
				}
			}
		}


		for(j =0; j < 8; j++){ //print mouse cursor
    10ec:	e0bfd117 	ldw	r2,-188(fp)
    10f0:	10800044 	addi	r2,r2,1
    10f4:	e0bfd115 	stw	r2,-188(fp)
    10f8:	e0bfd117 	ldw	r2,-188(fp)
    10fc:	10800210 	cmplti	r2,r2,8
    1100:	103fc61e 	bne	r2,zero,101c <main+0x7a8>
		}




		pre_x_axis_mouse = x_axis_mouse;
    1104:	d0a7db0b 	ldhu	r2,-24724(gp)
    1108:	e0bfd38d 	sth	r2,-178(fp)
		pre_y_axis_mouse = y_axis_mouse;
    110c:	d0a7da8b 	ldhu	r2,-24726(gp)
    1110:	e0bfd30d 	sth	r2,-180(fp)

		command = command_det(valid_byte1); // 0:record, 1:play, 2:Denoise
    1114:	00800074 	movhi	r2,1
    1118:	109ac804 	addi	r2,r2,27424
    111c:	10800003 	ldbu	r2,0(r2)
    1120:	11003fcc 	andi	r4,r2,255
    1124:	000194c0 	call	194c <command_det>
    1128:	1007883a 	mov	r3,r2
    112c:	00800074 	movhi	r2,1
    1130:	109ac384 	addi	r2,r2,27406
    1134:	10c00005 	stb	r3,0(r2)
		run_command(&up_dev);
    1138:	01000834 	movhi	r4,32
    113c:	213c8304 	addi	r4,r4,-3572
    1140:	00017a40 	call	17a4 <run_command>
		

		timeout = 0;
    1144:	00800074 	movhi	r2,1
    1148:	109ac504 	addi	r2,r2,27412
    114c:	10000015 	stw	zero,0(r2)
	}
    1150:	003f6606 	br	eec <main+0x678>
    1154:	e0bfff17 	ldw	r2,-4(fp)

}
    1158:	e037883a 	mov	sp,fp
    115c:	dfc00117 	ldw	ra,4(sp)
    1160:	df000017 	ldw	fp,0(sp)
    1164:	dec00204 	addi	sp,sp,8
    1168:	f800283a 	ret

0000116c <mouse_color>:
short mouse_color(int i, int j){
    116c:	defffc04 	addi	sp,sp,-16
    1170:	df000315 	stw	fp,12(sp)
    1174:	df000304 	addi	fp,sp,12
    1178:	e13ffd15 	stw	r4,-12(fp)
    117c:	e17ffe15 	stw	r5,-8(fp)
	if(i >= 35 && i <= 100 &&
    1180:	e0bffd17 	ldw	r2,-12(fp)
    1184:	108008d0 	cmplti	r2,r2,35
    1188:	10000c1e 	bne	r2,zero,11bc <mouse_color+0x50>
    118c:	e0bffd17 	ldw	r2,-12(fp)
    1190:	10801948 	cmpgei	r2,r2,101
    1194:	1000091e 	bne	r2,zero,11bc <mouse_color+0x50>
    1198:	e0bffe17 	ldw	r2,-8(fp)
    119c:	10801710 	cmplti	r2,r2,92
    11a0:	1000061e 	bne	r2,zero,11bc <mouse_color+0x50>
    11a4:	e0bffe17 	ldw	r2,-8(fp)
    11a8:	10802248 	cmpgei	r2,r2,137
    11ac:	1000031e 	bne	r2,zero,11bc <mouse_color+0x50>
		j >= 92 && j <= 136)
		return 0x6F00;
    11b0:	009bc004 	movi	r2,28416
    11b4:	e0bfff15 	stw	r2,-4(fp)
    11b8:	00002006 	br	123c <mouse_color+0xd0>
	else if(i >= 125 && i <= 190 &&
    11bc:	e0bffd17 	ldw	r2,-12(fp)
    11c0:	10801f50 	cmplti	r2,r2,125
    11c4:	10000c1e 	bne	r2,zero,11f8 <mouse_color+0x8c>
    11c8:	e0bffd17 	ldw	r2,-12(fp)
    11cc:	10802fc8 	cmpgei	r2,r2,191
    11d0:	1000091e 	bne	r2,zero,11f8 <mouse_color+0x8c>
    11d4:	e0bffe17 	ldw	r2,-8(fp)
    11d8:	10801710 	cmplti	r2,r2,92
    11dc:	1000061e 	bne	r2,zero,11f8 <mouse_color+0x8c>
    11e0:	e0bffe17 	ldw	r2,-8(fp)
    11e4:	10802248 	cmpgei	r2,r2,137
    11e8:	1000031e 	bne	r2,zero,11f8 <mouse_color+0x8c>
			j >= 92 && j <= 136)
		return 0x6F00;
    11ec:	009bc004 	movi	r2,28416
    11f0:	e0bfff15 	stw	r2,-4(fp)
    11f4:	00001106 	br	123c <mouse_color+0xd0>
	else if(i >= 215 && i <= 280 &&
    11f8:	e0bffd17 	ldw	r2,-12(fp)
    11fc:	108035d0 	cmplti	r2,r2,215
    1200:	10000c1e 	bne	r2,zero,1234 <mouse_color+0xc8>
    1204:	e0bffd17 	ldw	r2,-12(fp)
    1208:	10804648 	cmpgei	r2,r2,281
    120c:	1000091e 	bne	r2,zero,1234 <mouse_color+0xc8>
    1210:	e0bffe17 	ldw	r2,-8(fp)
    1214:	10801710 	cmplti	r2,r2,92
    1218:	1000061e 	bne	r2,zero,1234 <mouse_color+0xc8>
    121c:	e0bffe17 	ldw	r2,-8(fp)
    1220:	10802248 	cmpgei	r2,r2,137
    1224:	1000031e 	bne	r2,zero,1234 <mouse_color+0xc8>
			j >= 92 && j <= 136)
		return 0x6F00;
    1228:	009bc004 	movi	r2,28416
    122c:	e0bfff15 	stw	r2,-4(fp)
    1230:	00000206 	br	123c <mouse_color+0xd0>

	return 0x5550;
    1234:	00955404 	movi	r2,21840
    1238:	e0bfff15 	stw	r2,-4(fp)
    123c:	e0bfff17 	ldw	r2,-4(fp)
}
    1240:	e037883a 	mov	sp,fp
    1244:	df000017 	ldw	fp,0(sp)
    1248:	dec00104 	addi	sp,sp,4
    124c:	f800283a 	ret

00001250 <setMouseBounds>:
void setMouseBounds(unsigned char info, unsigned char x_move, unsigned char y_move) {
    1250:	deffe204 	addi	sp,sp,-120
    1254:	df001d15 	stw	fp,116(sp)
    1258:	df001d04 	addi	fp,sp,116
    125c:	e13ffd05 	stb	r4,-12(fp)
    1260:	e17ffe05 	stb	r5,-8(fp)
    1264:	e1bfff05 	stb	r6,-4(fp)
	signed short x_move_s = x_move, y_move_s = y_move;
    1268:	e0bffe03 	ldbu	r2,-8(fp)
    126c:	e0bfe38d 	sth	r2,-114(fp)
    1270:	e0bfff03 	ldbu	r2,-4(fp)
    1274:	e0bfe30d 	sth	r2,-116(fp)
	if(x_move_s >> 7 & 0x01)x_move_s -= 256;
    1278:	e0bfe38f 	ldh	r2,-114(fp)
    127c:	1005d1fa 	srai	r2,r2,7
    1280:	10bfffcc 	andi	r2,r2,65535
    1284:	1080004c 	andi	r2,r2,1
    1288:	10803fcc 	andi	r2,r2,255
    128c:	1005003a 	cmpeq	r2,r2,zero
    1290:	1000031e 	bne	r2,zero,12a0 <setMouseBounds+0x50>
    1294:	e0bfe38b 	ldhu	r2,-114(fp)
    1298:	10bfc004 	addi	r2,r2,-256
    129c:	e0bfe38d 	sth	r2,-114(fp)
	if(y_move_s >> 7 & 0x01)y_move_s -= 256;
    12a0:	e0bfe30f 	ldh	r2,-116(fp)
    12a4:	1005d1fa 	srai	r2,r2,7
    12a8:	10bfffcc 	andi	r2,r2,65535
    12ac:	1080004c 	andi	r2,r2,1
    12b0:	10803fcc 	andi	r2,r2,255
    12b4:	1005003a 	cmpeq	r2,r2,zero
    12b8:	1000031e 	bne	r2,zero,12c8 <setMouseBounds+0x78>
    12bc:	e0bfe30b 	ldhu	r2,-116(fp)
    12c0:	10bfc004 	addi	r2,r2,-256
    12c4:	e0bfe30d 	sth	r2,-116(fp)

	if((info >> 6) & 0x01){ // x overflow = 1
    12c8:	e0bffd03 	ldbu	r2,-12(fp)
    12cc:	1004d1ba 	srli	r2,r2,6
    12d0:	10803fcc 	andi	r2,r2,255
    12d4:	1080004c 	andi	r2,r2,1
    12d8:	10803fcc 	andi	r2,r2,255
    12dc:	1005003a 	cmpeq	r2,r2,zero
    12e0:	1000151e 	bne	r2,zero,1338 <setMouseBounds+0xe8>
		if((info >> 4) & 0x01)
    12e4:	e0bffd03 	ldbu	r2,-12(fp)
    12e8:	1004d13a 	srli	r2,r2,4
    12ec:	10803fcc 	andi	r2,r2,255
    12f0:	1080004c 	andi	r2,r2,1
    12f4:	10803fcc 	andi	r2,r2,255
    12f8:	1005003a 	cmpeq	r2,r2,zero
    12fc:	1000071e 	bne	r2,zero,131c <setMouseBounds+0xcc>
			x_axis_mouse += (-255 + x_move_s);
    1300:	d0a7db0b 	ldhu	r2,-24724(gp)
    1304:	1007883a 	mov	r3,r2
    1308:	e0bfe38b 	ldhu	r2,-114(fp)
    130c:	1885883a 	add	r2,r3,r2
    1310:	10bfc044 	addi	r2,r2,-255
    1314:	d0a7db0d 	sth	r2,-24724(gp)
    1318:	00000c06 	br	134c <setMouseBounds+0xfc>
		else
			x_axis_mouse += (+255 + x_move_s);
    131c:	d0a7db0b 	ldhu	r2,-24724(gp)
    1320:	1007883a 	mov	r3,r2
    1324:	e0bfe38b 	ldhu	r2,-114(fp)
    1328:	1885883a 	add	r2,r3,r2
    132c:	10803fc4 	addi	r2,r2,255
    1330:	d0a7db0d 	sth	r2,-24724(gp)
    1334:	00000506 	br	134c <setMouseBounds+0xfc>
	}
	else // x overflow = 0
		x_axis_mouse += x_move_s;
    1338:	d0a7db0b 	ldhu	r2,-24724(gp)
    133c:	1007883a 	mov	r3,r2
    1340:	e0bfe38b 	ldhu	r2,-114(fp)
    1344:	1885883a 	add	r2,r3,r2
    1348:	d0a7db0d 	sth	r2,-24724(gp)

	if((info >> 7) & 0x01){ // y overflow = 1
    134c:	e0bffd03 	ldbu	r2,-12(fp)
    1350:	1004d1fa 	srli	r2,r2,7
    1354:	10803fcc 	andi	r2,r2,255
    1358:	1080004c 	andi	r2,r2,1
    135c:	10803fcc 	andi	r2,r2,255
    1360:	1005003a 	cmpeq	r2,r2,zero
    1364:	1000151e 	bne	r2,zero,13bc <setMouseBounds+0x16c>
		if((info >> 5) & 0x01)
    1368:	e0bffd03 	ldbu	r2,-12(fp)
    136c:	1004d17a 	srli	r2,r2,5
    1370:	10803fcc 	andi	r2,r2,255
    1374:	1080004c 	andi	r2,r2,1
    1378:	10803fcc 	andi	r2,r2,255
    137c:	1005003a 	cmpeq	r2,r2,zero
    1380:	1000071e 	bne	r2,zero,13a0 <setMouseBounds+0x150>
			y_axis_mouse -= (-255 + y_move_s);
    1384:	d0a7da8b 	ldhu	r2,-24726(gp)
    1388:	1007883a 	mov	r3,r2
    138c:	e0bfe30b 	ldhu	r2,-116(fp)
    1390:	1885c83a 	sub	r2,r3,r2
    1394:	10803fc4 	addi	r2,r2,255
    1398:	d0a7da8d 	sth	r2,-24726(gp)
    139c:	00000c06 	br	13d0 <setMouseBounds+0x180>
		else
			y_axis_mouse -= (+255 + y_move_s);
    13a0:	d0a7da8b 	ldhu	r2,-24726(gp)
    13a4:	1007883a 	mov	r3,r2
    13a8:	e0bfe30b 	ldhu	r2,-116(fp)
    13ac:	1885c83a 	sub	r2,r3,r2
    13b0:	10bfc044 	addi	r2,r2,-255
    13b4:	d0a7da8d 	sth	r2,-24726(gp)
    13b8:	00000506 	br	13d0 <setMouseBounds+0x180>
	}
	else // y overflow = 0
		y_axis_mouse -= y_move_s;
    13bc:	d0a7da8b 	ldhu	r2,-24726(gp)
    13c0:	1007883a 	mov	r3,r2
    13c4:	e0bfe30b 	ldhu	r2,-116(fp)
    13c8:	1885c83a 	sub	r2,r3,r2
    13cc:	d0a7da8d 	sth	r2,-24726(gp)
	// alt_printf(buf);
	// sprintf(buf, "y_axis_mouse: %d\n", (int) y_axis_mouse);
	// alt_printf(buf);
	//Debugging end

	if(x_axis_mouse < 2) x_axis_mouse = 2;
    13d0:	d0a7db0b 	ldhu	r2,-24724(gp)
    13d4:	10bfffcc 	andi	r2,r2,65535
    13d8:	10a0001c 	xori	r2,r2,32768
    13dc:	10a00004 	addi	r2,r2,-32768
    13e0:	10800088 	cmpgei	r2,r2,2
    13e4:	1000021e 	bne	r2,zero,13f0 <setMouseBounds+0x1a0>
    13e8:	00800084 	movi	r2,2
    13ec:	d0a7db0d 	sth	r2,-24724(gp)
	if(x_axis_mouse > X_BOUND - 2) x_axis_mouse = X_BOUND - 2;
    13f0:	d0a7db0b 	ldhu	r2,-24724(gp)
    13f4:	10bfffcc 	andi	r2,r2,65535
    13f8:	10a0001c 	xori	r2,r2,32768
    13fc:	10a00004 	addi	r2,r2,-32768
    1400:	10804f90 	cmplti	r2,r2,318
    1404:	1000021e 	bne	r2,zero,1410 <setMouseBounds+0x1c0>
    1408:	00804f44 	movi	r2,317
    140c:	d0a7db0d 	sth	r2,-24724(gp)
	if(y_axis_mouse < 2) y_axis_mouse = 2;
    1410:	d0a7da8b 	ldhu	r2,-24726(gp)
    1414:	10bfffcc 	andi	r2,r2,65535
    1418:	10a0001c 	xori	r2,r2,32768
    141c:	10a00004 	addi	r2,r2,-32768
    1420:	10800088 	cmpgei	r2,r2,2
    1424:	1000021e 	bne	r2,zero,1430 <setMouseBounds+0x1e0>
    1428:	00800084 	movi	r2,2
    142c:	d0a7da8d 	sth	r2,-24726(gp)
	if(y_axis_mouse > Y_BOUND - 2) y_axis_mouse = Y_BOUND - 2;
    1430:	d0a7da8b 	ldhu	r2,-24726(gp)
    1434:	10bfffcc 	andi	r2,r2,65535
    1438:	10a0001c 	xori	r2,r2,32768
    143c:	10a00004 	addi	r2,r2,-32768
    1440:	10803b90 	cmplti	r2,r2,238
    1444:	1000021e 	bne	r2,zero,1450 <setMouseBounds+0x200>
    1448:	00803b44 	movi	r2,237
    144c:	d0a7da8d 	sth	r2,-24726(gp)
}
    1450:	e037883a 	mov	sp,fp
    1454:	df000017 	ldw	fp,0(sp)
    1458:	dec00104 	addi	sp,sp,4
    145c:	f800283a 	ret

00001460 <Mouse_ISR>:


void Mouse_ISR (struct alt_up_dev *up_dev) {
    1460:	defff304 	addi	sp,sp,-52
    1464:	dfc00c15 	stw	ra,48(sp)
    1468:	df000b15 	stw	fp,44(sp)
    146c:	df000b04 	addi	fp,sp,44
    1470:	e13fff15 	stw	r4,-4(fp)
	unsigned char b1 = valid_byte1;
    1474:	00800074 	movhi	r2,1
    1478:	109ac804 	addi	r2,r2,27424
    147c:	10800003 	ldbu	r2,0(r2)
    1480:	e0bff785 	stb	r2,-34(fp)
	unsigned char b2 = valid_byte2;
    1484:	00800074 	movhi	r2,1
    1488:	109ac404 	addi	r2,r2,27408
    148c:	10800003 	ldbu	r2,0(r2)
    1490:	e0bff745 	stb	r2,-35(fp)
	unsigned char b3 = valid_byte3;
    1494:	00800074 	movhi	r2,1
    1498:	109ac2c4 	addi	r2,r2,27403
    149c:	10800003 	ldbu	r2,0(r2)
    14a0:	e0bff705 	stb	r2,-36(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    14a4:	00840034 	movhi	r2,4096
    14a8:	10800804 	addi	r2,r2,32
    14ac:	e0bff615 	stw	r2,-40(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    14b0:	00840034 	movhi	r2,4096
    14b4:	10800c04 	addi	r2,r2,48
    14b8:	e0bff515 	stw	r2,-44(fp)
	unsigned char hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    14bc:	e03ff7c5 	stb	zero,-33(fp)
    14c0:	e03ff805 	stb	zero,-32(fp)
    14c4:	e03ff845 	stb	zero,-31(fp)
    14c8:	e03ff885 	stb	zero,-30(fp)
    14cc:	e03ff8c5 	stb	zero,-29(fp)
    14d0:	e03ff905 	stb	zero,-28(fp)
    14d4:	e03ff945 	stb	zero,-27(fp)
    14d8:	e03ff985 	stb	zero,-26(fp)
	unsigned char button_mouse[3];

	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 
											0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
    14dc:	00800074 	movhi	r2,1
    14e0:	1089fc84 	addi	r2,r2,10226
    14e4:	e13ffa84 	addi	r4,fp,-22
    14e8:	100b883a 	mov	r5,r2
    14ec:	01800404 	movi	r6,16
    14f0:	0002d240 	call	2d24 <memcpy>


	alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0); // Turn off LEDRs
    14f4:	e0bfff17 	ldw	r2,-4(fp)
    14f8:	10800217 	ldw	r2,8(r2)
    14fc:	10800a17 	ldw	r2,40(r2)
    1500:	10000035 	stwio	zero,0(r2)
	
	if(b1 & 0x01){
    1504:	e0bff783 	ldbu	r2,-34(fp)
    1508:	1080004c 	andi	r2,r2,1
    150c:	10803fcc 	andi	r2,r2,255
    1510:	1005003a 	cmpeq	r2,r2,zero
    1514:	1000071e 	bne	r2,zero,1534 <Mouse_ISR+0xd4>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x1);/*LED0 -> Left btn*/
    1518:	e0bfff17 	ldw	r2,-4(fp)
    151c:	10800217 	ldw	r2,8(r2)
    1520:	10800a17 	ldw	r2,40(r2)
    1524:	1007883a 	mov	r3,r2
    1528:	00800044 	movi	r2,1
    152c:	18800035 	stwio	r2,0(r3)
    1530:	00001506 	br	1588 <Mouse_ISR+0x128>
	}
	else if(b1 & 0x02){
    1534:	e0bff783 	ldbu	r2,-34(fp)
    1538:	1080008c 	andi	r2,r2,2
    153c:	1005003a 	cmpeq	r2,r2,zero
    1540:	1000071e 	bne	r2,zero,1560 <Mouse_ISR+0x100>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x2);/*LED1 -> Right btn*/
    1544:	e0bfff17 	ldw	r2,-4(fp)
    1548:	10800217 	ldw	r2,8(r2)
    154c:	10800a17 	ldw	r2,40(r2)
    1550:	1007883a 	mov	r3,r2
    1554:	00800084 	movi	r2,2
    1558:	18800035 	stwio	r2,0(r3)
    155c:	00000a06 	br	1588 <Mouse_ISR+0x128>
	}
	else if(b1 & 0x04){
    1560:	e0bff783 	ldbu	r2,-34(fp)
    1564:	1080010c 	andi	r2,r2,4
    1568:	1005003a 	cmpeq	r2,r2,zero
    156c:	1000061e 	bne	r2,zero,1588 <Mouse_ISR+0x128>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x4);/*LED2 -> Middle btn*/
    1570:	e0bfff17 	ldw	r2,-4(fp)
    1574:	10800217 	ldw	r2,8(r2)
    1578:	10800a17 	ldw	r2,40(r2)
    157c:	1007883a 	mov	r3,r2
    1580:	00800104 	movi	r2,4
    1584:	18800035 	stwio	r2,0(r3)
	}

	hex_segs[0] = seven_seg_decode_table [b3 & 0x0F];
    1588:	e0bff703 	ldbu	r2,-36(fp)
    158c:	10c003cc 	andi	r3,r2,15
    1590:	e0bffa84 	addi	r2,fp,-22
    1594:	10c5883a 	add	r2,r2,r3
    1598:	10800003 	ldbu	r2,0(r2)
    159c:	e0bff7c5 	stb	r2,-33(fp)
	hex_segs[1] = seven_seg_decode_table [(b3 >> 4) & 0x0F];
    15a0:	e0bff703 	ldbu	r2,-36(fp)
    15a4:	1004d13a 	srli	r2,r2,4
    15a8:	10803fcc 	andi	r2,r2,255
    15ac:	10c003cc 	andi	r3,r2,15
    15b0:	e0bffa84 	addi	r2,fp,-22
    15b4:	10c5883a 	add	r2,r2,r3
    15b8:	10800003 	ldbu	r2,0(r2)
    15bc:	e0bff805 	stb	r2,-32(fp)
	hex_segs[2] = seven_seg_decode_table[b1 >> 7 & 0x01];
    15c0:	e0bff783 	ldbu	r2,-34(fp)
    15c4:	1004d1fa 	srli	r2,r2,7
    15c8:	10803fcc 	andi	r2,r2,255
    15cc:	10c0004c 	andi	r3,r2,1
    15d0:	e0bffa84 	addi	r2,fp,-22
    15d4:	10c5883a 	add	r2,r2,r3
    15d8:	10800003 	ldbu	r2,0(r2)
    15dc:	e0bff845 	stb	r2,-31(fp)
	hex_segs[3] = seven_seg_decode_table[b1 >> 5 & 0x01];
    15e0:	e0bff783 	ldbu	r2,-34(fp)
    15e4:	1004d17a 	srli	r2,r2,5
    15e8:	10803fcc 	andi	r2,r2,255
    15ec:	10c0004c 	andi	r3,r2,1
    15f0:	e0bffa84 	addi	r2,fp,-22
    15f4:	10c5883a 	add	r2,r2,r3
    15f8:	10800003 	ldbu	r2,0(r2)
    15fc:	e0bff885 	stb	r2,-30(fp)

	hex_segs[4] = seven_seg_decode_table [b2 & 0x0F];
    1600:	e0bff743 	ldbu	r2,-35(fp)
    1604:	10c003cc 	andi	r3,r2,15
    1608:	e0bffa84 	addi	r2,fp,-22
    160c:	10c5883a 	add	r2,r2,r3
    1610:	10800003 	ldbu	r2,0(r2)
    1614:	e0bff8c5 	stb	r2,-29(fp)
	hex_segs[5] = seven_seg_decode_table [(b2 >> 4) & 0x0F];
    1618:	e0bff743 	ldbu	r2,-35(fp)
    161c:	1004d13a 	srli	r2,r2,4
    1620:	10803fcc 	andi	r2,r2,255
    1624:	10c003cc 	andi	r3,r2,15
    1628:	e0bffa84 	addi	r2,fp,-22
    162c:	10c5883a 	add	r2,r2,r3
    1630:	10800003 	ldbu	r2,0(r2)
    1634:	e0bff905 	stb	r2,-28(fp)
	hex_segs[6] = seven_seg_decode_table[b1 >> 6 & 0x01];
    1638:	e0bff783 	ldbu	r2,-34(fp)
    163c:	1004d1ba 	srli	r2,r2,6
    1640:	10803fcc 	andi	r2,r2,255
    1644:	10c0004c 	andi	r3,r2,1
    1648:	e0bffa84 	addi	r2,fp,-22
    164c:	10c5883a 	add	r2,r2,r3
    1650:	10800003 	ldbu	r2,0(r2)
    1654:	e0bff945 	stb	r2,-27(fp)
	hex_segs[7] = seven_seg_decode_table[b1 >> 4 & 0x01];
    1658:	e0bff783 	ldbu	r2,-34(fp)
    165c:	1004d13a 	srli	r2,r2,4
    1660:	10803fcc 	andi	r2,r2,255
    1664:	10c0004c 	andi	r3,r2,1
    1668:	e0bffa84 	addi	r2,fp,-22
    166c:	10c5883a 	add	r2,r2,r3
    1670:	10800003 	ldbu	r2,0(r2)
    1674:	e0bff985 	stb	r2,-26(fp)

	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    1678:	e0bff7c4 	addi	r2,fp,-33
    167c:	10c00017 	ldw	r3,0(r2)
    1680:	e0bff617 	ldw	r2,-40(fp)
    1684:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    1688:	e0bff7c4 	addi	r2,fp,-33
    168c:	10800104 	addi	r2,r2,4
    1690:	10c00017 	ldw	r3,0(r2)
    1694:	e0bff517 	ldw	r2,-44(fp)
    1698:	10c00015 	stw	r3,0(r2)

	setMouseBounds(b1, b2, b3);
    169c:	e13ff783 	ldbu	r4,-34(fp)
    16a0:	e17ff743 	ldbu	r5,-35(fp)
    16a4:	e1bff703 	ldbu	r6,-36(fp)
    16a8:	00012500 	call	1250 <setMouseBounds>
}
    16ac:	e037883a 	mov	sp,fp
    16b0:	dfc00117 	ldw	ra,4(sp)
    16b4:	df000017 	ldw	fp,0(sp)
    16b8:	dec00204 	addi	sp,sp,8
    16bc:	f800283a 	ret

000016c0 <make_Denoise>:





void make_Denoise(){
    16c0:	defffe04 	addi	sp,sp,-8
    16c4:	df000115 	stw	fp,4(sp)
    16c8:	df000104 	addi	fp,sp,4
	// 	}
	// 	else  printf("works well\n");
	// time_start=alt_nticks();
	// float tstart=(float)alt_timestamp()/(float)tick_per_second;
	int i;
	for (i = 0; i < BUF_SIZE; i++){
    16cc:	e03fff15 	stw	zero,-4(fp)
    16d0:	00001306 	br	1720 <make_Denoise+0x60>
		l_buf_Denoise[i] = ALT_CI_FIR_SER_0(l_buf[i]);
    16d4:	e17fff17 	ldw	r5,-4(fp)
    16d8:	e0bfff17 	ldw	r2,-4(fp)
    16dc:	00c00474 	movhi	r3,17
    16e0:	18ebf304 	addi	r3,r3,-20532
    16e4:	1085883a 	add	r2,r2,r2
    16e8:	1085883a 	add	r2,r2,r2
    16ec:	10c5883a 	add	r2,r2,r3
    16f0:	10800017 	ldw	r2,0(r2)
    16f4:	1005c032 	custom	0,r2,r2,zero
    16f8:	1009883a 	mov	r4,r2
    16fc:	00c00bf4 	movhi	r3,47
    1700:	18cd1b04 	addi	r3,r3,13420
    1704:	2945883a 	add	r2,r5,r5
    1708:	1085883a 	add	r2,r2,r2
    170c:	10c5883a 	add	r2,r2,r3
    1710:	11000015 	stw	r4,0(r2)
	// 	}
	// 	else  printf("works well\n");
	// time_start=alt_nticks();
	// float tstart=(float)alt_timestamp()/(float)tick_per_second;
	int i;
	for (i = 0; i < BUF_SIZE; i++){
    1714:	e0bfff17 	ldw	r2,-4(fp)
    1718:	10800044 	addi	r2,r2,1
    171c:	e0bfff15 	stw	r2,-4(fp)
    1720:	e0ffff17 	ldw	r3,-4(fp)
    1724:	00800134 	movhi	r2,4
    1728:	10b423c4 	addi	r2,r2,-12145
    172c:	10ffe90e 	bge	r2,r3,16d4 <make_Denoise+0x14>
		l_buf_Denoise[i] = ALT_CI_FIR_SER_0(l_buf[i]);
	}
	// for (i = 0; i < 64; i++){
	// 	mem[i] = 0;
	// }
	for (i = 0; i < BUF_SIZE; i++){
    1730:	e03fff15 	stw	zero,-4(fp)
    1734:	00001306 	br	1784 <make_Denoise+0xc4>
		r_buf_Denoise[i] = ALT_CI_FIR_SER_0(r_buf[i]);
    1738:	e17fff17 	ldw	r5,-4(fp)
    173c:	e0bfff17 	ldw	r2,-4(fp)
    1740:	00c00074 	movhi	r3,1
    1744:	18db6304 	addi	r3,r3,28044
    1748:	1085883a 	add	r2,r2,r2
    174c:	1085883a 	add	r2,r2,r2
    1750:	10c5883a 	add	r2,r2,r3
    1754:	10800017 	ldw	r2,0(r2)
    1758:	1005c032 	custom	0,r2,r2,zero
    175c:	1009883a 	mov	r4,r2
    1760:	00c00834 	movhi	r3,32
    1764:	18fc8b04 	addi	r3,r3,-3540
    1768:	2945883a 	add	r2,r5,r5
    176c:	1085883a 	add	r2,r2,r2
    1770:	10c5883a 	add	r2,r2,r3
    1774:	11000015 	stw	r4,0(r2)
		l_buf_Denoise[i] = ALT_CI_FIR_SER_0(l_buf[i]);
	}
	// for (i = 0; i < 64; i++){
	// 	mem[i] = 0;
	// }
	for (i = 0; i < BUF_SIZE; i++){
    1778:	e0bfff17 	ldw	r2,-4(fp)
    177c:	10800044 	addi	r2,r2,1
    1780:	e0bfff15 	stw	r2,-4(fp)
    1784:	e0ffff17 	ldw	r3,-4(fp)
    1788:	00800134 	movhi	r2,4
    178c:	10b423c4 	addi	r2,r2,-12145
    1790:	10ffe90e 	bge	r2,r3,1738 <make_Denoise+0x78>
	// 	mem[i] = 0;
	// }
	// float tstop=(float)alt_timestamp()/(float)tick_per_second;
	// time_elapsed=alt_nticks()-time_start;
	// printf("%f\n",(float)time_elapsed/(float)tick_per_second);
}
    1794:	e037883a 	mov	sp,fp
    1798:	df000017 	ldw	fp,0(sp)
    179c:	dec00104 	addi	sp,sp,4
    17a0:	f800283a 	ret

000017a4 <run_command>:


void run_command(struct alt_up_dev *up_dev) {
    17a4:	defff404 	addi	sp,sp,-48
    17a8:	dfc00b15 	stw	ra,44(sp)
    17ac:	df000a15 	stw	fp,40(sp)
    17b0:	dc000915 	stw	r16,36(sp)
    17b4:	df000904 	addi	fp,sp,36
    17b8:	e13fff15 	stw	r4,-4(fp)
	int num_read;
	int num_written;
	alt_u32 fr;
	if(command == 0){ //Record
    17bc:	00800074 	movhi	r2,1
    17c0:	109ac384 	addi	r2,r2,27406
    17c4:	10800003 	ldbu	r2,0(r2)
    17c8:	10803fcc 	andi	r2,r2,255
    17cc:	1004c03a 	cmpne	r2,r2,zero
    17d0:	1000331e 	bne	r2,zero,18a0 <run_command+0xfc>
		int i;
		// reset the buffer index for recording
		buf_index_record = 0;
    17d4:	00800074 	movhi	r2,1
    17d8:	109ac704 	addi	r2,r2,27420
    17dc:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    17e0:	e0bfff17 	ldw	r2,-4(fp)
    17e4:	11000517 	ldw	r4,20(r2)
    17e8:	000d7f00 	call	d7f0 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (up_dev->audio_dev);
    17ec:	e0bfff17 	ldw	r2,-4(fp)
    17f0:	11000517 	ldw	r4,20(r2)
    17f4:	000d6400 	call	d640 <alt_up_audio_enable_read_interrupt>
		fr=alt_timestamp_freq();
    17f8:	000d5d80 	call	d5d8 <alt_timestamp_freq>
    17fc:	e0bffc15 	stw	r2,-16(fp)
		if(fr==0){
    1800:	e0bffc17 	ldw	r2,-16(fp)
    1804:	1004c03a 	cmpne	r2,r2,zero
    1808:	1000041e 	bne	r2,zero,181c <run_command+0x78>
			printf("error timestamp\n");
    180c:	01000074 	movhi	r4,1
    1810:	210a0104 	addi	r4,r4,10244
    1814:	0002f740 	call	2f74 <puts>
    1818:	00000306 	br	1828 <run_command+0x84>
		}
		else  printf("works well\n");
    181c:	01000074 	movhi	r4,1
    1820:	210a0504 	addi	r4,r4,10260
    1824:	0002f740 	call	2f74 <puts>
		alt_timestamp_start();
    1828:	000d4980 	call	d498 <alt_timestamp_start>
		float tstart=(float)alt_timestamp()/(float)fr;
    182c:	000d53c0 	call	d53c <alt_timestamp>
    1830:	1009883a 	mov	r4,r2
    1834:	0001bd80 	call	1bd8 <__floatunsisf>
    1838:	1021883a 	mov	r16,r2
    183c:	e13ffc17 	ldw	r4,-16(fp)
    1840:	0001bd80 	call	1bd8 <__floatunsisf>
    1844:	8085fff2 	custom	255,r2,r16,r2
    1848:	e0bffa15 	stw	r2,-24(fp)
		make_Denoise();
    184c:	00016c00 	call	16c0 <make_Denoise>
		float tstop=(float)alt_timestamp()/(float)fr;
    1850:	000d53c0 	call	d53c <alt_timestamp>
    1854:	1009883a 	mov	r4,r2
    1858:	0001bd80 	call	1bd8 <__floatunsisf>
    185c:	1021883a 	mov	r16,r2
    1860:	e13ffc17 	ldw	r4,-16(fp)
    1864:	0001bd80 	call	1bd8 <__floatunsisf>
    1868:	8085fff2 	custom	255,r2,r16,r2
    186c:	e0bff915 	stw	r2,-28(fp)
		printf("%f\n",tstop-tstart);
    1870:	e0fff917 	ldw	r3,-28(fp)
    1874:	e0bffa17 	ldw	r2,-24(fp)
    1878:	1885ffb2 	custom	254,r2,r3,r2
    187c:	1009883a 	mov	r4,r2
    1880:	0001b840 	call	1b84 <__extendsfdf2>
    1884:	100d883a 	mov	r6,r2
    1888:	180f883a 	mov	r7,r3
    188c:	01000074 	movhi	r4,1
    1890:	210a0804 	addi	r4,r4,10272
    1894:	300b883a 	mov	r5,r6
    1898:	380d883a 	mov	r6,r7
    189c:	0002e5c0 	call	2e5c <printf>
	}
	if(command == 1){ //Play
    18a0:	00800074 	movhi	r2,1
    18a4:	109ac384 	addi	r2,r2,27406
    18a8:	10800003 	ldbu	r2,0(r2)
    18ac:	10803fcc 	andi	r2,r2,255
    18b0:	10800058 	cmpnei	r2,r2,1
    18b4:	10000c1e 	bne	r2,zero,18e8 <run_command+0x144>
		// float tstop=(float)alt_timestamp()/(float)fr;
		// printf("%f\n",tstop-tstart);

		int i;
		// reset counter to start playback
		buf_index_play = 0;
    18b8:	00800074 	movhi	r2,1
    18bc:	109ac604 	addi	r2,r2,27416
    18c0:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    18c4:	e0bfff17 	ldw	r2,-4(fp)
    18c8:	11000517 	ldw	r4,20(r2)
    18cc:	000d7f00 	call	d7f0 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (up_dev->audio_dev);
    18d0:	e0bfff17 	ldw	r2,-4(fp)
    18d4:	11000517 	ldw	r4,20(r2)
    18d8:	000d6dc0 	call	d6dc <alt_up_audio_enable_write_interrupt>
		flag_denoise=0;
    18dc:	00800074 	movhi	r2,1
    18e0:	109ac344 	addi	r2,r2,27405
    18e4:	10000005 	stb	zero,0(r2)
	}
	if(command == 2){ //Denoise
    18e8:	00800074 	movhi	r2,1
    18ec:	109ac384 	addi	r2,r2,27406
    18f0:	10800003 	ldbu	r2,0(r2)
    18f4:	10803fcc 	andi	r2,r2,255
    18f8:	10800098 	cmpnei	r2,r2,2
    18fc:	10000d1e 	bne	r2,zero,1934 <run_command+0x190>
		int i;
		// reset counter to start playback
		buf_index_play = 0;
    1900:	00800074 	movhi	r2,1
    1904:	109ac604 	addi	r2,r2,27416
    1908:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    190c:	e0bfff17 	ldw	r2,-4(fp)
    1910:	11000517 	ldw	r4,20(r2)
    1914:	000d7f00 	call	d7f0 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (up_dev->audio_dev);
    1918:	e0bfff17 	ldw	r2,-4(fp)
    191c:	11000517 	ldw	r4,20(r2)
    1920:	000d6dc0 	call	d6dc <alt_up_audio_enable_write_interrupt>
		flag_denoise=1;
    1924:	00c00074 	movhi	r3,1
    1928:	18dac344 	addi	r3,r3,27405
    192c:	00800044 	movi	r2,1
    1930:	18800005 	stb	r2,0(r3)
	}
}
    1934:	e037883a 	mov	sp,fp
    1938:	dfc00217 	ldw	ra,8(sp)
    193c:	df000117 	ldw	fp,4(sp)
    1940:	dc000017 	ldw	r16,0(sp)
    1944:	dec00304 	addi	sp,sp,12
    1948:	f800283a 	ret

0000194c <command_det>:

unsigned char command_det(unsigned char buttons_stat) {
    194c:	defffd04 	addi	sp,sp,-12
    1950:	df000215 	stw	fp,8(sp)
    1954:	df000204 	addi	fp,sp,8
    1958:	e13ffe05 	stb	r4,-8(fp)
	if((buttons_stat >> 0) % 2){
    195c:	e0bffe03 	ldbu	r2,-8(fp)
    1960:	1080004c 	andi	r2,r2,1
    1964:	10803fcc 	andi	r2,r2,255
    1968:	1005003a 	cmpeq	r2,r2,zero
    196c:	1000501e 	bne	r2,zero,1ab0 <command_det+0x164>
		if(x_axis_mouse >= 35 && x_axis_mouse <= 100 &&
    1970:	d0a7db0b 	ldhu	r2,-24724(gp)
    1974:	10bfffcc 	andi	r2,r2,65535
    1978:	10a0001c 	xori	r2,r2,32768
    197c:	10a00004 	addi	r2,r2,-32768
    1980:	108008d0 	cmplti	r2,r2,35
    1984:	1000141e 	bne	r2,zero,19d8 <command_det+0x8c>
    1988:	d0a7db0b 	ldhu	r2,-24724(gp)
    198c:	10bfffcc 	andi	r2,r2,65535
    1990:	10a0001c 	xori	r2,r2,32768
    1994:	10a00004 	addi	r2,r2,-32768
    1998:	10801948 	cmpgei	r2,r2,101
    199c:	10000e1e 	bne	r2,zero,19d8 <command_det+0x8c>
    19a0:	d0a7da8b 	ldhu	r2,-24726(gp)
    19a4:	10bfffcc 	andi	r2,r2,65535
    19a8:	10a0001c 	xori	r2,r2,32768
    19ac:	10a00004 	addi	r2,r2,-32768
    19b0:	10801710 	cmplti	r2,r2,92
    19b4:	1000081e 	bne	r2,zero,19d8 <command_det+0x8c>
    19b8:	d0a7da8b 	ldhu	r2,-24726(gp)
    19bc:	10bfffcc 	andi	r2,r2,65535
    19c0:	10a0001c 	xori	r2,r2,32768
    19c4:	10a00004 	addi	r2,r2,-32768
    19c8:	10802248 	cmpgei	r2,r2,137
    19cc:	1000021e 	bne	r2,zero,19d8 <command_det+0x8c>
		   y_axis_mouse >= 92 && y_axis_mouse <= 136)
			return 0;
    19d0:	e03fff15 	stw	zero,-4(fp)
    19d4:	00003806 	br	1ab8 <command_det+0x16c>
		else if(x_axis_mouse >= 125 && x_axis_mouse <= 190 &&
    19d8:	d0a7db0b 	ldhu	r2,-24724(gp)
    19dc:	10bfffcc 	andi	r2,r2,65535
    19e0:	10a0001c 	xori	r2,r2,32768
    19e4:	10a00004 	addi	r2,r2,-32768
    19e8:	10801f50 	cmplti	r2,r2,125
    19ec:	1000151e 	bne	r2,zero,1a44 <command_det+0xf8>
    19f0:	d0a7db0b 	ldhu	r2,-24724(gp)
    19f4:	10bfffcc 	andi	r2,r2,65535
    19f8:	10a0001c 	xori	r2,r2,32768
    19fc:	10a00004 	addi	r2,r2,-32768
    1a00:	10802fc8 	cmpgei	r2,r2,191
    1a04:	10000f1e 	bne	r2,zero,1a44 <command_det+0xf8>
    1a08:	d0a7da8b 	ldhu	r2,-24726(gp)
    1a0c:	10bfffcc 	andi	r2,r2,65535
    1a10:	10a0001c 	xori	r2,r2,32768
    1a14:	10a00004 	addi	r2,r2,-32768
    1a18:	10801710 	cmplti	r2,r2,92
    1a1c:	1000091e 	bne	r2,zero,1a44 <command_det+0xf8>
    1a20:	d0a7da8b 	ldhu	r2,-24726(gp)
    1a24:	10bfffcc 	andi	r2,r2,65535
    1a28:	10a0001c 	xori	r2,r2,32768
    1a2c:	10a00004 	addi	r2,r2,-32768
    1a30:	10802248 	cmpgei	r2,r2,137
    1a34:	1000031e 	bne	r2,zero,1a44 <command_det+0xf8>
				y_axis_mouse >= 92 && y_axis_mouse <= 136)
			return 1;
    1a38:	00800044 	movi	r2,1
    1a3c:	e0bfff15 	stw	r2,-4(fp)
    1a40:	00001d06 	br	1ab8 <command_det+0x16c>
		else if(x_axis_mouse >= 215 && x_axis_mouse <= 280 &&
    1a44:	d0a7db0b 	ldhu	r2,-24724(gp)
    1a48:	10bfffcc 	andi	r2,r2,65535
    1a4c:	10a0001c 	xori	r2,r2,32768
    1a50:	10a00004 	addi	r2,r2,-32768
    1a54:	108035d0 	cmplti	r2,r2,215
    1a58:	1000151e 	bne	r2,zero,1ab0 <command_det+0x164>
    1a5c:	d0a7db0b 	ldhu	r2,-24724(gp)
    1a60:	10bfffcc 	andi	r2,r2,65535
    1a64:	10a0001c 	xori	r2,r2,32768
    1a68:	10a00004 	addi	r2,r2,-32768
    1a6c:	10804648 	cmpgei	r2,r2,281
    1a70:	10000f1e 	bne	r2,zero,1ab0 <command_det+0x164>
    1a74:	d0a7da8b 	ldhu	r2,-24726(gp)
    1a78:	10bfffcc 	andi	r2,r2,65535
    1a7c:	10a0001c 	xori	r2,r2,32768
    1a80:	10a00004 	addi	r2,r2,-32768
    1a84:	10801710 	cmplti	r2,r2,92
    1a88:	1000091e 	bne	r2,zero,1ab0 <command_det+0x164>
    1a8c:	d0a7da8b 	ldhu	r2,-24726(gp)
    1a90:	10bfffcc 	andi	r2,r2,65535
    1a94:	10a0001c 	xori	r2,r2,32768
    1a98:	10a00004 	addi	r2,r2,-32768
    1a9c:	10802248 	cmpgei	r2,r2,137
    1aa0:	1000031e 	bne	r2,zero,1ab0 <command_det+0x164>
				y_axis_mouse >= 92 && y_axis_mouse <= 136)
			return 2;
    1aa4:	00800084 	movi	r2,2
    1aa8:	e0bfff15 	stw	r2,-4(fp)
    1aac:	00000206 	br	1ab8 <command_det+0x16c>
	}
	return -1;
    1ab0:	00803fc4 	movi	r2,255
    1ab4:	e0bfff15 	stw	r2,-4(fp)
    1ab8:	e0bfff17 	ldw	r2,-4(fp)
}
    1abc:	e037883a 	mov	sp,fp
    1ac0:	df000017 	ldw	fp,0(sp)
    1ac4:	dec00104 	addi	sp,sp,4
    1ac8:	f800283a 	ret

00001acc <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    1acc:	defffa04 	addi	sp,sp,-24
    1ad0:	dfc00515 	stw	ra,20(sp)
    1ad4:	df000415 	stw	fp,16(sp)
    1ad8:	df000404 	addi	fp,sp,16
    1adc:	e13ffe15 	stw	r4,-8(fp)
    1ae0:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    1ae4:	e0bffe17 	ldw	r2,-8(fp)
    1ae8:	10800517 	ldw	r2,20(r2)
    1aec:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    1af0:	e0bffe17 	ldw	r2,-8(fp)
    1af4:	10800017 	ldw	r2,0(r2)
    1af8:	10800a17 	ldw	r2,40(r2)
    1afc:	10800304 	addi	r2,r2,12
    1b00:	10800037 	ldwio	r2,0(r2)
    1b04:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    1b08:	e0bffe17 	ldw	r2,-8(fp)
    1b0c:	10800017 	ldw	r2,0(r2)
    1b10:	10800a17 	ldw	r2,40(r2)
    1b14:	10800304 	addi	r2,r2,12
    1b18:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    1b1c:	e0bffc17 	ldw	r2,-16(fp)
    1b20:	10800098 	cmpnei	r2,r2,2
    1b24:	1000081e 	bne	r2,zero,1b48 <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    1b28:	00800074 	movhi	r2,1
    1b2c:	109ac704 	addi	r2,r2,27420
    1b30:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    1b34:	e13ffd17 	ldw	r4,-12(fp)
    1b38:	000d7f00 	call	d7f0 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    1b3c:	e13ffd17 	ldw	r4,-12(fp)
    1b40:	000d6400 	call	d640 <alt_up_audio_enable_read_interrupt>
    1b44:	00000a06 	br	1b70 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    1b48:	e0bffc17 	ldw	r2,-16(fp)
    1b4c:	10800118 	cmpnei	r2,r2,4
    1b50:	1000071e 	bne	r2,zero,1b70 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    1b54:	00800074 	movhi	r2,1
    1b58:	109ac604 	addi	r2,r2,27416
    1b5c:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    1b60:	e13ffd17 	ldw	r4,-12(fp)
    1b64:	000d7f00 	call	d7f0 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    1b68:	e13ffd17 	ldw	r4,-12(fp)
    1b6c:	000d6dc0 	call	d6dc <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    1b70:	e037883a 	mov	sp,fp
    1b74:	dfc00117 	ldw	ra,4(sp)
    1b78:	df000017 	ldw	fp,0(sp)
    1b7c:	dec00204 	addi	sp,sp,8
    1b80:	f800283a 	ret

00001b84 <__extendsfdf2>:
    1b84:	defff904 	addi	sp,sp,-28
    1b88:	d9000115 	stw	r4,4(sp)
    1b8c:	d9400204 	addi	r5,sp,8
    1b90:	d9000104 	addi	r4,sp,4
    1b94:	dfc00615 	stw	ra,24(sp)
    1b98:	00028100 	call	2810 <__unpack_f>
    1b9c:	d9c00517 	ldw	r7,20(sp)
    1ba0:	0011883a 	mov	r8,zero
    1ba4:	400697ba 	slli	r3,r8,30
    1ba8:	3812d0ba 	srli	r9,r7,2
    1bac:	380497ba 	slli	r2,r7,30
    1bb0:	d9000217 	ldw	r4,8(sp)
    1bb4:	d9400317 	ldw	r5,12(sp)
    1bb8:	d9800417 	ldw	r6,16(sp)
    1bbc:	48c6b03a 	or	r3,r9,r3
    1bc0:	100f883a 	mov	r7,r2
    1bc4:	d8c00015 	stw	r3,0(sp)
    1bc8:	00025600 	call	2560 <__make_dp>
    1bcc:	dfc00617 	ldw	ra,24(sp)
    1bd0:	dec00704 	addi	sp,sp,28
    1bd4:	f800283a 	ret

00001bd8 <__floatunsisf>:
    1bd8:	defff904 	addi	sp,sp,-28
    1bdc:	dc400515 	stw	r17,20(sp)
    1be0:	dc000415 	stw	r16,16(sp)
    1be4:	dfc00615 	stw	ra,24(sp)
    1be8:	04400784 	movi	r17,30
    1bec:	2021883a 	mov	r16,r4
    1bf0:	d8000115 	stw	zero,4(sp)
    1bf4:	2000091e 	bne	r4,zero,1c1c <__floatunsisf+0x44>
    1bf8:	00800084 	movi	r2,2
    1bfc:	d8800015 	stw	r2,0(sp)
    1c00:	d809883a 	mov	r4,sp
    1c04:	00026b00 	call	26b0 <__pack_f>
    1c08:	dfc00617 	ldw	ra,24(sp)
    1c0c:	dc400517 	ldw	r17,20(sp)
    1c10:	dc000417 	ldw	r16,16(sp)
    1c14:	dec00704 	addi	sp,sp,28
    1c18:	f800283a 	ret
    1c1c:	008000c4 	movi	r2,3
    1c20:	d9000315 	stw	r4,12(sp)
    1c24:	d8800015 	stw	r2,0(sp)
    1c28:	dc400215 	stw	r17,8(sp)
    1c2c:	00026300 	call	2630 <__clzsi2>
    1c30:	117fffc4 	addi	r5,r2,-1
    1c34:	0147c83a 	sub	r3,zero,r5
    1c38:	00800044 	movi	r2,1
    1c3c:	10c4983a 	sll	r2,r2,r3
    1c40:	80c6d83a 	srl	r3,r16,r3
    1c44:	8949c83a 	sub	r4,r17,r5
    1c48:	10bfffc4 	addi	r2,r2,-1
    1c4c:	8084703a 	and	r2,r16,r2
    1c50:	1004c03a 	cmpne	r2,r2,zero
    1c54:	1886b03a 	or	r3,r3,r2
    1c58:	28000c16 	blt	r5,zero,1c8c <__floatunsisf+0xb4>
    1c5c:	8144983a 	sll	r2,r16,r5
    1c60:	8947c83a 	sub	r3,r17,r5
    1c64:	283fe626 	beq	r5,zero,1c00 <__floatunsisf+0x28>
    1c68:	d809883a 	mov	r4,sp
    1c6c:	d8800315 	stw	r2,12(sp)
    1c70:	d8c00215 	stw	r3,8(sp)
    1c74:	00026b00 	call	26b0 <__pack_f>
    1c78:	dfc00617 	ldw	ra,24(sp)
    1c7c:	dc400517 	ldw	r17,20(sp)
    1c80:	dc000417 	ldw	r16,16(sp)
    1c84:	dec00704 	addi	sp,sp,28
    1c88:	f800283a 	ret
    1c8c:	d8c00315 	stw	r3,12(sp)
    1c90:	d9000215 	stw	r4,8(sp)
    1c94:	003fda06 	br	1c00 <__floatunsisf+0x28>

00001c98 <_fpadd_parts>:
    1c98:	defff804 	addi	sp,sp,-32
    1c9c:	dcc00315 	stw	r19,12(sp)
    1ca0:	2027883a 	mov	r19,r4
    1ca4:	21000017 	ldw	r4,0(r4)
    1ca8:	00c00044 	movi	r3,1
    1cac:	dd400515 	stw	r21,20(sp)
    1cb0:	dd000415 	stw	r20,16(sp)
    1cb4:	ddc00715 	stw	r23,28(sp)
    1cb8:	dd800615 	stw	r22,24(sp)
    1cbc:	dc800215 	stw	r18,8(sp)
    1cc0:	dc400115 	stw	r17,4(sp)
    1cc4:	dc000015 	stw	r16,0(sp)
    1cc8:	282b883a 	mov	r21,r5
    1ccc:	3029883a 	mov	r20,r6
    1cd0:	1900632e 	bgeu	r3,r4,1e60 <_fpadd_parts+0x1c8>
    1cd4:	28800017 	ldw	r2,0(r5)
    1cd8:	1880812e 	bgeu	r3,r2,1ee0 <_fpadd_parts+0x248>
    1cdc:	00c00104 	movi	r3,4
    1ce0:	20c0dc26 	beq	r4,r3,2054 <_fpadd_parts+0x3bc>
    1ce4:	10c07e26 	beq	r2,r3,1ee0 <_fpadd_parts+0x248>
    1ce8:	00c00084 	movi	r3,2
    1cec:	10c06726 	beq	r2,r3,1e8c <_fpadd_parts+0x1f4>
    1cf0:	20c07b26 	beq	r4,r3,1ee0 <_fpadd_parts+0x248>
    1cf4:	9dc00217 	ldw	r23,8(r19)
    1cf8:	28c00217 	ldw	r3,8(r5)
    1cfc:	9c400317 	ldw	r17,12(r19)
    1d00:	2bc00317 	ldw	r15,12(r5)
    1d04:	b8cdc83a 	sub	r6,r23,r3
    1d08:	9c800417 	ldw	r18,16(r19)
    1d0c:	2c000417 	ldw	r16,16(r5)
    1d10:	3009883a 	mov	r4,r6
    1d14:	30009716 	blt	r6,zero,1f74 <_fpadd_parts+0x2dc>
    1d18:	00800fc4 	movi	r2,63
    1d1c:	11806b16 	blt	r2,r6,1ecc <_fpadd_parts+0x234>
    1d20:	0100a40e 	bge	zero,r4,1fb4 <_fpadd_parts+0x31c>
    1d24:	35bff804 	addi	r22,r6,-32
    1d28:	b000bc16 	blt	r22,zero,201c <_fpadd_parts+0x384>
    1d2c:	8596d83a 	srl	r11,r16,r22
    1d30:	0019883a 	mov	r12,zero
    1d34:	0013883a 	mov	r9,zero
    1d38:	01000044 	movi	r4,1
    1d3c:	0015883a 	mov	r10,zero
    1d40:	b000be16 	blt	r22,zero,203c <_fpadd_parts+0x3a4>
    1d44:	2590983a 	sll	r8,r4,r22
    1d48:	000f883a 	mov	r7,zero
    1d4c:	00bfffc4 	movi	r2,-1
    1d50:	3889883a 	add	r4,r7,r2
    1d54:	408b883a 	add	r5,r8,r2
    1d58:	21cd803a 	cmpltu	r6,r4,r7
    1d5c:	314b883a 	add	r5,r6,r5
    1d60:	7904703a 	and	r2,r15,r4
    1d64:	8146703a 	and	r3,r16,r5
    1d68:	10c4b03a 	or	r2,r2,r3
    1d6c:	10000226 	beq	r2,zero,1d78 <_fpadd_parts+0xe0>
    1d70:	02400044 	movi	r9,1
    1d74:	0015883a 	mov	r10,zero
    1d78:	5a5eb03a 	or	r15,r11,r9
    1d7c:	62a0b03a 	or	r16,r12,r10
    1d80:	99400117 	ldw	r5,4(r19)
    1d84:	a8800117 	ldw	r2,4(r21)
    1d88:	28806e26 	beq	r5,r2,1f44 <_fpadd_parts+0x2ac>
    1d8c:	28006626 	beq	r5,zero,1f28 <_fpadd_parts+0x290>
    1d90:	7c45c83a 	sub	r2,r15,r17
    1d94:	7889803a 	cmpltu	r4,r15,r2
    1d98:	8487c83a 	sub	r3,r16,r18
    1d9c:	1909c83a 	sub	r4,r3,r4
    1da0:	100d883a 	mov	r6,r2
    1da4:	200f883a 	mov	r7,r4
    1da8:	38007716 	blt	r7,zero,1f88 <_fpadd_parts+0x2f0>
    1dac:	a5c00215 	stw	r23,8(r20)
    1db0:	a1c00415 	stw	r7,16(r20)
    1db4:	a0000115 	stw	zero,4(r20)
    1db8:	a1800315 	stw	r6,12(r20)
    1dbc:	a2000317 	ldw	r8,12(r20)
    1dc0:	a2400417 	ldw	r9,16(r20)
    1dc4:	00bfffc4 	movi	r2,-1
    1dc8:	408b883a 	add	r5,r8,r2
    1dcc:	2a09803a 	cmpltu	r4,r5,r8
    1dd0:	488d883a 	add	r6,r9,r2
    1dd4:	01c40034 	movhi	r7,4096
    1dd8:	39ffffc4 	addi	r7,r7,-1
    1ddc:	218d883a 	add	r6,r4,r6
    1de0:	39801736 	bltu	r7,r6,1e40 <_fpadd_parts+0x1a8>
    1de4:	31c06526 	beq	r6,r7,1f7c <_fpadd_parts+0x2e4>
    1de8:	a3000217 	ldw	r12,8(r20)
    1dec:	4209883a 	add	r4,r8,r8
    1df0:	00bfffc4 	movi	r2,-1
    1df4:	220f803a 	cmpltu	r7,r4,r8
    1df8:	4a4b883a 	add	r5,r9,r9
    1dfc:	394f883a 	add	r7,r7,r5
    1e00:	2095883a 	add	r10,r4,r2
    1e04:	3897883a 	add	r11,r7,r2
    1e08:	510d803a 	cmpltu	r6,r10,r4
    1e0c:	6099883a 	add	r12,r12,r2
    1e10:	32d7883a 	add	r11,r6,r11
    1e14:	00840034 	movhi	r2,4096
    1e18:	10bfffc4 	addi	r2,r2,-1
    1e1c:	2011883a 	mov	r8,r4
    1e20:	3813883a 	mov	r9,r7
    1e24:	a1000315 	stw	r4,12(r20)
    1e28:	a1c00415 	stw	r7,16(r20)
    1e2c:	a3000215 	stw	r12,8(r20)
    1e30:	12c00336 	bltu	r2,r11,1e40 <_fpadd_parts+0x1a8>
    1e34:	58bfed1e 	bne	r11,r2,1dec <_fpadd_parts+0x154>
    1e38:	00bfff84 	movi	r2,-2
    1e3c:	12bfeb2e 	bgeu	r2,r10,1dec <_fpadd_parts+0x154>
    1e40:	a2800417 	ldw	r10,16(r20)
    1e44:	008000c4 	movi	r2,3
    1e48:	00c80034 	movhi	r3,8192
    1e4c:	18ffffc4 	addi	r3,r3,-1
    1e50:	a2400317 	ldw	r9,12(r20)
    1e54:	a0800015 	stw	r2,0(r20)
    1e58:	1a802336 	bltu	r3,r10,1ee8 <_fpadd_parts+0x250>
    1e5c:	a027883a 	mov	r19,r20
    1e60:	9805883a 	mov	r2,r19
    1e64:	ddc00717 	ldw	r23,28(sp)
    1e68:	dd800617 	ldw	r22,24(sp)
    1e6c:	dd400517 	ldw	r21,20(sp)
    1e70:	dd000417 	ldw	r20,16(sp)
    1e74:	dcc00317 	ldw	r19,12(sp)
    1e78:	dc800217 	ldw	r18,8(sp)
    1e7c:	dc400117 	ldw	r17,4(sp)
    1e80:	dc000017 	ldw	r16,0(sp)
    1e84:	dec00804 	addi	sp,sp,32
    1e88:	f800283a 	ret
    1e8c:	20fff41e 	bne	r4,r3,1e60 <_fpadd_parts+0x1c8>
    1e90:	31000015 	stw	r4,0(r6)
    1e94:	98800117 	ldw	r2,4(r19)
    1e98:	30800115 	stw	r2,4(r6)
    1e9c:	98c00217 	ldw	r3,8(r19)
    1ea0:	30c00215 	stw	r3,8(r6)
    1ea4:	98800317 	ldw	r2,12(r19)
    1ea8:	30800315 	stw	r2,12(r6)
    1eac:	98c00417 	ldw	r3,16(r19)
    1eb0:	30c00415 	stw	r3,16(r6)
    1eb4:	98800117 	ldw	r2,4(r19)
    1eb8:	28c00117 	ldw	r3,4(r5)
    1ebc:	3027883a 	mov	r19,r6
    1ec0:	10c4703a 	and	r2,r2,r3
    1ec4:	30800115 	stw	r2,4(r6)
    1ec8:	003fe506 	br	1e60 <_fpadd_parts+0x1c8>
    1ecc:	1dc02616 	blt	r3,r23,1f68 <_fpadd_parts+0x2d0>
    1ed0:	0023883a 	mov	r17,zero
    1ed4:	182f883a 	mov	r23,r3
    1ed8:	0025883a 	mov	r18,zero
    1edc:	003fa806 	br	1d80 <_fpadd_parts+0xe8>
    1ee0:	a827883a 	mov	r19,r21
    1ee4:	003fde06 	br	1e60 <_fpadd_parts+0x1c8>
    1ee8:	01800044 	movi	r6,1
    1eec:	500497fa 	slli	r2,r10,31
    1ef0:	4808d07a 	srli	r4,r9,1
    1ef4:	518ad83a 	srl	r5,r10,r6
    1ef8:	a2000217 	ldw	r8,8(r20)
    1efc:	1108b03a 	or	r4,r2,r4
    1f00:	0007883a 	mov	r3,zero
    1f04:	4984703a 	and	r2,r9,r6
    1f08:	208cb03a 	or	r6,r4,r2
    1f0c:	28ceb03a 	or	r7,r5,r3
    1f10:	42000044 	addi	r8,r8,1
    1f14:	a027883a 	mov	r19,r20
    1f18:	a1c00415 	stw	r7,16(r20)
    1f1c:	a2000215 	stw	r8,8(r20)
    1f20:	a1800315 	stw	r6,12(r20)
    1f24:	003fce06 	br	1e60 <_fpadd_parts+0x1c8>
    1f28:	8bc5c83a 	sub	r2,r17,r15
    1f2c:	8889803a 	cmpltu	r4,r17,r2
    1f30:	9407c83a 	sub	r3,r18,r16
    1f34:	1909c83a 	sub	r4,r3,r4
    1f38:	100d883a 	mov	r6,r2
    1f3c:	200f883a 	mov	r7,r4
    1f40:	003f9906 	br	1da8 <_fpadd_parts+0x110>
    1f44:	7c45883a 	add	r2,r15,r17
    1f48:	13c9803a 	cmpltu	r4,r2,r15
    1f4c:	8487883a 	add	r3,r16,r18
    1f50:	20c9883a 	add	r4,r4,r3
    1f54:	a1400115 	stw	r5,4(r20)
    1f58:	a5c00215 	stw	r23,8(r20)
    1f5c:	a0800315 	stw	r2,12(r20)
    1f60:	a1000415 	stw	r4,16(r20)
    1f64:	003fb606 	br	1e40 <_fpadd_parts+0x1a8>
    1f68:	001f883a 	mov	r15,zero
    1f6c:	0021883a 	mov	r16,zero
    1f70:	003f8306 	br	1d80 <_fpadd_parts+0xe8>
    1f74:	018dc83a 	sub	r6,zero,r6
    1f78:	003f6706 	br	1d18 <_fpadd_parts+0x80>
    1f7c:	00bfff84 	movi	r2,-2
    1f80:	117faf36 	bltu	r2,r5,1e40 <_fpadd_parts+0x1a8>
    1f84:	003f9806 	br	1de8 <_fpadd_parts+0x150>
    1f88:	0005883a 	mov	r2,zero
    1f8c:	1189c83a 	sub	r4,r2,r6
    1f90:	1105803a 	cmpltu	r2,r2,r4
    1f94:	01cbc83a 	sub	r5,zero,r7
    1f98:	2885c83a 	sub	r2,r5,r2
    1f9c:	01800044 	movi	r6,1
    1fa0:	a1800115 	stw	r6,4(r20)
    1fa4:	a5c00215 	stw	r23,8(r20)
    1fa8:	a1000315 	stw	r4,12(r20)
    1fac:	a0800415 	stw	r2,16(r20)
    1fb0:	003f8206 	br	1dbc <_fpadd_parts+0x124>
    1fb4:	203f7226 	beq	r4,zero,1d80 <_fpadd_parts+0xe8>
    1fb8:	35bff804 	addi	r22,r6,-32
    1fbc:	b9af883a 	add	r23,r23,r6
    1fc0:	b0003116 	blt	r22,zero,2088 <_fpadd_parts+0x3f0>
    1fc4:	959ad83a 	srl	r13,r18,r22
    1fc8:	001d883a 	mov	r14,zero
    1fcc:	000f883a 	mov	r7,zero
    1fd0:	01000044 	movi	r4,1
    1fd4:	0011883a 	mov	r8,zero
    1fd8:	b0002516 	blt	r22,zero,2070 <_fpadd_parts+0x3d8>
    1fdc:	2594983a 	sll	r10,r4,r22
    1fe0:	0013883a 	mov	r9,zero
    1fe4:	00bfffc4 	movi	r2,-1
    1fe8:	4889883a 	add	r4,r9,r2
    1fec:	508b883a 	add	r5,r10,r2
    1ff0:	224d803a 	cmpltu	r6,r4,r9
    1ff4:	314b883a 	add	r5,r6,r5
    1ff8:	8904703a 	and	r2,r17,r4
    1ffc:	9146703a 	and	r3,r18,r5
    2000:	10c4b03a 	or	r2,r2,r3
    2004:	10000226 	beq	r2,zero,2010 <_fpadd_parts+0x378>
    2008:	01c00044 	movi	r7,1
    200c:	0011883a 	mov	r8,zero
    2010:	69e2b03a 	or	r17,r13,r7
    2014:	7224b03a 	or	r18,r14,r8
    2018:	003f5906 	br	1d80 <_fpadd_parts+0xe8>
    201c:	8407883a 	add	r3,r16,r16
    2020:	008007c4 	movi	r2,31
    2024:	1185c83a 	sub	r2,r2,r6
    2028:	1886983a 	sll	r3,r3,r2
    202c:	7996d83a 	srl	r11,r15,r6
    2030:	8198d83a 	srl	r12,r16,r6
    2034:	1ad6b03a 	or	r11,r3,r11
    2038:	003f3e06 	br	1d34 <_fpadd_parts+0x9c>
    203c:	2006d07a 	srli	r3,r4,1
    2040:	008007c4 	movi	r2,31
    2044:	1185c83a 	sub	r2,r2,r6
    2048:	1890d83a 	srl	r8,r3,r2
    204c:	218e983a 	sll	r7,r4,r6
    2050:	003f3e06 	br	1d4c <_fpadd_parts+0xb4>
    2054:	113f821e 	bne	r2,r4,1e60 <_fpadd_parts+0x1c8>
    2058:	28c00117 	ldw	r3,4(r5)
    205c:	98800117 	ldw	r2,4(r19)
    2060:	10ff7f26 	beq	r2,r3,1e60 <_fpadd_parts+0x1c8>
    2064:	04c00074 	movhi	r19,1
    2068:	9cca0904 	addi	r19,r19,10276
    206c:	003f7c06 	br	1e60 <_fpadd_parts+0x1c8>
    2070:	2006d07a 	srli	r3,r4,1
    2074:	008007c4 	movi	r2,31
    2078:	1185c83a 	sub	r2,r2,r6
    207c:	1894d83a 	srl	r10,r3,r2
    2080:	2192983a 	sll	r9,r4,r6
    2084:	003fd706 	br	1fe4 <_fpadd_parts+0x34c>
    2088:	9487883a 	add	r3,r18,r18
    208c:	008007c4 	movi	r2,31
    2090:	1185c83a 	sub	r2,r2,r6
    2094:	1886983a 	sll	r3,r3,r2
    2098:	899ad83a 	srl	r13,r17,r6
    209c:	919cd83a 	srl	r14,r18,r6
    20a0:	1b5ab03a 	or	r13,r3,r13
    20a4:	003fc906 	br	1fcc <_fpadd_parts+0x334>

000020a8 <__subdf3>:
    20a8:	deffea04 	addi	sp,sp,-88
    20ac:	dcc01415 	stw	r19,80(sp)
    20b0:	dcc00404 	addi	r19,sp,16
    20b4:	2011883a 	mov	r8,r4
    20b8:	2813883a 	mov	r9,r5
    20bc:	dc401315 	stw	r17,76(sp)
    20c0:	d809883a 	mov	r4,sp
    20c4:	980b883a 	mov	r5,r19
    20c8:	dc400904 	addi	r17,sp,36
    20cc:	dfc01515 	stw	ra,84(sp)
    20d0:	da400115 	stw	r9,4(sp)
    20d4:	d9c00315 	stw	r7,12(sp)
    20d8:	da000015 	stw	r8,0(sp)
    20dc:	d9800215 	stw	r6,8(sp)
    20e0:	0002bec0 	call	2bec <__unpack_d>
    20e4:	d9000204 	addi	r4,sp,8
    20e8:	880b883a 	mov	r5,r17
    20ec:	0002bec0 	call	2bec <__unpack_d>
    20f0:	d8800a17 	ldw	r2,40(sp)
    20f4:	880b883a 	mov	r5,r17
    20f8:	9809883a 	mov	r4,r19
    20fc:	d9800e04 	addi	r6,sp,56
    2100:	1080005c 	xori	r2,r2,1
    2104:	d8800a15 	stw	r2,40(sp)
    2108:	0001c980 	call	1c98 <_fpadd_parts>
    210c:	1009883a 	mov	r4,r2
    2110:	00028d80 	call	28d8 <__pack_d>
    2114:	dfc01517 	ldw	ra,84(sp)
    2118:	dcc01417 	ldw	r19,80(sp)
    211c:	dc401317 	ldw	r17,76(sp)
    2120:	dec01604 	addi	sp,sp,88
    2124:	f800283a 	ret

00002128 <__adddf3>:
    2128:	deffea04 	addi	sp,sp,-88
    212c:	dcc01415 	stw	r19,80(sp)
    2130:	dcc00404 	addi	r19,sp,16
    2134:	2011883a 	mov	r8,r4
    2138:	2813883a 	mov	r9,r5
    213c:	dc401315 	stw	r17,76(sp)
    2140:	d809883a 	mov	r4,sp
    2144:	980b883a 	mov	r5,r19
    2148:	dc400904 	addi	r17,sp,36
    214c:	dfc01515 	stw	ra,84(sp)
    2150:	da400115 	stw	r9,4(sp)
    2154:	d9c00315 	stw	r7,12(sp)
    2158:	da000015 	stw	r8,0(sp)
    215c:	d9800215 	stw	r6,8(sp)
    2160:	0002bec0 	call	2bec <__unpack_d>
    2164:	d9000204 	addi	r4,sp,8
    2168:	880b883a 	mov	r5,r17
    216c:	0002bec0 	call	2bec <__unpack_d>
    2170:	d9800e04 	addi	r6,sp,56
    2174:	9809883a 	mov	r4,r19
    2178:	880b883a 	mov	r5,r17
    217c:	0001c980 	call	1c98 <_fpadd_parts>
    2180:	1009883a 	mov	r4,r2
    2184:	00028d80 	call	28d8 <__pack_d>
    2188:	dfc01517 	ldw	ra,84(sp)
    218c:	dcc01417 	ldw	r19,80(sp)
    2190:	dc401317 	ldw	r17,76(sp)
    2194:	dec01604 	addi	sp,sp,88
    2198:	f800283a 	ret

0000219c <__muldf3>:
    219c:	deffe004 	addi	sp,sp,-128
    21a0:	dc401815 	stw	r17,96(sp)
    21a4:	dc400404 	addi	r17,sp,16
    21a8:	2011883a 	mov	r8,r4
    21ac:	2813883a 	mov	r9,r5
    21b0:	dc001715 	stw	r16,92(sp)
    21b4:	d809883a 	mov	r4,sp
    21b8:	880b883a 	mov	r5,r17
    21bc:	dc000904 	addi	r16,sp,36
    21c0:	dfc01f15 	stw	ra,124(sp)
    21c4:	da400115 	stw	r9,4(sp)
    21c8:	d9c00315 	stw	r7,12(sp)
    21cc:	da000015 	stw	r8,0(sp)
    21d0:	d9800215 	stw	r6,8(sp)
    21d4:	ddc01e15 	stw	r23,120(sp)
    21d8:	dd801d15 	stw	r22,116(sp)
    21dc:	dd401c15 	stw	r21,112(sp)
    21e0:	dd001b15 	stw	r20,108(sp)
    21e4:	dcc01a15 	stw	r19,104(sp)
    21e8:	dc801915 	stw	r18,100(sp)
    21ec:	0002bec0 	call	2bec <__unpack_d>
    21f0:	d9000204 	addi	r4,sp,8
    21f4:	800b883a 	mov	r5,r16
    21f8:	0002bec0 	call	2bec <__unpack_d>
    21fc:	d9000417 	ldw	r4,16(sp)
    2200:	00800044 	movi	r2,1
    2204:	1100102e 	bgeu	r2,r4,2248 <__muldf3+0xac>
    2208:	d8c00917 	ldw	r3,36(sp)
    220c:	10c0062e 	bgeu	r2,r3,2228 <__muldf3+0x8c>
    2210:	00800104 	movi	r2,4
    2214:	20800a26 	beq	r4,r2,2240 <__muldf3+0xa4>
    2218:	1880cc26 	beq	r3,r2,254c <__muldf3+0x3b0>
    221c:	00800084 	movi	r2,2
    2220:	20800926 	beq	r4,r2,2248 <__muldf3+0xac>
    2224:	1880191e 	bne	r3,r2,228c <__muldf3+0xf0>
    2228:	d8c00a17 	ldw	r3,40(sp)
    222c:	d8800517 	ldw	r2,20(sp)
    2230:	8009883a 	mov	r4,r16
    2234:	10c4c03a 	cmpne	r2,r2,r3
    2238:	d8800a15 	stw	r2,40(sp)
    223c:	00000706 	br	225c <__muldf3+0xc0>
    2240:	00800084 	movi	r2,2
    2244:	1880c326 	beq	r3,r2,2554 <__muldf3+0x3b8>
    2248:	d8800517 	ldw	r2,20(sp)
    224c:	d8c00a17 	ldw	r3,40(sp)
    2250:	8809883a 	mov	r4,r17
    2254:	10c4c03a 	cmpne	r2,r2,r3
    2258:	d8800515 	stw	r2,20(sp)
    225c:	00028d80 	call	28d8 <__pack_d>
    2260:	dfc01f17 	ldw	ra,124(sp)
    2264:	ddc01e17 	ldw	r23,120(sp)
    2268:	dd801d17 	ldw	r22,116(sp)
    226c:	dd401c17 	ldw	r21,112(sp)
    2270:	dd001b17 	ldw	r20,108(sp)
    2274:	dcc01a17 	ldw	r19,104(sp)
    2278:	dc801917 	ldw	r18,100(sp)
    227c:	dc401817 	ldw	r17,96(sp)
    2280:	dc001717 	ldw	r16,92(sp)
    2284:	dec02004 	addi	sp,sp,128
    2288:	f800283a 	ret
    228c:	dd800717 	ldw	r22,28(sp)
    2290:	dc800c17 	ldw	r18,48(sp)
    2294:	002b883a 	mov	r21,zero
    2298:	0023883a 	mov	r17,zero
    229c:	a80b883a 	mov	r5,r21
    22a0:	b00d883a 	mov	r6,r22
    22a4:	880f883a 	mov	r7,r17
    22a8:	ddc00817 	ldw	r23,32(sp)
    22ac:	dcc00d17 	ldw	r19,52(sp)
    22b0:	9009883a 	mov	r4,r18
    22b4:	00025980 	call	2598 <__muldi3>
    22b8:	001b883a 	mov	r13,zero
    22bc:	680f883a 	mov	r7,r13
    22c0:	b009883a 	mov	r4,r22
    22c4:	000b883a 	mov	r5,zero
    22c8:	980d883a 	mov	r6,r19
    22cc:	b82d883a 	mov	r22,r23
    22d0:	002f883a 	mov	r23,zero
    22d4:	db401615 	stw	r13,88(sp)
    22d8:	d8801315 	stw	r2,76(sp)
    22dc:	d8c01415 	stw	r3,80(sp)
    22e0:	dcc01515 	stw	r19,84(sp)
    22e4:	00025980 	call	2598 <__muldi3>
    22e8:	b00d883a 	mov	r6,r22
    22ec:	000b883a 	mov	r5,zero
    22f0:	9009883a 	mov	r4,r18
    22f4:	b80f883a 	mov	r7,r23
    22f8:	1021883a 	mov	r16,r2
    22fc:	1823883a 	mov	r17,r3
    2300:	00025980 	call	2598 <__muldi3>
    2304:	8085883a 	add	r2,r16,r2
    2308:	140d803a 	cmpltu	r6,r2,r16
    230c:	88c7883a 	add	r3,r17,r3
    2310:	30cd883a 	add	r6,r6,r3
    2314:	1029883a 	mov	r20,r2
    2318:	302b883a 	mov	r21,r6
    231c:	da801317 	ldw	r10,76(sp)
    2320:	dac01417 	ldw	r11,80(sp)
    2324:	db001517 	ldw	r12,84(sp)
    2328:	db401617 	ldw	r13,88(sp)
    232c:	3440612e 	bgeu	r6,r17,24b4 <__muldf3+0x318>
    2330:	0009883a 	mov	r4,zero
    2334:	5105883a 	add	r2,r10,r4
    2338:	128d803a 	cmpltu	r6,r2,r10
    233c:	5d07883a 	add	r3,r11,r20
    2340:	30cd883a 	add	r6,r6,r3
    2344:	0021883a 	mov	r16,zero
    2348:	04400044 	movi	r17,1
    234c:	1025883a 	mov	r18,r2
    2350:	3027883a 	mov	r19,r6
    2354:	32c06236 	bltu	r6,r11,24e0 <__muldf3+0x344>
    2358:	59807a26 	beq	r11,r6,2544 <__muldf3+0x3a8>
    235c:	680b883a 	mov	r5,r13
    2360:	b80f883a 	mov	r7,r23
    2364:	6009883a 	mov	r4,r12
    2368:	b00d883a 	mov	r6,r22
    236c:	00025980 	call	2598 <__muldi3>
    2370:	1009883a 	mov	r4,r2
    2374:	000f883a 	mov	r7,zero
    2378:	1545883a 	add	r2,r2,r21
    237c:	1111803a 	cmpltu	r8,r2,r4
    2380:	19c7883a 	add	r3,r3,r7
    2384:	40c7883a 	add	r3,r8,r3
    2388:	88cb883a 	add	r5,r17,r3
    238c:	d8c00617 	ldw	r3,24(sp)
    2390:	8089883a 	add	r4,r16,r2
    2394:	d8800b17 	ldw	r2,44(sp)
    2398:	18c00104 	addi	r3,r3,4
    239c:	240d803a 	cmpltu	r6,r4,r16
    23a0:	10c7883a 	add	r3,r2,r3
    23a4:	2013883a 	mov	r9,r4
    23a8:	d8800a17 	ldw	r2,40(sp)
    23ac:	d9000517 	ldw	r4,20(sp)
    23b0:	314d883a 	add	r6,r6,r5
    23b4:	3015883a 	mov	r10,r6
    23b8:	2088c03a 	cmpne	r4,r4,r2
    23bc:	00880034 	movhi	r2,8192
    23c0:	10bfffc4 	addi	r2,r2,-1
    23c4:	d9000f15 	stw	r4,60(sp)
    23c8:	d8c01015 	stw	r3,64(sp)
    23cc:	1180162e 	bgeu	r2,r6,2428 <__muldf3+0x28c>
    23d0:	1811883a 	mov	r8,r3
    23d4:	101f883a 	mov	r15,r2
    23d8:	980497fa 	slli	r2,r19,31
    23dc:	9016d07a 	srli	r11,r18,1
    23e0:	500697fa 	slli	r3,r10,31
    23e4:	480cd07a 	srli	r6,r9,1
    23e8:	500ed07a 	srli	r7,r10,1
    23ec:	12d6b03a 	or	r11,r2,r11
    23f0:	00800044 	movi	r2,1
    23f4:	198cb03a 	or	r6,r3,r6
    23f8:	4888703a 	and	r4,r9,r2
    23fc:	9818d07a 	srli	r12,r19,1
    2400:	001b883a 	mov	r13,zero
    2404:	03a00034 	movhi	r14,32768
    2408:	3013883a 	mov	r9,r6
    240c:	3815883a 	mov	r10,r7
    2410:	4091883a 	add	r8,r8,r2
    2414:	20000226 	beq	r4,zero,2420 <__muldf3+0x284>
    2418:	5b64b03a 	or	r18,r11,r13
    241c:	63a6b03a 	or	r19,r12,r14
    2420:	7abfed36 	bltu	r15,r10,23d8 <__muldf3+0x23c>
    2424:	da001015 	stw	r8,64(sp)
    2428:	00840034 	movhi	r2,4096
    242c:	10bfffc4 	addi	r2,r2,-1
    2430:	12801436 	bltu	r2,r10,2484 <__muldf3+0x2e8>
    2434:	da001017 	ldw	r8,64(sp)
    2438:	101f883a 	mov	r15,r2
    243c:	4a45883a 	add	r2,r9,r9
    2440:	124d803a 	cmpltu	r6,r2,r9
    2444:	5287883a 	add	r3,r10,r10
    2448:	9497883a 	add	r11,r18,r18
    244c:	5c8f803a 	cmpltu	r7,r11,r18
    2450:	9cd9883a 	add	r12,r19,r19
    2454:	01000044 	movi	r4,1
    2458:	30cd883a 	add	r6,r6,r3
    245c:	3b0f883a 	add	r7,r7,r12
    2460:	423fffc4 	addi	r8,r8,-1
    2464:	1013883a 	mov	r9,r2
    2468:	3015883a 	mov	r10,r6
    246c:	111ab03a 	or	r13,r2,r4
    2470:	98003016 	blt	r19,zero,2534 <__muldf3+0x398>
    2474:	5825883a 	mov	r18,r11
    2478:	3827883a 	mov	r19,r7
    247c:	7abfef2e 	bgeu	r15,r10,243c <__muldf3+0x2a0>
    2480:	da001015 	stw	r8,64(sp)
    2484:	00803fc4 	movi	r2,255
    2488:	488e703a 	and	r7,r9,r2
    248c:	00802004 	movi	r2,128
    2490:	0007883a 	mov	r3,zero
    2494:	0011883a 	mov	r8,zero
    2498:	38801826 	beq	r7,r2,24fc <__muldf3+0x360>
    249c:	008000c4 	movi	r2,3
    24a0:	d9000e04 	addi	r4,sp,56
    24a4:	da801215 	stw	r10,72(sp)
    24a8:	d8800e15 	stw	r2,56(sp)
    24ac:	da401115 	stw	r9,68(sp)
    24b0:	003f6a06 	br	225c <__muldf3+0xc0>
    24b4:	89802126 	beq	r17,r6,253c <__muldf3+0x3a0>
    24b8:	0009883a 	mov	r4,zero
    24bc:	5105883a 	add	r2,r10,r4
    24c0:	128d803a 	cmpltu	r6,r2,r10
    24c4:	5d07883a 	add	r3,r11,r20
    24c8:	30cd883a 	add	r6,r6,r3
    24cc:	0021883a 	mov	r16,zero
    24d0:	0023883a 	mov	r17,zero
    24d4:	1025883a 	mov	r18,r2
    24d8:	3027883a 	mov	r19,r6
    24dc:	32ff9e2e 	bgeu	r6,r11,2358 <__muldf3+0x1bc>
    24e0:	00800044 	movi	r2,1
    24e4:	8089883a 	add	r4,r16,r2
    24e8:	240d803a 	cmpltu	r6,r4,r16
    24ec:	344d883a 	add	r6,r6,r17
    24f0:	2021883a 	mov	r16,r4
    24f4:	3023883a 	mov	r17,r6
    24f8:	003f9806 	br	235c <__muldf3+0x1c0>
    24fc:	403fe71e 	bne	r8,zero,249c <__muldf3+0x300>
    2500:	01004004 	movi	r4,256
    2504:	4904703a 	and	r2,r9,r4
    2508:	10c4b03a 	or	r2,r2,r3
    250c:	103fe31e 	bne	r2,zero,249c <__muldf3+0x300>
    2510:	94c4b03a 	or	r2,r18,r19
    2514:	103fe126 	beq	r2,zero,249c <__muldf3+0x300>
    2518:	49c5883a 	add	r2,r9,r7
    251c:	1251803a 	cmpltu	r8,r2,r9
    2520:	4291883a 	add	r8,r8,r10
    2524:	013fc004 	movi	r4,-256
    2528:	1112703a 	and	r9,r2,r4
    252c:	4015883a 	mov	r10,r8
    2530:	003fda06 	br	249c <__muldf3+0x300>
    2534:	6813883a 	mov	r9,r13
    2538:	003fce06 	br	2474 <__muldf3+0x2d8>
    253c:	143f7c36 	bltu	r2,r16,2330 <__muldf3+0x194>
    2540:	003fdd06 	br	24b8 <__muldf3+0x31c>
    2544:	12bf852e 	bgeu	r2,r10,235c <__muldf3+0x1c0>
    2548:	003fe506 	br	24e0 <__muldf3+0x344>
    254c:	00800084 	movi	r2,2
    2550:	20bf351e 	bne	r4,r2,2228 <__muldf3+0x8c>
    2554:	01000074 	movhi	r4,1
    2558:	210a0904 	addi	r4,r4,10276
    255c:	003f3f06 	br	225c <__muldf3+0xc0>

00002560 <__make_dp>:
    2560:	defff904 	addi	sp,sp,-28
    2564:	d8c00717 	ldw	r3,28(sp)
    2568:	d9000015 	stw	r4,0(sp)
    256c:	d809883a 	mov	r4,sp
    2570:	dfc00515 	stw	ra,20(sp)
    2574:	d9c00615 	stw	r7,24(sp)
    2578:	d9400115 	stw	r5,4(sp)
    257c:	d9800215 	stw	r6,8(sp)
    2580:	d8c00415 	stw	r3,16(sp)
    2584:	d9c00315 	stw	r7,12(sp)
    2588:	00028d80 	call	28d8 <__pack_d>
    258c:	dfc00517 	ldw	ra,20(sp)
    2590:	dec00704 	addi	sp,sp,28
    2594:	f800283a 	ret

00002598 <__muldi3>:
    2598:	2011883a 	mov	r8,r4
    259c:	427fffcc 	andi	r9,r8,65535
    25a0:	4018d43a 	srli	r12,r8,16
    25a4:	32bfffcc 	andi	r10,r6,65535
    25a8:	3016d43a 	srli	r11,r6,16
    25ac:	4a85383a 	mul	r2,r9,r10
    25b0:	6295383a 	mul	r10,r12,r10
    25b4:	4ad3383a 	mul	r9,r9,r11
    25b8:	113fffcc 	andi	r4,r2,65535
    25bc:	1004d43a 	srli	r2,r2,16
    25c0:	4a93883a 	add	r9,r9,r10
    25c4:	3807883a 	mov	r3,r7
    25c8:	1245883a 	add	r2,r2,r9
    25cc:	280f883a 	mov	r7,r5
    25d0:	180b883a 	mov	r5,r3
    25d4:	1006943a 	slli	r3,r2,16
    25d8:	defffd04 	addi	sp,sp,-12
    25dc:	dc800215 	stw	r18,8(sp)
    25e0:	1907883a 	add	r3,r3,r4
    25e4:	dc400115 	stw	r17,4(sp)
    25e8:	dc000015 	stw	r16,0(sp)
    25ec:	4165383a 	mul	r18,r8,r5
    25f0:	31e3383a 	mul	r17,r6,r7
    25f4:	1012d43a 	srli	r9,r2,16
    25f8:	62d9383a 	mul	r12,r12,r11
    25fc:	181f883a 	mov	r15,r3
    2600:	1280022e 	bgeu	r2,r10,260c <__muldi3+0x74>
    2604:	00800074 	movhi	r2,1
    2608:	6099883a 	add	r12,r12,r2
    260c:	624d883a 	add	r6,r12,r9
    2610:	9187883a 	add	r3,r18,r6
    2614:	88c7883a 	add	r3,r17,r3
    2618:	7805883a 	mov	r2,r15
    261c:	dc800217 	ldw	r18,8(sp)
    2620:	dc400117 	ldw	r17,4(sp)
    2624:	dc000017 	ldw	r16,0(sp)
    2628:	dec00304 	addi	sp,sp,12
    262c:	f800283a 	ret

00002630 <__clzsi2>:
    2630:	00bfffd4 	movui	r2,65535
    2634:	11000e36 	bltu	r2,r4,2670 <__clzsi2+0x40>
    2638:	00803fc4 	movi	r2,255
    263c:	01400204 	movi	r5,8
    2640:	0007883a 	mov	r3,zero
    2644:	11001036 	bltu	r2,r4,2688 <__clzsi2+0x58>
    2648:	000b883a 	mov	r5,zero
    264c:	20c6d83a 	srl	r3,r4,r3
    2650:	00800074 	movhi	r2,1
    2654:	108a0e04 	addi	r2,r2,10296
    2658:	1887883a 	add	r3,r3,r2
    265c:	18800003 	ldbu	r2,0(r3)
    2660:	00c00804 	movi	r3,32
    2664:	2885883a 	add	r2,r5,r2
    2668:	1885c83a 	sub	r2,r3,r2
    266c:	f800283a 	ret
    2670:	01400404 	movi	r5,16
    2674:	00804034 	movhi	r2,256
    2678:	10bfffc4 	addi	r2,r2,-1
    267c:	2807883a 	mov	r3,r5
    2680:	113ff22e 	bgeu	r2,r4,264c <__clzsi2+0x1c>
    2684:	01400604 	movi	r5,24
    2688:	2807883a 	mov	r3,r5
    268c:	20c6d83a 	srl	r3,r4,r3
    2690:	00800074 	movhi	r2,1
    2694:	108a0e04 	addi	r2,r2,10296
    2698:	1887883a 	add	r3,r3,r2
    269c:	18800003 	ldbu	r2,0(r3)
    26a0:	00c00804 	movi	r3,32
    26a4:	2885883a 	add	r2,r5,r2
    26a8:	1885c83a 	sub	r2,r3,r2
    26ac:	f800283a 	ret

000026b0 <__pack_f>:
    26b0:	20c00017 	ldw	r3,0(r4)
    26b4:	01c00044 	movi	r7,1
    26b8:	21800317 	ldw	r6,12(r4)
    26bc:	21400117 	ldw	r5,4(r4)
    26c0:	38c02d2e 	bgeu	r7,r3,2778 <__pack_f+0xc8>
    26c4:	00800104 	movi	r2,4
    26c8:	18802826 	beq	r3,r2,276c <__pack_f+0xbc>
    26cc:	00800084 	movi	r2,2
    26d0:	18800126 	beq	r3,r2,26d8 <__pack_f+0x28>
    26d4:	3000101e 	bne	r6,zero,2718 <__pack_f+0x68>
    26d8:	000d883a 	mov	r6,zero
    26dc:	0007883a 	mov	r3,zero
    26e0:	19003fcc 	andi	r4,r3,255
    26e4:	200895fa 	slli	r4,r4,23
    26e8:	00c02034 	movhi	r3,128
    26ec:	18ffffc4 	addi	r3,r3,-1
    26f0:	30c6703a 	and	r3,r6,r3
    26f4:	10a0002c 	andhi	r2,r2,32768
    26f8:	10c4b03a 	or	r2,r2,r3
    26fc:	280a97fa 	slli	r5,r5,31
    2700:	1104b03a 	or	r2,r2,r4
    2704:	00e00034 	movhi	r3,32768
    2708:	18ffffc4 	addi	r3,r3,-1
    270c:	10c4703a 	and	r2,r2,r3
    2710:	1144b03a 	or	r2,r2,r5
    2714:	f800283a 	ret
    2718:	21000217 	ldw	r4,8(r4)
    271c:	00bfe084 	movi	r2,-126
    2720:	20801b16 	blt	r4,r2,2790 <__pack_f+0xe0>
    2724:	00801fc4 	movi	r2,127
    2728:	11001016 	blt	r2,r4,276c <__pack_f+0xbc>
    272c:	308e703a 	and	r7,r6,r2
    2730:	2087883a 	add	r3,r4,r2
    2734:	00801004 	movi	r2,64
    2738:	38800526 	beq	r7,r2,2750 <__pack_f+0xa0>
    273c:	31800fc4 	addi	r6,r6,63
    2740:	30000716 	blt	r6,zero,2760 <__pack_f+0xb0>
    2744:	300490ba 	slli	r2,r6,2
    2748:	100cd27a 	srli	r6,r2,9
    274c:	003fe406 	br	26e0 <__pack_f+0x30>
    2750:	3080200c 	andi	r2,r6,128
    2754:	103ffa26 	beq	r2,zero,2740 <__pack_f+0x90>
    2758:	31cd883a 	add	r6,r6,r7
    275c:	003ff806 	br	2740 <__pack_f+0x90>
    2760:	300cd07a 	srli	r6,r6,1
    2764:	18c00044 	addi	r3,r3,1
    2768:	003ff606 	br	2744 <__pack_f+0x94>
    276c:	000d883a 	mov	r6,zero
    2770:	00ffffc4 	movi	r3,-1
    2774:	003fda06 	br	26e0 <__pack_f+0x30>
    2778:	31800434 	orhi	r6,r6,16
    277c:	00802034 	movhi	r2,128
    2780:	10bfffc4 	addi	r2,r2,-1
    2784:	308c703a 	and	r6,r6,r2
    2788:	00ffffc4 	movi	r3,-1
    278c:	003fd406 	br	26e0 <__pack_f+0x30>
    2790:	1109c83a 	sub	r4,r2,r4
    2794:	00800644 	movi	r2,25
    2798:	11001216 	blt	r2,r4,27e4 <__pack_f+0x134>
    279c:	3904983a 	sll	r2,r7,r4
    27a0:	3106d83a 	srl	r3,r6,r4
    27a4:	10bfffc4 	addi	r2,r2,-1
    27a8:	3084703a 	and	r2,r6,r2
    27ac:	1004c03a 	cmpne	r2,r2,zero
    27b0:	1886b03a 	or	r3,r3,r2
    27b4:	19001fcc 	andi	r4,r3,127
    27b8:	00801004 	movi	r2,64
    27bc:	20800c26 	beq	r4,r2,27f0 <__pack_f+0x140>
    27c0:	18c00fc4 	addi	r3,r3,63
    27c4:	00900034 	movhi	r2,16384
    27c8:	10bfffc4 	addi	r2,r2,-1
    27cc:	180cd1fa 	srli	r6,r3,7
    27d0:	10c7803a 	cmpltu	r3,r2,r3
    27d4:	00802034 	movhi	r2,128
    27d8:	10bfffc4 	addi	r2,r2,-1
    27dc:	308c703a 	and	r6,r6,r2
    27e0:	003fbf06 	br	26e0 <__pack_f+0x30>
    27e4:	0007883a 	mov	r3,zero
    27e8:	000d883a 	mov	r6,zero
    27ec:	003ff906 	br	27d4 <__pack_f+0x124>
    27f0:	1880200c 	andi	r2,r3,128
    27f4:	10000126 	beq	r2,zero,27fc <__pack_f+0x14c>
    27f8:	1907883a 	add	r3,r3,r4
    27fc:	180cd1fa 	srli	r6,r3,7
    2800:	00900034 	movhi	r2,16384
    2804:	10bfffc4 	addi	r2,r2,-1
    2808:	10c7803a 	cmpltu	r3,r2,r3
    280c:	003ff106 	br	27d4 <__pack_f+0x124>

00002810 <__unpack_f>:
    2810:	21800017 	ldw	r6,0(r4)
    2814:	00c02034 	movhi	r3,128
    2818:	18ffffc4 	addi	r3,r3,-1
    281c:	3004d5fa 	srli	r2,r6,23
    2820:	3008d7fa 	srli	r4,r6,31
    2824:	30ce703a 	and	r7,r6,r3
    2828:	10c03fcc 	andi	r3,r2,255
    282c:	29000115 	stw	r4,4(r5)
    2830:	1800131e 	bne	r3,zero,2880 <__unpack_f+0x70>
    2834:	38000f26 	beq	r7,zero,2874 <__unpack_f+0x64>
    2838:	380691fa 	slli	r3,r7,7
    283c:	01bfe084 	movi	r6,-126
    2840:	008000c4 	movi	r2,3
    2844:	01100034 	movhi	r4,16384
    2848:	213fffc4 	addi	r4,r4,-1
    284c:	28800015 	stw	r2,0(r5)
    2850:	29800215 	stw	r6,8(r5)
    2854:	20c00536 	bltu	r4,r3,286c <__unpack_f+0x5c>
    2858:	3005883a 	mov	r2,r6
    285c:	18c7883a 	add	r3,r3,r3
    2860:	10bfffc4 	addi	r2,r2,-1
    2864:	20fffd2e 	bgeu	r4,r3,285c <__unpack_f+0x4c>
    2868:	28800215 	stw	r2,8(r5)
    286c:	28c00315 	stw	r3,12(r5)
    2870:	f800283a 	ret
    2874:	00800084 	movi	r2,2
    2878:	28800015 	stw	r2,0(r5)
    287c:	f800283a 	ret
    2880:	00803fc4 	movi	r2,255
    2884:	18800826 	beq	r3,r2,28a8 <__unpack_f+0x98>
    2888:	380491fa 	slli	r2,r7,7
    288c:	18ffe044 	addi	r3,r3,-127
    2890:	28c00215 	stw	r3,8(r5)
    2894:	10900034 	orhi	r2,r2,16384
    2898:	28800315 	stw	r2,12(r5)
    289c:	008000c4 	movi	r2,3
    28a0:	28800015 	stw	r2,0(r5)
    28a4:	f800283a 	ret
    28a8:	3800031e 	bne	r7,zero,28b8 <__unpack_f+0xa8>
    28ac:	00800104 	movi	r2,4
    28b0:	28800015 	stw	r2,0(r5)
    28b4:	f800283a 	ret
    28b8:	3080042c 	andhi	r2,r6,16
    28bc:	10000426 	beq	r2,zero,28d0 <__unpack_f+0xc0>
    28c0:	00800044 	movi	r2,1
    28c4:	28800015 	stw	r2,0(r5)
    28c8:	29c00315 	stw	r7,12(r5)
    28cc:	f800283a 	ret
    28d0:	28000015 	stw	zero,0(r5)
    28d4:	003ffc06 	br	28c8 <__unpack_f+0xb8>

000028d8 <__pack_d>:
    28d8:	20c00017 	ldw	r3,0(r4)
    28dc:	defffd04 	addi	sp,sp,-12
    28e0:	dc000015 	stw	r16,0(sp)
    28e4:	dc800215 	stw	r18,8(sp)
    28e8:	dc400115 	stw	r17,4(sp)
    28ec:	00800044 	movi	r2,1
    28f0:	22000317 	ldw	r8,12(r4)
    28f4:	001f883a 	mov	r15,zero
    28f8:	22400417 	ldw	r9,16(r4)
    28fc:	24000117 	ldw	r16,4(r4)
    2900:	10c0552e 	bgeu	r2,r3,2a58 <__pack_d+0x180>
    2904:	00800104 	movi	r2,4
    2908:	18804f26 	beq	r3,r2,2a48 <__pack_d+0x170>
    290c:	00800084 	movi	r2,2
    2910:	18800226 	beq	r3,r2,291c <__pack_d+0x44>
    2914:	4244b03a 	or	r2,r8,r9
    2918:	10001a1e 	bne	r2,zero,2984 <__pack_d+0xac>
    291c:	000d883a 	mov	r6,zero
    2920:	000f883a 	mov	r7,zero
    2924:	0011883a 	mov	r8,zero
    2928:	00800434 	movhi	r2,16
    292c:	10bfffc4 	addi	r2,r2,-1
    2930:	301d883a 	mov	r14,r6
    2934:	3884703a 	and	r2,r7,r2
    2938:	400a953a 	slli	r5,r8,20
    293c:	79bffc2c 	andhi	r6,r15,65520
    2940:	308cb03a 	or	r6,r6,r2
    2944:	00e00434 	movhi	r3,32784
    2948:	18ffffc4 	addi	r3,r3,-1
    294c:	800497fa 	slli	r2,r16,31
    2950:	30c6703a 	and	r3,r6,r3
    2954:	1946b03a 	or	r3,r3,r5
    2958:	01600034 	movhi	r5,32768
    295c:	297fffc4 	addi	r5,r5,-1
    2960:	194a703a 	and	r5,r3,r5
    2964:	288ab03a 	or	r5,r5,r2
    2968:	2807883a 	mov	r3,r5
    296c:	7005883a 	mov	r2,r14
    2970:	dc800217 	ldw	r18,8(sp)
    2974:	dc400117 	ldw	r17,4(sp)
    2978:	dc000017 	ldw	r16,0(sp)
    297c:	dec00304 	addi	sp,sp,12
    2980:	f800283a 	ret
    2984:	21000217 	ldw	r4,8(r4)
    2988:	00bf0084 	movi	r2,-1022
    298c:	20803f16 	blt	r4,r2,2a8c <__pack_d+0x1b4>
    2990:	0080ffc4 	movi	r2,1023
    2994:	11002c16 	blt	r2,r4,2a48 <__pack_d+0x170>
    2998:	00803fc4 	movi	r2,255
    299c:	408c703a 	and	r6,r8,r2
    29a0:	00802004 	movi	r2,128
    29a4:	0007883a 	mov	r3,zero
    29a8:	000f883a 	mov	r7,zero
    29ac:	2280ffc4 	addi	r10,r4,1023
    29b0:	30801e26 	beq	r6,r2,2a2c <__pack_d+0x154>
    29b4:	00801fc4 	movi	r2,127
    29b8:	4089883a 	add	r4,r8,r2
    29bc:	220d803a 	cmpltu	r6,r4,r8
    29c0:	324d883a 	add	r6,r6,r9
    29c4:	2011883a 	mov	r8,r4
    29c8:	3013883a 	mov	r9,r6
    29cc:	00880034 	movhi	r2,8192
    29d0:	10bfffc4 	addi	r2,r2,-1
    29d4:	12400d36 	bltu	r2,r9,2a0c <__pack_d+0x134>
    29d8:	4804963a 	slli	r2,r9,24
    29dc:	400cd23a 	srli	r6,r8,8
    29e0:	480ed23a 	srli	r7,r9,8
    29e4:	013fffc4 	movi	r4,-1
    29e8:	118cb03a 	or	r6,r2,r6
    29ec:	01400434 	movhi	r5,16
    29f0:	297fffc4 	addi	r5,r5,-1
    29f4:	3104703a 	and	r2,r6,r4
    29f8:	3946703a 	and	r3,r7,r5
    29fc:	5201ffcc 	andi	r8,r10,2047
    2a00:	100d883a 	mov	r6,r2
    2a04:	180f883a 	mov	r7,r3
    2a08:	003fc706 	br	2928 <__pack_d+0x50>
    2a0c:	480897fa 	slli	r4,r9,31
    2a10:	4004d07a 	srli	r2,r8,1
    2a14:	4806d07a 	srli	r3,r9,1
    2a18:	52800044 	addi	r10,r10,1
    2a1c:	2084b03a 	or	r2,r4,r2
    2a20:	1011883a 	mov	r8,r2
    2a24:	1813883a 	mov	r9,r3
    2a28:	003feb06 	br	29d8 <__pack_d+0x100>
    2a2c:	383fe11e 	bne	r7,zero,29b4 <__pack_d+0xdc>
    2a30:	01004004 	movi	r4,256
    2a34:	4104703a 	and	r2,r8,r4
    2a38:	10c4b03a 	or	r2,r2,r3
    2a3c:	103fe326 	beq	r2,zero,29cc <__pack_d+0xf4>
    2a40:	3005883a 	mov	r2,r6
    2a44:	003fdc06 	br	29b8 <__pack_d+0xe0>
    2a48:	000d883a 	mov	r6,zero
    2a4c:	000f883a 	mov	r7,zero
    2a50:	0201ffc4 	movi	r8,2047
    2a54:	003fb406 	br	2928 <__pack_d+0x50>
    2a58:	0005883a 	mov	r2,zero
    2a5c:	00c00234 	movhi	r3,8
    2a60:	408cb03a 	or	r6,r8,r2
    2a64:	48ceb03a 	or	r7,r9,r3
    2a68:	013fffc4 	movi	r4,-1
    2a6c:	01400434 	movhi	r5,16
    2a70:	297fffc4 	addi	r5,r5,-1
    2a74:	3104703a 	and	r2,r6,r4
    2a78:	3946703a 	and	r3,r7,r5
    2a7c:	100d883a 	mov	r6,r2
    2a80:	180f883a 	mov	r7,r3
    2a84:	0201ffc4 	movi	r8,2047
    2a88:	003fa706 	br	2928 <__pack_d+0x50>
    2a8c:	1109c83a 	sub	r4,r2,r4
    2a90:	00800e04 	movi	r2,56
    2a94:	11004316 	blt	r2,r4,2ba4 <__pack_d+0x2cc>
    2a98:	21fff804 	addi	r7,r4,-32
    2a9c:	38004516 	blt	r7,zero,2bb4 <__pack_d+0x2dc>
    2aa0:	49d8d83a 	srl	r12,r9,r7
    2aa4:	001b883a 	mov	r13,zero
    2aa8:	0023883a 	mov	r17,zero
    2aac:	01400044 	movi	r5,1
    2ab0:	0025883a 	mov	r18,zero
    2ab4:	38004716 	blt	r7,zero,2bd4 <__pack_d+0x2fc>
    2ab8:	29d6983a 	sll	r11,r5,r7
    2abc:	0015883a 	mov	r10,zero
    2ac0:	00bfffc4 	movi	r2,-1
    2ac4:	5089883a 	add	r4,r10,r2
    2ac8:	588b883a 	add	r5,r11,r2
    2acc:	228d803a 	cmpltu	r6,r4,r10
    2ad0:	314b883a 	add	r5,r6,r5
    2ad4:	4104703a 	and	r2,r8,r4
    2ad8:	4946703a 	and	r3,r9,r5
    2adc:	10c4b03a 	or	r2,r2,r3
    2ae0:	10000226 	beq	r2,zero,2aec <__pack_d+0x214>
    2ae4:	04400044 	movi	r17,1
    2ae8:	0025883a 	mov	r18,zero
    2aec:	00803fc4 	movi	r2,255
    2af0:	644eb03a 	or	r7,r12,r17
    2af4:	3892703a 	and	r9,r7,r2
    2af8:	00802004 	movi	r2,128
    2afc:	6c90b03a 	or	r8,r13,r18
    2b00:	0015883a 	mov	r10,zero
    2b04:	48801626 	beq	r9,r2,2b60 <__pack_d+0x288>
    2b08:	01001fc4 	movi	r4,127
    2b0c:	3905883a 	add	r2,r7,r4
    2b10:	11cd803a 	cmpltu	r6,r2,r7
    2b14:	320d883a 	add	r6,r6,r8
    2b18:	100f883a 	mov	r7,r2
    2b1c:	00840034 	movhi	r2,4096
    2b20:	10bfffc4 	addi	r2,r2,-1
    2b24:	3011883a 	mov	r8,r6
    2b28:	0007883a 	mov	r3,zero
    2b2c:	11801b36 	bltu	r2,r6,2b9c <__pack_d+0x2c4>
    2b30:	4004963a 	slli	r2,r8,24
    2b34:	3808d23a 	srli	r4,r7,8
    2b38:	400ad23a 	srli	r5,r8,8
    2b3c:	1813883a 	mov	r9,r3
    2b40:	1108b03a 	or	r4,r2,r4
    2b44:	00bfffc4 	movi	r2,-1
    2b48:	00c00434 	movhi	r3,16
    2b4c:	18ffffc4 	addi	r3,r3,-1
    2b50:	208c703a 	and	r6,r4,r2
    2b54:	28ce703a 	and	r7,r5,r3
    2b58:	4a01ffcc 	andi	r8,r9,2047
    2b5c:	003f7206 	br	2928 <__pack_d+0x50>
    2b60:	503fe91e 	bne	r10,zero,2b08 <__pack_d+0x230>
    2b64:	01004004 	movi	r4,256
    2b68:	3904703a 	and	r2,r7,r4
    2b6c:	0007883a 	mov	r3,zero
    2b70:	10c4b03a 	or	r2,r2,r3
    2b74:	10000626 	beq	r2,zero,2b90 <__pack_d+0x2b8>
    2b78:	3a45883a 	add	r2,r7,r9
    2b7c:	11cd803a 	cmpltu	r6,r2,r7
    2b80:	320d883a 	add	r6,r6,r8
    2b84:	100f883a 	mov	r7,r2
    2b88:	3011883a 	mov	r8,r6
    2b8c:	0007883a 	mov	r3,zero
    2b90:	00840034 	movhi	r2,4096
    2b94:	10bfffc4 	addi	r2,r2,-1
    2b98:	123fe52e 	bgeu	r2,r8,2b30 <__pack_d+0x258>
    2b9c:	00c00044 	movi	r3,1
    2ba0:	003fe306 	br	2b30 <__pack_d+0x258>
    2ba4:	0009883a 	mov	r4,zero
    2ba8:	0013883a 	mov	r9,zero
    2bac:	000b883a 	mov	r5,zero
    2bb0:	003fe406 	br	2b44 <__pack_d+0x26c>
    2bb4:	4a47883a 	add	r3,r9,r9
    2bb8:	008007c4 	movi	r2,31
    2bbc:	1105c83a 	sub	r2,r2,r4
    2bc0:	1886983a 	sll	r3,r3,r2
    2bc4:	4118d83a 	srl	r12,r8,r4
    2bc8:	491ad83a 	srl	r13,r9,r4
    2bcc:	1b18b03a 	or	r12,r3,r12
    2bd0:	003fb506 	br	2aa8 <__pack_d+0x1d0>
    2bd4:	2806d07a 	srli	r3,r5,1
    2bd8:	008007c4 	movi	r2,31
    2bdc:	1105c83a 	sub	r2,r2,r4
    2be0:	1896d83a 	srl	r11,r3,r2
    2be4:	2914983a 	sll	r10,r5,r4
    2be8:	003fb506 	br	2ac0 <__pack_d+0x1e8>

00002bec <__unpack_d>:
    2bec:	20c00117 	ldw	r3,4(r4)
    2bf0:	22400017 	ldw	r9,0(r4)
    2bf4:	00800434 	movhi	r2,16
    2bf8:	10bfffc4 	addi	r2,r2,-1
    2bfc:	1808d53a 	srli	r4,r3,20
    2c00:	180cd7fa 	srli	r6,r3,31
    2c04:	1894703a 	and	r10,r3,r2
    2c08:	2201ffcc 	andi	r8,r4,2047
    2c0c:	281b883a 	mov	r13,r5
    2c10:	4817883a 	mov	r11,r9
    2c14:	29800115 	stw	r6,4(r5)
    2c18:	5019883a 	mov	r12,r10
    2c1c:	40001e1e 	bne	r8,zero,2c98 <__unpack_d+0xac>
    2c20:	4a84b03a 	or	r2,r9,r10
    2c24:	10001926 	beq	r2,zero,2c8c <__unpack_d+0xa0>
    2c28:	4804d63a 	srli	r2,r9,24
    2c2c:	500c923a 	slli	r6,r10,8
    2c30:	013f0084 	movi	r4,-1022
    2c34:	00c40034 	movhi	r3,4096
    2c38:	18ffffc4 	addi	r3,r3,-1
    2c3c:	118cb03a 	or	r6,r2,r6
    2c40:	008000c4 	movi	r2,3
    2c44:	480a923a 	slli	r5,r9,8
    2c48:	68800015 	stw	r2,0(r13)
    2c4c:	69000215 	stw	r4,8(r13)
    2c50:	19800b36 	bltu	r3,r6,2c80 <__unpack_d+0x94>
    2c54:	200f883a 	mov	r7,r4
    2c58:	1811883a 	mov	r8,r3
    2c5c:	2945883a 	add	r2,r5,r5
    2c60:	1149803a 	cmpltu	r4,r2,r5
    2c64:	3187883a 	add	r3,r6,r6
    2c68:	20c9883a 	add	r4,r4,r3
    2c6c:	100b883a 	mov	r5,r2
    2c70:	200d883a 	mov	r6,r4
    2c74:	39ffffc4 	addi	r7,r7,-1
    2c78:	413ff82e 	bgeu	r8,r4,2c5c <__unpack_d+0x70>
    2c7c:	69c00215 	stw	r7,8(r13)
    2c80:	69800415 	stw	r6,16(r13)
    2c84:	69400315 	stw	r5,12(r13)
    2c88:	f800283a 	ret
    2c8c:	00800084 	movi	r2,2
    2c90:	28800015 	stw	r2,0(r5)
    2c94:	f800283a 	ret
    2c98:	0081ffc4 	movi	r2,2047
    2c9c:	40800f26 	beq	r8,r2,2cdc <__unpack_d+0xf0>
    2ca0:	480cd63a 	srli	r6,r9,24
    2ca4:	5006923a 	slli	r3,r10,8
    2ca8:	4804923a 	slli	r2,r9,8
    2cac:	0009883a 	mov	r4,zero
    2cb0:	30c6b03a 	or	r3,r6,r3
    2cb4:	01440034 	movhi	r5,4096
    2cb8:	110cb03a 	or	r6,r2,r4
    2cbc:	423f0044 	addi	r8,r8,-1023
    2cc0:	194eb03a 	or	r7,r3,r5
    2cc4:	008000c4 	movi	r2,3
    2cc8:	69c00415 	stw	r7,16(r13)
    2ccc:	6a000215 	stw	r8,8(r13)
    2cd0:	68800015 	stw	r2,0(r13)
    2cd4:	69800315 	stw	r6,12(r13)
    2cd8:	f800283a 	ret
    2cdc:	4a84b03a 	or	r2,r9,r10
    2ce0:	1000031e 	bne	r2,zero,2cf0 <__unpack_d+0x104>
    2ce4:	00800104 	movi	r2,4
    2ce8:	28800015 	stw	r2,0(r5)
    2cec:	f800283a 	ret
    2cf0:	0009883a 	mov	r4,zero
    2cf4:	01400234 	movhi	r5,8
    2cf8:	4904703a 	and	r2,r9,r4
    2cfc:	5146703a 	and	r3,r10,r5
    2d00:	10c4b03a 	or	r2,r2,r3
    2d04:	10000526 	beq	r2,zero,2d1c <__unpack_d+0x130>
    2d08:	00800044 	movi	r2,1
    2d0c:	68800015 	stw	r2,0(r13)
    2d10:	6b000415 	stw	r12,16(r13)
    2d14:	6ac00315 	stw	r11,12(r13)
    2d18:	f800283a 	ret
    2d1c:	68000015 	stw	zero,0(r13)
    2d20:	003ffb06 	br	2d10 <__unpack_d+0x124>

00002d24 <memcpy>:
    2d24:	01c003c4 	movi	r7,15
    2d28:	2007883a 	mov	r3,r4
    2d2c:	3980032e 	bgeu	r7,r6,2d3c <memcpy+0x18>
    2d30:	2904b03a 	or	r2,r5,r4
    2d34:	108000cc 	andi	r2,r2,3
    2d38:	10000926 	beq	r2,zero,2d60 <memcpy+0x3c>
    2d3c:	30000626 	beq	r6,zero,2d58 <memcpy+0x34>
    2d40:	30cd883a 	add	r6,r6,r3
    2d44:	28800003 	ldbu	r2,0(r5)
    2d48:	29400044 	addi	r5,r5,1
    2d4c:	18800005 	stb	r2,0(r3)
    2d50:	18c00044 	addi	r3,r3,1
    2d54:	30fffb1e 	bne	r6,r3,2d44 <memcpy+0x20>
    2d58:	2005883a 	mov	r2,r4
    2d5c:	f800283a 	ret
    2d60:	3811883a 	mov	r8,r7
    2d64:	200f883a 	mov	r7,r4
    2d68:	28c00017 	ldw	r3,0(r5)
    2d6c:	31bffc04 	addi	r6,r6,-16
    2d70:	38c00015 	stw	r3,0(r7)
    2d74:	28800117 	ldw	r2,4(r5)
    2d78:	38800115 	stw	r2,4(r7)
    2d7c:	28c00217 	ldw	r3,8(r5)
    2d80:	38c00215 	stw	r3,8(r7)
    2d84:	28800317 	ldw	r2,12(r5)
    2d88:	29400404 	addi	r5,r5,16
    2d8c:	38800315 	stw	r2,12(r7)
    2d90:	39c00404 	addi	r7,r7,16
    2d94:	41bff436 	bltu	r8,r6,2d68 <memcpy+0x44>
    2d98:	008000c4 	movi	r2,3
    2d9c:	1180072e 	bgeu	r2,r6,2dbc <memcpy+0x98>
    2da0:	1007883a 	mov	r3,r2
    2da4:	28800017 	ldw	r2,0(r5)
    2da8:	31bfff04 	addi	r6,r6,-4
    2dac:	29400104 	addi	r5,r5,4
    2db0:	38800015 	stw	r2,0(r7)
    2db4:	39c00104 	addi	r7,r7,4
    2db8:	19bffa36 	bltu	r3,r6,2da4 <memcpy+0x80>
    2dbc:	3807883a 	mov	r3,r7
    2dc0:	003fde06 	br	2d3c <memcpy+0x18>

00002dc4 <memset>:
    2dc4:	008000c4 	movi	r2,3
    2dc8:	29403fcc 	andi	r5,r5,255
    2dcc:	2007883a 	mov	r3,r4
    2dd0:	1180022e 	bgeu	r2,r6,2ddc <memset+0x18>
    2dd4:	2084703a 	and	r2,r4,r2
    2dd8:	10000826 	beq	r2,zero,2dfc <memset+0x38>
    2ddc:	30000526 	beq	r6,zero,2df4 <memset+0x30>
    2de0:	2805883a 	mov	r2,r5
    2de4:	30cd883a 	add	r6,r6,r3
    2de8:	18800005 	stb	r2,0(r3)
    2dec:	18c00044 	addi	r3,r3,1
    2df0:	19bffd1e 	bne	r3,r6,2de8 <memset+0x24>
    2df4:	2005883a 	mov	r2,r4
    2df8:	f800283a 	ret
    2dfc:	2804923a 	slli	r2,r5,8
    2e00:	020003c4 	movi	r8,15
    2e04:	200f883a 	mov	r7,r4
    2e08:	2884b03a 	or	r2,r5,r2
    2e0c:	1006943a 	slli	r3,r2,16
    2e10:	10c6b03a 	or	r3,r2,r3
    2e14:	41800a2e 	bgeu	r8,r6,2e40 <memset+0x7c>
    2e18:	4005883a 	mov	r2,r8
    2e1c:	31bffc04 	addi	r6,r6,-16
    2e20:	38c00015 	stw	r3,0(r7)
    2e24:	38c00115 	stw	r3,4(r7)
    2e28:	38c00215 	stw	r3,8(r7)
    2e2c:	38c00315 	stw	r3,12(r7)
    2e30:	39c00404 	addi	r7,r7,16
    2e34:	11bff936 	bltu	r2,r6,2e1c <memset+0x58>
    2e38:	008000c4 	movi	r2,3
    2e3c:	1180052e 	bgeu	r2,r6,2e54 <memset+0x90>
    2e40:	31bfff04 	addi	r6,r6,-4
    2e44:	008000c4 	movi	r2,3
    2e48:	38c00015 	stw	r3,0(r7)
    2e4c:	39c00104 	addi	r7,r7,4
    2e50:	11bffb36 	bltu	r2,r6,2e40 <memset+0x7c>
    2e54:	3807883a 	mov	r3,r7
    2e58:	003fe006 	br	2ddc <memset+0x18>

00002e5c <printf>:
    2e5c:	defffb04 	addi	sp,sp,-20
    2e60:	dfc00115 	stw	ra,4(sp)
    2e64:	d9400215 	stw	r5,8(sp)
    2e68:	d9800315 	stw	r6,12(sp)
    2e6c:	d9c00415 	stw	r7,16(sp)
    2e70:	00800074 	movhi	r2,1
    2e74:	1092ee04 	addi	r2,r2,19384
    2e78:	10c00017 	ldw	r3,0(r2)
    2e7c:	200b883a 	mov	r5,r4
    2e80:	d8800204 	addi	r2,sp,8
    2e84:	19000217 	ldw	r4,8(r3)
    2e88:	100d883a 	mov	r6,r2
    2e8c:	d8800015 	stw	r2,0(sp)
    2e90:	0004f000 	call	4f00 <__vfprintf_internal>
    2e94:	dfc00117 	ldw	ra,4(sp)
    2e98:	dec00504 	addi	sp,sp,20
    2e9c:	f800283a 	ret

00002ea0 <_printf_r>:
    2ea0:	defffc04 	addi	sp,sp,-16
    2ea4:	dfc00115 	stw	ra,4(sp)
    2ea8:	d9800215 	stw	r6,8(sp)
    2eac:	d9c00315 	stw	r7,12(sp)
    2eb0:	280d883a 	mov	r6,r5
    2eb4:	21400217 	ldw	r5,8(r4)
    2eb8:	d8c00204 	addi	r3,sp,8
    2ebc:	180f883a 	mov	r7,r3
    2ec0:	d8c00015 	stw	r3,0(sp)
    2ec4:	00030540 	call	3054 <___vfprintf_internal_r>
    2ec8:	dfc00117 	ldw	ra,4(sp)
    2ecc:	dec00404 	addi	sp,sp,16
    2ed0:	f800283a 	ret

00002ed4 <_puts_r>:
    2ed4:	defff604 	addi	sp,sp,-40
    2ed8:	dc400715 	stw	r17,28(sp)
    2edc:	2023883a 	mov	r17,r4
    2ee0:	2809883a 	mov	r4,r5
    2ee4:	dfc00915 	stw	ra,36(sp)
    2ee8:	dcc00815 	stw	r19,32(sp)
    2eec:	2827883a 	mov	r19,r5
    2ef0:	0002f880 	call	2f88 <strlen>
    2ef4:	89400217 	ldw	r5,8(r17)
    2ef8:	00c00074 	movhi	r3,1
    2efc:	18ca4e04 	addi	r3,r3,10552
    2f00:	01c00044 	movi	r7,1
    2f04:	12000044 	addi	r8,r2,1
    2f08:	d8c00515 	stw	r3,20(sp)
    2f0c:	d9c00615 	stw	r7,24(sp)
    2f10:	d8c00304 	addi	r3,sp,12
    2f14:	01c00084 	movi	r7,2
    2f18:	8809883a 	mov	r4,r17
    2f1c:	d80d883a 	mov	r6,sp
    2f20:	d8c00015 	stw	r3,0(sp)
    2f24:	dcc00315 	stw	r19,12(sp)
    2f28:	da000215 	stw	r8,8(sp)
    2f2c:	d9c00115 	stw	r7,4(sp)
    2f30:	d8800415 	stw	r2,16(sp)
    2f34:	000715c0 	call	715c <__sfvwrite_r>
    2f38:	00ffffc4 	movi	r3,-1
    2f3c:	10000626 	beq	r2,zero,2f58 <_puts_r+0x84>
    2f40:	1805883a 	mov	r2,r3
    2f44:	dfc00917 	ldw	ra,36(sp)
    2f48:	dcc00817 	ldw	r19,32(sp)
    2f4c:	dc400717 	ldw	r17,28(sp)
    2f50:	dec00a04 	addi	sp,sp,40
    2f54:	f800283a 	ret
    2f58:	00c00284 	movi	r3,10
    2f5c:	1805883a 	mov	r2,r3
    2f60:	dfc00917 	ldw	ra,36(sp)
    2f64:	dcc00817 	ldw	r19,32(sp)
    2f68:	dc400717 	ldw	r17,28(sp)
    2f6c:	dec00a04 	addi	sp,sp,40
    2f70:	f800283a 	ret

00002f74 <puts>:
    2f74:	00800074 	movhi	r2,1
    2f78:	1092ee04 	addi	r2,r2,19384
    2f7c:	200b883a 	mov	r5,r4
    2f80:	11000017 	ldw	r4,0(r2)
    2f84:	0002ed41 	jmpi	2ed4 <_puts_r>

00002f88 <strlen>:
    2f88:	208000cc 	andi	r2,r4,3
    2f8c:	2011883a 	mov	r8,r4
    2f90:	1000161e 	bne	r2,zero,2fec <strlen+0x64>
    2f94:	20c00017 	ldw	r3,0(r4)
    2f98:	017fbff4 	movhi	r5,65279
    2f9c:	297fbfc4 	addi	r5,r5,-257
    2fa0:	01e02074 	movhi	r7,32897
    2fa4:	39e02004 	addi	r7,r7,-32640
    2fa8:	1945883a 	add	r2,r3,r5
    2fac:	11c4703a 	and	r2,r2,r7
    2fb0:	00c6303a 	nor	r3,zero,r3
    2fb4:	1886703a 	and	r3,r3,r2
    2fb8:	18000c1e 	bne	r3,zero,2fec <strlen+0x64>
    2fbc:	280d883a 	mov	r6,r5
    2fc0:	380b883a 	mov	r5,r7
    2fc4:	21000104 	addi	r4,r4,4
    2fc8:	20800017 	ldw	r2,0(r4)
    2fcc:	1187883a 	add	r3,r2,r6
    2fd0:	1946703a 	and	r3,r3,r5
    2fd4:	0084303a 	nor	r2,zero,r2
    2fd8:	10c4703a 	and	r2,r2,r3
    2fdc:	103ff926 	beq	r2,zero,2fc4 <strlen+0x3c>
    2fe0:	20800007 	ldb	r2,0(r4)
    2fe4:	10000326 	beq	r2,zero,2ff4 <strlen+0x6c>
    2fe8:	21000044 	addi	r4,r4,1
    2fec:	20800007 	ldb	r2,0(r4)
    2ff0:	103ffd1e 	bne	r2,zero,2fe8 <strlen+0x60>
    2ff4:	2205c83a 	sub	r2,r4,r8
    2ff8:	f800283a 	ret

00002ffc <__sprint_r>:
    2ffc:	30800217 	ldw	r2,8(r6)
    3000:	defffe04 	addi	sp,sp,-8
    3004:	dc000015 	stw	r16,0(sp)
    3008:	dfc00115 	stw	ra,4(sp)
    300c:	3021883a 	mov	r16,r6
    3010:	0007883a 	mov	r3,zero
    3014:	1000061e 	bne	r2,zero,3030 <__sprint_r+0x34>
    3018:	1805883a 	mov	r2,r3
    301c:	30000115 	stw	zero,4(r6)
    3020:	dfc00117 	ldw	ra,4(sp)
    3024:	dc000017 	ldw	r16,0(sp)
    3028:	dec00204 	addi	sp,sp,8
    302c:	f800283a 	ret
    3030:	000715c0 	call	715c <__sfvwrite_r>
    3034:	1007883a 	mov	r3,r2
    3038:	1805883a 	mov	r2,r3
    303c:	80000115 	stw	zero,4(r16)
    3040:	80000215 	stw	zero,8(r16)
    3044:	dfc00117 	ldw	ra,4(sp)
    3048:	dc000017 	ldw	r16,0(sp)
    304c:	dec00204 	addi	sp,sp,8
    3050:	f800283a 	ret

00003054 <___vfprintf_internal_r>:
    3054:	defea404 	addi	sp,sp,-1392
    3058:	dd815815 	stw	r22,1376(sp)
    305c:	dc015215 	stw	r16,1352(sp)
    3060:	d9c15115 	stw	r7,1348(sp)
    3064:	dfc15b15 	stw	ra,1388(sp)
    3068:	df015a15 	stw	fp,1384(sp)
    306c:	ddc15915 	stw	r23,1380(sp)
    3070:	dd415715 	stw	r21,1372(sp)
    3074:	dd015615 	stw	r20,1368(sp)
    3078:	dcc15515 	stw	r19,1364(sp)
    307c:	dc815415 	stw	r18,1360(sp)
    3080:	dc415315 	stw	r17,1356(sp)
    3084:	282d883a 	mov	r22,r5
    3088:	3021883a 	mov	r16,r6
    308c:	d9014f15 	stw	r4,1340(sp)
    3090:	00077800 	call	7780 <_localeconv_r>
    3094:	10800017 	ldw	r2,0(r2)
    3098:	d9c15117 	ldw	r7,1348(sp)
    309c:	d8814915 	stw	r2,1316(sp)
    30a0:	d8814f17 	ldw	r2,1340(sp)
    30a4:	10000226 	beq	r2,zero,30b0 <___vfprintf_internal_r+0x5c>
    30a8:	10800e17 	ldw	r2,56(r2)
    30ac:	10020d26 	beq	r2,zero,38e4 <___vfprintf_internal_r+0x890>
    30b0:	b080030b 	ldhu	r2,12(r22)
    30b4:	1080020c 	andi	r2,r2,8
    30b8:	10020e26 	beq	r2,zero,38f4 <___vfprintf_internal_r+0x8a0>
    30bc:	b0800417 	ldw	r2,16(r22)
    30c0:	10020c26 	beq	r2,zero,38f4 <___vfprintf_internal_r+0x8a0>
    30c4:	b200030b 	ldhu	r8,12(r22)
    30c8:	00800284 	movi	r2,10
    30cc:	40c0068c 	andi	r3,r8,26
    30d0:	18802f1e 	bne	r3,r2,3190 <___vfprintf_internal_r+0x13c>
    30d4:	b080038f 	ldh	r2,14(r22)
    30d8:	10002d16 	blt	r2,zero,3190 <___vfprintf_internal_r+0x13c>
    30dc:	b240038b 	ldhu	r9,14(r22)
    30e0:	b2800717 	ldw	r10,28(r22)
    30e4:	b2c00917 	ldw	r11,36(r22)
    30e8:	d9014f17 	ldw	r4,1340(sp)
    30ec:	dc402904 	addi	r17,sp,164
    30f0:	d8804004 	addi	r2,sp,256
    30f4:	00c10004 	movi	r3,1024
    30f8:	423fff4c 	andi	r8,r8,65533
    30fc:	800d883a 	mov	r6,r16
    3100:	880b883a 	mov	r5,r17
    3104:	da002c0d 	sth	r8,176(sp)
    3108:	da402c8d 	sth	r9,178(sp)
    310c:	da803015 	stw	r10,192(sp)
    3110:	dac03215 	stw	r11,200(sp)
    3114:	d8802d15 	stw	r2,180(sp)
    3118:	d8c02e15 	stw	r3,184(sp)
    311c:	d8802915 	stw	r2,164(sp)
    3120:	d8c02b15 	stw	r3,172(sp)
    3124:	d8002f15 	stw	zero,188(sp)
    3128:	00030540 	call	3054 <___vfprintf_internal_r>
    312c:	d8814b15 	stw	r2,1324(sp)
    3130:	10000416 	blt	r2,zero,3144 <___vfprintf_internal_r+0xf0>
    3134:	d9014f17 	ldw	r4,1340(sp)
    3138:	880b883a 	mov	r5,r17
    313c:	000682c0 	call	682c <_fflush_r>
    3140:	1002321e 	bne	r2,zero,3a0c <___vfprintf_internal_r+0x9b8>
    3144:	d8802c0b 	ldhu	r2,176(sp)
    3148:	1080100c 	andi	r2,r2,64
    314c:	10000326 	beq	r2,zero,315c <___vfprintf_internal_r+0x108>
    3150:	b080030b 	ldhu	r2,12(r22)
    3154:	10801014 	ori	r2,r2,64
    3158:	b080030d 	sth	r2,12(r22)
    315c:	d8814b17 	ldw	r2,1324(sp)
    3160:	dfc15b17 	ldw	ra,1388(sp)
    3164:	df015a17 	ldw	fp,1384(sp)
    3168:	ddc15917 	ldw	r23,1380(sp)
    316c:	dd815817 	ldw	r22,1376(sp)
    3170:	dd415717 	ldw	r21,1372(sp)
    3174:	dd015617 	ldw	r20,1368(sp)
    3178:	dcc15517 	ldw	r19,1364(sp)
    317c:	dc815417 	ldw	r18,1360(sp)
    3180:	dc415317 	ldw	r17,1356(sp)
    3184:	dc015217 	ldw	r16,1352(sp)
    3188:	dec15c04 	addi	sp,sp,1392
    318c:	f800283a 	ret
    3190:	0005883a 	mov	r2,zero
    3194:	0007883a 	mov	r3,zero
    3198:	dd401904 	addi	r21,sp,100
    319c:	d8814215 	stw	r2,1288(sp)
    31a0:	802f883a 	mov	r23,r16
    31a4:	d8c14315 	stw	r3,1292(sp)
    31a8:	d8014b15 	stw	zero,1324(sp)
    31ac:	d8014815 	stw	zero,1312(sp)
    31b0:	d8014415 	stw	zero,1296(sp)
    31b4:	d8014715 	stw	zero,1308(sp)
    31b8:	dd400c15 	stw	r21,48(sp)
    31bc:	d8000e15 	stw	zero,56(sp)
    31c0:	d8000d15 	stw	zero,52(sp)
    31c4:	b8800007 	ldb	r2,0(r23)
    31c8:	10001926 	beq	r2,zero,3230 <___vfprintf_internal_r+0x1dc>
    31cc:	00c00944 	movi	r3,37
    31d0:	10c01726 	beq	r2,r3,3230 <___vfprintf_internal_r+0x1dc>
    31d4:	b821883a 	mov	r16,r23
    31d8:	00000106 	br	31e0 <___vfprintf_internal_r+0x18c>
    31dc:	10c00326 	beq	r2,r3,31ec <___vfprintf_internal_r+0x198>
    31e0:	84000044 	addi	r16,r16,1
    31e4:	80800007 	ldb	r2,0(r16)
    31e8:	103ffc1e 	bne	r2,zero,31dc <___vfprintf_internal_r+0x188>
    31ec:	85e7c83a 	sub	r19,r16,r23
    31f0:	98000e26 	beq	r19,zero,322c <___vfprintf_internal_r+0x1d8>
    31f4:	dc800e17 	ldw	r18,56(sp)
    31f8:	dc400d17 	ldw	r17,52(sp)
    31fc:	008001c4 	movi	r2,7
    3200:	94e5883a 	add	r18,r18,r19
    3204:	8c400044 	addi	r17,r17,1
    3208:	adc00015 	stw	r23,0(r21)
    320c:	dc800e15 	stw	r18,56(sp)
    3210:	acc00115 	stw	r19,4(r21)
    3214:	dc400d15 	stw	r17,52(sp)
    3218:	14428b16 	blt	r2,r17,3c48 <___vfprintf_internal_r+0xbf4>
    321c:	ad400204 	addi	r21,r21,8
    3220:	d9014b17 	ldw	r4,1324(sp)
    3224:	24c9883a 	add	r4,r4,r19
    3228:	d9014b15 	stw	r4,1324(sp)
    322c:	802f883a 	mov	r23,r16
    3230:	b8800007 	ldb	r2,0(r23)
    3234:	10013c26 	beq	r2,zero,3728 <___vfprintf_internal_r+0x6d4>
    3238:	bdc00044 	addi	r23,r23,1
    323c:	d8000405 	stb	zero,16(sp)
    3240:	b8c00007 	ldb	r3,0(r23)
    3244:	04ffffc4 	movi	r19,-1
    3248:	d8014c15 	stw	zero,1328(sp)
    324c:	d8014a15 	stw	zero,1320(sp)
    3250:	d8c14d15 	stw	r3,1332(sp)
    3254:	bdc00044 	addi	r23,r23,1
    3258:	d9414d17 	ldw	r5,1332(sp)
    325c:	00801604 	movi	r2,88
    3260:	28fff804 	addi	r3,r5,-32
    3264:	10c06036 	bltu	r2,r3,33e8 <___vfprintf_internal_r+0x394>
    3268:	18c5883a 	add	r2,r3,r3
    326c:	1085883a 	add	r2,r2,r2
    3270:	00c00034 	movhi	r3,0
    3274:	18cca104 	addi	r3,r3,12932
    3278:	10c5883a 	add	r2,r2,r3
    327c:	11000017 	ldw	r4,0(r2)
    3280:	2000683a 	jmp	r4
    3284:	000041f8 	rdprs	zero,zero,263
    3288:	000033e8 	cmpgeui	zero,zero,207
    328c:	000033e8 	cmpgeui	zero,zero,207
    3290:	000041e4 	muli	zero,zero,263
    3294:	000033e8 	cmpgeui	zero,zero,207
    3298:	000033e8 	cmpgeui	zero,zero,207
    329c:	000033e8 	cmpgeui	zero,zero,207
    32a0:	000033e8 	cmpgeui	zero,zero,207
    32a4:	000033e8 	cmpgeui	zero,zero,207
    32a8:	000033e8 	cmpgeui	zero,zero,207
    32ac:	00003fc4 	movi	zero,255
    32b0:	000041d4 	movui	zero,263
    32b4:	000033e8 	cmpgeui	zero,zero,207
    32b8:	00003fdc 	xori	zero,zero,255
    32bc:	00004270 	cmpltui	zero,zero,265
    32c0:	000033e8 	cmpgeui	zero,zero,207
    32c4:	0000425c 	xori	zero,zero,265
    32c8:	00004224 	muli	zero,zero,264
    32cc:	00004224 	muli	zero,zero,264
    32d0:	00004224 	muli	zero,zero,264
    32d4:	00004224 	muli	zero,zero,264
    32d8:	00004224 	muli	zero,zero,264
    32dc:	00004224 	muli	zero,zero,264
    32e0:	00004224 	muli	zero,zero,264
    32e4:	00004224 	muli	zero,zero,264
    32e8:	00004224 	muli	zero,zero,264
    32ec:	000033e8 	cmpgeui	zero,zero,207
    32f0:	000033e8 	cmpgeui	zero,zero,207
    32f4:	000033e8 	cmpgeui	zero,zero,207
    32f8:	000033e8 	cmpgeui	zero,zero,207
    32fc:	000033e8 	cmpgeui	zero,zero,207
    3300:	000033e8 	cmpgeui	zero,zero,207
    3304:	000033e8 	cmpgeui	zero,zero,207
    3308:	000033e8 	cmpgeui	zero,zero,207
    330c:	000033e8 	cmpgeui	zero,zero,207
    3310:	000033e8 	cmpgeui	zero,zero,207
    3314:	00003a40 	call	3a4 <audio_ISR+0x24>
    3318:	000040ac 	andhi	zero,zero,258
    331c:	000033e8 	cmpgeui	zero,zero,207
    3320:	000040ac 	andhi	zero,zero,258
    3324:	000033e8 	cmpgeui	zero,zero,207
    3328:	000033e8 	cmpgeui	zero,zero,207
    332c:	000033e8 	cmpgeui	zero,zero,207
    3330:	000033e8 	cmpgeui	zero,zero,207
    3334:	00004210 	cmplti	zero,zero,264
    3338:	000033e8 	cmpgeui	zero,zero,207
    333c:	000033e8 	cmpgeui	zero,zero,207
    3340:	00003af4 	movhi	zero,235
    3344:	000033e8 	cmpgeui	zero,zero,207
    3348:	000033e8 	cmpgeui	zero,zero,207
    334c:	000033e8 	cmpgeui	zero,zero,207
    3350:	000033e8 	cmpgeui	zero,zero,207
    3354:	000033e8 	cmpgeui	zero,zero,207
    3358:	00003b40 	call	3b4 <audio_ISR+0x34>
    335c:	000033e8 	cmpgeui	zero,zero,207
    3360:	000033e8 	cmpgeui	zero,zero,207
    3364:	00004160 	cmpeqi	zero,zero,261
    3368:	000033e8 	cmpgeui	zero,zero,207
    336c:	000033e8 	cmpgeui	zero,zero,207
    3370:	000033e8 	cmpgeui	zero,zero,207
    3374:	000033e8 	cmpgeui	zero,zero,207
    3378:	000033e8 	cmpgeui	zero,zero,207
    337c:	000033e8 	cmpgeui	zero,zero,207
    3380:	000033e8 	cmpgeui	zero,zero,207
    3384:	000033e8 	cmpgeui	zero,zero,207
    3388:	000033e8 	cmpgeui	zero,zero,207
    338c:	000033e8 	cmpgeui	zero,zero,207
    3390:	00004134 	movhi	zero,260
    3394:	00003a4c 	andi	zero,zero,233
    3398:	000040ac 	andhi	zero,zero,258
    339c:	000040ac 	andhi	zero,zero,258
    33a0:	000040ac 	andhi	zero,zero,258
    33a4:	00004098 	cmpnei	zero,zero,258
    33a8:	00003a4c 	andi	zero,zero,233
    33ac:	000033e8 	cmpgeui	zero,zero,207
    33b0:	000033e8 	cmpgeui	zero,zero,207
    33b4:	00004020 	cmpeqi	zero,zero,256
    33b8:	000033e8 	cmpgeui	zero,zero,207
    33bc:	00003ff0 	cmpltui	zero,zero,255
    33c0:	00003b00 	call	3b0 <audio_ISR+0x30>
    33c4:	00004050 	cmplti	zero,zero,257
    33c8:	0000403c 	xorhi	zero,zero,256
    33cc:	000033e8 	cmpgeui	zero,zero,207
    33d0:	000042cc 	andi	zero,zero,267
    33d4:	000033e8 	cmpgeui	zero,zero,207
    33d8:	00003b4c 	andi	zero,zero,237
    33dc:	000033e8 	cmpgeui	zero,zero,207
    33e0:	000033e8 	cmpgeui	zero,zero,207
    33e4:	000041c4 	movi	zero,263
    33e8:	d9014d17 	ldw	r4,1332(sp)
    33ec:	2000ce26 	beq	r4,zero,3728 <___vfprintf_internal_r+0x6d4>
    33f0:	01400044 	movi	r5,1
    33f4:	d9800f04 	addi	r6,sp,60
    33f8:	d9c14015 	stw	r7,1280(sp)
    33fc:	d9414515 	stw	r5,1300(sp)
    3400:	d9814115 	stw	r6,1284(sp)
    3404:	280f883a 	mov	r7,r5
    3408:	d9000f05 	stb	r4,60(sp)
    340c:	d8000405 	stb	zero,16(sp)
    3410:	d8014615 	stw	zero,1304(sp)
    3414:	d8c14c17 	ldw	r3,1328(sp)
    3418:	1880008c 	andi	r2,r3,2
    341c:	1005003a 	cmpeq	r2,r2,zero
    3420:	d8815015 	stw	r2,1344(sp)
    3424:	1000031e 	bne	r2,zero,3434 <___vfprintf_internal_r+0x3e0>
    3428:	d9014517 	ldw	r4,1300(sp)
    342c:	21000084 	addi	r4,r4,2
    3430:	d9014515 	stw	r4,1300(sp)
    3434:	d9414c17 	ldw	r5,1328(sp)
    3438:	2940210c 	andi	r5,r5,132
    343c:	d9414e15 	stw	r5,1336(sp)
    3440:	28002d1e 	bne	r5,zero,34f8 <___vfprintf_internal_r+0x4a4>
    3444:	d9814a17 	ldw	r6,1320(sp)
    3448:	d8814517 	ldw	r2,1300(sp)
    344c:	30a1c83a 	sub	r16,r6,r2
    3450:	0400290e 	bge	zero,r16,34f8 <___vfprintf_internal_r+0x4a4>
    3454:	00800404 	movi	r2,16
    3458:	1404580e 	bge	r2,r16,45bc <___vfprintf_internal_r+0x1568>
    345c:	dc800e17 	ldw	r18,56(sp)
    3460:	dc400d17 	ldw	r17,52(sp)
    3464:	1027883a 	mov	r19,r2
    3468:	07000074 	movhi	fp,1
    346c:	e70a6a84 	addi	fp,fp,10666
    3470:	050001c4 	movi	r20,7
    3474:	00000306 	br	3484 <___vfprintf_internal_r+0x430>
    3478:	843ffc04 	addi	r16,r16,-16
    347c:	ad400204 	addi	r21,r21,8
    3480:	9c00130e 	bge	r19,r16,34d0 <___vfprintf_internal_r+0x47c>
    3484:	94800404 	addi	r18,r18,16
    3488:	8c400044 	addi	r17,r17,1
    348c:	af000015 	stw	fp,0(r21)
    3490:	acc00115 	stw	r19,4(r21)
    3494:	dc800e15 	stw	r18,56(sp)
    3498:	dc400d15 	stw	r17,52(sp)
    349c:	a47ff60e 	bge	r20,r17,3478 <___vfprintf_internal_r+0x424>
    34a0:	d9014f17 	ldw	r4,1340(sp)
    34a4:	b00b883a 	mov	r5,r22
    34a8:	d9800c04 	addi	r6,sp,48
    34ac:	d9c15115 	stw	r7,1348(sp)
    34b0:	0002ffc0 	call	2ffc <__sprint_r>
    34b4:	d9c15117 	ldw	r7,1348(sp)
    34b8:	10009e1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    34bc:	843ffc04 	addi	r16,r16,-16
    34c0:	dc800e17 	ldw	r18,56(sp)
    34c4:	dc400d17 	ldw	r17,52(sp)
    34c8:	dd401904 	addi	r21,sp,100
    34cc:	9c3fed16 	blt	r19,r16,3484 <___vfprintf_internal_r+0x430>
    34d0:	9425883a 	add	r18,r18,r16
    34d4:	8c400044 	addi	r17,r17,1
    34d8:	008001c4 	movi	r2,7
    34dc:	af000015 	stw	fp,0(r21)
    34e0:	ac000115 	stw	r16,4(r21)
    34e4:	dc800e15 	stw	r18,56(sp)
    34e8:	dc400d15 	stw	r17,52(sp)
    34ec:	1441f516 	blt	r2,r17,3cc4 <___vfprintf_internal_r+0xc70>
    34f0:	ad400204 	addi	r21,r21,8
    34f4:	00000206 	br	3500 <___vfprintf_internal_r+0x4ac>
    34f8:	dc800e17 	ldw	r18,56(sp)
    34fc:	dc400d17 	ldw	r17,52(sp)
    3500:	d8800407 	ldb	r2,16(sp)
    3504:	10000b26 	beq	r2,zero,3534 <___vfprintf_internal_r+0x4e0>
    3508:	00800044 	movi	r2,1
    350c:	94800044 	addi	r18,r18,1
    3510:	8c400044 	addi	r17,r17,1
    3514:	a8800115 	stw	r2,4(r21)
    3518:	d8c00404 	addi	r3,sp,16
    351c:	008001c4 	movi	r2,7
    3520:	a8c00015 	stw	r3,0(r21)
    3524:	dc800e15 	stw	r18,56(sp)
    3528:	dc400d15 	stw	r17,52(sp)
    352c:	1441da16 	blt	r2,r17,3c98 <___vfprintf_internal_r+0xc44>
    3530:	ad400204 	addi	r21,r21,8
    3534:	d9015017 	ldw	r4,1344(sp)
    3538:	20000b1e 	bne	r4,zero,3568 <___vfprintf_internal_r+0x514>
    353c:	d8800444 	addi	r2,sp,17
    3540:	94800084 	addi	r18,r18,2
    3544:	8c400044 	addi	r17,r17,1
    3548:	a8800015 	stw	r2,0(r21)
    354c:	00c00084 	movi	r3,2
    3550:	008001c4 	movi	r2,7
    3554:	a8c00115 	stw	r3,4(r21)
    3558:	dc800e15 	stw	r18,56(sp)
    355c:	dc400d15 	stw	r17,52(sp)
    3560:	1441c216 	blt	r2,r17,3c6c <___vfprintf_internal_r+0xc18>
    3564:	ad400204 	addi	r21,r21,8
    3568:	d9414e17 	ldw	r5,1336(sp)
    356c:	00802004 	movi	r2,128
    3570:	2880b126 	beq	r5,r2,3838 <___vfprintf_internal_r+0x7e4>
    3574:	d8c14617 	ldw	r3,1304(sp)
    3578:	19e1c83a 	sub	r16,r3,r7
    357c:	0400260e 	bge	zero,r16,3618 <___vfprintf_internal_r+0x5c4>
    3580:	00800404 	movi	r2,16
    3584:	1403c90e 	bge	r2,r16,44ac <___vfprintf_internal_r+0x1458>
    3588:	1027883a 	mov	r19,r2
    358c:	07000074 	movhi	fp,1
    3590:	e70a6684 	addi	fp,fp,10650
    3594:	050001c4 	movi	r20,7
    3598:	00000306 	br	35a8 <___vfprintf_internal_r+0x554>
    359c:	843ffc04 	addi	r16,r16,-16
    35a0:	ad400204 	addi	r21,r21,8
    35a4:	9c00130e 	bge	r19,r16,35f4 <___vfprintf_internal_r+0x5a0>
    35a8:	94800404 	addi	r18,r18,16
    35ac:	8c400044 	addi	r17,r17,1
    35b0:	af000015 	stw	fp,0(r21)
    35b4:	acc00115 	stw	r19,4(r21)
    35b8:	dc800e15 	stw	r18,56(sp)
    35bc:	dc400d15 	stw	r17,52(sp)
    35c0:	a47ff60e 	bge	r20,r17,359c <___vfprintf_internal_r+0x548>
    35c4:	d9014f17 	ldw	r4,1340(sp)
    35c8:	b00b883a 	mov	r5,r22
    35cc:	d9800c04 	addi	r6,sp,48
    35d0:	d9c15115 	stw	r7,1348(sp)
    35d4:	0002ffc0 	call	2ffc <__sprint_r>
    35d8:	d9c15117 	ldw	r7,1348(sp)
    35dc:	1000551e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    35e0:	843ffc04 	addi	r16,r16,-16
    35e4:	dc800e17 	ldw	r18,56(sp)
    35e8:	dc400d17 	ldw	r17,52(sp)
    35ec:	dd401904 	addi	r21,sp,100
    35f0:	9c3fed16 	blt	r19,r16,35a8 <___vfprintf_internal_r+0x554>
    35f4:	9425883a 	add	r18,r18,r16
    35f8:	8c400044 	addi	r17,r17,1
    35fc:	008001c4 	movi	r2,7
    3600:	af000015 	stw	fp,0(r21)
    3604:	ac000115 	stw	r16,4(r21)
    3608:	dc800e15 	stw	r18,56(sp)
    360c:	dc400d15 	stw	r17,52(sp)
    3610:	14418216 	blt	r2,r17,3c1c <___vfprintf_internal_r+0xbc8>
    3614:	ad400204 	addi	r21,r21,8
    3618:	d9014c17 	ldw	r4,1328(sp)
    361c:	2080400c 	andi	r2,r4,256
    3620:	10004a1e 	bne	r2,zero,374c <___vfprintf_internal_r+0x6f8>
    3624:	d9414117 	ldw	r5,1284(sp)
    3628:	91e5883a 	add	r18,r18,r7
    362c:	8c400044 	addi	r17,r17,1
    3630:	008001c4 	movi	r2,7
    3634:	a9400015 	stw	r5,0(r21)
    3638:	a9c00115 	stw	r7,4(r21)
    363c:	dc800e15 	stw	r18,56(sp)
    3640:	dc400d15 	stw	r17,52(sp)
    3644:	14416716 	blt	r2,r17,3be4 <___vfprintf_internal_r+0xb90>
    3648:	a8c00204 	addi	r3,r21,8
    364c:	d9814c17 	ldw	r6,1328(sp)
    3650:	3080010c 	andi	r2,r6,4
    3654:	10002826 	beq	r2,zero,36f8 <___vfprintf_internal_r+0x6a4>
    3658:	d8814a17 	ldw	r2,1320(sp)
    365c:	d9014517 	ldw	r4,1300(sp)
    3660:	1121c83a 	sub	r16,r2,r4
    3664:	0400240e 	bge	zero,r16,36f8 <___vfprintf_internal_r+0x6a4>
    3668:	00800404 	movi	r2,16
    366c:	14044f0e 	bge	r2,r16,47ac <___vfprintf_internal_r+0x1758>
    3670:	dc400d17 	ldw	r17,52(sp)
    3674:	1027883a 	mov	r19,r2
    3678:	07000074 	movhi	fp,1
    367c:	e70a6a84 	addi	fp,fp,10666
    3680:	050001c4 	movi	r20,7
    3684:	00000306 	br	3694 <___vfprintf_internal_r+0x640>
    3688:	843ffc04 	addi	r16,r16,-16
    368c:	18c00204 	addi	r3,r3,8
    3690:	9c00110e 	bge	r19,r16,36d8 <___vfprintf_internal_r+0x684>
    3694:	94800404 	addi	r18,r18,16
    3698:	8c400044 	addi	r17,r17,1
    369c:	1f000015 	stw	fp,0(r3)
    36a0:	1cc00115 	stw	r19,4(r3)
    36a4:	dc800e15 	stw	r18,56(sp)
    36a8:	dc400d15 	stw	r17,52(sp)
    36ac:	a47ff60e 	bge	r20,r17,3688 <___vfprintf_internal_r+0x634>
    36b0:	d9014f17 	ldw	r4,1340(sp)
    36b4:	b00b883a 	mov	r5,r22
    36b8:	d9800c04 	addi	r6,sp,48
    36bc:	0002ffc0 	call	2ffc <__sprint_r>
    36c0:	10001c1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    36c4:	843ffc04 	addi	r16,r16,-16
    36c8:	dc800e17 	ldw	r18,56(sp)
    36cc:	dc400d17 	ldw	r17,52(sp)
    36d0:	d8c01904 	addi	r3,sp,100
    36d4:	9c3fef16 	blt	r19,r16,3694 <___vfprintf_internal_r+0x640>
    36d8:	9425883a 	add	r18,r18,r16
    36dc:	8c400044 	addi	r17,r17,1
    36e0:	008001c4 	movi	r2,7
    36e4:	1f000015 	stw	fp,0(r3)
    36e8:	1c000115 	stw	r16,4(r3)
    36ec:	dc800e15 	stw	r18,56(sp)
    36f0:	dc400d15 	stw	r17,52(sp)
    36f4:	1440cb16 	blt	r2,r17,3a24 <___vfprintf_internal_r+0x9d0>
    36f8:	d8814a17 	ldw	r2,1320(sp)
    36fc:	d9414517 	ldw	r5,1300(sp)
    3700:	1140010e 	bge	r2,r5,3708 <___vfprintf_internal_r+0x6b4>
    3704:	2805883a 	mov	r2,r5
    3708:	d9814b17 	ldw	r6,1324(sp)
    370c:	308d883a 	add	r6,r6,r2
    3710:	d9814b15 	stw	r6,1324(sp)
    3714:	90013b1e 	bne	r18,zero,3c04 <___vfprintf_internal_r+0xbb0>
    3718:	d9c14017 	ldw	r7,1280(sp)
    371c:	dd401904 	addi	r21,sp,100
    3720:	d8000d15 	stw	zero,52(sp)
    3724:	003ea706 	br	31c4 <___vfprintf_internal_r+0x170>
    3728:	d8800e17 	ldw	r2,56(sp)
    372c:	10053f1e 	bne	r2,zero,4c2c <___vfprintf_internal_r+0x1bd8>
    3730:	d8000d15 	stw	zero,52(sp)
    3734:	b080030b 	ldhu	r2,12(r22)
    3738:	1080100c 	andi	r2,r2,64
    373c:	103e8726 	beq	r2,zero,315c <___vfprintf_internal_r+0x108>
    3740:	00bfffc4 	movi	r2,-1
    3744:	d8814b15 	stw	r2,1324(sp)
    3748:	003e8406 	br	315c <___vfprintf_internal_r+0x108>
    374c:	d9814d17 	ldw	r6,1332(sp)
    3750:	00801944 	movi	r2,101
    3754:	11806e16 	blt	r2,r6,3910 <___vfprintf_internal_r+0x8bc>
    3758:	d9414717 	ldw	r5,1308(sp)
    375c:	00c00044 	movi	r3,1
    3760:	1943430e 	bge	r3,r5,4470 <___vfprintf_internal_r+0x141c>
    3764:	d8814117 	ldw	r2,1284(sp)
    3768:	94800044 	addi	r18,r18,1
    376c:	8c400044 	addi	r17,r17,1
    3770:	a8800015 	stw	r2,0(r21)
    3774:	008001c4 	movi	r2,7
    3778:	a8c00115 	stw	r3,4(r21)
    377c:	dc800e15 	stw	r18,56(sp)
    3780:	dc400d15 	stw	r17,52(sp)
    3784:	1441ca16 	blt	r2,r17,3eb0 <___vfprintf_internal_r+0xe5c>
    3788:	a8c00204 	addi	r3,r21,8
    378c:	d9014917 	ldw	r4,1316(sp)
    3790:	00800044 	movi	r2,1
    3794:	94800044 	addi	r18,r18,1
    3798:	8c400044 	addi	r17,r17,1
    379c:	18800115 	stw	r2,4(r3)
    37a0:	008001c4 	movi	r2,7
    37a4:	19000015 	stw	r4,0(r3)
    37a8:	dc800e15 	stw	r18,56(sp)
    37ac:	dc400d15 	stw	r17,52(sp)
    37b0:	1441b616 	blt	r2,r17,3e8c <___vfprintf_internal_r+0xe38>
    37b4:	1cc00204 	addi	r19,r3,8
    37b8:	d9014217 	ldw	r4,1288(sp)
    37bc:	d9414317 	ldw	r5,1292(sp)
    37c0:	000d883a 	mov	r6,zero
    37c4:	000f883a 	mov	r7,zero
    37c8:	000aea40 	call	aea4 <__nedf2>
    37cc:	10017426 	beq	r2,zero,3da0 <___vfprintf_internal_r+0xd4c>
    37d0:	d9414717 	ldw	r5,1308(sp)
    37d4:	d9814117 	ldw	r6,1284(sp)
    37d8:	8c400044 	addi	r17,r17,1
    37dc:	2c85883a 	add	r2,r5,r18
    37e0:	14bfffc4 	addi	r18,r2,-1
    37e4:	28bfffc4 	addi	r2,r5,-1
    37e8:	30c00044 	addi	r3,r6,1
    37ec:	98800115 	stw	r2,4(r19)
    37f0:	008001c4 	movi	r2,7
    37f4:	98c00015 	stw	r3,0(r19)
    37f8:	dc800e15 	stw	r18,56(sp)
    37fc:	dc400d15 	stw	r17,52(sp)
    3800:	14418e16 	blt	r2,r17,3e3c <___vfprintf_internal_r+0xde8>
    3804:	9cc00204 	addi	r19,r19,8
    3808:	d9414817 	ldw	r5,1312(sp)
    380c:	d8800804 	addi	r2,sp,32
    3810:	8c400044 	addi	r17,r17,1
    3814:	9165883a 	add	r18,r18,r5
    3818:	98800015 	stw	r2,0(r19)
    381c:	008001c4 	movi	r2,7
    3820:	99400115 	stw	r5,4(r19)
    3824:	dc800e15 	stw	r18,56(sp)
    3828:	dc400d15 	stw	r17,52(sp)
    382c:	1440ed16 	blt	r2,r17,3be4 <___vfprintf_internal_r+0xb90>
    3830:	98c00204 	addi	r3,r19,8
    3834:	003f8506 	br	364c <___vfprintf_internal_r+0x5f8>
    3838:	d9814a17 	ldw	r6,1320(sp)
    383c:	d8814517 	ldw	r2,1300(sp)
    3840:	30a1c83a 	sub	r16,r6,r2
    3844:	043f4b0e 	bge	zero,r16,3574 <___vfprintf_internal_r+0x520>
    3848:	00800404 	movi	r2,16
    384c:	1404340e 	bge	r2,r16,4920 <___vfprintf_internal_r+0x18cc>
    3850:	1027883a 	mov	r19,r2
    3854:	07000074 	movhi	fp,1
    3858:	e70a6684 	addi	fp,fp,10650
    385c:	050001c4 	movi	r20,7
    3860:	00000306 	br	3870 <___vfprintf_internal_r+0x81c>
    3864:	843ffc04 	addi	r16,r16,-16
    3868:	ad400204 	addi	r21,r21,8
    386c:	9c00130e 	bge	r19,r16,38bc <___vfprintf_internal_r+0x868>
    3870:	94800404 	addi	r18,r18,16
    3874:	8c400044 	addi	r17,r17,1
    3878:	af000015 	stw	fp,0(r21)
    387c:	acc00115 	stw	r19,4(r21)
    3880:	dc800e15 	stw	r18,56(sp)
    3884:	dc400d15 	stw	r17,52(sp)
    3888:	a47ff60e 	bge	r20,r17,3864 <___vfprintf_internal_r+0x810>
    388c:	d9014f17 	ldw	r4,1340(sp)
    3890:	b00b883a 	mov	r5,r22
    3894:	d9800c04 	addi	r6,sp,48
    3898:	d9c15115 	stw	r7,1348(sp)
    389c:	0002ffc0 	call	2ffc <__sprint_r>
    38a0:	d9c15117 	ldw	r7,1348(sp)
    38a4:	103fa31e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    38a8:	843ffc04 	addi	r16,r16,-16
    38ac:	dc800e17 	ldw	r18,56(sp)
    38b0:	dc400d17 	ldw	r17,52(sp)
    38b4:	dd401904 	addi	r21,sp,100
    38b8:	9c3fed16 	blt	r19,r16,3870 <___vfprintf_internal_r+0x81c>
    38bc:	9425883a 	add	r18,r18,r16
    38c0:	8c400044 	addi	r17,r17,1
    38c4:	008001c4 	movi	r2,7
    38c8:	af000015 	stw	fp,0(r21)
    38cc:	ac000115 	stw	r16,4(r21)
    38d0:	dc800e15 	stw	r18,56(sp)
    38d4:	dc400d15 	stw	r17,52(sp)
    38d8:	14416116 	blt	r2,r17,3e60 <___vfprintf_internal_r+0xe0c>
    38dc:	ad400204 	addi	r21,r21,8
    38e0:	003f2406 	br	3574 <___vfprintf_internal_r+0x520>
    38e4:	d9014f17 	ldw	r4,1340(sp)
    38e8:	0006ac40 	call	6ac4 <__sinit>
    38ec:	d9c15117 	ldw	r7,1348(sp)
    38f0:	003def06 	br	30b0 <___vfprintf_internal_r+0x5c>
    38f4:	d9014f17 	ldw	r4,1340(sp)
    38f8:	b00b883a 	mov	r5,r22
    38fc:	d9c15115 	stw	r7,1348(sp)
    3900:	0004f240 	call	4f24 <__swsetup_r>
    3904:	d9c15117 	ldw	r7,1348(sp)
    3908:	103dee26 	beq	r2,zero,30c4 <___vfprintf_internal_r+0x70>
    390c:	003f8c06 	br	3740 <___vfprintf_internal_r+0x6ec>
    3910:	d9014217 	ldw	r4,1288(sp)
    3914:	d9414317 	ldw	r5,1292(sp)
    3918:	000d883a 	mov	r6,zero
    391c:	000f883a 	mov	r7,zero
    3920:	000ae1c0 	call	ae1c <__eqdf2>
    3924:	1000f21e 	bne	r2,zero,3cf0 <___vfprintf_internal_r+0xc9c>
    3928:	00800074 	movhi	r2,1
    392c:	108a6604 	addi	r2,r2,10648
    3930:	94800044 	addi	r18,r18,1
    3934:	8c400044 	addi	r17,r17,1
    3938:	a8800015 	stw	r2,0(r21)
    393c:	00c00044 	movi	r3,1
    3940:	008001c4 	movi	r2,7
    3944:	a8c00115 	stw	r3,4(r21)
    3948:	dc800e15 	stw	r18,56(sp)
    394c:	dc400d15 	stw	r17,52(sp)
    3950:	1442fa16 	blt	r2,r17,453c <___vfprintf_internal_r+0x14e8>
    3954:	a8c00204 	addi	r3,r21,8
    3958:	d8800517 	ldw	r2,20(sp)
    395c:	d9014717 	ldw	r4,1308(sp)
    3960:	11015c0e 	bge	r2,r4,3ed4 <___vfprintf_internal_r+0xe80>
    3964:	dc400d17 	ldw	r17,52(sp)
    3968:	d9814917 	ldw	r6,1316(sp)
    396c:	00800044 	movi	r2,1
    3970:	94800044 	addi	r18,r18,1
    3974:	8c400044 	addi	r17,r17,1
    3978:	18800115 	stw	r2,4(r3)
    397c:	008001c4 	movi	r2,7
    3980:	19800015 	stw	r6,0(r3)
    3984:	dc800e15 	stw	r18,56(sp)
    3988:	dc400d15 	stw	r17,52(sp)
    398c:	14431016 	blt	r2,r17,45d0 <___vfprintf_internal_r+0x157c>
    3990:	18c00204 	addi	r3,r3,8
    3994:	d8814717 	ldw	r2,1308(sp)
    3998:	143fffc4 	addi	r16,r2,-1
    399c:	043f2b0e 	bge	zero,r16,364c <___vfprintf_internal_r+0x5f8>
    39a0:	00800404 	movi	r2,16
    39a4:	1402a20e 	bge	r2,r16,4430 <___vfprintf_internal_r+0x13dc>
    39a8:	dc400d17 	ldw	r17,52(sp)
    39ac:	1027883a 	mov	r19,r2
    39b0:	07000074 	movhi	fp,1
    39b4:	e70a6684 	addi	fp,fp,10650
    39b8:	050001c4 	movi	r20,7
    39bc:	00000306 	br	39cc <___vfprintf_internal_r+0x978>
    39c0:	18c00204 	addi	r3,r3,8
    39c4:	843ffc04 	addi	r16,r16,-16
    39c8:	9c029c0e 	bge	r19,r16,443c <___vfprintf_internal_r+0x13e8>
    39cc:	94800404 	addi	r18,r18,16
    39d0:	8c400044 	addi	r17,r17,1
    39d4:	1f000015 	stw	fp,0(r3)
    39d8:	1cc00115 	stw	r19,4(r3)
    39dc:	dc800e15 	stw	r18,56(sp)
    39e0:	dc400d15 	stw	r17,52(sp)
    39e4:	a47ff60e 	bge	r20,r17,39c0 <___vfprintf_internal_r+0x96c>
    39e8:	d9014f17 	ldw	r4,1340(sp)
    39ec:	b00b883a 	mov	r5,r22
    39f0:	d9800c04 	addi	r6,sp,48
    39f4:	0002ffc0 	call	2ffc <__sprint_r>
    39f8:	103f4e1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    39fc:	dc800e17 	ldw	r18,56(sp)
    3a00:	dc400d17 	ldw	r17,52(sp)
    3a04:	d8c01904 	addi	r3,sp,100
    3a08:	003fee06 	br	39c4 <___vfprintf_internal_r+0x970>
    3a0c:	d8802c0b 	ldhu	r2,176(sp)
    3a10:	00ffffc4 	movi	r3,-1
    3a14:	d8c14b15 	stw	r3,1324(sp)
    3a18:	1080100c 	andi	r2,r2,64
    3a1c:	103dcc1e 	bne	r2,zero,3150 <___vfprintf_internal_r+0xfc>
    3a20:	003dce06 	br	315c <___vfprintf_internal_r+0x108>
    3a24:	d9014f17 	ldw	r4,1340(sp)
    3a28:	b00b883a 	mov	r5,r22
    3a2c:	d9800c04 	addi	r6,sp,48
    3a30:	0002ffc0 	call	2ffc <__sprint_r>
    3a34:	103f3f1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3a38:	dc800e17 	ldw	r18,56(sp)
    3a3c:	003f2e06 	br	36f8 <___vfprintf_internal_r+0x6a4>
    3a40:	d9414c17 	ldw	r5,1328(sp)
    3a44:	29400414 	ori	r5,r5,16
    3a48:	d9414c15 	stw	r5,1328(sp)
    3a4c:	d9814c17 	ldw	r6,1328(sp)
    3a50:	3080080c 	andi	r2,r6,32
    3a54:	10014f1e 	bne	r2,zero,3f94 <___vfprintf_internal_r+0xf40>
    3a58:	d8c14c17 	ldw	r3,1328(sp)
    3a5c:	1880040c 	andi	r2,r3,16
    3a60:	1002ea1e 	bne	r2,zero,460c <___vfprintf_internal_r+0x15b8>
    3a64:	d9014c17 	ldw	r4,1328(sp)
    3a68:	2080100c 	andi	r2,r4,64
    3a6c:	1002e726 	beq	r2,zero,460c <___vfprintf_internal_r+0x15b8>
    3a70:	3880000f 	ldh	r2,0(r7)
    3a74:	39c00104 	addi	r7,r7,4
    3a78:	d9c14015 	stw	r7,1280(sp)
    3a7c:	1023d7fa 	srai	r17,r2,31
    3a80:	1021883a 	mov	r16,r2
    3a84:	88037216 	blt	r17,zero,4850 <___vfprintf_internal_r+0x17fc>
    3a88:	01000044 	movi	r4,1
    3a8c:	98000416 	blt	r19,zero,3aa0 <___vfprintf_internal_r+0xa4c>
    3a90:	d8c14c17 	ldw	r3,1328(sp)
    3a94:	00bfdfc4 	movi	r2,-129
    3a98:	1886703a 	and	r3,r3,r2
    3a9c:	d8c14c15 	stw	r3,1328(sp)
    3aa0:	8444b03a 	or	r2,r16,r17
    3aa4:	1002261e 	bne	r2,zero,4340 <___vfprintf_internal_r+0x12ec>
    3aa8:	9802251e 	bne	r19,zero,4340 <___vfprintf_internal_r+0x12ec>
    3aac:	20803fcc 	andi	r2,r4,255
    3ab0:	10029b26 	beq	r2,zero,4520 <___vfprintf_internal_r+0x14cc>
    3ab4:	d8c01904 	addi	r3,sp,100
    3ab8:	dd000f04 	addi	r20,sp,60
    3abc:	d8c14115 	stw	r3,1284(sp)
    3ac0:	d8c14117 	ldw	r3,1284(sp)
    3ac4:	dcc14515 	stw	r19,1300(sp)
    3ac8:	a0c5c83a 	sub	r2,r20,r3
    3acc:	11c00a04 	addi	r7,r2,40
    3ad0:	99c0010e 	bge	r19,r7,3ad8 <___vfprintf_internal_r+0xa84>
    3ad4:	d9c14515 	stw	r7,1300(sp)
    3ad8:	dcc14615 	stw	r19,1304(sp)
    3adc:	d8800407 	ldb	r2,16(sp)
    3ae0:	103e4c26 	beq	r2,zero,3414 <___vfprintf_internal_r+0x3c0>
    3ae4:	d8814517 	ldw	r2,1300(sp)
    3ae8:	10800044 	addi	r2,r2,1
    3aec:	d8814515 	stw	r2,1300(sp)
    3af0:	003e4806 	br	3414 <___vfprintf_internal_r+0x3c0>
    3af4:	d9814c17 	ldw	r6,1328(sp)
    3af8:	31800414 	ori	r6,r6,16
    3afc:	d9814c15 	stw	r6,1328(sp)
    3b00:	d8c14c17 	ldw	r3,1328(sp)
    3b04:	1880080c 	andi	r2,r3,32
    3b08:	1001271e 	bne	r2,zero,3fa8 <___vfprintf_internal_r+0xf54>
    3b0c:	d9414c17 	ldw	r5,1328(sp)
    3b10:	2880040c 	andi	r2,r5,16
    3b14:	1002b61e 	bne	r2,zero,45f0 <___vfprintf_internal_r+0x159c>
    3b18:	d9814c17 	ldw	r6,1328(sp)
    3b1c:	3080100c 	andi	r2,r6,64
    3b20:	1002b326 	beq	r2,zero,45f0 <___vfprintf_internal_r+0x159c>
    3b24:	3c00000b 	ldhu	r16,0(r7)
    3b28:	0009883a 	mov	r4,zero
    3b2c:	39c00104 	addi	r7,r7,4
    3b30:	0023883a 	mov	r17,zero
    3b34:	d9c14015 	stw	r7,1280(sp)
    3b38:	d8000405 	stb	zero,16(sp)
    3b3c:	003fd306 	br	3a8c <___vfprintf_internal_r+0xa38>
    3b40:	d9014c17 	ldw	r4,1328(sp)
    3b44:	21000414 	ori	r4,r4,16
    3b48:	d9014c15 	stw	r4,1328(sp)
    3b4c:	d9414c17 	ldw	r5,1328(sp)
    3b50:	2880080c 	andi	r2,r5,32
    3b54:	1001081e 	bne	r2,zero,3f78 <___vfprintf_internal_r+0xf24>
    3b58:	d8c14c17 	ldw	r3,1328(sp)
    3b5c:	1880040c 	andi	r2,r3,16
    3b60:	1002b01e 	bne	r2,zero,4624 <___vfprintf_internal_r+0x15d0>
    3b64:	d9014c17 	ldw	r4,1328(sp)
    3b68:	2080100c 	andi	r2,r4,64
    3b6c:	1002ad26 	beq	r2,zero,4624 <___vfprintf_internal_r+0x15d0>
    3b70:	3c00000b 	ldhu	r16,0(r7)
    3b74:	01000044 	movi	r4,1
    3b78:	39c00104 	addi	r7,r7,4
    3b7c:	0023883a 	mov	r17,zero
    3b80:	d9c14015 	stw	r7,1280(sp)
    3b84:	d8000405 	stb	zero,16(sp)
    3b88:	003fc006 	br	3a8c <___vfprintf_internal_r+0xa38>
    3b8c:	d9014f17 	ldw	r4,1340(sp)
    3b90:	b00b883a 	mov	r5,r22
    3b94:	d9800c04 	addi	r6,sp,48
    3b98:	0002ffc0 	call	2ffc <__sprint_r>
    3b9c:	103ee51e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3ba0:	dc800e17 	ldw	r18,56(sp)
    3ba4:	d8c01904 	addi	r3,sp,100
    3ba8:	d9814c17 	ldw	r6,1328(sp)
    3bac:	3080004c 	andi	r2,r6,1
    3bb0:	1005003a 	cmpeq	r2,r2,zero
    3bb4:	103ea51e 	bne	r2,zero,364c <___vfprintf_internal_r+0x5f8>
    3bb8:	00800044 	movi	r2,1
    3bbc:	dc400d17 	ldw	r17,52(sp)
    3bc0:	18800115 	stw	r2,4(r3)
    3bc4:	d8814917 	ldw	r2,1316(sp)
    3bc8:	94800044 	addi	r18,r18,1
    3bcc:	8c400044 	addi	r17,r17,1
    3bd0:	18800015 	stw	r2,0(r3)
    3bd4:	008001c4 	movi	r2,7
    3bd8:	dc800e15 	stw	r18,56(sp)
    3bdc:	dc400d15 	stw	r17,52(sp)
    3be0:	14421e0e 	bge	r2,r17,445c <___vfprintf_internal_r+0x1408>
    3be4:	d9014f17 	ldw	r4,1340(sp)
    3be8:	b00b883a 	mov	r5,r22
    3bec:	d9800c04 	addi	r6,sp,48
    3bf0:	0002ffc0 	call	2ffc <__sprint_r>
    3bf4:	103ecf1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3bf8:	dc800e17 	ldw	r18,56(sp)
    3bfc:	d8c01904 	addi	r3,sp,100
    3c00:	003e9206 	br	364c <___vfprintf_internal_r+0x5f8>
    3c04:	d9014f17 	ldw	r4,1340(sp)
    3c08:	b00b883a 	mov	r5,r22
    3c0c:	d9800c04 	addi	r6,sp,48
    3c10:	0002ffc0 	call	2ffc <__sprint_r>
    3c14:	103ec026 	beq	r2,zero,3718 <___vfprintf_internal_r+0x6c4>
    3c18:	003ec606 	br	3734 <___vfprintf_internal_r+0x6e0>
    3c1c:	d9014f17 	ldw	r4,1340(sp)
    3c20:	b00b883a 	mov	r5,r22
    3c24:	d9800c04 	addi	r6,sp,48
    3c28:	d9c15115 	stw	r7,1348(sp)
    3c2c:	0002ffc0 	call	2ffc <__sprint_r>
    3c30:	d9c15117 	ldw	r7,1348(sp)
    3c34:	103ebf1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3c38:	dc800e17 	ldw	r18,56(sp)
    3c3c:	dc400d17 	ldw	r17,52(sp)
    3c40:	dd401904 	addi	r21,sp,100
    3c44:	003e7406 	br	3618 <___vfprintf_internal_r+0x5c4>
    3c48:	d9014f17 	ldw	r4,1340(sp)
    3c4c:	b00b883a 	mov	r5,r22
    3c50:	d9800c04 	addi	r6,sp,48
    3c54:	d9c15115 	stw	r7,1348(sp)
    3c58:	0002ffc0 	call	2ffc <__sprint_r>
    3c5c:	d9c15117 	ldw	r7,1348(sp)
    3c60:	103eb41e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3c64:	dd401904 	addi	r21,sp,100
    3c68:	003d6d06 	br	3220 <___vfprintf_internal_r+0x1cc>
    3c6c:	d9014f17 	ldw	r4,1340(sp)
    3c70:	b00b883a 	mov	r5,r22
    3c74:	d9800c04 	addi	r6,sp,48
    3c78:	d9c15115 	stw	r7,1348(sp)
    3c7c:	0002ffc0 	call	2ffc <__sprint_r>
    3c80:	d9c15117 	ldw	r7,1348(sp)
    3c84:	103eab1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3c88:	dc800e17 	ldw	r18,56(sp)
    3c8c:	dc400d17 	ldw	r17,52(sp)
    3c90:	dd401904 	addi	r21,sp,100
    3c94:	003e3406 	br	3568 <___vfprintf_internal_r+0x514>
    3c98:	d9014f17 	ldw	r4,1340(sp)
    3c9c:	b00b883a 	mov	r5,r22
    3ca0:	d9800c04 	addi	r6,sp,48
    3ca4:	d9c15115 	stw	r7,1348(sp)
    3ca8:	0002ffc0 	call	2ffc <__sprint_r>
    3cac:	d9c15117 	ldw	r7,1348(sp)
    3cb0:	103ea01e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3cb4:	dc800e17 	ldw	r18,56(sp)
    3cb8:	dc400d17 	ldw	r17,52(sp)
    3cbc:	dd401904 	addi	r21,sp,100
    3cc0:	003e1c06 	br	3534 <___vfprintf_internal_r+0x4e0>
    3cc4:	d9014f17 	ldw	r4,1340(sp)
    3cc8:	b00b883a 	mov	r5,r22
    3ccc:	d9800c04 	addi	r6,sp,48
    3cd0:	d9c15115 	stw	r7,1348(sp)
    3cd4:	0002ffc0 	call	2ffc <__sprint_r>
    3cd8:	d9c15117 	ldw	r7,1348(sp)
    3cdc:	103e951e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3ce0:	dc800e17 	ldw	r18,56(sp)
    3ce4:	dc400d17 	ldw	r17,52(sp)
    3ce8:	dd401904 	addi	r21,sp,100
    3cec:	003e0406 	br	3500 <___vfprintf_internal_r+0x4ac>
    3cf0:	d9000517 	ldw	r4,20(sp)
    3cf4:	0102520e 	bge	zero,r4,4640 <___vfprintf_internal_r+0x15ec>
    3cf8:	d9814717 	ldw	r6,1308(sp)
    3cfc:	21807a16 	blt	r4,r6,3ee8 <___vfprintf_internal_r+0xe94>
    3d00:	d8814117 	ldw	r2,1284(sp)
    3d04:	91a5883a 	add	r18,r18,r6
    3d08:	8c400044 	addi	r17,r17,1
    3d0c:	a8800015 	stw	r2,0(r21)
    3d10:	008001c4 	movi	r2,7
    3d14:	a9800115 	stw	r6,4(r21)
    3d18:	dc800e15 	stw	r18,56(sp)
    3d1c:	dc400d15 	stw	r17,52(sp)
    3d20:	1442f616 	blt	r2,r17,48fc <___vfprintf_internal_r+0x18a8>
    3d24:	a8c00204 	addi	r3,r21,8
    3d28:	d9414717 	ldw	r5,1308(sp)
    3d2c:	2161c83a 	sub	r16,r4,r5
    3d30:	043f9d0e 	bge	zero,r16,3ba8 <___vfprintf_internal_r+0xb54>
    3d34:	00800404 	movi	r2,16
    3d38:	1402130e 	bge	r2,r16,4588 <___vfprintf_internal_r+0x1534>
    3d3c:	dc400d17 	ldw	r17,52(sp)
    3d40:	1027883a 	mov	r19,r2
    3d44:	07000074 	movhi	fp,1
    3d48:	e70a6684 	addi	fp,fp,10650
    3d4c:	050001c4 	movi	r20,7
    3d50:	00000306 	br	3d60 <___vfprintf_internal_r+0xd0c>
    3d54:	18c00204 	addi	r3,r3,8
    3d58:	843ffc04 	addi	r16,r16,-16
    3d5c:	9c020d0e 	bge	r19,r16,4594 <___vfprintf_internal_r+0x1540>
    3d60:	94800404 	addi	r18,r18,16
    3d64:	8c400044 	addi	r17,r17,1
    3d68:	1f000015 	stw	fp,0(r3)
    3d6c:	1cc00115 	stw	r19,4(r3)
    3d70:	dc800e15 	stw	r18,56(sp)
    3d74:	dc400d15 	stw	r17,52(sp)
    3d78:	a47ff60e 	bge	r20,r17,3d54 <___vfprintf_internal_r+0xd00>
    3d7c:	d9014f17 	ldw	r4,1340(sp)
    3d80:	b00b883a 	mov	r5,r22
    3d84:	d9800c04 	addi	r6,sp,48
    3d88:	0002ffc0 	call	2ffc <__sprint_r>
    3d8c:	103e691e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3d90:	dc800e17 	ldw	r18,56(sp)
    3d94:	dc400d17 	ldw	r17,52(sp)
    3d98:	d8c01904 	addi	r3,sp,100
    3d9c:	003fee06 	br	3d58 <___vfprintf_internal_r+0xd04>
    3da0:	d8814717 	ldw	r2,1308(sp)
    3da4:	143fffc4 	addi	r16,r2,-1
    3da8:	043e970e 	bge	zero,r16,3808 <___vfprintf_internal_r+0x7b4>
    3dac:	00800404 	movi	r2,16
    3db0:	1400180e 	bge	r2,r16,3e14 <___vfprintf_internal_r+0xdc0>
    3db4:	1029883a 	mov	r20,r2
    3db8:	07000074 	movhi	fp,1
    3dbc:	e70a6684 	addi	fp,fp,10650
    3dc0:	054001c4 	movi	r21,7
    3dc4:	00000306 	br	3dd4 <___vfprintf_internal_r+0xd80>
    3dc8:	9cc00204 	addi	r19,r19,8
    3dcc:	843ffc04 	addi	r16,r16,-16
    3dd0:	a400120e 	bge	r20,r16,3e1c <___vfprintf_internal_r+0xdc8>
    3dd4:	94800404 	addi	r18,r18,16
    3dd8:	8c400044 	addi	r17,r17,1
    3ddc:	9f000015 	stw	fp,0(r19)
    3de0:	9d000115 	stw	r20,4(r19)
    3de4:	dc800e15 	stw	r18,56(sp)
    3de8:	dc400d15 	stw	r17,52(sp)
    3dec:	ac7ff60e 	bge	r21,r17,3dc8 <___vfprintf_internal_r+0xd74>
    3df0:	d9014f17 	ldw	r4,1340(sp)
    3df4:	b00b883a 	mov	r5,r22
    3df8:	d9800c04 	addi	r6,sp,48
    3dfc:	0002ffc0 	call	2ffc <__sprint_r>
    3e00:	103e4c1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3e04:	dc800e17 	ldw	r18,56(sp)
    3e08:	dc400d17 	ldw	r17,52(sp)
    3e0c:	dcc01904 	addi	r19,sp,100
    3e10:	003fee06 	br	3dcc <___vfprintf_internal_r+0xd78>
    3e14:	07000074 	movhi	fp,1
    3e18:	e70a6684 	addi	fp,fp,10650
    3e1c:	9425883a 	add	r18,r18,r16
    3e20:	8c400044 	addi	r17,r17,1
    3e24:	008001c4 	movi	r2,7
    3e28:	9f000015 	stw	fp,0(r19)
    3e2c:	9c000115 	stw	r16,4(r19)
    3e30:	dc800e15 	stw	r18,56(sp)
    3e34:	dc400d15 	stw	r17,52(sp)
    3e38:	147e720e 	bge	r2,r17,3804 <___vfprintf_internal_r+0x7b0>
    3e3c:	d9014f17 	ldw	r4,1340(sp)
    3e40:	b00b883a 	mov	r5,r22
    3e44:	d9800c04 	addi	r6,sp,48
    3e48:	0002ffc0 	call	2ffc <__sprint_r>
    3e4c:	103e391e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3e50:	dc800e17 	ldw	r18,56(sp)
    3e54:	dc400d17 	ldw	r17,52(sp)
    3e58:	dcc01904 	addi	r19,sp,100
    3e5c:	003e6a06 	br	3808 <___vfprintf_internal_r+0x7b4>
    3e60:	d9014f17 	ldw	r4,1340(sp)
    3e64:	b00b883a 	mov	r5,r22
    3e68:	d9800c04 	addi	r6,sp,48
    3e6c:	d9c15115 	stw	r7,1348(sp)
    3e70:	0002ffc0 	call	2ffc <__sprint_r>
    3e74:	d9c15117 	ldw	r7,1348(sp)
    3e78:	103e2e1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3e7c:	dc800e17 	ldw	r18,56(sp)
    3e80:	dc400d17 	ldw	r17,52(sp)
    3e84:	dd401904 	addi	r21,sp,100
    3e88:	003dba06 	br	3574 <___vfprintf_internal_r+0x520>
    3e8c:	d9014f17 	ldw	r4,1340(sp)
    3e90:	b00b883a 	mov	r5,r22
    3e94:	d9800c04 	addi	r6,sp,48
    3e98:	0002ffc0 	call	2ffc <__sprint_r>
    3e9c:	103e251e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3ea0:	dc800e17 	ldw	r18,56(sp)
    3ea4:	dc400d17 	ldw	r17,52(sp)
    3ea8:	dcc01904 	addi	r19,sp,100
    3eac:	003e4206 	br	37b8 <___vfprintf_internal_r+0x764>
    3eb0:	d9014f17 	ldw	r4,1340(sp)
    3eb4:	b00b883a 	mov	r5,r22
    3eb8:	d9800c04 	addi	r6,sp,48
    3ebc:	0002ffc0 	call	2ffc <__sprint_r>
    3ec0:	103e1c1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    3ec4:	dc800e17 	ldw	r18,56(sp)
    3ec8:	dc400d17 	ldw	r17,52(sp)
    3ecc:	d8c01904 	addi	r3,sp,100
    3ed0:	003e2e06 	br	378c <___vfprintf_internal_r+0x738>
    3ed4:	d9414c17 	ldw	r5,1328(sp)
    3ed8:	2880004c 	andi	r2,r5,1
    3edc:	1005003a 	cmpeq	r2,r2,zero
    3ee0:	103dda1e 	bne	r2,zero,364c <___vfprintf_internal_r+0x5f8>
    3ee4:	003e9f06 	br	3964 <___vfprintf_internal_r+0x910>
    3ee8:	d8c14117 	ldw	r3,1284(sp)
    3eec:	9125883a 	add	r18,r18,r4
    3ef0:	8c400044 	addi	r17,r17,1
    3ef4:	008001c4 	movi	r2,7
    3ef8:	a8c00015 	stw	r3,0(r21)
    3efc:	a9000115 	stw	r4,4(r21)
    3f00:	dc800e15 	stw	r18,56(sp)
    3f04:	dc400d15 	stw	r17,52(sp)
    3f08:	14426616 	blt	r2,r17,48a4 <___vfprintf_internal_r+0x1850>
    3f0c:	a8c00204 	addi	r3,r21,8
    3f10:	d9414917 	ldw	r5,1316(sp)
    3f14:	00800044 	movi	r2,1
    3f18:	94800044 	addi	r18,r18,1
    3f1c:	8c400044 	addi	r17,r17,1
    3f20:	18800115 	stw	r2,4(r3)
    3f24:	008001c4 	movi	r2,7
    3f28:	19400015 	stw	r5,0(r3)
    3f2c:	dc800e15 	stw	r18,56(sp)
    3f30:	dc400d15 	stw	r17,52(sp)
    3f34:	2021883a 	mov	r16,r4
    3f38:	14425016 	blt	r2,r17,487c <___vfprintf_internal_r+0x1828>
    3f3c:	19400204 	addi	r5,r3,8
    3f40:	d9814717 	ldw	r6,1308(sp)
    3f44:	8c400044 	addi	r17,r17,1
    3f48:	dc400d15 	stw	r17,52(sp)
    3f4c:	3107c83a 	sub	r3,r6,r4
    3f50:	d9014117 	ldw	r4,1284(sp)
    3f54:	90e5883a 	add	r18,r18,r3
    3f58:	28c00115 	stw	r3,4(r5)
    3f5c:	8105883a 	add	r2,r16,r4
    3f60:	28800015 	stw	r2,0(r5)
    3f64:	008001c4 	movi	r2,7
    3f68:	dc800e15 	stw	r18,56(sp)
    3f6c:	147f1d16 	blt	r2,r17,3be4 <___vfprintf_internal_r+0xb90>
    3f70:	28c00204 	addi	r3,r5,8
    3f74:	003db506 	br	364c <___vfprintf_internal_r+0x5f8>
    3f78:	3c000017 	ldw	r16,0(r7)
    3f7c:	3c400117 	ldw	r17,4(r7)
    3f80:	39800204 	addi	r6,r7,8
    3f84:	01000044 	movi	r4,1
    3f88:	d9814015 	stw	r6,1280(sp)
    3f8c:	d8000405 	stb	zero,16(sp)
    3f90:	003ebe06 	br	3a8c <___vfprintf_internal_r+0xa38>
    3f94:	3c000017 	ldw	r16,0(r7)
    3f98:	3c400117 	ldw	r17,4(r7)
    3f9c:	38800204 	addi	r2,r7,8
    3fa0:	d8814015 	stw	r2,1280(sp)
    3fa4:	003eb706 	br	3a84 <___vfprintf_internal_r+0xa30>
    3fa8:	3c000017 	ldw	r16,0(r7)
    3fac:	3c400117 	ldw	r17,4(r7)
    3fb0:	39000204 	addi	r4,r7,8
    3fb4:	d9014015 	stw	r4,1280(sp)
    3fb8:	0009883a 	mov	r4,zero
    3fbc:	d8000405 	stb	zero,16(sp)
    3fc0:	003eb206 	br	3a8c <___vfprintf_internal_r+0xa38>
    3fc4:	38c00017 	ldw	r3,0(r7)
    3fc8:	39c00104 	addi	r7,r7,4
    3fcc:	d8c14a15 	stw	r3,1320(sp)
    3fd0:	1800d10e 	bge	r3,zero,4318 <___vfprintf_internal_r+0x12c4>
    3fd4:	00c7c83a 	sub	r3,zero,r3
    3fd8:	d8c14a15 	stw	r3,1320(sp)
    3fdc:	d9014c17 	ldw	r4,1328(sp)
    3fe0:	b8c00007 	ldb	r3,0(r23)
    3fe4:	21000114 	ori	r4,r4,4
    3fe8:	d9014c15 	stw	r4,1328(sp)
    3fec:	003c9806 	br	3250 <___vfprintf_internal_r+0x1fc>
    3ff0:	d9814c17 	ldw	r6,1328(sp)
    3ff4:	3080080c 	andi	r2,r6,32
    3ff8:	1001f026 	beq	r2,zero,47bc <___vfprintf_internal_r+0x1768>
    3ffc:	d9014b17 	ldw	r4,1324(sp)
    4000:	38800017 	ldw	r2,0(r7)
    4004:	39c00104 	addi	r7,r7,4
    4008:	d9c14015 	stw	r7,1280(sp)
    400c:	2007d7fa 	srai	r3,r4,31
    4010:	d9c14017 	ldw	r7,1280(sp)
    4014:	11000015 	stw	r4,0(r2)
    4018:	10c00115 	stw	r3,4(r2)
    401c:	003c6906 	br	31c4 <___vfprintf_internal_r+0x170>
    4020:	b8c00007 	ldb	r3,0(r23)
    4024:	00801b04 	movi	r2,108
    4028:	18824f26 	beq	r3,r2,4968 <___vfprintf_internal_r+0x1914>
    402c:	d9414c17 	ldw	r5,1328(sp)
    4030:	29400414 	ori	r5,r5,16
    4034:	d9414c15 	stw	r5,1328(sp)
    4038:	003c8506 	br	3250 <___vfprintf_internal_r+0x1fc>
    403c:	d9814c17 	ldw	r6,1328(sp)
    4040:	b8c00007 	ldb	r3,0(r23)
    4044:	31800814 	ori	r6,r6,32
    4048:	d9814c15 	stw	r6,1328(sp)
    404c:	003c8006 	br	3250 <___vfprintf_internal_r+0x1fc>
    4050:	d8814c17 	ldw	r2,1328(sp)
    4054:	3c000017 	ldw	r16,0(r7)
    4058:	00c01e04 	movi	r3,120
    405c:	10800094 	ori	r2,r2,2
    4060:	d8814c15 	stw	r2,1328(sp)
    4064:	39c00104 	addi	r7,r7,4
    4068:	01400074 	movhi	r5,1
    406c:	294a4f04 	addi	r5,r5,10556
    4070:	00800c04 	movi	r2,48
    4074:	0023883a 	mov	r17,zero
    4078:	01000084 	movi	r4,2
    407c:	d9c14015 	stw	r7,1280(sp)
    4080:	d8c14d15 	stw	r3,1332(sp)
    4084:	d9414415 	stw	r5,1296(sp)
    4088:	d8800445 	stb	r2,17(sp)
    408c:	d8c00485 	stb	r3,18(sp)
    4090:	d8000405 	stb	zero,16(sp)
    4094:	003e7d06 	br	3a8c <___vfprintf_internal_r+0xa38>
    4098:	d8814c17 	ldw	r2,1328(sp)
    409c:	b8c00007 	ldb	r3,0(r23)
    40a0:	10801014 	ori	r2,r2,64
    40a4:	d8814c15 	stw	r2,1328(sp)
    40a8:	003c6906 	br	3250 <___vfprintf_internal_r+0x1fc>
    40ac:	d9414c17 	ldw	r5,1328(sp)
    40b0:	2880020c 	andi	r2,r5,8
    40b4:	1001df26 	beq	r2,zero,4834 <___vfprintf_internal_r+0x17e0>
    40b8:	39800017 	ldw	r6,0(r7)
    40bc:	38800204 	addi	r2,r7,8
    40c0:	d8814015 	stw	r2,1280(sp)
    40c4:	d9814215 	stw	r6,1288(sp)
    40c8:	39c00117 	ldw	r7,4(r7)
    40cc:	d9c14315 	stw	r7,1292(sp)
    40d0:	d9014217 	ldw	r4,1288(sp)
    40d4:	d9414317 	ldw	r5,1292(sp)
    40d8:	00098bc0 	call	98bc <__isinfd>
    40dc:	10021726 	beq	r2,zero,493c <___vfprintf_internal_r+0x18e8>
    40e0:	d9014217 	ldw	r4,1288(sp)
    40e4:	d9414317 	ldw	r5,1292(sp)
    40e8:	000d883a 	mov	r6,zero
    40ec:	000f883a 	mov	r7,zero
    40f0:	000b03c0 	call	b03c <__ltdf2>
    40f4:	1002ca16 	blt	r2,zero,4c20 <___vfprintf_internal_r+0x1bcc>
    40f8:	d9414d17 	ldw	r5,1332(sp)
    40fc:	008011c4 	movi	r2,71
    4100:	11420a16 	blt	r2,r5,492c <___vfprintf_internal_r+0x18d8>
    4104:	01800074 	movhi	r6,1
    4108:	318a5404 	addi	r6,r6,10576
    410c:	d9814115 	stw	r6,1284(sp)
    4110:	d9014c17 	ldw	r4,1328(sp)
    4114:	00c000c4 	movi	r3,3
    4118:	00bfdfc4 	movi	r2,-129
    411c:	2088703a 	and	r4,r4,r2
    4120:	180f883a 	mov	r7,r3
    4124:	d8c14515 	stw	r3,1300(sp)
    4128:	d9014c15 	stw	r4,1328(sp)
    412c:	d8014615 	stw	zero,1304(sp)
    4130:	003e6a06 	br	3adc <___vfprintf_internal_r+0xa88>
    4134:	38800017 	ldw	r2,0(r7)
    4138:	00c00044 	movi	r3,1
    413c:	39c00104 	addi	r7,r7,4
    4140:	d9c14015 	stw	r7,1280(sp)
    4144:	d9000f04 	addi	r4,sp,60
    4148:	180f883a 	mov	r7,r3
    414c:	d8c14515 	stw	r3,1300(sp)
    4150:	d9014115 	stw	r4,1284(sp)
    4154:	d8800f05 	stb	r2,60(sp)
    4158:	d8000405 	stb	zero,16(sp)
    415c:	003cac06 	br	3410 <___vfprintf_internal_r+0x3bc>
    4160:	01400074 	movhi	r5,1
    4164:	294a5a04 	addi	r5,r5,10600
    4168:	d9414415 	stw	r5,1296(sp)
    416c:	d9814c17 	ldw	r6,1328(sp)
    4170:	3080080c 	andi	r2,r6,32
    4174:	1000f926 	beq	r2,zero,455c <___vfprintf_internal_r+0x1508>
    4178:	3c000017 	ldw	r16,0(r7)
    417c:	3c400117 	ldw	r17,4(r7)
    4180:	38800204 	addi	r2,r7,8
    4184:	d8814015 	stw	r2,1280(sp)
    4188:	d9414c17 	ldw	r5,1328(sp)
    418c:	2880004c 	andi	r2,r5,1
    4190:	1005003a 	cmpeq	r2,r2,zero
    4194:	1000b31e 	bne	r2,zero,4464 <___vfprintf_internal_r+0x1410>
    4198:	8444b03a 	or	r2,r16,r17
    419c:	1000b126 	beq	r2,zero,4464 <___vfprintf_internal_r+0x1410>
    41a0:	d9814d17 	ldw	r6,1332(sp)
    41a4:	29400094 	ori	r5,r5,2
    41a8:	00800c04 	movi	r2,48
    41ac:	01000084 	movi	r4,2
    41b0:	d9414c15 	stw	r5,1328(sp)
    41b4:	d8800445 	stb	r2,17(sp)
    41b8:	d9800485 	stb	r6,18(sp)
    41bc:	d8000405 	stb	zero,16(sp)
    41c0:	003e3206 	br	3a8c <___vfprintf_internal_r+0xa38>
    41c4:	01800074 	movhi	r6,1
    41c8:	318a4f04 	addi	r6,r6,10556
    41cc:	d9814415 	stw	r6,1296(sp)
    41d0:	003fe606 	br	416c <___vfprintf_internal_r+0x1118>
    41d4:	00800ac4 	movi	r2,43
    41d8:	d8800405 	stb	r2,16(sp)
    41dc:	b8c00007 	ldb	r3,0(r23)
    41e0:	003c1b06 	br	3250 <___vfprintf_internal_r+0x1fc>
    41e4:	d8814c17 	ldw	r2,1328(sp)
    41e8:	b8c00007 	ldb	r3,0(r23)
    41ec:	10800054 	ori	r2,r2,1
    41f0:	d8814c15 	stw	r2,1328(sp)
    41f4:	003c1606 	br	3250 <___vfprintf_internal_r+0x1fc>
    41f8:	d8800407 	ldb	r2,16(sp)
    41fc:	1000461e 	bne	r2,zero,4318 <___vfprintf_internal_r+0x12c4>
    4200:	00800804 	movi	r2,32
    4204:	d8800405 	stb	r2,16(sp)
    4208:	b8c00007 	ldb	r3,0(r23)
    420c:	003c1006 	br	3250 <___vfprintf_internal_r+0x1fc>
    4210:	d9814c17 	ldw	r6,1328(sp)
    4214:	b8c00007 	ldb	r3,0(r23)
    4218:	31800214 	ori	r6,r6,8
    421c:	d9814c15 	stw	r6,1328(sp)
    4220:	003c0b06 	br	3250 <___vfprintf_internal_r+0x1fc>
    4224:	0007883a 	mov	r3,zero
    4228:	01000244 	movi	r4,9
    422c:	188002a4 	muli	r2,r3,10
    4230:	b8c00007 	ldb	r3,0(r23)
    4234:	d9814d17 	ldw	r6,1332(sp)
    4238:	bdc00044 	addi	r23,r23,1
    423c:	d8c14d15 	stw	r3,1332(sp)
    4240:	d9414d17 	ldw	r5,1332(sp)
    4244:	3085883a 	add	r2,r6,r2
    4248:	10fff404 	addi	r3,r2,-48
    424c:	28bff404 	addi	r2,r5,-48
    4250:	20bff62e 	bgeu	r4,r2,422c <___vfprintf_internal_r+0x11d8>
    4254:	d8c14a15 	stw	r3,1320(sp)
    4258:	003bff06 	br	3258 <___vfprintf_internal_r+0x204>
    425c:	d9414c17 	ldw	r5,1328(sp)
    4260:	b8c00007 	ldb	r3,0(r23)
    4264:	29402014 	ori	r5,r5,128
    4268:	d9414c15 	stw	r5,1328(sp)
    426c:	003bf806 	br	3250 <___vfprintf_internal_r+0x1fc>
    4270:	b8c00007 	ldb	r3,0(r23)
    4274:	00800a84 	movi	r2,42
    4278:	bdc00044 	addi	r23,r23,1
    427c:	18831526 	beq	r3,r2,4ed4 <___vfprintf_internal_r+0x1e80>
    4280:	d8c14d15 	stw	r3,1332(sp)
    4284:	18bff404 	addi	r2,r3,-48
    4288:	00c00244 	movi	r3,9
    428c:	18827836 	bltu	r3,r2,4c70 <___vfprintf_internal_r+0x1c1c>
    4290:	000d883a 	mov	r6,zero
    4294:	308002a4 	muli	r2,r6,10
    4298:	b9800007 	ldb	r6,0(r23)
    429c:	d9414d17 	ldw	r5,1332(sp)
    42a0:	bdc00044 	addi	r23,r23,1
    42a4:	d9814d15 	stw	r6,1332(sp)
    42a8:	d9014d17 	ldw	r4,1332(sp)
    42ac:	1145883a 	add	r2,r2,r5
    42b0:	11bff404 	addi	r6,r2,-48
    42b4:	20bff404 	addi	r2,r4,-48
    42b8:	18bff62e 	bgeu	r3,r2,4294 <___vfprintf_internal_r+0x1240>
    42bc:	3027883a 	mov	r19,r6
    42c0:	303be50e 	bge	r6,zero,3258 <___vfprintf_internal_r+0x204>
    42c4:	04ffffc4 	movi	r19,-1
    42c8:	003be306 	br	3258 <___vfprintf_internal_r+0x204>
    42cc:	d8000405 	stb	zero,16(sp)
    42d0:	39800017 	ldw	r6,0(r7)
    42d4:	39c00104 	addi	r7,r7,4
    42d8:	d9c14015 	stw	r7,1280(sp)
    42dc:	d9814115 	stw	r6,1284(sp)
    42e0:	3001c926 	beq	r6,zero,4a08 <___vfprintf_internal_r+0x19b4>
    42e4:	98000e16 	blt	r19,zero,4320 <___vfprintf_internal_r+0x12cc>
    42e8:	d9014117 	ldw	r4,1284(sp)
    42ec:	000b883a 	mov	r5,zero
    42f0:	980d883a 	mov	r6,r19
    42f4:	00081100 	call	8110 <memchr>
    42f8:	10025926 	beq	r2,zero,4c60 <___vfprintf_internal_r+0x1c0c>
    42fc:	d8c14117 	ldw	r3,1284(sp)
    4300:	10cfc83a 	sub	r7,r2,r3
    4304:	99c19e16 	blt	r19,r7,4980 <___vfprintf_internal_r+0x192c>
    4308:	d9c14515 	stw	r7,1300(sp)
    430c:	38000916 	blt	r7,zero,4334 <___vfprintf_internal_r+0x12e0>
    4310:	d8014615 	stw	zero,1304(sp)
    4314:	003df106 	br	3adc <___vfprintf_internal_r+0xa88>
    4318:	b8c00007 	ldb	r3,0(r23)
    431c:	003bcc06 	br	3250 <___vfprintf_internal_r+0x1fc>
    4320:	d9014117 	ldw	r4,1284(sp)
    4324:	0002f880 	call	2f88 <strlen>
    4328:	d8814515 	stw	r2,1300(sp)
    432c:	100f883a 	mov	r7,r2
    4330:	103ff70e 	bge	r2,zero,4310 <___vfprintf_internal_r+0x12bc>
    4334:	d8014515 	stw	zero,1300(sp)
    4338:	d8014615 	stw	zero,1304(sp)
    433c:	003de706 	br	3adc <___vfprintf_internal_r+0xa88>
    4340:	20c03fcc 	andi	r3,r4,255
    4344:	00800044 	movi	r2,1
    4348:	18802d26 	beq	r3,r2,4400 <___vfprintf_internal_r+0x13ac>
    434c:	18800e36 	bltu	r3,r2,4388 <___vfprintf_internal_r+0x1334>
    4350:	00800084 	movi	r2,2
    4354:	1880fa26 	beq	r3,r2,4740 <___vfprintf_internal_r+0x16ec>
    4358:	01000074 	movhi	r4,1
    435c:	210a5f04 	addi	r4,r4,10620
    4360:	0002f880 	call	2f88 <strlen>
    4364:	100f883a 	mov	r7,r2
    4368:	dcc14515 	stw	r19,1300(sp)
    436c:	9880010e 	bge	r19,r2,4374 <___vfprintf_internal_r+0x1320>
    4370:	d8814515 	stw	r2,1300(sp)
    4374:	00800074 	movhi	r2,1
    4378:	108a5f04 	addi	r2,r2,10620
    437c:	dcc14615 	stw	r19,1304(sp)
    4380:	d8814115 	stw	r2,1284(sp)
    4384:	003dd506 	br	3adc <___vfprintf_internal_r+0xa88>
    4388:	d9401904 	addi	r5,sp,100
    438c:	dd000f04 	addi	r20,sp,60
    4390:	d9414115 	stw	r5,1284(sp)
    4394:	880a977a 	slli	r5,r17,29
    4398:	d9814117 	ldw	r6,1284(sp)
    439c:	8004d0fa 	srli	r2,r16,3
    43a0:	8806d0fa 	srli	r3,r17,3
    43a4:	810001cc 	andi	r4,r16,7
    43a8:	2884b03a 	or	r2,r5,r2
    43ac:	31bfffc4 	addi	r6,r6,-1
    43b0:	21000c04 	addi	r4,r4,48
    43b4:	d9814115 	stw	r6,1284(sp)
    43b8:	10cab03a 	or	r5,r2,r3
    43bc:	31000005 	stb	r4,0(r6)
    43c0:	1021883a 	mov	r16,r2
    43c4:	1823883a 	mov	r17,r3
    43c8:	283ff21e 	bne	r5,zero,4394 <___vfprintf_internal_r+0x1340>
    43cc:	d8c14c17 	ldw	r3,1328(sp)
    43d0:	1880004c 	andi	r2,r3,1
    43d4:	1005003a 	cmpeq	r2,r2,zero
    43d8:	103db91e 	bne	r2,zero,3ac0 <___vfprintf_internal_r+0xa6c>
    43dc:	20803fcc 	andi	r2,r4,255
    43e0:	1080201c 	xori	r2,r2,128
    43e4:	10bfe004 	addi	r2,r2,-128
    43e8:	00c00c04 	movi	r3,48
    43ec:	10fdb426 	beq	r2,r3,3ac0 <___vfprintf_internal_r+0xa6c>
    43f0:	31bfffc4 	addi	r6,r6,-1
    43f4:	d9814115 	stw	r6,1284(sp)
    43f8:	30c00005 	stb	r3,0(r6)
    43fc:	003db006 	br	3ac0 <___vfprintf_internal_r+0xa6c>
    4400:	88800068 	cmpgeui	r2,r17,1
    4404:	10002c1e 	bne	r2,zero,44b8 <___vfprintf_internal_r+0x1464>
    4408:	8800021e 	bne	r17,zero,4414 <___vfprintf_internal_r+0x13c0>
    440c:	00800244 	movi	r2,9
    4410:	14002936 	bltu	r2,r16,44b8 <___vfprintf_internal_r+0x1464>
    4414:	d90018c4 	addi	r4,sp,99
    4418:	dd000f04 	addi	r20,sp,60
    441c:	d9014115 	stw	r4,1284(sp)
    4420:	d9014117 	ldw	r4,1284(sp)
    4424:	80800c04 	addi	r2,r16,48
    4428:	20800005 	stb	r2,0(r4)
    442c:	003da406 	br	3ac0 <___vfprintf_internal_r+0xa6c>
    4430:	dc400d17 	ldw	r17,52(sp)
    4434:	07000074 	movhi	fp,1
    4438:	e70a6684 	addi	fp,fp,10650
    443c:	9425883a 	add	r18,r18,r16
    4440:	8c400044 	addi	r17,r17,1
    4444:	008001c4 	movi	r2,7
    4448:	1f000015 	stw	fp,0(r3)
    444c:	1c000115 	stw	r16,4(r3)
    4450:	dc800e15 	stw	r18,56(sp)
    4454:	dc400d15 	stw	r17,52(sp)
    4458:	147de216 	blt	r2,r17,3be4 <___vfprintf_internal_r+0xb90>
    445c:	18c00204 	addi	r3,r3,8
    4460:	003c7a06 	br	364c <___vfprintf_internal_r+0x5f8>
    4464:	01000084 	movi	r4,2
    4468:	d8000405 	stb	zero,16(sp)
    446c:	003d8706 	br	3a8c <___vfprintf_internal_r+0xa38>
    4470:	d9814c17 	ldw	r6,1328(sp)
    4474:	30c4703a 	and	r2,r6,r3
    4478:	1005003a 	cmpeq	r2,r2,zero
    447c:	103cb926 	beq	r2,zero,3764 <___vfprintf_internal_r+0x710>
    4480:	d9014117 	ldw	r4,1284(sp)
    4484:	94800044 	addi	r18,r18,1
    4488:	8c400044 	addi	r17,r17,1
    448c:	008001c4 	movi	r2,7
    4490:	a9000015 	stw	r4,0(r21)
    4494:	a8c00115 	stw	r3,4(r21)
    4498:	dc800e15 	stw	r18,56(sp)
    449c:	dc400d15 	stw	r17,52(sp)
    44a0:	147e6616 	blt	r2,r17,3e3c <___vfprintf_internal_r+0xde8>
    44a4:	acc00204 	addi	r19,r21,8
    44a8:	003cd706 	br	3808 <___vfprintf_internal_r+0x7b4>
    44ac:	07000074 	movhi	fp,1
    44b0:	e70a6684 	addi	fp,fp,10650
    44b4:	003c4f06 	br	35f4 <___vfprintf_internal_r+0x5a0>
    44b8:	dd000f04 	addi	r20,sp,60
    44bc:	dc801904 	addi	r18,sp,100
    44c0:	8009883a 	mov	r4,r16
    44c4:	880b883a 	mov	r5,r17
    44c8:	01800284 	movi	r6,10
    44cc:	000f883a 	mov	r7,zero
    44d0:	000a6140 	call	a614 <__umoddi3>
    44d4:	12000c04 	addi	r8,r2,48
    44d8:	94bfffc4 	addi	r18,r18,-1
    44dc:	8009883a 	mov	r4,r16
    44e0:	880b883a 	mov	r5,r17
    44e4:	01800284 	movi	r6,10
    44e8:	000f883a 	mov	r7,zero
    44ec:	92000005 	stb	r8,0(r18)
    44f0:	000a0380 	call	a038 <__udivdi3>
    44f4:	1009883a 	mov	r4,r2
    44f8:	1021883a 	mov	r16,r2
    44fc:	18800068 	cmpgeui	r2,r3,1
    4500:	1823883a 	mov	r17,r3
    4504:	103fee1e 	bne	r2,zero,44c0 <___vfprintf_internal_r+0x146c>
    4508:	1800021e 	bne	r3,zero,4514 <___vfprintf_internal_r+0x14c0>
    450c:	00800244 	movi	r2,9
    4510:	113feb36 	bltu	r2,r4,44c0 <___vfprintf_internal_r+0x146c>
    4514:	94bfffc4 	addi	r18,r18,-1
    4518:	dc814115 	stw	r18,1284(sp)
    451c:	003fc006 	br	4420 <___vfprintf_internal_r+0x13cc>
    4520:	d9014c17 	ldw	r4,1328(sp)
    4524:	2080004c 	andi	r2,r4,1
    4528:	10009a1e 	bne	r2,zero,4794 <___vfprintf_internal_r+0x1740>
    452c:	d9401904 	addi	r5,sp,100
    4530:	dd000f04 	addi	r20,sp,60
    4534:	d9414115 	stw	r5,1284(sp)
    4538:	003d6106 	br	3ac0 <___vfprintf_internal_r+0xa6c>
    453c:	d9014f17 	ldw	r4,1340(sp)
    4540:	b00b883a 	mov	r5,r22
    4544:	d9800c04 	addi	r6,sp,48
    4548:	0002ffc0 	call	2ffc <__sprint_r>
    454c:	103c791e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    4550:	dc800e17 	ldw	r18,56(sp)
    4554:	d8c01904 	addi	r3,sp,100
    4558:	003cff06 	br	3958 <___vfprintf_internal_r+0x904>
    455c:	d8c14c17 	ldw	r3,1328(sp)
    4560:	1880040c 	andi	r2,r3,16
    4564:	1000711e 	bne	r2,zero,472c <___vfprintf_internal_r+0x16d8>
    4568:	d9014c17 	ldw	r4,1328(sp)
    456c:	2080100c 	andi	r2,r4,64
    4570:	10006e26 	beq	r2,zero,472c <___vfprintf_internal_r+0x16d8>
    4574:	3c00000b 	ldhu	r16,0(r7)
    4578:	0023883a 	mov	r17,zero
    457c:	39c00104 	addi	r7,r7,4
    4580:	d9c14015 	stw	r7,1280(sp)
    4584:	003f0006 	br	4188 <___vfprintf_internal_r+0x1134>
    4588:	dc400d17 	ldw	r17,52(sp)
    458c:	07000074 	movhi	fp,1
    4590:	e70a6684 	addi	fp,fp,10650
    4594:	9425883a 	add	r18,r18,r16
    4598:	8c400044 	addi	r17,r17,1
    459c:	008001c4 	movi	r2,7
    45a0:	1f000015 	stw	fp,0(r3)
    45a4:	1c000115 	stw	r16,4(r3)
    45a8:	dc800e15 	stw	r18,56(sp)
    45ac:	dc400d15 	stw	r17,52(sp)
    45b0:	147d7616 	blt	r2,r17,3b8c <___vfprintf_internal_r+0xb38>
    45b4:	18c00204 	addi	r3,r3,8
    45b8:	003d7b06 	br	3ba8 <___vfprintf_internal_r+0xb54>
    45bc:	dc800e17 	ldw	r18,56(sp)
    45c0:	dc400d17 	ldw	r17,52(sp)
    45c4:	07000074 	movhi	fp,1
    45c8:	e70a6a84 	addi	fp,fp,10666
    45cc:	003bc006 	br	34d0 <___vfprintf_internal_r+0x47c>
    45d0:	d9014f17 	ldw	r4,1340(sp)
    45d4:	b00b883a 	mov	r5,r22
    45d8:	d9800c04 	addi	r6,sp,48
    45dc:	0002ffc0 	call	2ffc <__sprint_r>
    45e0:	103c541e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    45e4:	dc800e17 	ldw	r18,56(sp)
    45e8:	d8c01904 	addi	r3,sp,100
    45ec:	003ce906 	br	3994 <___vfprintf_internal_r+0x940>
    45f0:	3c000017 	ldw	r16,0(r7)
    45f4:	0009883a 	mov	r4,zero
    45f8:	39c00104 	addi	r7,r7,4
    45fc:	0023883a 	mov	r17,zero
    4600:	d9c14015 	stw	r7,1280(sp)
    4604:	d8000405 	stb	zero,16(sp)
    4608:	003d2006 	br	3a8c <___vfprintf_internal_r+0xa38>
    460c:	38800017 	ldw	r2,0(r7)
    4610:	39c00104 	addi	r7,r7,4
    4614:	d9c14015 	stw	r7,1280(sp)
    4618:	1023d7fa 	srai	r17,r2,31
    461c:	1021883a 	mov	r16,r2
    4620:	003d1806 	br	3a84 <___vfprintf_internal_r+0xa30>
    4624:	3c000017 	ldw	r16,0(r7)
    4628:	01000044 	movi	r4,1
    462c:	39c00104 	addi	r7,r7,4
    4630:	0023883a 	mov	r17,zero
    4634:	d9c14015 	stw	r7,1280(sp)
    4638:	d8000405 	stb	zero,16(sp)
    463c:	003d1306 	br	3a8c <___vfprintf_internal_r+0xa38>
    4640:	00800074 	movhi	r2,1
    4644:	108a6604 	addi	r2,r2,10648
    4648:	94800044 	addi	r18,r18,1
    464c:	8c400044 	addi	r17,r17,1
    4650:	a8800015 	stw	r2,0(r21)
    4654:	00c00044 	movi	r3,1
    4658:	008001c4 	movi	r2,7
    465c:	a8c00115 	stw	r3,4(r21)
    4660:	dc800e15 	stw	r18,56(sp)
    4664:	dc400d15 	stw	r17,52(sp)
    4668:	1440ca16 	blt	r2,r17,4994 <___vfprintf_internal_r+0x1940>
    466c:	a8c00204 	addi	r3,r21,8
    4670:	2000061e 	bne	r4,zero,468c <___vfprintf_internal_r+0x1638>
    4674:	d9414717 	ldw	r5,1308(sp)
    4678:	2800041e 	bne	r5,zero,468c <___vfprintf_internal_r+0x1638>
    467c:	d9814c17 	ldw	r6,1328(sp)
    4680:	3080004c 	andi	r2,r6,1
    4684:	1005003a 	cmpeq	r2,r2,zero
    4688:	103bf01e 	bne	r2,zero,364c <___vfprintf_internal_r+0x5f8>
    468c:	00800044 	movi	r2,1
    4690:	dc400d17 	ldw	r17,52(sp)
    4694:	18800115 	stw	r2,4(r3)
    4698:	d8814917 	ldw	r2,1316(sp)
    469c:	94800044 	addi	r18,r18,1
    46a0:	8c400044 	addi	r17,r17,1
    46a4:	18800015 	stw	r2,0(r3)
    46a8:	008001c4 	movi	r2,7
    46ac:	dc800e15 	stw	r18,56(sp)
    46b0:	dc400d15 	stw	r17,52(sp)
    46b4:	1440ca16 	blt	r2,r17,49e0 <___vfprintf_internal_r+0x198c>
    46b8:	18c00204 	addi	r3,r3,8
    46bc:	0121c83a 	sub	r16,zero,r4
    46c0:	0400500e 	bge	zero,r16,4804 <___vfprintf_internal_r+0x17b0>
    46c4:	00800404 	movi	r2,16
    46c8:	1400800e 	bge	r2,r16,48cc <___vfprintf_internal_r+0x1878>
    46cc:	1027883a 	mov	r19,r2
    46d0:	07000074 	movhi	fp,1
    46d4:	e70a6684 	addi	fp,fp,10650
    46d8:	050001c4 	movi	r20,7
    46dc:	00000306 	br	46ec <___vfprintf_internal_r+0x1698>
    46e0:	18c00204 	addi	r3,r3,8
    46e4:	843ffc04 	addi	r16,r16,-16
    46e8:	9c007a0e 	bge	r19,r16,48d4 <___vfprintf_internal_r+0x1880>
    46ec:	94800404 	addi	r18,r18,16
    46f0:	8c400044 	addi	r17,r17,1
    46f4:	1f000015 	stw	fp,0(r3)
    46f8:	1cc00115 	stw	r19,4(r3)
    46fc:	dc800e15 	stw	r18,56(sp)
    4700:	dc400d15 	stw	r17,52(sp)
    4704:	a47ff60e 	bge	r20,r17,46e0 <___vfprintf_internal_r+0x168c>
    4708:	d9014f17 	ldw	r4,1340(sp)
    470c:	b00b883a 	mov	r5,r22
    4710:	d9800c04 	addi	r6,sp,48
    4714:	0002ffc0 	call	2ffc <__sprint_r>
    4718:	103c061e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    471c:	dc800e17 	ldw	r18,56(sp)
    4720:	dc400d17 	ldw	r17,52(sp)
    4724:	d8c01904 	addi	r3,sp,100
    4728:	003fee06 	br	46e4 <___vfprintf_internal_r+0x1690>
    472c:	3c000017 	ldw	r16,0(r7)
    4730:	0023883a 	mov	r17,zero
    4734:	39c00104 	addi	r7,r7,4
    4738:	d9c14015 	stw	r7,1280(sp)
    473c:	003e9206 	br	4188 <___vfprintf_internal_r+0x1134>
    4740:	d9401904 	addi	r5,sp,100
    4744:	dd000f04 	addi	r20,sp,60
    4748:	d9414115 	stw	r5,1284(sp)
    474c:	d9814417 	ldw	r6,1296(sp)
    4750:	880a973a 	slli	r5,r17,28
    4754:	8004d13a 	srli	r2,r16,4
    4758:	810003cc 	andi	r4,r16,15
    475c:	3109883a 	add	r4,r6,r4
    4760:	2884b03a 	or	r2,r5,r2
    4764:	21400003 	ldbu	r5,0(r4)
    4768:	d9014117 	ldw	r4,1284(sp)
    476c:	8806d13a 	srli	r3,r17,4
    4770:	1021883a 	mov	r16,r2
    4774:	213fffc4 	addi	r4,r4,-1
    4778:	d9014115 	stw	r4,1284(sp)
    477c:	d9814117 	ldw	r6,1284(sp)
    4780:	10c8b03a 	or	r4,r2,r3
    4784:	1823883a 	mov	r17,r3
    4788:	31400005 	stb	r5,0(r6)
    478c:	203fef1e 	bne	r4,zero,474c <___vfprintf_internal_r+0x16f8>
    4790:	003ccb06 	br	3ac0 <___vfprintf_internal_r+0xa6c>
    4794:	00800c04 	movi	r2,48
    4798:	d98018c4 	addi	r6,sp,99
    479c:	dd000f04 	addi	r20,sp,60
    47a0:	d88018c5 	stb	r2,99(sp)
    47a4:	d9814115 	stw	r6,1284(sp)
    47a8:	003cc506 	br	3ac0 <___vfprintf_internal_r+0xa6c>
    47ac:	dc400d17 	ldw	r17,52(sp)
    47b0:	07000074 	movhi	fp,1
    47b4:	e70a6a84 	addi	fp,fp,10666
    47b8:	003bc706 	br	36d8 <___vfprintf_internal_r+0x684>
    47bc:	d9414c17 	ldw	r5,1328(sp)
    47c0:	2880040c 	andi	r2,r5,16
    47c4:	10007c26 	beq	r2,zero,49b8 <___vfprintf_internal_r+0x1964>
    47c8:	38800017 	ldw	r2,0(r7)
    47cc:	39c00104 	addi	r7,r7,4
    47d0:	d9c14015 	stw	r7,1280(sp)
    47d4:	d9814b17 	ldw	r6,1324(sp)
    47d8:	d9c14017 	ldw	r7,1280(sp)
    47dc:	11800015 	stw	r6,0(r2)
    47e0:	003a7806 	br	31c4 <___vfprintf_internal_r+0x170>
    47e4:	d9014f17 	ldw	r4,1340(sp)
    47e8:	b00b883a 	mov	r5,r22
    47ec:	d9800c04 	addi	r6,sp,48
    47f0:	0002ffc0 	call	2ffc <__sprint_r>
    47f4:	103bcf1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    47f8:	dc800e17 	ldw	r18,56(sp)
    47fc:	dc400d17 	ldw	r17,52(sp)
    4800:	d8c01904 	addi	r3,sp,100
    4804:	d9014717 	ldw	r4,1308(sp)
    4808:	d9414117 	ldw	r5,1284(sp)
    480c:	8c400044 	addi	r17,r17,1
    4810:	9125883a 	add	r18,r18,r4
    4814:	008001c4 	movi	r2,7
    4818:	19400015 	stw	r5,0(r3)
    481c:	19000115 	stw	r4,4(r3)
    4820:	dc800e15 	stw	r18,56(sp)
    4824:	dc400d15 	stw	r17,52(sp)
    4828:	147cee16 	blt	r2,r17,3be4 <___vfprintf_internal_r+0xb90>
    482c:	18c00204 	addi	r3,r3,8
    4830:	003b8606 	br	364c <___vfprintf_internal_r+0x5f8>
    4834:	38c00017 	ldw	r3,0(r7)
    4838:	39000204 	addi	r4,r7,8
    483c:	d9014015 	stw	r4,1280(sp)
    4840:	d8c14215 	stw	r3,1288(sp)
    4844:	39c00117 	ldw	r7,4(r7)
    4848:	d9c14315 	stw	r7,1292(sp)
    484c:	003e2006 	br	40d0 <___vfprintf_internal_r+0x107c>
    4850:	0005883a 	mov	r2,zero
    4854:	1409c83a 	sub	r4,r2,r16
    4858:	1105803a 	cmpltu	r2,r2,r4
    485c:	044bc83a 	sub	r5,zero,r17
    4860:	2885c83a 	sub	r2,r5,r2
    4864:	2021883a 	mov	r16,r4
    4868:	1023883a 	mov	r17,r2
    486c:	01000044 	movi	r4,1
    4870:	00800b44 	movi	r2,45
    4874:	d8800405 	stb	r2,16(sp)
    4878:	003c8406 	br	3a8c <___vfprintf_internal_r+0xa38>
    487c:	d9014f17 	ldw	r4,1340(sp)
    4880:	b00b883a 	mov	r5,r22
    4884:	d9800c04 	addi	r6,sp,48
    4888:	0002ffc0 	call	2ffc <__sprint_r>
    488c:	103ba91e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    4890:	dc800e17 	ldw	r18,56(sp)
    4894:	dc400d17 	ldw	r17,52(sp)
    4898:	d9000517 	ldw	r4,20(sp)
    489c:	d9401904 	addi	r5,sp,100
    48a0:	003da706 	br	3f40 <___vfprintf_internal_r+0xeec>
    48a4:	d9014f17 	ldw	r4,1340(sp)
    48a8:	b00b883a 	mov	r5,r22
    48ac:	d9800c04 	addi	r6,sp,48
    48b0:	0002ffc0 	call	2ffc <__sprint_r>
    48b4:	103b9f1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    48b8:	dc800e17 	ldw	r18,56(sp)
    48bc:	dc400d17 	ldw	r17,52(sp)
    48c0:	d9000517 	ldw	r4,20(sp)
    48c4:	d8c01904 	addi	r3,sp,100
    48c8:	003d9106 	br	3f10 <___vfprintf_internal_r+0xebc>
    48cc:	07000074 	movhi	fp,1
    48d0:	e70a6684 	addi	fp,fp,10650
    48d4:	9425883a 	add	r18,r18,r16
    48d8:	8c400044 	addi	r17,r17,1
    48dc:	008001c4 	movi	r2,7
    48e0:	1f000015 	stw	fp,0(r3)
    48e4:	1c000115 	stw	r16,4(r3)
    48e8:	dc800e15 	stw	r18,56(sp)
    48ec:	dc400d15 	stw	r17,52(sp)
    48f0:	147fbc16 	blt	r2,r17,47e4 <___vfprintf_internal_r+0x1790>
    48f4:	18c00204 	addi	r3,r3,8
    48f8:	003fc206 	br	4804 <___vfprintf_internal_r+0x17b0>
    48fc:	d9014f17 	ldw	r4,1340(sp)
    4900:	b00b883a 	mov	r5,r22
    4904:	d9800c04 	addi	r6,sp,48
    4908:	0002ffc0 	call	2ffc <__sprint_r>
    490c:	103b891e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    4910:	dc800e17 	ldw	r18,56(sp)
    4914:	d9000517 	ldw	r4,20(sp)
    4918:	d8c01904 	addi	r3,sp,100
    491c:	003d0206 	br	3d28 <___vfprintf_internal_r+0xcd4>
    4920:	07000074 	movhi	fp,1
    4924:	e70a6684 	addi	fp,fp,10650
    4928:	003be406 	br	38bc <___vfprintf_internal_r+0x868>
    492c:	00800074 	movhi	r2,1
    4930:	108a5504 	addi	r2,r2,10580
    4934:	d8814115 	stw	r2,1284(sp)
    4938:	003df506 	br	4110 <___vfprintf_internal_r+0x10bc>
    493c:	d9014217 	ldw	r4,1288(sp)
    4940:	d9414317 	ldw	r5,1292(sp)
    4944:	00098fc0 	call	98fc <__isnand>
    4948:	10003926 	beq	r2,zero,4a30 <___vfprintf_internal_r+0x19dc>
    494c:	d9414d17 	ldw	r5,1332(sp)
    4950:	008011c4 	movi	r2,71
    4954:	1140ce16 	blt	r2,r5,4c90 <___vfprintf_internal_r+0x1c3c>
    4958:	01800074 	movhi	r6,1
    495c:	318a5604 	addi	r6,r6,10584
    4960:	d9814115 	stw	r6,1284(sp)
    4964:	003dea06 	br	4110 <___vfprintf_internal_r+0x10bc>
    4968:	d9014c17 	ldw	r4,1328(sp)
    496c:	bdc00044 	addi	r23,r23,1
    4970:	b8c00007 	ldb	r3,0(r23)
    4974:	21000814 	ori	r4,r4,32
    4978:	d9014c15 	stw	r4,1328(sp)
    497c:	003a3406 	br	3250 <___vfprintf_internal_r+0x1fc>
    4980:	dcc14515 	stw	r19,1300(sp)
    4984:	98011016 	blt	r19,zero,4dc8 <___vfprintf_internal_r+0x1d74>
    4988:	980f883a 	mov	r7,r19
    498c:	d8014615 	stw	zero,1304(sp)
    4990:	003c5206 	br	3adc <___vfprintf_internal_r+0xa88>
    4994:	d9014f17 	ldw	r4,1340(sp)
    4998:	b00b883a 	mov	r5,r22
    499c:	d9800c04 	addi	r6,sp,48
    49a0:	0002ffc0 	call	2ffc <__sprint_r>
    49a4:	103b631e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    49a8:	dc800e17 	ldw	r18,56(sp)
    49ac:	d9000517 	ldw	r4,20(sp)
    49b0:	d8c01904 	addi	r3,sp,100
    49b4:	003f2e06 	br	4670 <___vfprintf_internal_r+0x161c>
    49b8:	d8c14c17 	ldw	r3,1328(sp)
    49bc:	1880100c 	andi	r2,r3,64
    49c0:	1000a026 	beq	r2,zero,4c44 <___vfprintf_internal_r+0x1bf0>
    49c4:	38800017 	ldw	r2,0(r7)
    49c8:	39c00104 	addi	r7,r7,4
    49cc:	d9c14015 	stw	r7,1280(sp)
    49d0:	d9014b17 	ldw	r4,1324(sp)
    49d4:	d9c14017 	ldw	r7,1280(sp)
    49d8:	1100000d 	sth	r4,0(r2)
    49dc:	0039f906 	br	31c4 <___vfprintf_internal_r+0x170>
    49e0:	d9014f17 	ldw	r4,1340(sp)
    49e4:	b00b883a 	mov	r5,r22
    49e8:	d9800c04 	addi	r6,sp,48
    49ec:	0002ffc0 	call	2ffc <__sprint_r>
    49f0:	103b501e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    49f4:	dc800e17 	ldw	r18,56(sp)
    49f8:	dc400d17 	ldw	r17,52(sp)
    49fc:	d9000517 	ldw	r4,20(sp)
    4a00:	d8c01904 	addi	r3,sp,100
    4a04:	003f2d06 	br	46bc <___vfprintf_internal_r+0x1668>
    4a08:	00800184 	movi	r2,6
    4a0c:	14c09a36 	bltu	r2,r19,4c78 <___vfprintf_internal_r+0x1c24>
    4a10:	dcc14515 	stw	r19,1300(sp)
    4a14:	9800010e 	bge	r19,zero,4a1c <___vfprintf_internal_r+0x19c8>
    4a18:	d8014515 	stw	zero,1300(sp)
    4a1c:	00800074 	movhi	r2,1
    4a20:	108a5804 	addi	r2,r2,10592
    4a24:	980f883a 	mov	r7,r19
    4a28:	d8814115 	stw	r2,1284(sp)
    4a2c:	003a7806 	br	3410 <___vfprintf_internal_r+0x3bc>
    4a30:	00bfffc4 	movi	r2,-1
    4a34:	9880e226 	beq	r19,r2,4dc0 <___vfprintf_internal_r+0x1d6c>
    4a38:	d9414d17 	ldw	r5,1332(sp)
    4a3c:	008019c4 	movi	r2,103
    4a40:	2880dc26 	beq	r5,r2,4db4 <___vfprintf_internal_r+0x1d60>
    4a44:	008011c4 	movi	r2,71
    4a48:	2880da26 	beq	r5,r2,4db4 <___vfprintf_internal_r+0x1d60>
    4a4c:	d9414c17 	ldw	r5,1328(sp)
    4a50:	d9014317 	ldw	r4,1292(sp)
    4a54:	d9814217 	ldw	r6,1288(sp)
    4a58:	29404014 	ori	r5,r5,256
    4a5c:	d9414c15 	stw	r5,1328(sp)
    4a60:	2000cc16 	blt	r4,zero,4d94 <___vfprintf_internal_r+0x1d40>
    4a64:	3021883a 	mov	r16,r6
    4a68:	2023883a 	mov	r17,r4
    4a6c:	0039883a 	mov	fp,zero
    4a70:	d9414d17 	ldw	r5,1332(sp)
    4a74:	00801984 	movi	r2,102
    4a78:	2880b726 	beq	r5,r2,4d58 <___vfprintf_internal_r+0x1d04>
    4a7c:	00801184 	movi	r2,70
    4a80:	2880b526 	beq	r5,r2,4d58 <___vfprintf_internal_r+0x1d04>
    4a84:	00801944 	movi	r2,101
    4a88:	2880c826 	beq	r5,r2,4dac <___vfprintf_internal_r+0x1d58>
    4a8c:	00801144 	movi	r2,69
    4a90:	2880c626 	beq	r5,r2,4dac <___vfprintf_internal_r+0x1d58>
    4a94:	9829883a 	mov	r20,r19
    4a98:	d9014f17 	ldw	r4,1340(sp)
    4a9c:	d8800504 	addi	r2,sp,20
    4aa0:	880d883a 	mov	r6,r17
    4aa4:	d8800115 	stw	r2,4(sp)
    4aa8:	d8c00604 	addi	r3,sp,24
    4aac:	d8800704 	addi	r2,sp,28
    4ab0:	800b883a 	mov	r5,r16
    4ab4:	01c00084 	movi	r7,2
    4ab8:	d8c00215 	stw	r3,8(sp)
    4abc:	d8800315 	stw	r2,12(sp)
    4ac0:	dd000015 	stw	r20,0(sp)
    4ac4:	00052780 	call	5278 <_dtoa_r>
    4ac8:	d9814d17 	ldw	r6,1332(sp)
    4acc:	d8814115 	stw	r2,1284(sp)
    4ad0:	008019c4 	movi	r2,103
    4ad4:	30809526 	beq	r6,r2,4d2c <___vfprintf_internal_r+0x1cd8>
    4ad8:	d8c14d17 	ldw	r3,1332(sp)
    4adc:	008011c4 	movi	r2,71
    4ae0:	18809226 	beq	r3,r2,4d2c <___vfprintf_internal_r+0x1cd8>
    4ae4:	d9414117 	ldw	r5,1284(sp)
    4ae8:	d9814d17 	ldw	r6,1332(sp)
    4aec:	00801984 	movi	r2,102
    4af0:	2d25883a 	add	r18,r5,r20
    4af4:	30808626 	beq	r6,r2,4d10 <___vfprintf_internal_r+0x1cbc>
    4af8:	00801184 	movi	r2,70
    4afc:	30808426 	beq	r6,r2,4d10 <___vfprintf_internal_r+0x1cbc>
    4b00:	000d883a 	mov	r6,zero
    4b04:	000f883a 	mov	r7,zero
    4b08:	880b883a 	mov	r5,r17
    4b0c:	8009883a 	mov	r4,r16
    4b10:	000ae1c0 	call	ae1c <__eqdf2>
    4b14:	1000751e 	bne	r2,zero,4cec <___vfprintf_internal_r+0x1c98>
    4b18:	9005883a 	mov	r2,r18
    4b1c:	dc800715 	stw	r18,28(sp)
    4b20:	d9014117 	ldw	r4,1284(sp)
    4b24:	d9414d17 	ldw	r5,1332(sp)
    4b28:	00c019c4 	movi	r3,103
    4b2c:	1125c83a 	sub	r18,r2,r4
    4b30:	28c06826 	beq	r5,r3,4cd4 <___vfprintf_internal_r+0x1c80>
    4b34:	008011c4 	movi	r2,71
    4b38:	28806626 	beq	r5,r2,4cd4 <___vfprintf_internal_r+0x1c80>
    4b3c:	d9000517 	ldw	r4,20(sp)
    4b40:	d8c14d17 	ldw	r3,1332(sp)
    4b44:	00801944 	movi	r2,101
    4b48:	10c05516 	blt	r2,r3,4ca0 <___vfprintf_internal_r+0x1c4c>
    4b4c:	213fffc4 	addi	r4,r4,-1
    4b50:	d9000515 	stw	r4,20(sp)
    4b54:	d8c00805 	stb	r3,32(sp)
    4b58:	2021883a 	mov	r16,r4
    4b5c:	2000c116 	blt	r4,zero,4e64 <___vfprintf_internal_r+0x1e10>
    4b60:	00800ac4 	movi	r2,43
    4b64:	d8800845 	stb	r2,33(sp)
    4b68:	00800244 	movi	r2,9
    4b6c:	1400af0e 	bge	r2,r16,4e2c <___vfprintf_internal_r+0x1dd8>
    4b70:	1027883a 	mov	r19,r2
    4b74:	dc400b84 	addi	r17,sp,46
    4b78:	8009883a 	mov	r4,r16
    4b7c:	01400284 	movi	r5,10
    4b80:	000b5040 	call	b504 <__modsi3>
    4b84:	10800c04 	addi	r2,r2,48
    4b88:	8c7fffc4 	addi	r17,r17,-1
    4b8c:	8009883a 	mov	r4,r16
    4b90:	01400284 	movi	r5,10
    4b94:	88800005 	stb	r2,0(r17)
    4b98:	000b4a40 	call	b4a4 <__divsi3>
    4b9c:	1021883a 	mov	r16,r2
    4ba0:	98bff516 	blt	r19,r2,4b78 <___vfprintf_internal_r+0x1b24>
    4ba4:	10c00c04 	addi	r3,r2,48
    4ba8:	d88009c4 	addi	r2,sp,39
    4bac:	108001c4 	addi	r2,r2,7
    4bb0:	897fffc4 	addi	r5,r17,-1
    4bb4:	88ffffc5 	stb	r3,-1(r17)
    4bb8:	2880a72e 	bgeu	r5,r2,4e58 <___vfprintf_internal_r+0x1e04>
    4bbc:	1009883a 	mov	r4,r2
    4bc0:	d9800804 	addi	r6,sp,32
    4bc4:	d8c00884 	addi	r3,sp,34
    4bc8:	28800003 	ldbu	r2,0(r5)
    4bcc:	29400044 	addi	r5,r5,1
    4bd0:	18800005 	stb	r2,0(r3)
    4bd4:	18c00044 	addi	r3,r3,1
    4bd8:	293ffb36 	bltu	r5,r4,4bc8 <___vfprintf_internal_r+0x1b74>
    4bdc:	1987c83a 	sub	r3,r3,r6
    4be0:	00800044 	movi	r2,1
    4be4:	d8c14815 	stw	r3,1312(sp)
    4be8:	90cf883a 	add	r7,r18,r3
    4bec:	1480960e 	bge	r2,r18,4e48 <___vfprintf_internal_r+0x1df4>
    4bf0:	39c00044 	addi	r7,r7,1
    4bf4:	d9c14515 	stw	r7,1300(sp)
    4bf8:	38003416 	blt	r7,zero,4ccc <___vfprintf_internal_r+0x1c78>
    4bfc:	e0803fcc 	andi	r2,fp,255
    4c00:	1080201c 	xori	r2,r2,128
    4c04:	10bfe004 	addi	r2,r2,-128
    4c08:	10004e26 	beq	r2,zero,4d44 <___vfprintf_internal_r+0x1cf0>
    4c0c:	00800b44 	movi	r2,45
    4c10:	dc814715 	stw	r18,1308(sp)
    4c14:	d8014615 	stw	zero,1304(sp)
    4c18:	d8800405 	stb	r2,16(sp)
    4c1c:	003bb106 	br	3ae4 <___vfprintf_internal_r+0xa90>
    4c20:	00800b44 	movi	r2,45
    4c24:	d8800405 	stb	r2,16(sp)
    4c28:	003d3306 	br	40f8 <___vfprintf_internal_r+0x10a4>
    4c2c:	d9014f17 	ldw	r4,1340(sp)
    4c30:	b00b883a 	mov	r5,r22
    4c34:	d9800c04 	addi	r6,sp,48
    4c38:	0002ffc0 	call	2ffc <__sprint_r>
    4c3c:	103abd1e 	bne	r2,zero,3734 <___vfprintf_internal_r+0x6e0>
    4c40:	003abb06 	br	3730 <___vfprintf_internal_r+0x6dc>
    4c44:	38800017 	ldw	r2,0(r7)
    4c48:	39c00104 	addi	r7,r7,4
    4c4c:	d9c14015 	stw	r7,1280(sp)
    4c50:	d9414b17 	ldw	r5,1324(sp)
    4c54:	d9c14017 	ldw	r7,1280(sp)
    4c58:	11400015 	stw	r5,0(r2)
    4c5c:	00395906 	br	31c4 <___vfprintf_internal_r+0x170>
    4c60:	980f883a 	mov	r7,r19
    4c64:	dcc14515 	stw	r19,1300(sp)
    4c68:	d8014615 	stw	zero,1304(sp)
    4c6c:	003b9b06 	br	3adc <___vfprintf_internal_r+0xa88>
    4c70:	0027883a 	mov	r19,zero
    4c74:	00397806 	br	3258 <___vfprintf_internal_r+0x204>
    4c78:	00c00074 	movhi	r3,1
    4c7c:	18ca5804 	addi	r3,r3,10592
    4c80:	100f883a 	mov	r7,r2
    4c84:	d8814515 	stw	r2,1300(sp)
    4c88:	d8c14115 	stw	r3,1284(sp)
    4c8c:	0039e006 	br	3410 <___vfprintf_internal_r+0x3bc>
    4c90:	00800074 	movhi	r2,1
    4c94:	108a5704 	addi	r2,r2,10588
    4c98:	d8814115 	stw	r2,1284(sp)
    4c9c:	003d1c06 	br	4110 <___vfprintf_internal_r+0x10bc>
    4ca0:	d9414d17 	ldw	r5,1332(sp)
    4ca4:	00801984 	movi	r2,102
    4ca8:	28804926 	beq	r5,r2,4dd0 <___vfprintf_internal_r+0x1d7c>
    4cac:	200f883a 	mov	r7,r4
    4cb0:	24805716 	blt	r4,r18,4e10 <___vfprintf_internal_r+0x1dbc>
    4cb4:	d9414c17 	ldw	r5,1328(sp)
    4cb8:	2880004c 	andi	r2,r5,1
    4cbc:	10000126 	beq	r2,zero,4cc4 <___vfprintf_internal_r+0x1c70>
    4cc0:	21c00044 	addi	r7,r4,1
    4cc4:	d9c14515 	stw	r7,1300(sp)
    4cc8:	383fcc0e 	bge	r7,zero,4bfc <___vfprintf_internal_r+0x1ba8>
    4ccc:	d8014515 	stw	zero,1300(sp)
    4cd0:	003fca06 	br	4bfc <___vfprintf_internal_r+0x1ba8>
    4cd4:	d9000517 	ldw	r4,20(sp)
    4cd8:	00bfff04 	movi	r2,-4
    4cdc:	1100480e 	bge	r2,r4,4e00 <___vfprintf_internal_r+0x1dac>
    4ce0:	99004716 	blt	r19,r4,4e00 <___vfprintf_internal_r+0x1dac>
    4ce4:	d8c14d15 	stw	r3,1332(sp)
    4ce8:	003ff006 	br	4cac <___vfprintf_internal_r+0x1c58>
    4cec:	d8800717 	ldw	r2,28(sp)
    4cf0:	14bf8b2e 	bgeu	r2,r18,4b20 <___vfprintf_internal_r+0x1acc>
    4cf4:	9007883a 	mov	r3,r18
    4cf8:	01000c04 	movi	r4,48
    4cfc:	11000005 	stb	r4,0(r2)
    4d00:	10800044 	addi	r2,r2,1
    4d04:	d8800715 	stw	r2,28(sp)
    4d08:	18bffc1e 	bne	r3,r2,4cfc <___vfprintf_internal_r+0x1ca8>
    4d0c:	003f8406 	br	4b20 <___vfprintf_internal_r+0x1acc>
    4d10:	d8814117 	ldw	r2,1284(sp)
    4d14:	10c00007 	ldb	r3,0(r2)
    4d18:	00800c04 	movi	r2,48
    4d1c:	18805b26 	beq	r3,r2,4e8c <___vfprintf_internal_r+0x1e38>
    4d20:	d9000517 	ldw	r4,20(sp)
    4d24:	9125883a 	add	r18,r18,r4
    4d28:	003f7506 	br	4b00 <___vfprintf_internal_r+0x1aac>
    4d2c:	d9014c17 	ldw	r4,1328(sp)
    4d30:	2080004c 	andi	r2,r4,1
    4d34:	1005003a 	cmpeq	r2,r2,zero
    4d38:	103f6a26 	beq	r2,zero,4ae4 <___vfprintf_internal_r+0x1a90>
    4d3c:	d8800717 	ldw	r2,28(sp)
    4d40:	003f7706 	br	4b20 <___vfprintf_internal_r+0x1acc>
    4d44:	d9c14515 	stw	r7,1300(sp)
    4d48:	38004d16 	blt	r7,zero,4e80 <___vfprintf_internal_r+0x1e2c>
    4d4c:	dc814715 	stw	r18,1308(sp)
    4d50:	d8014615 	stw	zero,1304(sp)
    4d54:	003b6106 	br	3adc <___vfprintf_internal_r+0xa88>
    4d58:	d9014f17 	ldw	r4,1340(sp)
    4d5c:	d8800504 	addi	r2,sp,20
    4d60:	d8800115 	stw	r2,4(sp)
    4d64:	d8c00604 	addi	r3,sp,24
    4d68:	d8800704 	addi	r2,sp,28
    4d6c:	800b883a 	mov	r5,r16
    4d70:	880d883a 	mov	r6,r17
    4d74:	01c000c4 	movi	r7,3
    4d78:	d8c00215 	stw	r3,8(sp)
    4d7c:	d8800315 	stw	r2,12(sp)
    4d80:	dcc00015 	stw	r19,0(sp)
    4d84:	9829883a 	mov	r20,r19
    4d88:	00052780 	call	5278 <_dtoa_r>
    4d8c:	d8814115 	stw	r2,1284(sp)
    4d90:	003f5106 	br	4ad8 <___vfprintf_internal_r+0x1a84>
    4d94:	d8c14217 	ldw	r3,1288(sp)
    4d98:	d9014317 	ldw	r4,1292(sp)
    4d9c:	07000b44 	movi	fp,45
    4da0:	1821883a 	mov	r16,r3
    4da4:	2460003c 	xorhi	r17,r4,32768
    4da8:	003f3106 	br	4a70 <___vfprintf_internal_r+0x1a1c>
    4dac:	9d000044 	addi	r20,r19,1
    4db0:	003f3906 	br	4a98 <___vfprintf_internal_r+0x1a44>
    4db4:	983f251e 	bne	r19,zero,4a4c <___vfprintf_internal_r+0x19f8>
    4db8:	04c00044 	movi	r19,1
    4dbc:	003f2306 	br	4a4c <___vfprintf_internal_r+0x19f8>
    4dc0:	04c00184 	movi	r19,6
    4dc4:	003f2106 	br	4a4c <___vfprintf_internal_r+0x19f8>
    4dc8:	d8014515 	stw	zero,1300(sp)
    4dcc:	003eee06 	br	4988 <___vfprintf_internal_r+0x1934>
    4dd0:	200f883a 	mov	r7,r4
    4dd4:	0100370e 	bge	zero,r4,4eb4 <___vfprintf_internal_r+0x1e60>
    4dd8:	9800031e 	bne	r19,zero,4de8 <___vfprintf_internal_r+0x1d94>
    4ddc:	d9814c17 	ldw	r6,1328(sp)
    4de0:	3080004c 	andi	r2,r6,1
    4de4:	103fb726 	beq	r2,zero,4cc4 <___vfprintf_internal_r+0x1c70>
    4de8:	20800044 	addi	r2,r4,1
    4dec:	98a7883a 	add	r19,r19,r2
    4df0:	dcc14515 	stw	r19,1300(sp)
    4df4:	980f883a 	mov	r7,r19
    4df8:	983f800e 	bge	r19,zero,4bfc <___vfprintf_internal_r+0x1ba8>
    4dfc:	003fb306 	br	4ccc <___vfprintf_internal_r+0x1c78>
    4e00:	d9814d17 	ldw	r6,1332(sp)
    4e04:	31bfff84 	addi	r6,r6,-2
    4e08:	d9814d15 	stw	r6,1332(sp)
    4e0c:	003f4c06 	br	4b40 <___vfprintf_internal_r+0x1aec>
    4e10:	0100180e 	bge	zero,r4,4e74 <___vfprintf_internal_r+0x1e20>
    4e14:	00800044 	movi	r2,1
    4e18:	1485883a 	add	r2,r2,r18
    4e1c:	d8814515 	stw	r2,1300(sp)
    4e20:	100f883a 	mov	r7,r2
    4e24:	103f750e 	bge	r2,zero,4bfc <___vfprintf_internal_r+0x1ba8>
    4e28:	003fa806 	br	4ccc <___vfprintf_internal_r+0x1c78>
    4e2c:	80c00c04 	addi	r3,r16,48
    4e30:	00800c04 	movi	r2,48
    4e34:	d8c008c5 	stb	r3,35(sp)
    4e38:	d9800804 	addi	r6,sp,32
    4e3c:	d8c00904 	addi	r3,sp,36
    4e40:	d8800885 	stb	r2,34(sp)
    4e44:	003f6506 	br	4bdc <___vfprintf_internal_r+0x1b88>
    4e48:	d9014c17 	ldw	r4,1328(sp)
    4e4c:	2084703a 	and	r2,r4,r2
    4e50:	103f9c26 	beq	r2,zero,4cc4 <___vfprintf_internal_r+0x1c70>
    4e54:	003f6606 	br	4bf0 <___vfprintf_internal_r+0x1b9c>
    4e58:	d9800804 	addi	r6,sp,32
    4e5c:	d8c00884 	addi	r3,sp,34
    4e60:	003f5e06 	br	4bdc <___vfprintf_internal_r+0x1b88>
    4e64:	00800b44 	movi	r2,45
    4e68:	0121c83a 	sub	r16,zero,r4
    4e6c:	d8800845 	stb	r2,33(sp)
    4e70:	003f3d06 	br	4b68 <___vfprintf_internal_r+0x1b14>
    4e74:	00800084 	movi	r2,2
    4e78:	1105c83a 	sub	r2,r2,r4
    4e7c:	003fe606 	br	4e18 <___vfprintf_internal_r+0x1dc4>
    4e80:	d8014515 	stw	zero,1300(sp)
    4e84:	dc814715 	stw	r18,1308(sp)
    4e88:	003fb106 	br	4d50 <___vfprintf_internal_r+0x1cfc>
    4e8c:	000d883a 	mov	r6,zero
    4e90:	000f883a 	mov	r7,zero
    4e94:	8009883a 	mov	r4,r16
    4e98:	880b883a 	mov	r5,r17
    4e9c:	000aea40 	call	aea4 <__nedf2>
    4ea0:	103f9f26 	beq	r2,zero,4d20 <___vfprintf_internal_r+0x1ccc>
    4ea4:	00800044 	movi	r2,1
    4ea8:	1509c83a 	sub	r4,r2,r20
    4eac:	d9000515 	stw	r4,20(sp)
    4eb0:	003f9b06 	br	4d20 <___vfprintf_internal_r+0x1ccc>
    4eb4:	98000d1e 	bne	r19,zero,4eec <___vfprintf_internal_r+0x1e98>
    4eb8:	d8c14c17 	ldw	r3,1328(sp)
    4ebc:	1880004c 	andi	r2,r3,1
    4ec0:	10000a1e 	bne	r2,zero,4eec <___vfprintf_internal_r+0x1e98>
    4ec4:	01000044 	movi	r4,1
    4ec8:	200f883a 	mov	r7,r4
    4ecc:	d9014515 	stw	r4,1300(sp)
    4ed0:	003f4a06 	br	4bfc <___vfprintf_internal_r+0x1ba8>
    4ed4:	3cc00017 	ldw	r19,0(r7)
    4ed8:	39c00104 	addi	r7,r7,4
    4edc:	983d0e0e 	bge	r19,zero,4318 <___vfprintf_internal_r+0x12c4>
    4ee0:	b8c00007 	ldb	r3,0(r23)
    4ee4:	04ffffc4 	movi	r19,-1
    4ee8:	0038d906 	br	3250 <___vfprintf_internal_r+0x1fc>
    4eec:	9cc00084 	addi	r19,r19,2
    4ef0:	dcc14515 	stw	r19,1300(sp)
    4ef4:	980f883a 	mov	r7,r19
    4ef8:	983f400e 	bge	r19,zero,4bfc <___vfprintf_internal_r+0x1ba8>
    4efc:	003f7306 	br	4ccc <___vfprintf_internal_r+0x1c78>

00004f00 <__vfprintf_internal>:
    4f00:	00800074 	movhi	r2,1
    4f04:	1092ee04 	addi	r2,r2,19384
    4f08:	2013883a 	mov	r9,r4
    4f0c:	11000017 	ldw	r4,0(r2)
    4f10:	2805883a 	mov	r2,r5
    4f14:	300f883a 	mov	r7,r6
    4f18:	480b883a 	mov	r5,r9
    4f1c:	100d883a 	mov	r6,r2
    4f20:	00030541 	jmpi	3054 <___vfprintf_internal_r>

00004f24 <__swsetup_r>:
    4f24:	00800074 	movhi	r2,1
    4f28:	1092ee04 	addi	r2,r2,19384
    4f2c:	10c00017 	ldw	r3,0(r2)
    4f30:	defffd04 	addi	sp,sp,-12
    4f34:	dc400115 	stw	r17,4(sp)
    4f38:	dc000015 	stw	r16,0(sp)
    4f3c:	dfc00215 	stw	ra,8(sp)
    4f40:	2023883a 	mov	r17,r4
    4f44:	2821883a 	mov	r16,r5
    4f48:	18000226 	beq	r3,zero,4f54 <__swsetup_r+0x30>
    4f4c:	18800e17 	ldw	r2,56(r3)
    4f50:	10001f26 	beq	r2,zero,4fd0 <__swsetup_r+0xac>
    4f54:	8100030b 	ldhu	r4,12(r16)
    4f58:	2080020c 	andi	r2,r4,8
    4f5c:	10002826 	beq	r2,zero,5000 <__swsetup_r+0xdc>
    4f60:	81400417 	ldw	r5,16(r16)
    4f64:	28001d26 	beq	r5,zero,4fdc <__swsetup_r+0xb8>
    4f68:	2080004c 	andi	r2,r4,1
    4f6c:	1005003a 	cmpeq	r2,r2,zero
    4f70:	10000b26 	beq	r2,zero,4fa0 <__swsetup_r+0x7c>
    4f74:	2080008c 	andi	r2,r4,2
    4f78:	10001226 	beq	r2,zero,4fc4 <__swsetup_r+0xa0>
    4f7c:	0005883a 	mov	r2,zero
    4f80:	80800215 	stw	r2,8(r16)
    4f84:	28000b26 	beq	r5,zero,4fb4 <__swsetup_r+0x90>
    4f88:	0005883a 	mov	r2,zero
    4f8c:	dfc00217 	ldw	ra,8(sp)
    4f90:	dc400117 	ldw	r17,4(sp)
    4f94:	dc000017 	ldw	r16,0(sp)
    4f98:	dec00304 	addi	sp,sp,12
    4f9c:	f800283a 	ret
    4fa0:	80800517 	ldw	r2,20(r16)
    4fa4:	80000215 	stw	zero,8(r16)
    4fa8:	0085c83a 	sub	r2,zero,r2
    4fac:	80800615 	stw	r2,24(r16)
    4fb0:	283ff51e 	bne	r5,zero,4f88 <__swsetup_r+0x64>
    4fb4:	2080200c 	andi	r2,r4,128
    4fb8:	103ff326 	beq	r2,zero,4f88 <__swsetup_r+0x64>
    4fbc:	00bfffc4 	movi	r2,-1
    4fc0:	003ff206 	br	4f8c <__swsetup_r+0x68>
    4fc4:	80800517 	ldw	r2,20(r16)
    4fc8:	80800215 	stw	r2,8(r16)
    4fcc:	003fed06 	br	4f84 <__swsetup_r+0x60>
    4fd0:	1809883a 	mov	r4,r3
    4fd4:	0006ac40 	call	6ac4 <__sinit>
    4fd8:	003fde06 	br	4f54 <__swsetup_r+0x30>
    4fdc:	20c0a00c 	andi	r3,r4,640
    4fe0:	00808004 	movi	r2,512
    4fe4:	18bfe026 	beq	r3,r2,4f68 <__swsetup_r+0x44>
    4fe8:	8809883a 	mov	r4,r17
    4fec:	800b883a 	mov	r5,r16
    4ff0:	000783c0 	call	783c <__smakebuf_r>
    4ff4:	8100030b 	ldhu	r4,12(r16)
    4ff8:	81400417 	ldw	r5,16(r16)
    4ffc:	003fda06 	br	4f68 <__swsetup_r+0x44>
    5000:	2080040c 	andi	r2,r4,16
    5004:	103fed26 	beq	r2,zero,4fbc <__swsetup_r+0x98>
    5008:	2080010c 	andi	r2,r4,4
    500c:	10001226 	beq	r2,zero,5058 <__swsetup_r+0x134>
    5010:	81400c17 	ldw	r5,48(r16)
    5014:	28000526 	beq	r5,zero,502c <__swsetup_r+0x108>
    5018:	80801004 	addi	r2,r16,64
    501c:	28800226 	beq	r5,r2,5028 <__swsetup_r+0x104>
    5020:	8809883a 	mov	r4,r17
    5024:	0006e480 	call	6e48 <_free_r>
    5028:	80000c15 	stw	zero,48(r16)
    502c:	8080030b 	ldhu	r2,12(r16)
    5030:	81400417 	ldw	r5,16(r16)
    5034:	80000115 	stw	zero,4(r16)
    5038:	10bff6cc 	andi	r2,r2,65499
    503c:	8080030d 	sth	r2,12(r16)
    5040:	81400015 	stw	r5,0(r16)
    5044:	8080030b 	ldhu	r2,12(r16)
    5048:	10800214 	ori	r2,r2,8
    504c:	113fffcc 	andi	r4,r2,65535
    5050:	8080030d 	sth	r2,12(r16)
    5054:	003fc306 	br	4f64 <__swsetup_r+0x40>
    5058:	81400417 	ldw	r5,16(r16)
    505c:	003ff906 	br	5044 <__swsetup_r+0x120>

00005060 <quorem>:
    5060:	28c00417 	ldw	r3,16(r5)
    5064:	20800417 	ldw	r2,16(r4)
    5068:	defff604 	addi	sp,sp,-40
    506c:	ddc00715 	stw	r23,28(sp)
    5070:	dd400515 	stw	r21,20(sp)
    5074:	dfc00915 	stw	ra,36(sp)
    5078:	df000815 	stw	fp,32(sp)
    507c:	dd800615 	stw	r22,24(sp)
    5080:	dd000415 	stw	r20,16(sp)
    5084:	dcc00315 	stw	r19,12(sp)
    5088:	dc800215 	stw	r18,8(sp)
    508c:	dc400115 	stw	r17,4(sp)
    5090:	dc000015 	stw	r16,0(sp)
    5094:	202f883a 	mov	r23,r4
    5098:	282b883a 	mov	r21,r5
    509c:	10c07416 	blt	r2,r3,5270 <quorem+0x210>
    50a0:	1c7fffc4 	addi	r17,r3,-1
    50a4:	8c45883a 	add	r2,r17,r17
    50a8:	1085883a 	add	r2,r2,r2
    50ac:	2c000504 	addi	r16,r5,20
    50b0:	24c00504 	addi	r19,r4,20
    50b4:	14ed883a 	add	r22,r2,r19
    50b8:	80a5883a 	add	r18,r16,r2
    50bc:	b7000017 	ldw	fp,0(r22)
    50c0:	91400017 	ldw	r5,0(r18)
    50c4:	e009883a 	mov	r4,fp
    50c8:	29400044 	addi	r5,r5,1
    50cc:	000b5640 	call	b564 <__udivsi3>
    50d0:	1029883a 	mov	r20,r2
    50d4:	10003c1e 	bne	r2,zero,51c8 <quorem+0x168>
    50d8:	a80b883a 	mov	r5,r21
    50dc:	b809883a 	mov	r4,r23
    50e0:	00084300 	call	8430 <__mcmp>
    50e4:	10002b16 	blt	r2,zero,5194 <quorem+0x134>
    50e8:	a5000044 	addi	r20,r20,1
    50ec:	980f883a 	mov	r7,r19
    50f0:	0011883a 	mov	r8,zero
    50f4:	0009883a 	mov	r4,zero
    50f8:	81400017 	ldw	r5,0(r16)
    50fc:	38c00017 	ldw	r3,0(r7)
    5100:	84000104 	addi	r16,r16,4
    5104:	28bfffcc 	andi	r2,r5,65535
    5108:	2085883a 	add	r2,r4,r2
    510c:	11bfffcc 	andi	r6,r2,65535
    5110:	193fffcc 	andi	r4,r3,65535
    5114:	1004d43a 	srli	r2,r2,16
    5118:	280ad43a 	srli	r5,r5,16
    511c:	2189c83a 	sub	r4,r4,r6
    5120:	2209883a 	add	r4,r4,r8
    5124:	1806d43a 	srli	r3,r3,16
    5128:	288b883a 	add	r5,r5,r2
    512c:	200dd43a 	srai	r6,r4,16
    5130:	28bfffcc 	andi	r2,r5,65535
    5134:	1887c83a 	sub	r3,r3,r2
    5138:	1987883a 	add	r3,r3,r6
    513c:	3900000d 	sth	r4,0(r7)
    5140:	38c0008d 	sth	r3,2(r7)
    5144:	2808d43a 	srli	r4,r5,16
    5148:	39c00104 	addi	r7,r7,4
    514c:	1811d43a 	srai	r8,r3,16
    5150:	943fe92e 	bgeu	r18,r16,50f8 <quorem+0x98>
    5154:	8c45883a 	add	r2,r17,r17
    5158:	1085883a 	add	r2,r2,r2
    515c:	9885883a 	add	r2,r19,r2
    5160:	10c00017 	ldw	r3,0(r2)
    5164:	18000b1e 	bne	r3,zero,5194 <quorem+0x134>
    5168:	113fff04 	addi	r4,r2,-4
    516c:	9900082e 	bgeu	r19,r4,5190 <quorem+0x130>
    5170:	10bfff17 	ldw	r2,-4(r2)
    5174:	10000326 	beq	r2,zero,5184 <quorem+0x124>
    5178:	00000506 	br	5190 <quorem+0x130>
    517c:	20800017 	ldw	r2,0(r4)
    5180:	1000031e 	bne	r2,zero,5190 <quorem+0x130>
    5184:	213fff04 	addi	r4,r4,-4
    5188:	8c7fffc4 	addi	r17,r17,-1
    518c:	993ffb36 	bltu	r19,r4,517c <quorem+0x11c>
    5190:	bc400415 	stw	r17,16(r23)
    5194:	a005883a 	mov	r2,r20
    5198:	dfc00917 	ldw	ra,36(sp)
    519c:	df000817 	ldw	fp,32(sp)
    51a0:	ddc00717 	ldw	r23,28(sp)
    51a4:	dd800617 	ldw	r22,24(sp)
    51a8:	dd400517 	ldw	r21,20(sp)
    51ac:	dd000417 	ldw	r20,16(sp)
    51b0:	dcc00317 	ldw	r19,12(sp)
    51b4:	dc800217 	ldw	r18,8(sp)
    51b8:	dc400117 	ldw	r17,4(sp)
    51bc:	dc000017 	ldw	r16,0(sp)
    51c0:	dec00a04 	addi	sp,sp,40
    51c4:	f800283a 	ret
    51c8:	980f883a 	mov	r7,r19
    51cc:	8011883a 	mov	r8,r16
    51d0:	0013883a 	mov	r9,zero
    51d4:	000d883a 	mov	r6,zero
    51d8:	40c00017 	ldw	r3,0(r8)
    51dc:	39000017 	ldw	r4,0(r7)
    51e0:	42000104 	addi	r8,r8,4
    51e4:	18bfffcc 	andi	r2,r3,65535
    51e8:	a085383a 	mul	r2,r20,r2
    51ec:	1806d43a 	srli	r3,r3,16
    51f0:	217fffcc 	andi	r5,r4,65535
    51f4:	3085883a 	add	r2,r6,r2
    51f8:	11bfffcc 	andi	r6,r2,65535
    51fc:	a0c7383a 	mul	r3,r20,r3
    5200:	1004d43a 	srli	r2,r2,16
    5204:	298bc83a 	sub	r5,r5,r6
    5208:	2a4b883a 	add	r5,r5,r9
    520c:	2008d43a 	srli	r4,r4,16
    5210:	1887883a 	add	r3,r3,r2
    5214:	280dd43a 	srai	r6,r5,16
    5218:	18bfffcc 	andi	r2,r3,65535
    521c:	2089c83a 	sub	r4,r4,r2
    5220:	2189883a 	add	r4,r4,r6
    5224:	3900008d 	sth	r4,2(r7)
    5228:	3940000d 	sth	r5,0(r7)
    522c:	180cd43a 	srli	r6,r3,16
    5230:	39c00104 	addi	r7,r7,4
    5234:	2013d43a 	srai	r9,r4,16
    5238:	923fe72e 	bgeu	r18,r8,51d8 <quorem+0x178>
    523c:	e03fa61e 	bne	fp,zero,50d8 <quorem+0x78>
    5240:	b0ffff04 	addi	r3,r22,-4
    5244:	98c0082e 	bgeu	r19,r3,5268 <quorem+0x208>
    5248:	b0bfff17 	ldw	r2,-4(r22)
    524c:	10000326 	beq	r2,zero,525c <quorem+0x1fc>
    5250:	00000506 	br	5268 <quorem+0x208>
    5254:	18800017 	ldw	r2,0(r3)
    5258:	1000031e 	bne	r2,zero,5268 <quorem+0x208>
    525c:	18ffff04 	addi	r3,r3,-4
    5260:	8c7fffc4 	addi	r17,r17,-1
    5264:	98fffb36 	bltu	r19,r3,5254 <quorem+0x1f4>
    5268:	bc400415 	stw	r17,16(r23)
    526c:	003f9a06 	br	50d8 <quorem+0x78>
    5270:	0005883a 	mov	r2,zero
    5274:	003fc806 	br	5198 <quorem+0x138>

00005278 <_dtoa_r>:
    5278:	22001017 	ldw	r8,64(r4)
    527c:	deffda04 	addi	sp,sp,-152
    5280:	dd402115 	stw	r21,132(sp)
    5284:	dd002015 	stw	r20,128(sp)
    5288:	dc801e15 	stw	r18,120(sp)
    528c:	dc401d15 	stw	r17,116(sp)
    5290:	dfc02515 	stw	ra,148(sp)
    5294:	df002415 	stw	fp,144(sp)
    5298:	ddc02315 	stw	r23,140(sp)
    529c:	dd802215 	stw	r22,136(sp)
    52a0:	dcc01f15 	stw	r19,124(sp)
    52a4:	dc001c15 	stw	r16,112(sp)
    52a8:	d9001615 	stw	r4,88(sp)
    52ac:	3023883a 	mov	r17,r6
    52b0:	2829883a 	mov	r20,r5
    52b4:	d9c01715 	stw	r7,92(sp)
    52b8:	dc802817 	ldw	r18,160(sp)
    52bc:	302b883a 	mov	r21,r6
    52c0:	40000a26 	beq	r8,zero,52ec <_dtoa_r+0x74>
    52c4:	20801117 	ldw	r2,68(r4)
    52c8:	400b883a 	mov	r5,r8
    52cc:	40800115 	stw	r2,4(r8)
    52d0:	20c01117 	ldw	r3,68(r4)
    52d4:	00800044 	movi	r2,1
    52d8:	10c4983a 	sll	r2,r2,r3
    52dc:	40800215 	stw	r2,8(r8)
    52e0:	00082d40 	call	82d4 <_Bfree>
    52e4:	d8c01617 	ldw	r3,88(sp)
    52e8:	18001015 	stw	zero,64(r3)
    52ec:	8800a316 	blt	r17,zero,557c <_dtoa_r+0x304>
    52f0:	90000015 	stw	zero,0(r18)
    52f4:	a8dffc2c 	andhi	r3,r21,32752
    52f8:	009ffc34 	movhi	r2,32752
    52fc:	18809126 	beq	r3,r2,5544 <_dtoa_r+0x2cc>
    5300:	000d883a 	mov	r6,zero
    5304:	000f883a 	mov	r7,zero
    5308:	a009883a 	mov	r4,r20
    530c:	a80b883a 	mov	r5,r21
    5310:	dd001215 	stw	r20,72(sp)
    5314:	dd401315 	stw	r21,76(sp)
    5318:	000aea40 	call	aea4 <__nedf2>
    531c:	1000171e 	bne	r2,zero,537c <_dtoa_r+0x104>
    5320:	d9802717 	ldw	r6,156(sp)
    5324:	00800044 	movi	r2,1
    5328:	30800015 	stw	r2,0(r6)
    532c:	d8802917 	ldw	r2,164(sp)
    5330:	10029b26 	beq	r2,zero,5da0 <_dtoa_r+0xb28>
    5334:	d9002917 	ldw	r4,164(sp)
    5338:	00800074 	movhi	r2,1
    533c:	108a6644 	addi	r2,r2,10649
    5340:	10ffffc4 	addi	r3,r2,-1
    5344:	20800015 	stw	r2,0(r4)
    5348:	1805883a 	mov	r2,r3
    534c:	dfc02517 	ldw	ra,148(sp)
    5350:	df002417 	ldw	fp,144(sp)
    5354:	ddc02317 	ldw	r23,140(sp)
    5358:	dd802217 	ldw	r22,136(sp)
    535c:	dd402117 	ldw	r21,132(sp)
    5360:	dd002017 	ldw	r20,128(sp)
    5364:	dcc01f17 	ldw	r19,124(sp)
    5368:	dc801e17 	ldw	r18,120(sp)
    536c:	dc401d17 	ldw	r17,116(sp)
    5370:	dc001c17 	ldw	r16,112(sp)
    5374:	dec02604 	addi	sp,sp,152
    5378:	f800283a 	ret
    537c:	d9001617 	ldw	r4,88(sp)
    5380:	d9401217 	ldw	r5,72(sp)
    5384:	d8800104 	addi	r2,sp,4
    5388:	a80d883a 	mov	r6,r21
    538c:	d9c00204 	addi	r7,sp,8
    5390:	d8800015 	stw	r2,0(sp)
    5394:	00089100 	call	8910 <__d2b>
    5398:	d8800715 	stw	r2,28(sp)
    539c:	a804d53a 	srli	r2,r21,20
    53a0:	1101ffcc 	andi	r4,r2,2047
    53a4:	20008626 	beq	r4,zero,55c0 <_dtoa_r+0x348>
    53a8:	d8c01217 	ldw	r3,72(sp)
    53ac:	00800434 	movhi	r2,16
    53b0:	10bfffc4 	addi	r2,r2,-1
    53b4:	ddc00117 	ldw	r23,4(sp)
    53b8:	a884703a 	and	r2,r21,r2
    53bc:	1811883a 	mov	r8,r3
    53c0:	124ffc34 	orhi	r9,r2,16368
    53c4:	25bf0044 	addi	r22,r4,-1023
    53c8:	d8000815 	stw	zero,32(sp)
    53cc:	0005883a 	mov	r2,zero
    53d0:	00cffe34 	movhi	r3,16376
    53d4:	480b883a 	mov	r5,r9
    53d8:	4009883a 	mov	r4,r8
    53dc:	180f883a 	mov	r7,r3
    53e0:	100d883a 	mov	r6,r2
    53e4:	00020a80 	call	20a8 <__subdf3>
    53e8:	0218dbf4 	movhi	r8,25455
    53ec:	4210d844 	addi	r8,r8,17249
    53f0:	024ff4f4 	movhi	r9,16339
    53f4:	4a61e9c4 	addi	r9,r9,-30809
    53f8:	480f883a 	mov	r7,r9
    53fc:	400d883a 	mov	r6,r8
    5400:	180b883a 	mov	r5,r3
    5404:	1009883a 	mov	r4,r2
    5408:	000219c0 	call	219c <__muldf3>
    540c:	0222d874 	movhi	r8,35681
    5410:	42322cc4 	addi	r8,r8,-14157
    5414:	024ff1f4 	movhi	r9,16327
    5418:	4a628a04 	addi	r9,r9,-30168
    541c:	480f883a 	mov	r7,r9
    5420:	400d883a 	mov	r6,r8
    5424:	180b883a 	mov	r5,r3
    5428:	1009883a 	mov	r4,r2
    542c:	00021280 	call	2128 <__adddf3>
    5430:	b009883a 	mov	r4,r22
    5434:	1021883a 	mov	r16,r2
    5438:	1823883a 	mov	r17,r3
    543c:	000b0c40 	call	b0c4 <__floatsidf>
    5440:	021427f4 	movhi	r8,20639
    5444:	421e7ec4 	addi	r8,r8,31227
    5448:	024ff4f4 	movhi	r9,16339
    544c:	4a5104c4 	addi	r9,r9,17427
    5450:	480f883a 	mov	r7,r9
    5454:	400d883a 	mov	r6,r8
    5458:	180b883a 	mov	r5,r3
    545c:	1009883a 	mov	r4,r2
    5460:	000219c0 	call	219c <__muldf3>
    5464:	180f883a 	mov	r7,r3
    5468:	880b883a 	mov	r5,r17
    546c:	100d883a 	mov	r6,r2
    5470:	8009883a 	mov	r4,r16
    5474:	00021280 	call	2128 <__adddf3>
    5478:	1009883a 	mov	r4,r2
    547c:	180b883a 	mov	r5,r3
    5480:	1021883a 	mov	r16,r2
    5484:	1823883a 	mov	r17,r3
    5488:	000b1bc0 	call	b1bc <__fixdfsi>
    548c:	000d883a 	mov	r6,zero
    5490:	000f883a 	mov	r7,zero
    5494:	8009883a 	mov	r4,r16
    5498:	880b883a 	mov	r5,r17
    549c:	d8800d15 	stw	r2,52(sp)
    54a0:	000b03c0 	call	b03c <__ltdf2>
    54a4:	10031716 	blt	r2,zero,6104 <_dtoa_r+0xe8c>
    54a8:	d8c00d17 	ldw	r3,52(sp)
    54ac:	00800584 	movi	r2,22
    54b0:	10c1482e 	bgeu	r2,r3,59d4 <_dtoa_r+0x75c>
    54b4:	01000044 	movi	r4,1
    54b8:	d9000c15 	stw	r4,48(sp)
    54bc:	bd85c83a 	sub	r2,r23,r22
    54c0:	11bfffc4 	addi	r6,r2,-1
    54c4:	30030b16 	blt	r6,zero,60f4 <_dtoa_r+0xe7c>
    54c8:	d9800a15 	stw	r6,40(sp)
    54cc:	d8001115 	stw	zero,68(sp)
    54d0:	d8c00d17 	ldw	r3,52(sp)
    54d4:	1802ff16 	blt	r3,zero,60d4 <_dtoa_r+0xe5c>
    54d8:	d9000a17 	ldw	r4,40(sp)
    54dc:	d8c00915 	stw	r3,36(sp)
    54e0:	d8001015 	stw	zero,64(sp)
    54e4:	20c9883a 	add	r4,r4,r3
    54e8:	d9000a15 	stw	r4,40(sp)
    54ec:	d9001717 	ldw	r4,92(sp)
    54f0:	00800244 	movi	r2,9
    54f4:	11004636 	bltu	r2,r4,5610 <_dtoa_r+0x398>
    54f8:	00800144 	movi	r2,5
    54fc:	11020416 	blt	r2,r4,5d10 <_dtoa_r+0xa98>
    5500:	04400044 	movi	r17,1
    5504:	d8c01717 	ldw	r3,92(sp)
    5508:	00800144 	movi	r2,5
    550c:	10c1ed36 	bltu	r2,r3,5cc4 <_dtoa_r+0xa4c>
    5510:	18c5883a 	add	r2,r3,r3
    5514:	1085883a 	add	r2,r2,r2
    5518:	00c00034 	movhi	r3,0
    551c:	18d54b04 	addi	r3,r3,21804
    5520:	10c5883a 	add	r2,r2,r3
    5524:	11000017 	ldw	r4,0(r2)
    5528:	2000683a 	jmp	r4
    552c:	00005618 	cmpnei	zero,zero,344
    5530:	00005618 	cmpnei	zero,zero,344
    5534:	00006018 	cmpnei	zero,zero,384
    5538:	00005ff0 	cmpltui	zero,zero,383
    553c:	00006034 	movhi	zero,384
    5540:	00006040 	call	604 <audio_ISR+0x284>
    5544:	d9002717 	ldw	r4,156(sp)
    5548:	0089c3c4 	movi	r2,9999
    554c:	20800015 	stw	r2,0(r4)
    5550:	a0001026 	beq	r20,zero,5594 <_dtoa_r+0x31c>
    5554:	00c00074 	movhi	r3,1
    5558:	18ca7204 	addi	r3,r3,10696
    555c:	d9802917 	ldw	r6,164(sp)
    5560:	303f7926 	beq	r6,zero,5348 <_dtoa_r+0xd0>
    5564:	188000c7 	ldb	r2,3(r3)
    5568:	190000c4 	addi	r4,r3,3
    556c:	1000101e 	bne	r2,zero,55b0 <_dtoa_r+0x338>
    5570:	d8802917 	ldw	r2,164(sp)
    5574:	11000015 	stw	r4,0(r2)
    5578:	003f7306 	br	5348 <_dtoa_r+0xd0>
    557c:	00a00034 	movhi	r2,32768
    5580:	10bfffc4 	addi	r2,r2,-1
    5584:	00c00044 	movi	r3,1
    5588:	88aa703a 	and	r21,r17,r2
    558c:	90c00015 	stw	r3,0(r18)
    5590:	003f5806 	br	52f4 <_dtoa_r+0x7c>
    5594:	00800434 	movhi	r2,16
    5598:	10bfffc4 	addi	r2,r2,-1
    559c:	a884703a 	and	r2,r21,r2
    55a0:	103fec1e 	bne	r2,zero,5554 <_dtoa_r+0x2dc>
    55a4:	00c00074 	movhi	r3,1
    55a8:	18ca6f04 	addi	r3,r3,10684
    55ac:	003feb06 	br	555c <_dtoa_r+0x2e4>
    55b0:	d8802917 	ldw	r2,164(sp)
    55b4:	19000204 	addi	r4,r3,8
    55b8:	11000015 	stw	r4,0(r2)
    55bc:	003f6206 	br	5348 <_dtoa_r+0xd0>
    55c0:	ddc00117 	ldw	r23,4(sp)
    55c4:	d8800217 	ldw	r2,8(sp)
    55c8:	01000804 	movi	r4,32
    55cc:	b8c10c84 	addi	r3,r23,1074
    55d0:	18a3883a 	add	r17,r3,r2
    55d4:	2441b80e 	bge	r4,r17,5cb8 <_dtoa_r+0xa40>
    55d8:	00c01004 	movi	r3,64
    55dc:	1c47c83a 	sub	r3,r3,r17
    55e0:	88bff804 	addi	r2,r17,-32
    55e4:	a8c6983a 	sll	r3,r21,r3
    55e8:	a084d83a 	srl	r2,r20,r2
    55ec:	1888b03a 	or	r4,r3,r2
    55f0:	000b2940 	call	b294 <__floatunsidf>
    55f4:	1011883a 	mov	r8,r2
    55f8:	00bf8434 	movhi	r2,65040
    55fc:	01000044 	movi	r4,1
    5600:	10d3883a 	add	r9,r2,r3
    5604:	8dbef344 	addi	r22,r17,-1075
    5608:	d9000815 	stw	r4,32(sp)
    560c:	003f6f06 	br	53cc <_dtoa_r+0x154>
    5610:	d8001715 	stw	zero,92(sp)
    5614:	04400044 	movi	r17,1
    5618:	00bfffc4 	movi	r2,-1
    561c:	00c00044 	movi	r3,1
    5620:	d8800e15 	stw	r2,56(sp)
    5624:	d8002615 	stw	zero,152(sp)
    5628:	d8800f15 	stw	r2,60(sp)
    562c:	d8c00b15 	stw	r3,44(sp)
    5630:	1021883a 	mov	r16,r2
    5634:	d8801617 	ldw	r2,88(sp)
    5638:	10001115 	stw	zero,68(r2)
    563c:	d8801617 	ldw	r2,88(sp)
    5640:	11401117 	ldw	r5,68(r2)
    5644:	1009883a 	mov	r4,r2
    5648:	00088540 	call	8854 <_Balloc>
    564c:	d8c01617 	ldw	r3,88(sp)
    5650:	d8800515 	stw	r2,20(sp)
    5654:	18801015 	stw	r2,64(r3)
    5658:	00800384 	movi	r2,14
    565c:	14006836 	bltu	r2,r16,5800 <_dtoa_r+0x588>
    5660:	8805003a 	cmpeq	r2,r17,zero
    5664:	1000661e 	bne	r2,zero,5800 <_dtoa_r+0x588>
    5668:	d9000d17 	ldw	r4,52(sp)
    566c:	0102300e 	bge	zero,r4,5f30 <_dtoa_r+0xcb8>
    5670:	208003cc 	andi	r2,r4,15
    5674:	100490fa 	slli	r2,r2,3
    5678:	2025d13a 	srai	r18,r4,4
    567c:	00c00074 	movhi	r3,1
    5680:	18ca8404 	addi	r3,r3,10768
    5684:	10c5883a 	add	r2,r2,r3
    5688:	90c0040c 	andi	r3,r18,16
    568c:	14000017 	ldw	r16,0(r2)
    5690:	14400117 	ldw	r17,4(r2)
    5694:	18036a1e 	bne	r3,zero,6440 <_dtoa_r+0x11c8>
    5698:	05800084 	movi	r22,2
    569c:	90001026 	beq	r18,zero,56e0 <_dtoa_r+0x468>
    56a0:	04c00074 	movhi	r19,1
    56a4:	9ccab604 	addi	r19,r19,10968
    56a8:	9080004c 	andi	r2,r18,1
    56ac:	1005003a 	cmpeq	r2,r2,zero
    56b0:	1000081e 	bne	r2,zero,56d4 <_dtoa_r+0x45c>
    56b4:	99800017 	ldw	r6,0(r19)
    56b8:	99c00117 	ldw	r7,4(r19)
    56bc:	880b883a 	mov	r5,r17
    56c0:	8009883a 	mov	r4,r16
    56c4:	000219c0 	call	219c <__muldf3>
    56c8:	1021883a 	mov	r16,r2
    56cc:	b5800044 	addi	r22,r22,1
    56d0:	1823883a 	mov	r17,r3
    56d4:	9025d07a 	srai	r18,r18,1
    56d8:	9cc00204 	addi	r19,r19,8
    56dc:	903ff21e 	bne	r18,zero,56a8 <_dtoa_r+0x430>
    56e0:	a80b883a 	mov	r5,r21
    56e4:	a009883a 	mov	r4,r20
    56e8:	880f883a 	mov	r7,r17
    56ec:	800d883a 	mov	r6,r16
    56f0:	000abc40 	call	abc4 <__divdf3>
    56f4:	1029883a 	mov	r20,r2
    56f8:	182b883a 	mov	r21,r3
    56fc:	d8c00c17 	ldw	r3,48(sp)
    5700:	1805003a 	cmpeq	r2,r3,zero
    5704:	1000081e 	bne	r2,zero,5728 <_dtoa_r+0x4b0>
    5708:	0005883a 	mov	r2,zero
    570c:	00cffc34 	movhi	r3,16368
    5710:	180f883a 	mov	r7,r3
    5714:	a009883a 	mov	r4,r20
    5718:	a80b883a 	mov	r5,r21
    571c:	100d883a 	mov	r6,r2
    5720:	000b03c0 	call	b03c <__ltdf2>
    5724:	1003fe16 	blt	r2,zero,6720 <_dtoa_r+0x14a8>
    5728:	b009883a 	mov	r4,r22
    572c:	000b0c40 	call	b0c4 <__floatsidf>
    5730:	180b883a 	mov	r5,r3
    5734:	1009883a 	mov	r4,r2
    5738:	a00d883a 	mov	r6,r20
    573c:	a80f883a 	mov	r7,r21
    5740:	000219c0 	call	219c <__muldf3>
    5744:	0011883a 	mov	r8,zero
    5748:	02500734 	movhi	r9,16412
    574c:	1009883a 	mov	r4,r2
    5750:	180b883a 	mov	r5,r3
    5754:	480f883a 	mov	r7,r9
    5758:	400d883a 	mov	r6,r8
    575c:	00021280 	call	2128 <__adddf3>
    5760:	d9000f17 	ldw	r4,60(sp)
    5764:	102d883a 	mov	r22,r2
    5768:	00bf3034 	movhi	r2,64704
    576c:	18b9883a 	add	fp,r3,r2
    5770:	e02f883a 	mov	r23,fp
    5774:	20028f1e 	bne	r4,zero,61b4 <_dtoa_r+0xf3c>
    5778:	0005883a 	mov	r2,zero
    577c:	00d00534 	movhi	r3,16404
    5780:	a009883a 	mov	r4,r20
    5784:	a80b883a 	mov	r5,r21
    5788:	180f883a 	mov	r7,r3
    578c:	100d883a 	mov	r6,r2
    5790:	00020a80 	call	20a8 <__subdf3>
    5794:	1009883a 	mov	r4,r2
    5798:	e00f883a 	mov	r7,fp
    579c:	180b883a 	mov	r5,r3
    57a0:	b00d883a 	mov	r6,r22
    57a4:	1025883a 	mov	r18,r2
    57a8:	1827883a 	mov	r19,r3
    57ac:	000af2c0 	call	af2c <__gtdf2>
    57b0:	00834f16 	blt	zero,r2,64f0 <_dtoa_r+0x1278>
    57b4:	e0e0003c 	xorhi	r3,fp,32768
    57b8:	9009883a 	mov	r4,r18
    57bc:	980b883a 	mov	r5,r19
    57c0:	180f883a 	mov	r7,r3
    57c4:	b00d883a 	mov	r6,r22
    57c8:	000b03c0 	call	b03c <__ltdf2>
    57cc:	1000080e 	bge	r2,zero,57f0 <_dtoa_r+0x578>
    57d0:	0027883a 	mov	r19,zero
    57d4:	0025883a 	mov	r18,zero
    57d8:	d8802617 	ldw	r2,152(sp)
    57dc:	df000517 	ldw	fp,20(sp)
    57e0:	d8000615 	stw	zero,24(sp)
    57e4:	0084303a 	nor	r2,zero,r2
    57e8:	d8800d15 	stw	r2,52(sp)
    57ec:	00019b06 	br	5e5c <_dtoa_r+0xbe4>
    57f0:	d9801217 	ldw	r6,72(sp)
    57f4:	d8801317 	ldw	r2,76(sp)
    57f8:	3029883a 	mov	r20,r6
    57fc:	102b883a 	mov	r21,r2
    5800:	d8c00217 	ldw	r3,8(sp)
    5804:	18008516 	blt	r3,zero,5a1c <_dtoa_r+0x7a4>
    5808:	d9000d17 	ldw	r4,52(sp)
    580c:	00800384 	movi	r2,14
    5810:	11008216 	blt	r2,r4,5a1c <_dtoa_r+0x7a4>
    5814:	200490fa 	slli	r2,r4,3
    5818:	d9802617 	ldw	r6,152(sp)
    581c:	00c00074 	movhi	r3,1
    5820:	18ca8404 	addi	r3,r3,10768
    5824:	10c5883a 	add	r2,r2,r3
    5828:	14800017 	ldw	r18,0(r2)
    582c:	14c00117 	ldw	r19,4(r2)
    5830:	30031e16 	blt	r6,zero,64ac <_dtoa_r+0x1234>
    5834:	d9000517 	ldw	r4,20(sp)
    5838:	d8c00f17 	ldw	r3,60(sp)
    583c:	a823883a 	mov	r17,r21
    5840:	a021883a 	mov	r16,r20
    5844:	192b883a 	add	r21,r3,r4
    5848:	2039883a 	mov	fp,r4
    584c:	00000f06 	br	588c <_dtoa_r+0x614>
    5850:	0005883a 	mov	r2,zero
    5854:	00d00934 	movhi	r3,16420
    5858:	5009883a 	mov	r4,r10
    585c:	580b883a 	mov	r5,r11
    5860:	180f883a 	mov	r7,r3
    5864:	100d883a 	mov	r6,r2
    5868:	000219c0 	call	219c <__muldf3>
    586c:	180b883a 	mov	r5,r3
    5870:	000d883a 	mov	r6,zero
    5874:	000f883a 	mov	r7,zero
    5878:	1009883a 	mov	r4,r2
    587c:	1021883a 	mov	r16,r2
    5880:	1823883a 	mov	r17,r3
    5884:	000aea40 	call	aea4 <__nedf2>
    5888:	10004526 	beq	r2,zero,59a0 <_dtoa_r+0x728>
    588c:	900d883a 	mov	r6,r18
    5890:	980f883a 	mov	r7,r19
    5894:	8009883a 	mov	r4,r16
    5898:	880b883a 	mov	r5,r17
    589c:	000abc40 	call	abc4 <__divdf3>
    58a0:	180b883a 	mov	r5,r3
    58a4:	1009883a 	mov	r4,r2
    58a8:	000b1bc0 	call	b1bc <__fixdfsi>
    58ac:	1009883a 	mov	r4,r2
    58b0:	1029883a 	mov	r20,r2
    58b4:	000b0c40 	call	b0c4 <__floatsidf>
    58b8:	180f883a 	mov	r7,r3
    58bc:	9009883a 	mov	r4,r18
    58c0:	980b883a 	mov	r5,r19
    58c4:	100d883a 	mov	r6,r2
    58c8:	000219c0 	call	219c <__muldf3>
    58cc:	180f883a 	mov	r7,r3
    58d0:	880b883a 	mov	r5,r17
    58d4:	8009883a 	mov	r4,r16
    58d8:	100d883a 	mov	r6,r2
    58dc:	00020a80 	call	20a8 <__subdf3>
    58e0:	1015883a 	mov	r10,r2
    58e4:	a0800c04 	addi	r2,r20,48
    58e8:	e0800005 	stb	r2,0(fp)
    58ec:	e7000044 	addi	fp,fp,1
    58f0:	1817883a 	mov	r11,r3
    58f4:	e57fd61e 	bne	fp,r21,5850 <_dtoa_r+0x5d8>
    58f8:	500d883a 	mov	r6,r10
    58fc:	180f883a 	mov	r7,r3
    5900:	5009883a 	mov	r4,r10
    5904:	180b883a 	mov	r5,r3
    5908:	00021280 	call	2128 <__adddf3>
    590c:	100d883a 	mov	r6,r2
    5910:	9009883a 	mov	r4,r18
    5914:	980b883a 	mov	r5,r19
    5918:	180f883a 	mov	r7,r3
    591c:	1021883a 	mov	r16,r2
    5920:	1823883a 	mov	r17,r3
    5924:	000b03c0 	call	b03c <__ltdf2>
    5928:	10000816 	blt	r2,zero,594c <_dtoa_r+0x6d4>
    592c:	980b883a 	mov	r5,r19
    5930:	800d883a 	mov	r6,r16
    5934:	880f883a 	mov	r7,r17
    5938:	9009883a 	mov	r4,r18
    593c:	000ae1c0 	call	ae1c <__eqdf2>
    5940:	1000171e 	bne	r2,zero,59a0 <_dtoa_r+0x728>
    5944:	a080004c 	andi	r2,r20,1
    5948:	10001526 	beq	r2,zero,59a0 <_dtoa_r+0x728>
    594c:	d8800d17 	ldw	r2,52(sp)
    5950:	d8800415 	stw	r2,16(sp)
    5954:	e009883a 	mov	r4,fp
    5958:	213fffc4 	addi	r4,r4,-1
    595c:	20c00007 	ldb	r3,0(r4)
    5960:	00800e44 	movi	r2,57
    5964:	1880081e 	bne	r3,r2,5988 <_dtoa_r+0x710>
    5968:	d8800517 	ldw	r2,20(sp)
    596c:	113ffa1e 	bne	r2,r4,5958 <_dtoa_r+0x6e0>
    5970:	d8c00417 	ldw	r3,16(sp)
    5974:	d9800517 	ldw	r6,20(sp)
    5978:	00800c04 	movi	r2,48
    597c:	18c00044 	addi	r3,r3,1
    5980:	d8c00415 	stw	r3,16(sp)
    5984:	30800005 	stb	r2,0(r6)
    5988:	20800003 	ldbu	r2,0(r4)
    598c:	d8c00417 	ldw	r3,16(sp)
    5990:	27000044 	addi	fp,r4,1
    5994:	10800044 	addi	r2,r2,1
    5998:	d8c00d15 	stw	r3,52(sp)
    599c:	20800005 	stb	r2,0(r4)
    59a0:	d9001617 	ldw	r4,88(sp)
    59a4:	d9400717 	ldw	r5,28(sp)
    59a8:	00082d40 	call	82d4 <_Bfree>
    59ac:	e0000005 	stb	zero,0(fp)
    59b0:	d9800d17 	ldw	r6,52(sp)
    59b4:	d8c02717 	ldw	r3,156(sp)
    59b8:	d9002917 	ldw	r4,164(sp)
    59bc:	30800044 	addi	r2,r6,1
    59c0:	18800015 	stw	r2,0(r3)
    59c4:	20029c26 	beq	r4,zero,6438 <_dtoa_r+0x11c0>
    59c8:	d8c00517 	ldw	r3,20(sp)
    59cc:	27000015 	stw	fp,0(r4)
    59d0:	003e5d06 	br	5348 <_dtoa_r+0xd0>
    59d4:	d9800d17 	ldw	r6,52(sp)
    59d8:	00c00074 	movhi	r3,1
    59dc:	18ca8404 	addi	r3,r3,10768
    59e0:	d9001217 	ldw	r4,72(sp)
    59e4:	300490fa 	slli	r2,r6,3
    59e8:	d9401317 	ldw	r5,76(sp)
    59ec:	10c5883a 	add	r2,r2,r3
    59f0:	12000017 	ldw	r8,0(r2)
    59f4:	12400117 	ldw	r9,4(r2)
    59f8:	400d883a 	mov	r6,r8
    59fc:	480f883a 	mov	r7,r9
    5a00:	000b03c0 	call	b03c <__ltdf2>
    5a04:	1000030e 	bge	r2,zero,5a14 <_dtoa_r+0x79c>
    5a08:	d8800d17 	ldw	r2,52(sp)
    5a0c:	10bfffc4 	addi	r2,r2,-1
    5a10:	d8800d15 	stw	r2,52(sp)
    5a14:	d8000c15 	stw	zero,48(sp)
    5a18:	003ea806 	br	54bc <_dtoa_r+0x244>
    5a1c:	d9000b17 	ldw	r4,44(sp)
    5a20:	202cc03a 	cmpne	r22,r4,zero
    5a24:	b000c71e 	bne	r22,zero,5d44 <_dtoa_r+0xacc>
    5a28:	dc001117 	ldw	r16,68(sp)
    5a2c:	dc801017 	ldw	r18,64(sp)
    5a30:	0027883a 	mov	r19,zero
    5a34:	04000b0e 	bge	zero,r16,5a64 <_dtoa_r+0x7ec>
    5a38:	d8c00a17 	ldw	r3,40(sp)
    5a3c:	00c0090e 	bge	zero,r3,5a64 <_dtoa_r+0x7ec>
    5a40:	8005883a 	mov	r2,r16
    5a44:	1c011316 	blt	r3,r16,5e94 <_dtoa_r+0xc1c>
    5a48:	d9000a17 	ldw	r4,40(sp)
    5a4c:	d9801117 	ldw	r6,68(sp)
    5a50:	80a1c83a 	sub	r16,r16,r2
    5a54:	2089c83a 	sub	r4,r4,r2
    5a58:	308dc83a 	sub	r6,r6,r2
    5a5c:	d9000a15 	stw	r4,40(sp)
    5a60:	d9801115 	stw	r6,68(sp)
    5a64:	d8801017 	ldw	r2,64(sp)
    5a68:	0080150e 	bge	zero,r2,5ac0 <_dtoa_r+0x848>
    5a6c:	d8c00b17 	ldw	r3,44(sp)
    5a70:	1805003a 	cmpeq	r2,r3,zero
    5a74:	1001c91e 	bne	r2,zero,619c <_dtoa_r+0xf24>
    5a78:	04800e0e 	bge	zero,r18,5ab4 <_dtoa_r+0x83c>
    5a7c:	d9001617 	ldw	r4,88(sp)
    5a80:	980b883a 	mov	r5,r19
    5a84:	900d883a 	mov	r6,r18
    5a88:	00090880 	call	9088 <__pow5mult>
    5a8c:	d9001617 	ldw	r4,88(sp)
    5a90:	d9800717 	ldw	r6,28(sp)
    5a94:	100b883a 	mov	r5,r2
    5a98:	1027883a 	mov	r19,r2
    5a9c:	0008d640 	call	8d64 <__multiply>
    5aa0:	d9001617 	ldw	r4,88(sp)
    5aa4:	d9400717 	ldw	r5,28(sp)
    5aa8:	1023883a 	mov	r17,r2
    5aac:	00082d40 	call	82d4 <_Bfree>
    5ab0:	dc400715 	stw	r17,28(sp)
    5ab4:	d9001017 	ldw	r4,64(sp)
    5ab8:	248dc83a 	sub	r6,r4,r18
    5abc:	30010e1e 	bne	r6,zero,5ef8 <_dtoa_r+0xc80>
    5ac0:	d9001617 	ldw	r4,88(sp)
    5ac4:	04400044 	movi	r17,1
    5ac8:	880b883a 	mov	r5,r17
    5acc:	0008f4c0 	call	8f4c <__i2b>
    5ad0:	d9800917 	ldw	r6,36(sp)
    5ad4:	1025883a 	mov	r18,r2
    5ad8:	0180040e 	bge	zero,r6,5aec <_dtoa_r+0x874>
    5adc:	d9001617 	ldw	r4,88(sp)
    5ae0:	100b883a 	mov	r5,r2
    5ae4:	00090880 	call	9088 <__pow5mult>
    5ae8:	1025883a 	mov	r18,r2
    5aec:	d8801717 	ldw	r2,92(sp)
    5af0:	8880f30e 	bge	r17,r2,5ec0 <_dtoa_r+0xc48>
    5af4:	0023883a 	mov	r17,zero
    5af8:	d9800917 	ldw	r6,36(sp)
    5afc:	30019e1e 	bne	r6,zero,6178 <_dtoa_r+0xf00>
    5b00:	00c00044 	movi	r3,1
    5b04:	d9000a17 	ldw	r4,40(sp)
    5b08:	20c5883a 	add	r2,r4,r3
    5b0c:	10c007cc 	andi	r3,r2,31
    5b10:	1800841e 	bne	r3,zero,5d24 <_dtoa_r+0xaac>
    5b14:	00800704 	movi	r2,28
    5b18:	d9000a17 	ldw	r4,40(sp)
    5b1c:	d9801117 	ldw	r6,68(sp)
    5b20:	80a1883a 	add	r16,r16,r2
    5b24:	2089883a 	add	r4,r4,r2
    5b28:	308d883a 	add	r6,r6,r2
    5b2c:	d9000a15 	stw	r4,40(sp)
    5b30:	d9801115 	stw	r6,68(sp)
    5b34:	d8801117 	ldw	r2,68(sp)
    5b38:	0080050e 	bge	zero,r2,5b50 <_dtoa_r+0x8d8>
    5b3c:	d9400717 	ldw	r5,28(sp)
    5b40:	d9001617 	ldw	r4,88(sp)
    5b44:	100d883a 	mov	r6,r2
    5b48:	0008c180 	call	8c18 <__lshift>
    5b4c:	d8800715 	stw	r2,28(sp)
    5b50:	d8c00a17 	ldw	r3,40(sp)
    5b54:	00c0050e 	bge	zero,r3,5b6c <_dtoa_r+0x8f4>
    5b58:	d9001617 	ldw	r4,88(sp)
    5b5c:	900b883a 	mov	r5,r18
    5b60:	180d883a 	mov	r6,r3
    5b64:	0008c180 	call	8c18 <__lshift>
    5b68:	1025883a 	mov	r18,r2
    5b6c:	d9000c17 	ldw	r4,48(sp)
    5b70:	2005003a 	cmpeq	r2,r4,zero
    5b74:	10016f26 	beq	r2,zero,6134 <_dtoa_r+0xebc>
    5b78:	d9000f17 	ldw	r4,60(sp)
    5b7c:	0102170e 	bge	zero,r4,63dc <_dtoa_r+0x1164>
    5b80:	d9800b17 	ldw	r6,44(sp)
    5b84:	3005003a 	cmpeq	r2,r6,zero
    5b88:	1000881e 	bne	r2,zero,5dac <_dtoa_r+0xb34>
    5b8c:	0400050e 	bge	zero,r16,5ba4 <_dtoa_r+0x92c>
    5b90:	d9001617 	ldw	r4,88(sp)
    5b94:	980b883a 	mov	r5,r19
    5b98:	800d883a 	mov	r6,r16
    5b9c:	0008c180 	call	8c18 <__lshift>
    5ba0:	1027883a 	mov	r19,r2
    5ba4:	8804c03a 	cmpne	r2,r17,zero
    5ba8:	1002541e 	bne	r2,zero,64fc <_dtoa_r+0x1284>
    5bac:	980b883a 	mov	r5,r19
    5bb0:	dd800517 	ldw	r22,20(sp)
    5bb4:	dcc00615 	stw	r19,24(sp)
    5bb8:	a700004c 	andi	fp,r20,1
    5bbc:	2827883a 	mov	r19,r5
    5bc0:	d9000717 	ldw	r4,28(sp)
    5bc4:	900b883a 	mov	r5,r18
    5bc8:	00050600 	call	5060 <quorem>
    5bcc:	d9000717 	ldw	r4,28(sp)
    5bd0:	d9400617 	ldw	r5,24(sp)
    5bd4:	1023883a 	mov	r17,r2
    5bd8:	8dc00c04 	addi	r23,r17,48
    5bdc:	00084300 	call	8430 <__mcmp>
    5be0:	d9001617 	ldw	r4,88(sp)
    5be4:	900b883a 	mov	r5,r18
    5be8:	980d883a 	mov	r6,r19
    5bec:	1029883a 	mov	r20,r2
    5bf0:	0008a8c0 	call	8a8c <__mdiff>
    5bf4:	102b883a 	mov	r21,r2
    5bf8:	10800317 	ldw	r2,12(r2)
    5bfc:	1001281e 	bne	r2,zero,60a0 <_dtoa_r+0xe28>
    5c00:	d9000717 	ldw	r4,28(sp)
    5c04:	a80b883a 	mov	r5,r21
    5c08:	00084300 	call	8430 <__mcmp>
    5c0c:	d9001617 	ldw	r4,88(sp)
    5c10:	1021883a 	mov	r16,r2
    5c14:	a80b883a 	mov	r5,r21
    5c18:	00082d40 	call	82d4 <_Bfree>
    5c1c:	8000041e 	bne	r16,zero,5c30 <_dtoa_r+0x9b8>
    5c20:	d8801717 	ldw	r2,92(sp)
    5c24:	1000021e 	bne	r2,zero,5c30 <_dtoa_r+0x9b8>
    5c28:	e004c03a 	cmpne	r2,fp,zero
    5c2c:	10011726 	beq	r2,zero,608c <_dtoa_r+0xe14>
    5c30:	a0010616 	blt	r20,zero,604c <_dtoa_r+0xdd4>
    5c34:	a000041e 	bne	r20,zero,5c48 <_dtoa_r+0x9d0>
    5c38:	d8c01717 	ldw	r3,92(sp)
    5c3c:	1800021e 	bne	r3,zero,5c48 <_dtoa_r+0x9d0>
    5c40:	e004c03a 	cmpne	r2,fp,zero
    5c44:	10010126 	beq	r2,zero,604c <_dtoa_r+0xdd4>
    5c48:	04023d16 	blt	zero,r16,6540 <_dtoa_r+0x12c8>
    5c4c:	b5c00005 	stb	r23,0(r22)
    5c50:	d9800517 	ldw	r6,20(sp)
    5c54:	d9000f17 	ldw	r4,60(sp)
    5c58:	b5800044 	addi	r22,r22,1
    5c5c:	3105883a 	add	r2,r6,r4
    5c60:	b0806526 	beq	r22,r2,5df8 <_dtoa_r+0xb80>
    5c64:	d9400717 	ldw	r5,28(sp)
    5c68:	d9001617 	ldw	r4,88(sp)
    5c6c:	01800284 	movi	r6,10
    5c70:	000f883a 	mov	r7,zero
    5c74:	0008f880 	call	8f88 <__multadd>
    5c78:	d8800715 	stw	r2,28(sp)
    5c7c:	d8800617 	ldw	r2,24(sp)
    5c80:	14c10c26 	beq	r2,r19,60b4 <_dtoa_r+0xe3c>
    5c84:	d9400617 	ldw	r5,24(sp)
    5c88:	d9001617 	ldw	r4,88(sp)
    5c8c:	01800284 	movi	r6,10
    5c90:	000f883a 	mov	r7,zero
    5c94:	0008f880 	call	8f88 <__multadd>
    5c98:	d9001617 	ldw	r4,88(sp)
    5c9c:	980b883a 	mov	r5,r19
    5ca0:	01800284 	movi	r6,10
    5ca4:	000f883a 	mov	r7,zero
    5ca8:	d8800615 	stw	r2,24(sp)
    5cac:	0008f880 	call	8f88 <__multadd>
    5cb0:	1027883a 	mov	r19,r2
    5cb4:	003fc206 	br	5bc0 <_dtoa_r+0x948>
    5cb8:	2445c83a 	sub	r2,r4,r17
    5cbc:	a088983a 	sll	r4,r20,r2
    5cc0:	003e4b06 	br	55f0 <_dtoa_r+0x378>
    5cc4:	01bfffc4 	movi	r6,-1
    5cc8:	00800044 	movi	r2,1
    5ccc:	d9800e15 	stw	r6,56(sp)
    5cd0:	d9800f15 	stw	r6,60(sp)
    5cd4:	d8800b15 	stw	r2,44(sp)
    5cd8:	d8c01617 	ldw	r3,88(sp)
    5cdc:	008005c4 	movi	r2,23
    5ce0:	18001115 	stw	zero,68(r3)
    5ce4:	1580082e 	bgeu	r2,r22,5d08 <_dtoa_r+0xa90>
    5ce8:	00c00104 	movi	r3,4
    5cec:	0009883a 	mov	r4,zero
    5cf0:	18c7883a 	add	r3,r3,r3
    5cf4:	18800504 	addi	r2,r3,20
    5cf8:	21000044 	addi	r4,r4,1
    5cfc:	b0bffc2e 	bgeu	r22,r2,5cf0 <_dtoa_r+0xa78>
    5d00:	d9801617 	ldw	r6,88(sp)
    5d04:	31001115 	stw	r4,68(r6)
    5d08:	dc000f17 	ldw	r16,60(sp)
    5d0c:	003e4b06 	br	563c <_dtoa_r+0x3c4>
    5d10:	d9801717 	ldw	r6,92(sp)
    5d14:	0023883a 	mov	r17,zero
    5d18:	31bfff04 	addi	r6,r6,-4
    5d1c:	d9801715 	stw	r6,92(sp)
    5d20:	003df806 	br	5504 <_dtoa_r+0x28c>
    5d24:	00800804 	movi	r2,32
    5d28:	10c9c83a 	sub	r4,r2,r3
    5d2c:	00c00104 	movi	r3,4
    5d30:	19005a16 	blt	r3,r4,5e9c <_dtoa_r+0xc24>
    5d34:	008000c4 	movi	r2,3
    5d38:	113f7e16 	blt	r2,r4,5b34 <_dtoa_r+0x8bc>
    5d3c:	20800704 	addi	r2,r4,28
    5d40:	003f7506 	br	5b18 <_dtoa_r+0x8a0>
    5d44:	d9801717 	ldw	r6,92(sp)
    5d48:	00800044 	movi	r2,1
    5d4c:	1180a10e 	bge	r2,r6,5fd4 <_dtoa_r+0xd5c>
    5d50:	d9800f17 	ldw	r6,60(sp)
    5d54:	d8c01017 	ldw	r3,64(sp)
    5d58:	30bfffc4 	addi	r2,r6,-1
    5d5c:	1881c616 	blt	r3,r2,6478 <_dtoa_r+0x1200>
    5d60:	18a5c83a 	sub	r18,r3,r2
    5d64:	d8800f17 	ldw	r2,60(sp)
    5d68:	10026216 	blt	r2,zero,66f4 <_dtoa_r+0x147c>
    5d6c:	dc001117 	ldw	r16,68(sp)
    5d70:	1007883a 	mov	r3,r2
    5d74:	d9800a17 	ldw	r6,40(sp)
    5d78:	d8801117 	ldw	r2,68(sp)
    5d7c:	d9001617 	ldw	r4,88(sp)
    5d80:	30cd883a 	add	r6,r6,r3
    5d84:	10c5883a 	add	r2,r2,r3
    5d88:	01400044 	movi	r5,1
    5d8c:	d9800a15 	stw	r6,40(sp)
    5d90:	d8801115 	stw	r2,68(sp)
    5d94:	0008f4c0 	call	8f4c <__i2b>
    5d98:	1027883a 	mov	r19,r2
    5d9c:	003f2506 	br	5a34 <_dtoa_r+0x7bc>
    5da0:	00c00074 	movhi	r3,1
    5da4:	18ca6604 	addi	r3,r3,10648
    5da8:	003d6706 	br	5348 <_dtoa_r+0xd0>
    5dac:	dd800517 	ldw	r22,20(sp)
    5db0:	04000044 	movi	r16,1
    5db4:	00000706 	br	5dd4 <_dtoa_r+0xb5c>
    5db8:	d9400717 	ldw	r5,28(sp)
    5dbc:	d9001617 	ldw	r4,88(sp)
    5dc0:	01800284 	movi	r6,10
    5dc4:	000f883a 	mov	r7,zero
    5dc8:	0008f880 	call	8f88 <__multadd>
    5dcc:	d8800715 	stw	r2,28(sp)
    5dd0:	84000044 	addi	r16,r16,1
    5dd4:	d9000717 	ldw	r4,28(sp)
    5dd8:	900b883a 	mov	r5,r18
    5ddc:	00050600 	call	5060 <quorem>
    5de0:	15c00c04 	addi	r23,r2,48
    5de4:	b5c00005 	stb	r23,0(r22)
    5de8:	d8c00f17 	ldw	r3,60(sp)
    5dec:	b5800044 	addi	r22,r22,1
    5df0:	80fff116 	blt	r16,r3,5db8 <_dtoa_r+0xb40>
    5df4:	d8000615 	stw	zero,24(sp)
    5df8:	d9400717 	ldw	r5,28(sp)
    5dfc:	d9001617 	ldw	r4,88(sp)
    5e00:	01800044 	movi	r6,1
    5e04:	0008c180 	call	8c18 <__lshift>
    5e08:	1009883a 	mov	r4,r2
    5e0c:	900b883a 	mov	r5,r18
    5e10:	d8800715 	stw	r2,28(sp)
    5e14:	00084300 	call	8430 <__mcmp>
    5e18:	00803c0e 	bge	zero,r2,5f0c <_dtoa_r+0xc94>
    5e1c:	b009883a 	mov	r4,r22
    5e20:	213fffc4 	addi	r4,r4,-1
    5e24:	21400003 	ldbu	r5,0(r4)
    5e28:	00800e44 	movi	r2,57
    5e2c:	28c03fcc 	andi	r3,r5,255
    5e30:	18c0201c 	xori	r3,r3,128
    5e34:	18ffe004 	addi	r3,r3,-128
    5e38:	1881981e 	bne	r3,r2,649c <_dtoa_r+0x1224>
    5e3c:	d9800517 	ldw	r6,20(sp)
    5e40:	21bff71e 	bne	r4,r6,5e20 <_dtoa_r+0xba8>
    5e44:	d8800d17 	ldw	r2,52(sp)
    5e48:	37000044 	addi	fp,r6,1
    5e4c:	10800044 	addi	r2,r2,1
    5e50:	d8800d15 	stw	r2,52(sp)
    5e54:	00800c44 	movi	r2,49
    5e58:	30800005 	stb	r2,0(r6)
    5e5c:	d9001617 	ldw	r4,88(sp)
    5e60:	900b883a 	mov	r5,r18
    5e64:	00082d40 	call	82d4 <_Bfree>
    5e68:	983ecd26 	beq	r19,zero,59a0 <_dtoa_r+0x728>
    5e6c:	d8c00617 	ldw	r3,24(sp)
    5e70:	18000426 	beq	r3,zero,5e84 <_dtoa_r+0xc0c>
    5e74:	1cc00326 	beq	r3,r19,5e84 <_dtoa_r+0xc0c>
    5e78:	d9001617 	ldw	r4,88(sp)
    5e7c:	180b883a 	mov	r5,r3
    5e80:	00082d40 	call	82d4 <_Bfree>
    5e84:	d9001617 	ldw	r4,88(sp)
    5e88:	980b883a 	mov	r5,r19
    5e8c:	00082d40 	call	82d4 <_Bfree>
    5e90:	003ec306 	br	59a0 <_dtoa_r+0x728>
    5e94:	1805883a 	mov	r2,r3
    5e98:	003eeb06 	br	5a48 <_dtoa_r+0x7d0>
    5e9c:	d9800a17 	ldw	r6,40(sp)
    5ea0:	d8c01117 	ldw	r3,68(sp)
    5ea4:	20bfff04 	addi	r2,r4,-4
    5ea8:	308d883a 	add	r6,r6,r2
    5eac:	1887883a 	add	r3,r3,r2
    5eb0:	80a1883a 	add	r16,r16,r2
    5eb4:	d9800a15 	stw	r6,40(sp)
    5eb8:	d8c01115 	stw	r3,68(sp)
    5ebc:	003f1d06 	br	5b34 <_dtoa_r+0x8bc>
    5ec0:	a03f0c1e 	bne	r20,zero,5af4 <_dtoa_r+0x87c>
    5ec4:	00800434 	movhi	r2,16
    5ec8:	10bfffc4 	addi	r2,r2,-1
    5ecc:	a884703a 	and	r2,r21,r2
    5ed0:	103f081e 	bne	r2,zero,5af4 <_dtoa_r+0x87c>
    5ed4:	a89ffc2c 	andhi	r2,r21,32752
    5ed8:	103f0626 	beq	r2,zero,5af4 <_dtoa_r+0x87c>
    5edc:	d8c01117 	ldw	r3,68(sp)
    5ee0:	d9000a17 	ldw	r4,40(sp)
    5ee4:	18c00044 	addi	r3,r3,1
    5ee8:	21000044 	addi	r4,r4,1
    5eec:	d8c01115 	stw	r3,68(sp)
    5ef0:	d9000a15 	stw	r4,40(sp)
    5ef4:	003f0006 	br	5af8 <_dtoa_r+0x880>
    5ef8:	d9400717 	ldw	r5,28(sp)
    5efc:	d9001617 	ldw	r4,88(sp)
    5f00:	00090880 	call	9088 <__pow5mult>
    5f04:	d8800715 	stw	r2,28(sp)
    5f08:	003eed06 	br	5ac0 <_dtoa_r+0x848>
    5f0c:	1000021e 	bne	r2,zero,5f18 <_dtoa_r+0xca0>
    5f10:	b880004c 	andi	r2,r23,1
    5f14:	103fc11e 	bne	r2,zero,5e1c <_dtoa_r+0xba4>
    5f18:	b5bfffc4 	addi	r22,r22,-1
    5f1c:	b0c00007 	ldb	r3,0(r22)
    5f20:	00800c04 	movi	r2,48
    5f24:	18bffc26 	beq	r3,r2,5f18 <_dtoa_r+0xca0>
    5f28:	b7000044 	addi	fp,r22,1
    5f2c:	003fcb06 	br	5e5c <_dtoa_r+0xbe4>
    5f30:	d9800d17 	ldw	r6,52(sp)
    5f34:	018fc83a 	sub	r7,zero,r6
    5f38:	3801f726 	beq	r7,zero,6718 <_dtoa_r+0x14a0>
    5f3c:	398003cc 	andi	r6,r7,15
    5f40:	300c90fa 	slli	r6,r6,3
    5f44:	01400074 	movhi	r5,1
    5f48:	294a8404 	addi	r5,r5,10768
    5f4c:	d9001217 	ldw	r4,72(sp)
    5f50:	314d883a 	add	r6,r6,r5
    5f54:	30c00117 	ldw	r3,4(r6)
    5f58:	30800017 	ldw	r2,0(r6)
    5f5c:	d9401317 	ldw	r5,76(sp)
    5f60:	3821d13a 	srai	r16,r7,4
    5f64:	100d883a 	mov	r6,r2
    5f68:	180f883a 	mov	r7,r3
    5f6c:	000219c0 	call	219c <__muldf3>
    5f70:	1011883a 	mov	r8,r2
    5f74:	1813883a 	mov	r9,r3
    5f78:	1029883a 	mov	r20,r2
    5f7c:	182b883a 	mov	r21,r3
    5f80:	8001e526 	beq	r16,zero,6718 <_dtoa_r+0x14a0>
    5f84:	05800084 	movi	r22,2
    5f88:	04400074 	movhi	r17,1
    5f8c:	8c4ab604 	addi	r17,r17,10968
    5f90:	8080004c 	andi	r2,r16,1
    5f94:	1005003a 	cmpeq	r2,r2,zero
    5f98:	1000081e 	bne	r2,zero,5fbc <_dtoa_r+0xd44>
    5f9c:	89800017 	ldw	r6,0(r17)
    5fa0:	89c00117 	ldw	r7,4(r17)
    5fa4:	480b883a 	mov	r5,r9
    5fa8:	4009883a 	mov	r4,r8
    5fac:	000219c0 	call	219c <__muldf3>
    5fb0:	1011883a 	mov	r8,r2
    5fb4:	b5800044 	addi	r22,r22,1
    5fb8:	1813883a 	mov	r9,r3
    5fbc:	8021d07a 	srai	r16,r16,1
    5fc0:	8c400204 	addi	r17,r17,8
    5fc4:	803ff21e 	bne	r16,zero,5f90 <_dtoa_r+0xd18>
    5fc8:	4029883a 	mov	r20,r8
    5fcc:	482b883a 	mov	r21,r9
    5fd0:	003dca06 	br	56fc <_dtoa_r+0x484>
    5fd4:	d9000817 	ldw	r4,32(sp)
    5fd8:	2005003a 	cmpeq	r2,r4,zero
    5fdc:	1001f61e 	bne	r2,zero,67b8 <_dtoa_r+0x1540>
    5fe0:	dc001117 	ldw	r16,68(sp)
    5fe4:	dc801017 	ldw	r18,64(sp)
    5fe8:	18c10cc4 	addi	r3,r3,1075
    5fec:	003f6106 	br	5d74 <_dtoa_r+0xafc>
    5ff0:	d8000b15 	stw	zero,44(sp)
    5ff4:	d9802617 	ldw	r6,152(sp)
    5ff8:	d8c00d17 	ldw	r3,52(sp)
    5ffc:	30800044 	addi	r2,r6,1
    6000:	18ad883a 	add	r22,r3,r2
    6004:	b13fffc4 	addi	r4,r22,-1
    6008:	d9000e15 	stw	r4,56(sp)
    600c:	0581f60e 	bge	zero,r22,67e8 <_dtoa_r+0x1570>
    6010:	dd800f15 	stw	r22,60(sp)
    6014:	003f3006 	br	5cd8 <_dtoa_r+0xa60>
    6018:	d8000b15 	stw	zero,44(sp)
    601c:	d9002617 	ldw	r4,152(sp)
    6020:	0101eb0e 	bge	zero,r4,67d0 <_dtoa_r+0x1558>
    6024:	202d883a 	mov	r22,r4
    6028:	d9000e15 	stw	r4,56(sp)
    602c:	d9000f15 	stw	r4,60(sp)
    6030:	003f2906 	br	5cd8 <_dtoa_r+0xa60>
    6034:	01800044 	movi	r6,1
    6038:	d9800b15 	stw	r6,44(sp)
    603c:	003ff706 	br	601c <_dtoa_r+0xda4>
    6040:	01000044 	movi	r4,1
    6044:	d9000b15 	stw	r4,44(sp)
    6048:	003fea06 	br	5ff4 <_dtoa_r+0xd7c>
    604c:	04000c0e 	bge	zero,r16,6080 <_dtoa_r+0xe08>
    6050:	d9400717 	ldw	r5,28(sp)
    6054:	d9001617 	ldw	r4,88(sp)
    6058:	01800044 	movi	r6,1
    605c:	0008c180 	call	8c18 <__lshift>
    6060:	1009883a 	mov	r4,r2
    6064:	900b883a 	mov	r5,r18
    6068:	d8800715 	stw	r2,28(sp)
    606c:	00084300 	call	8430 <__mcmp>
    6070:	0081e00e 	bge	zero,r2,67f4 <_dtoa_r+0x157c>
    6074:	bdc00044 	addi	r23,r23,1
    6078:	00800e84 	movi	r2,58
    607c:	b881a226 	beq	r23,r2,6708 <_dtoa_r+0x1490>
    6080:	b7000044 	addi	fp,r22,1
    6084:	b5c00005 	stb	r23,0(r22)
    6088:	003f7406 	br	5e5c <_dtoa_r+0xbe4>
    608c:	00800e44 	movi	r2,57
    6090:	b8819d26 	beq	r23,r2,6708 <_dtoa_r+0x1490>
    6094:	053ffa0e 	bge	zero,r20,6080 <_dtoa_r+0xe08>
    6098:	8dc00c44 	addi	r23,r17,49
    609c:	003ff806 	br	6080 <_dtoa_r+0xe08>
    60a0:	d9001617 	ldw	r4,88(sp)
    60a4:	a80b883a 	mov	r5,r21
    60a8:	04000044 	movi	r16,1
    60ac:	00082d40 	call	82d4 <_Bfree>
    60b0:	003edf06 	br	5c30 <_dtoa_r+0x9b8>
    60b4:	d9001617 	ldw	r4,88(sp)
    60b8:	980b883a 	mov	r5,r19
    60bc:	01800284 	movi	r6,10
    60c0:	000f883a 	mov	r7,zero
    60c4:	0008f880 	call	8f88 <__multadd>
    60c8:	1027883a 	mov	r19,r2
    60cc:	d8800615 	stw	r2,24(sp)
    60d0:	003ebb06 	br	5bc0 <_dtoa_r+0x948>
    60d4:	d9801117 	ldw	r6,68(sp)
    60d8:	d8800d17 	ldw	r2,52(sp)
    60dc:	d8000915 	stw	zero,36(sp)
    60e0:	308dc83a 	sub	r6,r6,r2
    60e4:	0087c83a 	sub	r3,zero,r2
    60e8:	d9801115 	stw	r6,68(sp)
    60ec:	d8c01015 	stw	r3,64(sp)
    60f0:	003cfe06 	br	54ec <_dtoa_r+0x274>
    60f4:	018dc83a 	sub	r6,zero,r6
    60f8:	d9801115 	stw	r6,68(sp)
    60fc:	d8000a15 	stw	zero,40(sp)
    6100:	003cf306 	br	54d0 <_dtoa_r+0x258>
    6104:	d9000d17 	ldw	r4,52(sp)
    6108:	000b0c40 	call	b0c4 <__floatsidf>
    610c:	880b883a 	mov	r5,r17
    6110:	8009883a 	mov	r4,r16
    6114:	180f883a 	mov	r7,r3
    6118:	100d883a 	mov	r6,r2
    611c:	000aea40 	call	aea4 <__nedf2>
    6120:	103ce126 	beq	r2,zero,54a8 <_dtoa_r+0x230>
    6124:	d9800d17 	ldw	r6,52(sp)
    6128:	31bfffc4 	addi	r6,r6,-1
    612c:	d9800d15 	stw	r6,52(sp)
    6130:	003cdd06 	br	54a8 <_dtoa_r+0x230>
    6134:	d9000717 	ldw	r4,28(sp)
    6138:	900b883a 	mov	r5,r18
    613c:	00084300 	call	8430 <__mcmp>
    6140:	103e8d0e 	bge	r2,zero,5b78 <_dtoa_r+0x900>
    6144:	d9400717 	ldw	r5,28(sp)
    6148:	d9001617 	ldw	r4,88(sp)
    614c:	01800284 	movi	r6,10
    6150:	000f883a 	mov	r7,zero
    6154:	0008f880 	call	8f88 <__multadd>
    6158:	d9800d17 	ldw	r6,52(sp)
    615c:	d8800715 	stw	r2,28(sp)
    6160:	31bfffc4 	addi	r6,r6,-1
    6164:	d9800d15 	stw	r6,52(sp)
    6168:	b001a71e 	bne	r22,zero,6808 <_dtoa_r+0x1590>
    616c:	d8800e17 	ldw	r2,56(sp)
    6170:	d8800f15 	stw	r2,60(sp)
    6174:	003e8006 	br	5b78 <_dtoa_r+0x900>
    6178:	90800417 	ldw	r2,16(r18)
    617c:	1085883a 	add	r2,r2,r2
    6180:	1085883a 	add	r2,r2,r2
    6184:	1485883a 	add	r2,r2,r18
    6188:	11000417 	ldw	r4,16(r2)
    618c:	00082fc0 	call	82fc <__hi0bits>
    6190:	00c00804 	movi	r3,32
    6194:	1887c83a 	sub	r3,r3,r2
    6198:	003e5a06 	br	5b04 <_dtoa_r+0x88c>
    619c:	d9400717 	ldw	r5,28(sp)
    61a0:	d9801017 	ldw	r6,64(sp)
    61a4:	d9001617 	ldw	r4,88(sp)
    61a8:	00090880 	call	9088 <__pow5mult>
    61ac:	d8800715 	stw	r2,28(sp)
    61b0:	003e4306 	br	5ac0 <_dtoa_r+0x848>
    61b4:	d9800f17 	ldw	r6,60(sp)
    61b8:	d8800d17 	ldw	r2,52(sp)
    61bc:	d9800315 	stw	r6,12(sp)
    61c0:	d8800415 	stw	r2,16(sp)
    61c4:	d8c00b17 	ldw	r3,44(sp)
    61c8:	1805003a 	cmpeq	r2,r3,zero
    61cc:	1000e21e 	bne	r2,zero,6558 <_dtoa_r+0x12e0>
    61d0:	d9000317 	ldw	r4,12(sp)
    61d4:	0005883a 	mov	r2,zero
    61d8:	00cff834 	movhi	r3,16352
    61dc:	200c90fa 	slli	r6,r4,3
    61e0:	01000074 	movhi	r4,1
    61e4:	210a8404 	addi	r4,r4,10768
    61e8:	180b883a 	mov	r5,r3
    61ec:	310d883a 	add	r6,r6,r4
    61f0:	327fff17 	ldw	r9,-4(r6)
    61f4:	323ffe17 	ldw	r8,-8(r6)
    61f8:	1009883a 	mov	r4,r2
    61fc:	480f883a 	mov	r7,r9
    6200:	400d883a 	mov	r6,r8
    6204:	000abc40 	call	abc4 <__divdf3>
    6208:	180b883a 	mov	r5,r3
    620c:	b00d883a 	mov	r6,r22
    6210:	b80f883a 	mov	r7,r23
    6214:	1009883a 	mov	r4,r2
    6218:	00020a80 	call	20a8 <__subdf3>
    621c:	a80b883a 	mov	r5,r21
    6220:	a009883a 	mov	r4,r20
    6224:	d8c01915 	stw	r3,100(sp)
    6228:	d8801815 	stw	r2,96(sp)
    622c:	000b1bc0 	call	b1bc <__fixdfsi>
    6230:	1009883a 	mov	r4,r2
    6234:	1027883a 	mov	r19,r2
    6238:	000b0c40 	call	b0c4 <__floatsidf>
    623c:	a80b883a 	mov	r5,r21
    6240:	a009883a 	mov	r4,r20
    6244:	180f883a 	mov	r7,r3
    6248:	100d883a 	mov	r6,r2
    624c:	00020a80 	call	20a8 <__subdf3>
    6250:	d9801817 	ldw	r6,96(sp)
    6254:	1823883a 	mov	r17,r3
    6258:	d8801415 	stw	r2,80(sp)
    625c:	302d883a 	mov	r22,r6
    6260:	d9800517 	ldw	r6,20(sp)
    6264:	9cc00c04 	addi	r19,r19,48
    6268:	dc401515 	stw	r17,84(sp)
    626c:	d8c01917 	ldw	r3,100(sp)
    6270:	34c00005 	stb	r19,0(r6)
    6274:	d8800517 	ldw	r2,20(sp)
    6278:	d9401917 	ldw	r5,100(sp)
    627c:	d9801417 	ldw	r6,80(sp)
    6280:	b009883a 	mov	r4,r22
    6284:	880f883a 	mov	r7,r17
    6288:	182f883a 	mov	r23,r3
    628c:	17000044 	addi	fp,r2,1
    6290:	000af2c0 	call	af2c <__gtdf2>
    6294:	00804e16 	blt	zero,r2,63d0 <_dtoa_r+0x1158>
    6298:	d9801417 	ldw	r6,80(sp)
    629c:	0005883a 	mov	r2,zero
    62a0:	00cffc34 	movhi	r3,16368
    62a4:	180b883a 	mov	r5,r3
    62a8:	880f883a 	mov	r7,r17
    62ac:	1009883a 	mov	r4,r2
    62b0:	00020a80 	call	20a8 <__subdf3>
    62b4:	d9401917 	ldw	r5,100(sp)
    62b8:	180f883a 	mov	r7,r3
    62bc:	b009883a 	mov	r4,r22
    62c0:	100d883a 	mov	r6,r2
    62c4:	000af2c0 	call	af2c <__gtdf2>
    62c8:	00bda216 	blt	zero,r2,5954 <_dtoa_r+0x6dc>
    62cc:	d8c00317 	ldw	r3,12(sp)
    62d0:	00800044 	movi	r2,1
    62d4:	10c01216 	blt	r2,r3,6320 <_dtoa_r+0x10a8>
    62d8:	003d4506 	br	57f0 <_dtoa_r+0x578>
    62dc:	d9801417 	ldw	r6,80(sp)
    62e0:	0005883a 	mov	r2,zero
    62e4:	00cffc34 	movhi	r3,16368
    62e8:	180b883a 	mov	r5,r3
    62ec:	880f883a 	mov	r7,r17
    62f0:	1009883a 	mov	r4,r2
    62f4:	00020a80 	call	20a8 <__subdf3>
    62f8:	d9c01b17 	ldw	r7,108(sp)
    62fc:	180b883a 	mov	r5,r3
    6300:	1009883a 	mov	r4,r2
    6304:	b00d883a 	mov	r6,r22
    6308:	000b03c0 	call	b03c <__ltdf2>
    630c:	103d9116 	blt	r2,zero,5954 <_dtoa_r+0x6dc>
    6310:	d9800517 	ldw	r6,20(sp)
    6314:	d9000317 	ldw	r4,12(sp)
    6318:	3105883a 	add	r2,r6,r4
    631c:	e0bd3426 	beq	fp,r2,57f0 <_dtoa_r+0x578>
    6320:	04500934 	movhi	r17,16420
    6324:	0021883a 	mov	r16,zero
    6328:	b80b883a 	mov	r5,r23
    632c:	b009883a 	mov	r4,r22
    6330:	800d883a 	mov	r6,r16
    6334:	880f883a 	mov	r7,r17
    6338:	000219c0 	call	219c <__muldf3>
    633c:	d9401517 	ldw	r5,84(sp)
    6340:	d9001417 	ldw	r4,80(sp)
    6344:	880f883a 	mov	r7,r17
    6348:	000d883a 	mov	r6,zero
    634c:	d8801a15 	stw	r2,104(sp)
    6350:	d8c01b15 	stw	r3,108(sp)
    6354:	000219c0 	call	219c <__muldf3>
    6358:	180b883a 	mov	r5,r3
    635c:	1009883a 	mov	r4,r2
    6360:	1823883a 	mov	r17,r3
    6364:	1021883a 	mov	r16,r2
    6368:	000b1bc0 	call	b1bc <__fixdfsi>
    636c:	1009883a 	mov	r4,r2
    6370:	102b883a 	mov	r21,r2
    6374:	000b0c40 	call	b0c4 <__floatsidf>
    6378:	880b883a 	mov	r5,r17
    637c:	8009883a 	mov	r4,r16
    6380:	180f883a 	mov	r7,r3
    6384:	100d883a 	mov	r6,r2
    6388:	00020a80 	call	20a8 <__subdf3>
    638c:	1021883a 	mov	r16,r2
    6390:	d9001b17 	ldw	r4,108(sp)
    6394:	1823883a 	mov	r17,r3
    6398:	dc001415 	stw	r16,80(sp)
    639c:	ad400c04 	addi	r21,r21,48
    63a0:	dc401515 	stw	r17,84(sp)
    63a4:	d8801a17 	ldw	r2,104(sp)
    63a8:	e5400005 	stb	r21,0(fp)
    63ac:	202f883a 	mov	r23,r4
    63b0:	d9c01b17 	ldw	r7,108(sp)
    63b4:	d9001417 	ldw	r4,80(sp)
    63b8:	880b883a 	mov	r5,r17
    63bc:	100d883a 	mov	r6,r2
    63c0:	102d883a 	mov	r22,r2
    63c4:	e7000044 	addi	fp,fp,1
    63c8:	000b03c0 	call	b03c <__ltdf2>
    63cc:	103fc30e 	bge	r2,zero,62dc <_dtoa_r+0x1064>
    63d0:	d9000417 	ldw	r4,16(sp)
    63d4:	d9000d15 	stw	r4,52(sp)
    63d8:	003d7106 	br	59a0 <_dtoa_r+0x728>
    63dc:	d9801717 	ldw	r6,92(sp)
    63e0:	00800084 	movi	r2,2
    63e4:	11bde60e 	bge	r2,r6,5b80 <_dtoa_r+0x908>
    63e8:	203cfb1e 	bne	r4,zero,57d8 <_dtoa_r+0x560>
    63ec:	d9001617 	ldw	r4,88(sp)
    63f0:	900b883a 	mov	r5,r18
    63f4:	01800144 	movi	r6,5
    63f8:	000f883a 	mov	r7,zero
    63fc:	0008f880 	call	8f88 <__multadd>
    6400:	d9000717 	ldw	r4,28(sp)
    6404:	100b883a 	mov	r5,r2
    6408:	1025883a 	mov	r18,r2
    640c:	00084300 	call	8430 <__mcmp>
    6410:	00bcf10e 	bge	zero,r2,57d8 <_dtoa_r+0x560>
    6414:	d8c00d17 	ldw	r3,52(sp)
    6418:	d9000517 	ldw	r4,20(sp)
    641c:	d8000615 	stw	zero,24(sp)
    6420:	18c00044 	addi	r3,r3,1
    6424:	d8c00d15 	stw	r3,52(sp)
    6428:	00800c44 	movi	r2,49
    642c:	27000044 	addi	fp,r4,1
    6430:	20800005 	stb	r2,0(r4)
    6434:	003e8906 	br	5e5c <_dtoa_r+0xbe4>
    6438:	d8c00517 	ldw	r3,20(sp)
    643c:	003bc206 	br	5348 <_dtoa_r+0xd0>
    6440:	01800074 	movhi	r6,1
    6444:	318ab604 	addi	r6,r6,10968
    6448:	30c00917 	ldw	r3,36(r6)
    644c:	30800817 	ldw	r2,32(r6)
    6450:	d9001217 	ldw	r4,72(sp)
    6454:	d9401317 	ldw	r5,76(sp)
    6458:	180f883a 	mov	r7,r3
    645c:	100d883a 	mov	r6,r2
    6460:	000abc40 	call	abc4 <__divdf3>
    6464:	948003cc 	andi	r18,r18,15
    6468:	058000c4 	movi	r22,3
    646c:	1029883a 	mov	r20,r2
    6470:	182b883a 	mov	r21,r3
    6474:	003c8906 	br	569c <_dtoa_r+0x424>
    6478:	d9001017 	ldw	r4,64(sp)
    647c:	d9800917 	ldw	r6,36(sp)
    6480:	0025883a 	mov	r18,zero
    6484:	1105c83a 	sub	r2,r2,r4
    6488:	2089883a 	add	r4,r4,r2
    648c:	308d883a 	add	r6,r6,r2
    6490:	d9001015 	stw	r4,64(sp)
    6494:	d9800915 	stw	r6,36(sp)
    6498:	003e3206 	br	5d64 <_dtoa_r+0xaec>
    649c:	28800044 	addi	r2,r5,1
    64a0:	27000044 	addi	fp,r4,1
    64a4:	20800005 	stb	r2,0(r4)
    64a8:	003e6c06 	br	5e5c <_dtoa_r+0xbe4>
    64ac:	d8800f17 	ldw	r2,60(sp)
    64b0:	00bce016 	blt	zero,r2,5834 <_dtoa_r+0x5bc>
    64b4:	d9800f17 	ldw	r6,60(sp)
    64b8:	303cc51e 	bne	r6,zero,57d0 <_dtoa_r+0x558>
    64bc:	0005883a 	mov	r2,zero
    64c0:	00d00534 	movhi	r3,16404
    64c4:	980b883a 	mov	r5,r19
    64c8:	180f883a 	mov	r7,r3
    64cc:	9009883a 	mov	r4,r18
    64d0:	100d883a 	mov	r6,r2
    64d4:	000219c0 	call	219c <__muldf3>
    64d8:	180b883a 	mov	r5,r3
    64dc:	a80f883a 	mov	r7,r21
    64e0:	1009883a 	mov	r4,r2
    64e4:	a00d883a 	mov	r6,r20
    64e8:	000afb40 	call	afb4 <__gedf2>
    64ec:	103cb80e 	bge	r2,zero,57d0 <_dtoa_r+0x558>
    64f0:	0027883a 	mov	r19,zero
    64f4:	0025883a 	mov	r18,zero
    64f8:	003fc606 	br	6414 <_dtoa_r+0x119c>
    64fc:	99400117 	ldw	r5,4(r19)
    6500:	d9001617 	ldw	r4,88(sp)
    6504:	00088540 	call	8854 <_Balloc>
    6508:	99800417 	ldw	r6,16(r19)
    650c:	11000304 	addi	r4,r2,12
    6510:	99400304 	addi	r5,r19,12
    6514:	318d883a 	add	r6,r6,r6
    6518:	318d883a 	add	r6,r6,r6
    651c:	31800204 	addi	r6,r6,8
    6520:	1023883a 	mov	r17,r2
    6524:	0002d240 	call	2d24 <memcpy>
    6528:	d9001617 	ldw	r4,88(sp)
    652c:	880b883a 	mov	r5,r17
    6530:	01800044 	movi	r6,1
    6534:	0008c180 	call	8c18 <__lshift>
    6538:	100b883a 	mov	r5,r2
    653c:	003d9c06 	br	5bb0 <_dtoa_r+0x938>
    6540:	00800e44 	movi	r2,57
    6544:	b8807026 	beq	r23,r2,6708 <_dtoa_r+0x1490>
    6548:	b8800044 	addi	r2,r23,1
    654c:	b7000044 	addi	fp,r22,1
    6550:	b0800005 	stb	r2,0(r22)
    6554:	003e4106 	br	5e5c <_dtoa_r+0xbe4>
    6558:	d8800317 	ldw	r2,12(sp)
    655c:	01800074 	movhi	r6,1
    6560:	318a8404 	addi	r6,r6,10768
    6564:	b009883a 	mov	r4,r22
    6568:	100e90fa 	slli	r7,r2,3
    656c:	b80b883a 	mov	r5,r23
    6570:	398f883a 	add	r7,r7,r6
    6574:	38bffe17 	ldw	r2,-8(r7)
    6578:	d9800517 	ldw	r6,20(sp)
    657c:	38ffff17 	ldw	r3,-4(r7)
    6580:	37000044 	addi	fp,r6,1
    6584:	180f883a 	mov	r7,r3
    6588:	100d883a 	mov	r6,r2
    658c:	000219c0 	call	219c <__muldf3>
    6590:	a80b883a 	mov	r5,r21
    6594:	a009883a 	mov	r4,r20
    6598:	182f883a 	mov	r23,r3
    659c:	102d883a 	mov	r22,r2
    65a0:	000b1bc0 	call	b1bc <__fixdfsi>
    65a4:	1009883a 	mov	r4,r2
    65a8:	1027883a 	mov	r19,r2
    65ac:	000b0c40 	call	b0c4 <__floatsidf>
    65b0:	a80b883a 	mov	r5,r21
    65b4:	a009883a 	mov	r4,r20
    65b8:	180f883a 	mov	r7,r3
    65bc:	100d883a 	mov	r6,r2
    65c0:	00020a80 	call	20a8 <__subdf3>
    65c4:	180b883a 	mov	r5,r3
    65c8:	d8c00517 	ldw	r3,20(sp)
    65cc:	9cc00c04 	addi	r19,r19,48
    65d0:	1009883a 	mov	r4,r2
    65d4:	1cc00005 	stb	r19,0(r3)
    65d8:	2021883a 	mov	r16,r4
    65dc:	d9000317 	ldw	r4,12(sp)
    65e0:	00800044 	movi	r2,1
    65e4:	2823883a 	mov	r17,r5
    65e8:	20802226 	beq	r4,r2,6674 <_dtoa_r+0x13fc>
    65ec:	1029883a 	mov	r20,r2
    65f0:	0005883a 	mov	r2,zero
    65f4:	00d00934 	movhi	r3,16420
    65f8:	180f883a 	mov	r7,r3
    65fc:	100d883a 	mov	r6,r2
    6600:	880b883a 	mov	r5,r17
    6604:	8009883a 	mov	r4,r16
    6608:	000219c0 	call	219c <__muldf3>
    660c:	180b883a 	mov	r5,r3
    6610:	1009883a 	mov	r4,r2
    6614:	1823883a 	mov	r17,r3
    6618:	1021883a 	mov	r16,r2
    661c:	000b1bc0 	call	b1bc <__fixdfsi>
    6620:	1009883a 	mov	r4,r2
    6624:	102b883a 	mov	r21,r2
    6628:	000b0c40 	call	b0c4 <__floatsidf>
    662c:	880b883a 	mov	r5,r17
    6630:	8009883a 	mov	r4,r16
    6634:	180f883a 	mov	r7,r3
    6638:	100d883a 	mov	r6,r2
    663c:	00020a80 	call	20a8 <__subdf3>
    6640:	180b883a 	mov	r5,r3
    6644:	d8c00517 	ldw	r3,20(sp)
    6648:	1009883a 	mov	r4,r2
    664c:	ad400c04 	addi	r21,r21,48
    6650:	1d05883a 	add	r2,r3,r20
    6654:	15400005 	stb	r21,0(r2)
    6658:	2021883a 	mov	r16,r4
    665c:	d9000317 	ldw	r4,12(sp)
    6660:	a5000044 	addi	r20,r20,1
    6664:	2823883a 	mov	r17,r5
    6668:	a13fe11e 	bne	r20,r4,65f0 <_dtoa_r+0x1378>
    666c:	e505883a 	add	r2,fp,r20
    6670:	173fffc4 	addi	fp,r2,-1
    6674:	0025883a 	mov	r18,zero
    6678:	04cff834 	movhi	r19,16352
    667c:	b009883a 	mov	r4,r22
    6680:	b80b883a 	mov	r5,r23
    6684:	900d883a 	mov	r6,r18
    6688:	980f883a 	mov	r7,r19
    668c:	00021280 	call	2128 <__adddf3>
    6690:	180b883a 	mov	r5,r3
    6694:	1009883a 	mov	r4,r2
    6698:	800d883a 	mov	r6,r16
    669c:	880f883a 	mov	r7,r17
    66a0:	000b03c0 	call	b03c <__ltdf2>
    66a4:	103cab16 	blt	r2,zero,5954 <_dtoa_r+0x6dc>
    66a8:	0009883a 	mov	r4,zero
    66ac:	980b883a 	mov	r5,r19
    66b0:	b80f883a 	mov	r7,r23
    66b4:	b00d883a 	mov	r6,r22
    66b8:	00020a80 	call	20a8 <__subdf3>
    66bc:	180b883a 	mov	r5,r3
    66c0:	880f883a 	mov	r7,r17
    66c4:	1009883a 	mov	r4,r2
    66c8:	800d883a 	mov	r6,r16
    66cc:	000af2c0 	call	af2c <__gtdf2>
    66d0:	00bc470e 	bge	zero,r2,57f0 <_dtoa_r+0x578>
    66d4:	00c00c04 	movi	r3,48
    66d8:	e73fffc4 	addi	fp,fp,-1
    66dc:	e0800007 	ldb	r2,0(fp)
    66e0:	10fffd26 	beq	r2,r3,66d8 <_dtoa_r+0x1460>
    66e4:	d9800417 	ldw	r6,16(sp)
    66e8:	e7000044 	addi	fp,fp,1
    66ec:	d9800d15 	stw	r6,52(sp)
    66f0:	003cab06 	br	59a0 <_dtoa_r+0x728>
    66f4:	d8c00f17 	ldw	r3,60(sp)
    66f8:	d9001117 	ldw	r4,68(sp)
    66fc:	20e1c83a 	sub	r16,r4,r3
    6700:	0007883a 	mov	r3,zero
    6704:	003d9b06 	br	5d74 <_dtoa_r+0xafc>
    6708:	00800e44 	movi	r2,57
    670c:	b0800005 	stb	r2,0(r22)
    6710:	b5800044 	addi	r22,r22,1
    6714:	003dc106 	br	5e1c <_dtoa_r+0xba4>
    6718:	05800084 	movi	r22,2
    671c:	003bf706 	br	56fc <_dtoa_r+0x484>
    6720:	d9000f17 	ldw	r4,60(sp)
    6724:	013c000e 	bge	zero,r4,5728 <_dtoa_r+0x4b0>
    6728:	d9800e17 	ldw	r6,56(sp)
    672c:	01bc300e 	bge	zero,r6,57f0 <_dtoa_r+0x578>
    6730:	0005883a 	mov	r2,zero
    6734:	00d00934 	movhi	r3,16420
    6738:	a80b883a 	mov	r5,r21
    673c:	180f883a 	mov	r7,r3
    6740:	a009883a 	mov	r4,r20
    6744:	100d883a 	mov	r6,r2
    6748:	000219c0 	call	219c <__muldf3>
    674c:	b1000044 	addi	r4,r22,1
    6750:	1021883a 	mov	r16,r2
    6754:	1823883a 	mov	r17,r3
    6758:	000b0c40 	call	b0c4 <__floatsidf>
    675c:	880b883a 	mov	r5,r17
    6760:	8009883a 	mov	r4,r16
    6764:	180f883a 	mov	r7,r3
    6768:	100d883a 	mov	r6,r2
    676c:	000219c0 	call	219c <__muldf3>
    6770:	0011883a 	mov	r8,zero
    6774:	02500734 	movhi	r9,16412
    6778:	180b883a 	mov	r5,r3
    677c:	480f883a 	mov	r7,r9
    6780:	1009883a 	mov	r4,r2
    6784:	400d883a 	mov	r6,r8
    6788:	00021280 	call	2128 <__adddf3>
    678c:	102d883a 	mov	r22,r2
    6790:	00bf3034 	movhi	r2,64704
    6794:	10ef883a 	add	r23,r2,r3
    6798:	d8800d17 	ldw	r2,52(sp)
    679c:	d8c00e17 	ldw	r3,56(sp)
    67a0:	8029883a 	mov	r20,r16
    67a4:	10bfffc4 	addi	r2,r2,-1
    67a8:	882b883a 	mov	r21,r17
    67ac:	d8800415 	stw	r2,16(sp)
    67b0:	d8c00315 	stw	r3,12(sp)
    67b4:	003e8306 	br	61c4 <_dtoa_r+0xf4c>
    67b8:	d8800117 	ldw	r2,4(sp)
    67bc:	dc001117 	ldw	r16,68(sp)
    67c0:	dc801017 	ldw	r18,64(sp)
    67c4:	00c00d84 	movi	r3,54
    67c8:	1887c83a 	sub	r3,r3,r2
    67cc:	003d6906 	br	5d74 <_dtoa_r+0xafc>
    67d0:	01800044 	movi	r6,1
    67d4:	3021883a 	mov	r16,r6
    67d8:	d9800f15 	stw	r6,60(sp)
    67dc:	d9802615 	stw	r6,152(sp)
    67e0:	d9800e15 	stw	r6,56(sp)
    67e4:	003b9306 	br	5634 <_dtoa_r+0x3bc>
    67e8:	b021883a 	mov	r16,r22
    67ec:	dd800f15 	stw	r22,60(sp)
    67f0:	003b9006 	br	5634 <_dtoa_r+0x3bc>
    67f4:	103e221e 	bne	r2,zero,6080 <_dtoa_r+0xe08>
    67f8:	b880004c 	andi	r2,r23,1
    67fc:	1005003a 	cmpeq	r2,r2,zero
    6800:	103e1f1e 	bne	r2,zero,6080 <_dtoa_r+0xe08>
    6804:	003e1b06 	br	6074 <_dtoa_r+0xdfc>
    6808:	d9001617 	ldw	r4,88(sp)
    680c:	980b883a 	mov	r5,r19
    6810:	01800284 	movi	r6,10
    6814:	000f883a 	mov	r7,zero
    6818:	0008f880 	call	8f88 <__multadd>
    681c:	d8c00e17 	ldw	r3,56(sp)
    6820:	1027883a 	mov	r19,r2
    6824:	d8c00f15 	stw	r3,60(sp)
    6828:	003cd306 	br	5b78 <_dtoa_r+0x900>

0000682c <_fflush_r>:
    682c:	defffb04 	addi	sp,sp,-20
    6830:	dcc00315 	stw	r19,12(sp)
    6834:	dc800215 	stw	r18,8(sp)
    6838:	dfc00415 	stw	ra,16(sp)
    683c:	dc400115 	stw	r17,4(sp)
    6840:	dc000015 	stw	r16,0(sp)
    6844:	2027883a 	mov	r19,r4
    6848:	2825883a 	mov	r18,r5
    684c:	20000226 	beq	r4,zero,6858 <_fflush_r+0x2c>
    6850:	20800e17 	ldw	r2,56(r4)
    6854:	10005626 	beq	r2,zero,69b0 <_fflush_r+0x184>
    6858:	9100030b 	ldhu	r4,12(r18)
    685c:	20ffffcc 	andi	r3,r4,65535
    6860:	18e0001c 	xori	r3,r3,32768
    6864:	18e00004 	addi	r3,r3,-32768
    6868:	1880020c 	andi	r2,r3,8
    686c:	1000261e 	bne	r2,zero,6908 <_fflush_r+0xdc>
    6870:	90c00117 	ldw	r3,4(r18)
    6874:	20820014 	ori	r2,r4,2048
    6878:	9080030d 	sth	r2,12(r18)
    687c:	1009883a 	mov	r4,r2
    6880:	00c0400e 	bge	zero,r3,6984 <_fflush_r+0x158>
    6884:	92000a17 	ldw	r8,40(r18)
    6888:	40004026 	beq	r8,zero,698c <_fflush_r+0x160>
    688c:	2084000c 	andi	r2,r4,4096
    6890:	10005326 	beq	r2,zero,69e0 <_fflush_r+0x1b4>
    6894:	94001417 	ldw	r16,80(r18)
    6898:	9080030b 	ldhu	r2,12(r18)
    689c:	1080010c 	andi	r2,r2,4
    68a0:	1000481e 	bne	r2,zero,69c4 <_fflush_r+0x198>
    68a4:	91400717 	ldw	r5,28(r18)
    68a8:	9809883a 	mov	r4,r19
    68ac:	800d883a 	mov	r6,r16
    68b0:	000f883a 	mov	r7,zero
    68b4:	403ee83a 	callr	r8
    68b8:	8080261e 	bne	r16,r2,6954 <_fflush_r+0x128>
    68bc:	9080030b 	ldhu	r2,12(r18)
    68c0:	91000417 	ldw	r4,16(r18)
    68c4:	90000115 	stw	zero,4(r18)
    68c8:	10bdffcc 	andi	r2,r2,63487
    68cc:	10ffffcc 	andi	r3,r2,65535
    68d0:	18c4000c 	andi	r3,r3,4096
    68d4:	9080030d 	sth	r2,12(r18)
    68d8:	91000015 	stw	r4,0(r18)
    68dc:	18002b26 	beq	r3,zero,698c <_fflush_r+0x160>
    68e0:	0007883a 	mov	r3,zero
    68e4:	1805883a 	mov	r2,r3
    68e8:	94001415 	stw	r16,80(r18)
    68ec:	dfc00417 	ldw	ra,16(sp)
    68f0:	dcc00317 	ldw	r19,12(sp)
    68f4:	dc800217 	ldw	r18,8(sp)
    68f8:	dc400117 	ldw	r17,4(sp)
    68fc:	dc000017 	ldw	r16,0(sp)
    6900:	dec00504 	addi	sp,sp,20
    6904:	f800283a 	ret
    6908:	94400417 	ldw	r17,16(r18)
    690c:	88001f26 	beq	r17,zero,698c <_fflush_r+0x160>
    6910:	90800017 	ldw	r2,0(r18)
    6914:	18c000cc 	andi	r3,r3,3
    6918:	94400015 	stw	r17,0(r18)
    691c:	1461c83a 	sub	r16,r2,r17
    6920:	18002526 	beq	r3,zero,69b8 <_fflush_r+0x18c>
    6924:	0005883a 	mov	r2,zero
    6928:	90800215 	stw	r2,8(r18)
    692c:	0400170e 	bge	zero,r16,698c <_fflush_r+0x160>
    6930:	90c00917 	ldw	r3,36(r18)
    6934:	91400717 	ldw	r5,28(r18)
    6938:	880d883a 	mov	r6,r17
    693c:	800f883a 	mov	r7,r16
    6940:	9809883a 	mov	r4,r19
    6944:	183ee83a 	callr	r3
    6948:	88a3883a 	add	r17,r17,r2
    694c:	80a1c83a 	sub	r16,r16,r2
    6950:	00bff616 	blt	zero,r2,692c <_fflush_r+0x100>
    6954:	9080030b 	ldhu	r2,12(r18)
    6958:	00ffffc4 	movi	r3,-1
    695c:	10801014 	ori	r2,r2,64
    6960:	9080030d 	sth	r2,12(r18)
    6964:	1805883a 	mov	r2,r3
    6968:	dfc00417 	ldw	ra,16(sp)
    696c:	dcc00317 	ldw	r19,12(sp)
    6970:	dc800217 	ldw	r18,8(sp)
    6974:	dc400117 	ldw	r17,4(sp)
    6978:	dc000017 	ldw	r16,0(sp)
    697c:	dec00504 	addi	sp,sp,20
    6980:	f800283a 	ret
    6984:	90800f17 	ldw	r2,60(r18)
    6988:	00bfbe16 	blt	zero,r2,6884 <_fflush_r+0x58>
    698c:	0007883a 	mov	r3,zero
    6990:	1805883a 	mov	r2,r3
    6994:	dfc00417 	ldw	ra,16(sp)
    6998:	dcc00317 	ldw	r19,12(sp)
    699c:	dc800217 	ldw	r18,8(sp)
    69a0:	dc400117 	ldw	r17,4(sp)
    69a4:	dc000017 	ldw	r16,0(sp)
    69a8:	dec00504 	addi	sp,sp,20
    69ac:	f800283a 	ret
    69b0:	0006ac40 	call	6ac4 <__sinit>
    69b4:	003fa806 	br	6858 <_fflush_r+0x2c>
    69b8:	90800517 	ldw	r2,20(r18)
    69bc:	90800215 	stw	r2,8(r18)
    69c0:	003fda06 	br	692c <_fflush_r+0x100>
    69c4:	90800117 	ldw	r2,4(r18)
    69c8:	90c00c17 	ldw	r3,48(r18)
    69cc:	80a1c83a 	sub	r16,r16,r2
    69d0:	183fb426 	beq	r3,zero,68a4 <_fflush_r+0x78>
    69d4:	90800f17 	ldw	r2,60(r18)
    69d8:	80a1c83a 	sub	r16,r16,r2
    69dc:	003fb106 	br	68a4 <_fflush_r+0x78>
    69e0:	91400717 	ldw	r5,28(r18)
    69e4:	9809883a 	mov	r4,r19
    69e8:	000d883a 	mov	r6,zero
    69ec:	01c00044 	movi	r7,1
    69f0:	403ee83a 	callr	r8
    69f4:	1021883a 	mov	r16,r2
    69f8:	00bfffc4 	movi	r2,-1
    69fc:	80800226 	beq	r16,r2,6a08 <_fflush_r+0x1dc>
    6a00:	92000a17 	ldw	r8,40(r18)
    6a04:	003fa406 	br	6898 <_fflush_r+0x6c>
    6a08:	98c00017 	ldw	r3,0(r19)
    6a0c:	00800744 	movi	r2,29
    6a10:	18bfde26 	beq	r3,r2,698c <_fflush_r+0x160>
    6a14:	9080030b 	ldhu	r2,12(r18)
    6a18:	8007883a 	mov	r3,r16
    6a1c:	10801014 	ori	r2,r2,64
    6a20:	9080030d 	sth	r2,12(r18)
    6a24:	003fcf06 	br	6964 <_fflush_r+0x138>

00006a28 <fflush>:
    6a28:	01400034 	movhi	r5,0
    6a2c:	295a0b04 	addi	r5,r5,26668
    6a30:	2007883a 	mov	r3,r4
    6a34:	20000526 	beq	r4,zero,6a4c <fflush+0x24>
    6a38:	00800074 	movhi	r2,1
    6a3c:	1092ee04 	addi	r2,r2,19384
    6a40:	11000017 	ldw	r4,0(r2)
    6a44:	180b883a 	mov	r5,r3
    6a48:	000682c1 	jmpi	682c <_fflush_r>
    6a4c:	00800074 	movhi	r2,1
    6a50:	1092ef04 	addi	r2,r2,19388
    6a54:	11000017 	ldw	r4,0(r2)
    6a58:	00075f81 	jmpi	75f8 <_fwalk_reent>

00006a5c <std>:
    6a5c:	00800074 	movhi	r2,1
    6a60:	10a66704 	addi	r2,r2,-26212
    6a64:	20800b15 	stw	r2,44(r4)
    6a68:	00800074 	movhi	r2,1
    6a6c:	10a6a204 	addi	r2,r2,-25976
    6a70:	20800815 	stw	r2,32(r4)
    6a74:	00c00074 	movhi	r3,1
    6a78:	18e68304 	addi	r3,r3,-26100
    6a7c:	00800074 	movhi	r2,1
    6a80:	10a66904 	addi	r2,r2,-26204
    6a84:	2140030d 	sth	r5,12(r4)
    6a88:	2180038d 	sth	r6,14(r4)
    6a8c:	20c00915 	stw	r3,36(r4)
    6a90:	20800a15 	stw	r2,40(r4)
    6a94:	20000015 	stw	zero,0(r4)
    6a98:	20000115 	stw	zero,4(r4)
    6a9c:	20000215 	stw	zero,8(r4)
    6aa0:	20000415 	stw	zero,16(r4)
    6aa4:	20000515 	stw	zero,20(r4)
    6aa8:	20000615 	stw	zero,24(r4)
    6aac:	21000715 	stw	r4,28(r4)
    6ab0:	f800283a 	ret

00006ab4 <__sfp_lock_acquire>:
    6ab4:	f800283a 	ret

00006ab8 <__sfp_lock_release>:
    6ab8:	f800283a 	ret

00006abc <__sinit_lock_acquire>:
    6abc:	f800283a 	ret

00006ac0 <__sinit_lock_release>:
    6ac0:	f800283a 	ret

00006ac4 <__sinit>:
    6ac4:	20800e17 	ldw	r2,56(r4)
    6ac8:	defffd04 	addi	sp,sp,-12
    6acc:	dc400115 	stw	r17,4(sp)
    6ad0:	dc000015 	stw	r16,0(sp)
    6ad4:	dfc00215 	stw	ra,8(sp)
    6ad8:	04400044 	movi	r17,1
    6adc:	01400104 	movi	r5,4
    6ae0:	000d883a 	mov	r6,zero
    6ae4:	2021883a 	mov	r16,r4
    6ae8:	2200bb04 	addi	r8,r4,748
    6aec:	200f883a 	mov	r7,r4
    6af0:	10000526 	beq	r2,zero,6b08 <__sinit+0x44>
    6af4:	dfc00217 	ldw	ra,8(sp)
    6af8:	dc400117 	ldw	r17,4(sp)
    6afc:	dc000017 	ldw	r16,0(sp)
    6b00:	dec00304 	addi	sp,sp,12
    6b04:	f800283a 	ret
    6b08:	21000117 	ldw	r4,4(r4)
    6b0c:	00800034 	movhi	r2,0
    6b10:	109aea04 	addi	r2,r2,27560
    6b14:	00c000c4 	movi	r3,3
    6b18:	80800f15 	stw	r2,60(r16)
    6b1c:	80c0b915 	stw	r3,740(r16)
    6b20:	8200ba15 	stw	r8,744(r16)
    6b24:	84400e15 	stw	r17,56(r16)
    6b28:	8000b815 	stw	zero,736(r16)
    6b2c:	0006a5c0 	call	6a5c <std>
    6b30:	81000217 	ldw	r4,8(r16)
    6b34:	880d883a 	mov	r6,r17
    6b38:	800f883a 	mov	r7,r16
    6b3c:	01400284 	movi	r5,10
    6b40:	0006a5c0 	call	6a5c <std>
    6b44:	81000317 	ldw	r4,12(r16)
    6b48:	800f883a 	mov	r7,r16
    6b4c:	01400484 	movi	r5,18
    6b50:	01800084 	movi	r6,2
    6b54:	dfc00217 	ldw	ra,8(sp)
    6b58:	dc400117 	ldw	r17,4(sp)
    6b5c:	dc000017 	ldw	r16,0(sp)
    6b60:	dec00304 	addi	sp,sp,12
    6b64:	0006a5c1 	jmpi	6a5c <std>

00006b68 <__fp_lock>:
    6b68:	0005883a 	mov	r2,zero
    6b6c:	f800283a 	ret

00006b70 <__fp_unlock>:
    6b70:	0005883a 	mov	r2,zero
    6b74:	f800283a 	ret

00006b78 <__fp_unlock_all>:
    6b78:	00800074 	movhi	r2,1
    6b7c:	1092ee04 	addi	r2,r2,19384
    6b80:	11000017 	ldw	r4,0(r2)
    6b84:	01400034 	movhi	r5,0
    6b88:	295adc04 	addi	r5,r5,27504
    6b8c:	00076c01 	jmpi	76c0 <_fwalk>

00006b90 <__fp_lock_all>:
    6b90:	00800074 	movhi	r2,1
    6b94:	1092ee04 	addi	r2,r2,19384
    6b98:	11000017 	ldw	r4,0(r2)
    6b9c:	01400034 	movhi	r5,0
    6ba0:	295ada04 	addi	r5,r5,27496
    6ba4:	00076c01 	jmpi	76c0 <_fwalk>

00006ba8 <_cleanup_r>:
    6ba8:	01400074 	movhi	r5,1
    6bac:	29679404 	addi	r5,r5,-25008
    6bb0:	00076c01 	jmpi	76c0 <_fwalk>

00006bb4 <_cleanup>:
    6bb4:	00800074 	movhi	r2,1
    6bb8:	1092ef04 	addi	r2,r2,19388
    6bbc:	11000017 	ldw	r4,0(r2)
    6bc0:	0006ba81 	jmpi	6ba8 <_cleanup_r>

00006bc4 <__sfmoreglue>:
    6bc4:	defffc04 	addi	sp,sp,-16
    6bc8:	dc400115 	stw	r17,4(sp)
    6bcc:	2c401724 	muli	r17,r5,92
    6bd0:	dc800215 	stw	r18,8(sp)
    6bd4:	2825883a 	mov	r18,r5
    6bd8:	89400304 	addi	r5,r17,12
    6bdc:	dc000015 	stw	r16,0(sp)
    6be0:	dfc00315 	stw	ra,12(sp)
    6be4:	00079d00 	call	79d0 <_malloc_r>
    6be8:	0021883a 	mov	r16,zero
    6bec:	880d883a 	mov	r6,r17
    6bf0:	000b883a 	mov	r5,zero
    6bf4:	10000626 	beq	r2,zero,6c10 <__sfmoreglue+0x4c>
    6bf8:	11000304 	addi	r4,r2,12
    6bfc:	14800115 	stw	r18,4(r2)
    6c00:	10000015 	stw	zero,0(r2)
    6c04:	11000215 	stw	r4,8(r2)
    6c08:	1021883a 	mov	r16,r2
    6c0c:	0002dc40 	call	2dc4 <memset>
    6c10:	8005883a 	mov	r2,r16
    6c14:	dfc00317 	ldw	ra,12(sp)
    6c18:	dc800217 	ldw	r18,8(sp)
    6c1c:	dc400117 	ldw	r17,4(sp)
    6c20:	dc000017 	ldw	r16,0(sp)
    6c24:	dec00404 	addi	sp,sp,16
    6c28:	f800283a 	ret

00006c2c <__sfp>:
    6c2c:	defffd04 	addi	sp,sp,-12
    6c30:	00800074 	movhi	r2,1
    6c34:	1092ef04 	addi	r2,r2,19388
    6c38:	dc000015 	stw	r16,0(sp)
    6c3c:	14000017 	ldw	r16,0(r2)
    6c40:	dc400115 	stw	r17,4(sp)
    6c44:	dfc00215 	stw	ra,8(sp)
    6c48:	80800e17 	ldw	r2,56(r16)
    6c4c:	2023883a 	mov	r17,r4
    6c50:	10002626 	beq	r2,zero,6cec <__sfp+0xc0>
    6c54:	8400b804 	addi	r16,r16,736
    6c58:	80800117 	ldw	r2,4(r16)
    6c5c:	81000217 	ldw	r4,8(r16)
    6c60:	10ffffc4 	addi	r3,r2,-1
    6c64:	18000916 	blt	r3,zero,6c8c <__sfp+0x60>
    6c68:	2080030f 	ldh	r2,12(r4)
    6c6c:	10000b26 	beq	r2,zero,6c9c <__sfp+0x70>
    6c70:	017fffc4 	movi	r5,-1
    6c74:	00000206 	br	6c80 <__sfp+0x54>
    6c78:	2080030f 	ldh	r2,12(r4)
    6c7c:	10000726 	beq	r2,zero,6c9c <__sfp+0x70>
    6c80:	18ffffc4 	addi	r3,r3,-1
    6c84:	21001704 	addi	r4,r4,92
    6c88:	197ffb1e 	bne	r3,r5,6c78 <__sfp+0x4c>
    6c8c:	80800017 	ldw	r2,0(r16)
    6c90:	10001926 	beq	r2,zero,6cf8 <__sfp+0xcc>
    6c94:	1021883a 	mov	r16,r2
    6c98:	003fef06 	br	6c58 <__sfp+0x2c>
    6c9c:	00bfffc4 	movi	r2,-1
    6ca0:	00c00044 	movi	r3,1
    6ca4:	2080038d 	sth	r2,14(r4)
    6ca8:	20c0030d 	sth	r3,12(r4)
    6cac:	20000015 	stw	zero,0(r4)
    6cb0:	20000215 	stw	zero,8(r4)
    6cb4:	20000115 	stw	zero,4(r4)
    6cb8:	20000415 	stw	zero,16(r4)
    6cbc:	20000515 	stw	zero,20(r4)
    6cc0:	20000615 	stw	zero,24(r4)
    6cc4:	20000c15 	stw	zero,48(r4)
    6cc8:	20000d15 	stw	zero,52(r4)
    6ccc:	20001115 	stw	zero,68(r4)
    6cd0:	20001215 	stw	zero,72(r4)
    6cd4:	2005883a 	mov	r2,r4
    6cd8:	dfc00217 	ldw	ra,8(sp)
    6cdc:	dc400117 	ldw	r17,4(sp)
    6ce0:	dc000017 	ldw	r16,0(sp)
    6ce4:	dec00304 	addi	sp,sp,12
    6ce8:	f800283a 	ret
    6cec:	8009883a 	mov	r4,r16
    6cf0:	0006ac40 	call	6ac4 <__sinit>
    6cf4:	003fd706 	br	6c54 <__sfp+0x28>
    6cf8:	8809883a 	mov	r4,r17
    6cfc:	01400104 	movi	r5,4
    6d00:	0006bc40 	call	6bc4 <__sfmoreglue>
    6d04:	80800015 	stw	r2,0(r16)
    6d08:	103fe21e 	bne	r2,zero,6c94 <__sfp+0x68>
    6d0c:	00800304 	movi	r2,12
    6d10:	0009883a 	mov	r4,zero
    6d14:	88800015 	stw	r2,0(r17)
    6d18:	003fee06 	br	6cd4 <__sfp+0xa8>

00006d1c <_malloc_trim_r>:
    6d1c:	defffb04 	addi	sp,sp,-20
    6d20:	dcc00315 	stw	r19,12(sp)
    6d24:	04c00074 	movhi	r19,1
    6d28:	9ccc7d04 	addi	r19,r19,12788
    6d2c:	dc800215 	stw	r18,8(sp)
    6d30:	dc400115 	stw	r17,4(sp)
    6d34:	dc000015 	stw	r16,0(sp)
    6d38:	2823883a 	mov	r17,r5
    6d3c:	2025883a 	mov	r18,r4
    6d40:	dfc00415 	stw	ra,16(sp)
    6d44:	000be800 	call	be80 <__malloc_lock>
    6d48:	98800217 	ldw	r2,8(r19)
    6d4c:	9009883a 	mov	r4,r18
    6d50:	000b883a 	mov	r5,zero
    6d54:	10c00117 	ldw	r3,4(r2)
    6d58:	00bfff04 	movi	r2,-4
    6d5c:	18a0703a 	and	r16,r3,r2
    6d60:	8463c83a 	sub	r17,r16,r17
    6d64:	8c43fbc4 	addi	r17,r17,4079
    6d68:	8822d33a 	srli	r17,r17,12
    6d6c:	0083ffc4 	movi	r2,4095
    6d70:	8c7fffc4 	addi	r17,r17,-1
    6d74:	8822933a 	slli	r17,r17,12
    6d78:	1440060e 	bge	r2,r17,6d94 <_malloc_trim_r+0x78>
    6d7c:	000992c0 	call	992c <_sbrk_r>
    6d80:	98c00217 	ldw	r3,8(r19)
    6d84:	9009883a 	mov	r4,r18
    6d88:	044bc83a 	sub	r5,zero,r17
    6d8c:	80c7883a 	add	r3,r16,r3
    6d90:	10c00926 	beq	r2,r3,6db8 <_malloc_trim_r+0x9c>
    6d94:	000bea00 	call	bea0 <__malloc_unlock>
    6d98:	0005883a 	mov	r2,zero
    6d9c:	dfc00417 	ldw	ra,16(sp)
    6da0:	dcc00317 	ldw	r19,12(sp)
    6da4:	dc800217 	ldw	r18,8(sp)
    6da8:	dc400117 	ldw	r17,4(sp)
    6dac:	dc000017 	ldw	r16,0(sp)
    6db0:	dec00504 	addi	sp,sp,20
    6db4:	f800283a 	ret
    6db8:	9009883a 	mov	r4,r18
    6dbc:	000992c0 	call	992c <_sbrk_r>
    6dc0:	844dc83a 	sub	r6,r16,r17
    6dc4:	00ffffc4 	movi	r3,-1
    6dc8:	9009883a 	mov	r4,r18
    6dcc:	000b883a 	mov	r5,zero
    6dd0:	01c00074 	movhi	r7,1
    6dd4:	39db5904 	addi	r7,r7,28004
    6dd8:	31800054 	ori	r6,r6,1
    6ddc:	10c00926 	beq	r2,r3,6e04 <_malloc_trim_r+0xe8>
    6de0:	38800017 	ldw	r2,0(r7)
    6de4:	98c00217 	ldw	r3,8(r19)
    6de8:	9009883a 	mov	r4,r18
    6dec:	1445c83a 	sub	r2,r2,r17
    6df0:	38800015 	stw	r2,0(r7)
    6df4:	19800115 	stw	r6,4(r3)
    6df8:	000bea00 	call	bea0 <__malloc_unlock>
    6dfc:	00800044 	movi	r2,1
    6e00:	003fe606 	br	6d9c <_malloc_trim_r+0x80>
    6e04:	000992c0 	call	992c <_sbrk_r>
    6e08:	99800217 	ldw	r6,8(r19)
    6e0c:	100f883a 	mov	r7,r2
    6e10:	9009883a 	mov	r4,r18
    6e14:	1187c83a 	sub	r3,r2,r6
    6e18:	008003c4 	movi	r2,15
    6e1c:	19400054 	ori	r5,r3,1
    6e20:	10ffdc0e 	bge	r2,r3,6d94 <_malloc_trim_r+0x78>
    6e24:	00800074 	movhi	r2,1
    6e28:	1092f304 	addi	r2,r2,19404
    6e2c:	10c00017 	ldw	r3,0(r2)
    6e30:	00800074 	movhi	r2,1
    6e34:	109b5904 	addi	r2,r2,28004
    6e38:	31400115 	stw	r5,4(r6)
    6e3c:	38c7c83a 	sub	r3,r7,r3
    6e40:	10c00015 	stw	r3,0(r2)
    6e44:	003fd306 	br	6d94 <_malloc_trim_r+0x78>

00006e48 <_free_r>:
    6e48:	defffd04 	addi	sp,sp,-12
    6e4c:	dc400115 	stw	r17,4(sp)
    6e50:	dc000015 	stw	r16,0(sp)
    6e54:	dfc00215 	stw	ra,8(sp)
    6e58:	2821883a 	mov	r16,r5
    6e5c:	2023883a 	mov	r17,r4
    6e60:	28005a26 	beq	r5,zero,6fcc <_free_r+0x184>
    6e64:	000be800 	call	be80 <__malloc_lock>
    6e68:	823ffe04 	addi	r8,r16,-8
    6e6c:	41400117 	ldw	r5,4(r8)
    6e70:	00bfff84 	movi	r2,-2
    6e74:	02800074 	movhi	r10,1
    6e78:	528c7d04 	addi	r10,r10,12788
    6e7c:	288e703a 	and	r7,r5,r2
    6e80:	41cd883a 	add	r6,r8,r7
    6e84:	30c00117 	ldw	r3,4(r6)
    6e88:	51000217 	ldw	r4,8(r10)
    6e8c:	00bfff04 	movi	r2,-4
    6e90:	1892703a 	and	r9,r3,r2
    6e94:	5017883a 	mov	r11,r10
    6e98:	31006726 	beq	r6,r4,7038 <_free_r+0x1f0>
    6e9c:	2880004c 	andi	r2,r5,1
    6ea0:	1005003a 	cmpeq	r2,r2,zero
    6ea4:	32400115 	stw	r9,4(r6)
    6ea8:	10001a1e 	bne	r2,zero,6f14 <_free_r+0xcc>
    6eac:	000b883a 	mov	r5,zero
    6eb0:	3247883a 	add	r3,r6,r9
    6eb4:	18800117 	ldw	r2,4(r3)
    6eb8:	1080004c 	andi	r2,r2,1
    6ebc:	1000231e 	bne	r2,zero,6f4c <_free_r+0x104>
    6ec0:	280ac03a 	cmpne	r5,r5,zero
    6ec4:	3a4f883a 	add	r7,r7,r9
    6ec8:	2800451e 	bne	r5,zero,6fe0 <_free_r+0x198>
    6ecc:	31000217 	ldw	r4,8(r6)
    6ed0:	00800074 	movhi	r2,1
    6ed4:	108c7f04 	addi	r2,r2,12796
    6ed8:	20807b26 	beq	r4,r2,70c8 <_free_r+0x280>
    6edc:	30800317 	ldw	r2,12(r6)
    6ee0:	3a07883a 	add	r3,r7,r8
    6ee4:	19c00015 	stw	r7,0(r3)
    6ee8:	11000215 	stw	r4,8(r2)
    6eec:	20800315 	stw	r2,12(r4)
    6ef0:	38800054 	ori	r2,r7,1
    6ef4:	40800115 	stw	r2,4(r8)
    6ef8:	28001a26 	beq	r5,zero,6f64 <_free_r+0x11c>
    6efc:	8809883a 	mov	r4,r17
    6f00:	dfc00217 	ldw	ra,8(sp)
    6f04:	dc400117 	ldw	r17,4(sp)
    6f08:	dc000017 	ldw	r16,0(sp)
    6f0c:	dec00304 	addi	sp,sp,12
    6f10:	000bea01 	jmpi	bea0 <__malloc_unlock>
    6f14:	80bffe17 	ldw	r2,-8(r16)
    6f18:	50c00204 	addi	r3,r10,8
    6f1c:	4091c83a 	sub	r8,r8,r2
    6f20:	41000217 	ldw	r4,8(r8)
    6f24:	388f883a 	add	r7,r7,r2
    6f28:	20c06126 	beq	r4,r3,70b0 <_free_r+0x268>
    6f2c:	40800317 	ldw	r2,12(r8)
    6f30:	3247883a 	add	r3,r6,r9
    6f34:	000b883a 	mov	r5,zero
    6f38:	11000215 	stw	r4,8(r2)
    6f3c:	20800315 	stw	r2,12(r4)
    6f40:	18800117 	ldw	r2,4(r3)
    6f44:	1080004c 	andi	r2,r2,1
    6f48:	103fdd26 	beq	r2,zero,6ec0 <_free_r+0x78>
    6f4c:	38800054 	ori	r2,r7,1
    6f50:	3a07883a 	add	r3,r7,r8
    6f54:	280ac03a 	cmpne	r5,r5,zero
    6f58:	40800115 	stw	r2,4(r8)
    6f5c:	19c00015 	stw	r7,0(r3)
    6f60:	283fe61e 	bne	r5,zero,6efc <_free_r+0xb4>
    6f64:	00807fc4 	movi	r2,511
    6f68:	11c01f2e 	bgeu	r2,r7,6fe8 <_free_r+0x1a0>
    6f6c:	3806d27a 	srli	r3,r7,9
    6f70:	1800481e 	bne	r3,zero,7094 <_free_r+0x24c>
    6f74:	3804d0fa 	srli	r2,r7,3
    6f78:	100690fa 	slli	r3,r2,3
    6f7c:	1acd883a 	add	r6,r3,r11
    6f80:	31400217 	ldw	r5,8(r6)
    6f84:	31405926 	beq	r6,r5,70ec <_free_r+0x2a4>
    6f88:	28800117 	ldw	r2,4(r5)
    6f8c:	00ffff04 	movi	r3,-4
    6f90:	10c4703a 	and	r2,r2,r3
    6f94:	3880022e 	bgeu	r7,r2,6fa0 <_free_r+0x158>
    6f98:	29400217 	ldw	r5,8(r5)
    6f9c:	317ffa1e 	bne	r6,r5,6f88 <_free_r+0x140>
    6fa0:	29800317 	ldw	r6,12(r5)
    6fa4:	41800315 	stw	r6,12(r8)
    6fa8:	41400215 	stw	r5,8(r8)
    6fac:	8809883a 	mov	r4,r17
    6fb0:	2a000315 	stw	r8,12(r5)
    6fb4:	32000215 	stw	r8,8(r6)
    6fb8:	dfc00217 	ldw	ra,8(sp)
    6fbc:	dc400117 	ldw	r17,4(sp)
    6fc0:	dc000017 	ldw	r16,0(sp)
    6fc4:	dec00304 	addi	sp,sp,12
    6fc8:	000bea01 	jmpi	bea0 <__malloc_unlock>
    6fcc:	dfc00217 	ldw	ra,8(sp)
    6fd0:	dc400117 	ldw	r17,4(sp)
    6fd4:	dc000017 	ldw	r16,0(sp)
    6fd8:	dec00304 	addi	sp,sp,12
    6fdc:	f800283a 	ret
    6fe0:	31000217 	ldw	r4,8(r6)
    6fe4:	003fbd06 	br	6edc <_free_r+0x94>
    6fe8:	3806d0fa 	srli	r3,r7,3
    6fec:	00800044 	movi	r2,1
    6ff0:	51400117 	ldw	r5,4(r10)
    6ff4:	180890fa 	slli	r4,r3,3
    6ff8:	1807d0ba 	srai	r3,r3,2
    6ffc:	22c9883a 	add	r4,r4,r11
    7000:	21800217 	ldw	r6,8(r4)
    7004:	10c4983a 	sll	r2,r2,r3
    7008:	41000315 	stw	r4,12(r8)
    700c:	41800215 	stw	r6,8(r8)
    7010:	288ab03a 	or	r5,r5,r2
    7014:	22000215 	stw	r8,8(r4)
    7018:	8809883a 	mov	r4,r17
    701c:	51400115 	stw	r5,4(r10)
    7020:	32000315 	stw	r8,12(r6)
    7024:	dfc00217 	ldw	ra,8(sp)
    7028:	dc400117 	ldw	r17,4(sp)
    702c:	dc000017 	ldw	r16,0(sp)
    7030:	dec00304 	addi	sp,sp,12
    7034:	000bea01 	jmpi	bea0 <__malloc_unlock>
    7038:	2880004c 	andi	r2,r5,1
    703c:	3a4d883a 	add	r6,r7,r9
    7040:	1000071e 	bne	r2,zero,7060 <_free_r+0x218>
    7044:	80bffe17 	ldw	r2,-8(r16)
    7048:	4091c83a 	sub	r8,r8,r2
    704c:	41000317 	ldw	r4,12(r8)
    7050:	40c00217 	ldw	r3,8(r8)
    7054:	308d883a 	add	r6,r6,r2
    7058:	20c00215 	stw	r3,8(r4)
    705c:	19000315 	stw	r4,12(r3)
    7060:	00800074 	movhi	r2,1
    7064:	1092f204 	addi	r2,r2,19400
    7068:	11000017 	ldw	r4,0(r2)
    706c:	30c00054 	ori	r3,r6,1
    7070:	52000215 	stw	r8,8(r10)
    7074:	40c00115 	stw	r3,4(r8)
    7078:	313fa036 	bltu	r6,r4,6efc <_free_r+0xb4>
    707c:	00800074 	movhi	r2,1
    7080:	109acd04 	addi	r2,r2,27444
    7084:	11400017 	ldw	r5,0(r2)
    7088:	8809883a 	mov	r4,r17
    708c:	0006d1c0 	call	6d1c <_malloc_trim_r>
    7090:	003f9a06 	br	6efc <_free_r+0xb4>
    7094:	00800104 	movi	r2,4
    7098:	10c0072e 	bgeu	r2,r3,70b8 <_free_r+0x270>
    709c:	00800504 	movi	r2,20
    70a0:	10c01936 	bltu	r2,r3,7108 <_free_r+0x2c0>
    70a4:	188016c4 	addi	r2,r3,91
    70a8:	100690fa 	slli	r3,r2,3
    70ac:	003fb306 	br	6f7c <_free_r+0x134>
    70b0:	01400044 	movi	r5,1
    70b4:	003f7e06 	br	6eb0 <_free_r+0x68>
    70b8:	3804d1ba 	srli	r2,r7,6
    70bc:	10800e04 	addi	r2,r2,56
    70c0:	100690fa 	slli	r3,r2,3
    70c4:	003fad06 	br	6f7c <_free_r+0x134>
    70c8:	22000315 	stw	r8,12(r4)
    70cc:	22000215 	stw	r8,8(r4)
    70d0:	3a05883a 	add	r2,r7,r8
    70d4:	38c00054 	ori	r3,r7,1
    70d8:	11c00015 	stw	r7,0(r2)
    70dc:	41000215 	stw	r4,8(r8)
    70e0:	40c00115 	stw	r3,4(r8)
    70e4:	41000315 	stw	r4,12(r8)
    70e8:	003f8406 	br	6efc <_free_r+0xb4>
    70ec:	1005d0ba 	srai	r2,r2,2
    70f0:	00c00044 	movi	r3,1
    70f4:	51000117 	ldw	r4,4(r10)
    70f8:	1886983a 	sll	r3,r3,r2
    70fc:	20c8b03a 	or	r4,r4,r3
    7100:	51000115 	stw	r4,4(r10)
    7104:	003fa706 	br	6fa4 <_free_r+0x15c>
    7108:	00801504 	movi	r2,84
    710c:	10c00436 	bltu	r2,r3,7120 <_free_r+0x2d8>
    7110:	3804d33a 	srli	r2,r7,12
    7114:	10801b84 	addi	r2,r2,110
    7118:	100690fa 	slli	r3,r2,3
    711c:	003f9706 	br	6f7c <_free_r+0x134>
    7120:	00805504 	movi	r2,340
    7124:	10c00436 	bltu	r2,r3,7138 <_free_r+0x2f0>
    7128:	3804d3fa 	srli	r2,r7,15
    712c:	10801dc4 	addi	r2,r2,119
    7130:	100690fa 	slli	r3,r2,3
    7134:	003f9106 	br	6f7c <_free_r+0x134>
    7138:	00815504 	movi	r2,1364
    713c:	10c0032e 	bgeu	r2,r3,714c <_free_r+0x304>
    7140:	00801f84 	movi	r2,126
    7144:	00c0fc04 	movi	r3,1008
    7148:	003f8c06 	br	6f7c <_free_r+0x134>
    714c:	3804d4ba 	srli	r2,r7,18
    7150:	10801f04 	addi	r2,r2,124
    7154:	100690fa 	slli	r3,r2,3
    7158:	003f8806 	br	6f7c <_free_r+0x134>

0000715c <__sfvwrite_r>:
    715c:	30800217 	ldw	r2,8(r6)
    7160:	defff504 	addi	sp,sp,-44
    7164:	df000915 	stw	fp,36(sp)
    7168:	dd800715 	stw	r22,28(sp)
    716c:	dc800315 	stw	r18,12(sp)
    7170:	dfc00a15 	stw	ra,40(sp)
    7174:	ddc00815 	stw	r23,32(sp)
    7178:	dd400615 	stw	r21,24(sp)
    717c:	dd000515 	stw	r20,20(sp)
    7180:	dcc00415 	stw	r19,16(sp)
    7184:	dc400215 	stw	r17,8(sp)
    7188:	dc000115 	stw	r16,4(sp)
    718c:	302d883a 	mov	r22,r6
    7190:	2039883a 	mov	fp,r4
    7194:	2825883a 	mov	r18,r5
    7198:	10001c26 	beq	r2,zero,720c <__sfvwrite_r+0xb0>
    719c:	29c0030b 	ldhu	r7,12(r5)
    71a0:	3880020c 	andi	r2,r7,8
    71a4:	10002726 	beq	r2,zero,7244 <__sfvwrite_r+0xe8>
    71a8:	28800417 	ldw	r2,16(r5)
    71ac:	10002526 	beq	r2,zero,7244 <__sfvwrite_r+0xe8>
    71b0:	3880008c 	andi	r2,r7,2
    71b4:	b5400017 	ldw	r21,0(r22)
    71b8:	10002826 	beq	r2,zero,725c <__sfvwrite_r+0x100>
    71bc:	0021883a 	mov	r16,zero
    71c0:	0023883a 	mov	r17,zero
    71c4:	880d883a 	mov	r6,r17
    71c8:	e009883a 	mov	r4,fp
    71cc:	00810004 	movi	r2,1024
    71d0:	80006e26 	beq	r16,zero,738c <__sfvwrite_r+0x230>
    71d4:	800f883a 	mov	r7,r16
    71d8:	91400717 	ldw	r5,28(r18)
    71dc:	1400012e 	bgeu	r2,r16,71e4 <__sfvwrite_r+0x88>
    71e0:	100f883a 	mov	r7,r2
    71e4:	90c00917 	ldw	r3,36(r18)
    71e8:	183ee83a 	callr	r3
    71ec:	1007883a 	mov	r3,r2
    71f0:	80a1c83a 	sub	r16,r16,r2
    71f4:	88a3883a 	add	r17,r17,r2
    71f8:	00806d0e 	bge	zero,r2,73b0 <__sfvwrite_r+0x254>
    71fc:	b0800217 	ldw	r2,8(r22)
    7200:	10c5c83a 	sub	r2,r2,r3
    7204:	b0800215 	stw	r2,8(r22)
    7208:	103fee1e 	bne	r2,zero,71c4 <__sfvwrite_r+0x68>
    720c:	0009883a 	mov	r4,zero
    7210:	2005883a 	mov	r2,r4
    7214:	dfc00a17 	ldw	ra,40(sp)
    7218:	df000917 	ldw	fp,36(sp)
    721c:	ddc00817 	ldw	r23,32(sp)
    7220:	dd800717 	ldw	r22,28(sp)
    7224:	dd400617 	ldw	r21,24(sp)
    7228:	dd000517 	ldw	r20,20(sp)
    722c:	dcc00417 	ldw	r19,16(sp)
    7230:	dc800317 	ldw	r18,12(sp)
    7234:	dc400217 	ldw	r17,8(sp)
    7238:	dc000117 	ldw	r16,4(sp)
    723c:	dec00b04 	addi	sp,sp,44
    7240:	f800283a 	ret
    7244:	0004f240 	call	4f24 <__swsetup_r>
    7248:	1000e41e 	bne	r2,zero,75dc <__sfvwrite_r+0x480>
    724c:	91c0030b 	ldhu	r7,12(r18)
    7250:	b5400017 	ldw	r21,0(r22)
    7254:	3880008c 	andi	r2,r7,2
    7258:	103fd81e 	bne	r2,zero,71bc <__sfvwrite_r+0x60>
    725c:	3880004c 	andi	r2,r7,1
    7260:	1005003a 	cmpeq	r2,r2,zero
    7264:	10005726 	beq	r2,zero,73c4 <__sfvwrite_r+0x268>
    7268:	0029883a 	mov	r20,zero
    726c:	002f883a 	mov	r23,zero
    7270:	a0004226 	beq	r20,zero,737c <__sfvwrite_r+0x220>
    7274:	3880800c 	andi	r2,r7,512
    7278:	94000217 	ldw	r16,8(r18)
    727c:	10008b26 	beq	r2,zero,74ac <__sfvwrite_r+0x350>
    7280:	800d883a 	mov	r6,r16
    7284:	a400a536 	bltu	r20,r16,751c <__sfvwrite_r+0x3c0>
    7288:	3881200c 	andi	r2,r7,1152
    728c:	10002726 	beq	r2,zero,732c <__sfvwrite_r+0x1d0>
    7290:	90800517 	ldw	r2,20(r18)
    7294:	92000417 	ldw	r8,16(r18)
    7298:	91400017 	ldw	r5,0(r18)
    729c:	1087883a 	add	r3,r2,r2
    72a0:	1887883a 	add	r3,r3,r2
    72a4:	1808d7fa 	srli	r4,r3,31
    72a8:	2a21c83a 	sub	r16,r5,r8
    72ac:	80800044 	addi	r2,r16,1
    72b0:	20c9883a 	add	r4,r4,r3
    72b4:	2027d07a 	srai	r19,r4,1
    72b8:	a085883a 	add	r2,r20,r2
    72bc:	980d883a 	mov	r6,r19
    72c0:	9880022e 	bgeu	r19,r2,72cc <__sfvwrite_r+0x170>
    72c4:	1027883a 	mov	r19,r2
    72c8:	100d883a 	mov	r6,r2
    72cc:	3881000c 	andi	r2,r7,1024
    72d0:	1000b826 	beq	r2,zero,75b4 <__sfvwrite_r+0x458>
    72d4:	300b883a 	mov	r5,r6
    72d8:	e009883a 	mov	r4,fp
    72dc:	00079d00 	call	79d0 <_malloc_r>
    72e0:	10003126 	beq	r2,zero,73a8 <__sfvwrite_r+0x24c>
    72e4:	91400417 	ldw	r5,16(r18)
    72e8:	1009883a 	mov	r4,r2
    72ec:	800d883a 	mov	r6,r16
    72f0:	1023883a 	mov	r17,r2
    72f4:	0002d240 	call	2d24 <memcpy>
    72f8:	90c0030b 	ldhu	r3,12(r18)
    72fc:	00beffc4 	movi	r2,-1025
    7300:	1886703a 	and	r3,r3,r2
    7304:	18c02014 	ori	r3,r3,128
    7308:	90c0030d 	sth	r3,12(r18)
    730c:	9c07c83a 	sub	r3,r19,r16
    7310:	8c05883a 	add	r2,r17,r16
    7314:	a00d883a 	mov	r6,r20
    7318:	a021883a 	mov	r16,r20
    731c:	90800015 	stw	r2,0(r18)
    7320:	90c00215 	stw	r3,8(r18)
    7324:	94400415 	stw	r17,16(r18)
    7328:	94c00515 	stw	r19,20(r18)
    732c:	91000017 	ldw	r4,0(r18)
    7330:	b80b883a 	mov	r5,r23
    7334:	a023883a 	mov	r17,r20
    7338:	00081f40 	call	81f4 <memmove>
    733c:	90c00217 	ldw	r3,8(r18)
    7340:	90800017 	ldw	r2,0(r18)
    7344:	a027883a 	mov	r19,r20
    7348:	1c07c83a 	sub	r3,r3,r16
    734c:	1405883a 	add	r2,r2,r16
    7350:	90c00215 	stw	r3,8(r18)
    7354:	a021883a 	mov	r16,r20
    7358:	90800015 	stw	r2,0(r18)
    735c:	b0800217 	ldw	r2,8(r22)
    7360:	1405c83a 	sub	r2,r2,r16
    7364:	b0800215 	stw	r2,8(r22)
    7368:	103fa826 	beq	r2,zero,720c <__sfvwrite_r+0xb0>
    736c:	a469c83a 	sub	r20,r20,r17
    7370:	91c0030b 	ldhu	r7,12(r18)
    7374:	bcef883a 	add	r23,r23,r19
    7378:	a03fbe1e 	bne	r20,zero,7274 <__sfvwrite_r+0x118>
    737c:	adc00017 	ldw	r23,0(r21)
    7380:	ad000117 	ldw	r20,4(r21)
    7384:	ad400204 	addi	r21,r21,8
    7388:	003fb906 	br	7270 <__sfvwrite_r+0x114>
    738c:	ac400017 	ldw	r17,0(r21)
    7390:	ac000117 	ldw	r16,4(r21)
    7394:	ad400204 	addi	r21,r21,8
    7398:	003f8a06 	br	71c4 <__sfvwrite_r+0x68>
    739c:	91400417 	ldw	r5,16(r18)
    73a0:	e009883a 	mov	r4,fp
    73a4:	0006e480 	call	6e48 <_free_r>
    73a8:	00800304 	movi	r2,12
    73ac:	e0800015 	stw	r2,0(fp)
    73b0:	9080030b 	ldhu	r2,12(r18)
    73b4:	013fffc4 	movi	r4,-1
    73b8:	10801014 	ori	r2,r2,64
    73bc:	9080030d 	sth	r2,12(r18)
    73c0:	003f9306 	br	7210 <__sfvwrite_r+0xb4>
    73c4:	0027883a 	mov	r19,zero
    73c8:	002f883a 	mov	r23,zero
    73cc:	d8000015 	stw	zero,0(sp)
    73d0:	0029883a 	mov	r20,zero
    73d4:	98001e26 	beq	r19,zero,7450 <__sfvwrite_r+0x2f4>
    73d8:	d8c00017 	ldw	r3,0(sp)
    73dc:	1804c03a 	cmpne	r2,r3,zero
    73e0:	10005e26 	beq	r2,zero,755c <__sfvwrite_r+0x400>
    73e4:	9821883a 	mov	r16,r19
    73e8:	a4c0012e 	bgeu	r20,r19,73f0 <__sfvwrite_r+0x294>
    73ec:	a021883a 	mov	r16,r20
    73f0:	91000017 	ldw	r4,0(r18)
    73f4:	90800417 	ldw	r2,16(r18)
    73f8:	91800217 	ldw	r6,8(r18)
    73fc:	91c00517 	ldw	r7,20(r18)
    7400:	1100022e 	bgeu	r2,r4,740c <__sfvwrite_r+0x2b0>
    7404:	31e3883a 	add	r17,r6,r7
    7408:	8c001616 	blt	r17,r16,7464 <__sfvwrite_r+0x308>
    740c:	81c03816 	blt	r16,r7,74f0 <__sfvwrite_r+0x394>
    7410:	90c00917 	ldw	r3,36(r18)
    7414:	91400717 	ldw	r5,28(r18)
    7418:	e009883a 	mov	r4,fp
    741c:	b80d883a 	mov	r6,r23
    7420:	183ee83a 	callr	r3
    7424:	1023883a 	mov	r17,r2
    7428:	00bfe10e 	bge	zero,r2,73b0 <__sfvwrite_r+0x254>
    742c:	a469c83a 	sub	r20,r20,r17
    7430:	a0001826 	beq	r20,zero,7494 <__sfvwrite_r+0x338>
    7434:	b0800217 	ldw	r2,8(r22)
    7438:	1445c83a 	sub	r2,r2,r17
    743c:	b0800215 	stw	r2,8(r22)
    7440:	103f7226 	beq	r2,zero,720c <__sfvwrite_r+0xb0>
    7444:	9c67c83a 	sub	r19,r19,r17
    7448:	bc6f883a 	add	r23,r23,r17
    744c:	983fe21e 	bne	r19,zero,73d8 <__sfvwrite_r+0x27c>
    7450:	adc00017 	ldw	r23,0(r21)
    7454:	acc00117 	ldw	r19,4(r21)
    7458:	ad400204 	addi	r21,r21,8
    745c:	d8000015 	stw	zero,0(sp)
    7460:	003fdc06 	br	73d4 <__sfvwrite_r+0x278>
    7464:	b80b883a 	mov	r5,r23
    7468:	880d883a 	mov	r6,r17
    746c:	00081f40 	call	81f4 <memmove>
    7470:	90c00017 	ldw	r3,0(r18)
    7474:	e009883a 	mov	r4,fp
    7478:	900b883a 	mov	r5,r18
    747c:	1c47883a 	add	r3,r3,r17
    7480:	90c00015 	stw	r3,0(r18)
    7484:	000682c0 	call	682c <_fflush_r>
    7488:	103fc91e 	bne	r2,zero,73b0 <__sfvwrite_r+0x254>
    748c:	a469c83a 	sub	r20,r20,r17
    7490:	a03fe81e 	bne	r20,zero,7434 <__sfvwrite_r+0x2d8>
    7494:	e009883a 	mov	r4,fp
    7498:	900b883a 	mov	r5,r18
    749c:	000682c0 	call	682c <_fflush_r>
    74a0:	103fc31e 	bne	r2,zero,73b0 <__sfvwrite_r+0x254>
    74a4:	d8000015 	stw	zero,0(sp)
    74a8:	003fe206 	br	7434 <__sfvwrite_r+0x2d8>
    74ac:	91000017 	ldw	r4,0(r18)
    74b0:	90800417 	ldw	r2,16(r18)
    74b4:	1100022e 	bgeu	r2,r4,74c0 <__sfvwrite_r+0x364>
    74b8:	8023883a 	mov	r17,r16
    74bc:	85003136 	bltu	r16,r20,7584 <__sfvwrite_r+0x428>
    74c0:	91c00517 	ldw	r7,20(r18)
    74c4:	a1c01836 	bltu	r20,r7,7528 <__sfvwrite_r+0x3cc>
    74c8:	90c00917 	ldw	r3,36(r18)
    74cc:	91400717 	ldw	r5,28(r18)
    74d0:	e009883a 	mov	r4,fp
    74d4:	b80d883a 	mov	r6,r23
    74d8:	183ee83a 	callr	r3
    74dc:	1021883a 	mov	r16,r2
    74e0:	00bfb30e 	bge	zero,r2,73b0 <__sfvwrite_r+0x254>
    74e4:	1023883a 	mov	r17,r2
    74e8:	1027883a 	mov	r19,r2
    74ec:	003f9b06 	br	735c <__sfvwrite_r+0x200>
    74f0:	b80b883a 	mov	r5,r23
    74f4:	800d883a 	mov	r6,r16
    74f8:	00081f40 	call	81f4 <memmove>
    74fc:	90c00217 	ldw	r3,8(r18)
    7500:	90800017 	ldw	r2,0(r18)
    7504:	8023883a 	mov	r17,r16
    7508:	1c07c83a 	sub	r3,r3,r16
    750c:	1405883a 	add	r2,r2,r16
    7510:	90c00215 	stw	r3,8(r18)
    7514:	90800015 	stw	r2,0(r18)
    7518:	003fc406 	br	742c <__sfvwrite_r+0x2d0>
    751c:	a00d883a 	mov	r6,r20
    7520:	a021883a 	mov	r16,r20
    7524:	003f8106 	br	732c <__sfvwrite_r+0x1d0>
    7528:	b80b883a 	mov	r5,r23
    752c:	a00d883a 	mov	r6,r20
    7530:	00081f40 	call	81f4 <memmove>
    7534:	90c00217 	ldw	r3,8(r18)
    7538:	90800017 	ldw	r2,0(r18)
    753c:	a021883a 	mov	r16,r20
    7540:	1d07c83a 	sub	r3,r3,r20
    7544:	1505883a 	add	r2,r2,r20
    7548:	a023883a 	mov	r17,r20
    754c:	a027883a 	mov	r19,r20
    7550:	90c00215 	stw	r3,8(r18)
    7554:	90800015 	stw	r2,0(r18)
    7558:	003f8006 	br	735c <__sfvwrite_r+0x200>
    755c:	b809883a 	mov	r4,r23
    7560:	01400284 	movi	r5,10
    7564:	980d883a 	mov	r6,r19
    7568:	00081100 	call	8110 <memchr>
    756c:	10001726 	beq	r2,zero,75cc <__sfvwrite_r+0x470>
    7570:	15c5c83a 	sub	r2,r2,r23
    7574:	15000044 	addi	r20,r2,1
    7578:	00800044 	movi	r2,1
    757c:	d8800015 	stw	r2,0(sp)
    7580:	003f9806 	br	73e4 <__sfvwrite_r+0x288>
    7584:	b80b883a 	mov	r5,r23
    7588:	800d883a 	mov	r6,r16
    758c:	00081f40 	call	81f4 <memmove>
    7590:	90c00017 	ldw	r3,0(r18)
    7594:	e009883a 	mov	r4,fp
    7598:	900b883a 	mov	r5,r18
    759c:	1c07883a 	add	r3,r3,r16
    75a0:	90c00015 	stw	r3,0(r18)
    75a4:	8027883a 	mov	r19,r16
    75a8:	000682c0 	call	682c <_fflush_r>
    75ac:	103f6b26 	beq	r2,zero,735c <__sfvwrite_r+0x200>
    75b0:	003f7f06 	br	73b0 <__sfvwrite_r+0x254>
    75b4:	400b883a 	mov	r5,r8
    75b8:	e009883a 	mov	r4,fp
    75bc:	00092c80 	call	92c8 <_realloc_r>
    75c0:	103f7626 	beq	r2,zero,739c <__sfvwrite_r+0x240>
    75c4:	1023883a 	mov	r17,r2
    75c8:	003f5006 	br	730c <__sfvwrite_r+0x1b0>
    75cc:	00c00044 	movi	r3,1
    75d0:	9d000044 	addi	r20,r19,1
    75d4:	d8c00015 	stw	r3,0(sp)
    75d8:	003f8206 	br	73e4 <__sfvwrite_r+0x288>
    75dc:	9080030b 	ldhu	r2,12(r18)
    75e0:	00c00244 	movi	r3,9
    75e4:	013fffc4 	movi	r4,-1
    75e8:	10801014 	ori	r2,r2,64
    75ec:	9080030d 	sth	r2,12(r18)
    75f0:	e0c00015 	stw	r3,0(fp)
    75f4:	003f0606 	br	7210 <__sfvwrite_r+0xb4>

000075f8 <_fwalk_reent>:
    75f8:	defff704 	addi	sp,sp,-36
    75fc:	dcc00315 	stw	r19,12(sp)
    7600:	24c0b804 	addi	r19,r4,736
    7604:	dd800615 	stw	r22,24(sp)
    7608:	dd400515 	stw	r21,20(sp)
    760c:	dfc00815 	stw	ra,32(sp)
    7610:	ddc00715 	stw	r23,28(sp)
    7614:	dd000415 	stw	r20,16(sp)
    7618:	dc800215 	stw	r18,8(sp)
    761c:	dc400115 	stw	r17,4(sp)
    7620:	dc000015 	stw	r16,0(sp)
    7624:	202b883a 	mov	r21,r4
    7628:	282d883a 	mov	r22,r5
    762c:	0006ab40 	call	6ab4 <__sfp_lock_acquire>
    7630:	98002126 	beq	r19,zero,76b8 <_fwalk_reent+0xc0>
    7634:	002f883a 	mov	r23,zero
    7638:	9c800117 	ldw	r18,4(r19)
    763c:	9c000217 	ldw	r16,8(r19)
    7640:	90bfffc4 	addi	r2,r18,-1
    7644:	10000d16 	blt	r2,zero,767c <_fwalk_reent+0x84>
    7648:	0023883a 	mov	r17,zero
    764c:	053fffc4 	movi	r20,-1
    7650:	8080030f 	ldh	r2,12(r16)
    7654:	8c400044 	addi	r17,r17,1
    7658:	10000626 	beq	r2,zero,7674 <_fwalk_reent+0x7c>
    765c:	8080038f 	ldh	r2,14(r16)
    7660:	800b883a 	mov	r5,r16
    7664:	a809883a 	mov	r4,r21
    7668:	15000226 	beq	r2,r20,7674 <_fwalk_reent+0x7c>
    766c:	b03ee83a 	callr	r22
    7670:	b8aeb03a 	or	r23,r23,r2
    7674:	84001704 	addi	r16,r16,92
    7678:	947ff51e 	bne	r18,r17,7650 <_fwalk_reent+0x58>
    767c:	9cc00017 	ldw	r19,0(r19)
    7680:	983fed1e 	bne	r19,zero,7638 <_fwalk_reent+0x40>
    7684:	0006ab80 	call	6ab8 <__sfp_lock_release>
    7688:	b805883a 	mov	r2,r23
    768c:	dfc00817 	ldw	ra,32(sp)
    7690:	ddc00717 	ldw	r23,28(sp)
    7694:	dd800617 	ldw	r22,24(sp)
    7698:	dd400517 	ldw	r21,20(sp)
    769c:	dd000417 	ldw	r20,16(sp)
    76a0:	dcc00317 	ldw	r19,12(sp)
    76a4:	dc800217 	ldw	r18,8(sp)
    76a8:	dc400117 	ldw	r17,4(sp)
    76ac:	dc000017 	ldw	r16,0(sp)
    76b0:	dec00904 	addi	sp,sp,36
    76b4:	f800283a 	ret
    76b8:	002f883a 	mov	r23,zero
    76bc:	003ff106 	br	7684 <_fwalk_reent+0x8c>

000076c0 <_fwalk>:
    76c0:	defff804 	addi	sp,sp,-32
    76c4:	dcc00315 	stw	r19,12(sp)
    76c8:	24c0b804 	addi	r19,r4,736
    76cc:	dd400515 	stw	r21,20(sp)
    76d0:	dfc00715 	stw	ra,28(sp)
    76d4:	dd800615 	stw	r22,24(sp)
    76d8:	dd000415 	stw	r20,16(sp)
    76dc:	dc800215 	stw	r18,8(sp)
    76e0:	dc400115 	stw	r17,4(sp)
    76e4:	dc000015 	stw	r16,0(sp)
    76e8:	282b883a 	mov	r21,r5
    76ec:	0006ab40 	call	6ab4 <__sfp_lock_acquire>
    76f0:	98001f26 	beq	r19,zero,7770 <_fwalk+0xb0>
    76f4:	002d883a 	mov	r22,zero
    76f8:	9c800117 	ldw	r18,4(r19)
    76fc:	9c000217 	ldw	r16,8(r19)
    7700:	90bfffc4 	addi	r2,r18,-1
    7704:	10000c16 	blt	r2,zero,7738 <_fwalk+0x78>
    7708:	0023883a 	mov	r17,zero
    770c:	053fffc4 	movi	r20,-1
    7710:	8080030f 	ldh	r2,12(r16)
    7714:	8c400044 	addi	r17,r17,1
    7718:	10000526 	beq	r2,zero,7730 <_fwalk+0x70>
    771c:	8080038f 	ldh	r2,14(r16)
    7720:	8009883a 	mov	r4,r16
    7724:	15000226 	beq	r2,r20,7730 <_fwalk+0x70>
    7728:	a83ee83a 	callr	r21
    772c:	b0acb03a 	or	r22,r22,r2
    7730:	84001704 	addi	r16,r16,92
    7734:	947ff61e 	bne	r18,r17,7710 <_fwalk+0x50>
    7738:	9cc00017 	ldw	r19,0(r19)
    773c:	983fee1e 	bne	r19,zero,76f8 <_fwalk+0x38>
    7740:	0006ab80 	call	6ab8 <__sfp_lock_release>
    7744:	b005883a 	mov	r2,r22
    7748:	dfc00717 	ldw	ra,28(sp)
    774c:	dd800617 	ldw	r22,24(sp)
    7750:	dd400517 	ldw	r21,20(sp)
    7754:	dd000417 	ldw	r20,16(sp)
    7758:	dcc00317 	ldw	r19,12(sp)
    775c:	dc800217 	ldw	r18,8(sp)
    7760:	dc400117 	ldw	r17,4(sp)
    7764:	dc000017 	ldw	r16,0(sp)
    7768:	dec00804 	addi	sp,sp,32
    776c:	f800283a 	ret
    7770:	002d883a 	mov	r22,zero
    7774:	003ff206 	br	7740 <_fwalk+0x80>

00007778 <__locale_charset>:
    7778:	d0a00317 	ldw	r2,-32756(gp)
    777c:	f800283a 	ret

00007780 <_localeconv_r>:
    7780:	00800074 	movhi	r2,1
    7784:	108a7804 	addi	r2,r2,10720
    7788:	f800283a 	ret

0000778c <localeconv>:
    778c:	00800074 	movhi	r2,1
    7790:	1092ee04 	addi	r2,r2,19384
    7794:	11000017 	ldw	r4,0(r2)
    7798:	00077801 	jmpi	7780 <_localeconv_r>

0000779c <_setlocale_r>:
    779c:	defffc04 	addi	sp,sp,-16
    77a0:	00c00074 	movhi	r3,1
    77a4:	18ca7304 	addi	r3,r3,10700
    77a8:	dc800215 	stw	r18,8(sp)
    77ac:	dc400115 	stw	r17,4(sp)
    77b0:	dc000015 	stw	r16,0(sp)
    77b4:	2023883a 	mov	r17,r4
    77b8:	2825883a 	mov	r18,r5
    77bc:	dfc00315 	stw	ra,12(sp)
    77c0:	3021883a 	mov	r16,r6
    77c4:	3009883a 	mov	r4,r6
    77c8:	180b883a 	mov	r5,r3
    77cc:	30000926 	beq	r6,zero,77f4 <_setlocale_r+0x58>
    77d0:	0009ae80 	call	9ae8 <strcmp>
    77d4:	8009883a 	mov	r4,r16
    77d8:	01400074 	movhi	r5,1
    77dc:	294a5e04 	addi	r5,r5,10616
    77e0:	10000b1e 	bne	r2,zero,7810 <_setlocale_r+0x74>
    77e4:	8c000d15 	stw	r16,52(r17)
    77e8:	8c800c15 	stw	r18,48(r17)
    77ec:	00c00074 	movhi	r3,1
    77f0:	18ca7304 	addi	r3,r3,10700
    77f4:	1805883a 	mov	r2,r3
    77f8:	dfc00317 	ldw	ra,12(sp)
    77fc:	dc800217 	ldw	r18,8(sp)
    7800:	dc400117 	ldw	r17,4(sp)
    7804:	dc000017 	ldw	r16,0(sp)
    7808:	dec00404 	addi	sp,sp,16
    780c:	f800283a 	ret
    7810:	0009ae80 	call	9ae8 <strcmp>
    7814:	0007883a 	mov	r3,zero
    7818:	103ff226 	beq	r2,zero,77e4 <_setlocale_r+0x48>
    781c:	003ff506 	br	77f4 <_setlocale_r+0x58>

00007820 <setlocale>:
    7820:	01800074 	movhi	r6,1
    7824:	3192ee04 	addi	r6,r6,19384
    7828:	2007883a 	mov	r3,r4
    782c:	31000017 	ldw	r4,0(r6)
    7830:	280d883a 	mov	r6,r5
    7834:	180b883a 	mov	r5,r3
    7838:	000779c1 	jmpi	779c <_setlocale_r>

0000783c <__smakebuf_r>:
    783c:	2880030b 	ldhu	r2,12(r5)
    7840:	deffed04 	addi	sp,sp,-76
    7844:	dc401015 	stw	r17,64(sp)
    7848:	1080008c 	andi	r2,r2,2
    784c:	dc000f15 	stw	r16,60(sp)
    7850:	dfc01215 	stw	ra,72(sp)
    7854:	dc801115 	stw	r18,68(sp)
    7858:	2821883a 	mov	r16,r5
    785c:	2023883a 	mov	r17,r4
    7860:	10000b26 	beq	r2,zero,7890 <__smakebuf_r+0x54>
    7864:	28c010c4 	addi	r3,r5,67
    7868:	00800044 	movi	r2,1
    786c:	28800515 	stw	r2,20(r5)
    7870:	28c00415 	stw	r3,16(r5)
    7874:	28c00015 	stw	r3,0(r5)
    7878:	dfc01217 	ldw	ra,72(sp)
    787c:	dc801117 	ldw	r18,68(sp)
    7880:	dc401017 	ldw	r17,64(sp)
    7884:	dc000f17 	ldw	r16,60(sp)
    7888:	dec01304 	addi	sp,sp,76
    788c:	f800283a 	ret
    7890:	2940038f 	ldh	r5,14(r5)
    7894:	28002116 	blt	r5,zero,791c <__smakebuf_r+0xe0>
    7898:	d80d883a 	mov	r6,sp
    789c:	0009e640 	call	9e64 <_fstat_r>
    78a0:	10001e16 	blt	r2,zero,791c <__smakebuf_r+0xe0>
    78a4:	d8800117 	ldw	r2,4(sp)
    78a8:	00e00014 	movui	r3,32768
    78ac:	113c000c 	andi	r4,r2,61440
    78b0:	20c03126 	beq	r4,r3,7978 <__smakebuf_r+0x13c>
    78b4:	8080030b 	ldhu	r2,12(r16)
    78b8:	00c80004 	movi	r3,8192
    78bc:	10820014 	ori	r2,r2,2048
    78c0:	8080030d 	sth	r2,12(r16)
    78c4:	20c01e26 	beq	r4,r3,7940 <__smakebuf_r+0x104>
    78c8:	04810004 	movi	r18,1024
    78cc:	8809883a 	mov	r4,r17
    78d0:	900b883a 	mov	r5,r18
    78d4:	00079d00 	call	79d0 <_malloc_r>
    78d8:	1009883a 	mov	r4,r2
    78dc:	10003126 	beq	r2,zero,79a4 <__smakebuf_r+0x168>
    78e0:	80c0030b 	ldhu	r3,12(r16)
    78e4:	00800034 	movhi	r2,0
    78e8:	109aea04 	addi	r2,r2,27560
    78ec:	88800f15 	stw	r2,60(r17)
    78f0:	18c02014 	ori	r3,r3,128
    78f4:	84800515 	stw	r18,20(r16)
    78f8:	80c0030d 	sth	r3,12(r16)
    78fc:	81000415 	stw	r4,16(r16)
    7900:	81000015 	stw	r4,0(r16)
    7904:	dfc01217 	ldw	ra,72(sp)
    7908:	dc801117 	ldw	r18,68(sp)
    790c:	dc401017 	ldw	r17,64(sp)
    7910:	dc000f17 	ldw	r16,60(sp)
    7914:	dec01304 	addi	sp,sp,76
    7918:	f800283a 	ret
    791c:	80c0030b 	ldhu	r3,12(r16)
    7920:	1880200c 	andi	r2,r3,128
    7924:	10000426 	beq	r2,zero,7938 <__smakebuf_r+0xfc>
    7928:	04801004 	movi	r18,64
    792c:	18820014 	ori	r2,r3,2048
    7930:	8080030d 	sth	r2,12(r16)
    7934:	003fe506 	br	78cc <__smakebuf_r+0x90>
    7938:	04810004 	movi	r18,1024
    793c:	003ffb06 	br	792c <__smakebuf_r+0xf0>
    7940:	8140038f 	ldh	r5,14(r16)
    7944:	8809883a 	mov	r4,r17
    7948:	0009ed80 	call	9ed8 <_isatty_r>
    794c:	103fde26 	beq	r2,zero,78c8 <__smakebuf_r+0x8c>
    7950:	8080030b 	ldhu	r2,12(r16)
    7954:	80c010c4 	addi	r3,r16,67
    7958:	04810004 	movi	r18,1024
    795c:	10800054 	ori	r2,r2,1
    7960:	8080030d 	sth	r2,12(r16)
    7964:	00800044 	movi	r2,1
    7968:	80c00415 	stw	r3,16(r16)
    796c:	80800515 	stw	r2,20(r16)
    7970:	80c00015 	stw	r3,0(r16)
    7974:	003fd506 	br	78cc <__smakebuf_r+0x90>
    7978:	80c00a17 	ldw	r3,40(r16)
    797c:	00800074 	movhi	r2,1
    7980:	10a66904 	addi	r2,r2,-26204
    7984:	18bfcb1e 	bne	r3,r2,78b4 <__smakebuf_r+0x78>
    7988:	8080030b 	ldhu	r2,12(r16)
    798c:	00c10004 	movi	r3,1024
    7990:	1825883a 	mov	r18,r3
    7994:	10c4b03a 	or	r2,r2,r3
    7998:	8080030d 	sth	r2,12(r16)
    799c:	80c01315 	stw	r3,76(r16)
    79a0:	003fca06 	br	78cc <__smakebuf_r+0x90>
    79a4:	8100030b 	ldhu	r4,12(r16)
    79a8:	2080800c 	andi	r2,r4,512
    79ac:	103fb21e 	bne	r2,zero,7878 <__smakebuf_r+0x3c>
    79b0:	80c010c4 	addi	r3,r16,67
    79b4:	21000094 	ori	r4,r4,2
    79b8:	00800044 	movi	r2,1
    79bc:	80800515 	stw	r2,20(r16)
    79c0:	8100030d 	sth	r4,12(r16)
    79c4:	80c00415 	stw	r3,16(r16)
    79c8:	80c00015 	stw	r3,0(r16)
    79cc:	003faa06 	br	7878 <__smakebuf_r+0x3c>

000079d0 <_malloc_r>:
    79d0:	defff604 	addi	sp,sp,-40
    79d4:	28c002c4 	addi	r3,r5,11
    79d8:	00800584 	movi	r2,22
    79dc:	dc800215 	stw	r18,8(sp)
    79e0:	dfc00915 	stw	ra,36(sp)
    79e4:	df000815 	stw	fp,32(sp)
    79e8:	ddc00715 	stw	r23,28(sp)
    79ec:	dd800615 	stw	r22,24(sp)
    79f0:	dd400515 	stw	r21,20(sp)
    79f4:	dd000415 	stw	r20,16(sp)
    79f8:	dcc00315 	stw	r19,12(sp)
    79fc:	dc400115 	stw	r17,4(sp)
    7a00:	dc000015 	stw	r16,0(sp)
    7a04:	2025883a 	mov	r18,r4
    7a08:	10c01236 	bltu	r2,r3,7a54 <_malloc_r+0x84>
    7a0c:	04400404 	movi	r17,16
    7a10:	8940142e 	bgeu	r17,r5,7a64 <_malloc_r+0x94>
    7a14:	00800304 	movi	r2,12
    7a18:	0007883a 	mov	r3,zero
    7a1c:	90800015 	stw	r2,0(r18)
    7a20:	1805883a 	mov	r2,r3
    7a24:	dfc00917 	ldw	ra,36(sp)
    7a28:	df000817 	ldw	fp,32(sp)
    7a2c:	ddc00717 	ldw	r23,28(sp)
    7a30:	dd800617 	ldw	r22,24(sp)
    7a34:	dd400517 	ldw	r21,20(sp)
    7a38:	dd000417 	ldw	r20,16(sp)
    7a3c:	dcc00317 	ldw	r19,12(sp)
    7a40:	dc800217 	ldw	r18,8(sp)
    7a44:	dc400117 	ldw	r17,4(sp)
    7a48:	dc000017 	ldw	r16,0(sp)
    7a4c:	dec00a04 	addi	sp,sp,40
    7a50:	f800283a 	ret
    7a54:	00bffe04 	movi	r2,-8
    7a58:	18a2703a 	and	r17,r3,r2
    7a5c:	883fed16 	blt	r17,zero,7a14 <_malloc_r+0x44>
    7a60:	897fec36 	bltu	r17,r5,7a14 <_malloc_r+0x44>
    7a64:	9009883a 	mov	r4,r18
    7a68:	000be800 	call	be80 <__malloc_lock>
    7a6c:	00807dc4 	movi	r2,503
    7a70:	14402b2e 	bgeu	r2,r17,7b20 <_malloc_r+0x150>
    7a74:	8806d27a 	srli	r3,r17,9
    7a78:	18003f1e 	bne	r3,zero,7b78 <_malloc_r+0x1a8>
    7a7c:	880cd0fa 	srli	r6,r17,3
    7a80:	300490fa 	slli	r2,r6,3
    7a84:	02c00074 	movhi	r11,1
    7a88:	5acc7d04 	addi	r11,r11,12788
    7a8c:	12cb883a 	add	r5,r2,r11
    7a90:	2c000317 	ldw	r16,12(r5)
    7a94:	580f883a 	mov	r7,r11
    7a98:	2c00041e 	bne	r5,r16,7aac <_malloc_r+0xdc>
    7a9c:	00000a06 	br	7ac8 <_malloc_r+0xf8>
    7aa0:	1800860e 	bge	r3,zero,7cbc <_malloc_r+0x2ec>
    7aa4:	84000317 	ldw	r16,12(r16)
    7aa8:	2c000726 	beq	r5,r16,7ac8 <_malloc_r+0xf8>
    7aac:	80800117 	ldw	r2,4(r16)
    7ab0:	00ffff04 	movi	r3,-4
    7ab4:	10c8703a 	and	r4,r2,r3
    7ab8:	2447c83a 	sub	r3,r4,r17
    7abc:	008003c4 	movi	r2,15
    7ac0:	10fff70e 	bge	r2,r3,7aa0 <_malloc_r+0xd0>
    7ac4:	31bfffc4 	addi	r6,r6,-1
    7ac8:	32400044 	addi	r9,r6,1
    7acc:	02800074 	movhi	r10,1
    7ad0:	528c7f04 	addi	r10,r10,12796
    7ad4:	54000217 	ldw	r16,8(r10)
    7ad8:	8280a026 	beq	r16,r10,7d5c <_malloc_r+0x38c>
    7adc:	80800117 	ldw	r2,4(r16)
    7ae0:	00ffff04 	movi	r3,-4
    7ae4:	10ca703a 	and	r5,r2,r3
    7ae8:	2c4dc83a 	sub	r6,r5,r17
    7aec:	008003c4 	movi	r2,15
    7af0:	11808316 	blt	r2,r6,7d00 <_malloc_r+0x330>
    7af4:	52800315 	stw	r10,12(r10)
    7af8:	52800215 	stw	r10,8(r10)
    7afc:	30002916 	blt	r6,zero,7ba4 <_malloc_r+0x1d4>
    7b00:	8147883a 	add	r3,r16,r5
    7b04:	18800117 	ldw	r2,4(r3)
    7b08:	9009883a 	mov	r4,r18
    7b0c:	10800054 	ori	r2,r2,1
    7b10:	18800115 	stw	r2,4(r3)
    7b14:	000bea00 	call	bea0 <__malloc_unlock>
    7b18:	80c00204 	addi	r3,r16,8
    7b1c:	003fc006 	br	7a20 <_malloc_r+0x50>
    7b20:	02c00074 	movhi	r11,1
    7b24:	5acc7d04 	addi	r11,r11,12788
    7b28:	8ac5883a 	add	r2,r17,r11
    7b2c:	14000317 	ldw	r16,12(r2)
    7b30:	580f883a 	mov	r7,r11
    7b34:	8806d0fa 	srli	r3,r17,3
    7b38:	14006c26 	beq	r2,r16,7cec <_malloc_r+0x31c>
    7b3c:	80c00117 	ldw	r3,4(r16)
    7b40:	00bfff04 	movi	r2,-4
    7b44:	81800317 	ldw	r6,12(r16)
    7b48:	1886703a 	and	r3,r3,r2
    7b4c:	80c7883a 	add	r3,r16,r3
    7b50:	18800117 	ldw	r2,4(r3)
    7b54:	81400217 	ldw	r5,8(r16)
    7b58:	9009883a 	mov	r4,r18
    7b5c:	10800054 	ori	r2,r2,1
    7b60:	18800115 	stw	r2,4(r3)
    7b64:	31400215 	stw	r5,8(r6)
    7b68:	29800315 	stw	r6,12(r5)
    7b6c:	000bea00 	call	bea0 <__malloc_unlock>
    7b70:	80c00204 	addi	r3,r16,8
    7b74:	003faa06 	br	7a20 <_malloc_r+0x50>
    7b78:	00800104 	movi	r2,4
    7b7c:	10c0052e 	bgeu	r2,r3,7b94 <_malloc_r+0x1c4>
    7b80:	00800504 	movi	r2,20
    7b84:	10c07836 	bltu	r2,r3,7d68 <_malloc_r+0x398>
    7b88:	198016c4 	addi	r6,r3,91
    7b8c:	300490fa 	slli	r2,r6,3
    7b90:	003fbc06 	br	7a84 <_malloc_r+0xb4>
    7b94:	8804d1ba 	srli	r2,r17,6
    7b98:	11800e04 	addi	r6,r2,56
    7b9c:	300490fa 	slli	r2,r6,3
    7ba0:	003fb806 	br	7a84 <_malloc_r+0xb4>
    7ba4:	00807fc4 	movi	r2,511
    7ba8:	1140bb36 	bltu	r2,r5,7e98 <_malloc_r+0x4c8>
    7bac:	2806d0fa 	srli	r3,r5,3
    7bb0:	573ffe04 	addi	fp,r10,-8
    7bb4:	00800044 	movi	r2,1
    7bb8:	180890fa 	slli	r4,r3,3
    7bbc:	1807d0ba 	srai	r3,r3,2
    7bc0:	e1c00117 	ldw	r7,4(fp)
    7bc4:	5909883a 	add	r4,r11,r4
    7bc8:	21400217 	ldw	r5,8(r4)
    7bcc:	10c4983a 	sll	r2,r2,r3
    7bd0:	81000315 	stw	r4,12(r16)
    7bd4:	81400215 	stw	r5,8(r16)
    7bd8:	388eb03a 	or	r7,r7,r2
    7bdc:	2c000315 	stw	r16,12(r5)
    7be0:	24000215 	stw	r16,8(r4)
    7be4:	e1c00115 	stw	r7,4(fp)
    7be8:	4807883a 	mov	r3,r9
    7bec:	4800cd16 	blt	r9,zero,7f24 <_malloc_r+0x554>
    7bf0:	1807d0ba 	srai	r3,r3,2
    7bf4:	00800044 	movi	r2,1
    7bf8:	10c8983a 	sll	r4,r2,r3
    7bfc:	39004436 	bltu	r7,r4,7d10 <_malloc_r+0x340>
    7c00:	21c4703a 	and	r2,r4,r7
    7c04:	10000a1e 	bne	r2,zero,7c30 <_malloc_r+0x260>
    7c08:	2109883a 	add	r4,r4,r4
    7c0c:	00bfff04 	movi	r2,-4
    7c10:	4884703a 	and	r2,r9,r2
    7c14:	3906703a 	and	r3,r7,r4
    7c18:	12400104 	addi	r9,r2,4
    7c1c:	1800041e 	bne	r3,zero,7c30 <_malloc_r+0x260>
    7c20:	2109883a 	add	r4,r4,r4
    7c24:	3904703a 	and	r2,r7,r4
    7c28:	4a400104 	addi	r9,r9,4
    7c2c:	103ffc26 	beq	r2,zero,7c20 <_malloc_r+0x250>
    7c30:	480490fa 	slli	r2,r9,3
    7c34:	4819883a 	mov	r12,r9
    7c38:	023fff04 	movi	r8,-4
    7c3c:	589b883a 	add	r13,r11,r2
    7c40:	6807883a 	mov	r3,r13
    7c44:	014003c4 	movi	r5,15
    7c48:	1c000317 	ldw	r16,12(r3)
    7c4c:	1c00041e 	bne	r3,r16,7c60 <_malloc_r+0x290>
    7c50:	0000a706 	br	7ef0 <_malloc_r+0x520>
    7c54:	3000ab0e 	bge	r6,zero,7f04 <_malloc_r+0x534>
    7c58:	84000317 	ldw	r16,12(r16)
    7c5c:	1c00a426 	beq	r3,r16,7ef0 <_malloc_r+0x520>
    7c60:	80800117 	ldw	r2,4(r16)
    7c64:	1204703a 	and	r2,r2,r8
    7c68:	144dc83a 	sub	r6,r2,r17
    7c6c:	29bff90e 	bge	r5,r6,7c54 <_malloc_r+0x284>
    7c70:	81000317 	ldw	r4,12(r16)
    7c74:	80c00217 	ldw	r3,8(r16)
    7c78:	89400054 	ori	r5,r17,1
    7c7c:	8445883a 	add	r2,r16,r17
    7c80:	20c00215 	stw	r3,8(r4)
    7c84:	19000315 	stw	r4,12(r3)
    7c88:	81400115 	stw	r5,4(r16)
    7c8c:	1187883a 	add	r3,r2,r6
    7c90:	31000054 	ori	r4,r6,1
    7c94:	50800315 	stw	r2,12(r10)
    7c98:	50800215 	stw	r2,8(r10)
    7c9c:	19800015 	stw	r6,0(r3)
    7ca0:	11000115 	stw	r4,4(r2)
    7ca4:	12800215 	stw	r10,8(r2)
    7ca8:	12800315 	stw	r10,12(r2)
    7cac:	9009883a 	mov	r4,r18
    7cb0:	000bea00 	call	bea0 <__malloc_unlock>
    7cb4:	80c00204 	addi	r3,r16,8
    7cb8:	003f5906 	br	7a20 <_malloc_r+0x50>
    7cbc:	8109883a 	add	r4,r16,r4
    7cc0:	20800117 	ldw	r2,4(r4)
    7cc4:	80c00217 	ldw	r3,8(r16)
    7cc8:	81400317 	ldw	r5,12(r16)
    7ccc:	10800054 	ori	r2,r2,1
    7cd0:	20800115 	stw	r2,4(r4)
    7cd4:	28c00215 	stw	r3,8(r5)
    7cd8:	19400315 	stw	r5,12(r3)
    7cdc:	9009883a 	mov	r4,r18
    7ce0:	000bea00 	call	bea0 <__malloc_unlock>
    7ce4:	80c00204 	addi	r3,r16,8
    7ce8:	003f4d06 	br	7a20 <_malloc_r+0x50>
    7cec:	80800204 	addi	r2,r16,8
    7cf0:	14000317 	ldw	r16,12(r2)
    7cf4:	143f911e 	bne	r2,r16,7b3c <_malloc_r+0x16c>
    7cf8:	1a400084 	addi	r9,r3,2
    7cfc:	003f7306 	br	7acc <_malloc_r+0xfc>
    7d00:	88c00054 	ori	r3,r17,1
    7d04:	8445883a 	add	r2,r16,r17
    7d08:	80c00115 	stw	r3,4(r16)
    7d0c:	003fdf06 	br	7c8c <_malloc_r+0x2bc>
    7d10:	e4000217 	ldw	r16,8(fp)
    7d14:	00bfff04 	movi	r2,-4
    7d18:	80c00117 	ldw	r3,4(r16)
    7d1c:	802d883a 	mov	r22,r16
    7d20:	18aa703a 	and	r21,r3,r2
    7d24:	ac401636 	bltu	r21,r17,7d80 <_malloc_r+0x3b0>
    7d28:	ac49c83a 	sub	r4,r21,r17
    7d2c:	008003c4 	movi	r2,15
    7d30:	1100130e 	bge	r2,r4,7d80 <_malloc_r+0x3b0>
    7d34:	88800054 	ori	r2,r17,1
    7d38:	8447883a 	add	r3,r16,r17
    7d3c:	80800115 	stw	r2,4(r16)
    7d40:	20800054 	ori	r2,r4,1
    7d44:	18800115 	stw	r2,4(r3)
    7d48:	e0c00215 	stw	r3,8(fp)
    7d4c:	9009883a 	mov	r4,r18
    7d50:	000bea00 	call	bea0 <__malloc_unlock>
    7d54:	80c00204 	addi	r3,r16,8
    7d58:	003f3106 	br	7a20 <_malloc_r+0x50>
    7d5c:	39c00117 	ldw	r7,4(r7)
    7d60:	573ffe04 	addi	fp,r10,-8
    7d64:	003fa006 	br	7be8 <_malloc_r+0x218>
    7d68:	00801504 	movi	r2,84
    7d6c:	10c06736 	bltu	r2,r3,7f0c <_malloc_r+0x53c>
    7d70:	8804d33a 	srli	r2,r17,12
    7d74:	11801b84 	addi	r6,r2,110
    7d78:	300490fa 	slli	r2,r6,3
    7d7c:	003f4106 	br	7a84 <_malloc_r+0xb4>
    7d80:	d0a7df17 	ldw	r2,-24708(gp)
    7d84:	d0e00517 	ldw	r3,-32748(gp)
    7d88:	053fffc4 	movi	r20,-1
    7d8c:	10800404 	addi	r2,r2,16
    7d90:	88a7883a 	add	r19,r17,r2
    7d94:	1d000326 	beq	r3,r20,7da4 <_malloc_r+0x3d4>
    7d98:	98c3ffc4 	addi	r3,r19,4095
    7d9c:	00bc0004 	movi	r2,-4096
    7da0:	18a6703a 	and	r19,r3,r2
    7da4:	9009883a 	mov	r4,r18
    7da8:	980b883a 	mov	r5,r19
    7dac:	000992c0 	call	992c <_sbrk_r>
    7db0:	1009883a 	mov	r4,r2
    7db4:	15000426 	beq	r2,r20,7dc8 <_malloc_r+0x3f8>
    7db8:	854b883a 	add	r5,r16,r21
    7dbc:	1029883a 	mov	r20,r2
    7dc0:	11405a2e 	bgeu	r2,r5,7f2c <_malloc_r+0x55c>
    7dc4:	87000c26 	beq	r16,fp,7df8 <_malloc_r+0x428>
    7dc8:	e4000217 	ldw	r16,8(fp)
    7dcc:	80c00117 	ldw	r3,4(r16)
    7dd0:	00bfff04 	movi	r2,-4
    7dd4:	1884703a 	and	r2,r3,r2
    7dd8:	14400336 	bltu	r2,r17,7de8 <_malloc_r+0x418>
    7ddc:	1449c83a 	sub	r4,r2,r17
    7de0:	008003c4 	movi	r2,15
    7de4:	113fd316 	blt	r2,r4,7d34 <_malloc_r+0x364>
    7de8:	9009883a 	mov	r4,r18
    7dec:	000bea00 	call	bea0 <__malloc_unlock>
    7df0:	0007883a 	mov	r3,zero
    7df4:	003f0a06 	br	7a20 <_malloc_r+0x50>
    7df8:	05c00074 	movhi	r23,1
    7dfc:	bddb5904 	addi	r23,r23,28004
    7e00:	b8800017 	ldw	r2,0(r23)
    7e04:	988d883a 	add	r6,r19,r2
    7e08:	b9800015 	stw	r6,0(r23)
    7e0c:	d0e00517 	ldw	r3,-32748(gp)
    7e10:	00bfffc4 	movi	r2,-1
    7e14:	18808e26 	beq	r3,r2,8050 <_malloc_r+0x680>
    7e18:	2145c83a 	sub	r2,r4,r5
    7e1c:	3085883a 	add	r2,r6,r2
    7e20:	b8800015 	stw	r2,0(r23)
    7e24:	20c001cc 	andi	r3,r4,7
    7e28:	18005f1e 	bne	r3,zero,7fa8 <_malloc_r+0x5d8>
    7e2c:	000b883a 	mov	r5,zero
    7e30:	a4c5883a 	add	r2,r20,r19
    7e34:	1083ffcc 	andi	r2,r2,4095
    7e38:	00c40004 	movi	r3,4096
    7e3c:	1887c83a 	sub	r3,r3,r2
    7e40:	28e7883a 	add	r19,r5,r3
    7e44:	9009883a 	mov	r4,r18
    7e48:	980b883a 	mov	r5,r19
    7e4c:	000992c0 	call	992c <_sbrk_r>
    7e50:	1007883a 	mov	r3,r2
    7e54:	00bfffc4 	movi	r2,-1
    7e58:	18807a26 	beq	r3,r2,8044 <_malloc_r+0x674>
    7e5c:	1d05c83a 	sub	r2,r3,r20
    7e60:	9885883a 	add	r2,r19,r2
    7e64:	10c00054 	ori	r3,r2,1
    7e68:	b8800017 	ldw	r2,0(r23)
    7e6c:	a021883a 	mov	r16,r20
    7e70:	a0c00115 	stw	r3,4(r20)
    7e74:	9885883a 	add	r2,r19,r2
    7e78:	b8800015 	stw	r2,0(r23)
    7e7c:	e5000215 	stw	r20,8(fp)
    7e80:	b7003626 	beq	r22,fp,7f5c <_malloc_r+0x58c>
    7e84:	018003c4 	movi	r6,15
    7e88:	35404b36 	bltu	r6,r21,7fb8 <_malloc_r+0x5e8>
    7e8c:	00800044 	movi	r2,1
    7e90:	a0800115 	stw	r2,4(r20)
    7e94:	003fcd06 	br	7dcc <_malloc_r+0x3fc>
    7e98:	2808d27a 	srli	r4,r5,9
    7e9c:	2000371e 	bne	r4,zero,7f7c <_malloc_r+0x5ac>
    7ea0:	2808d0fa 	srli	r4,r5,3
    7ea4:	200690fa 	slli	r3,r4,3
    7ea8:	1ad1883a 	add	r8,r3,r11
    7eac:	41800217 	ldw	r6,8(r8)
    7eb0:	41805b26 	beq	r8,r6,8020 <_malloc_r+0x650>
    7eb4:	30800117 	ldw	r2,4(r6)
    7eb8:	00ffff04 	movi	r3,-4
    7ebc:	10c4703a 	and	r2,r2,r3
    7ec0:	2880022e 	bgeu	r5,r2,7ecc <_malloc_r+0x4fc>
    7ec4:	31800217 	ldw	r6,8(r6)
    7ec8:	41bffa1e 	bne	r8,r6,7eb4 <_malloc_r+0x4e4>
    7ecc:	32000317 	ldw	r8,12(r6)
    7ed0:	39c00117 	ldw	r7,4(r7)
    7ed4:	82000315 	stw	r8,12(r16)
    7ed8:	81800215 	stw	r6,8(r16)
    7edc:	07000074 	movhi	fp,1
    7ee0:	e70c7d04 	addi	fp,fp,12788
    7ee4:	34000315 	stw	r16,12(r6)
    7ee8:	44000215 	stw	r16,8(r8)
    7eec:	003f3e06 	br	7be8 <_malloc_r+0x218>
    7ef0:	63000044 	addi	r12,r12,1
    7ef4:	608000cc 	andi	r2,r12,3
    7ef8:	10005d26 	beq	r2,zero,8070 <_malloc_r+0x6a0>
    7efc:	18c00204 	addi	r3,r3,8
    7f00:	003f5106 	br	7c48 <_malloc_r+0x278>
    7f04:	8089883a 	add	r4,r16,r2
    7f08:	003f6d06 	br	7cc0 <_malloc_r+0x2f0>
    7f0c:	00805504 	movi	r2,340
    7f10:	10c02036 	bltu	r2,r3,7f94 <_malloc_r+0x5c4>
    7f14:	8804d3fa 	srli	r2,r17,15
    7f18:	11801dc4 	addi	r6,r2,119
    7f1c:	300490fa 	slli	r2,r6,3
    7f20:	003ed806 	br	7a84 <_malloc_r+0xb4>
    7f24:	48c000c4 	addi	r3,r9,3
    7f28:	003f3106 	br	7bf0 <_malloc_r+0x220>
    7f2c:	05c00074 	movhi	r23,1
    7f30:	bddb5904 	addi	r23,r23,28004
    7f34:	b8800017 	ldw	r2,0(r23)
    7f38:	988d883a 	add	r6,r19,r2
    7f3c:	b9800015 	stw	r6,0(r23)
    7f40:	293fb21e 	bne	r5,r4,7e0c <_malloc_r+0x43c>
    7f44:	2083ffcc 	andi	r2,r4,4095
    7f48:	103fb01e 	bne	r2,zero,7e0c <_malloc_r+0x43c>
    7f4c:	e4000217 	ldw	r16,8(fp)
    7f50:	9d45883a 	add	r2,r19,r21
    7f54:	10800054 	ori	r2,r2,1
    7f58:	80800115 	stw	r2,4(r16)
    7f5c:	b8c00017 	ldw	r3,0(r23)
    7f60:	d0a7e017 	ldw	r2,-24704(gp)
    7f64:	10c0012e 	bgeu	r2,r3,7f6c <_malloc_r+0x59c>
    7f68:	d0e7e015 	stw	r3,-24704(gp)
    7f6c:	d0a7e117 	ldw	r2,-24700(gp)
    7f70:	10ff962e 	bgeu	r2,r3,7dcc <_malloc_r+0x3fc>
    7f74:	d0e7e115 	stw	r3,-24700(gp)
    7f78:	003f9406 	br	7dcc <_malloc_r+0x3fc>
    7f7c:	00800104 	movi	r2,4
    7f80:	11001e36 	bltu	r2,r4,7ffc <_malloc_r+0x62c>
    7f84:	2804d1ba 	srli	r2,r5,6
    7f88:	11000e04 	addi	r4,r2,56
    7f8c:	200690fa 	slli	r3,r4,3
    7f90:	003fc506 	br	7ea8 <_malloc_r+0x4d8>
    7f94:	00815504 	movi	r2,1364
    7f98:	10c01d2e 	bgeu	r2,r3,8010 <_malloc_r+0x640>
    7f9c:	01801f84 	movi	r6,126
    7fa0:	0080fc04 	movi	r2,1008
    7fa4:	003eb706 	br	7a84 <_malloc_r+0xb4>
    7fa8:	00800204 	movi	r2,8
    7fac:	10cbc83a 	sub	r5,r2,r3
    7fb0:	2169883a 	add	r20,r4,r5
    7fb4:	003f9e06 	br	7e30 <_malloc_r+0x460>
    7fb8:	00bffe04 	movi	r2,-8
    7fbc:	a93ffd04 	addi	r4,r21,-12
    7fc0:	2088703a 	and	r4,r4,r2
    7fc4:	b10b883a 	add	r5,r22,r4
    7fc8:	00c00144 	movi	r3,5
    7fcc:	28c00215 	stw	r3,8(r5)
    7fd0:	28c00115 	stw	r3,4(r5)
    7fd4:	b0800117 	ldw	r2,4(r22)
    7fd8:	1080004c 	andi	r2,r2,1
    7fdc:	2084b03a 	or	r2,r4,r2
    7fe0:	b0800115 	stw	r2,4(r22)
    7fe4:	313fdd2e 	bgeu	r6,r4,7f5c <_malloc_r+0x58c>
    7fe8:	b1400204 	addi	r5,r22,8
    7fec:	9009883a 	mov	r4,r18
    7ff0:	0006e480 	call	6e48 <_free_r>
    7ff4:	e4000217 	ldw	r16,8(fp)
    7ff8:	003fd806 	br	7f5c <_malloc_r+0x58c>
    7ffc:	00800504 	movi	r2,20
    8000:	11001536 	bltu	r2,r4,8058 <_malloc_r+0x688>
    8004:	210016c4 	addi	r4,r4,91
    8008:	200690fa 	slli	r3,r4,3
    800c:	003fa606 	br	7ea8 <_malloc_r+0x4d8>
    8010:	8804d4ba 	srli	r2,r17,18
    8014:	11801f04 	addi	r6,r2,124
    8018:	300490fa 	slli	r2,r6,3
    801c:	003e9906 	br	7a84 <_malloc_r+0xb4>
    8020:	2009d0ba 	srai	r4,r4,2
    8024:	01400074 	movhi	r5,1
    8028:	294c7d04 	addi	r5,r5,12788
    802c:	00c00044 	movi	r3,1
    8030:	28800117 	ldw	r2,4(r5)
    8034:	1906983a 	sll	r3,r3,r4
    8038:	10c4b03a 	or	r2,r2,r3
    803c:	28800115 	stw	r2,4(r5)
    8040:	003fa306 	br	7ed0 <_malloc_r+0x500>
    8044:	0027883a 	mov	r19,zero
    8048:	00c00044 	movi	r3,1
    804c:	003f8606 	br	7e68 <_malloc_r+0x498>
    8050:	d1200515 	stw	r4,-32748(gp)
    8054:	003f7306 	br	7e24 <_malloc_r+0x454>
    8058:	00801504 	movi	r2,84
    805c:	11001936 	bltu	r2,r4,80c4 <_malloc_r+0x6f4>
    8060:	2804d33a 	srli	r2,r5,12
    8064:	11001b84 	addi	r4,r2,110
    8068:	200690fa 	slli	r3,r4,3
    806c:	003f8e06 	br	7ea8 <_malloc_r+0x4d8>
    8070:	480b883a 	mov	r5,r9
    8074:	6807883a 	mov	r3,r13
    8078:	288000cc 	andi	r2,r5,3
    807c:	18fffe04 	addi	r3,r3,-8
    8080:	297fffc4 	addi	r5,r5,-1
    8084:	10001526 	beq	r2,zero,80dc <_malloc_r+0x70c>
    8088:	18800217 	ldw	r2,8(r3)
    808c:	10fffa26 	beq	r2,r3,8078 <_malloc_r+0x6a8>
    8090:	2109883a 	add	r4,r4,r4
    8094:	393f1e36 	bltu	r7,r4,7d10 <_malloc_r+0x340>
    8098:	203f1d26 	beq	r4,zero,7d10 <_malloc_r+0x340>
    809c:	21c4703a 	and	r2,r4,r7
    80a0:	10000226 	beq	r2,zero,80ac <_malloc_r+0x6dc>
    80a4:	6013883a 	mov	r9,r12
    80a8:	003ee106 	br	7c30 <_malloc_r+0x260>
    80ac:	2109883a 	add	r4,r4,r4
    80b0:	3904703a 	and	r2,r7,r4
    80b4:	63000104 	addi	r12,r12,4
    80b8:	103ffc26 	beq	r2,zero,80ac <_malloc_r+0x6dc>
    80bc:	6013883a 	mov	r9,r12
    80c0:	003edb06 	br	7c30 <_malloc_r+0x260>
    80c4:	00805504 	movi	r2,340
    80c8:	11000836 	bltu	r2,r4,80ec <_malloc_r+0x71c>
    80cc:	2804d3fa 	srli	r2,r5,15
    80d0:	11001dc4 	addi	r4,r2,119
    80d4:	200690fa 	slli	r3,r4,3
    80d8:	003f7306 	br	7ea8 <_malloc_r+0x4d8>
    80dc:	0104303a 	nor	r2,zero,r4
    80e0:	388e703a 	and	r7,r7,r2
    80e4:	e1c00115 	stw	r7,4(fp)
    80e8:	003fe906 	br	8090 <_malloc_r+0x6c0>
    80ec:	00815504 	movi	r2,1364
    80f0:	1100032e 	bgeu	r2,r4,8100 <_malloc_r+0x730>
    80f4:	01001f84 	movi	r4,126
    80f8:	00c0fc04 	movi	r3,1008
    80fc:	003f6a06 	br	7ea8 <_malloc_r+0x4d8>
    8100:	2804d4ba 	srli	r2,r5,18
    8104:	11001f04 	addi	r4,r2,124
    8108:	200690fa 	slli	r3,r4,3
    810c:	003f6606 	br	7ea8 <_malloc_r+0x4d8>

00008110 <memchr>:
    8110:	008000c4 	movi	r2,3
    8114:	29403fcc 	andi	r5,r5,255
    8118:	2007883a 	mov	r3,r4
    811c:	1180022e 	bgeu	r2,r6,8128 <memchr+0x18>
    8120:	2084703a 	and	r2,r4,r2
    8124:	10000b26 	beq	r2,zero,8154 <memchr+0x44>
    8128:	313fffc4 	addi	r4,r6,-1
    812c:	3000051e 	bne	r6,zero,8144 <memchr+0x34>
    8130:	00002c06 	br	81e4 <memchr+0xd4>
    8134:	213fffc4 	addi	r4,r4,-1
    8138:	00bfffc4 	movi	r2,-1
    813c:	18c00044 	addi	r3,r3,1
    8140:	20802826 	beq	r4,r2,81e4 <memchr+0xd4>
    8144:	18800003 	ldbu	r2,0(r3)
    8148:	28bffa1e 	bne	r5,r2,8134 <memchr+0x24>
    814c:	1805883a 	mov	r2,r3
    8150:	f800283a 	ret
    8154:	0011883a 	mov	r8,zero
    8158:	0007883a 	mov	r3,zero
    815c:	01c00104 	movi	r7,4
    8160:	4004923a 	slli	r2,r8,8
    8164:	18c00044 	addi	r3,r3,1
    8168:	1151883a 	add	r8,r2,r5
    816c:	19fffc1e 	bne	r3,r7,8160 <memchr+0x50>
    8170:	02bfbff4 	movhi	r10,65279
    8174:	52bfbfc4 	addi	r10,r10,-257
    8178:	02602074 	movhi	r9,32897
    817c:	4a602004 	addi	r9,r9,-32640
    8180:	02c000c4 	movi	r11,3
    8184:	20800017 	ldw	r2,0(r4)
    8188:	31bfff04 	addi	r6,r6,-4
    818c:	200f883a 	mov	r7,r4
    8190:	1204f03a 	xor	r2,r2,r8
    8194:	1287883a 	add	r3,r2,r10
    8198:	1a46703a 	and	r3,r3,r9
    819c:	0084303a 	nor	r2,zero,r2
    81a0:	10c4703a 	and	r2,r2,r3
    81a4:	10000b26 	beq	r2,zero,81d4 <memchr+0xc4>
    81a8:	20800003 	ldbu	r2,0(r4)
    81ac:	28800f26 	beq	r5,r2,81ec <memchr+0xdc>
    81b0:	20800043 	ldbu	r2,1(r4)
    81b4:	21c00044 	addi	r7,r4,1
    81b8:	28800c26 	beq	r5,r2,81ec <memchr+0xdc>
    81bc:	20800083 	ldbu	r2,2(r4)
    81c0:	21c00084 	addi	r7,r4,2
    81c4:	28800926 	beq	r5,r2,81ec <memchr+0xdc>
    81c8:	208000c3 	ldbu	r2,3(r4)
    81cc:	21c000c4 	addi	r7,r4,3
    81d0:	28800626 	beq	r5,r2,81ec <memchr+0xdc>
    81d4:	21000104 	addi	r4,r4,4
    81d8:	59bfea36 	bltu	r11,r6,8184 <memchr+0x74>
    81dc:	2007883a 	mov	r3,r4
    81e0:	003fd106 	br	8128 <memchr+0x18>
    81e4:	0005883a 	mov	r2,zero
    81e8:	f800283a 	ret
    81ec:	3805883a 	mov	r2,r7
    81f0:	f800283a 	ret

000081f4 <memmove>:
    81f4:	2807883a 	mov	r3,r5
    81f8:	2011883a 	mov	r8,r4
    81fc:	29000c2e 	bgeu	r5,r4,8230 <memmove+0x3c>
    8200:	298f883a 	add	r7,r5,r6
    8204:	21c00a2e 	bgeu	r4,r7,8230 <memmove+0x3c>
    8208:	30000726 	beq	r6,zero,8228 <memmove+0x34>
    820c:	2187883a 	add	r3,r4,r6
    8210:	198dc83a 	sub	r6,r3,r6
    8214:	39ffffc4 	addi	r7,r7,-1
    8218:	38800003 	ldbu	r2,0(r7)
    821c:	18ffffc4 	addi	r3,r3,-1
    8220:	18800005 	stb	r2,0(r3)
    8224:	19bffb1e 	bne	r3,r6,8214 <memmove+0x20>
    8228:	2005883a 	mov	r2,r4
    822c:	f800283a 	ret
    8230:	01c003c4 	movi	r7,15
    8234:	39800a36 	bltu	r7,r6,8260 <memmove+0x6c>
    8238:	303ffb26 	beq	r6,zero,8228 <memmove+0x34>
    823c:	400f883a 	mov	r7,r8
    8240:	320d883a 	add	r6,r6,r8
    8244:	28800003 	ldbu	r2,0(r5)
    8248:	29400044 	addi	r5,r5,1
    824c:	38800005 	stb	r2,0(r7)
    8250:	39c00044 	addi	r7,r7,1
    8254:	39bffb1e 	bne	r7,r6,8244 <memmove+0x50>
    8258:	2005883a 	mov	r2,r4
    825c:	f800283a 	ret
    8260:	1904b03a 	or	r2,r3,r4
    8264:	108000cc 	andi	r2,r2,3
    8268:	103ff31e 	bne	r2,zero,8238 <memmove+0x44>
    826c:	3811883a 	mov	r8,r7
    8270:	180b883a 	mov	r5,r3
    8274:	200f883a 	mov	r7,r4
    8278:	28c00017 	ldw	r3,0(r5)
    827c:	31bffc04 	addi	r6,r6,-16
    8280:	38c00015 	stw	r3,0(r7)
    8284:	28800117 	ldw	r2,4(r5)
    8288:	38800115 	stw	r2,4(r7)
    828c:	28c00217 	ldw	r3,8(r5)
    8290:	38c00215 	stw	r3,8(r7)
    8294:	28800317 	ldw	r2,12(r5)
    8298:	29400404 	addi	r5,r5,16
    829c:	38800315 	stw	r2,12(r7)
    82a0:	39c00404 	addi	r7,r7,16
    82a4:	41bff436 	bltu	r8,r6,8278 <memmove+0x84>
    82a8:	008000c4 	movi	r2,3
    82ac:	1180072e 	bgeu	r2,r6,82cc <memmove+0xd8>
    82b0:	1007883a 	mov	r3,r2
    82b4:	28800017 	ldw	r2,0(r5)
    82b8:	31bfff04 	addi	r6,r6,-4
    82bc:	29400104 	addi	r5,r5,4
    82c0:	38800015 	stw	r2,0(r7)
    82c4:	39c00104 	addi	r7,r7,4
    82c8:	19bffa36 	bltu	r3,r6,82b4 <memmove+0xc0>
    82cc:	3811883a 	mov	r8,r7
    82d0:	003fd906 	br	8238 <memmove+0x44>

000082d4 <_Bfree>:
    82d4:	28000826 	beq	r5,zero,82f8 <_Bfree+0x24>
    82d8:	28800117 	ldw	r2,4(r5)
    82dc:	21001317 	ldw	r4,76(r4)
    82e0:	1085883a 	add	r2,r2,r2
    82e4:	1085883a 	add	r2,r2,r2
    82e8:	1105883a 	add	r2,r2,r4
    82ec:	10c00017 	ldw	r3,0(r2)
    82f0:	28c00015 	stw	r3,0(r5)
    82f4:	11400015 	stw	r5,0(r2)
    82f8:	f800283a 	ret

000082fc <__hi0bits>:
    82fc:	20bfffec 	andhi	r2,r4,65535
    8300:	10001426 	beq	r2,zero,8354 <__hi0bits+0x58>
    8304:	0007883a 	mov	r3,zero
    8308:	20bfc02c 	andhi	r2,r4,65280
    830c:	1000021e 	bne	r2,zero,8318 <__hi0bits+0x1c>
    8310:	2008923a 	slli	r4,r4,8
    8314:	18c00204 	addi	r3,r3,8
    8318:	20bc002c 	andhi	r2,r4,61440
    831c:	1000021e 	bne	r2,zero,8328 <__hi0bits+0x2c>
    8320:	2008913a 	slli	r4,r4,4
    8324:	18c00104 	addi	r3,r3,4
    8328:	20b0002c 	andhi	r2,r4,49152
    832c:	1000031e 	bne	r2,zero,833c <__hi0bits+0x40>
    8330:	2105883a 	add	r2,r4,r4
    8334:	18c00084 	addi	r3,r3,2
    8338:	1089883a 	add	r4,r2,r2
    833c:	20000316 	blt	r4,zero,834c <__hi0bits+0x50>
    8340:	2090002c 	andhi	r2,r4,16384
    8344:	10000626 	beq	r2,zero,8360 <__hi0bits+0x64>
    8348:	18c00044 	addi	r3,r3,1
    834c:	1805883a 	mov	r2,r3
    8350:	f800283a 	ret
    8354:	2008943a 	slli	r4,r4,16
    8358:	00c00404 	movi	r3,16
    835c:	003fea06 	br	8308 <__hi0bits+0xc>
    8360:	00c00804 	movi	r3,32
    8364:	1805883a 	mov	r2,r3
    8368:	f800283a 	ret

0000836c <__lo0bits>:
    836c:	20c00017 	ldw	r3,0(r4)
    8370:	188001cc 	andi	r2,r3,7
    8374:	10000a26 	beq	r2,zero,83a0 <__lo0bits+0x34>
    8378:	1880004c 	andi	r2,r3,1
    837c:	1005003a 	cmpeq	r2,r2,zero
    8380:	10002126 	beq	r2,zero,8408 <__lo0bits+0x9c>
    8384:	1880008c 	andi	r2,r3,2
    8388:	1000251e 	bne	r2,zero,8420 <__lo0bits+0xb4>
    838c:	1804d0ba 	srli	r2,r3,2
    8390:	01400084 	movi	r5,2
    8394:	20800015 	stw	r2,0(r4)
    8398:	2805883a 	mov	r2,r5
    839c:	f800283a 	ret
    83a0:	18bfffcc 	andi	r2,r3,65535
    83a4:	10001526 	beq	r2,zero,83fc <__lo0bits+0x90>
    83a8:	000b883a 	mov	r5,zero
    83ac:	18803fcc 	andi	r2,r3,255
    83b0:	1000021e 	bne	r2,zero,83bc <__lo0bits+0x50>
    83b4:	1806d23a 	srli	r3,r3,8
    83b8:	29400204 	addi	r5,r5,8
    83bc:	188003cc 	andi	r2,r3,15
    83c0:	1000021e 	bne	r2,zero,83cc <__lo0bits+0x60>
    83c4:	1806d13a 	srli	r3,r3,4
    83c8:	29400104 	addi	r5,r5,4
    83cc:	188000cc 	andi	r2,r3,3
    83d0:	1000021e 	bne	r2,zero,83dc <__lo0bits+0x70>
    83d4:	1806d0ba 	srli	r3,r3,2
    83d8:	29400084 	addi	r5,r5,2
    83dc:	1880004c 	andi	r2,r3,1
    83e0:	1000031e 	bne	r2,zero,83f0 <__lo0bits+0x84>
    83e4:	1806d07a 	srli	r3,r3,1
    83e8:	18000a26 	beq	r3,zero,8414 <__lo0bits+0xa8>
    83ec:	29400044 	addi	r5,r5,1
    83f0:	2805883a 	mov	r2,r5
    83f4:	20c00015 	stw	r3,0(r4)
    83f8:	f800283a 	ret
    83fc:	1806d43a 	srli	r3,r3,16
    8400:	01400404 	movi	r5,16
    8404:	003fe906 	br	83ac <__lo0bits+0x40>
    8408:	000b883a 	mov	r5,zero
    840c:	2805883a 	mov	r2,r5
    8410:	f800283a 	ret
    8414:	01400804 	movi	r5,32
    8418:	2805883a 	mov	r2,r5
    841c:	f800283a 	ret
    8420:	1804d07a 	srli	r2,r3,1
    8424:	01400044 	movi	r5,1
    8428:	20800015 	stw	r2,0(r4)
    842c:	003fda06 	br	8398 <__lo0bits+0x2c>

00008430 <__mcmp>:
    8430:	20800417 	ldw	r2,16(r4)
    8434:	28c00417 	ldw	r3,16(r5)
    8438:	10cfc83a 	sub	r7,r2,r3
    843c:	38000c1e 	bne	r7,zero,8470 <__mcmp+0x40>
    8440:	18c5883a 	add	r2,r3,r3
    8444:	1085883a 	add	r2,r2,r2
    8448:	10c00504 	addi	r3,r2,20
    844c:	21000504 	addi	r4,r4,20
    8450:	28cb883a 	add	r5,r5,r3
    8454:	2085883a 	add	r2,r4,r2
    8458:	10bfff04 	addi	r2,r2,-4
    845c:	297fff04 	addi	r5,r5,-4
    8460:	11800017 	ldw	r6,0(r2)
    8464:	28c00017 	ldw	r3,0(r5)
    8468:	30c0031e 	bne	r6,r3,8478 <__mcmp+0x48>
    846c:	20bffa36 	bltu	r4,r2,8458 <__mcmp+0x28>
    8470:	3805883a 	mov	r2,r7
    8474:	f800283a 	ret
    8478:	30c00336 	bltu	r6,r3,8488 <__mcmp+0x58>
    847c:	01c00044 	movi	r7,1
    8480:	3805883a 	mov	r2,r7
    8484:	f800283a 	ret
    8488:	01ffffc4 	movi	r7,-1
    848c:	003ff806 	br	8470 <__mcmp+0x40>

00008490 <__ulp>:
    8490:	295ffc2c 	andhi	r5,r5,32752
    8494:	013f3034 	movhi	r4,64704
    8498:	290b883a 	add	r5,r5,r4
    849c:	0145c83a 	sub	r2,zero,r5
    84a0:	1007d53a 	srai	r3,r2,20
    84a4:	000d883a 	mov	r6,zero
    84a8:	0140040e 	bge	zero,r5,84bc <__ulp+0x2c>
    84ac:	280f883a 	mov	r7,r5
    84b0:	3807883a 	mov	r3,r7
    84b4:	3005883a 	mov	r2,r6
    84b8:	f800283a 	ret
    84bc:	008004c4 	movi	r2,19
    84c0:	193ffb04 	addi	r4,r3,-20
    84c4:	10c00c0e 	bge	r2,r3,84f8 <__ulp+0x68>
    84c8:	008007c4 	movi	r2,31
    84cc:	1107c83a 	sub	r3,r2,r4
    84d0:	00800784 	movi	r2,30
    84d4:	01400044 	movi	r5,1
    84d8:	11000216 	blt	r2,r4,84e4 <__ulp+0x54>
    84dc:	00800044 	movi	r2,1
    84e0:	10ca983a 	sll	r5,r2,r3
    84e4:	000f883a 	mov	r7,zero
    84e8:	280d883a 	mov	r6,r5
    84ec:	3807883a 	mov	r3,r7
    84f0:	3005883a 	mov	r2,r6
    84f4:	f800283a 	ret
    84f8:	00800234 	movhi	r2,8
    84fc:	10cfd83a 	sra	r7,r2,r3
    8500:	000d883a 	mov	r6,zero
    8504:	3005883a 	mov	r2,r6
    8508:	3807883a 	mov	r3,r7
    850c:	f800283a 	ret

00008510 <__b2d>:
    8510:	20800417 	ldw	r2,16(r4)
    8514:	defff904 	addi	sp,sp,-28
    8518:	dd000415 	stw	r20,16(sp)
    851c:	1085883a 	add	r2,r2,r2
    8520:	25000504 	addi	r20,r4,20
    8524:	1085883a 	add	r2,r2,r2
    8528:	dc000015 	stw	r16,0(sp)
    852c:	a0a1883a 	add	r16,r20,r2
    8530:	dd400515 	stw	r21,20(sp)
    8534:	857fff17 	ldw	r21,-4(r16)
    8538:	dc400115 	stw	r17,4(sp)
    853c:	dfc00615 	stw	ra,24(sp)
    8540:	a809883a 	mov	r4,r21
    8544:	2823883a 	mov	r17,r5
    8548:	dcc00315 	stw	r19,12(sp)
    854c:	dc800215 	stw	r18,8(sp)
    8550:	00082fc0 	call	82fc <__hi0bits>
    8554:	100b883a 	mov	r5,r2
    8558:	00800804 	movi	r2,32
    855c:	1145c83a 	sub	r2,r2,r5
    8560:	88800015 	stw	r2,0(r17)
    8564:	00800284 	movi	r2,10
    8568:	80ffff04 	addi	r3,r16,-4
    856c:	11401416 	blt	r2,r5,85c0 <__b2d+0xb0>
    8570:	008002c4 	movi	r2,11
    8574:	1149c83a 	sub	r4,r2,r5
    8578:	a0c02736 	bltu	r20,r3,8618 <__b2d+0x108>
    857c:	000d883a 	mov	r6,zero
    8580:	28800544 	addi	r2,r5,21
    8584:	a906d83a 	srl	r3,r21,r4
    8588:	a884983a 	sll	r2,r21,r2
    858c:	1ccffc34 	orhi	r19,r3,16368
    8590:	11a4b03a 	or	r18,r2,r6
    8594:	9005883a 	mov	r2,r18
    8598:	9807883a 	mov	r3,r19
    859c:	dfc00617 	ldw	ra,24(sp)
    85a0:	dd400517 	ldw	r21,20(sp)
    85a4:	dd000417 	ldw	r20,16(sp)
    85a8:	dcc00317 	ldw	r19,12(sp)
    85ac:	dc800217 	ldw	r18,8(sp)
    85b0:	dc400117 	ldw	r17,4(sp)
    85b4:	dc000017 	ldw	r16,0(sp)
    85b8:	dec00704 	addi	sp,sp,28
    85bc:	f800283a 	ret
    85c0:	a0c00e36 	bltu	r20,r3,85fc <__b2d+0xec>
    85c4:	293ffd44 	addi	r4,r5,-11
    85c8:	000d883a 	mov	r6,zero
    85cc:	20000f26 	beq	r4,zero,860c <__b2d+0xfc>
    85d0:	00800804 	movi	r2,32
    85d4:	110bc83a 	sub	r5,r2,r4
    85d8:	a0c01236 	bltu	r20,r3,8624 <__b2d+0x114>
    85dc:	000f883a 	mov	r7,zero
    85e0:	a904983a 	sll	r2,r21,r4
    85e4:	3146d83a 	srl	r3,r6,r5
    85e8:	3108983a 	sll	r4,r6,r4
    85ec:	108ffc34 	orhi	r2,r2,16368
    85f0:	18a6b03a 	or	r19,r3,r2
    85f4:	3924b03a 	or	r18,r7,r4
    85f8:	003fe606 	br	8594 <__b2d+0x84>
    85fc:	293ffd44 	addi	r4,r5,-11
    8600:	81bffe17 	ldw	r6,-8(r16)
    8604:	80fffe04 	addi	r3,r16,-8
    8608:	203ff11e 	bne	r4,zero,85d0 <__b2d+0xc0>
    860c:	accffc34 	orhi	r19,r21,16368
    8610:	3025883a 	mov	r18,r6
    8614:	003fdf06 	br	8594 <__b2d+0x84>
    8618:	18bfff17 	ldw	r2,-4(r3)
    861c:	110cd83a 	srl	r6,r2,r4
    8620:	003fd706 	br	8580 <__b2d+0x70>
    8624:	18bfff17 	ldw	r2,-4(r3)
    8628:	114ed83a 	srl	r7,r2,r5
    862c:	003fec06 	br	85e0 <__b2d+0xd0>

00008630 <__ratio>:
    8630:	defff904 	addi	sp,sp,-28
    8634:	dc400215 	stw	r17,8(sp)
    8638:	2823883a 	mov	r17,r5
    863c:	d80b883a 	mov	r5,sp
    8640:	dfc00615 	stw	ra,24(sp)
    8644:	dd000515 	stw	r20,20(sp)
    8648:	dcc00415 	stw	r19,16(sp)
    864c:	dc800315 	stw	r18,12(sp)
    8650:	2025883a 	mov	r18,r4
    8654:	00085100 	call	8510 <__b2d>
    8658:	8809883a 	mov	r4,r17
    865c:	d9400104 	addi	r5,sp,4
    8660:	1027883a 	mov	r19,r2
    8664:	1829883a 	mov	r20,r3
    8668:	00085100 	call	8510 <__b2d>
    866c:	89000417 	ldw	r4,16(r17)
    8670:	91c00417 	ldw	r7,16(r18)
    8674:	d9800117 	ldw	r6,4(sp)
    8678:	180b883a 	mov	r5,r3
    867c:	390fc83a 	sub	r7,r7,r4
    8680:	1009883a 	mov	r4,r2
    8684:	d8800017 	ldw	r2,0(sp)
    8688:	380e917a 	slli	r7,r7,5
    868c:	2011883a 	mov	r8,r4
    8690:	1185c83a 	sub	r2,r2,r6
    8694:	11c5883a 	add	r2,r2,r7
    8698:	1006953a 	slli	r3,r2,20
    869c:	2813883a 	mov	r9,r5
    86a0:	00800d0e 	bge	zero,r2,86d8 <__ratio+0xa8>
    86a4:	1d29883a 	add	r20,r3,r20
    86a8:	a00b883a 	mov	r5,r20
    86ac:	480f883a 	mov	r7,r9
    86b0:	9809883a 	mov	r4,r19
    86b4:	400d883a 	mov	r6,r8
    86b8:	000abc40 	call	abc4 <__divdf3>
    86bc:	dfc00617 	ldw	ra,24(sp)
    86c0:	dd000517 	ldw	r20,20(sp)
    86c4:	dcc00417 	ldw	r19,16(sp)
    86c8:	dc800317 	ldw	r18,12(sp)
    86cc:	dc400217 	ldw	r17,8(sp)
    86d0:	dec00704 	addi	sp,sp,28
    86d4:	f800283a 	ret
    86d8:	28d3c83a 	sub	r9,r5,r3
    86dc:	003ff206 	br	86a8 <__ratio+0x78>

000086e0 <_mprec_log10>:
    86e0:	defffe04 	addi	sp,sp,-8
    86e4:	008005c4 	movi	r2,23
    86e8:	dc000015 	stw	r16,0(sp)
    86ec:	dfc00115 	stw	ra,4(sp)
    86f0:	2021883a 	mov	r16,r4
    86f4:	11000c16 	blt	r2,r4,8728 <_mprec_log10+0x48>
    86f8:	200490fa 	slli	r2,r4,3
    86fc:	00c00074 	movhi	r3,1
    8700:	18ca8404 	addi	r3,r3,10768
    8704:	10c5883a 	add	r2,r2,r3
    8708:	12400117 	ldw	r9,4(r2)
    870c:	12000017 	ldw	r8,0(r2)
    8710:	4807883a 	mov	r3,r9
    8714:	4005883a 	mov	r2,r8
    8718:	dfc00117 	ldw	ra,4(sp)
    871c:	dc000017 	ldw	r16,0(sp)
    8720:	dec00204 	addi	sp,sp,8
    8724:	f800283a 	ret
    8728:	0011883a 	mov	r8,zero
    872c:	024ffc34 	movhi	r9,16368
    8730:	0005883a 	mov	r2,zero
    8734:	00d00934 	movhi	r3,16420
    8738:	480b883a 	mov	r5,r9
    873c:	4009883a 	mov	r4,r8
    8740:	180f883a 	mov	r7,r3
    8744:	100d883a 	mov	r6,r2
    8748:	000219c0 	call	219c <__muldf3>
    874c:	843fffc4 	addi	r16,r16,-1
    8750:	1011883a 	mov	r8,r2
    8754:	1813883a 	mov	r9,r3
    8758:	803ff51e 	bne	r16,zero,8730 <_mprec_log10+0x50>
    875c:	4005883a 	mov	r2,r8
    8760:	4807883a 	mov	r3,r9
    8764:	dfc00117 	ldw	ra,4(sp)
    8768:	dc000017 	ldw	r16,0(sp)
    876c:	dec00204 	addi	sp,sp,8
    8770:	f800283a 	ret

00008774 <__copybits>:
    8774:	297fffc4 	addi	r5,r5,-1
    8778:	30800417 	ldw	r2,16(r6)
    877c:	280bd17a 	srai	r5,r5,5
    8780:	31800504 	addi	r6,r6,20
    8784:	1085883a 	add	r2,r2,r2
    8788:	294b883a 	add	r5,r5,r5
    878c:	294b883a 	add	r5,r5,r5
    8790:	1085883a 	add	r2,r2,r2
    8794:	290b883a 	add	r5,r5,r4
    8798:	3087883a 	add	r3,r6,r2
    879c:	29400104 	addi	r5,r5,4
    87a0:	30c0052e 	bgeu	r6,r3,87b8 <__copybits+0x44>
    87a4:	30800017 	ldw	r2,0(r6)
    87a8:	31800104 	addi	r6,r6,4
    87ac:	20800015 	stw	r2,0(r4)
    87b0:	21000104 	addi	r4,r4,4
    87b4:	30fffb36 	bltu	r6,r3,87a4 <__copybits+0x30>
    87b8:	2140032e 	bgeu	r4,r5,87c8 <__copybits+0x54>
    87bc:	20000015 	stw	zero,0(r4)
    87c0:	21000104 	addi	r4,r4,4
    87c4:	217ffd36 	bltu	r4,r5,87bc <__copybits+0x48>
    87c8:	f800283a 	ret

000087cc <__any_on>:
    87cc:	20800417 	ldw	r2,16(r4)
    87d0:	2807d17a 	srai	r3,r5,5
    87d4:	21000504 	addi	r4,r4,20
    87d8:	10c00d0e 	bge	r2,r3,8810 <__any_on+0x44>
    87dc:	1085883a 	add	r2,r2,r2
    87e0:	1085883a 	add	r2,r2,r2
    87e4:	208d883a 	add	r6,r4,r2
    87e8:	2180182e 	bgeu	r4,r6,884c <__any_on+0x80>
    87ec:	30bfff17 	ldw	r2,-4(r6)
    87f0:	30ffff04 	addi	r3,r6,-4
    87f4:	1000041e 	bne	r2,zero,8808 <__any_on+0x3c>
    87f8:	20c0142e 	bgeu	r4,r3,884c <__any_on+0x80>
    87fc:	18ffff04 	addi	r3,r3,-4
    8800:	18800017 	ldw	r2,0(r3)
    8804:	103ffc26 	beq	r2,zero,87f8 <__any_on+0x2c>
    8808:	00800044 	movi	r2,1
    880c:	f800283a 	ret
    8810:	18800a0e 	bge	r3,r2,883c <__any_on+0x70>
    8814:	294007cc 	andi	r5,r5,31
    8818:	28000826 	beq	r5,zero,883c <__any_on+0x70>
    881c:	18c5883a 	add	r2,r3,r3
    8820:	1085883a 	add	r2,r2,r2
    8824:	208d883a 	add	r6,r4,r2
    8828:	30c00017 	ldw	r3,0(r6)
    882c:	1944d83a 	srl	r2,r3,r5
    8830:	1144983a 	sll	r2,r2,r5
    8834:	18bff41e 	bne	r3,r2,8808 <__any_on+0x3c>
    8838:	003feb06 	br	87e8 <__any_on+0x1c>
    883c:	18c5883a 	add	r2,r3,r3
    8840:	1085883a 	add	r2,r2,r2
    8844:	208d883a 	add	r6,r4,r2
    8848:	003fe706 	br	87e8 <__any_on+0x1c>
    884c:	0005883a 	mov	r2,zero
    8850:	f800283a 	ret

00008854 <_Balloc>:
    8854:	20c01317 	ldw	r3,76(r4)
    8858:	defffb04 	addi	sp,sp,-20
    885c:	dcc00315 	stw	r19,12(sp)
    8860:	dc800215 	stw	r18,8(sp)
    8864:	dfc00415 	stw	ra,16(sp)
    8868:	2825883a 	mov	r18,r5
    886c:	dc400115 	stw	r17,4(sp)
    8870:	dc000015 	stw	r16,0(sp)
    8874:	2027883a 	mov	r19,r4
    8878:	01800404 	movi	r6,16
    887c:	01400104 	movi	r5,4
    8880:	18001726 	beq	r3,zero,88e0 <_Balloc+0x8c>
    8884:	01400044 	movi	r5,1
    8888:	9485883a 	add	r2,r18,r18
    888c:	2ca2983a 	sll	r17,r5,r18
    8890:	1085883a 	add	r2,r2,r2
    8894:	10c7883a 	add	r3,r2,r3
    8898:	1c000017 	ldw	r16,0(r3)
    889c:	8c4d883a 	add	r6,r17,r17
    88a0:	318d883a 	add	r6,r6,r6
    88a4:	9809883a 	mov	r4,r19
    88a8:	31800504 	addi	r6,r6,20
    88ac:	80001226 	beq	r16,zero,88f8 <_Balloc+0xa4>
    88b0:	80800017 	ldw	r2,0(r16)
    88b4:	18800015 	stw	r2,0(r3)
    88b8:	80000415 	stw	zero,16(r16)
    88bc:	80000315 	stw	zero,12(r16)
    88c0:	8005883a 	mov	r2,r16
    88c4:	dfc00417 	ldw	ra,16(sp)
    88c8:	dcc00317 	ldw	r19,12(sp)
    88cc:	dc800217 	ldw	r18,8(sp)
    88d0:	dc400117 	ldw	r17,4(sp)
    88d4:	dc000017 	ldw	r16,0(sp)
    88d8:	dec00504 	addi	sp,sp,20
    88dc:	f800283a 	ret
    88e0:	0009c1c0 	call	9c1c <_calloc_r>
    88e4:	1007883a 	mov	r3,r2
    88e8:	0021883a 	mov	r16,zero
    88ec:	98801315 	stw	r2,76(r19)
    88f0:	103fe41e 	bne	r2,zero,8884 <_Balloc+0x30>
    88f4:	003ff206 	br	88c0 <_Balloc+0x6c>
    88f8:	0009c1c0 	call	9c1c <_calloc_r>
    88fc:	103ff026 	beq	r2,zero,88c0 <_Balloc+0x6c>
    8900:	1021883a 	mov	r16,r2
    8904:	14800115 	stw	r18,4(r2)
    8908:	14400215 	stw	r17,8(r2)
    890c:	003fea06 	br	88b8 <_Balloc+0x64>

00008910 <__d2b>:
    8910:	defff504 	addi	sp,sp,-44
    8914:	dcc00515 	stw	r19,20(sp)
    8918:	04c00044 	movi	r19,1
    891c:	dc000215 	stw	r16,8(sp)
    8920:	2821883a 	mov	r16,r5
    8924:	980b883a 	mov	r5,r19
    8928:	ddc00915 	stw	r23,36(sp)
    892c:	dd800815 	stw	r22,32(sp)
    8930:	dd400715 	stw	r21,28(sp)
    8934:	dd000615 	stw	r20,24(sp)
    8938:	dc800415 	stw	r18,16(sp)
    893c:	dc400315 	stw	r17,12(sp)
    8940:	dfc00a15 	stw	ra,40(sp)
    8944:	3023883a 	mov	r17,r6
    8948:	382d883a 	mov	r22,r7
    894c:	ddc00b17 	ldw	r23,44(sp)
    8950:	00088540 	call	8854 <_Balloc>
    8954:	1025883a 	mov	r18,r2
    8958:	00a00034 	movhi	r2,32768
    895c:	10bfffc4 	addi	r2,r2,-1
    8960:	8888703a 	and	r4,r17,r2
    8964:	202ad53a 	srli	r21,r4,20
    8968:	00800434 	movhi	r2,16
    896c:	10bfffc4 	addi	r2,r2,-1
    8970:	8886703a 	and	r3,r17,r2
    8974:	a829003a 	cmpeq	r20,r21,zero
    8978:	800b883a 	mov	r5,r16
    897c:	d8c00115 	stw	r3,4(sp)
    8980:	94000504 	addi	r16,r18,20
    8984:	a000021e 	bne	r20,zero,8990 <__d2b+0x80>
    8988:	18c00434 	orhi	r3,r3,16
    898c:	d8c00115 	stw	r3,4(sp)
    8990:	28002726 	beq	r5,zero,8a30 <__d2b+0x120>
    8994:	d809883a 	mov	r4,sp
    8998:	d9400015 	stw	r5,0(sp)
    899c:	000836c0 	call	836c <__lo0bits>
    89a0:	100d883a 	mov	r6,r2
    89a4:	10003526 	beq	r2,zero,8a7c <__d2b+0x16c>
    89a8:	d8c00117 	ldw	r3,4(sp)
    89ac:	00800804 	movi	r2,32
    89b0:	1185c83a 	sub	r2,r2,r6
    89b4:	d9000017 	ldw	r4,0(sp)
    89b8:	1886983a 	sll	r3,r3,r2
    89bc:	1906b03a 	or	r3,r3,r4
    89c0:	90c00515 	stw	r3,20(r18)
    89c4:	d8c00117 	ldw	r3,4(sp)
    89c8:	1986d83a 	srl	r3,r3,r6
    89cc:	d8c00115 	stw	r3,4(sp)
    89d0:	180b003a 	cmpeq	r5,r3,zero
    89d4:	00800084 	movi	r2,2
    89d8:	114bc83a 	sub	r5,r2,r5
    89dc:	80c00115 	stw	r3,4(r16)
    89e0:	91400415 	stw	r5,16(r18)
    89e4:	a0001a1e 	bne	r20,zero,8a50 <__d2b+0x140>
    89e8:	3545883a 	add	r2,r6,r21
    89ec:	10bef344 	addi	r2,r2,-1075
    89f0:	00c00d44 	movi	r3,53
    89f4:	b0800015 	stw	r2,0(r22)
    89f8:	1987c83a 	sub	r3,r3,r6
    89fc:	b8c00015 	stw	r3,0(r23)
    8a00:	9005883a 	mov	r2,r18
    8a04:	dfc00a17 	ldw	ra,40(sp)
    8a08:	ddc00917 	ldw	r23,36(sp)
    8a0c:	dd800817 	ldw	r22,32(sp)
    8a10:	dd400717 	ldw	r21,28(sp)
    8a14:	dd000617 	ldw	r20,24(sp)
    8a18:	dcc00517 	ldw	r19,20(sp)
    8a1c:	dc800417 	ldw	r18,16(sp)
    8a20:	dc400317 	ldw	r17,12(sp)
    8a24:	dc000217 	ldw	r16,8(sp)
    8a28:	dec00b04 	addi	sp,sp,44
    8a2c:	f800283a 	ret
    8a30:	d9000104 	addi	r4,sp,4
    8a34:	000836c0 	call	836c <__lo0bits>
    8a38:	11800804 	addi	r6,r2,32
    8a3c:	d8800117 	ldw	r2,4(sp)
    8a40:	94c00415 	stw	r19,16(r18)
    8a44:	980b883a 	mov	r5,r19
    8a48:	90800515 	stw	r2,20(r18)
    8a4c:	a03fe626 	beq	r20,zero,89e8 <__d2b+0xd8>
    8a50:	2945883a 	add	r2,r5,r5
    8a54:	1085883a 	add	r2,r2,r2
    8a58:	1405883a 	add	r2,r2,r16
    8a5c:	113fff17 	ldw	r4,-4(r2)
    8a60:	30fef384 	addi	r3,r6,-1074
    8a64:	2820917a 	slli	r16,r5,5
    8a68:	b0c00015 	stw	r3,0(r22)
    8a6c:	00082fc0 	call	82fc <__hi0bits>
    8a70:	80a1c83a 	sub	r16,r16,r2
    8a74:	bc000015 	stw	r16,0(r23)
    8a78:	003fe106 	br	8a00 <__d2b+0xf0>
    8a7c:	d8800017 	ldw	r2,0(sp)
    8a80:	90800515 	stw	r2,20(r18)
    8a84:	d8c00117 	ldw	r3,4(sp)
    8a88:	003fd106 	br	89d0 <__d2b+0xc0>

00008a8c <__mdiff>:
    8a8c:	defffb04 	addi	sp,sp,-20
    8a90:	dc000015 	stw	r16,0(sp)
    8a94:	2821883a 	mov	r16,r5
    8a98:	dc800215 	stw	r18,8(sp)
    8a9c:	300b883a 	mov	r5,r6
    8aa0:	2025883a 	mov	r18,r4
    8aa4:	8009883a 	mov	r4,r16
    8aa8:	dc400115 	stw	r17,4(sp)
    8aac:	dfc00415 	stw	ra,16(sp)
    8ab0:	dcc00315 	stw	r19,12(sp)
    8ab4:	3023883a 	mov	r17,r6
    8ab8:	00084300 	call	8430 <__mcmp>
    8abc:	10004226 	beq	r2,zero,8bc8 <__mdiff+0x13c>
    8ac0:	10005016 	blt	r2,zero,8c04 <__mdiff+0x178>
    8ac4:	0027883a 	mov	r19,zero
    8ac8:	81400117 	ldw	r5,4(r16)
    8acc:	9009883a 	mov	r4,r18
    8ad0:	00088540 	call	8854 <_Balloc>
    8ad4:	1019883a 	mov	r12,r2
    8ad8:	82800417 	ldw	r10,16(r16)
    8adc:	88800417 	ldw	r2,16(r17)
    8ae0:	81800504 	addi	r6,r16,20
    8ae4:	5287883a 	add	r3,r10,r10
    8ae8:	1085883a 	add	r2,r2,r2
    8aec:	18c7883a 	add	r3,r3,r3
    8af0:	1085883a 	add	r2,r2,r2
    8af4:	8a000504 	addi	r8,r17,20
    8af8:	64c00315 	stw	r19,12(r12)
    8afc:	30db883a 	add	r13,r6,r3
    8b00:	4097883a 	add	r11,r8,r2
    8b04:	61c00504 	addi	r7,r12,20
    8b08:	0013883a 	mov	r9,zero
    8b0c:	31000017 	ldw	r4,0(r6)
    8b10:	41400017 	ldw	r5,0(r8)
    8b14:	42000104 	addi	r8,r8,4
    8b18:	20bfffcc 	andi	r2,r4,65535
    8b1c:	28ffffcc 	andi	r3,r5,65535
    8b20:	10c5c83a 	sub	r2,r2,r3
    8b24:	1245883a 	add	r2,r2,r9
    8b28:	2008d43a 	srli	r4,r4,16
    8b2c:	280ad43a 	srli	r5,r5,16
    8b30:	1007d43a 	srai	r3,r2,16
    8b34:	3880000d 	sth	r2,0(r7)
    8b38:	2149c83a 	sub	r4,r4,r5
    8b3c:	20c9883a 	add	r4,r4,r3
    8b40:	3900008d 	sth	r4,2(r7)
    8b44:	31800104 	addi	r6,r6,4
    8b48:	39c00104 	addi	r7,r7,4
    8b4c:	2013d43a 	srai	r9,r4,16
    8b50:	42ffee36 	bltu	r8,r11,8b0c <__mdiff+0x80>
    8b54:	33400c2e 	bgeu	r6,r13,8b88 <__mdiff+0xfc>
    8b58:	30800017 	ldw	r2,0(r6)
    8b5c:	31800104 	addi	r6,r6,4
    8b60:	10ffffcc 	andi	r3,r2,65535
    8b64:	1a47883a 	add	r3,r3,r9
    8b68:	1004d43a 	srli	r2,r2,16
    8b6c:	1809d43a 	srai	r4,r3,16
    8b70:	38c0000d 	sth	r3,0(r7)
    8b74:	1105883a 	add	r2,r2,r4
    8b78:	3880008d 	sth	r2,2(r7)
    8b7c:	1013d43a 	srai	r9,r2,16
    8b80:	39c00104 	addi	r7,r7,4
    8b84:	337ff436 	bltu	r6,r13,8b58 <__mdiff+0xcc>
    8b88:	38bfff17 	ldw	r2,-4(r7)
    8b8c:	38ffff04 	addi	r3,r7,-4
    8b90:	1000041e 	bne	r2,zero,8ba4 <__mdiff+0x118>
    8b94:	18ffff04 	addi	r3,r3,-4
    8b98:	18800017 	ldw	r2,0(r3)
    8b9c:	52bfffc4 	addi	r10,r10,-1
    8ba0:	103ffc26 	beq	r2,zero,8b94 <__mdiff+0x108>
    8ba4:	6005883a 	mov	r2,r12
    8ba8:	62800415 	stw	r10,16(r12)
    8bac:	dfc00417 	ldw	ra,16(sp)
    8bb0:	dcc00317 	ldw	r19,12(sp)
    8bb4:	dc800217 	ldw	r18,8(sp)
    8bb8:	dc400117 	ldw	r17,4(sp)
    8bbc:	dc000017 	ldw	r16,0(sp)
    8bc0:	dec00504 	addi	sp,sp,20
    8bc4:	f800283a 	ret
    8bc8:	9009883a 	mov	r4,r18
    8bcc:	000b883a 	mov	r5,zero
    8bd0:	00088540 	call	8854 <_Balloc>
    8bd4:	1019883a 	mov	r12,r2
    8bd8:	00800044 	movi	r2,1
    8bdc:	60800415 	stw	r2,16(r12)
    8be0:	6005883a 	mov	r2,r12
    8be4:	60000515 	stw	zero,20(r12)
    8be8:	dfc00417 	ldw	ra,16(sp)
    8bec:	dcc00317 	ldw	r19,12(sp)
    8bf0:	dc800217 	ldw	r18,8(sp)
    8bf4:	dc400117 	ldw	r17,4(sp)
    8bf8:	dc000017 	ldw	r16,0(sp)
    8bfc:	dec00504 	addi	sp,sp,20
    8c00:	f800283a 	ret
    8c04:	880d883a 	mov	r6,r17
    8c08:	04c00044 	movi	r19,1
    8c0c:	8023883a 	mov	r17,r16
    8c10:	3021883a 	mov	r16,r6
    8c14:	003fac06 	br	8ac8 <__mdiff+0x3c>

00008c18 <__lshift>:
    8c18:	defff904 	addi	sp,sp,-28
    8c1c:	28800417 	ldw	r2,16(r5)
    8c20:	dc000015 	stw	r16,0(sp)
    8c24:	3021d17a 	srai	r16,r6,5
    8c28:	28c00217 	ldw	r3,8(r5)
    8c2c:	10800044 	addi	r2,r2,1
    8c30:	dc400115 	stw	r17,4(sp)
    8c34:	80a3883a 	add	r17,r16,r2
    8c38:	dd400515 	stw	r21,20(sp)
    8c3c:	dd000415 	stw	r20,16(sp)
    8c40:	dc800215 	stw	r18,8(sp)
    8c44:	dfc00615 	stw	ra,24(sp)
    8c48:	2825883a 	mov	r18,r5
    8c4c:	dcc00315 	stw	r19,12(sp)
    8c50:	3029883a 	mov	r20,r6
    8c54:	202b883a 	mov	r21,r4
    8c58:	29400117 	ldw	r5,4(r5)
    8c5c:	1c40030e 	bge	r3,r17,8c6c <__lshift+0x54>
    8c60:	18c7883a 	add	r3,r3,r3
    8c64:	29400044 	addi	r5,r5,1
    8c68:	1c7ffd16 	blt	r3,r17,8c60 <__lshift+0x48>
    8c6c:	a809883a 	mov	r4,r21
    8c70:	00088540 	call	8854 <_Balloc>
    8c74:	1027883a 	mov	r19,r2
    8c78:	11400504 	addi	r5,r2,20
    8c7c:	0400090e 	bge	zero,r16,8ca4 <__lshift+0x8c>
    8c80:	2805883a 	mov	r2,r5
    8c84:	0007883a 	mov	r3,zero
    8c88:	18c00044 	addi	r3,r3,1
    8c8c:	10000015 	stw	zero,0(r2)
    8c90:	10800104 	addi	r2,r2,4
    8c94:	80fffc1e 	bne	r16,r3,8c88 <__lshift+0x70>
    8c98:	8405883a 	add	r2,r16,r16
    8c9c:	1085883a 	add	r2,r2,r2
    8ca0:	288b883a 	add	r5,r5,r2
    8ca4:	90800417 	ldw	r2,16(r18)
    8ca8:	91000504 	addi	r4,r18,20
    8cac:	a18007cc 	andi	r6,r20,31
    8cb0:	1085883a 	add	r2,r2,r2
    8cb4:	1085883a 	add	r2,r2,r2
    8cb8:	208f883a 	add	r7,r4,r2
    8cbc:	30001e26 	beq	r6,zero,8d38 <__lshift+0x120>
    8cc0:	00800804 	movi	r2,32
    8cc4:	1191c83a 	sub	r8,r2,r6
    8cc8:	0007883a 	mov	r3,zero
    8ccc:	20800017 	ldw	r2,0(r4)
    8cd0:	1184983a 	sll	r2,r2,r6
    8cd4:	1884b03a 	or	r2,r3,r2
    8cd8:	28800015 	stw	r2,0(r5)
    8cdc:	20c00017 	ldw	r3,0(r4)
    8ce0:	21000104 	addi	r4,r4,4
    8ce4:	29400104 	addi	r5,r5,4
    8ce8:	1a06d83a 	srl	r3,r3,r8
    8cec:	21fff736 	bltu	r4,r7,8ccc <__lshift+0xb4>
    8cf0:	28c00015 	stw	r3,0(r5)
    8cf4:	18000126 	beq	r3,zero,8cfc <__lshift+0xe4>
    8cf8:	8c400044 	addi	r17,r17,1
    8cfc:	88bfffc4 	addi	r2,r17,-1
    8d00:	98800415 	stw	r2,16(r19)
    8d04:	a809883a 	mov	r4,r21
    8d08:	900b883a 	mov	r5,r18
    8d0c:	00082d40 	call	82d4 <_Bfree>
    8d10:	9805883a 	mov	r2,r19
    8d14:	dfc00617 	ldw	ra,24(sp)
    8d18:	dd400517 	ldw	r21,20(sp)
    8d1c:	dd000417 	ldw	r20,16(sp)
    8d20:	dcc00317 	ldw	r19,12(sp)
    8d24:	dc800217 	ldw	r18,8(sp)
    8d28:	dc400117 	ldw	r17,4(sp)
    8d2c:	dc000017 	ldw	r16,0(sp)
    8d30:	dec00704 	addi	sp,sp,28
    8d34:	f800283a 	ret
    8d38:	20800017 	ldw	r2,0(r4)
    8d3c:	21000104 	addi	r4,r4,4
    8d40:	28800015 	stw	r2,0(r5)
    8d44:	29400104 	addi	r5,r5,4
    8d48:	21ffec2e 	bgeu	r4,r7,8cfc <__lshift+0xe4>
    8d4c:	20800017 	ldw	r2,0(r4)
    8d50:	21000104 	addi	r4,r4,4
    8d54:	28800015 	stw	r2,0(r5)
    8d58:	29400104 	addi	r5,r5,4
    8d5c:	21fff636 	bltu	r4,r7,8d38 <__lshift+0x120>
    8d60:	003fe606 	br	8cfc <__lshift+0xe4>

00008d64 <__multiply>:
    8d64:	defff904 	addi	sp,sp,-28
    8d68:	dcc00315 	stw	r19,12(sp)
    8d6c:	dc800215 	stw	r18,8(sp)
    8d70:	2cc00417 	ldw	r19,16(r5)
    8d74:	34800417 	ldw	r18,16(r6)
    8d78:	dd000415 	stw	r20,16(sp)
    8d7c:	dc400115 	stw	r17,4(sp)
    8d80:	dfc00615 	stw	ra,24(sp)
    8d84:	dd400515 	stw	r21,20(sp)
    8d88:	dc000015 	stw	r16,0(sp)
    8d8c:	2823883a 	mov	r17,r5
    8d90:	3029883a 	mov	r20,r6
    8d94:	9c80040e 	bge	r19,r18,8da8 <__multiply+0x44>
    8d98:	9027883a 	mov	r19,r18
    8d9c:	2c800417 	ldw	r18,16(r5)
    8da0:	2829883a 	mov	r20,r5
    8da4:	3023883a 	mov	r17,r6
    8da8:	88800217 	ldw	r2,8(r17)
    8dac:	9ca1883a 	add	r16,r19,r18
    8db0:	89400117 	ldw	r5,4(r17)
    8db4:	1400010e 	bge	r2,r16,8dbc <__multiply+0x58>
    8db8:	29400044 	addi	r5,r5,1
    8dbc:	00088540 	call	8854 <_Balloc>
    8dc0:	102b883a 	mov	r21,r2
    8dc4:	8405883a 	add	r2,r16,r16
    8dc8:	1085883a 	add	r2,r2,r2
    8dcc:	a9000504 	addi	r4,r21,20
    8dd0:	209d883a 	add	r14,r4,r2
    8dd4:	2380042e 	bgeu	r4,r14,8de8 <__multiply+0x84>
    8dd8:	2005883a 	mov	r2,r4
    8ddc:	10000015 	stw	zero,0(r2)
    8de0:	10800104 	addi	r2,r2,4
    8de4:	13bffd36 	bltu	r2,r14,8ddc <__multiply+0x78>
    8de8:	9485883a 	add	r2,r18,r18
    8dec:	9cc7883a 	add	r3,r19,r19
    8df0:	a1800504 	addi	r6,r20,20
    8df4:	1085883a 	add	r2,r2,r2
    8df8:	8b400504 	addi	r13,r17,20
    8dfc:	18c7883a 	add	r3,r3,r3
    8e00:	309f883a 	add	r15,r6,r2
    8e04:	68d7883a 	add	r11,r13,r3
    8e08:	33c03b2e 	bgeu	r6,r15,8ef8 <__multiply+0x194>
    8e0c:	2019883a 	mov	r12,r4
    8e10:	30800017 	ldw	r2,0(r6)
    8e14:	127fffcc 	andi	r9,r2,65535
    8e18:	48001826 	beq	r9,zero,8e7c <__multiply+0x118>
    8e1c:	6811883a 	mov	r8,r13
    8e20:	600f883a 	mov	r7,r12
    8e24:	0015883a 	mov	r10,zero
    8e28:	40c00017 	ldw	r3,0(r8)
    8e2c:	39400017 	ldw	r5,0(r7)
    8e30:	42000104 	addi	r8,r8,4
    8e34:	193fffcc 	andi	r4,r3,65535
    8e38:	4909383a 	mul	r4,r9,r4
    8e3c:	1806d43a 	srli	r3,r3,16
    8e40:	28bfffcc 	andi	r2,r5,65535
    8e44:	5085883a 	add	r2,r10,r2
    8e48:	2089883a 	add	r4,r4,r2
    8e4c:	48c7383a 	mul	r3,r9,r3
    8e50:	280ad43a 	srli	r5,r5,16
    8e54:	2004d43a 	srli	r2,r4,16
    8e58:	3900000d 	sth	r4,0(r7)
    8e5c:	1947883a 	add	r3,r3,r5
    8e60:	10c5883a 	add	r2,r2,r3
    8e64:	3880008d 	sth	r2,2(r7)
    8e68:	1014d43a 	srli	r10,r2,16
    8e6c:	39c00104 	addi	r7,r7,4
    8e70:	42ffed36 	bltu	r8,r11,8e28 <__multiply+0xc4>
    8e74:	3a800015 	stw	r10,0(r7)
    8e78:	30800017 	ldw	r2,0(r6)
    8e7c:	1012d43a 	srli	r9,r2,16
    8e80:	48001926 	beq	r9,zero,8ee8 <__multiply+0x184>
    8e84:	60800017 	ldw	r2,0(r12)
    8e88:	6811883a 	mov	r8,r13
    8e8c:	600f883a 	mov	r7,r12
    8e90:	0015883a 	mov	r10,zero
    8e94:	100b883a 	mov	r5,r2
    8e98:	41000017 	ldw	r4,0(r8)
    8e9c:	2806d43a 	srli	r3,r5,16
    8ea0:	3880000d 	sth	r2,0(r7)
    8ea4:	20bfffcc 	andi	r2,r4,65535
    8ea8:	4885383a 	mul	r2,r9,r2
    8eac:	50c7883a 	add	r3,r10,r3
    8eb0:	2008d43a 	srli	r4,r4,16
    8eb4:	10c5883a 	add	r2,r2,r3
    8eb8:	3880008d 	sth	r2,2(r7)
    8ebc:	39c00104 	addi	r7,r7,4
    8ec0:	39400017 	ldw	r5,0(r7)
    8ec4:	4909383a 	mul	r4,r9,r4
    8ec8:	1004d43a 	srli	r2,r2,16
    8ecc:	28ffffcc 	andi	r3,r5,65535
    8ed0:	20c9883a 	add	r4,r4,r3
    8ed4:	1105883a 	add	r2,r2,r4
    8ed8:	42000104 	addi	r8,r8,4
    8edc:	1014d43a 	srli	r10,r2,16
    8ee0:	42ffed36 	bltu	r8,r11,8e98 <__multiply+0x134>
    8ee4:	38800015 	stw	r2,0(r7)
    8ee8:	31800104 	addi	r6,r6,4
    8eec:	33c0022e 	bgeu	r6,r15,8ef8 <__multiply+0x194>
    8ef0:	63000104 	addi	r12,r12,4
    8ef4:	003fc606 	br	8e10 <__multiply+0xac>
    8ef8:	0400090e 	bge	zero,r16,8f20 <__multiply+0x1bc>
    8efc:	70bfff17 	ldw	r2,-4(r14)
    8f00:	70ffff04 	addi	r3,r14,-4
    8f04:	10000326 	beq	r2,zero,8f14 <__multiply+0x1b0>
    8f08:	00000506 	br	8f20 <__multiply+0x1bc>
    8f0c:	18800017 	ldw	r2,0(r3)
    8f10:	1000031e 	bne	r2,zero,8f20 <__multiply+0x1bc>
    8f14:	843fffc4 	addi	r16,r16,-1
    8f18:	18ffff04 	addi	r3,r3,-4
    8f1c:	803ffb1e 	bne	r16,zero,8f0c <__multiply+0x1a8>
    8f20:	a805883a 	mov	r2,r21
    8f24:	ac000415 	stw	r16,16(r21)
    8f28:	dfc00617 	ldw	ra,24(sp)
    8f2c:	dd400517 	ldw	r21,20(sp)
    8f30:	dd000417 	ldw	r20,16(sp)
    8f34:	dcc00317 	ldw	r19,12(sp)
    8f38:	dc800217 	ldw	r18,8(sp)
    8f3c:	dc400117 	ldw	r17,4(sp)
    8f40:	dc000017 	ldw	r16,0(sp)
    8f44:	dec00704 	addi	sp,sp,28
    8f48:	f800283a 	ret

00008f4c <__i2b>:
    8f4c:	defffd04 	addi	sp,sp,-12
    8f50:	dc000015 	stw	r16,0(sp)
    8f54:	04000044 	movi	r16,1
    8f58:	dc800115 	stw	r18,4(sp)
    8f5c:	2825883a 	mov	r18,r5
    8f60:	800b883a 	mov	r5,r16
    8f64:	dfc00215 	stw	ra,8(sp)
    8f68:	00088540 	call	8854 <_Balloc>
    8f6c:	14000415 	stw	r16,16(r2)
    8f70:	14800515 	stw	r18,20(r2)
    8f74:	dfc00217 	ldw	ra,8(sp)
    8f78:	dc800117 	ldw	r18,4(sp)
    8f7c:	dc000017 	ldw	r16,0(sp)
    8f80:	dec00304 	addi	sp,sp,12
    8f84:	f800283a 	ret

00008f88 <__multadd>:
    8f88:	defffa04 	addi	sp,sp,-24
    8f8c:	dc800215 	stw	r18,8(sp)
    8f90:	2c800417 	ldw	r18,16(r5)
    8f94:	dd000415 	stw	r20,16(sp)
    8f98:	dcc00315 	stw	r19,12(sp)
    8f9c:	dc000015 	stw	r16,0(sp)
    8fa0:	dfc00515 	stw	ra,20(sp)
    8fa4:	3821883a 	mov	r16,r7
    8fa8:	dc400115 	stw	r17,4(sp)
    8fac:	2827883a 	mov	r19,r5
    8fb0:	2029883a 	mov	r20,r4
    8fb4:	2a000504 	addi	r8,r5,20
    8fb8:	000f883a 	mov	r7,zero
    8fbc:	40800017 	ldw	r2,0(r8)
    8fc0:	39c00044 	addi	r7,r7,1
    8fc4:	10ffffcc 	andi	r3,r2,65535
    8fc8:	1987383a 	mul	r3,r3,r6
    8fcc:	1004d43a 	srli	r2,r2,16
    8fd0:	1c07883a 	add	r3,r3,r16
    8fd4:	180ad43a 	srli	r5,r3,16
    8fd8:	1185383a 	mul	r2,r2,r6
    8fdc:	18ffffcc 	andi	r3,r3,65535
    8fe0:	1145883a 	add	r2,r2,r5
    8fe4:	1008943a 	slli	r4,r2,16
    8fe8:	1020d43a 	srli	r16,r2,16
    8fec:	20c9883a 	add	r4,r4,r3
    8ff0:	41000015 	stw	r4,0(r8)
    8ff4:	42000104 	addi	r8,r8,4
    8ff8:	3cbff016 	blt	r7,r18,8fbc <__multadd+0x34>
    8ffc:	80000826 	beq	r16,zero,9020 <__multadd+0x98>
    9000:	98800217 	ldw	r2,8(r19)
    9004:	90800f0e 	bge	r18,r2,9044 <__multadd+0xbc>
    9008:	9485883a 	add	r2,r18,r18
    900c:	1085883a 	add	r2,r2,r2
    9010:	14c5883a 	add	r2,r2,r19
    9014:	90c00044 	addi	r3,r18,1
    9018:	14000515 	stw	r16,20(r2)
    901c:	98c00415 	stw	r3,16(r19)
    9020:	9805883a 	mov	r2,r19
    9024:	dfc00517 	ldw	ra,20(sp)
    9028:	dd000417 	ldw	r20,16(sp)
    902c:	dcc00317 	ldw	r19,12(sp)
    9030:	dc800217 	ldw	r18,8(sp)
    9034:	dc400117 	ldw	r17,4(sp)
    9038:	dc000017 	ldw	r16,0(sp)
    903c:	dec00604 	addi	sp,sp,24
    9040:	f800283a 	ret
    9044:	99400117 	ldw	r5,4(r19)
    9048:	a009883a 	mov	r4,r20
    904c:	29400044 	addi	r5,r5,1
    9050:	00088540 	call	8854 <_Balloc>
    9054:	99800417 	ldw	r6,16(r19)
    9058:	99400304 	addi	r5,r19,12
    905c:	11000304 	addi	r4,r2,12
    9060:	318d883a 	add	r6,r6,r6
    9064:	318d883a 	add	r6,r6,r6
    9068:	31800204 	addi	r6,r6,8
    906c:	1023883a 	mov	r17,r2
    9070:	0002d240 	call	2d24 <memcpy>
    9074:	980b883a 	mov	r5,r19
    9078:	a009883a 	mov	r4,r20
    907c:	00082d40 	call	82d4 <_Bfree>
    9080:	8827883a 	mov	r19,r17
    9084:	003fe006 	br	9008 <__multadd+0x80>

00009088 <__pow5mult>:
    9088:	defffa04 	addi	sp,sp,-24
    908c:	308000cc 	andi	r2,r6,3
    9090:	dd000415 	stw	r20,16(sp)
    9094:	dcc00315 	stw	r19,12(sp)
    9098:	dc000015 	stw	r16,0(sp)
    909c:	dfc00515 	stw	ra,20(sp)
    90a0:	dc800215 	stw	r18,8(sp)
    90a4:	dc400115 	stw	r17,4(sp)
    90a8:	3021883a 	mov	r16,r6
    90ac:	2027883a 	mov	r19,r4
    90b0:	2829883a 	mov	r20,r5
    90b4:	10002b1e 	bne	r2,zero,9164 <__pow5mult+0xdc>
    90b8:	8025d0ba 	srai	r18,r16,2
    90bc:	90001b26 	beq	r18,zero,912c <__pow5mult+0xa4>
    90c0:	9c001217 	ldw	r16,72(r19)
    90c4:	8000081e 	bne	r16,zero,90e8 <__pow5mult+0x60>
    90c8:	00003006 	br	918c <__pow5mult+0x104>
    90cc:	800b883a 	mov	r5,r16
    90d0:	800d883a 	mov	r6,r16
    90d4:	9809883a 	mov	r4,r19
    90d8:	90001426 	beq	r18,zero,912c <__pow5mult+0xa4>
    90dc:	80800017 	ldw	r2,0(r16)
    90e0:	10001b26 	beq	r2,zero,9150 <__pow5mult+0xc8>
    90e4:	1021883a 	mov	r16,r2
    90e8:	9080004c 	andi	r2,r18,1
    90ec:	1005003a 	cmpeq	r2,r2,zero
    90f0:	9025d07a 	srai	r18,r18,1
    90f4:	800d883a 	mov	r6,r16
    90f8:	9809883a 	mov	r4,r19
    90fc:	a00b883a 	mov	r5,r20
    9100:	103ff21e 	bne	r2,zero,90cc <__pow5mult+0x44>
    9104:	0008d640 	call	8d64 <__multiply>
    9108:	a00b883a 	mov	r5,r20
    910c:	9809883a 	mov	r4,r19
    9110:	1023883a 	mov	r17,r2
    9114:	00082d40 	call	82d4 <_Bfree>
    9118:	8829883a 	mov	r20,r17
    911c:	800b883a 	mov	r5,r16
    9120:	800d883a 	mov	r6,r16
    9124:	9809883a 	mov	r4,r19
    9128:	903fec1e 	bne	r18,zero,90dc <__pow5mult+0x54>
    912c:	a005883a 	mov	r2,r20
    9130:	dfc00517 	ldw	ra,20(sp)
    9134:	dd000417 	ldw	r20,16(sp)
    9138:	dcc00317 	ldw	r19,12(sp)
    913c:	dc800217 	ldw	r18,8(sp)
    9140:	dc400117 	ldw	r17,4(sp)
    9144:	dc000017 	ldw	r16,0(sp)
    9148:	dec00604 	addi	sp,sp,24
    914c:	f800283a 	ret
    9150:	0008d640 	call	8d64 <__multiply>
    9154:	80800015 	stw	r2,0(r16)
    9158:	1021883a 	mov	r16,r2
    915c:	10000015 	stw	zero,0(r2)
    9160:	003fe106 	br	90e8 <__pow5mult+0x60>
    9164:	1085883a 	add	r2,r2,r2
    9168:	00c00074 	movhi	r3,1
    916c:	18caca04 	addi	r3,r3,11048
    9170:	1085883a 	add	r2,r2,r2
    9174:	10c5883a 	add	r2,r2,r3
    9178:	11bfff17 	ldw	r6,-4(r2)
    917c:	000f883a 	mov	r7,zero
    9180:	0008f880 	call	8f88 <__multadd>
    9184:	1029883a 	mov	r20,r2
    9188:	003fcb06 	br	90b8 <__pow5mult+0x30>
    918c:	9809883a 	mov	r4,r19
    9190:	01409c44 	movi	r5,625
    9194:	0008f4c0 	call	8f4c <__i2b>
    9198:	98801215 	stw	r2,72(r19)
    919c:	1021883a 	mov	r16,r2
    91a0:	10000015 	stw	zero,0(r2)
    91a4:	003fd006 	br	90e8 <__pow5mult+0x60>

000091a8 <__s2b>:
    91a8:	defff904 	addi	sp,sp,-28
    91ac:	dcc00315 	stw	r19,12(sp)
    91b0:	dc800215 	stw	r18,8(sp)
    91b4:	2827883a 	mov	r19,r5
    91b8:	2025883a 	mov	r18,r4
    91bc:	01400244 	movi	r5,9
    91c0:	39000204 	addi	r4,r7,8
    91c4:	dd000415 	stw	r20,16(sp)
    91c8:	dc400115 	stw	r17,4(sp)
    91cc:	dfc00615 	stw	ra,24(sp)
    91d0:	dd400515 	stw	r21,20(sp)
    91d4:	dc000015 	stw	r16,0(sp)
    91d8:	3829883a 	mov	r20,r7
    91dc:	3023883a 	mov	r17,r6
    91e0:	000b4a40 	call	b4a4 <__divsi3>
    91e4:	00c00044 	movi	r3,1
    91e8:	1880350e 	bge	r3,r2,92c0 <__s2b+0x118>
    91ec:	000b883a 	mov	r5,zero
    91f0:	18c7883a 	add	r3,r3,r3
    91f4:	29400044 	addi	r5,r5,1
    91f8:	18bffd16 	blt	r3,r2,91f0 <__s2b+0x48>
    91fc:	9009883a 	mov	r4,r18
    9200:	00088540 	call	8854 <_Balloc>
    9204:	1011883a 	mov	r8,r2
    9208:	d8800717 	ldw	r2,28(sp)
    920c:	00c00044 	movi	r3,1
    9210:	01800244 	movi	r6,9
    9214:	40800515 	stw	r2,20(r8)
    9218:	40c00415 	stw	r3,16(r8)
    921c:	3440260e 	bge	r6,r17,92b8 <__s2b+0x110>
    9220:	3021883a 	mov	r16,r6
    9224:	99ab883a 	add	r21,r19,r6
    9228:	9c05883a 	add	r2,r19,r16
    922c:	11c00007 	ldb	r7,0(r2)
    9230:	400b883a 	mov	r5,r8
    9234:	9009883a 	mov	r4,r18
    9238:	39fff404 	addi	r7,r7,-48
    923c:	01800284 	movi	r6,10
    9240:	0008f880 	call	8f88 <__multadd>
    9244:	84000044 	addi	r16,r16,1
    9248:	1011883a 	mov	r8,r2
    924c:	8c3ff61e 	bne	r17,r16,9228 <__s2b+0x80>
    9250:	ac45883a 	add	r2,r21,r17
    9254:	117ffe04 	addi	r5,r2,-8
    9258:	880d883a 	mov	r6,r17
    925c:	35000c0e 	bge	r6,r20,9290 <__s2b+0xe8>
    9260:	a185c83a 	sub	r2,r20,r6
    9264:	2821883a 	mov	r16,r5
    9268:	28a3883a 	add	r17,r5,r2
    926c:	81c00007 	ldb	r7,0(r16)
    9270:	400b883a 	mov	r5,r8
    9274:	9009883a 	mov	r4,r18
    9278:	39fff404 	addi	r7,r7,-48
    927c:	01800284 	movi	r6,10
    9280:	0008f880 	call	8f88 <__multadd>
    9284:	84000044 	addi	r16,r16,1
    9288:	1011883a 	mov	r8,r2
    928c:	847ff71e 	bne	r16,r17,926c <__s2b+0xc4>
    9290:	4005883a 	mov	r2,r8
    9294:	dfc00617 	ldw	ra,24(sp)
    9298:	dd400517 	ldw	r21,20(sp)
    929c:	dd000417 	ldw	r20,16(sp)
    92a0:	dcc00317 	ldw	r19,12(sp)
    92a4:	dc800217 	ldw	r18,8(sp)
    92a8:	dc400117 	ldw	r17,4(sp)
    92ac:	dc000017 	ldw	r16,0(sp)
    92b0:	dec00704 	addi	sp,sp,28
    92b4:	f800283a 	ret
    92b8:	99400284 	addi	r5,r19,10
    92bc:	003fe706 	br	925c <__s2b+0xb4>
    92c0:	000b883a 	mov	r5,zero
    92c4:	003fcd06 	br	91fc <__s2b+0x54>

000092c8 <_realloc_r>:
    92c8:	defff404 	addi	sp,sp,-48
    92cc:	dd800815 	stw	r22,32(sp)
    92d0:	dc800415 	stw	r18,16(sp)
    92d4:	dc400315 	stw	r17,12(sp)
    92d8:	dfc00b15 	stw	ra,44(sp)
    92dc:	df000a15 	stw	fp,40(sp)
    92e0:	ddc00915 	stw	r23,36(sp)
    92e4:	dd400715 	stw	r21,28(sp)
    92e8:	dd000615 	stw	r20,24(sp)
    92ec:	dcc00515 	stw	r19,20(sp)
    92f0:	dc000215 	stw	r16,8(sp)
    92f4:	2825883a 	mov	r18,r5
    92f8:	3023883a 	mov	r17,r6
    92fc:	202d883a 	mov	r22,r4
    9300:	2800c926 	beq	r5,zero,9628 <_realloc_r+0x360>
    9304:	000be800 	call	be80 <__malloc_lock>
    9308:	943ffe04 	addi	r16,r18,-8
    930c:	88c002c4 	addi	r3,r17,11
    9310:	00800584 	movi	r2,22
    9314:	82000117 	ldw	r8,4(r16)
    9318:	10c01b2e 	bgeu	r2,r3,9388 <_realloc_r+0xc0>
    931c:	00bffe04 	movi	r2,-8
    9320:	188e703a 	and	r7,r3,r2
    9324:	3839883a 	mov	fp,r7
    9328:	38001a16 	blt	r7,zero,9394 <_realloc_r+0xcc>
    932c:	e4401936 	bltu	fp,r17,9394 <_realloc_r+0xcc>
    9330:	013fff04 	movi	r4,-4
    9334:	4126703a 	and	r19,r8,r4
    9338:	99c02616 	blt	r19,r7,93d4 <_realloc_r+0x10c>
    933c:	802b883a 	mov	r21,r16
    9340:	9829883a 	mov	r20,r19
    9344:	84000204 	addi	r16,r16,8
    9348:	a80f883a 	mov	r7,r21
    934c:	a70dc83a 	sub	r6,r20,fp
    9350:	008003c4 	movi	r2,15
    9354:	1180c136 	bltu	r2,r6,965c <_realloc_r+0x394>
    9358:	38800117 	ldw	r2,4(r7)
    935c:	a549883a 	add	r4,r20,r21
    9360:	1080004c 	andi	r2,r2,1
    9364:	a084b03a 	or	r2,r20,r2
    9368:	38800115 	stw	r2,4(r7)
    936c:	20c00117 	ldw	r3,4(r4)
    9370:	18c00054 	ori	r3,r3,1
    9374:	20c00115 	stw	r3,4(r4)
    9378:	b009883a 	mov	r4,r22
    937c:	000bea00 	call	bea0 <__malloc_unlock>
    9380:	8023883a 	mov	r17,r16
    9384:	00000606 	br	93a0 <_realloc_r+0xd8>
    9388:	01c00404 	movi	r7,16
    938c:	3839883a 	mov	fp,r7
    9390:	e47fe72e 	bgeu	fp,r17,9330 <_realloc_r+0x68>
    9394:	00800304 	movi	r2,12
    9398:	0023883a 	mov	r17,zero
    939c:	b0800015 	stw	r2,0(r22)
    93a0:	8805883a 	mov	r2,r17
    93a4:	dfc00b17 	ldw	ra,44(sp)
    93a8:	df000a17 	ldw	fp,40(sp)
    93ac:	ddc00917 	ldw	r23,36(sp)
    93b0:	dd800817 	ldw	r22,32(sp)
    93b4:	dd400717 	ldw	r21,28(sp)
    93b8:	dd000617 	ldw	r20,24(sp)
    93bc:	dcc00517 	ldw	r19,20(sp)
    93c0:	dc800417 	ldw	r18,16(sp)
    93c4:	dc400317 	ldw	r17,12(sp)
    93c8:	dc000217 	ldw	r16,8(sp)
    93cc:	dec00c04 	addi	sp,sp,48
    93d0:	f800283a 	ret
    93d4:	00800074 	movhi	r2,1
    93d8:	108c7d04 	addi	r2,r2,12788
    93dc:	12400217 	ldw	r9,8(r2)
    93e0:	84cd883a 	add	r6,r16,r19
    93e4:	802b883a 	mov	r21,r16
    93e8:	3240b926 	beq	r6,r9,96d0 <_realloc_r+0x408>
    93ec:	31400117 	ldw	r5,4(r6)
    93f0:	00bfff84 	movi	r2,-2
    93f4:	2884703a 	and	r2,r5,r2
    93f8:	1185883a 	add	r2,r2,r6
    93fc:	10c00117 	ldw	r3,4(r2)
    9400:	18c0004c 	andi	r3,r3,1
    9404:	1807003a 	cmpeq	r3,r3,zero
    9408:	1800a326 	beq	r3,zero,9698 <_realloc_r+0x3d0>
    940c:	2908703a 	and	r4,r5,r4
    9410:	9929883a 	add	r20,r19,r4
    9414:	a1c0a30e 	bge	r20,r7,96a4 <_realloc_r+0x3dc>
    9418:	4080004c 	andi	r2,r8,1
    941c:	1000551e 	bne	r2,zero,9574 <_realloc_r+0x2ac>
    9420:	80800017 	ldw	r2,0(r16)
    9424:	80afc83a 	sub	r23,r16,r2
    9428:	b8c00117 	ldw	r3,4(r23)
    942c:	00bfff04 	movi	r2,-4
    9430:	1884703a 	and	r2,r3,r2
    9434:	30002e26 	beq	r6,zero,94f0 <_realloc_r+0x228>
    9438:	3240b926 	beq	r6,r9,9720 <_realloc_r+0x458>
    943c:	98a9883a 	add	r20,r19,r2
    9440:	2509883a 	add	r4,r4,r20
    9444:	d9000015 	stw	r4,0(sp)
    9448:	21c02a16 	blt	r4,r7,94f4 <_realloc_r+0x22c>
    944c:	30800317 	ldw	r2,12(r6)
    9450:	30c00217 	ldw	r3,8(r6)
    9454:	01400904 	movi	r5,36
    9458:	99bfff04 	addi	r6,r19,-4
    945c:	18800315 	stw	r2,12(r3)
    9460:	10c00215 	stw	r3,8(r2)
    9464:	b9000317 	ldw	r4,12(r23)
    9468:	b8800217 	ldw	r2,8(r23)
    946c:	b82b883a 	mov	r21,r23
    9470:	bc000204 	addi	r16,r23,8
    9474:	20800215 	stw	r2,8(r4)
    9478:	11000315 	stw	r4,12(r2)
    947c:	2980e436 	bltu	r5,r6,9810 <_realloc_r+0x548>
    9480:	008004c4 	movi	r2,19
    9484:	9009883a 	mov	r4,r18
    9488:	8011883a 	mov	r8,r16
    948c:	11800f2e 	bgeu	r2,r6,94cc <_realloc_r+0x204>
    9490:	90800017 	ldw	r2,0(r18)
    9494:	ba000404 	addi	r8,r23,16
    9498:	91000204 	addi	r4,r18,8
    949c:	b8800215 	stw	r2,8(r23)
    94a0:	90c00117 	ldw	r3,4(r18)
    94a4:	008006c4 	movi	r2,27
    94a8:	b8c00315 	stw	r3,12(r23)
    94ac:	1180072e 	bgeu	r2,r6,94cc <_realloc_r+0x204>
    94b0:	90c00217 	ldw	r3,8(r18)
    94b4:	ba000604 	addi	r8,r23,24
    94b8:	91000404 	addi	r4,r18,16
    94bc:	b8c00415 	stw	r3,16(r23)
    94c0:	90800317 	ldw	r2,12(r18)
    94c4:	b8800515 	stw	r2,20(r23)
    94c8:	3140e726 	beq	r6,r5,9868 <_realloc_r+0x5a0>
    94cc:	20800017 	ldw	r2,0(r4)
    94d0:	dd000017 	ldw	r20,0(sp)
    94d4:	b80f883a 	mov	r7,r23
    94d8:	40800015 	stw	r2,0(r8)
    94dc:	20c00117 	ldw	r3,4(r4)
    94e0:	40c00115 	stw	r3,4(r8)
    94e4:	20800217 	ldw	r2,8(r4)
    94e8:	40800215 	stw	r2,8(r8)
    94ec:	003f9706 	br	934c <_realloc_r+0x84>
    94f0:	98a9883a 	add	r20,r19,r2
    94f4:	a1c01f16 	blt	r20,r7,9574 <_realloc_r+0x2ac>
    94f8:	b8c00317 	ldw	r3,12(r23)
    94fc:	b8800217 	ldw	r2,8(r23)
    9500:	99bfff04 	addi	r6,r19,-4
    9504:	01400904 	movi	r5,36
    9508:	b82b883a 	mov	r21,r23
    950c:	18800215 	stw	r2,8(r3)
    9510:	10c00315 	stw	r3,12(r2)
    9514:	bc000204 	addi	r16,r23,8
    9518:	2980c336 	bltu	r5,r6,9828 <_realloc_r+0x560>
    951c:	008004c4 	movi	r2,19
    9520:	9009883a 	mov	r4,r18
    9524:	8011883a 	mov	r8,r16
    9528:	11800f2e 	bgeu	r2,r6,9568 <_realloc_r+0x2a0>
    952c:	90800017 	ldw	r2,0(r18)
    9530:	ba000404 	addi	r8,r23,16
    9534:	91000204 	addi	r4,r18,8
    9538:	b8800215 	stw	r2,8(r23)
    953c:	90c00117 	ldw	r3,4(r18)
    9540:	008006c4 	movi	r2,27
    9544:	b8c00315 	stw	r3,12(r23)
    9548:	1180072e 	bgeu	r2,r6,9568 <_realloc_r+0x2a0>
    954c:	90c00217 	ldw	r3,8(r18)
    9550:	ba000604 	addi	r8,r23,24
    9554:	91000404 	addi	r4,r18,16
    9558:	b8c00415 	stw	r3,16(r23)
    955c:	90800317 	ldw	r2,12(r18)
    9560:	b8800515 	stw	r2,20(r23)
    9564:	3140c726 	beq	r6,r5,9884 <_realloc_r+0x5bc>
    9568:	20800017 	ldw	r2,0(r4)
    956c:	b80f883a 	mov	r7,r23
    9570:	003fd906 	br	94d8 <_realloc_r+0x210>
    9574:	880b883a 	mov	r5,r17
    9578:	b009883a 	mov	r4,r22
    957c:	00079d00 	call	79d0 <_malloc_r>
    9580:	1023883a 	mov	r17,r2
    9584:	10002526 	beq	r2,zero,961c <_realloc_r+0x354>
    9588:	80800117 	ldw	r2,4(r16)
    958c:	00ffff84 	movi	r3,-2
    9590:	893ffe04 	addi	r4,r17,-8
    9594:	10c4703a 	and	r2,r2,r3
    9598:	8085883a 	add	r2,r16,r2
    959c:	20809526 	beq	r4,r2,97f4 <_realloc_r+0x52c>
    95a0:	99bfff04 	addi	r6,r19,-4
    95a4:	01c00904 	movi	r7,36
    95a8:	39804536 	bltu	r7,r6,96c0 <_realloc_r+0x3f8>
    95ac:	008004c4 	movi	r2,19
    95b0:	9009883a 	mov	r4,r18
    95b4:	880b883a 	mov	r5,r17
    95b8:	11800f2e 	bgeu	r2,r6,95f8 <_realloc_r+0x330>
    95bc:	90800017 	ldw	r2,0(r18)
    95c0:	89400204 	addi	r5,r17,8
    95c4:	91000204 	addi	r4,r18,8
    95c8:	88800015 	stw	r2,0(r17)
    95cc:	90c00117 	ldw	r3,4(r18)
    95d0:	008006c4 	movi	r2,27
    95d4:	88c00115 	stw	r3,4(r17)
    95d8:	1180072e 	bgeu	r2,r6,95f8 <_realloc_r+0x330>
    95dc:	90c00217 	ldw	r3,8(r18)
    95e0:	89400404 	addi	r5,r17,16
    95e4:	91000404 	addi	r4,r18,16
    95e8:	88c00215 	stw	r3,8(r17)
    95ec:	90800317 	ldw	r2,12(r18)
    95f0:	88800315 	stw	r2,12(r17)
    95f4:	31c09126 	beq	r6,r7,983c <_realloc_r+0x574>
    95f8:	20800017 	ldw	r2,0(r4)
    95fc:	28800015 	stw	r2,0(r5)
    9600:	20c00117 	ldw	r3,4(r4)
    9604:	28c00115 	stw	r3,4(r5)
    9608:	20800217 	ldw	r2,8(r4)
    960c:	28800215 	stw	r2,8(r5)
    9610:	900b883a 	mov	r5,r18
    9614:	b009883a 	mov	r4,r22
    9618:	0006e480 	call	6e48 <_free_r>
    961c:	b009883a 	mov	r4,r22
    9620:	000bea00 	call	bea0 <__malloc_unlock>
    9624:	003f5e06 	br	93a0 <_realloc_r+0xd8>
    9628:	300b883a 	mov	r5,r6
    962c:	dfc00b17 	ldw	ra,44(sp)
    9630:	df000a17 	ldw	fp,40(sp)
    9634:	ddc00917 	ldw	r23,36(sp)
    9638:	dd800817 	ldw	r22,32(sp)
    963c:	dd400717 	ldw	r21,28(sp)
    9640:	dd000617 	ldw	r20,24(sp)
    9644:	dcc00517 	ldw	r19,20(sp)
    9648:	dc800417 	ldw	r18,16(sp)
    964c:	dc400317 	ldw	r17,12(sp)
    9650:	dc000217 	ldw	r16,8(sp)
    9654:	dec00c04 	addi	sp,sp,48
    9658:	00079d01 	jmpi	79d0 <_malloc_r>
    965c:	38800117 	ldw	r2,4(r7)
    9660:	e54b883a 	add	r5,fp,r21
    9664:	31000054 	ori	r4,r6,1
    9668:	1080004c 	andi	r2,r2,1
    966c:	1704b03a 	or	r2,r2,fp
    9670:	38800115 	stw	r2,4(r7)
    9674:	29000115 	stw	r4,4(r5)
    9678:	2987883a 	add	r3,r5,r6
    967c:	18800117 	ldw	r2,4(r3)
    9680:	29400204 	addi	r5,r5,8
    9684:	b009883a 	mov	r4,r22
    9688:	10800054 	ori	r2,r2,1
    968c:	18800115 	stw	r2,4(r3)
    9690:	0006e480 	call	6e48 <_free_r>
    9694:	003f3806 	br	9378 <_realloc_r+0xb0>
    9698:	000d883a 	mov	r6,zero
    969c:	0009883a 	mov	r4,zero
    96a0:	003f5d06 	br	9418 <_realloc_r+0x150>
    96a4:	30c00217 	ldw	r3,8(r6)
    96a8:	30800317 	ldw	r2,12(r6)
    96ac:	800f883a 	mov	r7,r16
    96b0:	84000204 	addi	r16,r16,8
    96b4:	10c00215 	stw	r3,8(r2)
    96b8:	18800315 	stw	r2,12(r3)
    96bc:	003f2306 	br	934c <_realloc_r+0x84>
    96c0:	8809883a 	mov	r4,r17
    96c4:	900b883a 	mov	r5,r18
    96c8:	00081f40 	call	81f4 <memmove>
    96cc:	003fd006 	br	9610 <_realloc_r+0x348>
    96d0:	30800117 	ldw	r2,4(r6)
    96d4:	e0c00404 	addi	r3,fp,16
    96d8:	1108703a 	and	r4,r2,r4
    96dc:	9905883a 	add	r2,r19,r4
    96e0:	10ff4d16 	blt	r2,r3,9418 <_realloc_r+0x150>
    96e4:	1705c83a 	sub	r2,r2,fp
    96e8:	870b883a 	add	r5,r16,fp
    96ec:	10800054 	ori	r2,r2,1
    96f0:	28800115 	stw	r2,4(r5)
    96f4:	80c00117 	ldw	r3,4(r16)
    96f8:	00800074 	movhi	r2,1
    96fc:	108c7d04 	addi	r2,r2,12788
    9700:	b009883a 	mov	r4,r22
    9704:	18c0004c 	andi	r3,r3,1
    9708:	e0c6b03a 	or	r3,fp,r3
    970c:	11400215 	stw	r5,8(r2)
    9710:	80c00115 	stw	r3,4(r16)
    9714:	000bea00 	call	bea0 <__malloc_unlock>
    9718:	84400204 	addi	r17,r16,8
    971c:	003f2006 	br	93a0 <_realloc_r+0xd8>
    9720:	98a9883a 	add	r20,r19,r2
    9724:	2509883a 	add	r4,r4,r20
    9728:	e0800404 	addi	r2,fp,16
    972c:	d9000115 	stw	r4,4(sp)
    9730:	20bf7016 	blt	r4,r2,94f4 <_realloc_r+0x22c>
    9734:	b8c00317 	ldw	r3,12(r23)
    9738:	b8800217 	ldw	r2,8(r23)
    973c:	99bfff04 	addi	r6,r19,-4
    9740:	01400904 	movi	r5,36
    9744:	18800215 	stw	r2,8(r3)
    9748:	10c00315 	stw	r3,12(r2)
    974c:	bc400204 	addi	r17,r23,8
    9750:	29804136 	bltu	r5,r6,9858 <_realloc_r+0x590>
    9754:	008004c4 	movi	r2,19
    9758:	9009883a 	mov	r4,r18
    975c:	880f883a 	mov	r7,r17
    9760:	11800f2e 	bgeu	r2,r6,97a0 <_realloc_r+0x4d8>
    9764:	90800017 	ldw	r2,0(r18)
    9768:	b9c00404 	addi	r7,r23,16
    976c:	91000204 	addi	r4,r18,8
    9770:	b8800215 	stw	r2,8(r23)
    9774:	90c00117 	ldw	r3,4(r18)
    9778:	008006c4 	movi	r2,27
    977c:	b8c00315 	stw	r3,12(r23)
    9780:	1180072e 	bgeu	r2,r6,97a0 <_realloc_r+0x4d8>
    9784:	90c00217 	ldw	r3,8(r18)
    9788:	b9c00604 	addi	r7,r23,24
    978c:	91000404 	addi	r4,r18,16
    9790:	b8c00415 	stw	r3,16(r23)
    9794:	90800317 	ldw	r2,12(r18)
    9798:	b8800515 	stw	r2,20(r23)
    979c:	31404026 	beq	r6,r5,98a0 <_realloc_r+0x5d8>
    97a0:	20800017 	ldw	r2,0(r4)
    97a4:	38800015 	stw	r2,0(r7)
    97a8:	20c00117 	ldw	r3,4(r4)
    97ac:	38c00115 	stw	r3,4(r7)
    97b0:	20800217 	ldw	r2,8(r4)
    97b4:	38800215 	stw	r2,8(r7)
    97b8:	d8c00117 	ldw	r3,4(sp)
    97bc:	bf0b883a 	add	r5,r23,fp
    97c0:	b009883a 	mov	r4,r22
    97c4:	1f05c83a 	sub	r2,r3,fp
    97c8:	10800054 	ori	r2,r2,1
    97cc:	28800115 	stw	r2,4(r5)
    97d0:	b8c00117 	ldw	r3,4(r23)
    97d4:	00800074 	movhi	r2,1
    97d8:	108c7d04 	addi	r2,r2,12788
    97dc:	11400215 	stw	r5,8(r2)
    97e0:	18c0004c 	andi	r3,r3,1
    97e4:	e0c6b03a 	or	r3,fp,r3
    97e8:	b8c00115 	stw	r3,4(r23)
    97ec:	000bea00 	call	bea0 <__malloc_unlock>
    97f0:	003eeb06 	br	93a0 <_realloc_r+0xd8>
    97f4:	20800117 	ldw	r2,4(r4)
    97f8:	00ffff04 	movi	r3,-4
    97fc:	800f883a 	mov	r7,r16
    9800:	10c4703a 	and	r2,r2,r3
    9804:	98a9883a 	add	r20,r19,r2
    9808:	84000204 	addi	r16,r16,8
    980c:	003ecf06 	br	934c <_realloc_r+0x84>
    9810:	900b883a 	mov	r5,r18
    9814:	8009883a 	mov	r4,r16
    9818:	00081f40 	call	81f4 <memmove>
    981c:	dd000017 	ldw	r20,0(sp)
    9820:	b80f883a 	mov	r7,r23
    9824:	003ec906 	br	934c <_realloc_r+0x84>
    9828:	900b883a 	mov	r5,r18
    982c:	8009883a 	mov	r4,r16
    9830:	00081f40 	call	81f4 <memmove>
    9834:	b80f883a 	mov	r7,r23
    9838:	003ec406 	br	934c <_realloc_r+0x84>
    983c:	90c00417 	ldw	r3,16(r18)
    9840:	89400604 	addi	r5,r17,24
    9844:	91000604 	addi	r4,r18,24
    9848:	88c00415 	stw	r3,16(r17)
    984c:	90800517 	ldw	r2,20(r18)
    9850:	88800515 	stw	r2,20(r17)
    9854:	003f6806 	br	95f8 <_realloc_r+0x330>
    9858:	900b883a 	mov	r5,r18
    985c:	8809883a 	mov	r4,r17
    9860:	00081f40 	call	81f4 <memmove>
    9864:	003fd406 	br	97b8 <_realloc_r+0x4f0>
    9868:	90c00417 	ldw	r3,16(r18)
    986c:	91000604 	addi	r4,r18,24
    9870:	ba000804 	addi	r8,r23,32
    9874:	b8c00615 	stw	r3,24(r23)
    9878:	90800517 	ldw	r2,20(r18)
    987c:	b8800715 	stw	r2,28(r23)
    9880:	003f1206 	br	94cc <_realloc_r+0x204>
    9884:	90c00417 	ldw	r3,16(r18)
    9888:	91000604 	addi	r4,r18,24
    988c:	ba000804 	addi	r8,r23,32
    9890:	b8c00615 	stw	r3,24(r23)
    9894:	90800517 	ldw	r2,20(r18)
    9898:	b8800715 	stw	r2,28(r23)
    989c:	003f3206 	br	9568 <_realloc_r+0x2a0>
    98a0:	90c00417 	ldw	r3,16(r18)
    98a4:	91000604 	addi	r4,r18,24
    98a8:	b9c00804 	addi	r7,r23,32
    98ac:	b8c00615 	stw	r3,24(r23)
    98b0:	90800517 	ldw	r2,20(r18)
    98b4:	b8800715 	stw	r2,28(r23)
    98b8:	003fb906 	br	97a0 <_realloc_r+0x4d8>

000098bc <__isinfd>:
    98bc:	200d883a 	mov	r6,r4
    98c0:	0109c83a 	sub	r4,zero,r4
    98c4:	2188b03a 	or	r4,r4,r6
    98c8:	2008d7fa 	srli	r4,r4,31
    98cc:	00a00034 	movhi	r2,32768
    98d0:	10bfffc4 	addi	r2,r2,-1
    98d4:	1144703a 	and	r2,r2,r5
    98d8:	2088b03a 	or	r4,r4,r2
    98dc:	009ffc34 	movhi	r2,32752
    98e0:	1105c83a 	sub	r2,r2,r4
    98e4:	0087c83a 	sub	r3,zero,r2
    98e8:	10c4b03a 	or	r2,r2,r3
    98ec:	1004d7fa 	srli	r2,r2,31
    98f0:	00c00044 	movi	r3,1
    98f4:	1885c83a 	sub	r2,r3,r2
    98f8:	f800283a 	ret

000098fc <__isnand>:
    98fc:	200d883a 	mov	r6,r4
    9900:	0109c83a 	sub	r4,zero,r4
    9904:	2188b03a 	or	r4,r4,r6
    9908:	2008d7fa 	srli	r4,r4,31
    990c:	00a00034 	movhi	r2,32768
    9910:	10bfffc4 	addi	r2,r2,-1
    9914:	1144703a 	and	r2,r2,r5
    9918:	2088b03a 	or	r4,r4,r2
    991c:	009ffc34 	movhi	r2,32752
    9920:	1105c83a 	sub	r2,r2,r4
    9924:	1004d7fa 	srli	r2,r2,31
    9928:	f800283a 	ret

0000992c <_sbrk_r>:
    992c:	defffd04 	addi	sp,sp,-12
    9930:	dc000015 	stw	r16,0(sp)
    9934:	04000074 	movhi	r16,1
    9938:	841ad004 	addi	r16,r16,27456
    993c:	dc400115 	stw	r17,4(sp)
    9940:	80000015 	stw	zero,0(r16)
    9944:	2023883a 	mov	r17,r4
    9948:	2809883a 	mov	r4,r5
    994c:	dfc00215 	stw	ra,8(sp)
    9950:	000c3380 	call	c338 <sbrk>
    9954:	1007883a 	mov	r3,r2
    9958:	00bfffc4 	movi	r2,-1
    995c:	18800626 	beq	r3,r2,9978 <_sbrk_r+0x4c>
    9960:	1805883a 	mov	r2,r3
    9964:	dfc00217 	ldw	ra,8(sp)
    9968:	dc400117 	ldw	r17,4(sp)
    996c:	dc000017 	ldw	r16,0(sp)
    9970:	dec00304 	addi	sp,sp,12
    9974:	f800283a 	ret
    9978:	80800017 	ldw	r2,0(r16)
    997c:	103ff826 	beq	r2,zero,9960 <_sbrk_r+0x34>
    9980:	88800015 	stw	r2,0(r17)
    9984:	1805883a 	mov	r2,r3
    9988:	dfc00217 	ldw	ra,8(sp)
    998c:	dc400117 	ldw	r17,4(sp)
    9990:	dc000017 	ldw	r16,0(sp)
    9994:	dec00304 	addi	sp,sp,12
    9998:	f800283a 	ret

0000999c <__sclose>:
    999c:	2940038f 	ldh	r5,14(r5)
    99a0:	0009cd01 	jmpi	9cd0 <_close_r>

000099a4 <__sseek>:
    99a4:	defffe04 	addi	sp,sp,-8
    99a8:	dc000015 	stw	r16,0(sp)
    99ac:	2821883a 	mov	r16,r5
    99b0:	2940038f 	ldh	r5,14(r5)
    99b4:	dfc00115 	stw	ra,4(sp)
    99b8:	0009f480 	call	9f48 <_lseek_r>
    99bc:	1007883a 	mov	r3,r2
    99c0:	00bfffc4 	movi	r2,-1
    99c4:	18800926 	beq	r3,r2,99ec <__sseek+0x48>
    99c8:	8080030b 	ldhu	r2,12(r16)
    99cc:	80c01415 	stw	r3,80(r16)
    99d0:	10840014 	ori	r2,r2,4096
    99d4:	8080030d 	sth	r2,12(r16)
    99d8:	1805883a 	mov	r2,r3
    99dc:	dfc00117 	ldw	ra,4(sp)
    99e0:	dc000017 	ldw	r16,0(sp)
    99e4:	dec00204 	addi	sp,sp,8
    99e8:	f800283a 	ret
    99ec:	8080030b 	ldhu	r2,12(r16)
    99f0:	10bbffcc 	andi	r2,r2,61439
    99f4:	8080030d 	sth	r2,12(r16)
    99f8:	1805883a 	mov	r2,r3
    99fc:	dfc00117 	ldw	ra,4(sp)
    9a00:	dc000017 	ldw	r16,0(sp)
    9a04:	dec00204 	addi	sp,sp,8
    9a08:	f800283a 	ret

00009a0c <__swrite>:
    9a0c:	2880030b 	ldhu	r2,12(r5)
    9a10:	defffb04 	addi	sp,sp,-20
    9a14:	dcc00315 	stw	r19,12(sp)
    9a18:	1080400c 	andi	r2,r2,256
    9a1c:	dc800215 	stw	r18,8(sp)
    9a20:	dc400115 	stw	r17,4(sp)
    9a24:	dc000015 	stw	r16,0(sp)
    9a28:	3027883a 	mov	r19,r6
    9a2c:	3825883a 	mov	r18,r7
    9a30:	dfc00415 	stw	ra,16(sp)
    9a34:	2821883a 	mov	r16,r5
    9a38:	000d883a 	mov	r6,zero
    9a3c:	01c00084 	movi	r7,2
    9a40:	2023883a 	mov	r17,r4
    9a44:	10000226 	beq	r2,zero,9a50 <__swrite+0x44>
    9a48:	2940038f 	ldh	r5,14(r5)
    9a4c:	0009f480 	call	9f48 <_lseek_r>
    9a50:	8080030b 	ldhu	r2,12(r16)
    9a54:	8140038f 	ldh	r5,14(r16)
    9a58:	8809883a 	mov	r4,r17
    9a5c:	10bbffcc 	andi	r2,r2,61439
    9a60:	980d883a 	mov	r6,r19
    9a64:	900f883a 	mov	r7,r18
    9a68:	8080030d 	sth	r2,12(r16)
    9a6c:	dfc00417 	ldw	ra,16(sp)
    9a70:	dcc00317 	ldw	r19,12(sp)
    9a74:	dc800217 	ldw	r18,8(sp)
    9a78:	dc400117 	ldw	r17,4(sp)
    9a7c:	dc000017 	ldw	r16,0(sp)
    9a80:	dec00504 	addi	sp,sp,20
    9a84:	0009ba41 	jmpi	9ba4 <_write_r>

00009a88 <__sread>:
    9a88:	defffe04 	addi	sp,sp,-8
    9a8c:	dc000015 	stw	r16,0(sp)
    9a90:	2821883a 	mov	r16,r5
    9a94:	2940038f 	ldh	r5,14(r5)
    9a98:	dfc00115 	stw	ra,4(sp)
    9a9c:	0009fc00 	call	9fc0 <_read_r>
    9aa0:	1007883a 	mov	r3,r2
    9aa4:	10000816 	blt	r2,zero,9ac8 <__sread+0x40>
    9aa8:	80801417 	ldw	r2,80(r16)
    9aac:	10c5883a 	add	r2,r2,r3
    9ab0:	80801415 	stw	r2,80(r16)
    9ab4:	1805883a 	mov	r2,r3
    9ab8:	dfc00117 	ldw	ra,4(sp)
    9abc:	dc000017 	ldw	r16,0(sp)
    9ac0:	dec00204 	addi	sp,sp,8
    9ac4:	f800283a 	ret
    9ac8:	8080030b 	ldhu	r2,12(r16)
    9acc:	10bbffcc 	andi	r2,r2,61439
    9ad0:	8080030d 	sth	r2,12(r16)
    9ad4:	1805883a 	mov	r2,r3
    9ad8:	dfc00117 	ldw	ra,4(sp)
    9adc:	dc000017 	ldw	r16,0(sp)
    9ae0:	dec00204 	addi	sp,sp,8
    9ae4:	f800283a 	ret

00009ae8 <strcmp>:
    9ae8:	2144b03a 	or	r2,r4,r5
    9aec:	108000cc 	andi	r2,r2,3
    9af0:	10001d1e 	bne	r2,zero,9b68 <strcmp+0x80>
    9af4:	200f883a 	mov	r7,r4
    9af8:	28800017 	ldw	r2,0(r5)
    9afc:	21000017 	ldw	r4,0(r4)
    9b00:	280d883a 	mov	r6,r5
    9b04:	2080161e 	bne	r4,r2,9b60 <strcmp+0x78>
    9b08:	023fbff4 	movhi	r8,65279
    9b0c:	423fbfc4 	addi	r8,r8,-257
    9b10:	2207883a 	add	r3,r4,r8
    9b14:	01602074 	movhi	r5,32897
    9b18:	29602004 	addi	r5,r5,-32640
    9b1c:	1946703a 	and	r3,r3,r5
    9b20:	0104303a 	nor	r2,zero,r4
    9b24:	10c4703a 	and	r2,r2,r3
    9b28:	10001c1e 	bne	r2,zero,9b9c <strcmp+0xb4>
    9b2c:	4013883a 	mov	r9,r8
    9b30:	2811883a 	mov	r8,r5
    9b34:	00000106 	br	9b3c <strcmp+0x54>
    9b38:	1800181e 	bne	r3,zero,9b9c <strcmp+0xb4>
    9b3c:	39c00104 	addi	r7,r7,4
    9b40:	39000017 	ldw	r4,0(r7)
    9b44:	31800104 	addi	r6,r6,4
    9b48:	31400017 	ldw	r5,0(r6)
    9b4c:	2245883a 	add	r2,r4,r9
    9b50:	1204703a 	and	r2,r2,r8
    9b54:	0106303a 	nor	r3,zero,r4
    9b58:	1886703a 	and	r3,r3,r2
    9b5c:	217ff626 	beq	r4,r5,9b38 <strcmp+0x50>
    9b60:	3809883a 	mov	r4,r7
    9b64:	300b883a 	mov	r5,r6
    9b68:	20c00007 	ldb	r3,0(r4)
    9b6c:	1800051e 	bne	r3,zero,9b84 <strcmp+0x9c>
    9b70:	00000606 	br	9b8c <strcmp+0xa4>
    9b74:	21000044 	addi	r4,r4,1
    9b78:	20c00007 	ldb	r3,0(r4)
    9b7c:	29400044 	addi	r5,r5,1
    9b80:	18000226 	beq	r3,zero,9b8c <strcmp+0xa4>
    9b84:	28800007 	ldb	r2,0(r5)
    9b88:	18bffa26 	beq	r3,r2,9b74 <strcmp+0x8c>
    9b8c:	20c00003 	ldbu	r3,0(r4)
    9b90:	28800003 	ldbu	r2,0(r5)
    9b94:	1885c83a 	sub	r2,r3,r2
    9b98:	f800283a 	ret
    9b9c:	0005883a 	mov	r2,zero
    9ba0:	f800283a 	ret

00009ba4 <_write_r>:
    9ba4:	defffd04 	addi	sp,sp,-12
    9ba8:	dc000015 	stw	r16,0(sp)
    9bac:	04000074 	movhi	r16,1
    9bb0:	841ad004 	addi	r16,r16,27456
    9bb4:	dc400115 	stw	r17,4(sp)
    9bb8:	80000015 	stw	zero,0(r16)
    9bbc:	2023883a 	mov	r17,r4
    9bc0:	2809883a 	mov	r4,r5
    9bc4:	300b883a 	mov	r5,r6
    9bc8:	380d883a 	mov	r6,r7
    9bcc:	dfc00215 	stw	ra,8(sp)
    9bd0:	000c3f40 	call	c3f4 <write>
    9bd4:	1007883a 	mov	r3,r2
    9bd8:	00bfffc4 	movi	r2,-1
    9bdc:	18800626 	beq	r3,r2,9bf8 <_write_r+0x54>
    9be0:	1805883a 	mov	r2,r3
    9be4:	dfc00217 	ldw	ra,8(sp)
    9be8:	dc400117 	ldw	r17,4(sp)
    9bec:	dc000017 	ldw	r16,0(sp)
    9bf0:	dec00304 	addi	sp,sp,12
    9bf4:	f800283a 	ret
    9bf8:	80800017 	ldw	r2,0(r16)
    9bfc:	103ff826 	beq	r2,zero,9be0 <_write_r+0x3c>
    9c00:	88800015 	stw	r2,0(r17)
    9c04:	1805883a 	mov	r2,r3
    9c08:	dfc00217 	ldw	ra,8(sp)
    9c0c:	dc400117 	ldw	r17,4(sp)
    9c10:	dc000017 	ldw	r16,0(sp)
    9c14:	dec00304 	addi	sp,sp,12
    9c18:	f800283a 	ret

00009c1c <_calloc_r>:
    9c1c:	298b383a 	mul	r5,r5,r6
    9c20:	defffe04 	addi	sp,sp,-8
    9c24:	dc000015 	stw	r16,0(sp)
    9c28:	dfc00115 	stw	ra,4(sp)
    9c2c:	00079d00 	call	79d0 <_malloc_r>
    9c30:	1021883a 	mov	r16,r2
    9c34:	01c00904 	movi	r7,36
    9c38:	10000d26 	beq	r2,zero,9c70 <_calloc_r+0x54>
    9c3c:	10ffff17 	ldw	r3,-4(r2)
    9c40:	1009883a 	mov	r4,r2
    9c44:	00bfff04 	movi	r2,-4
    9c48:	1886703a 	and	r3,r3,r2
    9c4c:	1887883a 	add	r3,r3,r2
    9c50:	180d883a 	mov	r6,r3
    9c54:	000b883a 	mov	r5,zero
    9c58:	38c01736 	bltu	r7,r3,9cb8 <_calloc_r+0x9c>
    9c5c:	008004c4 	movi	r2,19
    9c60:	10c00836 	bltu	r2,r3,9c84 <_calloc_r+0x68>
    9c64:	20000215 	stw	zero,8(r4)
    9c68:	20000015 	stw	zero,0(r4)
    9c6c:	20000115 	stw	zero,4(r4)
    9c70:	8005883a 	mov	r2,r16
    9c74:	dfc00117 	ldw	ra,4(sp)
    9c78:	dc000017 	ldw	r16,0(sp)
    9c7c:	dec00204 	addi	sp,sp,8
    9c80:	f800283a 	ret
    9c84:	008006c4 	movi	r2,27
    9c88:	80000015 	stw	zero,0(r16)
    9c8c:	80000115 	stw	zero,4(r16)
    9c90:	81000204 	addi	r4,r16,8
    9c94:	10fff32e 	bgeu	r2,r3,9c64 <_calloc_r+0x48>
    9c98:	80000215 	stw	zero,8(r16)
    9c9c:	80000315 	stw	zero,12(r16)
    9ca0:	81000404 	addi	r4,r16,16
    9ca4:	19ffef1e 	bne	r3,r7,9c64 <_calloc_r+0x48>
    9ca8:	81000604 	addi	r4,r16,24
    9cac:	80000415 	stw	zero,16(r16)
    9cb0:	80000515 	stw	zero,20(r16)
    9cb4:	003feb06 	br	9c64 <_calloc_r+0x48>
    9cb8:	0002dc40 	call	2dc4 <memset>
    9cbc:	8005883a 	mov	r2,r16
    9cc0:	dfc00117 	ldw	ra,4(sp)
    9cc4:	dc000017 	ldw	r16,0(sp)
    9cc8:	dec00204 	addi	sp,sp,8
    9ccc:	f800283a 	ret

00009cd0 <_close_r>:
    9cd0:	defffd04 	addi	sp,sp,-12
    9cd4:	dc000015 	stw	r16,0(sp)
    9cd8:	04000074 	movhi	r16,1
    9cdc:	841ad004 	addi	r16,r16,27456
    9ce0:	dc400115 	stw	r17,4(sp)
    9ce4:	80000015 	stw	zero,0(r16)
    9ce8:	2023883a 	mov	r17,r4
    9cec:	2809883a 	mov	r4,r5
    9cf0:	dfc00215 	stw	ra,8(sp)
    9cf4:	000b63c0 	call	b63c <close>
    9cf8:	1007883a 	mov	r3,r2
    9cfc:	00bfffc4 	movi	r2,-1
    9d00:	18800626 	beq	r3,r2,9d1c <_close_r+0x4c>
    9d04:	1805883a 	mov	r2,r3
    9d08:	dfc00217 	ldw	ra,8(sp)
    9d0c:	dc400117 	ldw	r17,4(sp)
    9d10:	dc000017 	ldw	r16,0(sp)
    9d14:	dec00304 	addi	sp,sp,12
    9d18:	f800283a 	ret
    9d1c:	80800017 	ldw	r2,0(r16)
    9d20:	103ff826 	beq	r2,zero,9d04 <_close_r+0x34>
    9d24:	88800015 	stw	r2,0(r17)
    9d28:	1805883a 	mov	r2,r3
    9d2c:	dfc00217 	ldw	ra,8(sp)
    9d30:	dc400117 	ldw	r17,4(sp)
    9d34:	dc000017 	ldw	r16,0(sp)
    9d38:	dec00304 	addi	sp,sp,12
    9d3c:	f800283a 	ret

00009d40 <_fclose_r>:
    9d40:	defffc04 	addi	sp,sp,-16
    9d44:	dc400115 	stw	r17,4(sp)
    9d48:	dc000015 	stw	r16,0(sp)
    9d4c:	dfc00315 	stw	ra,12(sp)
    9d50:	dc800215 	stw	r18,8(sp)
    9d54:	2821883a 	mov	r16,r5
    9d58:	2023883a 	mov	r17,r4
    9d5c:	28002926 	beq	r5,zero,9e04 <_fclose_r+0xc4>
    9d60:	0006ab40 	call	6ab4 <__sfp_lock_acquire>
    9d64:	88000226 	beq	r17,zero,9d70 <_fclose_r+0x30>
    9d68:	88800e17 	ldw	r2,56(r17)
    9d6c:	10002d26 	beq	r2,zero,9e24 <_fclose_r+0xe4>
    9d70:	8080030f 	ldh	r2,12(r16)
    9d74:	10002226 	beq	r2,zero,9e00 <_fclose_r+0xc0>
    9d78:	8809883a 	mov	r4,r17
    9d7c:	800b883a 	mov	r5,r16
    9d80:	000682c0 	call	682c <_fflush_r>
    9d84:	1025883a 	mov	r18,r2
    9d88:	80800b17 	ldw	r2,44(r16)
    9d8c:	10000426 	beq	r2,zero,9da0 <_fclose_r+0x60>
    9d90:	81400717 	ldw	r5,28(r16)
    9d94:	8809883a 	mov	r4,r17
    9d98:	103ee83a 	callr	r2
    9d9c:	10002a16 	blt	r2,zero,9e48 <_fclose_r+0x108>
    9da0:	8080030b 	ldhu	r2,12(r16)
    9da4:	1080200c 	andi	r2,r2,128
    9da8:	1000231e 	bne	r2,zero,9e38 <_fclose_r+0xf8>
    9dac:	81400c17 	ldw	r5,48(r16)
    9db0:	28000526 	beq	r5,zero,9dc8 <_fclose_r+0x88>
    9db4:	80801004 	addi	r2,r16,64
    9db8:	28800226 	beq	r5,r2,9dc4 <_fclose_r+0x84>
    9dbc:	8809883a 	mov	r4,r17
    9dc0:	0006e480 	call	6e48 <_free_r>
    9dc4:	80000c15 	stw	zero,48(r16)
    9dc8:	81401117 	ldw	r5,68(r16)
    9dcc:	28000326 	beq	r5,zero,9ddc <_fclose_r+0x9c>
    9dd0:	8809883a 	mov	r4,r17
    9dd4:	0006e480 	call	6e48 <_free_r>
    9dd8:	80001115 	stw	zero,68(r16)
    9ddc:	8000030d 	sth	zero,12(r16)
    9de0:	0006ab80 	call	6ab8 <__sfp_lock_release>
    9de4:	9005883a 	mov	r2,r18
    9de8:	dfc00317 	ldw	ra,12(sp)
    9dec:	dc800217 	ldw	r18,8(sp)
    9df0:	dc400117 	ldw	r17,4(sp)
    9df4:	dc000017 	ldw	r16,0(sp)
    9df8:	dec00404 	addi	sp,sp,16
    9dfc:	f800283a 	ret
    9e00:	0006ab80 	call	6ab8 <__sfp_lock_release>
    9e04:	0025883a 	mov	r18,zero
    9e08:	9005883a 	mov	r2,r18
    9e0c:	dfc00317 	ldw	ra,12(sp)
    9e10:	dc800217 	ldw	r18,8(sp)
    9e14:	dc400117 	ldw	r17,4(sp)
    9e18:	dc000017 	ldw	r16,0(sp)
    9e1c:	dec00404 	addi	sp,sp,16
    9e20:	f800283a 	ret
    9e24:	8809883a 	mov	r4,r17
    9e28:	0006ac40 	call	6ac4 <__sinit>
    9e2c:	8080030f 	ldh	r2,12(r16)
    9e30:	103fd11e 	bne	r2,zero,9d78 <_fclose_r+0x38>
    9e34:	003ff206 	br	9e00 <_fclose_r+0xc0>
    9e38:	81400417 	ldw	r5,16(r16)
    9e3c:	8809883a 	mov	r4,r17
    9e40:	0006e480 	call	6e48 <_free_r>
    9e44:	003fd906 	br	9dac <_fclose_r+0x6c>
    9e48:	04bfffc4 	movi	r18,-1
    9e4c:	003fd406 	br	9da0 <_fclose_r+0x60>

00009e50 <fclose>:
    9e50:	00800074 	movhi	r2,1
    9e54:	1092ee04 	addi	r2,r2,19384
    9e58:	200b883a 	mov	r5,r4
    9e5c:	11000017 	ldw	r4,0(r2)
    9e60:	0009d401 	jmpi	9d40 <_fclose_r>

00009e64 <_fstat_r>:
    9e64:	defffd04 	addi	sp,sp,-12
    9e68:	dc000015 	stw	r16,0(sp)
    9e6c:	04000074 	movhi	r16,1
    9e70:	841ad004 	addi	r16,r16,27456
    9e74:	dc400115 	stw	r17,4(sp)
    9e78:	80000015 	stw	zero,0(r16)
    9e7c:	2023883a 	mov	r17,r4
    9e80:	2809883a 	mov	r4,r5
    9e84:	300b883a 	mov	r5,r6
    9e88:	dfc00215 	stw	ra,8(sp)
    9e8c:	000b7c40 	call	b7c4 <fstat>
    9e90:	1007883a 	mov	r3,r2
    9e94:	00bfffc4 	movi	r2,-1
    9e98:	18800626 	beq	r3,r2,9eb4 <_fstat_r+0x50>
    9e9c:	1805883a 	mov	r2,r3
    9ea0:	dfc00217 	ldw	ra,8(sp)
    9ea4:	dc400117 	ldw	r17,4(sp)
    9ea8:	dc000017 	ldw	r16,0(sp)
    9eac:	dec00304 	addi	sp,sp,12
    9eb0:	f800283a 	ret
    9eb4:	80800017 	ldw	r2,0(r16)
    9eb8:	103ff826 	beq	r2,zero,9e9c <_fstat_r+0x38>
    9ebc:	88800015 	stw	r2,0(r17)
    9ec0:	1805883a 	mov	r2,r3
    9ec4:	dfc00217 	ldw	ra,8(sp)
    9ec8:	dc400117 	ldw	r17,4(sp)
    9ecc:	dc000017 	ldw	r16,0(sp)
    9ed0:	dec00304 	addi	sp,sp,12
    9ed4:	f800283a 	ret

00009ed8 <_isatty_r>:
    9ed8:	defffd04 	addi	sp,sp,-12
    9edc:	dc000015 	stw	r16,0(sp)
    9ee0:	04000074 	movhi	r16,1
    9ee4:	841ad004 	addi	r16,r16,27456
    9ee8:	dc400115 	stw	r17,4(sp)
    9eec:	80000015 	stw	zero,0(r16)
    9ef0:	2023883a 	mov	r17,r4
    9ef4:	2809883a 	mov	r4,r5
    9ef8:	dfc00215 	stw	ra,8(sp)
    9efc:	000bab80 	call	bab8 <isatty>
    9f00:	1007883a 	mov	r3,r2
    9f04:	00bfffc4 	movi	r2,-1
    9f08:	18800626 	beq	r3,r2,9f24 <_isatty_r+0x4c>
    9f0c:	1805883a 	mov	r2,r3
    9f10:	dfc00217 	ldw	ra,8(sp)
    9f14:	dc400117 	ldw	r17,4(sp)
    9f18:	dc000017 	ldw	r16,0(sp)
    9f1c:	dec00304 	addi	sp,sp,12
    9f20:	f800283a 	ret
    9f24:	80800017 	ldw	r2,0(r16)
    9f28:	103ff826 	beq	r2,zero,9f0c <_isatty_r+0x34>
    9f2c:	88800015 	stw	r2,0(r17)
    9f30:	1805883a 	mov	r2,r3
    9f34:	dfc00217 	ldw	ra,8(sp)
    9f38:	dc400117 	ldw	r17,4(sp)
    9f3c:	dc000017 	ldw	r16,0(sp)
    9f40:	dec00304 	addi	sp,sp,12
    9f44:	f800283a 	ret

00009f48 <_lseek_r>:
    9f48:	defffd04 	addi	sp,sp,-12
    9f4c:	dc000015 	stw	r16,0(sp)
    9f50:	04000074 	movhi	r16,1
    9f54:	841ad004 	addi	r16,r16,27456
    9f58:	dc400115 	stw	r17,4(sp)
    9f5c:	80000015 	stw	zero,0(r16)
    9f60:	2023883a 	mov	r17,r4
    9f64:	2809883a 	mov	r4,r5
    9f68:	300b883a 	mov	r5,r6
    9f6c:	380d883a 	mov	r6,r7
    9f70:	dfc00215 	stw	ra,8(sp)
    9f74:	000bcc40 	call	bcc4 <lseek>
    9f78:	1007883a 	mov	r3,r2
    9f7c:	00bfffc4 	movi	r2,-1
    9f80:	18800626 	beq	r3,r2,9f9c <_lseek_r+0x54>
    9f84:	1805883a 	mov	r2,r3
    9f88:	dfc00217 	ldw	ra,8(sp)
    9f8c:	dc400117 	ldw	r17,4(sp)
    9f90:	dc000017 	ldw	r16,0(sp)
    9f94:	dec00304 	addi	sp,sp,12
    9f98:	f800283a 	ret
    9f9c:	80800017 	ldw	r2,0(r16)
    9fa0:	103ff826 	beq	r2,zero,9f84 <_lseek_r+0x3c>
    9fa4:	88800015 	stw	r2,0(r17)
    9fa8:	1805883a 	mov	r2,r3
    9fac:	dfc00217 	ldw	ra,8(sp)
    9fb0:	dc400117 	ldw	r17,4(sp)
    9fb4:	dc000017 	ldw	r16,0(sp)
    9fb8:	dec00304 	addi	sp,sp,12
    9fbc:	f800283a 	ret

00009fc0 <_read_r>:
    9fc0:	defffd04 	addi	sp,sp,-12
    9fc4:	dc000015 	stw	r16,0(sp)
    9fc8:	04000074 	movhi	r16,1
    9fcc:	841ad004 	addi	r16,r16,27456
    9fd0:	dc400115 	stw	r17,4(sp)
    9fd4:	80000015 	stw	zero,0(r16)
    9fd8:	2023883a 	mov	r17,r4
    9fdc:	2809883a 	mov	r4,r5
    9fe0:	300b883a 	mov	r5,r6
    9fe4:	380d883a 	mov	r6,r7
    9fe8:	dfc00215 	stw	ra,8(sp)
    9fec:	000c1580 	call	c158 <read>
    9ff0:	1007883a 	mov	r3,r2
    9ff4:	00bfffc4 	movi	r2,-1
    9ff8:	18800626 	beq	r3,r2,a014 <_read_r+0x54>
    9ffc:	1805883a 	mov	r2,r3
    a000:	dfc00217 	ldw	ra,8(sp)
    a004:	dc400117 	ldw	r17,4(sp)
    a008:	dc000017 	ldw	r16,0(sp)
    a00c:	dec00304 	addi	sp,sp,12
    a010:	f800283a 	ret
    a014:	80800017 	ldw	r2,0(r16)
    a018:	103ff826 	beq	r2,zero,9ffc <_read_r+0x3c>
    a01c:	88800015 	stw	r2,0(r17)
    a020:	1805883a 	mov	r2,r3
    a024:	dfc00217 	ldw	ra,8(sp)
    a028:	dc400117 	ldw	r17,4(sp)
    a02c:	dc000017 	ldw	r16,0(sp)
    a030:	dec00304 	addi	sp,sp,12
    a034:	f800283a 	ret

0000a038 <__udivdi3>:
    a038:	defff004 	addi	sp,sp,-64
    a03c:	2005883a 	mov	r2,r4
    a040:	3011883a 	mov	r8,r6
    a044:	df000e15 	stw	fp,56(sp)
    a048:	dd000a15 	stw	r20,40(sp)
    a04c:	dc000615 	stw	r16,24(sp)
    a050:	dfc00f15 	stw	ra,60(sp)
    a054:	ddc00d15 	stw	r23,52(sp)
    a058:	dd800c15 	stw	r22,48(sp)
    a05c:	dd400b15 	stw	r21,44(sp)
    a060:	dcc00915 	stw	r19,36(sp)
    a064:	dc800815 	stw	r18,32(sp)
    a068:	dc400715 	stw	r17,28(sp)
    a06c:	4021883a 	mov	r16,r8
    a070:	1039883a 	mov	fp,r2
    a074:	2829883a 	mov	r20,r5
    a078:	38003b1e 	bne	r7,zero,a168 <__udivdi3+0x130>
    a07c:	2a005c36 	bltu	r5,r8,a1f0 <__udivdi3+0x1b8>
    a080:	4000a626 	beq	r8,zero,a31c <__udivdi3+0x2e4>
    a084:	00bfffd4 	movui	r2,65535
    a088:	14009e36 	bltu	r2,r16,a304 <__udivdi3+0x2cc>
    a08c:	00803fc4 	movi	r2,255
    a090:	14013d36 	bltu	r2,r16,a588 <__udivdi3+0x550>
    a094:	000b883a 	mov	r5,zero
    a098:	0005883a 	mov	r2,zero
    a09c:	8084d83a 	srl	r2,r16,r2
    a0a0:	01000074 	movhi	r4,1
    a0a4:	210a0e04 	addi	r4,r4,10296
    a0a8:	01800804 	movi	r6,32
    a0ac:	1105883a 	add	r2,r2,r4
    a0b0:	10c00003 	ldbu	r3,0(r2)
    a0b4:	28c7883a 	add	r3,r5,r3
    a0b8:	30edc83a 	sub	r22,r6,r3
    a0bc:	b000ee1e 	bne	r22,zero,a478 <__udivdi3+0x440>
    a0c0:	802ad43a 	srli	r21,r16,16
    a0c4:	00800044 	movi	r2,1
    a0c8:	a423c83a 	sub	r17,r20,r16
    a0cc:	85ffffcc 	andi	r23,r16,65535
    a0d0:	d8800315 	stw	r2,12(sp)
    a0d4:	8809883a 	mov	r4,r17
    a0d8:	a80b883a 	mov	r5,r21
    a0dc:	000b5640 	call	b564 <__udivsi3>
    a0e0:	8809883a 	mov	r4,r17
    a0e4:	a80b883a 	mov	r5,r21
    a0e8:	102d883a 	mov	r22,r2
    a0ec:	000b56c0 	call	b56c <__umodsi3>
    a0f0:	1004943a 	slli	r2,r2,16
    a0f4:	e006d43a 	srli	r3,fp,16
    a0f8:	bda3383a 	mul	r17,r23,r22
    a0fc:	10c4b03a 	or	r2,r2,r3
    a100:	1440042e 	bgeu	r2,r17,a114 <__udivdi3+0xdc>
    a104:	1405883a 	add	r2,r2,r16
    a108:	b5bfffc4 	addi	r22,r22,-1
    a10c:	14000136 	bltu	r2,r16,a114 <__udivdi3+0xdc>
    a110:	14413d36 	bltu	r2,r17,a608 <__udivdi3+0x5d0>
    a114:	1463c83a 	sub	r17,r2,r17
    a118:	8809883a 	mov	r4,r17
    a11c:	a80b883a 	mov	r5,r21
    a120:	000b5640 	call	b564 <__udivsi3>
    a124:	8809883a 	mov	r4,r17
    a128:	a80b883a 	mov	r5,r21
    a12c:	1029883a 	mov	r20,r2
    a130:	000b56c0 	call	b56c <__umodsi3>
    a134:	1004943a 	slli	r2,r2,16
    a138:	bd09383a 	mul	r4,r23,r20
    a13c:	e0ffffcc 	andi	r3,fp,65535
    a140:	10c4b03a 	or	r2,r2,r3
    a144:	1100042e 	bgeu	r2,r4,a158 <__udivdi3+0x120>
    a148:	8085883a 	add	r2,r16,r2
    a14c:	a53fffc4 	addi	r20,r20,-1
    a150:	14000136 	bltu	r2,r16,a158 <__udivdi3+0x120>
    a154:	11012036 	bltu	r2,r4,a5d8 <__udivdi3+0x5a0>
    a158:	b004943a 	slli	r2,r22,16
    a15c:	d9000317 	ldw	r4,12(sp)
    a160:	a084b03a 	or	r2,r20,r2
    a164:	00001506 	br	a1bc <__udivdi3+0x184>
    a168:	380d883a 	mov	r6,r7
    a16c:	29c06236 	bltu	r5,r7,a2f8 <__udivdi3+0x2c0>
    a170:	00bfffd4 	movui	r2,65535
    a174:	11c05a36 	bltu	r2,r7,a2e0 <__udivdi3+0x2a8>
    a178:	00803fc4 	movi	r2,255
    a17c:	11c0fc36 	bltu	r2,r7,a570 <__udivdi3+0x538>
    a180:	000b883a 	mov	r5,zero
    a184:	0005883a 	mov	r2,zero
    a188:	3084d83a 	srl	r2,r6,r2
    a18c:	01000074 	movhi	r4,1
    a190:	210a0e04 	addi	r4,r4,10296
    a194:	01c00804 	movi	r7,32
    a198:	1105883a 	add	r2,r2,r4
    a19c:	10c00003 	ldbu	r3,0(r2)
    a1a0:	28c7883a 	add	r3,r5,r3
    a1a4:	38efc83a 	sub	r23,r7,r3
    a1a8:	b800691e 	bne	r23,zero,a350 <__udivdi3+0x318>
    a1ac:	35000136 	bltu	r6,r20,a1b4 <__udivdi3+0x17c>
    a1b0:	e4005136 	bltu	fp,r16,a2f8 <__udivdi3+0x2c0>
    a1b4:	00800044 	movi	r2,1
    a1b8:	0009883a 	mov	r4,zero
    a1bc:	2007883a 	mov	r3,r4
    a1c0:	dfc00f17 	ldw	ra,60(sp)
    a1c4:	df000e17 	ldw	fp,56(sp)
    a1c8:	ddc00d17 	ldw	r23,52(sp)
    a1cc:	dd800c17 	ldw	r22,48(sp)
    a1d0:	dd400b17 	ldw	r21,44(sp)
    a1d4:	dd000a17 	ldw	r20,40(sp)
    a1d8:	dcc00917 	ldw	r19,36(sp)
    a1dc:	dc800817 	ldw	r18,32(sp)
    a1e0:	dc400717 	ldw	r17,28(sp)
    a1e4:	dc000617 	ldw	r16,24(sp)
    a1e8:	dec01004 	addi	sp,sp,64
    a1ec:	f800283a 	ret
    a1f0:	00bfffd4 	movui	r2,65535
    a1f4:	12005036 	bltu	r2,r8,a338 <__udivdi3+0x300>
    a1f8:	00803fc4 	movi	r2,255
    a1fc:	1200e836 	bltu	r2,r8,a5a0 <__udivdi3+0x568>
    a200:	000b883a 	mov	r5,zero
    a204:	0005883a 	mov	r2,zero
    a208:	8084d83a 	srl	r2,r16,r2
    a20c:	01000074 	movhi	r4,1
    a210:	210a0e04 	addi	r4,r4,10296
    a214:	01800804 	movi	r6,32
    a218:	1105883a 	add	r2,r2,r4
    a21c:	10c00003 	ldbu	r3,0(r2)
    a220:	28c7883a 	add	r3,r5,r3
    a224:	30cbc83a 	sub	r5,r6,r3
    a228:	28000626 	beq	r5,zero,a244 <__udivdi3+0x20c>
    a22c:	3145c83a 	sub	r2,r6,r5
    a230:	e084d83a 	srl	r2,fp,r2
    a234:	a146983a 	sll	r3,r20,r5
    a238:	e178983a 	sll	fp,fp,r5
    a23c:	8160983a 	sll	r16,r16,r5
    a240:	18a8b03a 	or	r20,r3,r2
    a244:	802ad43a 	srli	r21,r16,16
    a248:	a009883a 	mov	r4,r20
    a24c:	85ffffcc 	andi	r23,r16,65535
    a250:	a80b883a 	mov	r5,r21
    a254:	000b5640 	call	b564 <__udivsi3>
    a258:	a009883a 	mov	r4,r20
    a25c:	a80b883a 	mov	r5,r21
    a260:	102d883a 	mov	r22,r2
    a264:	000b56c0 	call	b56c <__umodsi3>
    a268:	1004943a 	slli	r2,r2,16
    a26c:	e006d43a 	srli	r3,fp,16
    a270:	bda3383a 	mul	r17,r23,r22
    a274:	10c4b03a 	or	r2,r2,r3
    a278:	1440042e 	bgeu	r2,r17,a28c <__udivdi3+0x254>
    a27c:	1405883a 	add	r2,r2,r16
    a280:	b5bfffc4 	addi	r22,r22,-1
    a284:	14000136 	bltu	r2,r16,a28c <__udivdi3+0x254>
    a288:	1440d536 	bltu	r2,r17,a5e0 <__udivdi3+0x5a8>
    a28c:	1463c83a 	sub	r17,r2,r17
    a290:	8809883a 	mov	r4,r17
    a294:	a80b883a 	mov	r5,r21
    a298:	000b5640 	call	b564 <__udivsi3>
    a29c:	8809883a 	mov	r4,r17
    a2a0:	a80b883a 	mov	r5,r21
    a2a4:	1029883a 	mov	r20,r2
    a2a8:	000b56c0 	call	b56c <__umodsi3>
    a2ac:	1004943a 	slli	r2,r2,16
    a2b0:	bd09383a 	mul	r4,r23,r20
    a2b4:	e0ffffcc 	andi	r3,fp,65535
    a2b8:	10c4b03a 	or	r2,r2,r3
    a2bc:	1100042e 	bgeu	r2,r4,a2d0 <__udivdi3+0x298>
    a2c0:	8085883a 	add	r2,r16,r2
    a2c4:	a53fffc4 	addi	r20,r20,-1
    a2c8:	14000136 	bltu	r2,r16,a2d0 <__udivdi3+0x298>
    a2cc:	1100c736 	bltu	r2,r4,a5ec <__udivdi3+0x5b4>
    a2d0:	b004943a 	slli	r2,r22,16
    a2d4:	0009883a 	mov	r4,zero
    a2d8:	a084b03a 	or	r2,r20,r2
    a2dc:	003fb706 	br	a1bc <__udivdi3+0x184>
    a2e0:	00804034 	movhi	r2,256
    a2e4:	10bfffc4 	addi	r2,r2,-1
    a2e8:	11c0a436 	bltu	r2,r7,a57c <__udivdi3+0x544>
    a2ec:	01400404 	movi	r5,16
    a2f0:	2805883a 	mov	r2,r5
    a2f4:	003fa406 	br	a188 <__udivdi3+0x150>
    a2f8:	0005883a 	mov	r2,zero
    a2fc:	0009883a 	mov	r4,zero
    a300:	003fae06 	br	a1bc <__udivdi3+0x184>
    a304:	00804034 	movhi	r2,256
    a308:	10bfffc4 	addi	r2,r2,-1
    a30c:	1400a136 	bltu	r2,r16,a594 <__udivdi3+0x55c>
    a310:	01400404 	movi	r5,16
    a314:	2805883a 	mov	r2,r5
    a318:	003f6006 	br	a09c <__udivdi3+0x64>
    a31c:	01000044 	movi	r4,1
    a320:	000b883a 	mov	r5,zero
    a324:	000b5640 	call	b564 <__udivsi3>
    a328:	1021883a 	mov	r16,r2
    a32c:	00bfffd4 	movui	r2,65535
    a330:	143ff436 	bltu	r2,r16,a304 <__udivdi3+0x2cc>
    a334:	003f5506 	br	a08c <__udivdi3+0x54>
    a338:	00804034 	movhi	r2,256
    a33c:	10bfffc4 	addi	r2,r2,-1
    a340:	12009a36 	bltu	r2,r8,a5ac <__udivdi3+0x574>
    a344:	01400404 	movi	r5,16
    a348:	2805883a 	mov	r2,r5
    a34c:	003fae06 	br	a208 <__udivdi3+0x1d0>
    a350:	3dc5c83a 	sub	r2,r7,r23
    a354:	35c8983a 	sll	r4,r6,r23
    a358:	8086d83a 	srl	r3,r16,r2
    a35c:	a0a2d83a 	srl	r17,r20,r2
    a360:	e084d83a 	srl	r2,fp,r2
    a364:	20eab03a 	or	r21,r4,r3
    a368:	a82cd43a 	srli	r22,r21,16
    a36c:	a5c6983a 	sll	r3,r20,r23
    a370:	8809883a 	mov	r4,r17
    a374:	b00b883a 	mov	r5,r22
    a378:	1886b03a 	or	r3,r3,r2
    a37c:	d8c00215 	stw	r3,8(sp)
    a380:	000b5640 	call	b564 <__udivsi3>
    a384:	8809883a 	mov	r4,r17
    a388:	b00b883a 	mov	r5,r22
    a38c:	1029883a 	mov	r20,r2
    a390:	000b56c0 	call	b56c <__umodsi3>
    a394:	a8ffffcc 	andi	r3,r21,65535
    a398:	d8c00515 	stw	r3,20(sp)
    a39c:	d9000217 	ldw	r4,8(sp)
    a3a0:	d9400517 	ldw	r5,20(sp)
    a3a4:	1004943a 	slli	r2,r2,16
    a3a8:	2006d43a 	srli	r3,r4,16
    a3ac:	85e0983a 	sll	r16,r16,r23
    a3b0:	2d23383a 	mul	r17,r5,r20
    a3b4:	10c4b03a 	or	r2,r2,r3
    a3b8:	dc000015 	stw	r16,0(sp)
    a3bc:	1440032e 	bgeu	r2,r17,a3cc <__udivdi3+0x394>
    a3c0:	1545883a 	add	r2,r2,r21
    a3c4:	a53fffc4 	addi	r20,r20,-1
    a3c8:	15407f2e 	bgeu	r2,r21,a5c8 <__udivdi3+0x590>
    a3cc:	1463c83a 	sub	r17,r2,r17
    a3d0:	8809883a 	mov	r4,r17
    a3d4:	b00b883a 	mov	r5,r22
    a3d8:	000b5640 	call	b564 <__udivsi3>
    a3dc:	8809883a 	mov	r4,r17
    a3e0:	b00b883a 	mov	r5,r22
    a3e4:	1021883a 	mov	r16,r2
    a3e8:	000b56c0 	call	b56c <__umodsi3>
    a3ec:	d8c00517 	ldw	r3,20(sp)
    a3f0:	d9000217 	ldw	r4,8(sp)
    a3f4:	1004943a 	slli	r2,r2,16
    a3f8:	1c0f383a 	mul	r7,r3,r16
    a3fc:	20ffffcc 	andi	r3,r4,65535
    a400:	10e2b03a 	or	r17,r2,r3
    a404:	89c0032e 	bgeu	r17,r7,a414 <__udivdi3+0x3dc>
    a408:	8d63883a 	add	r17,r17,r21
    a40c:	843fffc4 	addi	r16,r16,-1
    a410:	8d40692e 	bgeu	r17,r21,a5b8 <__udivdi3+0x580>
    a414:	a008943a 	slli	r4,r20,16
    a418:	d9400017 	ldw	r5,0(sp)
    a41c:	89e3c83a 	sub	r17,r17,r7
    a420:	8110b03a 	or	r8,r16,r4
    a424:	280cd43a 	srli	r6,r5,16
    a428:	28ffffcc 	andi	r3,r5,65535
    a42c:	40bfffcc 	andi	r2,r8,65535
    a430:	400ad43a 	srli	r5,r8,16
    a434:	10d3383a 	mul	r9,r2,r3
    a438:	1185383a 	mul	r2,r2,r6
    a43c:	28c7383a 	mul	r3,r5,r3
    a440:	4808d43a 	srli	r4,r9,16
    a444:	298b383a 	mul	r5,r5,r6
    a448:	10c5883a 	add	r2,r2,r3
    a44c:	2089883a 	add	r4,r4,r2
    a450:	20c0022e 	bgeu	r4,r3,a45c <__udivdi3+0x424>
    a454:	00800074 	movhi	r2,1
    a458:	288b883a 	add	r5,r5,r2
    a45c:	2004d43a 	srli	r2,r4,16
    a460:	288b883a 	add	r5,r5,r2
    a464:	89403f36 	bltu	r17,r5,a564 <__udivdi3+0x52c>
    a468:	89403926 	beq	r17,r5,a550 <__udivdi3+0x518>
    a46c:	4005883a 	mov	r2,r8
    a470:	0009883a 	mov	r4,zero
    a474:	003f5106 	br	a1bc <__udivdi3+0x184>
    a478:	85a0983a 	sll	r16,r16,r22
    a47c:	3585c83a 	sub	r2,r6,r22
    a480:	a0a2d83a 	srl	r17,r20,r2
    a484:	802ad43a 	srli	r21,r16,16
    a488:	e084d83a 	srl	r2,fp,r2
    a48c:	a586983a 	sll	r3,r20,r22
    a490:	8809883a 	mov	r4,r17
    a494:	a80b883a 	mov	r5,r21
    a498:	1886b03a 	or	r3,r3,r2
    a49c:	d8c00115 	stw	r3,4(sp)
    a4a0:	000b5640 	call	b564 <__udivsi3>
    a4a4:	8809883a 	mov	r4,r17
    a4a8:	a80b883a 	mov	r5,r21
    a4ac:	d8800415 	stw	r2,16(sp)
    a4b0:	000b56c0 	call	b56c <__umodsi3>
    a4b4:	d9000117 	ldw	r4,4(sp)
    a4b8:	d9400417 	ldw	r5,16(sp)
    a4bc:	1004943a 	slli	r2,r2,16
    a4c0:	85ffffcc 	andi	r23,r16,65535
    a4c4:	2006d43a 	srli	r3,r4,16
    a4c8:	b963383a 	mul	r17,r23,r5
    a4cc:	10c4b03a 	or	r2,r2,r3
    a4d0:	1440042e 	bgeu	r2,r17,a4e4 <__udivdi3+0x4ac>
    a4d4:	297fffc4 	addi	r5,r5,-1
    a4d8:	1405883a 	add	r2,r2,r16
    a4dc:	d9400415 	stw	r5,16(sp)
    a4e0:	1400442e 	bgeu	r2,r16,a5f4 <__udivdi3+0x5bc>
    a4e4:	1463c83a 	sub	r17,r2,r17
    a4e8:	8809883a 	mov	r4,r17
    a4ec:	a80b883a 	mov	r5,r21
    a4f0:	000b5640 	call	b564 <__udivsi3>
    a4f4:	8809883a 	mov	r4,r17
    a4f8:	a80b883a 	mov	r5,r21
    a4fc:	1029883a 	mov	r20,r2
    a500:	000b56c0 	call	b56c <__umodsi3>
    a504:	d9400117 	ldw	r5,4(sp)
    a508:	1004943a 	slli	r2,r2,16
    a50c:	bd09383a 	mul	r4,r23,r20
    a510:	28ffffcc 	andi	r3,r5,65535
    a514:	10c6b03a 	or	r3,r2,r3
    a518:	1900062e 	bgeu	r3,r4,a534 <__udivdi3+0x4fc>
    a51c:	1c07883a 	add	r3,r3,r16
    a520:	a53fffc4 	addi	r20,r20,-1
    a524:	1c000336 	bltu	r3,r16,a534 <__udivdi3+0x4fc>
    a528:	1900022e 	bgeu	r3,r4,a534 <__udivdi3+0x4fc>
    a52c:	a53fffc4 	addi	r20,r20,-1
    a530:	1c07883a 	add	r3,r3,r16
    a534:	d9400417 	ldw	r5,16(sp)
    a538:	e5b8983a 	sll	fp,fp,r22
    a53c:	1923c83a 	sub	r17,r3,r4
    a540:	2804943a 	slli	r2,r5,16
    a544:	a0a8b03a 	or	r20,r20,r2
    a548:	dd000315 	stw	r20,12(sp)
    a54c:	003ee106 	br	a0d4 <__udivdi3+0x9c>
    a550:	2004943a 	slli	r2,r4,16
    a554:	e5c8983a 	sll	r4,fp,r23
    a558:	48ffffcc 	andi	r3,r9,65535
    a55c:	10c5883a 	add	r2,r2,r3
    a560:	20bfc22e 	bgeu	r4,r2,a46c <__udivdi3+0x434>
    a564:	40bfffc4 	addi	r2,r8,-1
    a568:	0009883a 	mov	r4,zero
    a56c:	003f1306 	br	a1bc <__udivdi3+0x184>
    a570:	01400204 	movi	r5,8
    a574:	2805883a 	mov	r2,r5
    a578:	003f0306 	br	a188 <__udivdi3+0x150>
    a57c:	01400604 	movi	r5,24
    a580:	2805883a 	mov	r2,r5
    a584:	003f0006 	br	a188 <__udivdi3+0x150>
    a588:	01400204 	movi	r5,8
    a58c:	2805883a 	mov	r2,r5
    a590:	003ec206 	br	a09c <__udivdi3+0x64>
    a594:	01400604 	movi	r5,24
    a598:	2805883a 	mov	r2,r5
    a59c:	003ebf06 	br	a09c <__udivdi3+0x64>
    a5a0:	01400204 	movi	r5,8
    a5a4:	2805883a 	mov	r2,r5
    a5a8:	003f1706 	br	a208 <__udivdi3+0x1d0>
    a5ac:	01400604 	movi	r5,24
    a5b0:	2805883a 	mov	r2,r5
    a5b4:	003f1406 	br	a208 <__udivdi3+0x1d0>
    a5b8:	89ff962e 	bgeu	r17,r7,a414 <__udivdi3+0x3dc>
    a5bc:	8d63883a 	add	r17,r17,r21
    a5c0:	843fffc4 	addi	r16,r16,-1
    a5c4:	003f9306 	br	a414 <__udivdi3+0x3dc>
    a5c8:	147f802e 	bgeu	r2,r17,a3cc <__udivdi3+0x394>
    a5cc:	a53fffc4 	addi	r20,r20,-1
    a5d0:	1545883a 	add	r2,r2,r21
    a5d4:	003f7d06 	br	a3cc <__udivdi3+0x394>
    a5d8:	a53fffc4 	addi	r20,r20,-1
    a5dc:	003ede06 	br	a158 <__udivdi3+0x120>
    a5e0:	b5bfffc4 	addi	r22,r22,-1
    a5e4:	1405883a 	add	r2,r2,r16
    a5e8:	003f2806 	br	a28c <__udivdi3+0x254>
    a5ec:	a53fffc4 	addi	r20,r20,-1
    a5f0:	003f3706 	br	a2d0 <__udivdi3+0x298>
    a5f4:	147fbb2e 	bgeu	r2,r17,a4e4 <__udivdi3+0x4ac>
    a5f8:	297fffc4 	addi	r5,r5,-1
    a5fc:	1405883a 	add	r2,r2,r16
    a600:	d9400415 	stw	r5,16(sp)
    a604:	003fb706 	br	a4e4 <__udivdi3+0x4ac>
    a608:	b5bfffc4 	addi	r22,r22,-1
    a60c:	1405883a 	add	r2,r2,r16
    a610:	003ec006 	br	a114 <__udivdi3+0xdc>

0000a614 <__umoddi3>:
    a614:	defff104 	addi	sp,sp,-60
    a618:	dd800b15 	stw	r22,44(sp)
    a61c:	dd000915 	stw	r20,36(sp)
    a620:	dc000515 	stw	r16,20(sp)
    a624:	dfc00e15 	stw	ra,56(sp)
    a628:	df000d15 	stw	fp,52(sp)
    a62c:	ddc00c15 	stw	r23,48(sp)
    a630:	dd400a15 	stw	r21,40(sp)
    a634:	dcc00815 	stw	r19,32(sp)
    a638:	dc800715 	stw	r18,28(sp)
    a63c:	dc400615 	stw	r17,24(sp)
    a640:	3021883a 	mov	r16,r6
    a644:	202d883a 	mov	r22,r4
    a648:	2829883a 	mov	r20,r5
    a64c:	38002b1e 	bne	r7,zero,a6fc <__umoddi3+0xe8>
    a650:	29805036 	bltu	r5,r6,a794 <__umoddi3+0x180>
    a654:	30008a26 	beq	r6,zero,a880 <__umoddi3+0x26c>
    a658:	00bfffd4 	movui	r2,65535
    a65c:	14008236 	bltu	r2,r16,a868 <__umoddi3+0x254>
    a660:	00803fc4 	movi	r2,255
    a664:	14013636 	bltu	r2,r16,ab40 <__umoddi3+0x52c>
    a668:	000b883a 	mov	r5,zero
    a66c:	0005883a 	mov	r2,zero
    a670:	8084d83a 	srl	r2,r16,r2
    a674:	01000074 	movhi	r4,1
    a678:	210a0e04 	addi	r4,r4,10296
    a67c:	01800804 	movi	r6,32
    a680:	1105883a 	add	r2,r2,r4
    a684:	10c00003 	ldbu	r3,0(r2)
    a688:	28c7883a 	add	r3,r5,r3
    a68c:	30efc83a 	sub	r23,r6,r3
    a690:	b800941e 	bne	r23,zero,a8e4 <__umoddi3+0x2d0>
    a694:	802ad43a 	srli	r21,r16,16
    a698:	a423c83a 	sub	r17,r20,r16
    a69c:	0039883a 	mov	fp,zero
    a6a0:	853fffcc 	andi	r20,r16,65535
    a6a4:	8809883a 	mov	r4,r17
    a6a8:	a80b883a 	mov	r5,r21
    a6ac:	000b5640 	call	b564 <__udivsi3>
    a6b0:	8809883a 	mov	r4,r17
    a6b4:	a80b883a 	mov	r5,r21
    a6b8:	a0a3383a 	mul	r17,r20,r2
    a6bc:	000b56c0 	call	b56c <__umodsi3>
    a6c0:	1004943a 	slli	r2,r2,16
    a6c4:	b006d43a 	srli	r3,r22,16
    a6c8:	10c4b03a 	or	r2,r2,r3
    a6cc:	1440032e 	bgeu	r2,r17,a6dc <__umoddi3+0xc8>
    a6d0:	1405883a 	add	r2,r2,r16
    a6d4:	14000136 	bltu	r2,r16,a6dc <__umoddi3+0xc8>
    a6d8:	14413536 	bltu	r2,r17,abb0 <__umoddi3+0x59c>
    a6dc:	1463c83a 	sub	r17,r2,r17
    a6e0:	8809883a 	mov	r4,r17
    a6e4:	a80b883a 	mov	r5,r21
    a6e8:	000b5640 	call	b564 <__udivsi3>
    a6ec:	8809883a 	mov	r4,r17
    a6f0:	a0a3383a 	mul	r17,r20,r2
    a6f4:	a80b883a 	mov	r5,r21
    a6f8:	00004d06 	br	a830 <__umoddi3+0x21c>
    a6fc:	380d883a 	mov	r6,r7
    a700:	29c0102e 	bgeu	r5,r7,a744 <__umoddi3+0x130>
    a704:	2011883a 	mov	r8,r4
    a708:	2813883a 	mov	r9,r5
    a70c:	4005883a 	mov	r2,r8
    a710:	4807883a 	mov	r3,r9
    a714:	dfc00e17 	ldw	ra,56(sp)
    a718:	df000d17 	ldw	fp,52(sp)
    a71c:	ddc00c17 	ldw	r23,48(sp)
    a720:	dd800b17 	ldw	r22,44(sp)
    a724:	dd400a17 	ldw	r21,40(sp)
    a728:	dd000917 	ldw	r20,36(sp)
    a72c:	dcc00817 	ldw	r19,32(sp)
    a730:	dc800717 	ldw	r18,28(sp)
    a734:	dc400617 	ldw	r17,24(sp)
    a738:	dc000517 	ldw	r16,20(sp)
    a73c:	dec00f04 	addi	sp,sp,60
    a740:	f800283a 	ret
    a744:	00bfffd4 	movui	r2,65535
    a748:	11c05a36 	bltu	r2,r7,a8b4 <__umoddi3+0x2a0>
    a74c:	00803fc4 	movi	r2,255
    a750:	11c0fe36 	bltu	r2,r7,ab4c <__umoddi3+0x538>
    a754:	000b883a 	mov	r5,zero
    a758:	0005883a 	mov	r2,zero
    a75c:	3084d83a 	srl	r2,r6,r2
    a760:	01000074 	movhi	r4,1
    a764:	210a0e04 	addi	r4,r4,10296
    a768:	01c00804 	movi	r7,32
    a76c:	1105883a 	add	r2,r2,r4
    a770:	10c00003 	ldbu	r3,0(r2)
    a774:	28c7883a 	add	r3,r5,r3
    a778:	38ebc83a 	sub	r21,r7,r3
    a77c:	a800851e 	bne	r21,zero,a994 <__umoddi3+0x380>
    a780:	35005236 	bltu	r6,r20,a8cc <__umoddi3+0x2b8>
    a784:	b400512e 	bgeu	r22,r16,a8cc <__umoddi3+0x2b8>
    a788:	b011883a 	mov	r8,r22
    a78c:	a013883a 	mov	r9,r20
    a790:	003fde06 	br	a70c <__umoddi3+0xf8>
    a794:	00bfffd4 	movui	r2,65535
    a798:	11804036 	bltu	r2,r6,a89c <__umoddi3+0x288>
    a79c:	00803fc4 	movi	r2,255
    a7a0:	1180ed36 	bltu	r2,r6,ab58 <__umoddi3+0x544>
    a7a4:	000b883a 	mov	r5,zero
    a7a8:	0005883a 	mov	r2,zero
    a7ac:	8084d83a 	srl	r2,r16,r2
    a7b0:	01000074 	movhi	r4,1
    a7b4:	210a0e04 	addi	r4,r4,10296
    a7b8:	01800804 	movi	r6,32
    a7bc:	1105883a 	add	r2,r2,r4
    a7c0:	10c00003 	ldbu	r3,0(r2)
    a7c4:	28c7883a 	add	r3,r5,r3
    a7c8:	30c7c83a 	sub	r3,r6,r3
    a7cc:	1800bf1e 	bne	r3,zero,aacc <__umoddi3+0x4b8>
    a7d0:	0039883a 	mov	fp,zero
    a7d4:	802ad43a 	srli	r21,r16,16
    a7d8:	a009883a 	mov	r4,r20
    a7dc:	85ffffcc 	andi	r23,r16,65535
    a7e0:	a80b883a 	mov	r5,r21
    a7e4:	000b5640 	call	b564 <__udivsi3>
    a7e8:	a009883a 	mov	r4,r20
    a7ec:	a80b883a 	mov	r5,r21
    a7f0:	b8a3383a 	mul	r17,r23,r2
    a7f4:	000b56c0 	call	b56c <__umodsi3>
    a7f8:	1004943a 	slli	r2,r2,16
    a7fc:	b006d43a 	srli	r3,r22,16
    a800:	10c4b03a 	or	r2,r2,r3
    a804:	1440032e 	bgeu	r2,r17,a814 <__umoddi3+0x200>
    a808:	1405883a 	add	r2,r2,r16
    a80c:	14000136 	bltu	r2,r16,a814 <__umoddi3+0x200>
    a810:	1440e536 	bltu	r2,r17,aba8 <__umoddi3+0x594>
    a814:	1463c83a 	sub	r17,r2,r17
    a818:	8809883a 	mov	r4,r17
    a81c:	a80b883a 	mov	r5,r21
    a820:	000b5640 	call	b564 <__udivsi3>
    a824:	8809883a 	mov	r4,r17
    a828:	b8a3383a 	mul	r17,r23,r2
    a82c:	a80b883a 	mov	r5,r21
    a830:	000b56c0 	call	b56c <__umodsi3>
    a834:	1004943a 	slli	r2,r2,16
    a838:	b0ffffcc 	andi	r3,r22,65535
    a83c:	10c4b03a 	or	r2,r2,r3
    a840:	1440042e 	bgeu	r2,r17,a854 <__umoddi3+0x240>
    a844:	1405883a 	add	r2,r2,r16
    a848:	14000236 	bltu	r2,r16,a854 <__umoddi3+0x240>
    a84c:	1440012e 	bgeu	r2,r17,a854 <__umoddi3+0x240>
    a850:	1405883a 	add	r2,r2,r16
    a854:	1445c83a 	sub	r2,r2,r17
    a858:	1724d83a 	srl	r18,r2,fp
    a85c:	0013883a 	mov	r9,zero
    a860:	9011883a 	mov	r8,r18
    a864:	003fa906 	br	a70c <__umoddi3+0xf8>
    a868:	00804034 	movhi	r2,256
    a86c:	10bfffc4 	addi	r2,r2,-1
    a870:	1400b036 	bltu	r2,r16,ab34 <__umoddi3+0x520>
    a874:	01400404 	movi	r5,16
    a878:	2805883a 	mov	r2,r5
    a87c:	003f7c06 	br	a670 <__umoddi3+0x5c>
    a880:	01000044 	movi	r4,1
    a884:	000b883a 	mov	r5,zero
    a888:	000b5640 	call	b564 <__udivsi3>
    a88c:	1021883a 	mov	r16,r2
    a890:	00bfffd4 	movui	r2,65535
    a894:	143ff436 	bltu	r2,r16,a868 <__umoddi3+0x254>
    a898:	003f7106 	br	a660 <__umoddi3+0x4c>
    a89c:	00804034 	movhi	r2,256
    a8a0:	10bfffc4 	addi	r2,r2,-1
    a8a4:	1180af36 	bltu	r2,r6,ab64 <__umoddi3+0x550>
    a8a8:	01400404 	movi	r5,16
    a8ac:	2805883a 	mov	r2,r5
    a8b0:	003fbe06 	br	a7ac <__umoddi3+0x198>
    a8b4:	00804034 	movhi	r2,256
    a8b8:	10bfffc4 	addi	r2,r2,-1
    a8bc:	11c0ac36 	bltu	r2,r7,ab70 <__umoddi3+0x55c>
    a8c0:	01400404 	movi	r5,16
    a8c4:	2805883a 	mov	r2,r5
    a8c8:	003fa406 	br	a75c <__umoddi3+0x148>
    a8cc:	b409c83a 	sub	r4,r22,r16
    a8d0:	b105803a 	cmpltu	r2,r22,r4
    a8d4:	a187c83a 	sub	r3,r20,r6
    a8d8:	18a9c83a 	sub	r20,r3,r2
    a8dc:	202d883a 	mov	r22,r4
    a8e0:	003fa906 	br	a788 <__umoddi3+0x174>
    a8e4:	85e0983a 	sll	r16,r16,r23
    a8e8:	35c5c83a 	sub	r2,r6,r23
    a8ec:	a0a2d83a 	srl	r17,r20,r2
    a8f0:	802ad43a 	srli	r21,r16,16
    a8f4:	b084d83a 	srl	r2,r22,r2
    a8f8:	a5c6983a 	sll	r3,r20,r23
    a8fc:	8809883a 	mov	r4,r17
    a900:	a80b883a 	mov	r5,r21
    a904:	1886b03a 	or	r3,r3,r2
    a908:	d8c00115 	stw	r3,4(sp)
    a90c:	853fffcc 	andi	r20,r16,65535
    a910:	000b5640 	call	b564 <__udivsi3>
    a914:	8809883a 	mov	r4,r17
    a918:	a80b883a 	mov	r5,r21
    a91c:	a0a3383a 	mul	r17,r20,r2
    a920:	000b56c0 	call	b56c <__umodsi3>
    a924:	d9000117 	ldw	r4,4(sp)
    a928:	1004943a 	slli	r2,r2,16
    a92c:	b839883a 	mov	fp,r23
    a930:	2006d43a 	srli	r3,r4,16
    a934:	10c4b03a 	or	r2,r2,r3
    a938:	1440022e 	bgeu	r2,r17,a944 <__umoddi3+0x330>
    a93c:	1405883a 	add	r2,r2,r16
    a940:	1400962e 	bgeu	r2,r16,ab9c <__umoddi3+0x588>
    a944:	1463c83a 	sub	r17,r2,r17
    a948:	8809883a 	mov	r4,r17
    a94c:	a80b883a 	mov	r5,r21
    a950:	000b5640 	call	b564 <__udivsi3>
    a954:	8809883a 	mov	r4,r17
    a958:	a80b883a 	mov	r5,r21
    a95c:	a0a3383a 	mul	r17,r20,r2
    a960:	000b56c0 	call	b56c <__umodsi3>
    a964:	d9400117 	ldw	r5,4(sp)
    a968:	1004943a 	slli	r2,r2,16
    a96c:	28ffffcc 	andi	r3,r5,65535
    a970:	10c4b03a 	or	r2,r2,r3
    a974:	1440042e 	bgeu	r2,r17,a988 <__umoddi3+0x374>
    a978:	1405883a 	add	r2,r2,r16
    a97c:	14000236 	bltu	r2,r16,a988 <__umoddi3+0x374>
    a980:	1440012e 	bgeu	r2,r17,a988 <__umoddi3+0x374>
    a984:	1405883a 	add	r2,r2,r16
    a988:	b5ec983a 	sll	r22,r22,r23
    a98c:	1463c83a 	sub	r17,r2,r17
    a990:	003f4406 	br	a6a4 <__umoddi3+0x90>
    a994:	3d4fc83a 	sub	r7,r7,r21
    a998:	3546983a 	sll	r3,r6,r21
    a99c:	81c4d83a 	srl	r2,r16,r7
    a9a0:	a1e2d83a 	srl	r17,r20,r7
    a9a4:	a54c983a 	sll	r6,r20,r21
    a9a8:	18aeb03a 	or	r23,r3,r2
    a9ac:	b828d43a 	srli	r20,r23,16
    a9b0:	b1c4d83a 	srl	r2,r22,r7
    a9b4:	8809883a 	mov	r4,r17
    a9b8:	a00b883a 	mov	r5,r20
    a9bc:	308cb03a 	or	r6,r6,r2
    a9c0:	d9c00315 	stw	r7,12(sp)
    a9c4:	d9800215 	stw	r6,8(sp)
    a9c8:	000b5640 	call	b564 <__udivsi3>
    a9cc:	8809883a 	mov	r4,r17
    a9d0:	a00b883a 	mov	r5,r20
    a9d4:	1039883a 	mov	fp,r2
    a9d8:	000b56c0 	call	b56c <__umodsi3>
    a9dc:	b8ffffcc 	andi	r3,r23,65535
    a9e0:	d8c00415 	stw	r3,16(sp)
    a9e4:	d9000217 	ldw	r4,8(sp)
    a9e8:	d9400417 	ldw	r5,16(sp)
    a9ec:	1004943a 	slli	r2,r2,16
    a9f0:	2006d43a 	srli	r3,r4,16
    a9f4:	8560983a 	sll	r16,r16,r21
    a9f8:	2f23383a 	mul	r17,r5,fp
    a9fc:	10c4b03a 	or	r2,r2,r3
    aa00:	dc000015 	stw	r16,0(sp)
    aa04:	b56c983a 	sll	r22,r22,r21
    aa08:	1440032e 	bgeu	r2,r17,aa18 <__umoddi3+0x404>
    aa0c:	15c5883a 	add	r2,r2,r23
    aa10:	e73fffc4 	addi	fp,fp,-1
    aa14:	15c05d2e 	bgeu	r2,r23,ab8c <__umoddi3+0x578>
    aa18:	1463c83a 	sub	r17,r2,r17
    aa1c:	8809883a 	mov	r4,r17
    aa20:	a00b883a 	mov	r5,r20
    aa24:	000b5640 	call	b564 <__udivsi3>
    aa28:	8809883a 	mov	r4,r17
    aa2c:	a00b883a 	mov	r5,r20
    aa30:	1021883a 	mov	r16,r2
    aa34:	000b56c0 	call	b56c <__umodsi3>
    aa38:	d8c00417 	ldw	r3,16(sp)
    aa3c:	d9000217 	ldw	r4,8(sp)
    aa40:	1004943a 	slli	r2,r2,16
    aa44:	1c23383a 	mul	r17,r3,r16
    aa48:	20ffffcc 	andi	r3,r4,65535
    aa4c:	10ceb03a 	or	r7,r2,r3
    aa50:	3c40032e 	bgeu	r7,r17,aa60 <__umoddi3+0x44c>
    aa54:	3dcf883a 	add	r7,r7,r23
    aa58:	843fffc4 	addi	r16,r16,-1
    aa5c:	3dc0472e 	bgeu	r7,r23,ab7c <__umoddi3+0x568>
    aa60:	e004943a 	slli	r2,fp,16
    aa64:	d9400017 	ldw	r5,0(sp)
    aa68:	3c4fc83a 	sub	r7,r7,r17
    aa6c:	8084b03a 	or	r2,r16,r2
    aa70:	28ffffcc 	andi	r3,r5,65535
    aa74:	280cd43a 	srli	r6,r5,16
    aa78:	100ad43a 	srli	r5,r2,16
    aa7c:	10bfffcc 	andi	r2,r2,65535
    aa80:	10d1383a 	mul	r8,r2,r3
    aa84:	28c7383a 	mul	r3,r5,r3
    aa88:	1185383a 	mul	r2,r2,r6
    aa8c:	4008d43a 	srli	r4,r8,16
    aa90:	298b383a 	mul	r5,r5,r6
    aa94:	10c5883a 	add	r2,r2,r3
    aa98:	2089883a 	add	r4,r4,r2
    aa9c:	20c0022e 	bgeu	r4,r3,aaa8 <__umoddi3+0x494>
    aaa0:	00800074 	movhi	r2,1
    aaa4:	288b883a 	add	r5,r5,r2
    aaa8:	2004d43a 	srli	r2,r4,16
    aaac:	2008943a 	slli	r4,r4,16
    aab0:	40ffffcc 	andi	r3,r8,65535
    aab4:	288b883a 	add	r5,r5,r2
    aab8:	20c9883a 	add	r4,r4,r3
    aabc:	39400b36 	bltu	r7,r5,aaec <__umoddi3+0x4d8>
    aac0:	39403d26 	beq	r7,r5,abb8 <__umoddi3+0x5a4>
    aac4:	394bc83a 	sub	r5,r7,r5
    aac8:	00000f06 	br	ab08 <__umoddi3+0x4f4>
    aacc:	30c5c83a 	sub	r2,r6,r3
    aad0:	1839883a 	mov	fp,r3
    aad4:	b084d83a 	srl	r2,r22,r2
    aad8:	a0c6983a 	sll	r3,r20,r3
    aadc:	8720983a 	sll	r16,r16,fp
    aae0:	b72c983a 	sll	r22,r22,fp
    aae4:	18a8b03a 	or	r20,r3,r2
    aae8:	003f3a06 	br	a7d4 <__umoddi3+0x1c0>
    aaec:	d8c00017 	ldw	r3,0(sp)
    aaf0:	20c5c83a 	sub	r2,r4,r3
    aaf4:	2089803a 	cmpltu	r4,r4,r2
    aaf8:	2dc7c83a 	sub	r3,r5,r23
    aafc:	1907c83a 	sub	r3,r3,r4
    ab00:	38cbc83a 	sub	r5,r7,r3
    ab04:	1009883a 	mov	r4,r2
    ab08:	b105c83a 	sub	r2,r22,r4
    ab0c:	b087803a 	cmpltu	r3,r22,r2
    ab10:	28c7c83a 	sub	r3,r5,r3
    ab14:	d9400317 	ldw	r5,12(sp)
    ab18:	1544d83a 	srl	r2,r2,r21
    ab1c:	1948983a 	sll	r4,r3,r5
    ab20:	1d46d83a 	srl	r3,r3,r21
    ab24:	20a4b03a 	or	r18,r4,r2
    ab28:	9011883a 	mov	r8,r18
    ab2c:	1813883a 	mov	r9,r3
    ab30:	003ef606 	br	a70c <__umoddi3+0xf8>
    ab34:	01400604 	movi	r5,24
    ab38:	2805883a 	mov	r2,r5
    ab3c:	003ecc06 	br	a670 <__umoddi3+0x5c>
    ab40:	01400204 	movi	r5,8
    ab44:	2805883a 	mov	r2,r5
    ab48:	003ec906 	br	a670 <__umoddi3+0x5c>
    ab4c:	01400204 	movi	r5,8
    ab50:	2805883a 	mov	r2,r5
    ab54:	003f0106 	br	a75c <__umoddi3+0x148>
    ab58:	01400204 	movi	r5,8
    ab5c:	2805883a 	mov	r2,r5
    ab60:	003f1206 	br	a7ac <__umoddi3+0x198>
    ab64:	01400604 	movi	r5,24
    ab68:	2805883a 	mov	r2,r5
    ab6c:	003f0f06 	br	a7ac <__umoddi3+0x198>
    ab70:	01400604 	movi	r5,24
    ab74:	2805883a 	mov	r2,r5
    ab78:	003ef806 	br	a75c <__umoddi3+0x148>
    ab7c:	3c7fb82e 	bgeu	r7,r17,aa60 <__umoddi3+0x44c>
    ab80:	843fffc4 	addi	r16,r16,-1
    ab84:	3dcf883a 	add	r7,r7,r23
    ab88:	003fb506 	br	aa60 <__umoddi3+0x44c>
    ab8c:	147fa22e 	bgeu	r2,r17,aa18 <__umoddi3+0x404>
    ab90:	e73fffc4 	addi	fp,fp,-1
    ab94:	15c5883a 	add	r2,r2,r23
    ab98:	003f9f06 	br	aa18 <__umoddi3+0x404>
    ab9c:	147f692e 	bgeu	r2,r17,a944 <__umoddi3+0x330>
    aba0:	1405883a 	add	r2,r2,r16
    aba4:	003f6706 	br	a944 <__umoddi3+0x330>
    aba8:	1405883a 	add	r2,r2,r16
    abac:	003f1906 	br	a814 <__umoddi3+0x200>
    abb0:	1405883a 	add	r2,r2,r16
    abb4:	003ec906 	br	a6dc <__umoddi3+0xc8>
    abb8:	b13fcc36 	bltu	r22,r4,aaec <__umoddi3+0x4d8>
    abbc:	000b883a 	mov	r5,zero
    abc0:	003fd106 	br	ab08 <__umoddi3+0x4f4>

0000abc4 <__divdf3>:
    abc4:	deffed04 	addi	sp,sp,-76
    abc8:	dcc01115 	stw	r19,68(sp)
    abcc:	dcc00404 	addi	r19,sp,16
    abd0:	2011883a 	mov	r8,r4
    abd4:	2813883a 	mov	r9,r5
    abd8:	dc000e15 	stw	r16,56(sp)
    abdc:	d809883a 	mov	r4,sp
    abe0:	980b883a 	mov	r5,r19
    abe4:	dc000904 	addi	r16,sp,36
    abe8:	dfc01215 	stw	ra,72(sp)
    abec:	da400115 	stw	r9,4(sp)
    abf0:	d9c00315 	stw	r7,12(sp)
    abf4:	da000015 	stw	r8,0(sp)
    abf8:	d9800215 	stw	r6,8(sp)
    abfc:	dc801015 	stw	r18,64(sp)
    ac00:	dc400f15 	stw	r17,60(sp)
    ac04:	0002bec0 	call	2bec <__unpack_d>
    ac08:	d9000204 	addi	r4,sp,8
    ac0c:	800b883a 	mov	r5,r16
    ac10:	0002bec0 	call	2bec <__unpack_d>
    ac14:	d9000417 	ldw	r4,16(sp)
    ac18:	00800044 	movi	r2,1
    ac1c:	11000b2e 	bgeu	r2,r4,ac4c <__divdf3+0x88>
    ac20:	d9400917 	ldw	r5,36(sp)
    ac24:	1140762e 	bgeu	r2,r5,ae00 <__divdf3+0x23c>
    ac28:	d8800517 	ldw	r2,20(sp)
    ac2c:	d8c00a17 	ldw	r3,40(sp)
    ac30:	01800104 	movi	r6,4
    ac34:	10c4f03a 	xor	r2,r2,r3
    ac38:	d8800515 	stw	r2,20(sp)
    ac3c:	21800226 	beq	r4,r6,ac48 <__divdf3+0x84>
    ac40:	00800084 	movi	r2,2
    ac44:	2080141e 	bne	r4,r2,ac98 <__divdf3+0xd4>
    ac48:	29000926 	beq	r5,r4,ac70 <__divdf3+0xac>
    ac4c:	9809883a 	mov	r4,r19
    ac50:	00028d80 	call	28d8 <__pack_d>
    ac54:	dfc01217 	ldw	ra,72(sp)
    ac58:	dcc01117 	ldw	r19,68(sp)
    ac5c:	dc801017 	ldw	r18,64(sp)
    ac60:	dc400f17 	ldw	r17,60(sp)
    ac64:	dc000e17 	ldw	r16,56(sp)
    ac68:	dec01304 	addi	sp,sp,76
    ac6c:	f800283a 	ret
    ac70:	01000074 	movhi	r4,1
    ac74:	210a0904 	addi	r4,r4,10276
    ac78:	00028d80 	call	28d8 <__pack_d>
    ac7c:	dfc01217 	ldw	ra,72(sp)
    ac80:	dcc01117 	ldw	r19,68(sp)
    ac84:	dc801017 	ldw	r18,64(sp)
    ac88:	dc400f17 	ldw	r17,60(sp)
    ac8c:	dc000e17 	ldw	r16,56(sp)
    ac90:	dec01304 	addi	sp,sp,76
    ac94:	f800283a 	ret
    ac98:	29805b26 	beq	r5,r6,ae08 <__divdf3+0x244>
    ac9c:	28802d26 	beq	r5,r2,ad54 <__divdf3+0x190>
    aca0:	d8c00617 	ldw	r3,24(sp)
    aca4:	d8800b17 	ldw	r2,44(sp)
    aca8:	d9c00817 	ldw	r7,32(sp)
    acac:	dc400d17 	ldw	r17,52(sp)
    acb0:	188bc83a 	sub	r5,r3,r2
    acb4:	d9800717 	ldw	r6,28(sp)
    acb8:	dc000c17 	ldw	r16,48(sp)
    acbc:	d9400615 	stw	r5,24(sp)
    acc0:	3c403836 	bltu	r7,r17,ada4 <__divdf3+0x1e0>
    acc4:	89c03626 	beq	r17,r7,ada0 <__divdf3+0x1dc>
    acc8:	0015883a 	mov	r10,zero
    accc:	001d883a 	mov	r14,zero
    acd0:	02c40034 	movhi	r11,4096
    acd4:	001f883a 	mov	r15,zero
    acd8:	003f883a 	mov	ra,zero
    acdc:	04800f44 	movi	r18,61
    ace0:	00000f06 	br	ad20 <__divdf3+0x15c>
    ace4:	601d883a 	mov	r14,r12
    ace8:	681f883a 	mov	r15,r13
    acec:	400d883a 	mov	r6,r8
    acf0:	100f883a 	mov	r7,r2
    acf4:	3191883a 	add	r8,r6,r6
    acf8:	5808d07a 	srli	r4,r11,1
    acfc:	4185803a 	cmpltu	r2,r8,r6
    ad00:	39d3883a 	add	r9,r7,r7
    ad04:	28c6b03a 	or	r3,r5,r3
    ad08:	1245883a 	add	r2,r2,r9
    ad0c:	1815883a 	mov	r10,r3
    ad10:	2017883a 	mov	r11,r4
    ad14:	400d883a 	mov	r6,r8
    ad18:	100f883a 	mov	r7,r2
    ad1c:	fc801726 	beq	ra,r18,ad7c <__divdf3+0x1b8>
    ad20:	580a97fa 	slli	r5,r11,31
    ad24:	5006d07a 	srli	r3,r10,1
    ad28:	ffc00044 	addi	ra,ra,1
    ad2c:	3c7ff136 	bltu	r7,r17,acf4 <__divdf3+0x130>
    ad30:	3411c83a 	sub	r8,r6,r16
    ad34:	3205803a 	cmpltu	r2,r6,r8
    ad38:	3c53c83a 	sub	r9,r7,r17
    ad3c:	7298b03a 	or	r12,r14,r10
    ad40:	7adab03a 	or	r13,r15,r11
    ad44:	4885c83a 	sub	r2,r9,r2
    ad48:	89ffe61e 	bne	r17,r7,ace4 <__divdf3+0x120>
    ad4c:	343fe936 	bltu	r6,r16,acf4 <__divdf3+0x130>
    ad50:	003fe406 	br	ace4 <__divdf3+0x120>
    ad54:	9809883a 	mov	r4,r19
    ad58:	d9800415 	stw	r6,16(sp)
    ad5c:	00028d80 	call	28d8 <__pack_d>
    ad60:	dfc01217 	ldw	ra,72(sp)
    ad64:	dcc01117 	ldw	r19,68(sp)
    ad68:	dc801017 	ldw	r18,64(sp)
    ad6c:	dc400f17 	ldw	r17,60(sp)
    ad70:	dc000e17 	ldw	r16,56(sp)
    ad74:	dec01304 	addi	sp,sp,76
    ad78:	f800283a 	ret
    ad7c:	00803fc4 	movi	r2,255
    ad80:	7090703a 	and	r8,r14,r2
    ad84:	00802004 	movi	r2,128
    ad88:	0007883a 	mov	r3,zero
    ad8c:	0013883a 	mov	r9,zero
    ad90:	40800d26 	beq	r8,r2,adc8 <__divdf3+0x204>
    ad94:	dbc00815 	stw	r15,32(sp)
    ad98:	db800715 	stw	r14,28(sp)
    ad9c:	003fab06 	br	ac4c <__divdf3+0x88>
    ada0:	343fc92e 	bgeu	r6,r16,acc8 <__divdf3+0x104>
    ada4:	3185883a 	add	r2,r6,r6
    ada8:	1189803a 	cmpltu	r4,r2,r6
    adac:	39c7883a 	add	r3,r7,r7
    adb0:	20c9883a 	add	r4,r4,r3
    adb4:	297fffc4 	addi	r5,r5,-1
    adb8:	100d883a 	mov	r6,r2
    adbc:	200f883a 	mov	r7,r4
    adc0:	d9400615 	stw	r5,24(sp)
    adc4:	003fc006 	br	acc8 <__divdf3+0x104>
    adc8:	483ff21e 	bne	r9,zero,ad94 <__divdf3+0x1d0>
    adcc:	01004004 	movi	r4,256
    add0:	7104703a 	and	r2,r14,r4
    add4:	10c4b03a 	or	r2,r2,r3
    add8:	103fee1e 	bne	r2,zero,ad94 <__divdf3+0x1d0>
    addc:	31c4b03a 	or	r2,r6,r7
    ade0:	103fec26 	beq	r2,zero,ad94 <__divdf3+0x1d0>
    ade4:	7205883a 	add	r2,r14,r8
    ade8:	1391803a 	cmpltu	r8,r2,r14
    adec:	43d1883a 	add	r8,r8,r15
    adf0:	013fc004 	movi	r4,-256
    adf4:	111c703a 	and	r14,r2,r4
    adf8:	401f883a 	mov	r15,r8
    adfc:	003fe506 	br	ad94 <__divdf3+0x1d0>
    ae00:	8009883a 	mov	r4,r16
    ae04:	003f9206 	br	ac50 <__divdf3+0x8c>
    ae08:	9809883a 	mov	r4,r19
    ae0c:	d8000715 	stw	zero,28(sp)
    ae10:	d8000815 	stw	zero,32(sp)
    ae14:	d8000615 	stw	zero,24(sp)
    ae18:	003f8d06 	br	ac50 <__divdf3+0x8c>

0000ae1c <__eqdf2>:
    ae1c:	deffef04 	addi	sp,sp,-68
    ae20:	dc400f15 	stw	r17,60(sp)
    ae24:	dc400404 	addi	r17,sp,16
    ae28:	2005883a 	mov	r2,r4
    ae2c:	2807883a 	mov	r3,r5
    ae30:	dc000e15 	stw	r16,56(sp)
    ae34:	d809883a 	mov	r4,sp
    ae38:	880b883a 	mov	r5,r17
    ae3c:	dc000904 	addi	r16,sp,36
    ae40:	d8c00115 	stw	r3,4(sp)
    ae44:	d8800015 	stw	r2,0(sp)
    ae48:	d9800215 	stw	r6,8(sp)
    ae4c:	dfc01015 	stw	ra,64(sp)
    ae50:	d9c00315 	stw	r7,12(sp)
    ae54:	0002bec0 	call	2bec <__unpack_d>
    ae58:	d9000204 	addi	r4,sp,8
    ae5c:	800b883a 	mov	r5,r16
    ae60:	0002bec0 	call	2bec <__unpack_d>
    ae64:	d8800417 	ldw	r2,16(sp)
    ae68:	00c00044 	movi	r3,1
    ae6c:	180d883a 	mov	r6,r3
    ae70:	1880062e 	bgeu	r3,r2,ae8c <__eqdf2+0x70>
    ae74:	d8800917 	ldw	r2,36(sp)
    ae78:	8809883a 	mov	r4,r17
    ae7c:	800b883a 	mov	r5,r16
    ae80:	1880022e 	bgeu	r3,r2,ae8c <__eqdf2+0x70>
    ae84:	000b5740 	call	b574 <__fpcmp_parts_d>
    ae88:	100d883a 	mov	r6,r2
    ae8c:	3005883a 	mov	r2,r6
    ae90:	dfc01017 	ldw	ra,64(sp)
    ae94:	dc400f17 	ldw	r17,60(sp)
    ae98:	dc000e17 	ldw	r16,56(sp)
    ae9c:	dec01104 	addi	sp,sp,68
    aea0:	f800283a 	ret

0000aea4 <__nedf2>:
    aea4:	deffef04 	addi	sp,sp,-68
    aea8:	dc400f15 	stw	r17,60(sp)
    aeac:	dc400404 	addi	r17,sp,16
    aeb0:	2005883a 	mov	r2,r4
    aeb4:	2807883a 	mov	r3,r5
    aeb8:	dc000e15 	stw	r16,56(sp)
    aebc:	d809883a 	mov	r4,sp
    aec0:	880b883a 	mov	r5,r17
    aec4:	dc000904 	addi	r16,sp,36
    aec8:	d8c00115 	stw	r3,4(sp)
    aecc:	d8800015 	stw	r2,0(sp)
    aed0:	d9800215 	stw	r6,8(sp)
    aed4:	dfc01015 	stw	ra,64(sp)
    aed8:	d9c00315 	stw	r7,12(sp)
    aedc:	0002bec0 	call	2bec <__unpack_d>
    aee0:	d9000204 	addi	r4,sp,8
    aee4:	800b883a 	mov	r5,r16
    aee8:	0002bec0 	call	2bec <__unpack_d>
    aeec:	d8800417 	ldw	r2,16(sp)
    aef0:	00c00044 	movi	r3,1
    aef4:	180d883a 	mov	r6,r3
    aef8:	1880062e 	bgeu	r3,r2,af14 <__nedf2+0x70>
    aefc:	d8800917 	ldw	r2,36(sp)
    af00:	8809883a 	mov	r4,r17
    af04:	800b883a 	mov	r5,r16
    af08:	1880022e 	bgeu	r3,r2,af14 <__nedf2+0x70>
    af0c:	000b5740 	call	b574 <__fpcmp_parts_d>
    af10:	100d883a 	mov	r6,r2
    af14:	3005883a 	mov	r2,r6
    af18:	dfc01017 	ldw	ra,64(sp)
    af1c:	dc400f17 	ldw	r17,60(sp)
    af20:	dc000e17 	ldw	r16,56(sp)
    af24:	dec01104 	addi	sp,sp,68
    af28:	f800283a 	ret

0000af2c <__gtdf2>:
    af2c:	deffef04 	addi	sp,sp,-68
    af30:	dc400f15 	stw	r17,60(sp)
    af34:	dc400404 	addi	r17,sp,16
    af38:	2005883a 	mov	r2,r4
    af3c:	2807883a 	mov	r3,r5
    af40:	dc000e15 	stw	r16,56(sp)
    af44:	d809883a 	mov	r4,sp
    af48:	880b883a 	mov	r5,r17
    af4c:	dc000904 	addi	r16,sp,36
    af50:	d8c00115 	stw	r3,4(sp)
    af54:	d8800015 	stw	r2,0(sp)
    af58:	d9800215 	stw	r6,8(sp)
    af5c:	dfc01015 	stw	ra,64(sp)
    af60:	d9c00315 	stw	r7,12(sp)
    af64:	0002bec0 	call	2bec <__unpack_d>
    af68:	d9000204 	addi	r4,sp,8
    af6c:	800b883a 	mov	r5,r16
    af70:	0002bec0 	call	2bec <__unpack_d>
    af74:	d8800417 	ldw	r2,16(sp)
    af78:	00c00044 	movi	r3,1
    af7c:	01bfffc4 	movi	r6,-1
    af80:	1880062e 	bgeu	r3,r2,af9c <__gtdf2+0x70>
    af84:	d8800917 	ldw	r2,36(sp)
    af88:	8809883a 	mov	r4,r17
    af8c:	800b883a 	mov	r5,r16
    af90:	1880022e 	bgeu	r3,r2,af9c <__gtdf2+0x70>
    af94:	000b5740 	call	b574 <__fpcmp_parts_d>
    af98:	100d883a 	mov	r6,r2
    af9c:	3005883a 	mov	r2,r6
    afa0:	dfc01017 	ldw	ra,64(sp)
    afa4:	dc400f17 	ldw	r17,60(sp)
    afa8:	dc000e17 	ldw	r16,56(sp)
    afac:	dec01104 	addi	sp,sp,68
    afb0:	f800283a 	ret

0000afb4 <__gedf2>:
    afb4:	deffef04 	addi	sp,sp,-68
    afb8:	dc400f15 	stw	r17,60(sp)
    afbc:	dc400404 	addi	r17,sp,16
    afc0:	2005883a 	mov	r2,r4
    afc4:	2807883a 	mov	r3,r5
    afc8:	dc000e15 	stw	r16,56(sp)
    afcc:	d809883a 	mov	r4,sp
    afd0:	880b883a 	mov	r5,r17
    afd4:	dc000904 	addi	r16,sp,36
    afd8:	d8c00115 	stw	r3,4(sp)
    afdc:	d8800015 	stw	r2,0(sp)
    afe0:	d9800215 	stw	r6,8(sp)
    afe4:	dfc01015 	stw	ra,64(sp)
    afe8:	d9c00315 	stw	r7,12(sp)
    afec:	0002bec0 	call	2bec <__unpack_d>
    aff0:	d9000204 	addi	r4,sp,8
    aff4:	800b883a 	mov	r5,r16
    aff8:	0002bec0 	call	2bec <__unpack_d>
    affc:	d8800417 	ldw	r2,16(sp)
    b000:	00c00044 	movi	r3,1
    b004:	01bfffc4 	movi	r6,-1
    b008:	1880062e 	bgeu	r3,r2,b024 <__gedf2+0x70>
    b00c:	d8800917 	ldw	r2,36(sp)
    b010:	8809883a 	mov	r4,r17
    b014:	800b883a 	mov	r5,r16
    b018:	1880022e 	bgeu	r3,r2,b024 <__gedf2+0x70>
    b01c:	000b5740 	call	b574 <__fpcmp_parts_d>
    b020:	100d883a 	mov	r6,r2
    b024:	3005883a 	mov	r2,r6
    b028:	dfc01017 	ldw	ra,64(sp)
    b02c:	dc400f17 	ldw	r17,60(sp)
    b030:	dc000e17 	ldw	r16,56(sp)
    b034:	dec01104 	addi	sp,sp,68
    b038:	f800283a 	ret

0000b03c <__ltdf2>:
    b03c:	deffef04 	addi	sp,sp,-68
    b040:	dc400f15 	stw	r17,60(sp)
    b044:	dc400404 	addi	r17,sp,16
    b048:	2005883a 	mov	r2,r4
    b04c:	2807883a 	mov	r3,r5
    b050:	dc000e15 	stw	r16,56(sp)
    b054:	d809883a 	mov	r4,sp
    b058:	880b883a 	mov	r5,r17
    b05c:	dc000904 	addi	r16,sp,36
    b060:	d8c00115 	stw	r3,4(sp)
    b064:	d8800015 	stw	r2,0(sp)
    b068:	d9800215 	stw	r6,8(sp)
    b06c:	dfc01015 	stw	ra,64(sp)
    b070:	d9c00315 	stw	r7,12(sp)
    b074:	0002bec0 	call	2bec <__unpack_d>
    b078:	d9000204 	addi	r4,sp,8
    b07c:	800b883a 	mov	r5,r16
    b080:	0002bec0 	call	2bec <__unpack_d>
    b084:	d8800417 	ldw	r2,16(sp)
    b088:	00c00044 	movi	r3,1
    b08c:	180d883a 	mov	r6,r3
    b090:	1880062e 	bgeu	r3,r2,b0ac <__ltdf2+0x70>
    b094:	d8800917 	ldw	r2,36(sp)
    b098:	8809883a 	mov	r4,r17
    b09c:	800b883a 	mov	r5,r16
    b0a0:	1880022e 	bgeu	r3,r2,b0ac <__ltdf2+0x70>
    b0a4:	000b5740 	call	b574 <__fpcmp_parts_d>
    b0a8:	100d883a 	mov	r6,r2
    b0ac:	3005883a 	mov	r2,r6
    b0b0:	dfc01017 	ldw	ra,64(sp)
    b0b4:	dc400f17 	ldw	r17,60(sp)
    b0b8:	dc000e17 	ldw	r16,56(sp)
    b0bc:	dec01104 	addi	sp,sp,68
    b0c0:	f800283a 	ret

0000b0c4 <__floatsidf>:
    b0c4:	2006d7fa 	srli	r3,r4,31
    b0c8:	defff604 	addi	sp,sp,-40
    b0cc:	008000c4 	movi	r2,3
    b0d0:	dfc00915 	stw	ra,36(sp)
    b0d4:	dcc00815 	stw	r19,32(sp)
    b0d8:	dc800715 	stw	r18,28(sp)
    b0dc:	dc400615 	stw	r17,24(sp)
    b0e0:	dc000515 	stw	r16,20(sp)
    b0e4:	d8800015 	stw	r2,0(sp)
    b0e8:	d8c00115 	stw	r3,4(sp)
    b0ec:	20000f1e 	bne	r4,zero,b12c <__floatsidf+0x68>
    b0f0:	00800084 	movi	r2,2
    b0f4:	d8800015 	stw	r2,0(sp)
    b0f8:	d809883a 	mov	r4,sp
    b0fc:	00028d80 	call	28d8 <__pack_d>
    b100:	1009883a 	mov	r4,r2
    b104:	180b883a 	mov	r5,r3
    b108:	2005883a 	mov	r2,r4
    b10c:	2807883a 	mov	r3,r5
    b110:	dfc00917 	ldw	ra,36(sp)
    b114:	dcc00817 	ldw	r19,32(sp)
    b118:	dc800717 	ldw	r18,28(sp)
    b11c:	dc400617 	ldw	r17,24(sp)
    b120:	dc000517 	ldw	r16,20(sp)
    b124:	dec00a04 	addi	sp,sp,40
    b128:	f800283a 	ret
    b12c:	00800f04 	movi	r2,60
    b130:	1807003a 	cmpeq	r3,r3,zero
    b134:	d8800215 	stw	r2,8(sp)
    b138:	18001126 	beq	r3,zero,b180 <__floatsidf+0xbc>
    b13c:	0027883a 	mov	r19,zero
    b140:	2025883a 	mov	r18,r4
    b144:	d9000315 	stw	r4,12(sp)
    b148:	dcc00415 	stw	r19,16(sp)
    b14c:	00026300 	call	2630 <__clzsi2>
    b150:	11000744 	addi	r4,r2,29
    b154:	013fe80e 	bge	zero,r4,b0f8 <__floatsidf+0x34>
    b158:	10bfff44 	addi	r2,r2,-3
    b15c:	10000c16 	blt	r2,zero,b190 <__floatsidf+0xcc>
    b160:	90a2983a 	sll	r17,r18,r2
    b164:	0021883a 	mov	r16,zero
    b168:	d8800217 	ldw	r2,8(sp)
    b16c:	dc400415 	stw	r17,16(sp)
    b170:	dc000315 	stw	r16,12(sp)
    b174:	1105c83a 	sub	r2,r2,r4
    b178:	d8800215 	stw	r2,8(sp)
    b17c:	003fde06 	br	b0f8 <__floatsidf+0x34>
    b180:	00a00034 	movhi	r2,32768
    b184:	20800a26 	beq	r4,r2,b1b0 <__floatsidf+0xec>
    b188:	0109c83a 	sub	r4,zero,r4
    b18c:	003feb06 	br	b13c <__floatsidf+0x78>
    b190:	9006d07a 	srli	r3,r18,1
    b194:	008007c4 	movi	r2,31
    b198:	1105c83a 	sub	r2,r2,r4
    b19c:	1886d83a 	srl	r3,r3,r2
    b1a0:	9922983a 	sll	r17,r19,r4
    b1a4:	9120983a 	sll	r16,r18,r4
    b1a8:	1c62b03a 	or	r17,r3,r17
    b1ac:	003fee06 	br	b168 <__floatsidf+0xa4>
    b1b0:	0009883a 	mov	r4,zero
    b1b4:	01707834 	movhi	r5,49632
    b1b8:	003fd306 	br	b108 <__floatsidf+0x44>

0000b1bc <__fixdfsi>:
    b1bc:	defff804 	addi	sp,sp,-32
    b1c0:	2005883a 	mov	r2,r4
    b1c4:	2807883a 	mov	r3,r5
    b1c8:	d809883a 	mov	r4,sp
    b1cc:	d9400204 	addi	r5,sp,8
    b1d0:	d8c00115 	stw	r3,4(sp)
    b1d4:	d8800015 	stw	r2,0(sp)
    b1d8:	dfc00715 	stw	ra,28(sp)
    b1dc:	0002bec0 	call	2bec <__unpack_d>
    b1e0:	d8c00217 	ldw	r3,8(sp)
    b1e4:	00800084 	movi	r2,2
    b1e8:	1880051e 	bne	r3,r2,b200 <__fixdfsi+0x44>
    b1ec:	0007883a 	mov	r3,zero
    b1f0:	1805883a 	mov	r2,r3
    b1f4:	dfc00717 	ldw	ra,28(sp)
    b1f8:	dec00804 	addi	sp,sp,32
    b1fc:	f800283a 	ret
    b200:	00800044 	movi	r2,1
    b204:	10fff92e 	bgeu	r2,r3,b1ec <__fixdfsi+0x30>
    b208:	00800104 	movi	r2,4
    b20c:	18800426 	beq	r3,r2,b220 <__fixdfsi+0x64>
    b210:	d8c00417 	ldw	r3,16(sp)
    b214:	183ff516 	blt	r3,zero,b1ec <__fixdfsi+0x30>
    b218:	00800784 	movi	r2,30
    b21c:	10c0080e 	bge	r2,r3,b240 <__fixdfsi+0x84>
    b220:	d8800317 	ldw	r2,12(sp)
    b224:	1000121e 	bne	r2,zero,b270 <__fixdfsi+0xb4>
    b228:	00e00034 	movhi	r3,32768
    b22c:	18ffffc4 	addi	r3,r3,-1
    b230:	1805883a 	mov	r2,r3
    b234:	dfc00717 	ldw	ra,28(sp)
    b238:	dec00804 	addi	sp,sp,32
    b23c:	f800283a 	ret
    b240:	00800f04 	movi	r2,60
    b244:	10d1c83a 	sub	r8,r2,r3
    b248:	40bff804 	addi	r2,r8,-32
    b24c:	d9800517 	ldw	r6,20(sp)
    b250:	d9c00617 	ldw	r7,24(sp)
    b254:	10000816 	blt	r2,zero,b278 <__fixdfsi+0xbc>
    b258:	3888d83a 	srl	r4,r7,r2
    b25c:	d8800317 	ldw	r2,12(sp)
    b260:	2007883a 	mov	r3,r4
    b264:	103fe226 	beq	r2,zero,b1f0 <__fixdfsi+0x34>
    b268:	0107c83a 	sub	r3,zero,r4
    b26c:	003fe006 	br	b1f0 <__fixdfsi+0x34>
    b270:	00e00034 	movhi	r3,32768
    b274:	003fde06 	br	b1f0 <__fixdfsi+0x34>
    b278:	39c7883a 	add	r3,r7,r7
    b27c:	008007c4 	movi	r2,31
    b280:	1205c83a 	sub	r2,r2,r8
    b284:	1886983a 	sll	r3,r3,r2
    b288:	3208d83a 	srl	r4,r6,r8
    b28c:	1908b03a 	or	r4,r3,r4
    b290:	003ff206 	br	b25c <__fixdfsi+0xa0>

0000b294 <__floatunsidf>:
    b294:	defff204 	addi	sp,sp,-56
    b298:	dfc00d15 	stw	ra,52(sp)
    b29c:	ddc00c15 	stw	r23,48(sp)
    b2a0:	dd800b15 	stw	r22,44(sp)
    b2a4:	dd400a15 	stw	r21,40(sp)
    b2a8:	dd000915 	stw	r20,36(sp)
    b2ac:	dcc00815 	stw	r19,32(sp)
    b2b0:	dc800715 	stw	r18,28(sp)
    b2b4:	dc400615 	stw	r17,24(sp)
    b2b8:	dc000515 	stw	r16,20(sp)
    b2bc:	d8000115 	stw	zero,4(sp)
    b2c0:	20000f1e 	bne	r4,zero,b300 <__floatunsidf+0x6c>
    b2c4:	00800084 	movi	r2,2
    b2c8:	d8800015 	stw	r2,0(sp)
    b2cc:	d809883a 	mov	r4,sp
    b2d0:	00028d80 	call	28d8 <__pack_d>
    b2d4:	dfc00d17 	ldw	ra,52(sp)
    b2d8:	ddc00c17 	ldw	r23,48(sp)
    b2dc:	dd800b17 	ldw	r22,44(sp)
    b2e0:	dd400a17 	ldw	r21,40(sp)
    b2e4:	dd000917 	ldw	r20,36(sp)
    b2e8:	dcc00817 	ldw	r19,32(sp)
    b2ec:	dc800717 	ldw	r18,28(sp)
    b2f0:	dc400617 	ldw	r17,24(sp)
    b2f4:	dc000517 	ldw	r16,20(sp)
    b2f8:	dec00e04 	addi	sp,sp,56
    b2fc:	f800283a 	ret
    b300:	008000c4 	movi	r2,3
    b304:	00c00f04 	movi	r3,60
    b308:	002f883a 	mov	r23,zero
    b30c:	202d883a 	mov	r22,r4
    b310:	d8800015 	stw	r2,0(sp)
    b314:	d8c00215 	stw	r3,8(sp)
    b318:	d9000315 	stw	r4,12(sp)
    b31c:	ddc00415 	stw	r23,16(sp)
    b320:	00026300 	call	2630 <__clzsi2>
    b324:	12400744 	addi	r9,r2,29
    b328:	48000b16 	blt	r9,zero,b358 <__floatunsidf+0xc4>
    b32c:	483fe726 	beq	r9,zero,b2cc <__floatunsidf+0x38>
    b330:	10bfff44 	addi	r2,r2,-3
    b334:	10002e16 	blt	r2,zero,b3f0 <__floatunsidf+0x15c>
    b338:	b0a2983a 	sll	r17,r22,r2
    b33c:	0021883a 	mov	r16,zero
    b340:	d8800217 	ldw	r2,8(sp)
    b344:	dc400415 	stw	r17,16(sp)
    b348:	dc000315 	stw	r16,12(sp)
    b34c:	1245c83a 	sub	r2,r2,r9
    b350:	d8800215 	stw	r2,8(sp)
    b354:	003fdd06 	br	b2cc <__floatunsidf+0x38>
    b358:	0255c83a 	sub	r10,zero,r9
    b35c:	51bff804 	addi	r6,r10,-32
    b360:	30001b16 	blt	r6,zero,b3d0 <__floatunsidf+0x13c>
    b364:	b9a8d83a 	srl	r20,r23,r6
    b368:	002b883a 	mov	r21,zero
    b36c:	000f883a 	mov	r7,zero
    b370:	01000044 	movi	r4,1
    b374:	0011883a 	mov	r8,zero
    b378:	30002516 	blt	r6,zero,b410 <__floatunsidf+0x17c>
    b37c:	21a6983a 	sll	r19,r4,r6
    b380:	0025883a 	mov	r18,zero
    b384:	00bfffc4 	movi	r2,-1
    b388:	9089883a 	add	r4,r18,r2
    b38c:	988b883a 	add	r5,r19,r2
    b390:	248d803a 	cmpltu	r6,r4,r18
    b394:	314b883a 	add	r5,r6,r5
    b398:	b104703a 	and	r2,r22,r4
    b39c:	b946703a 	and	r3,r23,r5
    b3a0:	10c4b03a 	or	r2,r2,r3
    b3a4:	10000226 	beq	r2,zero,b3b0 <__floatunsidf+0x11c>
    b3a8:	01c00044 	movi	r7,1
    b3ac:	0011883a 	mov	r8,zero
    b3b0:	d9000217 	ldw	r4,8(sp)
    b3b4:	a1c4b03a 	or	r2,r20,r7
    b3b8:	aa06b03a 	or	r3,r21,r8
    b3bc:	2249c83a 	sub	r4,r4,r9
    b3c0:	d8c00415 	stw	r3,16(sp)
    b3c4:	d9000215 	stw	r4,8(sp)
    b3c8:	d8800315 	stw	r2,12(sp)
    b3cc:	003fbf06 	br	b2cc <__floatunsidf+0x38>
    b3d0:	bdc7883a 	add	r3,r23,r23
    b3d4:	008007c4 	movi	r2,31
    b3d8:	1285c83a 	sub	r2,r2,r10
    b3dc:	1886983a 	sll	r3,r3,r2
    b3e0:	b2a8d83a 	srl	r20,r22,r10
    b3e4:	baaad83a 	srl	r21,r23,r10
    b3e8:	1d28b03a 	or	r20,r3,r20
    b3ec:	003fdf06 	br	b36c <__floatunsidf+0xd8>
    b3f0:	b006d07a 	srli	r3,r22,1
    b3f4:	008007c4 	movi	r2,31
    b3f8:	1245c83a 	sub	r2,r2,r9
    b3fc:	1886d83a 	srl	r3,r3,r2
    b400:	ba62983a 	sll	r17,r23,r9
    b404:	b260983a 	sll	r16,r22,r9
    b408:	1c62b03a 	or	r17,r3,r17
    b40c:	003fcc06 	br	b340 <__floatunsidf+0xac>
    b410:	2006d07a 	srli	r3,r4,1
    b414:	008007c4 	movi	r2,31
    b418:	1285c83a 	sub	r2,r2,r10
    b41c:	18a6d83a 	srl	r19,r3,r2
    b420:	22a4983a 	sll	r18,r4,r10
    b424:	003fd706 	br	b384 <__floatunsidf+0xf0>

0000b428 <udivmodsi4>:
    b428:	29001b2e 	bgeu	r5,r4,b498 <udivmodsi4+0x70>
    b42c:	28001a16 	blt	r5,zero,b498 <udivmodsi4+0x70>
    b430:	00800044 	movi	r2,1
    b434:	0007883a 	mov	r3,zero
    b438:	01c007c4 	movi	r7,31
    b43c:	00000306 	br	b44c <udivmodsi4+0x24>
    b440:	19c01326 	beq	r3,r7,b490 <udivmodsi4+0x68>
    b444:	18c00044 	addi	r3,r3,1
    b448:	28000416 	blt	r5,zero,b45c <udivmodsi4+0x34>
    b44c:	294b883a 	add	r5,r5,r5
    b450:	1085883a 	add	r2,r2,r2
    b454:	293ffa36 	bltu	r5,r4,b440 <udivmodsi4+0x18>
    b458:	10000d26 	beq	r2,zero,b490 <udivmodsi4+0x68>
    b45c:	0007883a 	mov	r3,zero
    b460:	21400236 	bltu	r4,r5,b46c <udivmodsi4+0x44>
    b464:	2149c83a 	sub	r4,r4,r5
    b468:	1886b03a 	or	r3,r3,r2
    b46c:	1004d07a 	srli	r2,r2,1
    b470:	280ad07a 	srli	r5,r5,1
    b474:	103ffa1e 	bne	r2,zero,b460 <udivmodsi4+0x38>
    b478:	30000226 	beq	r6,zero,b484 <udivmodsi4+0x5c>
    b47c:	2005883a 	mov	r2,r4
    b480:	f800283a 	ret
    b484:	1809883a 	mov	r4,r3
    b488:	2005883a 	mov	r2,r4
    b48c:	f800283a 	ret
    b490:	0007883a 	mov	r3,zero
    b494:	003ff806 	br	b478 <udivmodsi4+0x50>
    b498:	00800044 	movi	r2,1
    b49c:	0007883a 	mov	r3,zero
    b4a0:	003fef06 	br	b460 <udivmodsi4+0x38>

0000b4a4 <__divsi3>:
    b4a4:	defffe04 	addi	sp,sp,-8
    b4a8:	dc000015 	stw	r16,0(sp)
    b4ac:	dfc00115 	stw	ra,4(sp)
    b4b0:	0021883a 	mov	r16,zero
    b4b4:	20000c16 	blt	r4,zero,b4e8 <__divsi3+0x44>
    b4b8:	000d883a 	mov	r6,zero
    b4bc:	28000e16 	blt	r5,zero,b4f8 <__divsi3+0x54>
    b4c0:	000b4280 	call	b428 <udivmodsi4>
    b4c4:	1007883a 	mov	r3,r2
    b4c8:	8005003a 	cmpeq	r2,r16,zero
    b4cc:	1000011e 	bne	r2,zero,b4d4 <__divsi3+0x30>
    b4d0:	00c7c83a 	sub	r3,zero,r3
    b4d4:	1805883a 	mov	r2,r3
    b4d8:	dfc00117 	ldw	ra,4(sp)
    b4dc:	dc000017 	ldw	r16,0(sp)
    b4e0:	dec00204 	addi	sp,sp,8
    b4e4:	f800283a 	ret
    b4e8:	0109c83a 	sub	r4,zero,r4
    b4ec:	04000044 	movi	r16,1
    b4f0:	000d883a 	mov	r6,zero
    b4f4:	283ff20e 	bge	r5,zero,b4c0 <__divsi3+0x1c>
    b4f8:	014bc83a 	sub	r5,zero,r5
    b4fc:	8021003a 	cmpeq	r16,r16,zero
    b500:	003fef06 	br	b4c0 <__divsi3+0x1c>

0000b504 <__modsi3>:
    b504:	deffff04 	addi	sp,sp,-4
    b508:	dfc00015 	stw	ra,0(sp)
    b50c:	01800044 	movi	r6,1
    b510:	2807883a 	mov	r3,r5
    b514:	20000416 	blt	r4,zero,b528 <__modsi3+0x24>
    b518:	28000c16 	blt	r5,zero,b54c <__modsi3+0x48>
    b51c:	dfc00017 	ldw	ra,0(sp)
    b520:	dec00104 	addi	sp,sp,4
    b524:	000b4281 	jmpi	b428 <udivmodsi4>
    b528:	0109c83a 	sub	r4,zero,r4
    b52c:	28000b16 	blt	r5,zero,b55c <__modsi3+0x58>
    b530:	180b883a 	mov	r5,r3
    b534:	01800044 	movi	r6,1
    b538:	000b4280 	call	b428 <udivmodsi4>
    b53c:	0085c83a 	sub	r2,zero,r2
    b540:	dfc00017 	ldw	ra,0(sp)
    b544:	dec00104 	addi	sp,sp,4
    b548:	f800283a 	ret
    b54c:	014bc83a 	sub	r5,zero,r5
    b550:	dfc00017 	ldw	ra,0(sp)
    b554:	dec00104 	addi	sp,sp,4
    b558:	000b4281 	jmpi	b428 <udivmodsi4>
    b55c:	0147c83a 	sub	r3,zero,r5
    b560:	003ff306 	br	b530 <__modsi3+0x2c>

0000b564 <__udivsi3>:
    b564:	000d883a 	mov	r6,zero
    b568:	000b4281 	jmpi	b428 <udivmodsi4>

0000b56c <__umodsi3>:
    b56c:	01800044 	movi	r6,1
    b570:	000b4281 	jmpi	b428 <udivmodsi4>

0000b574 <__fpcmp_parts_d>:
    b574:	21800017 	ldw	r6,0(r4)
    b578:	00c00044 	movi	r3,1
    b57c:	19800a2e 	bgeu	r3,r6,b5a8 <__fpcmp_parts_d+0x34>
    b580:	28800017 	ldw	r2,0(r5)
    b584:	1880082e 	bgeu	r3,r2,b5a8 <__fpcmp_parts_d+0x34>
    b588:	00c00104 	movi	r3,4
    b58c:	30c02626 	beq	r6,r3,b628 <__fpcmp_parts_d+0xb4>
    b590:	10c02226 	beq	r2,r3,b61c <__fpcmp_parts_d+0xa8>
    b594:	00c00084 	movi	r3,2
    b598:	30c00526 	beq	r6,r3,b5b0 <__fpcmp_parts_d+0x3c>
    b59c:	10c0071e 	bne	r2,r3,b5bc <__fpcmp_parts_d+0x48>
    b5a0:	20800117 	ldw	r2,4(r4)
    b5a4:	1000091e 	bne	r2,zero,b5cc <__fpcmp_parts_d+0x58>
    b5a8:	00800044 	movi	r2,1
    b5ac:	f800283a 	ret
    b5b0:	10c01a1e 	bne	r2,r3,b61c <__fpcmp_parts_d+0xa8>
    b5b4:	0005883a 	mov	r2,zero
    b5b8:	f800283a 	ret
    b5bc:	22000117 	ldw	r8,4(r4)
    b5c0:	28800117 	ldw	r2,4(r5)
    b5c4:	40800326 	beq	r8,r2,b5d4 <__fpcmp_parts_d+0x60>
    b5c8:	403ff726 	beq	r8,zero,b5a8 <__fpcmp_parts_d+0x34>
    b5cc:	00bfffc4 	movi	r2,-1
    b5d0:	f800283a 	ret
    b5d4:	20c00217 	ldw	r3,8(r4)
    b5d8:	28800217 	ldw	r2,8(r5)
    b5dc:	10fffa16 	blt	r2,r3,b5c8 <__fpcmp_parts_d+0x54>
    b5e0:	18800916 	blt	r3,r2,b608 <__fpcmp_parts_d+0x94>
    b5e4:	21c00417 	ldw	r7,16(r4)
    b5e8:	28c00417 	ldw	r3,16(r5)
    b5ec:	21800317 	ldw	r6,12(r4)
    b5f0:	28800317 	ldw	r2,12(r5)
    b5f4:	19fff436 	bltu	r3,r7,b5c8 <__fpcmp_parts_d+0x54>
    b5f8:	38c00526 	beq	r7,r3,b610 <__fpcmp_parts_d+0x9c>
    b5fc:	38c00236 	bltu	r7,r3,b608 <__fpcmp_parts_d+0x94>
    b600:	19ffec1e 	bne	r3,r7,b5b4 <__fpcmp_parts_d+0x40>
    b604:	30bfeb2e 	bgeu	r6,r2,b5b4 <__fpcmp_parts_d+0x40>
    b608:	403fe71e 	bne	r8,zero,b5a8 <__fpcmp_parts_d+0x34>
    b60c:	003fef06 	br	b5cc <__fpcmp_parts_d+0x58>
    b610:	11bffa2e 	bgeu	r2,r6,b5fc <__fpcmp_parts_d+0x88>
    b614:	403fe426 	beq	r8,zero,b5a8 <__fpcmp_parts_d+0x34>
    b618:	003fec06 	br	b5cc <__fpcmp_parts_d+0x58>
    b61c:	28800117 	ldw	r2,4(r5)
    b620:	103fe11e 	bne	r2,zero,b5a8 <__fpcmp_parts_d+0x34>
    b624:	003fe906 	br	b5cc <__fpcmp_parts_d+0x58>
    b628:	11bfdd1e 	bne	r2,r6,b5a0 <__fpcmp_parts_d+0x2c>
    b62c:	28c00117 	ldw	r3,4(r5)
    b630:	20800117 	ldw	r2,4(r4)
    b634:	1885c83a 	sub	r2,r3,r2
    b638:	f800283a 	ret

0000b63c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b63c:	defff804 	addi	sp,sp,-32
    b640:	dfc00715 	stw	ra,28(sp)
    b644:	df000615 	stw	fp,24(sp)
    b648:	df000604 	addi	fp,sp,24
    b64c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b650:	e0bffc17 	ldw	r2,-16(fp)
    b654:	1004803a 	cmplt	r2,r2,zero
    b658:	1000081e 	bne	r2,zero,b67c <close+0x40>
    b65c:	e0bffc17 	ldw	r2,-16(fp)
    b660:	10800324 	muli	r2,r2,12
    b664:	1007883a 	mov	r3,r2
    b668:	00800074 	movhi	r2,1
    b66c:	108d8904 	addi	r2,r2,13860
    b670:	1887883a 	add	r3,r3,r2
    b674:	e0ffff15 	stw	r3,-4(fp)
    b678:	00000106 	br	b680 <close+0x44>
    b67c:	e03fff15 	stw	zero,-4(fp)
    b680:	e0bfff17 	ldw	r2,-4(fp)
    b684:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b688:	e0bffb17 	ldw	r2,-20(fp)
    b68c:	1005003a 	cmpeq	r2,r2,zero
    b690:	10001d1e 	bne	r2,zero,b708 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b694:	e0bffb17 	ldw	r2,-20(fp)
    b698:	10800017 	ldw	r2,0(r2)
    b69c:	10800417 	ldw	r2,16(r2)
    b6a0:	1005003a 	cmpeq	r2,r2,zero
    b6a4:	1000071e 	bne	r2,zero,b6c4 <close+0x88>
    b6a8:	e0bffb17 	ldw	r2,-20(fp)
    b6ac:	10800017 	ldw	r2,0(r2)
    b6b0:	10800417 	ldw	r2,16(r2)
    b6b4:	e13ffb17 	ldw	r4,-20(fp)
    b6b8:	103ee83a 	callr	r2
    b6bc:	e0bffe15 	stw	r2,-8(fp)
    b6c0:	00000106 	br	b6c8 <close+0x8c>
    b6c4:	e03ffe15 	stw	zero,-8(fp)
    b6c8:	e0bffe17 	ldw	r2,-8(fp)
    b6cc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b6d0:	e13ffc17 	ldw	r4,-16(fp)
    b6d4:	000c2d80 	call	c2d8 <alt_release_fd>
    if (rval < 0)
    b6d8:	e0bffa17 	ldw	r2,-24(fp)
    b6dc:	1004403a 	cmpge	r2,r2,zero
    b6e0:	1000071e 	bne	r2,zero,b700 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b6e4:	000b7380 	call	b738 <alt_get_errno>
    b6e8:	e0fffa17 	ldw	r3,-24(fp)
    b6ec:	00c7c83a 	sub	r3,zero,r3
    b6f0:	10c00015 	stw	r3,0(r2)
      return -1;
    b6f4:	00bfffc4 	movi	r2,-1
    b6f8:	e0bffd15 	stw	r2,-12(fp)
    b6fc:	00000806 	br	b720 <close+0xe4>
    }
    return 0;
    b700:	e03ffd15 	stw	zero,-12(fp)
    b704:	00000606 	br	b720 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b708:	000b7380 	call	b738 <alt_get_errno>
    b70c:	1007883a 	mov	r3,r2
    b710:	00801444 	movi	r2,81
    b714:	18800015 	stw	r2,0(r3)
    return -1;
    b718:	00bfffc4 	movi	r2,-1
    b71c:	e0bffd15 	stw	r2,-12(fp)
    b720:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b724:	e037883a 	mov	sp,fp
    b728:	dfc00117 	ldw	ra,4(sp)
    b72c:	df000017 	ldw	fp,0(sp)
    b730:	dec00204 	addi	sp,sp,8
    b734:	f800283a 	ret

0000b738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b738:	defffd04 	addi	sp,sp,-12
    b73c:	dfc00215 	stw	ra,8(sp)
    b740:	df000115 	stw	fp,4(sp)
    b744:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b748:	00800074 	movhi	r2,1
    b74c:	1092f904 	addi	r2,r2,19428
    b750:	10800017 	ldw	r2,0(r2)
    b754:	1005003a 	cmpeq	r2,r2,zero
    b758:	1000061e 	bne	r2,zero,b774 <alt_get_errno+0x3c>
    b75c:	00800074 	movhi	r2,1
    b760:	1092f904 	addi	r2,r2,19428
    b764:	10800017 	ldw	r2,0(r2)
    b768:	103ee83a 	callr	r2
    b76c:	e0bfff15 	stw	r2,-4(fp)
    b770:	00000306 	br	b780 <alt_get_errno+0x48>
    b774:	00800074 	movhi	r2,1
    b778:	109ad004 	addi	r2,r2,27456
    b77c:	e0bfff15 	stw	r2,-4(fp)
    b780:	e0bfff17 	ldw	r2,-4(fp)
}
    b784:	e037883a 	mov	sp,fp
    b788:	dfc00117 	ldw	ra,4(sp)
    b78c:	df000017 	ldw	fp,0(sp)
    b790:	dec00204 	addi	sp,sp,8
    b794:	f800283a 	ret

0000b798 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b798:	defffc04 	addi	sp,sp,-16
    b79c:	df000315 	stw	fp,12(sp)
    b7a0:	df000304 	addi	fp,sp,12
    b7a4:	e13ffd15 	stw	r4,-12(fp)
    b7a8:	e17ffe15 	stw	r5,-8(fp)
    b7ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b7b0:	e0bfff17 	ldw	r2,-4(fp)
}
    b7b4:	e037883a 	mov	sp,fp
    b7b8:	df000017 	ldw	fp,0(sp)
    b7bc:	dec00104 	addi	sp,sp,4
    b7c0:	f800283a 	ret

0000b7c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b7c4:	defff904 	addi	sp,sp,-28
    b7c8:	dfc00615 	stw	ra,24(sp)
    b7cc:	df000515 	stw	fp,20(sp)
    b7d0:	df000504 	addi	fp,sp,20
    b7d4:	e13ffc15 	stw	r4,-16(fp)
    b7d8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7dc:	e0bffc17 	ldw	r2,-16(fp)
    b7e0:	1004803a 	cmplt	r2,r2,zero
    b7e4:	1000081e 	bne	r2,zero,b808 <fstat+0x44>
    b7e8:	e0bffc17 	ldw	r2,-16(fp)
    b7ec:	10800324 	muli	r2,r2,12
    b7f0:	1007883a 	mov	r3,r2
    b7f4:	00800074 	movhi	r2,1
    b7f8:	108d8904 	addi	r2,r2,13860
    b7fc:	1887883a 	add	r3,r3,r2
    b800:	e0ffff15 	stw	r3,-4(fp)
    b804:	00000106 	br	b80c <fstat+0x48>
    b808:	e03fff15 	stw	zero,-4(fp)
    b80c:	e0bfff17 	ldw	r2,-4(fp)
    b810:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b814:	e0bffb17 	ldw	r2,-20(fp)
    b818:	1005003a 	cmpeq	r2,r2,zero
    b81c:	1000121e 	bne	r2,zero,b868 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b820:	e0bffb17 	ldw	r2,-20(fp)
    b824:	10800017 	ldw	r2,0(r2)
    b828:	10800817 	ldw	r2,32(r2)
    b82c:	1005003a 	cmpeq	r2,r2,zero
    b830:	1000081e 	bne	r2,zero,b854 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b834:	e0bffb17 	ldw	r2,-20(fp)
    b838:	10800017 	ldw	r2,0(r2)
    b83c:	10800817 	ldw	r2,32(r2)
    b840:	e13ffb17 	ldw	r4,-20(fp)
    b844:	e17ffd17 	ldw	r5,-12(fp)
    b848:	103ee83a 	callr	r2
    b84c:	e0bffe15 	stw	r2,-8(fp)
    b850:	00000b06 	br	b880 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b854:	e0fffd17 	ldw	r3,-12(fp)
    b858:	00880004 	movi	r2,8192
    b85c:	18800115 	stw	r2,4(r3)
      return 0;
    b860:	e03ffe15 	stw	zero,-8(fp)
    b864:	00000606 	br	b880 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b868:	000b8980 	call	b898 <alt_get_errno>
    b86c:	1007883a 	mov	r3,r2
    b870:	00801444 	movi	r2,81
    b874:	18800015 	stw	r2,0(r3)
    return -1;
    b878:	00bfffc4 	movi	r2,-1
    b87c:	e0bffe15 	stw	r2,-8(fp)
    b880:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b884:	e037883a 	mov	sp,fp
    b888:	dfc00117 	ldw	ra,4(sp)
    b88c:	df000017 	ldw	fp,0(sp)
    b890:	dec00204 	addi	sp,sp,8
    b894:	f800283a 	ret

0000b898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b898:	defffd04 	addi	sp,sp,-12
    b89c:	dfc00215 	stw	ra,8(sp)
    b8a0:	df000115 	stw	fp,4(sp)
    b8a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b8a8:	00800074 	movhi	r2,1
    b8ac:	1092f904 	addi	r2,r2,19428
    b8b0:	10800017 	ldw	r2,0(r2)
    b8b4:	1005003a 	cmpeq	r2,r2,zero
    b8b8:	1000061e 	bne	r2,zero,b8d4 <alt_get_errno+0x3c>
    b8bc:	00800074 	movhi	r2,1
    b8c0:	1092f904 	addi	r2,r2,19428
    b8c4:	10800017 	ldw	r2,0(r2)
    b8c8:	103ee83a 	callr	r2
    b8cc:	e0bfff15 	stw	r2,-4(fp)
    b8d0:	00000306 	br	b8e0 <alt_get_errno+0x48>
    b8d4:	00800074 	movhi	r2,1
    b8d8:	109ad004 	addi	r2,r2,27456
    b8dc:	e0bfff15 	stw	r2,-4(fp)
    b8e0:	e0bfff17 	ldw	r2,-4(fp)
}
    b8e4:	e037883a 	mov	sp,fp
    b8e8:	dfc00117 	ldw	ra,4(sp)
    b8ec:	df000017 	ldw	fp,0(sp)
    b8f0:	dec00204 	addi	sp,sp,8
    b8f4:	f800283a 	ret

0000b8f8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b8f8:	deffef04 	addi	sp,sp,-68
    b8fc:	df001015 	stw	fp,64(sp)
    b900:	df001004 	addi	fp,sp,64
    b904:	e13ffc15 	stw	r4,-16(fp)
    b908:	e17ffd15 	stw	r5,-12(fp)
    b90c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    b910:	00bffa84 	movi	r2,-22
    b914:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b918:	e0bffc17 	ldw	r2,-16(fp)
    b91c:	10800828 	cmpgeui	r2,r2,32
    b920:	1000601e 	bne	r2,zero,baa4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b924:	0005303a 	rdctl	r2,status
    b928:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b92c:	e0fff917 	ldw	r3,-28(fp)
    b930:	00bfff84 	movi	r2,-2
    b934:	1884703a 	and	r2,r3,r2
    b938:	1001703a 	wrctl	status,r2
  
  return context;
    b93c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b940:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    b944:	e0bffc17 	ldw	r2,-16(fp)
    b948:	00c01774 	movhi	r3,93
    b94c:	18fecb04 	addi	r3,r3,-1236
    b950:	100490fa 	slli	r2,r2,3
    b954:	10c7883a 	add	r3,r2,r3
    b958:	e0bffe17 	ldw	r2,-8(fp)
    b95c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    b960:	e0bffc17 	ldw	r2,-16(fp)
    b964:	00c01774 	movhi	r3,93
    b968:	18fecb04 	addi	r3,r3,-1236
    b96c:	100490fa 	slli	r2,r2,3
    b970:	10c5883a 	add	r2,r2,r3
    b974:	10c00104 	addi	r3,r2,4
    b978:	e0bffd17 	ldw	r2,-12(fp)
    b97c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b980:	e0bffe17 	ldw	r2,-8(fp)
    b984:	1005003a 	cmpeq	r2,r2,zero
    b988:	1000201e 	bne	r2,zero,ba0c <alt_irq_register+0x114>
    b98c:	e0bffc17 	ldw	r2,-16(fp)
    b990:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b994:	0005303a 	rdctl	r2,status
    b998:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b99c:	e0fff617 	ldw	r3,-40(fp)
    b9a0:	00bfff84 	movi	r2,-2
    b9a4:	1884703a 	and	r2,r3,r2
    b9a8:	1001703a 	wrctl	status,r2
  
  return context;
    b9ac:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b9b0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    b9b4:	e0fff717 	ldw	r3,-36(fp)
    b9b8:	00800044 	movi	r2,1
    b9bc:	10c4983a 	sll	r2,r2,r3
    b9c0:	1007883a 	mov	r3,r2
    b9c4:	00800074 	movhi	r2,1
    b9c8:	109ad104 	addi	r2,r2,27460
    b9cc:	10800017 	ldw	r2,0(r2)
    b9d0:	1886b03a 	or	r3,r3,r2
    b9d4:	00800074 	movhi	r2,1
    b9d8:	109ad104 	addi	r2,r2,27460
    b9dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b9e0:	00800074 	movhi	r2,1
    b9e4:	109ad104 	addi	r2,r2,27460
    b9e8:	10800017 	ldw	r2,0(r2)
    b9ec:	100170fa 	wrctl	ienable,r2
    b9f0:	e0bff817 	ldw	r2,-32(fp)
    b9f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b9f8:	e0bff517 	ldw	r2,-44(fp)
    b9fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ba00:	0005883a 	mov	r2,zero
    ba04:	e0bfff15 	stw	r2,-4(fp)
    ba08:	00002006 	br	ba8c <alt_irq_register+0x194>
    ba0c:	e0bffc17 	ldw	r2,-16(fp)
    ba10:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba14:	0005303a 	rdctl	r2,status
    ba18:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba1c:	e0fff217 	ldw	r3,-56(fp)
    ba20:	00bfff84 	movi	r2,-2
    ba24:	1884703a 	and	r2,r3,r2
    ba28:	1001703a 	wrctl	status,r2
  
  return context;
    ba2c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ba30:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    ba34:	e0fff317 	ldw	r3,-52(fp)
    ba38:	00800044 	movi	r2,1
    ba3c:	10c4983a 	sll	r2,r2,r3
    ba40:	0084303a 	nor	r2,zero,r2
    ba44:	1007883a 	mov	r3,r2
    ba48:	00800074 	movhi	r2,1
    ba4c:	109ad104 	addi	r2,r2,27460
    ba50:	10800017 	ldw	r2,0(r2)
    ba54:	1886703a 	and	r3,r3,r2
    ba58:	00800074 	movhi	r2,1
    ba5c:	109ad104 	addi	r2,r2,27460
    ba60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ba64:	00800074 	movhi	r2,1
    ba68:	109ad104 	addi	r2,r2,27460
    ba6c:	10800017 	ldw	r2,0(r2)
    ba70:	100170fa 	wrctl	ienable,r2
    ba74:	e0bff417 	ldw	r2,-48(fp)
    ba78:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba7c:	e0bff117 	ldw	r2,-60(fp)
    ba80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ba84:	0005883a 	mov	r2,zero
    ba88:	e0bfff15 	stw	r2,-4(fp)
    ba8c:	e0bfff17 	ldw	r2,-4(fp)
    ba90:	e0bffb15 	stw	r2,-20(fp)
    ba94:	e0bffa17 	ldw	r2,-24(fp)
    ba98:	e0bff015 	stw	r2,-64(fp)
    ba9c:	e0bff017 	ldw	r2,-64(fp)
    baa0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    baa4:	e0bffb17 	ldw	r2,-20(fp)
}
    baa8:	e037883a 	mov	sp,fp
    baac:	df000017 	ldw	fp,0(sp)
    bab0:	dec00104 	addi	sp,sp,4
    bab4:	f800283a 	ret

0000bab8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    bab8:	deffeb04 	addi	sp,sp,-84
    babc:	dfc01415 	stw	ra,80(sp)
    bac0:	df001315 	stw	fp,76(sp)
    bac4:	df001304 	addi	fp,sp,76
    bac8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bacc:	e0bffd17 	ldw	r2,-12(fp)
    bad0:	1004803a 	cmplt	r2,r2,zero
    bad4:	1000081e 	bne	r2,zero,baf8 <isatty+0x40>
    bad8:	e0bffd17 	ldw	r2,-12(fp)
    badc:	10800324 	muli	r2,r2,12
    bae0:	1007883a 	mov	r3,r2
    bae4:	00800074 	movhi	r2,1
    bae8:	108d8904 	addi	r2,r2,13860
    baec:	1887883a 	add	r3,r3,r2
    baf0:	e0ffff15 	stw	r3,-4(fp)
    baf4:	00000106 	br	bafc <isatty+0x44>
    baf8:	e03fff15 	stw	zero,-4(fp)
    bafc:	e0bfff17 	ldw	r2,-4(fp)
    bb00:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    bb04:	e0bfed17 	ldw	r2,-76(fp)
    bb08:	1005003a 	cmpeq	r2,r2,zero
    bb0c:	10000f1e 	bne	r2,zero,bb4c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    bb10:	e0bfed17 	ldw	r2,-76(fp)
    bb14:	10800017 	ldw	r2,0(r2)
    bb18:	10800817 	ldw	r2,32(r2)
    bb1c:	1004c03a 	cmpne	r2,r2,zero
    bb20:	1000031e 	bne	r2,zero,bb30 <isatty+0x78>
    {
      return 1;
    bb24:	00800044 	movi	r2,1
    bb28:	e0bffe15 	stw	r2,-8(fp)
    bb2c:	00000c06 	br	bb60 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    bb30:	e17fee04 	addi	r5,fp,-72
    bb34:	e13ffd17 	ldw	r4,-12(fp)
    bb38:	000b7c40 	call	b7c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    bb3c:	e0bfef17 	ldw	r2,-68(fp)
    bb40:	10880020 	cmpeqi	r2,r2,8192
    bb44:	e0bffe15 	stw	r2,-8(fp)
    bb48:	00000506 	br	bb60 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    bb4c:	000bb780 	call	bb78 <alt_get_errno>
    bb50:	1007883a 	mov	r3,r2
    bb54:	00801444 	movi	r2,81
    bb58:	18800015 	stw	r2,0(r3)
    return 0;
    bb5c:	e03ffe15 	stw	zero,-8(fp)
    bb60:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    bb64:	e037883a 	mov	sp,fp
    bb68:	dfc00117 	ldw	ra,4(sp)
    bb6c:	df000017 	ldw	fp,0(sp)
    bb70:	dec00204 	addi	sp,sp,8
    bb74:	f800283a 	ret

0000bb78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bb78:	defffd04 	addi	sp,sp,-12
    bb7c:	dfc00215 	stw	ra,8(sp)
    bb80:	df000115 	stw	fp,4(sp)
    bb84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bb88:	00800074 	movhi	r2,1
    bb8c:	1092f904 	addi	r2,r2,19428
    bb90:	10800017 	ldw	r2,0(r2)
    bb94:	1005003a 	cmpeq	r2,r2,zero
    bb98:	1000061e 	bne	r2,zero,bbb4 <alt_get_errno+0x3c>
    bb9c:	00800074 	movhi	r2,1
    bba0:	1092f904 	addi	r2,r2,19428
    bba4:	10800017 	ldw	r2,0(r2)
    bba8:	103ee83a 	callr	r2
    bbac:	e0bfff15 	stw	r2,-4(fp)
    bbb0:	00000306 	br	bbc0 <alt_get_errno+0x48>
    bbb4:	00800074 	movhi	r2,1
    bbb8:	109ad004 	addi	r2,r2,27456
    bbbc:	e0bfff15 	stw	r2,-4(fp)
    bbc0:	e0bfff17 	ldw	r2,-4(fp)
}
    bbc4:	e037883a 	mov	sp,fp
    bbc8:	dfc00117 	ldw	ra,4(sp)
    bbcc:	df000017 	ldw	fp,0(sp)
    bbd0:	dec00204 	addi	sp,sp,8
    bbd4:	f800283a 	ret

0000bbd8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    bbd8:	defffe04 	addi	sp,sp,-8
    bbdc:	dfc00115 	stw	ra,4(sp)
    bbe0:	df000015 	stw	fp,0(sp)
    bbe4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    bbe8:	01000074 	movhi	r4,1
    bbec:	2112fe04 	addi	r4,r4,19448
    bbf0:	01400074 	movhi	r5,1
    bbf4:	294b3a04 	addi	r5,r5,11496
    bbf8:	01800074 	movhi	r6,1
    bbfc:	3192fe04 	addi	r6,r6,19448
    bc00:	000bc580 	call	bc58 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    bc04:	01000034 	movhi	r4,0
    bc08:	21000804 	addi	r4,r4,32
    bc0c:	01400034 	movhi	r5,0
    bc10:	29400804 	addi	r5,r5,32
    bc14:	01800034 	movhi	r6,0
    bc18:	31806e04 	addi	r6,r6,440
    bc1c:	000bc580 	call	bc58 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    bc20:	01000074 	movhi	r4,1
    bc24:	21089f04 	addi	r4,r4,8828
    bc28:	01400074 	movhi	r5,1
    bc2c:	29489f04 	addi	r5,r5,8828
    bc30:	01800074 	movhi	r6,1
    bc34:	318b3a04 	addi	r6,r6,11496
    bc38:	000bc580 	call	bc58 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    bc3c:	0010ef40 	call	10ef4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    bc40:	00111800 	call	11180 <alt_icache_flush_all>
}
    bc44:	e037883a 	mov	sp,fp
    bc48:	dfc00117 	ldw	ra,4(sp)
    bc4c:	df000017 	ldw	fp,0(sp)
    bc50:	dec00204 	addi	sp,sp,8
    bc54:	f800283a 	ret

0000bc58 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    bc58:	defffc04 	addi	sp,sp,-16
    bc5c:	df000315 	stw	fp,12(sp)
    bc60:	df000304 	addi	fp,sp,12
    bc64:	e13ffd15 	stw	r4,-12(fp)
    bc68:	e17ffe15 	stw	r5,-8(fp)
    bc6c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    bc70:	e0fffe17 	ldw	r3,-8(fp)
    bc74:	e0bffd17 	ldw	r2,-12(fp)
    bc78:	18800e26 	beq	r3,r2,bcb4 <alt_load_section+0x5c>
  {
    while( to != end )
    bc7c:	00000a06 	br	bca8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    bc80:	e0bffd17 	ldw	r2,-12(fp)
    bc84:	10c00017 	ldw	r3,0(r2)
    bc88:	e0bffe17 	ldw	r2,-8(fp)
    bc8c:	10c00015 	stw	r3,0(r2)
    bc90:	e0bffe17 	ldw	r2,-8(fp)
    bc94:	10800104 	addi	r2,r2,4
    bc98:	e0bffe15 	stw	r2,-8(fp)
    bc9c:	e0bffd17 	ldw	r2,-12(fp)
    bca0:	10800104 	addi	r2,r2,4
    bca4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    bca8:	e0fffe17 	ldw	r3,-8(fp)
    bcac:	e0bfff17 	ldw	r2,-4(fp)
    bcb0:	18bff31e 	bne	r3,r2,bc80 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    bcb4:	e037883a 	mov	sp,fp
    bcb8:	df000017 	ldw	fp,0(sp)
    bcbc:	dec00104 	addi	sp,sp,4
    bcc0:	f800283a 	ret

0000bcc4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    bcc4:	defff804 	addi	sp,sp,-32
    bcc8:	dfc00715 	stw	ra,28(sp)
    bccc:	df000615 	stw	fp,24(sp)
    bcd0:	df000604 	addi	fp,sp,24
    bcd4:	e13ffc15 	stw	r4,-16(fp)
    bcd8:	e17ffd15 	stw	r5,-12(fp)
    bcdc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    bce0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bce4:	e0bffc17 	ldw	r2,-16(fp)
    bce8:	1004803a 	cmplt	r2,r2,zero
    bcec:	1000081e 	bne	r2,zero,bd10 <lseek+0x4c>
    bcf0:	e0bffc17 	ldw	r2,-16(fp)
    bcf4:	10800324 	muli	r2,r2,12
    bcf8:	1007883a 	mov	r3,r2
    bcfc:	00800074 	movhi	r2,1
    bd00:	108d8904 	addi	r2,r2,13860
    bd04:	1887883a 	add	r3,r3,r2
    bd08:	e0ffff15 	stw	r3,-4(fp)
    bd0c:	00000106 	br	bd14 <lseek+0x50>
    bd10:	e03fff15 	stw	zero,-4(fp)
    bd14:	e0bfff17 	ldw	r2,-4(fp)
    bd18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    bd1c:	e0bffb17 	ldw	r2,-20(fp)
    bd20:	1005003a 	cmpeq	r2,r2,zero
    bd24:	1000111e 	bne	r2,zero,bd6c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    bd28:	e0bffb17 	ldw	r2,-20(fp)
    bd2c:	10800017 	ldw	r2,0(r2)
    bd30:	10800717 	ldw	r2,28(r2)
    bd34:	1005003a 	cmpeq	r2,r2,zero
    bd38:	1000091e 	bne	r2,zero,bd60 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    bd3c:	e0bffb17 	ldw	r2,-20(fp)
    bd40:	10800017 	ldw	r2,0(r2)
    bd44:	10800717 	ldw	r2,28(r2)
    bd48:	e13ffb17 	ldw	r4,-20(fp)
    bd4c:	e17ffd17 	ldw	r5,-12(fp)
    bd50:	e1bffe17 	ldw	r6,-8(fp)
    bd54:	103ee83a 	callr	r2
    bd58:	e0bffa15 	stw	r2,-24(fp)
    bd5c:	00000506 	br	bd74 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    bd60:	00bfde84 	movi	r2,-134
    bd64:	e0bffa15 	stw	r2,-24(fp)
    bd68:	00000206 	br	bd74 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    bd6c:	00bfebc4 	movi	r2,-81
    bd70:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    bd74:	e0bffa17 	ldw	r2,-24(fp)
    bd78:	1004403a 	cmpge	r2,r2,zero
    bd7c:	1000071e 	bne	r2,zero,bd9c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    bd80:	000bdb40 	call	bdb4 <alt_get_errno>
    bd84:	1007883a 	mov	r3,r2
    bd88:	e0bffa17 	ldw	r2,-24(fp)
    bd8c:	0085c83a 	sub	r2,zero,r2
    bd90:	18800015 	stw	r2,0(r3)
    rc = -1;
    bd94:	00bfffc4 	movi	r2,-1
    bd98:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    bd9c:	e0bffa17 	ldw	r2,-24(fp)
}
    bda0:	e037883a 	mov	sp,fp
    bda4:	dfc00117 	ldw	ra,4(sp)
    bda8:	df000017 	ldw	fp,0(sp)
    bdac:	dec00204 	addi	sp,sp,8
    bdb0:	f800283a 	ret

0000bdb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bdb4:	defffd04 	addi	sp,sp,-12
    bdb8:	dfc00215 	stw	ra,8(sp)
    bdbc:	df000115 	stw	fp,4(sp)
    bdc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bdc4:	00800074 	movhi	r2,1
    bdc8:	1092f904 	addi	r2,r2,19428
    bdcc:	10800017 	ldw	r2,0(r2)
    bdd0:	1005003a 	cmpeq	r2,r2,zero
    bdd4:	1000061e 	bne	r2,zero,bdf0 <alt_get_errno+0x3c>
    bdd8:	00800074 	movhi	r2,1
    bddc:	1092f904 	addi	r2,r2,19428
    bde0:	10800017 	ldw	r2,0(r2)
    bde4:	103ee83a 	callr	r2
    bde8:	e0bfff15 	stw	r2,-4(fp)
    bdec:	00000306 	br	bdfc <alt_get_errno+0x48>
    bdf0:	00800074 	movhi	r2,1
    bdf4:	109ad004 	addi	r2,r2,27456
    bdf8:	e0bfff15 	stw	r2,-4(fp)
    bdfc:	e0bfff17 	ldw	r2,-4(fp)
}
    be00:	e037883a 	mov	sp,fp
    be04:	dfc00117 	ldw	ra,4(sp)
    be08:	df000017 	ldw	fp,0(sp)
    be0c:	dec00204 	addi	sp,sp,8
    be10:	f800283a 	ret

0000be14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    be14:	defffd04 	addi	sp,sp,-12
    be18:	dfc00215 	stw	ra,8(sp)
    be1c:	df000115 	stw	fp,4(sp)
    be20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    be24:	0009883a 	mov	r4,zero
    be28:	000c5740 	call	c574 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    be2c:	000c5a80 	call	c5a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    be30:	01000074 	movhi	r4,1
    be34:	210ad004 	addi	r4,r4,11072
    be38:	01400074 	movhi	r5,1
    be3c:	294ad004 	addi	r5,r5,11072
    be40:	01800074 	movhi	r6,1
    be44:	318ad004 	addi	r6,r6,11072
    be48:	00112740 	call	11274 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    be4c:	00110240 	call	11024 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    be50:	01000074 	movhi	r4,1
    be54:	21042204 	addi	r4,r4,4232
    be58:	0011b380 	call	11b38 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    be5c:	d127e417 	ldw	r4,-24688(gp)
    be60:	d167e517 	ldw	r5,-24684(gp)
    be64:	d1a7e617 	ldw	r6,-24680(gp)
    be68:	00008740 	call	874 <main>
    be6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    be70:	01000044 	movi	r4,1
    be74:	000b63c0 	call	b63c <close>
  exit (result);
    be78:	e13fff17 	ldw	r4,-4(fp)
    be7c:	0011b4c0 	call	11b4c <exit>

0000be80 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    be80:	defffe04 	addi	sp,sp,-8
    be84:	df000115 	stw	fp,4(sp)
    be88:	df000104 	addi	fp,sp,4
    be8c:	e13fff15 	stw	r4,-4(fp)
}
    be90:	e037883a 	mov	sp,fp
    be94:	df000017 	ldw	fp,0(sp)
    be98:	dec00104 	addi	sp,sp,4
    be9c:	f800283a 	ret

0000bea0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    bea0:	defffe04 	addi	sp,sp,-8
    bea4:	df000115 	stw	fp,4(sp)
    bea8:	df000104 	addi	fp,sp,4
    beac:	e13fff15 	stw	r4,-4(fp)
}
    beb0:	e037883a 	mov	sp,fp
    beb4:	df000017 	ldw	fp,0(sp)
    beb8:	dec00104 	addi	sp,sp,4
    bebc:	f800283a 	ret

0000bec0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    bec0:	defff204 	addi	sp,sp,-56
    bec4:	dfc00a15 	stw	ra,40(sp)
    bec8:	df000915 	stw	fp,36(sp)
    becc:	df000904 	addi	fp,sp,36
    bed0:	e1400215 	stw	r5,8(fp)
    bed4:	e1800315 	stw	r6,12(fp)
    bed8:	e1c00415 	stw	r7,16(fp)
    bedc:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    bee0:	e0800204 	addi	r2,fp,8
    bee4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    bee8:	e0bfff17 	ldw	r2,-4(fp)
    beec:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    bef0:	00007806 	br	c0d4 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    bef4:	e0bffc07 	ldb	r2,-16(fp)
    bef8:	10800960 	cmpeqi	r2,r2,37
    befc:	1000031e 	bne	r2,zero,bf0c <alt_printf+0x4c>
        {
            alt_putchar(c);
    bf00:	e13ffc07 	ldb	r4,-16(fp)
    bf04:	000c1180 	call	c118 <alt_putchar>
    bf08:	00007206 	br	c0d4 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    bf0c:	e0bffd17 	ldw	r2,-12(fp)
    bf10:	10800003 	ldbu	r2,0(r2)
    bf14:	e0bffc05 	stb	r2,-16(fp)
    bf18:	e0bffc07 	ldb	r2,-16(fp)
    bf1c:	1004c03a 	cmpne	r2,r2,zero
    bf20:	1007883a 	mov	r3,r2
    bf24:	e0bffd17 	ldw	r2,-12(fp)
    bf28:	10800044 	addi	r2,r2,1
    bf2c:	e0bffd15 	stw	r2,-12(fp)
    bf30:	18803fcc 	andi	r2,r3,255
    bf34:	1005003a 	cmpeq	r2,r2,zero
    bf38:	1000721e 	bne	r2,zero,c104 <alt_printf+0x244>
            {
                if (c == '%')
    bf3c:	e0bffc07 	ldb	r2,-16(fp)
    bf40:	10800958 	cmpnei	r2,r2,37
    bf44:	1000031e 	bne	r2,zero,bf54 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    bf48:	e13ffc07 	ldb	r4,-16(fp)
    bf4c:	000c1180 	call	c118 <alt_putchar>
    bf50:	00006006 	br	c0d4 <alt_printf+0x214>
                } 
                else if (c == 'c')
    bf54:	e0bffc07 	ldb	r2,-16(fp)
    bf58:	108018d8 	cmpnei	r2,r2,99
    bf5c:	1000091e 	bne	r2,zero,bf84 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    bf60:	e0fffe17 	ldw	r3,-8(fp)
    bf64:	18800104 	addi	r2,r3,4
    bf68:	e0bffe15 	stw	r2,-8(fp)
    bf6c:	1805883a 	mov	r2,r3
    bf70:	10800017 	ldw	r2,0(r2)
    bf74:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    bf78:	e13ffb17 	ldw	r4,-20(fp)
    bf7c:	000c1180 	call	c118 <alt_putchar>
    bf80:	00005406 	br	c0d4 <alt_printf+0x214>
                }
                else if (c == 'x')
    bf84:	e0bffc07 	ldb	r2,-16(fp)
    bf88:	10801e18 	cmpnei	r2,r2,120
    bf8c:	1000371e 	bne	r2,zero,c06c <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    bf90:	e0fffe17 	ldw	r3,-8(fp)
    bf94:	18800104 	addi	r2,r3,4
    bf98:	e0bffe15 	stw	r2,-8(fp)
    bf9c:	1805883a 	mov	r2,r3
    bfa0:	10800017 	ldw	r2,0(r2)
    bfa4:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    bfa8:	e0bffa17 	ldw	r2,-24(fp)
    bfac:	1004c03a 	cmpne	r2,r2,zero
    bfb0:	1000031e 	bne	r2,zero,bfc0 <alt_printf+0x100>
                    {
                        alt_putchar('0');
    bfb4:	01000c04 	movi	r4,48
    bfb8:	000c1180 	call	c118 <alt_putchar>
                        continue;
    bfbc:	00004506 	br	c0d4 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    bfc0:	00800704 	movi	r2,28
    bfc4:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    bfc8:	00000306 	br	bfd8 <alt_printf+0x118>
                        digit_shift -= 4;
    bfcc:	e0bff817 	ldw	r2,-32(fp)
    bfd0:	10bfff04 	addi	r2,r2,-4
    bfd4:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    bfd8:	00c003c4 	movi	r3,15
    bfdc:	e0bff817 	ldw	r2,-32(fp)
    bfe0:	1884983a 	sll	r2,r3,r2
    bfe4:	1007883a 	mov	r3,r2
    bfe8:	e0bffa17 	ldw	r2,-24(fp)
    bfec:	1884703a 	and	r2,r3,r2
    bff0:	1005003a 	cmpeq	r2,r2,zero
    bff4:	103ff51e 	bne	r2,zero,bfcc <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bff8:	00001806 	br	c05c <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    bffc:	00c003c4 	movi	r3,15
    c000:	e0bff817 	ldw	r2,-32(fp)
    c004:	1884983a 	sll	r2,r3,r2
    c008:	1007883a 	mov	r3,r2
    c00c:	e0bffa17 	ldw	r2,-24(fp)
    c010:	1886703a 	and	r3,r3,r2
    c014:	e0bff817 	ldw	r2,-32(fp)
    c018:	1884d83a 	srl	r2,r3,r2
    c01c:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    c020:	e0bff917 	ldw	r2,-28(fp)
    c024:	108002a8 	cmpgeui	r2,r2,10
    c028:	1000041e 	bne	r2,zero,c03c <alt_printf+0x17c>
                            c = '0' + digit;
    c02c:	e0bff917 	ldw	r2,-28(fp)
    c030:	10800c04 	addi	r2,r2,48
    c034:	e0bffc05 	stb	r2,-16(fp)
    c038:	00000306 	br	c048 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    c03c:	e0bff917 	ldw	r2,-28(fp)
    c040:	108015c4 	addi	r2,r2,87
    c044:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    c048:	e13ffc07 	ldb	r4,-16(fp)
    c04c:	000c1180 	call	c118 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    c050:	e0bff817 	ldw	r2,-32(fp)
    c054:	10bfff04 	addi	r2,r2,-4
    c058:	e0bff815 	stw	r2,-32(fp)
    c05c:	e0bff817 	ldw	r2,-32(fp)
    c060:	1004403a 	cmpge	r2,r2,zero
    c064:	103fe51e 	bne	r2,zero,bffc <alt_printf+0x13c>
    c068:	00001a06 	br	c0d4 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    c06c:	e0bffc07 	ldb	r2,-16(fp)
    c070:	10801cd8 	cmpnei	r2,r2,115
    c074:	1000171e 	bne	r2,zero,c0d4 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    c078:	e0fffe17 	ldw	r3,-8(fp)
    c07c:	18800104 	addi	r2,r3,4
    c080:	e0bffe15 	stw	r2,-8(fp)
    c084:	1805883a 	mov	r2,r3
    c088:	10800017 	ldw	r2,0(r2)
    c08c:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    c090:	00000906 	br	c0b8 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    c094:	e0bff717 	ldw	r2,-36(fp)
    c098:	10800003 	ldbu	r2,0(r2)
    c09c:	11003fcc 	andi	r4,r2,255
    c0a0:	2100201c 	xori	r4,r4,128
    c0a4:	213fe004 	addi	r4,r4,-128
    c0a8:	e0bff717 	ldw	r2,-36(fp)
    c0ac:	10800044 	addi	r2,r2,1
    c0b0:	e0bff715 	stw	r2,-36(fp)
    c0b4:	000c1180 	call	c118 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    c0b8:	e0bff717 	ldw	r2,-36(fp)
    c0bc:	10800003 	ldbu	r2,0(r2)
    c0c0:	10803fcc 	andi	r2,r2,255
    c0c4:	1080201c 	xori	r2,r2,128
    c0c8:	10bfe004 	addi	r2,r2,-128
    c0cc:	1004c03a 	cmpne	r2,r2,zero
    c0d0:	103ff01e 	bne	r2,zero,c094 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    c0d4:	e0bffd17 	ldw	r2,-12(fp)
    c0d8:	10800003 	ldbu	r2,0(r2)
    c0dc:	e0bffc05 	stb	r2,-16(fp)
    c0e0:	e0bffc07 	ldb	r2,-16(fp)
    c0e4:	1004c03a 	cmpne	r2,r2,zero
    c0e8:	1007883a 	mov	r3,r2
    c0ec:	e0bffd17 	ldw	r2,-12(fp)
    c0f0:	10800044 	addi	r2,r2,1
    c0f4:	e0bffd15 	stw	r2,-12(fp)
    c0f8:	18803fcc 	andi	r2,r3,255
    c0fc:	1004c03a 	cmpne	r2,r2,zero
    c100:	103f7c1e 	bne	r2,zero,bef4 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    c104:	e037883a 	mov	sp,fp
    c108:	dfc00117 	ldw	ra,4(sp)
    c10c:	df000017 	ldw	fp,0(sp)
    c110:	dec00504 	addi	sp,sp,20
    c114:	f800283a 	ret

0000c118 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    c118:	defffd04 	addi	sp,sp,-12
    c11c:	dfc00215 	stw	ra,8(sp)
    c120:	df000115 	stw	fp,4(sp)
    c124:	df000104 	addi	fp,sp,4
    c128:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    c12c:	00800074 	movhi	r2,1
    c130:	1092ee04 	addi	r2,r2,19384
    c134:	10800017 	ldw	r2,0(r2)
    c138:	11400217 	ldw	r5,8(r2)
    c13c:	e13fff17 	ldw	r4,-4(fp)
    c140:	0011bf80 	call	11bf8 <putc>
#endif
}
    c144:	e037883a 	mov	sp,fp
    c148:	dfc00117 	ldw	ra,4(sp)
    c14c:	df000017 	ldw	fp,0(sp)
    c150:	dec00204 	addi	sp,sp,8
    c154:	f800283a 	ret

0000c158 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    c158:	defff704 	addi	sp,sp,-36
    c15c:	dfc00815 	stw	ra,32(sp)
    c160:	df000715 	stw	fp,28(sp)
    c164:	df000704 	addi	fp,sp,28
    c168:	e13ffb15 	stw	r4,-20(fp)
    c16c:	e17ffc15 	stw	r5,-16(fp)
    c170:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c174:	e0bffb17 	ldw	r2,-20(fp)
    c178:	1004803a 	cmplt	r2,r2,zero
    c17c:	1000081e 	bne	r2,zero,c1a0 <read+0x48>
    c180:	e0bffb17 	ldw	r2,-20(fp)
    c184:	10800324 	muli	r2,r2,12
    c188:	1007883a 	mov	r3,r2
    c18c:	00800074 	movhi	r2,1
    c190:	108d8904 	addi	r2,r2,13860
    c194:	1887883a 	add	r3,r3,r2
    c198:	e0ffff15 	stw	r3,-4(fp)
    c19c:	00000106 	br	c1a4 <read+0x4c>
    c1a0:	e03fff15 	stw	zero,-4(fp)
    c1a4:	e0bfff17 	ldw	r2,-4(fp)
    c1a8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c1ac:	e0bffa17 	ldw	r2,-24(fp)
    c1b0:	1005003a 	cmpeq	r2,r2,zero
    c1b4:	1000241e 	bne	r2,zero,c248 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    c1b8:	e0bffa17 	ldw	r2,-24(fp)
    c1bc:	10800217 	ldw	r2,8(r2)
    c1c0:	108000cc 	andi	r2,r2,3
    c1c4:	10800060 	cmpeqi	r2,r2,1
    c1c8:	10001a1e 	bne	r2,zero,c234 <read+0xdc>
    c1cc:	e0bffa17 	ldw	r2,-24(fp)
    c1d0:	10800017 	ldw	r2,0(r2)
    c1d4:	10800517 	ldw	r2,20(r2)
    c1d8:	1005003a 	cmpeq	r2,r2,zero
    c1dc:	1000151e 	bne	r2,zero,c234 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    c1e0:	e0bffa17 	ldw	r2,-24(fp)
    c1e4:	10800017 	ldw	r2,0(r2)
    c1e8:	10800517 	ldw	r2,20(r2)
    c1ec:	e17ffc17 	ldw	r5,-16(fp)
    c1f0:	e1bffd17 	ldw	r6,-12(fp)
    c1f4:	e13ffa17 	ldw	r4,-24(fp)
    c1f8:	103ee83a 	callr	r2
    c1fc:	e0bff915 	stw	r2,-28(fp)
    c200:	e0bff917 	ldw	r2,-28(fp)
    c204:	1004403a 	cmpge	r2,r2,zero
    c208:	1000071e 	bne	r2,zero,c228 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    c20c:	000c2780 	call	c278 <alt_get_errno>
    c210:	e0fff917 	ldw	r3,-28(fp)
    c214:	00c7c83a 	sub	r3,zero,r3
    c218:	10c00015 	stw	r3,0(r2)
          return -1;
    c21c:	00bfffc4 	movi	r2,-1
    c220:	e0bffe15 	stw	r2,-8(fp)
    c224:	00000e06 	br	c260 <read+0x108>
        }
        return rval;
    c228:	e0bff917 	ldw	r2,-28(fp)
    c22c:	e0bffe15 	stw	r2,-8(fp)
    c230:	00000b06 	br	c260 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    c234:	000c2780 	call	c278 <alt_get_errno>
    c238:	1007883a 	mov	r3,r2
    c23c:	00800344 	movi	r2,13
    c240:	18800015 	stw	r2,0(r3)
    c244:	00000406 	br	c258 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    c248:	000c2780 	call	c278 <alt_get_errno>
    c24c:	1007883a 	mov	r3,r2
    c250:	00801444 	movi	r2,81
    c254:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c258:	00bfffc4 	movi	r2,-1
    c25c:	e0bffe15 	stw	r2,-8(fp)
    c260:	e0bffe17 	ldw	r2,-8(fp)
}
    c264:	e037883a 	mov	sp,fp
    c268:	dfc00117 	ldw	ra,4(sp)
    c26c:	df000017 	ldw	fp,0(sp)
    c270:	dec00204 	addi	sp,sp,8
    c274:	f800283a 	ret

0000c278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c278:	defffd04 	addi	sp,sp,-12
    c27c:	dfc00215 	stw	ra,8(sp)
    c280:	df000115 	stw	fp,4(sp)
    c284:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c288:	00800074 	movhi	r2,1
    c28c:	1092f904 	addi	r2,r2,19428
    c290:	10800017 	ldw	r2,0(r2)
    c294:	1005003a 	cmpeq	r2,r2,zero
    c298:	1000061e 	bne	r2,zero,c2b4 <alt_get_errno+0x3c>
    c29c:	00800074 	movhi	r2,1
    c2a0:	1092f904 	addi	r2,r2,19428
    c2a4:	10800017 	ldw	r2,0(r2)
    c2a8:	103ee83a 	callr	r2
    c2ac:	e0bfff15 	stw	r2,-4(fp)
    c2b0:	00000306 	br	c2c0 <alt_get_errno+0x48>
    c2b4:	00800074 	movhi	r2,1
    c2b8:	109ad004 	addi	r2,r2,27456
    c2bc:	e0bfff15 	stw	r2,-4(fp)
    c2c0:	e0bfff17 	ldw	r2,-4(fp)
}
    c2c4:	e037883a 	mov	sp,fp
    c2c8:	dfc00117 	ldw	ra,4(sp)
    c2cc:	df000017 	ldw	fp,0(sp)
    c2d0:	dec00204 	addi	sp,sp,8
    c2d4:	f800283a 	ret

0000c2d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c2d8:	defffe04 	addi	sp,sp,-8
    c2dc:	df000115 	stw	fp,4(sp)
    c2e0:	df000104 	addi	fp,sp,4
    c2e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c2e8:	e0bfff17 	ldw	r2,-4(fp)
    c2ec:	108000d0 	cmplti	r2,r2,3
    c2f0:	10000d1e 	bne	r2,zero,c328 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c2f4:	e0bfff17 	ldw	r2,-4(fp)
    c2f8:	00c00074 	movhi	r3,1
    c2fc:	18cd8904 	addi	r3,r3,13860
    c300:	10800324 	muli	r2,r2,12
    c304:	10c5883a 	add	r2,r2,r3
    c308:	10800204 	addi	r2,r2,8
    c30c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c310:	e0bfff17 	ldw	r2,-4(fp)
    c314:	00c00074 	movhi	r3,1
    c318:	18cd8904 	addi	r3,r3,13860
    c31c:	10800324 	muli	r2,r2,12
    c320:	10c5883a 	add	r2,r2,r3
    c324:	10000015 	stw	zero,0(r2)
  }
}
    c328:	e037883a 	mov	sp,fp
    c32c:	df000017 	ldw	fp,0(sp)
    c330:	dec00104 	addi	sp,sp,4
    c334:	f800283a 	ret

0000c338 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    c338:	defff804 	addi	sp,sp,-32
    c33c:	df000715 	stw	fp,28(sp)
    c340:	df000704 	addi	fp,sp,28
    c344:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c348:	0005303a 	rdctl	r2,status
    c34c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c350:	e0fffb17 	ldw	r3,-20(fp)
    c354:	00bfff84 	movi	r2,-2
    c358:	1884703a 	and	r2,r3,r2
    c35c:	1001703a 	wrctl	status,r2
  
  return context;
    c360:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    c364:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    c368:	d0a00d17 	ldw	r2,-32716(gp)
    c36c:	10c000c4 	addi	r3,r2,3
    c370:	00bfff04 	movi	r2,-4
    c374:	1884703a 	and	r2,r3,r2
    c378:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    c37c:	d0e00d17 	ldw	r3,-32716(gp)
    c380:	e0bffe17 	ldw	r2,-8(fp)
    c384:	1887883a 	add	r3,r3,r2
    c388:	00802034 	movhi	r2,128
    c38c:	10800004 	addi	r2,r2,0
    c390:	10c0072e 	bgeu	r2,r3,c3b0 <sbrk+0x78>
    c394:	e0bffd17 	ldw	r2,-12(fp)
    c398:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c39c:	e0bffa17 	ldw	r2,-24(fp)
    c3a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    c3a4:	00bfffc4 	movi	r2,-1
    c3a8:	e0bfff15 	stw	r2,-4(fp)
    c3ac:	00000c06 	br	c3e0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    c3b0:	d0a00d17 	ldw	r2,-32716(gp)
    c3b4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    c3b8:	d0e00d17 	ldw	r3,-32716(gp)
    c3bc:	e0bffe17 	ldw	r2,-8(fp)
    c3c0:	1885883a 	add	r2,r3,r2
    c3c4:	d0a00d15 	stw	r2,-32716(gp)
    c3c8:	e0bffd17 	ldw	r2,-12(fp)
    c3cc:	e0bff915 	stw	r2,-28(fp)
    c3d0:	e0bff917 	ldw	r2,-28(fp)
    c3d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    c3d8:	e0bffc17 	ldw	r2,-16(fp)
    c3dc:	e0bfff15 	stw	r2,-4(fp)
    c3e0:	e0bfff17 	ldw	r2,-4(fp)
} 
    c3e4:	e037883a 	mov	sp,fp
    c3e8:	df000017 	ldw	fp,0(sp)
    c3ec:	dec00104 	addi	sp,sp,4
    c3f0:	f800283a 	ret

0000c3f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c3f4:	defff704 	addi	sp,sp,-36
    c3f8:	dfc00815 	stw	ra,32(sp)
    c3fc:	df000715 	stw	fp,28(sp)
    c400:	df000704 	addi	fp,sp,28
    c404:	e13ffb15 	stw	r4,-20(fp)
    c408:	e17ffc15 	stw	r5,-16(fp)
    c40c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c410:	e0bffb17 	ldw	r2,-20(fp)
    c414:	1004803a 	cmplt	r2,r2,zero
    c418:	1000081e 	bne	r2,zero,c43c <write+0x48>
    c41c:	e0bffb17 	ldw	r2,-20(fp)
    c420:	10800324 	muli	r2,r2,12
    c424:	1007883a 	mov	r3,r2
    c428:	00800074 	movhi	r2,1
    c42c:	108d8904 	addi	r2,r2,13860
    c430:	1887883a 	add	r3,r3,r2
    c434:	e0ffff15 	stw	r3,-4(fp)
    c438:	00000106 	br	c440 <write+0x4c>
    c43c:	e03fff15 	stw	zero,-4(fp)
    c440:	e0bfff17 	ldw	r2,-4(fp)
    c444:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c448:	e0bffa17 	ldw	r2,-24(fp)
    c44c:	1005003a 	cmpeq	r2,r2,zero
    c450:	1000241e 	bne	r2,zero,c4e4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c454:	e0bffa17 	ldw	r2,-24(fp)
    c458:	10800217 	ldw	r2,8(r2)
    c45c:	108000cc 	andi	r2,r2,3
    c460:	1005003a 	cmpeq	r2,r2,zero
    c464:	10001a1e 	bne	r2,zero,c4d0 <write+0xdc>
    c468:	e0bffa17 	ldw	r2,-24(fp)
    c46c:	10800017 	ldw	r2,0(r2)
    c470:	10800617 	ldw	r2,24(r2)
    c474:	1005003a 	cmpeq	r2,r2,zero
    c478:	1000151e 	bne	r2,zero,c4d0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c47c:	e0bffa17 	ldw	r2,-24(fp)
    c480:	10800017 	ldw	r2,0(r2)
    c484:	10800617 	ldw	r2,24(r2)
    c488:	e17ffc17 	ldw	r5,-16(fp)
    c48c:	e1bffd17 	ldw	r6,-12(fp)
    c490:	e13ffa17 	ldw	r4,-24(fp)
    c494:	103ee83a 	callr	r2
    c498:	e0bff915 	stw	r2,-28(fp)
    c49c:	e0bff917 	ldw	r2,-28(fp)
    c4a0:	1004403a 	cmpge	r2,r2,zero
    c4a4:	1000071e 	bne	r2,zero,c4c4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    c4a8:	000c5140 	call	c514 <alt_get_errno>
    c4ac:	e0fff917 	ldw	r3,-28(fp)
    c4b0:	00c7c83a 	sub	r3,zero,r3
    c4b4:	10c00015 	stw	r3,0(r2)
        return -1;
    c4b8:	00bfffc4 	movi	r2,-1
    c4bc:	e0bffe15 	stw	r2,-8(fp)
    c4c0:	00000e06 	br	c4fc <write+0x108>
      }
      return rval;
    c4c4:	e0bff917 	ldw	r2,-28(fp)
    c4c8:	e0bffe15 	stw	r2,-8(fp)
    c4cc:	00000b06 	br	c4fc <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c4d0:	000c5140 	call	c514 <alt_get_errno>
    c4d4:	1007883a 	mov	r3,r2
    c4d8:	00800344 	movi	r2,13
    c4dc:	18800015 	stw	r2,0(r3)
    c4e0:	00000406 	br	c4f4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c4e4:	000c5140 	call	c514 <alt_get_errno>
    c4e8:	1007883a 	mov	r3,r2
    c4ec:	00801444 	movi	r2,81
    c4f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c4f4:	00bfffc4 	movi	r2,-1
    c4f8:	e0bffe15 	stw	r2,-8(fp)
    c4fc:	e0bffe17 	ldw	r2,-8(fp)
}
    c500:	e037883a 	mov	sp,fp
    c504:	dfc00117 	ldw	ra,4(sp)
    c508:	df000017 	ldw	fp,0(sp)
    c50c:	dec00204 	addi	sp,sp,8
    c510:	f800283a 	ret

0000c514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c514:	defffd04 	addi	sp,sp,-12
    c518:	dfc00215 	stw	ra,8(sp)
    c51c:	df000115 	stw	fp,4(sp)
    c520:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c524:	00800074 	movhi	r2,1
    c528:	1092f904 	addi	r2,r2,19428
    c52c:	10800017 	ldw	r2,0(r2)
    c530:	1005003a 	cmpeq	r2,r2,zero
    c534:	1000061e 	bne	r2,zero,c550 <alt_get_errno+0x3c>
    c538:	00800074 	movhi	r2,1
    c53c:	1092f904 	addi	r2,r2,19428
    c540:	10800017 	ldw	r2,0(r2)
    c544:	103ee83a 	callr	r2
    c548:	e0bfff15 	stw	r2,-4(fp)
    c54c:	00000306 	br	c55c <alt_get_errno+0x48>
    c550:	00800074 	movhi	r2,1
    c554:	109ad004 	addi	r2,r2,27456
    c558:	e0bfff15 	stw	r2,-4(fp)
    c55c:	e0bfff17 	ldw	r2,-4(fp)
}
    c560:	e037883a 	mov	sp,fp
    c564:	dfc00117 	ldw	ra,4(sp)
    c568:	df000017 	ldw	fp,0(sp)
    c56c:	dec00204 	addi	sp,sp,8
    c570:	f800283a 	ret

0000c574 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c574:	defffd04 	addi	sp,sp,-12
    c578:	dfc00215 	stw	ra,8(sp)
    c57c:	df000115 	stw	fp,4(sp)
    c580:	df000104 	addi	fp,sp,4
    c584:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    c588:	00117840 	call	11784 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c58c:	00800044 	movi	r2,1
    c590:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c594:	e037883a 	mov	sp,fp
    c598:	dfc00117 	ldw	ra,4(sp)
    c59c:	df000017 	ldw	fp,0(sp)
    c5a0:	dec00204 	addi	sp,sp,8
    c5a4:	f800283a 	ret

0000c5a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c5a8:	defffd04 	addi	sp,sp,-12
    c5ac:	dfc00215 	stw	ra,8(sp)
    c5b0:	df000115 	stw	fp,4(sp)
    c5b4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    c5b8:	00c00074 	movhi	r3,1
    c5bc:	18dad504 	addi	r3,r3,27476
    c5c0:	00840034 	movhi	r2,4096
    c5c4:	10880004 	addi	r2,r2,8192
    c5c8:	18800015 	stw	r2,0(r3)
    c5cc:	00c00074 	movhi	r3,1
    c5d0:	18dad604 	addi	r3,r3,27480
    c5d4:	0080bef4 	movhi	r2,763
    c5d8:	10bc2004 	addi	r2,r2,-3968
    c5dc:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    c5e0:	01000074 	movhi	r4,1
    c5e4:	210df304 	addi	r4,r4,14284
    c5e8:	000b883a 	mov	r5,zero
    c5ec:	01800204 	movi	r6,8
    c5f0:	000cb380 	call	cb38 <altera_avalon_jtag_uart_init>
    c5f4:	01000074 	movhi	r4,1
    c5f8:	210de904 	addi	r4,r4,14244
    c5fc:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    c600:	01000074 	movhi	r4,1
    c604:	21120104 	addi	r4,r4,18436
    c608:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    c60c:	01000074 	movhi	r4,1
    c610:	21120d04 	addi	r4,r4,18484
    c614:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    c618:	01000074 	movhi	r4,1
    c61c:	21121904 	addi	r4,r4,18532
    c620:	000debc0 	call	debc <alt_up_character_lcd_init>
    c624:	01000074 	movhi	r4,1
    c628:	21121904 	addi	r4,r4,18532
    c62c:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    c630:	01000074 	movhi	r4,1
    c634:	21122404 	addi	r4,r4,18576
    c638:	000e33c0 	call	e33c <alt_up_ethernet_init>
    c63c:	01000074 	movhi	r4,1
    c640:	21122404 	addi	r4,r4,18576
    c644:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    c648:	01000074 	movhi	r4,1
    c64c:	21123304 	addi	r4,r4,18636
    c650:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    c654:	01000074 	movhi	r4,1
    c658:	21123e04 	addi	r4,r4,18680
    c65c:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    c660:	01000074 	movhi	r4,1
    c664:	21124904 	addi	r4,r4,18724
    c668:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    c66c:	01000074 	movhi	r4,1
    c670:	21125404 	addi	r4,r4,18768
    c674:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    c678:	01000074 	movhi	r4,1
    c67c:	21125f04 	addi	r4,r4,18812
    c680:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    c684:	01000074 	movhi	r4,1
    c688:	21126a04 	addi	r4,r4,18856
    c68c:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    c690:	01000074 	movhi	r4,1
    c694:	21127504 	addi	r4,r4,18900
    c698:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    c69c:	01000074 	movhi	r4,1
    c6a0:	21128004 	addi	r4,r4,18944
    c6a4:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    c6a8:	01000074 	movhi	r4,1
    c6ac:	21128b04 	addi	r4,r4,18988
    c6b0:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    c6b4:	01000074 	movhi	r4,1
    c6b8:	21129604 	addi	r4,r4,19032
    c6bc:	000ebc40 	call	ebc4 <alt_up_ps2_init>
    c6c0:	01000074 	movhi	r4,1
    c6c4:	21129604 	addi	r4,r4,19032
    c6c8:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    c6cc:	01000074 	movhi	r4,1
    c6d0:	2112a404 	addi	r4,r4,19088
    c6d4:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    c6d8:	01000074 	movhi	r4,1
    c6dc:	2112af04 	addi	r4,r4,19132
    c6e0:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    c6e4:	00800074 	movhi	r2,1
    c6e8:	1092bc04 	addi	r2,r2,19184
    c6ec:	10800a17 	ldw	r2,40(r2)
    c6f0:	10800104 	addi	r2,r2,4
    c6f4:	10800017 	ldw	r2,0(r2)
    c6f8:	10ffffcc 	andi	r3,r2,65535
    c6fc:	00800074 	movhi	r2,1
    c700:	1092bc04 	addi	r2,r2,19184
    c704:	10c00c15 	stw	r3,48(r2)
    c708:	00800074 	movhi	r2,1
    c70c:	1092bc04 	addi	r2,r2,19184
    c710:	10800a17 	ldw	r2,40(r2)
    c714:	10800104 	addi	r2,r2,4
    c718:	10800017 	ldw	r2,0(r2)
    c71c:	1005d43a 	srai	r2,r2,16
    c720:	10ffffcc 	andi	r3,r2,65535
    c724:	00800074 	movhi	r2,1
    c728:	1092bc04 	addi	r2,r2,19184
    c72c:	10c00d15 	stw	r3,52(r2)
    c730:	00800074 	movhi	r2,1
    c734:	1092bc04 	addi	r2,r2,19184
    c738:	10800c17 	ldw	r2,48(r2)
    c73c:	10801068 	cmpgeui	r2,r2,65
    c740:	1000081e 	bne	r2,zero,c764 <alt_sys_init+0x1bc>
    c744:	00c00074 	movhi	r3,1
    c748:	18d2bc04 	addi	r3,r3,19184
    c74c:	00800fc4 	movi	r2,63
    c750:	18800f15 	stw	r2,60(r3)
    c754:	00c00074 	movhi	r3,1
    c758:	18d2bc04 	addi	r3,r3,19184
    c75c:	00800184 	movi	r2,6
    c760:	18801015 	stw	r2,64(r3)
    c764:	00800074 	movhi	r2,1
    c768:	1092bc04 	addi	r2,r2,19184
    c76c:	10800d17 	ldw	r2,52(r2)
    c770:	10800868 	cmpgeui	r2,r2,33
    c774:	1000041e 	bne	r2,zero,c788 <alt_sys_init+0x1e0>
    c778:	00c00074 	movhi	r3,1
    c77c:	18d2bc04 	addi	r3,r3,19184
    c780:	008007c4 	movi	r2,31
    c784:	18801115 	stw	r2,68(r3)
    c788:	01000074 	movhi	r4,1
    c78c:	2112bc04 	addi	r4,r4,19184
    c790:	000f5300 	call	f530 <alt_up_char_buffer_init>
    c794:	01000074 	movhi	r4,1
    c798:	2112bc04 	addi	r4,r4,19184
    c79c:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    c7a0:	00800074 	movhi	r2,1
    c7a4:	1092ce04 	addi	r2,r2,19256
    c7a8:	10800a17 	ldw	r2,40(r2)
    c7ac:	10800017 	ldw	r2,0(r2)
    c7b0:	1007883a 	mov	r3,r2
    c7b4:	00800074 	movhi	r2,1
    c7b8:	1092ce04 	addi	r2,r2,19256
    c7bc:	10c00b15 	stw	r3,44(r2)
    c7c0:	00800074 	movhi	r2,1
    c7c4:	1092ce04 	addi	r2,r2,19256
    c7c8:	10800a17 	ldw	r2,40(r2)
    c7cc:	10800104 	addi	r2,r2,4
    c7d0:	10800017 	ldw	r2,0(r2)
    c7d4:	1007883a 	mov	r3,r2
    c7d8:	00800074 	movhi	r2,1
    c7dc:	1092ce04 	addi	r2,r2,19256
    c7e0:	10c00c15 	stw	r3,48(r2)
    c7e4:	00800074 	movhi	r2,1
    c7e8:	1092ce04 	addi	r2,r2,19256
    c7ec:	10800a17 	ldw	r2,40(r2)
    c7f0:	10800204 	addi	r2,r2,8
    c7f4:	10800017 	ldw	r2,0(r2)
    c7f8:	10ffffcc 	andi	r3,r2,65535
    c7fc:	00800074 	movhi	r2,1
    c800:	1092ce04 	addi	r2,r2,19256
    c804:	10c00f15 	stw	r3,60(r2)
    c808:	00800074 	movhi	r2,1
    c80c:	1092ce04 	addi	r2,r2,19256
    c810:	10800a17 	ldw	r2,40(r2)
    c814:	10800204 	addi	r2,r2,8
    c818:	10800017 	ldw	r2,0(r2)
    c81c:	1005d43a 	srai	r2,r2,16
    c820:	10ffffcc 	andi	r3,r2,65535
    c824:	00800074 	movhi	r2,1
    c828:	1092ce04 	addi	r2,r2,19256
    c82c:	10c01015 	stw	r3,64(r2)
    c830:	00800074 	movhi	r2,1
    c834:	1092ce04 	addi	r2,r2,19256
    c838:	10800a17 	ldw	r2,40(r2)
    c83c:	10800304 	addi	r2,r2,12
    c840:	10800017 	ldw	r2,0(r2)
    c844:	1005d07a 	srai	r2,r2,1
    c848:	10c0004c 	andi	r3,r2,1
    c84c:	00800074 	movhi	r2,1
    c850:	1092ce04 	addi	r2,r2,19256
    c854:	10c00d15 	stw	r3,52(r2)
    c858:	00800074 	movhi	r2,1
    c85c:	1092ce04 	addi	r2,r2,19256
    c860:	10800a17 	ldw	r2,40(r2)
    c864:	10800304 	addi	r2,r2,12
    c868:	10800017 	ldw	r2,0(r2)
    c86c:	1005d13a 	srai	r2,r2,4
    c870:	10c003cc 	andi	r3,r2,15
    c874:	00800074 	movhi	r2,1
    c878:	1092ce04 	addi	r2,r2,19256
    c87c:	10c00e15 	stw	r3,56(r2)
    c880:	00800074 	movhi	r2,1
    c884:	1092ce04 	addi	r2,r2,19256
    c888:	10800a17 	ldw	r2,40(r2)
    c88c:	10800304 	addi	r2,r2,12
    c890:	10800017 	ldw	r2,0(r2)
    c894:	1005d43a 	srai	r2,r2,16
    c898:	1007883a 	mov	r3,r2
    c89c:	00bfffc4 	movi	r2,-1
    c8a0:	1884703a 	and	r2,r3,r2
    c8a4:	e0bfff45 	stb	r2,-3(fp)
    c8a8:	00800074 	movhi	r2,1
    c8ac:	1092ce04 	addi	r2,r2,19256
    c8b0:	10800a17 	ldw	r2,40(r2)
    c8b4:	10800304 	addi	r2,r2,12
    c8b8:	10800017 	ldw	r2,0(r2)
    c8bc:	1005d63a 	srai	r2,r2,24
    c8c0:	1007883a 	mov	r3,r2
    c8c4:	00bfffc4 	movi	r2,-1
    c8c8:	1884703a 	and	r2,r3,r2
    c8cc:	e0bfff05 	stb	r2,-4(fp)
    c8d0:	00800074 	movhi	r2,1
    c8d4:	1092ce04 	addi	r2,r2,19256
    c8d8:	10800e17 	ldw	r2,56(r2)
    c8dc:	10800058 	cmpnei	r2,r2,1
    c8e0:	1000041e 	bne	r2,zero,c8f4 <alt_sys_init+0x34c>
    c8e4:	00800074 	movhi	r2,1
    c8e8:	1092ce04 	addi	r2,r2,19256
    c8ec:	10001115 	stw	zero,68(r2)
    c8f0:	00000e06 	br	c92c <alt_sys_init+0x384>
    c8f4:	00800074 	movhi	r2,1
    c8f8:	1092ce04 	addi	r2,r2,19256
    c8fc:	10800e17 	ldw	r2,56(r2)
    c900:	10800098 	cmpnei	r2,r2,2
    c904:	1000051e 	bne	r2,zero,c91c <alt_sys_init+0x374>
    c908:	00c00074 	movhi	r3,1
    c90c:	18d2ce04 	addi	r3,r3,19256
    c910:	00800044 	movi	r2,1
    c914:	18801115 	stw	r2,68(r3)
    c918:	00000406 	br	c92c <alt_sys_init+0x384>
    c91c:	00c00074 	movhi	r3,1
    c920:	18d2ce04 	addi	r3,r3,19256
    c924:	00800084 	movi	r2,2
    c928:	18801115 	stw	r2,68(r3)
    c92c:	e0ffff43 	ldbu	r3,-3(fp)
    c930:	00800804 	movi	r2,32
    c934:	10c7c83a 	sub	r3,r2,r3
    c938:	00bfffc4 	movi	r2,-1
    c93c:	10c6d83a 	srl	r3,r2,r3
    c940:	00800074 	movhi	r2,1
    c944:	1092ce04 	addi	r2,r2,19256
    c948:	10c01215 	stw	r3,72(r2)
    c94c:	e0ffff43 	ldbu	r3,-3(fp)
    c950:	00800074 	movhi	r2,1
    c954:	1092ce04 	addi	r2,r2,19256
    c958:	10801117 	ldw	r2,68(r2)
    c95c:	1887883a 	add	r3,r3,r2
    c960:	00800074 	movhi	r2,1
    c964:	1092ce04 	addi	r2,r2,19256
    c968:	10c01315 	stw	r3,76(r2)
    c96c:	e0ffff03 	ldbu	r3,-4(fp)
    c970:	00800804 	movi	r2,32
    c974:	10c7c83a 	sub	r3,r2,r3
    c978:	00bfffc4 	movi	r2,-1
    c97c:	10c6d83a 	srl	r3,r2,r3
    c980:	00800074 	movhi	r2,1
    c984:	1092ce04 	addi	r2,r2,19256
    c988:	10c01415 	stw	r3,80(r2)
    c98c:	01000074 	movhi	r4,1
    c990:	2112ce04 	addi	r4,r4,19256
    c994:	000c9b80 	call	c9b8 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    c998:	01000074 	movhi	r4,1
    c99c:	2112e304 	addi	r4,r4,19340
    c9a0:	000c9b80 	call	c9b8 <alt_dev_reg>
}
    c9a4:	e037883a 	mov	sp,fp
    c9a8:	dfc00117 	ldw	ra,4(sp)
    c9ac:	df000017 	ldw	fp,0(sp)
    c9b0:	dec00204 	addi	sp,sp,8
    c9b4:	f800283a 	ret

0000c9b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c9b8:	defffd04 	addi	sp,sp,-12
    c9bc:	dfc00215 	stw	ra,8(sp)
    c9c0:	df000115 	stw	fp,4(sp)
    c9c4:	df000104 	addi	fp,sp,4
    c9c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c9cc:	e13fff17 	ldw	r4,-4(fp)
    c9d0:	01400074 	movhi	r5,1
    c9d4:	2952f604 	addi	r5,r5,19416
    c9d8:	0010f100 	call	10f10 <alt_dev_llist_insert>
}
    c9dc:	e037883a 	mov	sp,fp
    c9e0:	dfc00117 	ldw	ra,4(sp)
    c9e4:	df000017 	ldw	fp,0(sp)
    c9e8:	dec00204 	addi	sp,sp,8
    c9ec:	f800283a 	ret

0000c9f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c9f0:	defffa04 	addi	sp,sp,-24
    c9f4:	dfc00515 	stw	ra,20(sp)
    c9f8:	df000415 	stw	fp,16(sp)
    c9fc:	df000404 	addi	fp,sp,16
    ca00:	e13ffd15 	stw	r4,-12(fp)
    ca04:	e17ffe15 	stw	r5,-8(fp)
    ca08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ca0c:	e0bffd17 	ldw	r2,-12(fp)
    ca10:	10800017 	ldw	r2,0(r2)
    ca14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ca18:	e0bffc17 	ldw	r2,-16(fp)
    ca1c:	11000a04 	addi	r4,r2,40
    ca20:	e0bffd17 	ldw	r2,-12(fp)
    ca24:	11c00217 	ldw	r7,8(r2)
    ca28:	e17ffe17 	ldw	r5,-8(fp)
    ca2c:	e1bfff17 	ldw	r6,-4(fp)
    ca30:	000d0340 	call	d034 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ca34:	e037883a 	mov	sp,fp
    ca38:	dfc00117 	ldw	ra,4(sp)
    ca3c:	df000017 	ldw	fp,0(sp)
    ca40:	dec00204 	addi	sp,sp,8
    ca44:	f800283a 	ret

0000ca48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ca48:	defffa04 	addi	sp,sp,-24
    ca4c:	dfc00515 	stw	ra,20(sp)
    ca50:	df000415 	stw	fp,16(sp)
    ca54:	df000404 	addi	fp,sp,16
    ca58:	e13ffd15 	stw	r4,-12(fp)
    ca5c:	e17ffe15 	stw	r5,-8(fp)
    ca60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ca64:	e0bffd17 	ldw	r2,-12(fp)
    ca68:	10800017 	ldw	r2,0(r2)
    ca6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ca70:	e0bffc17 	ldw	r2,-16(fp)
    ca74:	11000a04 	addi	r4,r2,40
    ca78:	e0bffd17 	ldw	r2,-12(fp)
    ca7c:	11c00217 	ldw	r7,8(r2)
    ca80:	e17ffe17 	ldw	r5,-8(fp)
    ca84:	e1bfff17 	ldw	r6,-4(fp)
    ca88:	000d2580 	call	d258 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ca8c:	e037883a 	mov	sp,fp
    ca90:	dfc00117 	ldw	ra,4(sp)
    ca94:	df000017 	ldw	fp,0(sp)
    ca98:	dec00204 	addi	sp,sp,8
    ca9c:	f800283a 	ret

0000caa0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    caa0:	defffc04 	addi	sp,sp,-16
    caa4:	dfc00315 	stw	ra,12(sp)
    caa8:	df000215 	stw	fp,8(sp)
    caac:	df000204 	addi	fp,sp,8
    cab0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    cab4:	e0bfff17 	ldw	r2,-4(fp)
    cab8:	10800017 	ldw	r2,0(r2)
    cabc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    cac0:	e0bffe17 	ldw	r2,-8(fp)
    cac4:	11000a04 	addi	r4,r2,40
    cac8:	e0bfff17 	ldw	r2,-4(fp)
    cacc:	11400217 	ldw	r5,8(r2)
    cad0:	000cecc0 	call	cecc <altera_avalon_jtag_uart_close>
}
    cad4:	e037883a 	mov	sp,fp
    cad8:	dfc00117 	ldw	ra,4(sp)
    cadc:	df000017 	ldw	fp,0(sp)
    cae0:	dec00204 	addi	sp,sp,8
    cae4:	f800283a 	ret

0000cae8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    cae8:	defffa04 	addi	sp,sp,-24
    caec:	dfc00515 	stw	ra,20(sp)
    caf0:	df000415 	stw	fp,16(sp)
    caf4:	df000404 	addi	fp,sp,16
    caf8:	e13ffd15 	stw	r4,-12(fp)
    cafc:	e17ffe15 	stw	r5,-8(fp)
    cb00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    cb04:	e0bffd17 	ldw	r2,-12(fp)
    cb08:	10800017 	ldw	r2,0(r2)
    cb0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    cb10:	e0bffc17 	ldw	r2,-16(fp)
    cb14:	11000a04 	addi	r4,r2,40
    cb18:	e17ffe17 	ldw	r5,-8(fp)
    cb1c:	e1bfff17 	ldw	r6,-4(fp)
    cb20:	000cf400 	call	cf40 <altera_avalon_jtag_uart_ioctl>
}
    cb24:	e037883a 	mov	sp,fp
    cb28:	dfc00117 	ldw	ra,4(sp)
    cb2c:	df000017 	ldw	fp,0(sp)
    cb30:	dec00204 	addi	sp,sp,8
    cb34:	f800283a 	ret

0000cb38 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    cb38:	defffb04 	addi	sp,sp,-20
    cb3c:	dfc00415 	stw	ra,16(sp)
    cb40:	df000315 	stw	fp,12(sp)
    cb44:	df000304 	addi	fp,sp,12
    cb48:	e13ffd15 	stw	r4,-12(fp)
    cb4c:	e17ffe15 	stw	r5,-8(fp)
    cb50:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cb54:	e0fffd17 	ldw	r3,-12(fp)
    cb58:	00800044 	movi	r2,1
    cb5c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    cb60:	e0bffd17 	ldw	r2,-12(fp)
    cb64:	10800017 	ldw	r2,0(r2)
    cb68:	11000104 	addi	r4,r2,4
    cb6c:	e0bffd17 	ldw	r2,-12(fp)
    cb70:	10800817 	ldw	r2,32(r2)
    cb74:	1007883a 	mov	r3,r2
    cb78:	2005883a 	mov	r2,r4
    cb7c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    cb80:	e13fff17 	ldw	r4,-4(fp)
    cb84:	e17ffd17 	ldw	r5,-12(fp)
    cb88:	01800074 	movhi	r6,1
    cb8c:	31b2fc04 	addi	r6,r6,-13328
    cb90:	000b8f80 	call	b8f8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    cb94:	e0bffd17 	ldw	r2,-12(fp)
    cb98:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    cb9c:	e0bffd17 	ldw	r2,-12(fp)
    cba0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    cba4:	00800074 	movhi	r2,1
    cba8:	109ad704 	addi	r2,r2,27484
    cbac:	10800017 	ldw	r2,0(r2)
    cbb0:	100b883a 	mov	r5,r2
    cbb4:	01800074 	movhi	r6,1
    cbb8:	31b38704 	addi	r6,r6,-12772
    cbbc:	e1fffd17 	ldw	r7,-12(fp)
    cbc0:	0010da00 	call	10da0 <alt_alarm_start>
    cbc4:	1004403a 	cmpge	r2,r2,zero
    cbc8:	1000041e 	bne	r2,zero,cbdc <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    cbcc:	e0fffd17 	ldw	r3,-12(fp)
    cbd0:	00a00034 	movhi	r2,32768
    cbd4:	10bfffc4 	addi	r2,r2,-1
    cbd8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    cbdc:	e037883a 	mov	sp,fp
    cbe0:	dfc00117 	ldw	ra,4(sp)
    cbe4:	df000017 	ldw	fp,0(sp)
    cbe8:	dec00204 	addi	sp,sp,8
    cbec:	f800283a 	ret

0000cbf0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    cbf0:	defff704 	addi	sp,sp,-36
    cbf4:	df000815 	stw	fp,32(sp)
    cbf8:	df000804 	addi	fp,sp,32
    cbfc:	e13ffe15 	stw	r4,-8(fp)
    cc00:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    cc04:	e0bffe17 	ldw	r2,-8(fp)
    cc08:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    cc0c:	e0bffd17 	ldw	r2,-12(fp)
    cc10:	10800017 	ldw	r2,0(r2)
    cc14:	e0bffc15 	stw	r2,-16(fp)
    cc18:	00000006 	br	cc1c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    cc1c:	e0bffc17 	ldw	r2,-16(fp)
    cc20:	10800104 	addi	r2,r2,4
    cc24:	10800037 	ldwio	r2,0(r2)
    cc28:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    cc2c:	e0bffb17 	ldw	r2,-20(fp)
    cc30:	1080c00c 	andi	r2,r2,768
    cc34:	1005003a 	cmpeq	r2,r2,zero
    cc38:	1000741e 	bne	r2,zero,ce0c <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    cc3c:	e0bffb17 	ldw	r2,-20(fp)
    cc40:	1080400c 	andi	r2,r2,256
    cc44:	1005003a 	cmpeq	r2,r2,zero
    cc48:	1000351e 	bne	r2,zero,cd20 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    cc4c:	00800074 	movhi	r2,1
    cc50:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cc54:	e0bffd17 	ldw	r2,-12(fp)
    cc58:	10800a17 	ldw	r2,40(r2)
    cc5c:	10800044 	addi	r2,r2,1
    cc60:	1081ffcc 	andi	r2,r2,2047
    cc64:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    cc68:	e0bffd17 	ldw	r2,-12(fp)
    cc6c:	10c00b17 	ldw	r3,44(r2)
    cc70:	e0bff917 	ldw	r2,-28(fp)
    cc74:	18801626 	beq	r3,r2,ccd0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    cc78:	e0bffc17 	ldw	r2,-16(fp)
    cc7c:	10800037 	ldwio	r2,0(r2)
    cc80:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    cc84:	e0bffa17 	ldw	r2,-24(fp)
    cc88:	10a0000c 	andi	r2,r2,32768
    cc8c:	1005003a 	cmpeq	r2,r2,zero
    cc90:	10000f1e 	bne	r2,zero,ccd0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    cc94:	e0bffd17 	ldw	r2,-12(fp)
    cc98:	10c00a17 	ldw	r3,40(r2)
    cc9c:	e0bffa17 	ldw	r2,-24(fp)
    cca0:	1009883a 	mov	r4,r2
    cca4:	e0bffd17 	ldw	r2,-12(fp)
    cca8:	1885883a 	add	r2,r3,r2
    ccac:	10800e04 	addi	r2,r2,56
    ccb0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ccb4:	e0bffd17 	ldw	r2,-12(fp)
    ccb8:	10800a17 	ldw	r2,40(r2)
    ccbc:	10800044 	addi	r2,r2,1
    ccc0:	10c1ffcc 	andi	r3,r2,2047
    ccc4:	e0bffd17 	ldw	r2,-12(fp)
    ccc8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    cccc:	003fe106 	br	cc54 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ccd0:	e0bffa17 	ldw	r2,-24(fp)
    ccd4:	10bfffec 	andhi	r2,r2,65535
    ccd8:	1005003a 	cmpeq	r2,r2,zero
    ccdc:	1000101e 	bne	r2,zero,cd20 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cce0:	e0bffd17 	ldw	r2,-12(fp)
    cce4:	10c00817 	ldw	r3,32(r2)
    cce8:	00bfff84 	movi	r2,-2
    ccec:	1886703a 	and	r3,r3,r2
    ccf0:	e0bffd17 	ldw	r2,-12(fp)
    ccf4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ccf8:	e0bffc17 	ldw	r2,-16(fp)
    ccfc:	11000104 	addi	r4,r2,4
    cd00:	e0bffd17 	ldw	r2,-12(fp)
    cd04:	10800817 	ldw	r2,32(r2)
    cd08:	1007883a 	mov	r3,r2
    cd0c:	2005883a 	mov	r2,r4
    cd10:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    cd14:	e0bffc17 	ldw	r2,-16(fp)
    cd18:	10800104 	addi	r2,r2,4
    cd1c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    cd20:	e0bffb17 	ldw	r2,-20(fp)
    cd24:	1080800c 	andi	r2,r2,512
    cd28:	1005003a 	cmpeq	r2,r2,zero
    cd2c:	103fbb1e 	bne	r2,zero,cc1c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    cd30:	e0bffb17 	ldw	r2,-20(fp)
    cd34:	10bfffec 	andhi	r2,r2,65535
    cd38:	1004d43a 	srli	r2,r2,16
    cd3c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    cd40:	00001506 	br	cd98 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    cd44:	e13ffc17 	ldw	r4,-16(fp)
    cd48:	e0bffd17 	ldw	r2,-12(fp)
    cd4c:	10c00d17 	ldw	r3,52(r2)
    cd50:	e0bffd17 	ldw	r2,-12(fp)
    cd54:	1885883a 	add	r2,r3,r2
    cd58:	10820e04 	addi	r2,r2,2104
    cd5c:	10800003 	ldbu	r2,0(r2)
    cd60:	10c03fcc 	andi	r3,r2,255
    cd64:	18c0201c 	xori	r3,r3,128
    cd68:	18ffe004 	addi	r3,r3,-128
    cd6c:	2005883a 	mov	r2,r4
    cd70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cd74:	e0bffd17 	ldw	r2,-12(fp)
    cd78:	10800d17 	ldw	r2,52(r2)
    cd7c:	10800044 	addi	r2,r2,1
    cd80:	10c1ffcc 	andi	r3,r2,2047
    cd84:	e0bffd17 	ldw	r2,-12(fp)
    cd88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    cd8c:	e0bff817 	ldw	r2,-32(fp)
    cd90:	10bfffc4 	addi	r2,r2,-1
    cd94:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    cd98:	e0bff817 	ldw	r2,-32(fp)
    cd9c:	1005003a 	cmpeq	r2,r2,zero
    cda0:	1000051e 	bne	r2,zero,cdb8 <altera_avalon_jtag_uart_irq+0x1c8>
    cda4:	e0bffd17 	ldw	r2,-12(fp)
    cda8:	10c00d17 	ldw	r3,52(r2)
    cdac:	e0bffd17 	ldw	r2,-12(fp)
    cdb0:	10800c17 	ldw	r2,48(r2)
    cdb4:	18bfe31e 	bne	r3,r2,cd44 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    cdb8:	e0bff817 	ldw	r2,-32(fp)
    cdbc:	1005003a 	cmpeq	r2,r2,zero
    cdc0:	103f961e 	bne	r2,zero,cc1c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cdc4:	e0bffd17 	ldw	r2,-12(fp)
    cdc8:	10c00817 	ldw	r3,32(r2)
    cdcc:	00bfff44 	movi	r2,-3
    cdd0:	1886703a 	and	r3,r3,r2
    cdd4:	e0bffd17 	ldw	r2,-12(fp)
    cdd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cddc:	e0bffd17 	ldw	r2,-12(fp)
    cde0:	10800017 	ldw	r2,0(r2)
    cde4:	11000104 	addi	r4,r2,4
    cde8:	e0bffd17 	ldw	r2,-12(fp)
    cdec:	10800817 	ldw	r2,32(r2)
    cdf0:	1007883a 	mov	r3,r2
    cdf4:	2005883a 	mov	r2,r4
    cdf8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    cdfc:	e0bffc17 	ldw	r2,-16(fp)
    ce00:	10800104 	addi	r2,r2,4
    ce04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    ce08:	003f8406 	br	cc1c <altera_avalon_jtag_uart_irq+0x2c>
}
    ce0c:	e037883a 	mov	sp,fp
    ce10:	df000017 	ldw	fp,0(sp)
    ce14:	dec00104 	addi	sp,sp,4
    ce18:	f800283a 	ret

0000ce1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    ce1c:	defffc04 	addi	sp,sp,-16
    ce20:	df000315 	stw	fp,12(sp)
    ce24:	df000304 	addi	fp,sp,12
    ce28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ce2c:	e0bfff17 	ldw	r2,-4(fp)
    ce30:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ce34:	e0bffe17 	ldw	r2,-8(fp)
    ce38:	10800017 	ldw	r2,0(r2)
    ce3c:	10800104 	addi	r2,r2,4
    ce40:	10800037 	ldwio	r2,0(r2)
    ce44:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ce48:	e0bffd17 	ldw	r2,-12(fp)
    ce4c:	1081000c 	andi	r2,r2,1024
    ce50:	1005003a 	cmpeq	r2,r2,zero
    ce54:	10000c1e 	bne	r2,zero,ce88 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ce58:	e0bffe17 	ldw	r2,-8(fp)
    ce5c:	10800017 	ldw	r2,0(r2)
    ce60:	11000104 	addi	r4,r2,4
    ce64:	e0bffe17 	ldw	r2,-8(fp)
    ce68:	10800817 	ldw	r2,32(r2)
    ce6c:	10810014 	ori	r2,r2,1024
    ce70:	1007883a 	mov	r3,r2
    ce74:	2005883a 	mov	r2,r4
    ce78:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ce7c:	e0bffe17 	ldw	r2,-8(fp)
    ce80:	10000915 	stw	zero,36(r2)
    ce84:	00000a06 	br	ceb0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ce88:	e0bffe17 	ldw	r2,-8(fp)
    ce8c:	10c00917 	ldw	r3,36(r2)
    ce90:	00a00034 	movhi	r2,32768
    ce94:	10bfff04 	addi	r2,r2,-4
    ce98:	10c00536 	bltu	r2,r3,ceb0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ce9c:	e0bffe17 	ldw	r2,-8(fp)
    cea0:	10800917 	ldw	r2,36(r2)
    cea4:	10c00044 	addi	r3,r2,1
    cea8:	e0bffe17 	ldw	r2,-8(fp)
    ceac:	10c00915 	stw	r3,36(r2)
    ceb0:	00800074 	movhi	r2,1
    ceb4:	109ad704 	addi	r2,r2,27484
    ceb8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    cebc:	e037883a 	mov	sp,fp
    cec0:	df000017 	ldw	fp,0(sp)
    cec4:	dec00104 	addi	sp,sp,4
    cec8:	f800283a 	ret

0000cecc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    cecc:	defffc04 	addi	sp,sp,-16
    ced0:	df000315 	stw	fp,12(sp)
    ced4:	df000304 	addi	fp,sp,12
    ced8:	e13ffd15 	stw	r4,-12(fp)
    cedc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    cee0:	00000706 	br	cf00 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    cee4:	e0bffe17 	ldw	r2,-8(fp)
    cee8:	1090000c 	andi	r2,r2,16384
    ceec:	1005003a 	cmpeq	r2,r2,zero
    cef0:	1000031e 	bne	r2,zero,cf00 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    cef4:	00bffd44 	movi	r2,-11
    cef8:	e0bfff15 	stw	r2,-4(fp)
    cefc:	00000b06 	br	cf2c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    cf00:	e0bffd17 	ldw	r2,-12(fp)
    cf04:	10c00d17 	ldw	r3,52(r2)
    cf08:	e0bffd17 	ldw	r2,-12(fp)
    cf0c:	10800c17 	ldw	r2,48(r2)
    cf10:	18800526 	beq	r3,r2,cf28 <altera_avalon_jtag_uart_close+0x5c>
    cf14:	e0bffd17 	ldw	r2,-12(fp)
    cf18:	10c00917 	ldw	r3,36(r2)
    cf1c:	e0bffd17 	ldw	r2,-12(fp)
    cf20:	10800117 	ldw	r2,4(r2)
    cf24:	18bfef36 	bltu	r3,r2,cee4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    cf28:	e03fff15 	stw	zero,-4(fp)
    cf2c:	e0bfff17 	ldw	r2,-4(fp)
}
    cf30:	e037883a 	mov	sp,fp
    cf34:	df000017 	ldw	fp,0(sp)
    cf38:	dec00104 	addi	sp,sp,4
    cf3c:	f800283a 	ret

0000cf40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    cf40:	defff804 	addi	sp,sp,-32
    cf44:	df000715 	stw	fp,28(sp)
    cf48:	df000704 	addi	fp,sp,28
    cf4c:	e13ffb15 	stw	r4,-20(fp)
    cf50:	e17ffc15 	stw	r5,-16(fp)
    cf54:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    cf58:	00bff9c4 	movi	r2,-25
    cf5c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    cf60:	e0bffc17 	ldw	r2,-16(fp)
    cf64:	e0bfff15 	stw	r2,-4(fp)
    cf68:	e0ffff17 	ldw	r3,-4(fp)
    cf6c:	189a8060 	cmpeqi	r2,r3,27137
    cf70:	1000041e 	bne	r2,zero,cf84 <altera_avalon_jtag_uart_ioctl+0x44>
    cf74:	e0ffff17 	ldw	r3,-4(fp)
    cf78:	189a80a0 	cmpeqi	r2,r3,27138
    cf7c:	10001b1e 	bne	r2,zero,cfec <altera_avalon_jtag_uart_ioctl+0xac>
    cf80:	00002706 	br	d020 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    cf84:	e0bffb17 	ldw	r2,-20(fp)
    cf88:	10c00117 	ldw	r3,4(r2)
    cf8c:	00a00034 	movhi	r2,32768
    cf90:	10bfffc4 	addi	r2,r2,-1
    cf94:	18802226 	beq	r3,r2,d020 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    cf98:	e0bffd17 	ldw	r2,-12(fp)
    cf9c:	10800017 	ldw	r2,0(r2)
    cfa0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    cfa4:	e0bff917 	ldw	r2,-28(fp)
    cfa8:	10800090 	cmplti	r2,r2,2
    cfac:	1000071e 	bne	r2,zero,cfcc <altera_avalon_jtag_uart_ioctl+0x8c>
    cfb0:	e0fff917 	ldw	r3,-28(fp)
    cfb4:	00a00034 	movhi	r2,32768
    cfb8:	10bfffc4 	addi	r2,r2,-1
    cfbc:	18800326 	beq	r3,r2,cfcc <altera_avalon_jtag_uart_ioctl+0x8c>
    cfc0:	e0bff917 	ldw	r2,-28(fp)
    cfc4:	e0bffe15 	stw	r2,-8(fp)
    cfc8:	00000306 	br	cfd8 <altera_avalon_jtag_uart_ioctl+0x98>
    cfcc:	00e00034 	movhi	r3,32768
    cfd0:	18ffff84 	addi	r3,r3,-2
    cfd4:	e0fffe15 	stw	r3,-8(fp)
    cfd8:	e0bffb17 	ldw	r2,-20(fp)
    cfdc:	e0fffe17 	ldw	r3,-8(fp)
    cfe0:	10c00115 	stw	r3,4(r2)
      rc = 0;
    cfe4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    cfe8:	00000d06 	br	d020 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    cfec:	e0bffb17 	ldw	r2,-20(fp)
    cff0:	10c00117 	ldw	r3,4(r2)
    cff4:	00a00034 	movhi	r2,32768
    cff8:	10bfffc4 	addi	r2,r2,-1
    cffc:	18800826 	beq	r3,r2,d020 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    d000:	e13ffd17 	ldw	r4,-12(fp)
    d004:	e0bffb17 	ldw	r2,-20(fp)
    d008:	10c00917 	ldw	r3,36(r2)
    d00c:	e0bffb17 	ldw	r2,-20(fp)
    d010:	10800117 	ldw	r2,4(r2)
    d014:	1885803a 	cmpltu	r2,r3,r2
    d018:	20800015 	stw	r2,0(r4)
      rc = 0;
    d01c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    d020:	e0bffa17 	ldw	r2,-24(fp)
}
    d024:	e037883a 	mov	sp,fp
    d028:	df000017 	ldw	fp,0(sp)
    d02c:	dec00104 	addi	sp,sp,4
    d030:	f800283a 	ret

0000d034 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    d034:	defff204 	addi	sp,sp,-56
    d038:	dfc00d15 	stw	ra,52(sp)
    d03c:	df000c15 	stw	fp,48(sp)
    d040:	df000c04 	addi	fp,sp,48
    d044:	e13ffb15 	stw	r4,-20(fp)
    d048:	e17ffc15 	stw	r5,-16(fp)
    d04c:	e1bffd15 	stw	r6,-12(fp)
    d050:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    d054:	e0bffc17 	ldw	r2,-16(fp)
    d058:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d05c:	00004806 	br	d180 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    d060:	e0bffb17 	ldw	r2,-20(fp)
    d064:	10800a17 	ldw	r2,40(r2)
    d068:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    d06c:	e0bffb17 	ldw	r2,-20(fp)
    d070:	10800b17 	ldw	r2,44(r2)
    d074:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    d078:	e0fff717 	ldw	r3,-36(fp)
    d07c:	e0bff617 	ldw	r2,-40(fp)
    d080:	18800536 	bltu	r3,r2,d098 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    d084:	e0bff717 	ldw	r2,-36(fp)
    d088:	e0fff617 	ldw	r3,-40(fp)
    d08c:	10c5c83a 	sub	r2,r2,r3
    d090:	e0bff815 	stw	r2,-32(fp)
    d094:	00000406 	br	d0a8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    d098:	00820004 	movi	r2,2048
    d09c:	e0fff617 	ldw	r3,-40(fp)
    d0a0:	10c5c83a 	sub	r2,r2,r3
    d0a4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    d0a8:	e0bff817 	ldw	r2,-32(fp)
    d0ac:	1005003a 	cmpeq	r2,r2,zero
    d0b0:	10001f1e 	bne	r2,zero,d130 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    d0b4:	e0fffd17 	ldw	r3,-12(fp)
    d0b8:	e0bff817 	ldw	r2,-32(fp)
    d0bc:	1880022e 	bgeu	r3,r2,d0c8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    d0c0:	e0bffd17 	ldw	r2,-12(fp)
    d0c4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    d0c8:	e0bffb17 	ldw	r2,-20(fp)
    d0cc:	10c00e04 	addi	r3,r2,56
    d0d0:	e0bff617 	ldw	r2,-40(fp)
    d0d4:	1887883a 	add	r3,r3,r2
    d0d8:	e0bffa17 	ldw	r2,-24(fp)
    d0dc:	1009883a 	mov	r4,r2
    d0e0:	180b883a 	mov	r5,r3
    d0e4:	e1bff817 	ldw	r6,-32(fp)
    d0e8:	0002d240 	call	2d24 <memcpy>
      ptr   += n;
    d0ec:	e0fff817 	ldw	r3,-32(fp)
    d0f0:	e0bffa17 	ldw	r2,-24(fp)
    d0f4:	10c5883a 	add	r2,r2,r3
    d0f8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    d0fc:	e0fffd17 	ldw	r3,-12(fp)
    d100:	e0bff817 	ldw	r2,-32(fp)
    d104:	1885c83a 	sub	r2,r3,r2
    d108:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d10c:	e0fff617 	ldw	r3,-40(fp)
    d110:	e0bff817 	ldw	r2,-32(fp)
    d114:	1885883a 	add	r2,r3,r2
    d118:	10c1ffcc 	andi	r3,r2,2047
    d11c:	e0bffb17 	ldw	r2,-20(fp)
    d120:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    d124:	e0bffd17 	ldw	r2,-12(fp)
    d128:	10800048 	cmpgei	r2,r2,1
    d12c:	103fcc1e 	bne	r2,zero,d060 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    d130:	e0fffa17 	ldw	r3,-24(fp)
    d134:	e0bffc17 	ldw	r2,-16(fp)
    d138:	1880141e 	bne	r3,r2,d18c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    d13c:	e0bffe17 	ldw	r2,-8(fp)
    d140:	1090000c 	andi	r2,r2,16384
    d144:	1004c03a 	cmpne	r2,r2,zero
    d148:	1000101e 	bne	r2,zero,d18c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    d14c:	e0bffb17 	ldw	r2,-20(fp)
    d150:	10c00a17 	ldw	r3,40(r2)
    d154:	e0bff717 	ldw	r2,-36(fp)
    d158:	1880051e 	bne	r3,r2,d170 <altera_avalon_jtag_uart_read+0x13c>
    d15c:	e0bffb17 	ldw	r2,-20(fp)
    d160:	10c00917 	ldw	r3,36(r2)
    d164:	e0bffb17 	ldw	r2,-20(fp)
    d168:	10800117 	ldw	r2,4(r2)
    d16c:	18bff736 	bltu	r3,r2,d14c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    d170:	e0bffb17 	ldw	r2,-20(fp)
    d174:	10c00a17 	ldw	r3,40(r2)
    d178:	e0bff717 	ldw	r2,-36(fp)
    d17c:	18800326 	beq	r3,r2,d18c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    d180:	e0bffd17 	ldw	r2,-12(fp)
    d184:	10800048 	cmpgei	r2,r2,1
    d188:	103fb51e 	bne	r2,zero,d060 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    d18c:	e0fffa17 	ldw	r3,-24(fp)
    d190:	e0bffc17 	ldw	r2,-16(fp)
    d194:	18801926 	beq	r3,r2,d1fc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d198:	0005303a 	rdctl	r2,status
    d19c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d1a0:	e0fff517 	ldw	r3,-44(fp)
    d1a4:	00bfff84 	movi	r2,-2
    d1a8:	1884703a 	and	r2,r3,r2
    d1ac:	1001703a 	wrctl	status,r2
  
  return context;
    d1b0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    d1b4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d1b8:	e0bffb17 	ldw	r2,-20(fp)
    d1bc:	10800817 	ldw	r2,32(r2)
    d1c0:	10c00054 	ori	r3,r2,1
    d1c4:	e0bffb17 	ldw	r2,-20(fp)
    d1c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d1cc:	e0bffb17 	ldw	r2,-20(fp)
    d1d0:	10800017 	ldw	r2,0(r2)
    d1d4:	11000104 	addi	r4,r2,4
    d1d8:	e0bffb17 	ldw	r2,-20(fp)
    d1dc:	10800817 	ldw	r2,32(r2)
    d1e0:	1007883a 	mov	r3,r2
    d1e4:	2005883a 	mov	r2,r4
    d1e8:	10c00035 	stwio	r3,0(r2)
    d1ec:	e0bff917 	ldw	r2,-28(fp)
    d1f0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d1f4:	e0bff417 	ldw	r2,-48(fp)
    d1f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    d1fc:	e0fffa17 	ldw	r3,-24(fp)
    d200:	e0bffc17 	ldw	r2,-16(fp)
    d204:	18800526 	beq	r3,r2,d21c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    d208:	e0fffa17 	ldw	r3,-24(fp)
    d20c:	e0bffc17 	ldw	r2,-16(fp)
    d210:	1887c83a 	sub	r3,r3,r2
    d214:	e0ffff15 	stw	r3,-4(fp)
    d218:	00000906 	br	d240 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    d21c:	e0bffe17 	ldw	r2,-8(fp)
    d220:	1090000c 	andi	r2,r2,16384
    d224:	1005003a 	cmpeq	r2,r2,zero
    d228:	1000031e 	bne	r2,zero,d238 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    d22c:	00bffd44 	movi	r2,-11
    d230:	e0bfff15 	stw	r2,-4(fp)
    d234:	00000206 	br	d240 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    d238:	00bffec4 	movi	r2,-5
    d23c:	e0bfff15 	stw	r2,-4(fp)
    d240:	e0bfff17 	ldw	r2,-4(fp)
}
    d244:	e037883a 	mov	sp,fp
    d248:	dfc00117 	ldw	ra,4(sp)
    d24c:	df000017 	ldw	fp,0(sp)
    d250:	dec00204 	addi	sp,sp,8
    d254:	f800283a 	ret

0000d258 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    d258:	defff204 	addi	sp,sp,-56
    d25c:	dfc00d15 	stw	ra,52(sp)
    d260:	df000c15 	stw	fp,48(sp)
    d264:	df000c04 	addi	fp,sp,48
    d268:	e13ffb15 	stw	r4,-20(fp)
    d26c:	e17ffc15 	stw	r5,-16(fp)
    d270:	e1bffd15 	stw	r6,-12(fp)
    d274:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    d278:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    d27c:	e0bffc17 	ldw	r2,-16(fp)
    d280:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d284:	00003a06 	br	d370 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    d288:	e0bffb17 	ldw	r2,-20(fp)
    d28c:	10800c17 	ldw	r2,48(r2)
    d290:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    d294:	e0bffb17 	ldw	r2,-20(fp)
    d298:	10800d17 	ldw	r2,52(r2)
    d29c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    d2a0:	e0fffa17 	ldw	r3,-24(fp)
    d2a4:	e0bff917 	ldw	r2,-28(fp)
    d2a8:	1880062e 	bgeu	r3,r2,d2c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    d2ac:	e0fff917 	ldw	r3,-28(fp)
    d2b0:	e0bffa17 	ldw	r2,-24(fp)
    d2b4:	1885c83a 	sub	r2,r3,r2
    d2b8:	10bfffc4 	addi	r2,r2,-1
    d2bc:	e0bff815 	stw	r2,-32(fp)
    d2c0:	00000c06 	br	d2f4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    d2c4:	e0bff917 	ldw	r2,-28(fp)
    d2c8:	1005003a 	cmpeq	r2,r2,zero
    d2cc:	1000051e 	bne	r2,zero,d2e4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    d2d0:	00820004 	movi	r2,2048
    d2d4:	e0fffa17 	ldw	r3,-24(fp)
    d2d8:	10c5c83a 	sub	r2,r2,r3
    d2dc:	e0bff815 	stw	r2,-32(fp)
    d2e0:	00000406 	br	d2f4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    d2e4:	0081ffc4 	movi	r2,2047
    d2e8:	e0fffa17 	ldw	r3,-24(fp)
    d2ec:	10c5c83a 	sub	r2,r2,r3
    d2f0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    d2f4:	e0bff817 	ldw	r2,-32(fp)
    d2f8:	1005003a 	cmpeq	r2,r2,zero
    d2fc:	10001f1e 	bne	r2,zero,d37c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    d300:	e0fffd17 	ldw	r3,-12(fp)
    d304:	e0bff817 	ldw	r2,-32(fp)
    d308:	1880022e 	bgeu	r3,r2,d314 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    d30c:	e0bffd17 	ldw	r2,-12(fp)
    d310:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    d314:	e0bffb17 	ldw	r2,-20(fp)
    d318:	10c20e04 	addi	r3,r2,2104
    d31c:	e0bffa17 	ldw	r2,-24(fp)
    d320:	1885883a 	add	r2,r3,r2
    d324:	e0fffc17 	ldw	r3,-16(fp)
    d328:	1009883a 	mov	r4,r2
    d32c:	180b883a 	mov	r5,r3
    d330:	e1bff817 	ldw	r6,-32(fp)
    d334:	0002d240 	call	2d24 <memcpy>
      ptr   += n;
    d338:	e0fff817 	ldw	r3,-32(fp)
    d33c:	e0bffc17 	ldw	r2,-16(fp)
    d340:	10c5883a 	add	r2,r2,r3
    d344:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    d348:	e0fffd17 	ldw	r3,-12(fp)
    d34c:	e0bff817 	ldw	r2,-32(fp)
    d350:	1885c83a 	sub	r2,r3,r2
    d354:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d358:	e0fffa17 	ldw	r3,-24(fp)
    d35c:	e0bff817 	ldw	r2,-32(fp)
    d360:	1885883a 	add	r2,r3,r2
    d364:	10c1ffcc 	andi	r3,r2,2047
    d368:	e0bffb17 	ldw	r2,-20(fp)
    d36c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d370:	e0bffd17 	ldw	r2,-12(fp)
    d374:	10800048 	cmpgei	r2,r2,1
    d378:	103fc31e 	bne	r2,zero,d288 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d37c:	0005303a 	rdctl	r2,status
    d380:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d384:	e0fff517 	ldw	r3,-44(fp)
    d388:	00bfff84 	movi	r2,-2
    d38c:	1884703a 	and	r2,r3,r2
    d390:	1001703a 	wrctl	status,r2
  
  return context;
    d394:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    d398:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d39c:	e0bffb17 	ldw	r2,-20(fp)
    d3a0:	10800817 	ldw	r2,32(r2)
    d3a4:	10c00094 	ori	r3,r2,2
    d3a8:	e0bffb17 	ldw	r2,-20(fp)
    d3ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d3b0:	e0bffb17 	ldw	r2,-20(fp)
    d3b4:	10800017 	ldw	r2,0(r2)
    d3b8:	11000104 	addi	r4,r2,4
    d3bc:	e0bffb17 	ldw	r2,-20(fp)
    d3c0:	10800817 	ldw	r2,32(r2)
    d3c4:	1007883a 	mov	r3,r2
    d3c8:	2005883a 	mov	r2,r4
    d3cc:	10c00035 	stwio	r3,0(r2)
    d3d0:	e0bff717 	ldw	r2,-36(fp)
    d3d4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d3d8:	e0bff417 	ldw	r2,-48(fp)
    d3dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    d3e0:	e0bffd17 	ldw	r2,-12(fp)
    d3e4:	10800050 	cmplti	r2,r2,1
    d3e8:	1000111e 	bne	r2,zero,d430 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    d3ec:	e0bffe17 	ldw	r2,-8(fp)
    d3f0:	1090000c 	andi	r2,r2,16384
    d3f4:	1004c03a 	cmpne	r2,r2,zero
    d3f8:	1000101e 	bne	r2,zero,d43c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    d3fc:	e0bffb17 	ldw	r2,-20(fp)
    d400:	10c00d17 	ldw	r3,52(r2)
    d404:	e0bff917 	ldw	r2,-28(fp)
    d408:	1880051e 	bne	r3,r2,d420 <altera_avalon_jtag_uart_write+0x1c8>
    d40c:	e0bffb17 	ldw	r2,-20(fp)
    d410:	10c00917 	ldw	r3,36(r2)
    d414:	e0bffb17 	ldw	r2,-20(fp)
    d418:	10800117 	ldw	r2,4(r2)
    d41c:	18bff736 	bltu	r3,r2,d3fc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    d420:	e0bffb17 	ldw	r2,-20(fp)
    d424:	10c00d17 	ldw	r3,52(r2)
    d428:	e0bff917 	ldw	r2,-28(fp)
    d42c:	18800326 	beq	r3,r2,d43c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    d430:	e0bffd17 	ldw	r2,-12(fp)
    d434:	10800048 	cmpgei	r2,r2,1
    d438:	103fcd1e 	bne	r2,zero,d370 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    d43c:	e0fffc17 	ldw	r3,-16(fp)
    d440:	e0bff617 	ldw	r2,-40(fp)
    d444:	18800526 	beq	r3,r2,d45c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    d448:	e0fffc17 	ldw	r3,-16(fp)
    d44c:	e0bff617 	ldw	r2,-40(fp)
    d450:	1887c83a 	sub	r3,r3,r2
    d454:	e0ffff15 	stw	r3,-4(fp)
    d458:	00000906 	br	d480 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    d45c:	e0bffe17 	ldw	r2,-8(fp)
    d460:	1090000c 	andi	r2,r2,16384
    d464:	1005003a 	cmpeq	r2,r2,zero
    d468:	1000031e 	bne	r2,zero,d478 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    d46c:	00bffd44 	movi	r2,-11
    d470:	e0bfff15 	stw	r2,-4(fp)
    d474:	00000206 	br	d480 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    d478:	00bffec4 	movi	r2,-5
    d47c:	e0bfff15 	stw	r2,-4(fp)
    d480:	e0bfff17 	ldw	r2,-4(fp)
}
    d484:	e037883a 	mov	sp,fp
    d488:	dfc00117 	ldw	ra,4(sp)
    d48c:	df000017 	ldw	fp,0(sp)
    d490:	dec00204 	addi	sp,sp,8
    d494:	f800283a 	ret

0000d498 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    d498:	defffd04 	addi	sp,sp,-12
    d49c:	df000215 	stw	fp,8(sp)
    d4a0:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
    d4a4:	00800074 	movhi	r2,1
    d4a8:	109ad504 	addi	r2,r2,27476
    d4ac:	10800017 	ldw	r2,0(r2)
    d4b0:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    d4b4:	00800074 	movhi	r2,1
    d4b8:	109ad604 	addi	r2,r2,27480
    d4bc:	10800017 	ldw	r2,0(r2)
    d4c0:	1004c03a 	cmpne	r2,r2,zero
    d4c4:	1000031e 	bne	r2,zero,d4d4 <alt_timestamp_start+0x3c>
  {
    return -1;
    d4c8:	00bfffc4 	movi	r2,-1
    d4cc:	e0bfff15 	stw	r2,-4(fp)
    d4d0:	00001506 	br	d528 <alt_timestamp_start+0x90>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    d4d4:	e0bffe17 	ldw	r2,-8(fp)
    d4d8:	10800104 	addi	r2,r2,4
    d4dc:	1007883a 	mov	r3,r2
    d4e0:	00800204 	movi	r2,8
    d4e4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    d4e8:	e0bffe17 	ldw	r2,-8(fp)
    d4ec:	10800204 	addi	r2,r2,8
    d4f0:	1007883a 	mov	r3,r2
    d4f4:	00bfffd4 	movui	r2,65535
    d4f8:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    d4fc:	e0bffe17 	ldw	r2,-8(fp)
    d500:	10800304 	addi	r2,r2,12
    d504:	1007883a 	mov	r3,r2
    d508:	00bfffd4 	movui	r2,65535
    d50c:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    d510:	e0bffe17 	ldw	r2,-8(fp)
    d514:	10800104 	addi	r2,r2,4
    d518:	1007883a 	mov	r3,r2
    d51c:	00800104 	movi	r2,4
    d520:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    d524:	e03fff15 	stw	zero,-4(fp)
    d528:	e0bfff17 	ldw	r2,-4(fp)
}
    d52c:	e037883a 	mov	sp,fp
    d530:	df000017 	ldw	fp,0(sp)
    d534:	dec00104 	addi	sp,sp,4
    d538:	f800283a 	ret

0000d53c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    d53c:	defffb04 	addi	sp,sp,-20
    d540:	df000415 	stw	fp,16(sp)
    d544:	df000404 	addi	fp,sp,16

  void* base = altera_avalon_timer_ts_base;
    d548:	00800074 	movhi	r2,1
    d54c:	109ad504 	addi	r2,r2,27476
    d550:	10800017 	ldw	r2,0(r2)
    d554:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
    d558:	00800074 	movhi	r2,1
    d55c:	109ad604 	addi	r2,r2,27480
    d560:	10800017 	ldw	r2,0(r2)
    d564:	1004c03a 	cmpne	r2,r2,zero
    d568:	1000031e 	bne	r2,zero,d578 <alt_timestamp+0x3c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
    } else {
        return 0xFFFFFFFF;
    d56c:	00bfffc4 	movi	r2,-1
    d570:	e0bfff15 	stw	r2,-4(fp)
    d574:	00001306 	br	d5c4 <alt_timestamp+0x88>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    d578:	e0bffe17 	ldw	r2,-8(fp)
    d57c:	10800404 	addi	r2,r2,16
    d580:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    d584:	e0bffe17 	ldw	r2,-8(fp)
    d588:	10800404 	addi	r2,r2,16
    d58c:	10800037 	ldwio	r2,0(r2)
    d590:	10bfffcc 	andi	r2,r2,65535
    d594:	e0bffd15 	stw	r2,-12(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    d598:	e0bffe17 	ldw	r2,-8(fp)
    d59c:	10800504 	addi	r2,r2,20
    d5a0:	10800037 	ldwio	r2,0(r2)
    d5a4:	10bfffcc 	andi	r2,r2,65535
    d5a8:	e0bffc15 	stw	r2,-16(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    d5ac:	e0bffc17 	ldw	r2,-16(fp)
    d5b0:	1006943a 	slli	r3,r2,16
    d5b4:	e0bffd17 	ldw	r2,-12(fp)
    d5b8:	1884b03a 	or	r2,r3,r2
    d5bc:	0084303a 	nor	r2,zero,r2
    d5c0:	e0bfff15 	stw	r2,-4(fp)
    d5c4:	e0bfff17 	ldw	r2,-4(fp)
    }  
  }
}
    d5c8:	e037883a 	mov	sp,fp
    d5cc:	df000017 	ldw	fp,0(sp)
    d5d0:	dec00104 	addi	sp,sp,4
    d5d4:	f800283a 	ret

0000d5d8 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    d5d8:	deffff04 	addi	sp,sp,-4
    d5dc:	df000015 	stw	fp,0(sp)
    d5e0:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    d5e4:	00800074 	movhi	r2,1
    d5e8:	109ad604 	addi	r2,r2,27480
    d5ec:	10800017 	ldw	r2,0(r2)
}
    d5f0:	e037883a 	mov	sp,fp
    d5f4:	df000017 	ldw	fp,0(sp)
    d5f8:	dec00104 	addi	sp,sp,4
    d5fc:	f800283a 	ret

0000d600 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    d600:	defffc04 	addi	sp,sp,-16
    d604:	dfc00315 	stw	ra,12(sp)
    d608:	df000215 	stw	fp,8(sp)
    d60c:	df000204 	addi	fp,sp,8
    d610:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    d614:	e13fff17 	ldw	r4,-4(fp)
    d618:	01400074 	movhi	r5,1
    d61c:	2952f604 	addi	r5,r5,19416
    d620:	00110ec0 	call	110ec <alt_find_dev>
    d624:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    d628:	e0bffe17 	ldw	r2,-8(fp)
}
    d62c:	e037883a 	mov	sp,fp
    d630:	dfc00117 	ldw	ra,4(sp)
    d634:	df000017 	ldw	fp,0(sp)
    d638:	dec00204 	addi	sp,sp,8
    d63c:	f800283a 	ret

0000d640 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    d640:	defffd04 	addi	sp,sp,-12
    d644:	df000215 	stw	fp,8(sp)
    d648:	df000204 	addi	fp,sp,8
    d64c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d650:	e0bfff17 	ldw	r2,-4(fp)
    d654:	10800a17 	ldw	r2,40(r2)
    d658:	10800037 	ldwio	r2,0(r2)
    d65c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    d660:	e0bffe17 	ldw	r2,-8(fp)
    d664:	10800054 	ori	r2,r2,1
    d668:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d66c:	e0bfff17 	ldw	r2,-4(fp)
    d670:	10800a17 	ldw	r2,40(r2)
    d674:	e0fffe17 	ldw	r3,-8(fp)
    d678:	10c00035 	stwio	r3,0(r2)
}
    d67c:	e037883a 	mov	sp,fp
    d680:	df000017 	ldw	fp,0(sp)
    d684:	dec00104 	addi	sp,sp,4
    d688:	f800283a 	ret

0000d68c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    d68c:	defffd04 	addi	sp,sp,-12
    d690:	df000215 	stw	fp,8(sp)
    d694:	df000204 	addi	fp,sp,8
    d698:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d69c:	e0bfff17 	ldw	r2,-4(fp)
    d6a0:	10800a17 	ldw	r2,40(r2)
    d6a4:	10800037 	ldwio	r2,0(r2)
    d6a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    d6ac:	e0fffe17 	ldw	r3,-8(fp)
    d6b0:	00bfff84 	movi	r2,-2
    d6b4:	1884703a 	and	r2,r3,r2
    d6b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d6bc:	e0bfff17 	ldw	r2,-4(fp)
    d6c0:	10800a17 	ldw	r2,40(r2)
    d6c4:	e0fffe17 	ldw	r3,-8(fp)
    d6c8:	10c00035 	stwio	r3,0(r2)
}
    d6cc:	e037883a 	mov	sp,fp
    d6d0:	df000017 	ldw	fp,0(sp)
    d6d4:	dec00104 	addi	sp,sp,4
    d6d8:	f800283a 	ret

0000d6dc <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    d6dc:	defffd04 	addi	sp,sp,-12
    d6e0:	df000215 	stw	fp,8(sp)
    d6e4:	df000204 	addi	fp,sp,8
    d6e8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d6ec:	e0bfff17 	ldw	r2,-4(fp)
    d6f0:	10800a17 	ldw	r2,40(r2)
    d6f4:	10800037 	ldwio	r2,0(r2)
    d6f8:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    d6fc:	e0bffe17 	ldw	r2,-8(fp)
    d700:	10800094 	ori	r2,r2,2
    d704:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d708:	e0bfff17 	ldw	r2,-4(fp)
    d70c:	10800a17 	ldw	r2,40(r2)
    d710:	e0fffe17 	ldw	r3,-8(fp)
    d714:	10c00035 	stwio	r3,0(r2)
}
    d718:	e037883a 	mov	sp,fp
    d71c:	df000017 	ldw	fp,0(sp)
    d720:	dec00104 	addi	sp,sp,4
    d724:	f800283a 	ret

0000d728 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    d728:	defffd04 	addi	sp,sp,-12
    d72c:	df000215 	stw	fp,8(sp)
    d730:	df000204 	addi	fp,sp,8
    d734:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d738:	e0bfff17 	ldw	r2,-4(fp)
    d73c:	10800a17 	ldw	r2,40(r2)
    d740:	10800037 	ldwio	r2,0(r2)
    d744:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    d748:	e0fffe17 	ldw	r3,-8(fp)
    d74c:	00bfff44 	movi	r2,-3
    d750:	1884703a 	and	r2,r3,r2
    d754:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d758:	e0bfff17 	ldw	r2,-4(fp)
    d75c:	10800a17 	ldw	r2,40(r2)
    d760:	e0fffe17 	ldw	r3,-8(fp)
    d764:	10c00035 	stwio	r3,0(r2)
}
    d768:	e037883a 	mov	sp,fp
    d76c:	df000017 	ldw	fp,0(sp)
    d770:	dec00104 	addi	sp,sp,4
    d774:	f800283a 	ret

0000d778 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    d778:	defffd04 	addi	sp,sp,-12
    d77c:	df000215 	stw	fp,8(sp)
    d780:	df000204 	addi	fp,sp,8
    d784:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d788:	e0bfff17 	ldw	r2,-4(fp)
    d78c:	10800a17 	ldw	r2,40(r2)
    d790:	10800037 	ldwio	r2,0(r2)
    d794:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    d798:	e0bffe17 	ldw	r2,-8(fp)
    d79c:	1080400c 	andi	r2,r2,256
    d7a0:	1004c03a 	cmpne	r2,r2,zero
}
    d7a4:	e037883a 	mov	sp,fp
    d7a8:	df000017 	ldw	fp,0(sp)
    d7ac:	dec00104 	addi	sp,sp,4
    d7b0:	f800283a 	ret

0000d7b4 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    d7b4:	defffd04 	addi	sp,sp,-12
    d7b8:	df000215 	stw	fp,8(sp)
    d7bc:	df000204 	addi	fp,sp,8
    d7c0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d7c4:	e0bfff17 	ldw	r2,-4(fp)
    d7c8:	10800a17 	ldw	r2,40(r2)
    d7cc:	10800037 	ldwio	r2,0(r2)
    d7d0:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    d7d4:	e0bffe17 	ldw	r2,-8(fp)
    d7d8:	1080800c 	andi	r2,r2,512
    d7dc:	1004c03a 	cmpne	r2,r2,zero
}
    d7e0:	e037883a 	mov	sp,fp
    d7e4:	df000017 	ldw	fp,0(sp)
    d7e8:	dec00104 	addi	sp,sp,4
    d7ec:	f800283a 	ret

0000d7f0 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    d7f0:	defffd04 	addi	sp,sp,-12
    d7f4:	df000215 	stw	fp,8(sp)
    d7f8:	df000204 	addi	fp,sp,8
    d7fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d800:	e0bfff17 	ldw	r2,-4(fp)
    d804:	10800a17 	ldw	r2,40(r2)
    d808:	10800037 	ldwio	r2,0(r2)
    d80c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    d810:	e0bffe17 	ldw	r2,-8(fp)
    d814:	10800114 	ori	r2,r2,4
    d818:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    d81c:	e0bffe17 	ldw	r2,-8(fp)
    d820:	10800214 	ori	r2,r2,8
    d824:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d828:	e0bfff17 	ldw	r2,-4(fp)
    d82c:	10800a17 	ldw	r2,40(r2)
    d830:	e0fffe17 	ldw	r3,-8(fp)
    d834:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    d838:	e0fffe17 	ldw	r3,-8(fp)
    d83c:	00bffec4 	movi	r2,-5
    d840:	1884703a 	and	r2,r3,r2
    d844:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    d848:	e0fffe17 	ldw	r3,-8(fp)
    d84c:	00bffdc4 	movi	r2,-9
    d850:	1884703a 	and	r2,r3,r2
    d854:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d858:	e0bfff17 	ldw	r2,-4(fp)
    d85c:	10800a17 	ldw	r2,40(r2)
    d860:	e0fffe17 	ldw	r3,-8(fp)
    d864:	10c00035 	stwio	r3,0(r2)
}
    d868:	e037883a 	mov	sp,fp
    d86c:	df000017 	ldw	fp,0(sp)
    d870:	dec00104 	addi	sp,sp,4
    d874:	f800283a 	ret

0000d878 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    d878:	defffb04 	addi	sp,sp,-20
    d87c:	df000415 	stw	fp,16(sp)
    d880:	df000404 	addi	fp,sp,16
    d884:	e13ffd15 	stw	r4,-12(fp)
    d888:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d88c:	e0bffd17 	ldw	r2,-12(fp)
    d890:	10800a17 	ldw	r2,40(r2)
    d894:	10800104 	addi	r2,r2,4
    d898:	10800037 	ldwio	r2,0(r2)
    d89c:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d8a0:	e0bffe17 	ldw	r2,-8(fp)
    d8a4:	1004c03a 	cmpne	r2,r2,zero
    d8a8:	1000051e 	bne	r2,zero,d8c0 <alt_up_audio_read_fifo_avail+0x48>
    d8ac:	e0bffc17 	ldw	r2,-16(fp)
    d8b0:	10bfc00c 	andi	r2,r2,65280
    d8b4:	1004d23a 	srli	r2,r2,8
    d8b8:	e0bfff15 	stw	r2,-4(fp)
    d8bc:	00000306 	br	d8cc <alt_up_audio_read_fifo_avail+0x54>
    d8c0:	e0bffc17 	ldw	r2,-16(fp)
    d8c4:	10803fcc 	andi	r2,r2,255
    d8c8:	e0bfff15 	stw	r2,-4(fp)
    d8cc:	e0bfff17 	ldw	r2,-4(fp)
    d8d0:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    d8d4:	e0bffc17 	ldw	r2,-16(fp)
}
    d8d8:	e037883a 	mov	sp,fp
    d8dc:	df000017 	ldw	fp,0(sp)
    d8e0:	dec00104 	addi	sp,sp,4
    d8e4:	f800283a 	ret

0000d8e8 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d8e8:	defff904 	addi	sp,sp,-28
    d8ec:	dfc00615 	stw	ra,24(sp)
    d8f0:	df000515 	stw	fp,20(sp)
    d8f4:	df000504 	addi	fp,sp,20
    d8f8:	e13ffc15 	stw	r4,-16(fp)
    d8fc:	e17ffd15 	stw	r5,-12(fp)
    d900:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    d904:	e13ffc17 	ldw	r4,-16(fp)
    d908:	01400044 	movi	r5,1
    d90c:	000d8780 	call	d878 <alt_up_audio_read_fifo_avail>
    d910:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    d914:	e0bffb17 	ldw	r2,-20(fp)
    d918:	10801868 	cmpgeui	r2,r2,97
    d91c:	1000021e 	bne	r2,zero,d928 <alt_up_audio_record_r+0x40>
		return 0;
    d920:	e03fff15 	stw	zero,-4(fp)
    d924:	00000606 	br	d940 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    d928:	e13ffc17 	ldw	r4,-16(fp)
    d92c:	e17ffd17 	ldw	r5,-12(fp)
    d930:	e1bffe17 	ldw	r6,-8(fp)
    d934:	01c00044 	movi	r7,1
    d938:	000db1c0 	call	db1c <alt_up_audio_read_fifo>
    d93c:	e0bfff15 	stw	r2,-4(fp)
    d940:	e0bfff17 	ldw	r2,-4(fp)
}
    d944:	e037883a 	mov	sp,fp
    d948:	dfc00117 	ldw	ra,4(sp)
    d94c:	df000017 	ldw	fp,0(sp)
    d950:	dec00204 	addi	sp,sp,8
    d954:	f800283a 	ret

0000d958 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d958:	defff904 	addi	sp,sp,-28
    d95c:	dfc00615 	stw	ra,24(sp)
    d960:	df000515 	stw	fp,20(sp)
    d964:	df000504 	addi	fp,sp,20
    d968:	e13ffc15 	stw	r4,-16(fp)
    d96c:	e17ffd15 	stw	r5,-12(fp)
    d970:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    d974:	e13ffc17 	ldw	r4,-16(fp)
    d978:	000b883a 	mov	r5,zero
    d97c:	000d8780 	call	d878 <alt_up_audio_read_fifo_avail>
    d980:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    d984:	e0bffb17 	ldw	r2,-20(fp)
    d988:	10801868 	cmpgeui	r2,r2,97
    d98c:	1000021e 	bne	r2,zero,d998 <alt_up_audio_record_l+0x40>
		return 0;
    d990:	e03fff15 	stw	zero,-4(fp)
    d994:	00000606 	br	d9b0 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    d998:	e13ffc17 	ldw	r4,-16(fp)
    d99c:	e17ffd17 	ldw	r5,-12(fp)
    d9a0:	e1bffe17 	ldw	r6,-8(fp)
    d9a4:	000f883a 	mov	r7,zero
    d9a8:	000db1c0 	call	db1c <alt_up_audio_read_fifo>
    d9ac:	e0bfff15 	stw	r2,-4(fp)
    d9b0:	e0bfff17 	ldw	r2,-4(fp)
}
    d9b4:	e037883a 	mov	sp,fp
    d9b8:	dfc00117 	ldw	ra,4(sp)
    d9bc:	df000017 	ldw	fp,0(sp)
    d9c0:	dec00204 	addi	sp,sp,8
    d9c4:	f800283a 	ret

0000d9c8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    d9c8:	defffb04 	addi	sp,sp,-20
    d9cc:	df000415 	stw	fp,16(sp)
    d9d0:	df000404 	addi	fp,sp,16
    d9d4:	e13ffd15 	stw	r4,-12(fp)
    d9d8:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d9dc:	e0bffd17 	ldw	r2,-12(fp)
    d9e0:	10800a17 	ldw	r2,40(r2)
    d9e4:	10800104 	addi	r2,r2,4
    d9e8:	10800037 	ldwio	r2,0(r2)
    d9ec:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d9f0:	e0bffe17 	ldw	r2,-8(fp)
    d9f4:	1004c03a 	cmpne	r2,r2,zero
    d9f8:	1000051e 	bne	r2,zero,da10 <alt_up_audio_write_fifo_space+0x48>
    d9fc:	e0bffc17 	ldw	r2,-16(fp)
    da00:	10bfc02c 	andhi	r2,r2,65280
    da04:	1004d63a 	srli	r2,r2,24
    da08:	e0bfff15 	stw	r2,-4(fp)
    da0c:	00000406 	br	da20 <alt_up_audio_write_fifo_space+0x58>
    da10:	e0bffc17 	ldw	r2,-16(fp)
    da14:	10803fec 	andhi	r2,r2,255
    da18:	1004d43a 	srli	r2,r2,16
    da1c:	e0bfff15 	stw	r2,-4(fp)
    da20:	e0bfff17 	ldw	r2,-4(fp)
    da24:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    da28:	e0bffc17 	ldw	r2,-16(fp)
}
    da2c:	e037883a 	mov	sp,fp
    da30:	df000017 	ldw	fp,0(sp)
    da34:	dec00104 	addi	sp,sp,4
    da38:	f800283a 	ret

0000da3c <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    da3c:	defff904 	addi	sp,sp,-28
    da40:	dfc00615 	stw	ra,24(sp)
    da44:	df000515 	stw	fp,20(sp)
    da48:	df000504 	addi	fp,sp,20
    da4c:	e13ffc15 	stw	r4,-16(fp)
    da50:	e17ffd15 	stw	r5,-12(fp)
    da54:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    da58:	e13ffc17 	ldw	r4,-16(fp)
    da5c:	01400044 	movi	r5,1
    da60:	000d9c80 	call	d9c8 <alt_up_audio_write_fifo_space>
    da64:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    da68:	e0bffb17 	ldw	r2,-20(fp)
    da6c:	10801868 	cmpgeui	r2,r2,97
    da70:	1000021e 	bne	r2,zero,da7c <alt_up_audio_play_r+0x40>
		return 0;
    da74:	e03fff15 	stw	zero,-4(fp)
    da78:	00000606 	br	da94 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    da7c:	e13ffc17 	ldw	r4,-16(fp)
    da80:	e17ffd17 	ldw	r5,-12(fp)
    da84:	e1bffe17 	ldw	r6,-8(fp)
    da88:	01c00044 	movi	r7,1
    da8c:	000dc200 	call	dc20 <alt_up_audio_write_fifo>
    da90:	e0bfff15 	stw	r2,-4(fp)
    da94:	e0bfff17 	ldw	r2,-4(fp)
}
    da98:	e037883a 	mov	sp,fp
    da9c:	dfc00117 	ldw	ra,4(sp)
    daa0:	df000017 	ldw	fp,0(sp)
    daa4:	dec00204 	addi	sp,sp,8
    daa8:	f800283a 	ret

0000daac <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    daac:	defff904 	addi	sp,sp,-28
    dab0:	dfc00615 	stw	ra,24(sp)
    dab4:	df000515 	stw	fp,20(sp)
    dab8:	df000504 	addi	fp,sp,20
    dabc:	e13ffc15 	stw	r4,-16(fp)
    dac0:	e17ffd15 	stw	r5,-12(fp)
    dac4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    dac8:	e13ffc17 	ldw	r4,-16(fp)
    dacc:	000b883a 	mov	r5,zero
    dad0:	000d9c80 	call	d9c8 <alt_up_audio_write_fifo_space>
    dad4:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    dad8:	e0bffb17 	ldw	r2,-20(fp)
    dadc:	10801868 	cmpgeui	r2,r2,97
    dae0:	1000021e 	bne	r2,zero,daec <alt_up_audio_play_l+0x40>
		return 0;
    dae4:	e03fff15 	stw	zero,-4(fp)
    dae8:	00000606 	br	db04 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    daec:	e13ffc17 	ldw	r4,-16(fp)
    daf0:	e17ffd17 	ldw	r5,-12(fp)
    daf4:	e1bffe17 	ldw	r6,-8(fp)
    daf8:	000f883a 	mov	r7,zero
    dafc:	000dc200 	call	dc20 <alt_up_audio_write_fifo>
    db00:	e0bfff15 	stw	r2,-4(fp)
    db04:	e0bfff17 	ldw	r2,-4(fp)
}
    db08:	e037883a 	mov	sp,fp
    db0c:	dfc00117 	ldw	ra,4(sp)
    db10:	df000017 	ldw	fp,0(sp)
    db14:	dec00204 	addi	sp,sp,8
    db18:	f800283a 	ret

0000db1c <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    db1c:	defff604 	addi	sp,sp,-40
    db20:	df000915 	stw	fp,36(sp)
    db24:	df000904 	addi	fp,sp,36
    db28:	e13ff915 	stw	r4,-28(fp)
    db2c:	e17ffa15 	stw	r5,-24(fp)
    db30:	e1bffb15 	stw	r6,-20(fp)
    db34:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    db38:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    db3c:	00003006 	br	dc00 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    db40:	e0bff917 	ldw	r2,-28(fp)
    db44:	10800a17 	ldw	r2,40(r2)
    db48:	10800104 	addi	r2,r2,4
    db4c:	10800037 	ldwio	r2,0(r2)
    db50:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    db54:	e0bffc17 	ldw	r2,-16(fp)
    db58:	1004c03a 	cmpne	r2,r2,zero
    db5c:	1000051e 	bne	r2,zero,db74 <alt_up_audio_read_fifo+0x58>
    db60:	e0bff817 	ldw	r2,-32(fp)
    db64:	10bfc00c 	andi	r2,r2,65280
    db68:	1004d23a 	srli	r2,r2,8
    db6c:	e0bfff15 	stw	r2,-4(fp)
    db70:	00000306 	br	db80 <alt_up_audio_read_fifo+0x64>
    db74:	e0bff817 	ldw	r2,-32(fp)
    db78:	10803fcc 	andi	r2,r2,255
    db7c:	e0bfff15 	stw	r2,-4(fp)
    db80:	e0bfff17 	ldw	r2,-4(fp)
    db84:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    db88:	e0bff817 	ldw	r2,-32(fp)
    db8c:	1005003a 	cmpeq	r2,r2,zero
    db90:	10001e1e 	bne	r2,zero,dc0c <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    db94:	e0bff717 	ldw	r2,-36(fp)
    db98:	1085883a 	add	r2,r2,r2
    db9c:	1085883a 	add	r2,r2,r2
    dba0:	1007883a 	mov	r3,r2
    dba4:	e0bffa17 	ldw	r2,-24(fp)
    dba8:	1887883a 	add	r3,r3,r2
    dbac:	e0fffe15 	stw	r3,-8(fp)
    dbb0:	e0bffc17 	ldw	r2,-16(fp)
    dbb4:	1004c03a 	cmpne	r2,r2,zero
    dbb8:	1000061e 	bne	r2,zero,dbd4 <alt_up_audio_read_fifo+0xb8>
    dbbc:	e0bff917 	ldw	r2,-28(fp)
    dbc0:	10800a17 	ldw	r2,40(r2)
    dbc4:	10800204 	addi	r2,r2,8
    dbc8:	10800037 	ldwio	r2,0(r2)
    dbcc:	e0bffd15 	stw	r2,-12(fp)
    dbd0:	00000506 	br	dbe8 <alt_up_audio_read_fifo+0xcc>
    dbd4:	e0bff917 	ldw	r2,-28(fp)
    dbd8:	10800a17 	ldw	r2,40(r2)
    dbdc:	10800304 	addi	r2,r2,12
    dbe0:	10800037 	ldwio	r2,0(r2)
    dbe4:	e0bffd15 	stw	r2,-12(fp)
    dbe8:	e0fffd17 	ldw	r3,-12(fp)
    dbec:	e0bffe17 	ldw	r2,-8(fp)
    dbf0:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    dbf4:	e0bff717 	ldw	r2,-36(fp)
    dbf8:	10800044 	addi	r2,r2,1
    dbfc:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    dc00:	e0fff717 	ldw	r3,-36(fp)
    dc04:	e0bffb17 	ldw	r2,-20(fp)
    dc08:	18bfcd16 	blt	r3,r2,db40 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    dc0c:	e0bff717 	ldw	r2,-36(fp)
}
    dc10:	e037883a 	mov	sp,fp
    dc14:	df000017 	ldw	fp,0(sp)
    dc18:	dec00104 	addi	sp,sp,4
    dc1c:	f800283a 	ret

0000dc20 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    dc20:	defff804 	addi	sp,sp,-32
    dc24:	df000715 	stw	fp,28(sp)
    dc28:	df000704 	addi	fp,sp,28
    dc2c:	e13ffb15 	stw	r4,-20(fp)
    dc30:	e17ffc15 	stw	r5,-16(fp)
    dc34:	e1bffd15 	stw	r6,-12(fp)
    dc38:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    dc3c:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    dc40:	00003a06 	br	dd2c <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    dc44:	e0bffb17 	ldw	r2,-20(fp)
    dc48:	10800a17 	ldw	r2,40(r2)
    dc4c:	10800104 	addi	r2,r2,4
    dc50:	10800037 	ldwio	r2,0(r2)
    dc54:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    dc58:	e0bffe17 	ldw	r2,-8(fp)
    dc5c:	1004c03a 	cmpne	r2,r2,zero
    dc60:	1000051e 	bne	r2,zero,dc78 <alt_up_audio_write_fifo+0x58>
    dc64:	e0bffa17 	ldw	r2,-24(fp)
    dc68:	10bfc02c 	andhi	r2,r2,65280
    dc6c:	1004d63a 	srli	r2,r2,24
    dc70:	e0bfff15 	stw	r2,-4(fp)
    dc74:	00000406 	br	dc88 <alt_up_audio_write_fifo+0x68>
    dc78:	e0bffa17 	ldw	r2,-24(fp)
    dc7c:	10803fec 	andhi	r2,r2,255
    dc80:	1004d43a 	srli	r2,r2,16
    dc84:	e0bfff15 	stw	r2,-4(fp)
    dc88:	e0bfff17 	ldw	r2,-4(fp)
    dc8c:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    dc90:	e0bffa17 	ldw	r2,-24(fp)
    dc94:	1005003a 	cmpeq	r2,r2,zero
    dc98:	1000271e 	bne	r2,zero,dd38 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    dc9c:	e0bffe17 	ldw	r2,-8(fp)
    dca0:	1004c03a 	cmpne	r2,r2,zero
    dca4:	1000111e 	bne	r2,zero,dcec <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    dca8:	e0bffb17 	ldw	r2,-20(fp)
    dcac:	10800a17 	ldw	r2,40(r2)
    dcb0:	11000204 	addi	r4,r2,8
    dcb4:	e0bff917 	ldw	r2,-28(fp)
    dcb8:	1085883a 	add	r2,r2,r2
    dcbc:	1085883a 	add	r2,r2,r2
    dcc0:	1007883a 	mov	r3,r2
    dcc4:	e0bffc17 	ldw	r2,-16(fp)
    dcc8:	1885883a 	add	r2,r3,r2
    dccc:	10800017 	ldw	r2,0(r2)
    dcd0:	1007883a 	mov	r3,r2
    dcd4:	e0bff917 	ldw	r2,-28(fp)
    dcd8:	10800044 	addi	r2,r2,1
    dcdc:	e0bff915 	stw	r2,-28(fp)
    dce0:	2005883a 	mov	r2,r4
    dce4:	10c00035 	stwio	r3,0(r2)
    dce8:	00001006 	br	dd2c <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    dcec:	e0bffb17 	ldw	r2,-20(fp)
    dcf0:	10800a17 	ldw	r2,40(r2)
    dcf4:	11000304 	addi	r4,r2,12
    dcf8:	e0bff917 	ldw	r2,-28(fp)
    dcfc:	1085883a 	add	r2,r2,r2
    dd00:	1085883a 	add	r2,r2,r2
    dd04:	1007883a 	mov	r3,r2
    dd08:	e0bffc17 	ldw	r2,-16(fp)
    dd0c:	1885883a 	add	r2,r3,r2
    dd10:	10800017 	ldw	r2,0(r2)
    dd14:	1007883a 	mov	r3,r2
    dd18:	e0bff917 	ldw	r2,-28(fp)
    dd1c:	10800044 	addi	r2,r2,1
    dd20:	e0bff915 	stw	r2,-28(fp)
    dd24:	2005883a 	mov	r2,r4
    dd28:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    dd2c:	e0fff917 	ldw	r3,-28(fp)
    dd30:	e0bffd17 	ldw	r2,-12(fp)
    dd34:	18bfc316 	blt	r3,r2,dc44 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    dd38:	e0bff917 	ldw	r2,-28(fp)
}
    dd3c:	e037883a 	mov	sp,fp
    dd40:	df000017 	ldw	fp,0(sp)
    dd44:	dec00104 	addi	sp,sp,4
    dd48:	f800283a 	ret

0000dd4c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    dd4c:	defffc04 	addi	sp,sp,-16
    dd50:	df000315 	stw	fp,12(sp)
    dd54:	df000304 	addi	fp,sp,12
    dd58:	e13ffd15 	stw	r4,-12(fp)
    dd5c:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    dd60:	e0bffe17 	ldw	r2,-8(fp)
    dd64:	1004c03a 	cmpne	r2,r2,zero
    dd68:	1000061e 	bne	r2,zero,dd84 <alt_up_audio_read_fifo_head+0x38>
    dd6c:	e0bffd17 	ldw	r2,-12(fp)
    dd70:	10800a17 	ldw	r2,40(r2)
    dd74:	10800204 	addi	r2,r2,8
    dd78:	10800037 	ldwio	r2,0(r2)
    dd7c:	e0bfff15 	stw	r2,-4(fp)
    dd80:	00000506 	br	dd98 <alt_up_audio_read_fifo_head+0x4c>
    dd84:	e0bffd17 	ldw	r2,-12(fp)
    dd88:	10800a17 	ldw	r2,40(r2)
    dd8c:	10800304 	addi	r2,r2,12
    dd90:	10800037 	ldwio	r2,0(r2)
    dd94:	e0bfff15 	stw	r2,-4(fp)
    dd98:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    dd9c:	e037883a 	mov	sp,fp
    dda0:	df000017 	ldw	fp,0(sp)
    dda4:	dec00104 	addi	sp,sp,4
    dda8:	f800283a 	ret

0000ddac <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    ddac:	defffc04 	addi	sp,sp,-16
    ddb0:	df000315 	stw	fp,12(sp)
    ddb4:	df000304 	addi	fp,sp,12
    ddb8:	e13ffd15 	stw	r4,-12(fp)
    ddbc:	e17ffe15 	stw	r5,-8(fp)
    ddc0:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    ddc4:	e0bfff17 	ldw	r2,-4(fp)
    ddc8:	1004c03a 	cmpne	r2,r2,zero
    ddcc:	1000061e 	bne	r2,zero,dde8 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    ddd0:	e0bffd17 	ldw	r2,-12(fp)
    ddd4:	10800a17 	ldw	r2,40(r2)
    ddd8:	10800204 	addi	r2,r2,8
    dddc:	e0fffe17 	ldw	r3,-8(fp)
    dde0:	10c00035 	stwio	r3,0(r2)
    dde4:	00000506 	br	ddfc <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    dde8:	e0bffd17 	ldw	r2,-12(fp)
    ddec:	10800a17 	ldw	r2,40(r2)
    ddf0:	10800304 	addi	r2,r2,12
    ddf4:	e0fffe17 	ldw	r3,-8(fp)
    ddf8:	10c00035 	stwio	r3,0(r2)
}
    ddfc:	e037883a 	mov	sp,fp
    de00:	df000017 	ldw	fp,0(sp)
    de04:	dec00104 	addi	sp,sp,4
    de08:	f800283a 	ret

0000de0c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    de0c:	defffc04 	addi	sp,sp,-16
    de10:	df000315 	stw	fp,12(sp)
    de14:	df000304 	addi	fp,sp,12
    de18:	e13ffe15 	stw	r4,-8(fp)
    de1c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    de20:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    de24:	e0bfff17 	ldw	r2,-4(fp)
    de28:	1004c03a 	cmpne	r2,r2,zero
    de2c:	1000061e 	bne	r2,zero,de48 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    de30:	e0bffe17 	ldw	r2,-8(fp)
    de34:	1007883a 	mov	r3,r2
    de38:	e0bffd03 	ldbu	r2,-12(fp)
    de3c:	10c4b03a 	or	r2,r2,r3
    de40:	e0bffd05 	stb	r2,-12(fp)
    de44:	00000806 	br	de68 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    de48:	e0bffe17 	ldw	r2,-8(fp)
    de4c:	1007883a 	mov	r3,r2
    de50:	e0bffd03 	ldbu	r2,-12(fp)
    de54:	10c4b03a 	or	r2,r2,r3
    de58:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    de5c:	e0bffd03 	ldbu	r2,-12(fp)
    de60:	10801014 	ori	r2,r2,64
    de64:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    de68:	e0fffd03 	ldbu	r3,-12(fp)
    de6c:	00bfe004 	movi	r2,-128
    de70:	1884b03a 	or	r2,r3,r2
    de74:	10803fcc 	andi	r2,r2,255
}
    de78:	e037883a 	mov	sp,fp
    de7c:	df000017 	ldw	fp,0(sp)
    de80:	dec00104 	addi	sp,sp,4
    de84:	f800283a 	ret

0000de88 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    de88:	defffd04 	addi	sp,sp,-12
    de8c:	df000215 	stw	fp,8(sp)
    de90:	df000204 	addi	fp,sp,8
    de94:	e13ffe15 	stw	r4,-8(fp)
    de98:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    de9c:	e0bffe17 	ldw	r2,-8(fp)
    dea0:	10800a17 	ldw	r2,40(r2)
    dea4:	e0ffff03 	ldbu	r3,-4(fp)
    dea8:	10c00025 	stbio	r3,0(r2)
}
    deac:	e037883a 	mov	sp,fp
    deb0:	df000017 	ldw	fp,0(sp)
    deb4:	dec00104 	addi	sp,sp,4
    deb8:	f800283a 	ret

0000debc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    debc:	defffe04 	addi	sp,sp,-8
    dec0:	df000115 	stw	fp,4(sp)
    dec4:	df000104 	addi	fp,sp,4
    dec8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    decc:	e0bfff17 	ldw	r2,-4(fp)
    ded0:	10800a17 	ldw	r2,40(r2)
    ded4:	1007883a 	mov	r3,r2
    ded8:	00800044 	movi	r2,1
    dedc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    dee0:	e037883a 	mov	sp,fp
    dee4:	df000017 	ldw	fp,0(sp)
    dee8:	dec00104 	addi	sp,sp,4
    deec:	f800283a 	ret

0000def0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    def0:	defffc04 	addi	sp,sp,-16
    def4:	dfc00315 	stw	ra,12(sp)
    def8:	df000215 	stw	fp,8(sp)
    defc:	df000204 	addi	fp,sp,8
    df00:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    df04:	e13fff17 	ldw	r4,-4(fp)
    df08:	01400074 	movhi	r5,1
    df0c:	2952f604 	addi	r5,r5,19416
    df10:	00110ec0 	call	110ec <alt_find_dev>
    df14:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    df18:	e0bffe17 	ldw	r2,-8(fp)
}
    df1c:	e037883a 	mov	sp,fp
    df20:	dfc00117 	ldw	ra,4(sp)
    df24:	df000017 	ldw	fp,0(sp)
    df28:	dec00204 	addi	sp,sp,8
    df2c:	f800283a 	ret

0000df30 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    df30:	defffb04 	addi	sp,sp,-20
    df34:	df000415 	stw	fp,16(sp)
    df38:	df000404 	addi	fp,sp,16
    df3c:	e13ffd15 	stw	r4,-12(fp)
    df40:	e17ffe15 	stw	r5,-8(fp)
    df44:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    df48:	e03ffc15 	stw	zero,-16(fp)
    df4c:	00000f06 	br	df8c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    df50:	e0bffd17 	ldw	r2,-12(fp)
    df54:	10800a17 	ldw	r2,40(r2)
    df58:	11000044 	addi	r4,r2,1
    df5c:	e0fffc17 	ldw	r3,-16(fp)
    df60:	e0bffe17 	ldw	r2,-8(fp)
    df64:	1885883a 	add	r2,r3,r2
    df68:	10800003 	ldbu	r2,0(r2)
    df6c:	10c03fcc 	andi	r3,r2,255
    df70:	18c0201c 	xori	r3,r3,128
    df74:	18ffe004 	addi	r3,r3,-128
    df78:	2005883a 	mov	r2,r4
    df7c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    df80:	e0bffc17 	ldw	r2,-16(fp)
    df84:	10800044 	addi	r2,r2,1
    df88:	e0bffc15 	stw	r2,-16(fp)
    df8c:	e0fffc17 	ldw	r3,-16(fp)
    df90:	e0bfff17 	ldw	r2,-4(fp)
    df94:	18bfee36 	bltu	r3,r2,df50 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    df98:	e037883a 	mov	sp,fp
    df9c:	df000017 	ldw	fp,0(sp)
    dfa0:	dec00104 	addi	sp,sp,4
    dfa4:	f800283a 	ret

0000dfa8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    dfa8:	defffd04 	addi	sp,sp,-12
    dfac:	df000215 	stw	fp,8(sp)
    dfb0:	df000204 	addi	fp,sp,8
    dfb4:	e13ffe15 	stw	r4,-8(fp)
    dfb8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    dfbc:	00000d06 	br	dff4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    dfc0:	e0bffe17 	ldw	r2,-8(fp)
    dfc4:	10800a17 	ldw	r2,40(r2)
    dfc8:	11000044 	addi	r4,r2,1
    dfcc:	e0bfff17 	ldw	r2,-4(fp)
    dfd0:	10800003 	ldbu	r2,0(r2)
    dfd4:	10c03fcc 	andi	r3,r2,255
    dfd8:	18c0201c 	xori	r3,r3,128
    dfdc:	18ffe004 	addi	r3,r3,-128
    dfe0:	2005883a 	mov	r2,r4
    dfe4:	10c00025 	stbio	r3,0(r2)
		++ptr;
    dfe8:	e0bfff17 	ldw	r2,-4(fp)
    dfec:	10800044 	addi	r2,r2,1
    dff0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    dff4:	e0bfff17 	ldw	r2,-4(fp)
    dff8:	10800003 	ldbu	r2,0(r2)
    dffc:	10803fcc 	andi	r2,r2,255
    e000:	1080201c 	xori	r2,r2,128
    e004:	10bfe004 	addi	r2,r2,-128
    e008:	1004c03a 	cmpne	r2,r2,zero
    e00c:	103fec1e 	bne	r2,zero,dfc0 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    e010:	e037883a 	mov	sp,fp
    e014:	df000017 	ldw	fp,0(sp)
    e018:	dec00104 	addi	sp,sp,4
    e01c:	f800283a 	ret

0000e020 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    e020:	defffb04 	addi	sp,sp,-20
    e024:	dfc00415 	stw	ra,16(sp)
    e028:	df000315 	stw	fp,12(sp)
    e02c:	df000304 	addi	fp,sp,12
    e030:	e13ffd15 	stw	r4,-12(fp)
    e034:	e17ffe15 	stw	r5,-8(fp)
    e038:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    e03c:	e0bffd17 	ldw	r2,-12(fp)
    e040:	10800017 	ldw	r2,0(r2)
    e044:	1009883a 	mov	r4,r2
    e048:	e1bfff17 	ldw	r6,-4(fp)
    e04c:	e17ffe17 	ldw	r5,-8(fp)
    e050:	000df300 	call	df30 <alt_up_character_lcd_write>
	return 0;
    e054:	0005883a 	mov	r2,zero
}
    e058:	e037883a 	mov	sp,fp
    e05c:	dfc00117 	ldw	ra,4(sp)
    e060:	df000017 	ldw	fp,0(sp)
    e064:	dec00204 	addi	sp,sp,8
    e068:	f800283a 	ret

0000e06c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    e06c:	defff904 	addi	sp,sp,-28
    e070:	dfc00615 	stw	ra,24(sp)
    e074:	df000515 	stw	fp,20(sp)
    e078:	df000504 	addi	fp,sp,20
    e07c:	e13ffc15 	stw	r4,-16(fp)
    e080:	e17ffd15 	stw	r5,-12(fp)
    e084:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    e088:	e0bffd17 	ldw	r2,-12(fp)
    e08c:	10800a28 	cmpgeui	r2,r2,40
    e090:	1000031e 	bne	r2,zero,e0a0 <alt_up_character_lcd_set_cursor_pos+0x34>
    e094:	e0bffe17 	ldw	r2,-8(fp)
    e098:	108000b0 	cmpltui	r2,r2,2
    e09c:	1000031e 	bne	r2,zero,e0ac <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    e0a0:	00bfffc4 	movi	r2,-1
    e0a4:	e0bfff15 	stw	r2,-4(fp)
    e0a8:	00000806 	br	e0cc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e0ac:	e13ffd17 	ldw	r4,-12(fp)
    e0b0:	e17ffe17 	ldw	r5,-8(fp)
    e0b4:	000de0c0 	call	de0c <get_DDRAM_addr>
    e0b8:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    e0bc:	e17ffb03 	ldbu	r5,-20(fp)
    e0c0:	e13ffc17 	ldw	r4,-16(fp)
    e0c4:	000de880 	call	de88 <alt_up_character_lcd_send_cmd>
	return 0;
    e0c8:	e03fff15 	stw	zero,-4(fp)
    e0cc:	e0bfff17 	ldw	r2,-4(fp)
}
    e0d0:	e037883a 	mov	sp,fp
    e0d4:	dfc00117 	ldw	ra,4(sp)
    e0d8:	df000017 	ldw	fp,0(sp)
    e0dc:	dec00204 	addi	sp,sp,8
    e0e0:	f800283a 	ret

0000e0e4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e0e4:	defff904 	addi	sp,sp,-28
    e0e8:	dfc00615 	stw	ra,24(sp)
    e0ec:	df000515 	stw	fp,20(sp)
    e0f0:	df000504 	addi	fp,sp,20
    e0f4:	e13ffc15 	stw	r4,-16(fp)
    e0f8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    e0fc:	e0bffd17 	ldw	r2,-12(fp)
    e100:	1005003a 	cmpeq	r2,r2,zero
    e104:	10001e1e 	bne	r2,zero,e180 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    e108:	e0bffd17 	ldw	r2,-12(fp)
    e10c:	10800050 	cmplti	r2,r2,1
    e110:	1000031e 	bne	r2,zero,e120 <alt_up_character_lcd_shift_cursor+0x3c>
    e114:	00800504 	movi	r2,20
    e118:	e0bfff05 	stb	r2,-4(fp)
    e11c:	00000206 	br	e128 <alt_up_character_lcd_shift_cursor+0x44>
    e120:	00c00404 	movi	r3,16
    e124:	e0ffff05 	stb	r3,-4(fp)
    e128:	e0bfff03 	ldbu	r2,-4(fp)
    e12c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    e130:	e0fffd17 	ldw	r3,-12(fp)
    e134:	e0fffe15 	stw	r3,-8(fp)
    e138:	e0fffe17 	ldw	r3,-8(fp)
    e13c:	1804403a 	cmpge	r2,r3,zero
    e140:	1000031e 	bne	r2,zero,e150 <alt_up_character_lcd_shift_cursor+0x6c>
    e144:	e0bffe17 	ldw	r2,-8(fp)
    e148:	0085c83a 	sub	r2,zero,r2
    e14c:	e0bffe15 	stw	r2,-8(fp)
    e150:	e0fffe17 	ldw	r3,-8(fp)
    e154:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    e158:	00000306 	br	e168 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e15c:	e17ffb43 	ldbu	r5,-19(fp)
    e160:	e13ffc17 	ldw	r4,-16(fp)
    e164:	000de880 	call	de88 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e168:	e0bffb03 	ldbu	r2,-20(fp)
    e16c:	10bfffc4 	addi	r2,r2,-1
    e170:	e0bffb05 	stb	r2,-20(fp)
    e174:	e0bffb03 	ldbu	r2,-20(fp)
    e178:	10803fd8 	cmpnei	r2,r2,255
    e17c:	103ff71e 	bne	r2,zero,e15c <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e180:	e037883a 	mov	sp,fp
    e184:	dfc00117 	ldw	ra,4(sp)
    e188:	df000017 	ldw	fp,0(sp)
    e18c:	dec00204 	addi	sp,sp,8
    e190:	f800283a 	ret

0000e194 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e194:	defff904 	addi	sp,sp,-28
    e198:	dfc00615 	stw	ra,24(sp)
    e19c:	df000515 	stw	fp,20(sp)
    e1a0:	df000504 	addi	fp,sp,20
    e1a4:	e13ffc15 	stw	r4,-16(fp)
    e1a8:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    e1ac:	e0bffd17 	ldw	r2,-12(fp)
    e1b0:	1005003a 	cmpeq	r2,r2,zero
    e1b4:	10001e1e 	bne	r2,zero,e230 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    e1b8:	e0bffd17 	ldw	r2,-12(fp)
    e1bc:	10800050 	cmplti	r2,r2,1
    e1c0:	1000031e 	bne	r2,zero,e1d0 <alt_up_character_lcd_shift_display+0x3c>
    e1c4:	00800704 	movi	r2,28
    e1c8:	e0bfff05 	stb	r2,-4(fp)
    e1cc:	00000206 	br	e1d8 <alt_up_character_lcd_shift_display+0x44>
    e1d0:	00c00604 	movi	r3,24
    e1d4:	e0ffff05 	stb	r3,-4(fp)
    e1d8:	e0bfff03 	ldbu	r2,-4(fp)
    e1dc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    e1e0:	e0fffd17 	ldw	r3,-12(fp)
    e1e4:	e0fffe15 	stw	r3,-8(fp)
    e1e8:	e0fffe17 	ldw	r3,-8(fp)
    e1ec:	1804403a 	cmpge	r2,r3,zero
    e1f0:	1000031e 	bne	r2,zero,e200 <alt_up_character_lcd_shift_display+0x6c>
    e1f4:	e0bffe17 	ldw	r2,-8(fp)
    e1f8:	0085c83a 	sub	r2,zero,r2
    e1fc:	e0bffe15 	stw	r2,-8(fp)
    e200:	e0fffe17 	ldw	r3,-8(fp)
    e204:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    e208:	00000306 	br	e218 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e20c:	e17ffb43 	ldbu	r5,-19(fp)
    e210:	e13ffc17 	ldw	r4,-16(fp)
    e214:	000de880 	call	de88 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e218:	e0bffb03 	ldbu	r2,-20(fp)
    e21c:	10bfffc4 	addi	r2,r2,-1
    e220:	e0bffb05 	stb	r2,-20(fp)
    e224:	e0bffb03 	ldbu	r2,-20(fp)
    e228:	10803fd8 	cmpnei	r2,r2,255
    e22c:	103ff71e 	bne	r2,zero,e20c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e230:	e037883a 	mov	sp,fp
    e234:	dfc00117 	ldw	ra,4(sp)
    e238:	df000017 	ldw	fp,0(sp)
    e23c:	dec00204 	addi	sp,sp,8
    e240:	f800283a 	ret

0000e244 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    e244:	defff904 	addi	sp,sp,-28
    e248:	dfc00615 	stw	ra,24(sp)
    e24c:	df000515 	stw	fp,20(sp)
    e250:	df000504 	addi	fp,sp,20
    e254:	e13ffc15 	stw	r4,-16(fp)
    e258:	e17ffd15 	stw	r5,-12(fp)
    e25c:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    e260:	e0bffd17 	ldw	r2,-12(fp)
    e264:	10800a28 	cmpgeui	r2,r2,40
    e268:	1000031e 	bne	r2,zero,e278 <alt_up_character_lcd_erase_pos+0x34>
    e26c:	e0bffe17 	ldw	r2,-8(fp)
    e270:	108000b0 	cmpltui	r2,r2,2
    e274:	1000031e 	bne	r2,zero,e284 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    e278:	00bfffc4 	movi	r2,-1
    e27c:	e0bfff15 	stw	r2,-4(fp)
    e280:	00000e06 	br	e2bc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e284:	e13ffd17 	ldw	r4,-12(fp)
    e288:	e17ffe17 	ldw	r5,-8(fp)
    e28c:	000de0c0 	call	de0c <get_DDRAM_addr>
    e290:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    e294:	e17ffb03 	ldbu	r5,-20(fp)
    e298:	e13ffc17 	ldw	r4,-16(fp)
    e29c:	000de880 	call	de88 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    e2a0:	e0bffc17 	ldw	r2,-16(fp)
    e2a4:	10800a17 	ldw	r2,40(r2)
    e2a8:	10800044 	addi	r2,r2,1
    e2ac:	1007883a 	mov	r3,r2
    e2b0:	00800084 	movi	r2,2
    e2b4:	18800025 	stbio	r2,0(r3)
	return 0;
    e2b8:	e03fff15 	stw	zero,-4(fp)
    e2bc:	e0bfff17 	ldw	r2,-4(fp)
}
    e2c0:	e037883a 	mov	sp,fp
    e2c4:	dfc00117 	ldw	ra,4(sp)
    e2c8:	df000017 	ldw	fp,0(sp)
    e2cc:	dec00204 	addi	sp,sp,8
    e2d0:	f800283a 	ret

0000e2d4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    e2d4:	defffd04 	addi	sp,sp,-12
    e2d8:	dfc00215 	stw	ra,8(sp)
    e2dc:	df000115 	stw	fp,4(sp)
    e2e0:	df000104 	addi	fp,sp,4
    e2e4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    e2e8:	e13fff17 	ldw	r4,-4(fp)
    e2ec:	01400304 	movi	r5,12
    e2f0:	000de880 	call	de88 <alt_up_character_lcd_send_cmd>
}
    e2f4:	e037883a 	mov	sp,fp
    e2f8:	dfc00117 	ldw	ra,4(sp)
    e2fc:	df000017 	ldw	fp,0(sp)
    e300:	dec00204 	addi	sp,sp,8
    e304:	f800283a 	ret

0000e308 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    e308:	defffd04 	addi	sp,sp,-12
    e30c:	dfc00215 	stw	ra,8(sp)
    e310:	df000115 	stw	fp,4(sp)
    e314:	df000104 	addi	fp,sp,4
    e318:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    e31c:	e13fff17 	ldw	r4,-4(fp)
    e320:	014003c4 	movi	r5,15
    e324:	000de880 	call	de88 <alt_up_character_lcd_send_cmd>
}
    e328:	e037883a 	mov	sp,fp
    e32c:	dfc00117 	ldw	ra,4(sp)
    e330:	df000017 	ldw	fp,0(sp)
    e334:	dec00204 	addi	sp,sp,8
    e338:	f800283a 	ret

0000e33c <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    e33c:	defffb04 	addi	sp,sp,-20
    e340:	dfc00415 	stw	ra,16(sp)
    e344:	df000315 	stw	fp,12(sp)
    e348:	df000304 	addi	fp,sp,12
    e34c:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    e350:	e0bfff17 	ldw	r2,-4(fp)
    e354:	10800a17 	ldw	r2,40(r2)
    e358:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    e35c:	e13ffe17 	ldw	r4,-8(fp)
    e360:	014007c4 	movi	r5,31
    e364:	000d883a 	mov	r6,zero
    e368:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    e36c:	e13ffe17 	ldw	r4,-8(fp)
    e370:	000b883a 	mov	r5,zero
    e374:	01800044 	movi	r6,1
    e378:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>
	usleep(10);
    e37c:	01000284 	movi	r4,10
    e380:	00117540 	call	11754 <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    e384:	e13ffe17 	ldw	r4,-8(fp)
    e388:	000b883a 	mov	r5,zero
    e38c:	000d883a 	mov	r6,zero
    e390:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>
	usleep(1);
    e394:	01000044 	movi	r4,1
    e398:	00117540 	call	11754 <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    e39c:	e03ffd15 	stw	zero,-12(fp)
    e3a0:	00000e06 	br	e3dc <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    e3a4:	e0bffd17 	ldw	r2,-12(fp)
    e3a8:	10800404 	addi	r2,r2,16
    e3ac:	100b883a 	mov	r5,r2
    e3b0:	e0fffd17 	ldw	r3,-12(fp)
    e3b4:	e0bfff17 	ldw	r2,-4(fp)
    e3b8:	1885883a 	add	r2,r3,r2
    e3bc:	10800d04 	addi	r2,r2,52
    e3c0:	10800003 	ldbu	r2,0(r2)
    e3c4:	11803fcc 	andi	r6,r2,255
    e3c8:	e13ffe17 	ldw	r4,-8(fp)
    e3cc:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    e3d0:	e0bffd17 	ldw	r2,-12(fp)
    e3d4:	10800044 	addi	r2,r2,1
    e3d8:	e0bffd15 	stw	r2,-12(fp)
    e3dc:	e0bffd17 	ldw	r2,-12(fp)
    e3e0:	10800190 	cmplti	r2,r2,6
    e3e4:	103fef1e 	bne	r2,zero,e3a4 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    e3e8:	e13ffe17 	ldw	r4,-8(fp)
    e3ec:	01403f84 	movi	r5,254
    e3f0:	01800fc4 	movi	r6,63
    e3f4:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    e3f8:	e13ffe17 	ldw	r4,-8(fp)
    e3fc:	01400044 	movi	r5,1
    e400:	01800b04 	movi	r6,44
    e404:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    e408:	e13ffe17 	ldw	r4,-8(fp)
    e40c:	01403fc4 	movi	r5,255
    e410:	01802004 	movi	r6,128
    e414:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    e418:	e13ffe17 	ldw	r4,-8(fp)
    e41c:	01400144 	movi	r5,5
    e420:	01800e44 	movi	r6,57
    e424:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    e428:	e13ffe17 	ldw	r4,-8(fp)
    e42c:	01400c04 	movi	r5,48
    e430:	018000c4 	movi	r6,3
    e434:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	return;
}
    e438:	e037883a 	mov	sp,fp
    e43c:	dfc00117 	ldw	ra,4(sp)
    e440:	df000017 	ldw	fp,0(sp)
    e444:	dec00204 	addi	sp,sp,8
    e448:	f800283a 	ret

0000e44c <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    e44c:	defffc04 	addi	sp,sp,-16
    e450:	dfc00315 	stw	ra,12(sp)
    e454:	df000215 	stw	fp,8(sp)
    e458:	df000204 	addi	fp,sp,8
    e45c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    e460:	e13fff17 	ldw	r4,-4(fp)
    e464:	01400074 	movhi	r5,1
    e468:	2952f604 	addi	r5,r5,19416
    e46c:	00110ec0 	call	110ec <alt_find_dev>
    e470:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e474:	e0bffe17 	ldw	r2,-8(fp)
}
    e478:	e037883a 	mov	sp,fp
    e47c:	dfc00117 	ldw	ra,4(sp)
    e480:	df000017 	ldw	fp,0(sp)
    e484:	dec00204 	addi	sp,sp,8
    e488:	f800283a 	ret

0000e48c <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    e48c:	defffd04 	addi	sp,sp,-12
    e490:	df000215 	stw	fp,8(sp)
    e494:	df000204 	addi	fp,sp,8
    e498:	e13ffe15 	stw	r4,-8(fp)
    e49c:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    e4a0:	e0bffe17 	ldw	r2,-8(fp)
    e4a4:	e0ffff17 	ldw	r3,-4(fp)
    e4a8:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    e4ac:	e0bffe17 	ldw	r2,-8(fp)
    e4b0:	10800104 	addi	r2,r2,4
    e4b4:	10800037 	ldwio	r2,0(r2)
}
    e4b8:	e037883a 	mov	sp,fp
    e4bc:	df000017 	ldw	fp,0(sp)
    e4c0:	dec00104 	addi	sp,sp,4
    e4c4:	f800283a 	ret

0000e4c8 <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    e4c8:	defffc04 	addi	sp,sp,-16
    e4cc:	df000315 	stw	fp,12(sp)
    e4d0:	df000304 	addi	fp,sp,12
    e4d4:	e13ffd15 	stw	r4,-12(fp)
    e4d8:	e17ffe15 	stw	r5,-8(fp)
    e4dc:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    e4e0:	e0bffd17 	ldw	r2,-12(fp)
    e4e4:	e0fffe17 	ldw	r3,-8(fp)
    e4e8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    e4ec:	e0bffd17 	ldw	r2,-12(fp)
    e4f0:	10800104 	addi	r2,r2,4
    e4f4:	e0ffff17 	ldw	r3,-4(fp)
    e4f8:	10c00035 	stwio	r3,0(r2)
}
    e4fc:	e037883a 	mov	sp,fp
    e500:	df000017 	ldw	fp,0(sp)
    e504:	dec00104 	addi	sp,sp,4
    e508:	f800283a 	ret

0000e50c <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    e50c:	defffa04 	addi	sp,sp,-24
    e510:	dfc00515 	stw	ra,20(sp)
    e514:	df000415 	stw	fp,16(sp)
    e518:	df000404 	addi	fp,sp,16
    e51c:	e13ffe15 	stw	r4,-8(fp)
    e520:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    e524:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    e528:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    e52c:	e0bfff17 	ldw	r2,-4(fp)
    e530:	11801014 	ori	r6,r2,64
    e534:	e13ffe17 	ldw	r4,-8(fp)
    e538:	01400304 	movi	r5,12
    e53c:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    e540:	e13ffe17 	ldw	r4,-8(fp)
    e544:	014002c4 	movi	r5,11
    e548:	01800304 	movi	r6,12
    e54c:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    e550:	01000044 	movi	r4,1
    e554:	00117540 	call	11754 <usleep>
		timeout++;
    e558:	e0bffc17 	ldw	r2,-16(fp)
    e55c:	10800044 	addi	r2,r2,1
    e560:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    e564:	e0bffc17 	ldw	r2,-16(fp)
    e568:	10800ca8 	cmpgeui	r2,r2,50
    e56c:	1000071e 	bne	r2,zero,e58c <alt_up_ethernet_phy_reg_read+0x80>
    e570:	e13ffe17 	ldw	r4,-8(fp)
    e574:	014002c4 	movi	r5,11
    e578:	000e48c0 	call	e48c <alt_up_ethernet_reg_read>
    e57c:	1080004c 	andi	r2,r2,1
    e580:	10803fcc 	andi	r2,r2,255
    e584:	1004c03a 	cmpne	r2,r2,zero
    e588:	103ff11e 	bne	r2,zero,e550 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    e58c:	01000044 	movi	r4,1
    e590:	00117540 	call	11754 <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    e594:	e13ffe17 	ldw	r4,-8(fp)
    e598:	014002c4 	movi	r5,11
    e59c:	01800204 	movi	r6,8
    e5a0:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    e5a4:	e13ffe17 	ldw	r4,-8(fp)
    e5a8:	01400384 	movi	r5,14
    e5ac:	000e48c0 	call	e48c <alt_up_ethernet_reg_read>
    e5b0:	1004923a 	slli	r2,r2,8
    e5b4:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    e5b8:	e13ffe17 	ldw	r4,-8(fp)
    e5bc:	01400344 	movi	r5,13
    e5c0:	000e48c0 	call	e48c <alt_up_ethernet_reg_read>
    e5c4:	1007883a 	mov	r3,r2
    e5c8:	e0bffd17 	ldw	r2,-12(fp)
    e5cc:	10c4b03a 	or	r2,r2,r3
    e5d0:	e0bffd15 	stw	r2,-12(fp)

	return result;
    e5d4:	e0bffd17 	ldw	r2,-12(fp)
}
    e5d8:	e037883a 	mov	sp,fp
    e5dc:	dfc00117 	ldw	ra,4(sp)
    e5e0:	df000017 	ldw	fp,0(sp)
    e5e4:	dec00204 	addi	sp,sp,8
    e5e8:	f800283a 	ret

0000e5ec <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    e5ec:	defffa04 	addi	sp,sp,-24
    e5f0:	dfc00515 	stw	ra,20(sp)
    e5f4:	df000415 	stw	fp,16(sp)
    e5f8:	df000404 	addi	fp,sp,16
    e5fc:	e13ffd15 	stw	r4,-12(fp)
    e600:	e17ffe15 	stw	r5,-8(fp)
    e604:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    e608:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    e60c:	e0bffe17 	ldw	r2,-8(fp)
    e610:	11801014 	ori	r6,r2,64
    e614:	e13ffd17 	ldw	r4,-12(fp)
    e618:	01400304 	movi	r5,12
    e61c:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    e620:	e0bfff17 	ldw	r2,-4(fp)
    e624:	1004d23a 	srli	r2,r2,8
    e628:	11803fcc 	andi	r6,r2,255
    e62c:	e13ffd17 	ldw	r4,-12(fp)
    e630:	01400384 	movi	r5,14
    e634:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    e638:	e0bfff17 	ldw	r2,-4(fp)
    e63c:	11803fcc 	andi	r6,r2,255
    e640:	e13ffd17 	ldw	r4,-12(fp)
    e644:	01400344 	movi	r5,13
    e648:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    e64c:	e13ffd17 	ldw	r4,-12(fp)
    e650:	014002c4 	movi	r5,11
    e654:	01800284 	movi	r6,10
    e658:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    e65c:	01000044 	movi	r4,1
    e660:	00117540 	call	11754 <usleep>
		timeout++;
    e664:	e0bffc17 	ldw	r2,-16(fp)
    e668:	10800044 	addi	r2,r2,1
    e66c:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    e670:	e0bffc17 	ldw	r2,-16(fp)
    e674:	10800ca8 	cmpgeui	r2,r2,50
    e678:	1000071e 	bne	r2,zero,e698 <alt_up_ethernet_phy_reg_write+0xac>
    e67c:	e13ffd17 	ldw	r4,-12(fp)
    e680:	014002c4 	movi	r5,11
    e684:	000e48c0 	call	e48c <alt_up_ethernet_reg_read>
    e688:	1080004c 	andi	r2,r2,1
    e68c:	10803fcc 	andi	r2,r2,255
    e690:	1004c03a 	cmpne	r2,r2,zero
    e694:	103ff11e 	bne	r2,zero,e65c <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    e698:	01000044 	movi	r4,1
    e69c:	00117540 	call	11754 <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    e6a0:	e13ffd17 	ldw	r4,-12(fp)
    e6a4:	014002c4 	movi	r5,11
    e6a8:	01800204 	movi	r6,8
    e6ac:	000e4c80 	call	e4c8 <alt_up_ethernet_reg_write>
}
    e6b0:	e037883a 	mov	sp,fp
    e6b4:	dfc00117 	ldw	ra,4(sp)
    e6b8:	df000017 	ldw	fp,0(sp)
    e6bc:	dec00204 	addi	sp,sp,8
    e6c0:	f800283a 	ret

0000e6c4 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    e6c4:	defffd04 	addi	sp,sp,-12
    e6c8:	df000215 	stw	fp,8(sp)
    e6cc:	df000204 	addi	fp,sp,8
    e6d0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e6d4:	e0bfff17 	ldw	r2,-4(fp)
    e6d8:	10800a17 	ldw	r2,40(r2)
    e6dc:	10800104 	addi	r2,r2,4
    e6e0:	10800037 	ldwio	r2,0(r2)
    e6e4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    e6e8:	e0bffe17 	ldw	r2,-8(fp)
    e6ec:	10800054 	ori	r2,r2,1
    e6f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e6f4:	e0bfff17 	ldw	r2,-4(fp)
    e6f8:	10800a17 	ldw	r2,40(r2)
    e6fc:	10800104 	addi	r2,r2,4
    e700:	e0fffe17 	ldw	r3,-8(fp)
    e704:	10c00035 	stwio	r3,0(r2)
}
    e708:	e037883a 	mov	sp,fp
    e70c:	df000017 	ldw	fp,0(sp)
    e710:	dec00104 	addi	sp,sp,4
    e714:	f800283a 	ret

0000e718 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    e718:	defffd04 	addi	sp,sp,-12
    e71c:	df000215 	stw	fp,8(sp)
    e720:	df000204 	addi	fp,sp,8
    e724:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e728:	e0bfff17 	ldw	r2,-4(fp)
    e72c:	10800a17 	ldw	r2,40(r2)
    e730:	10800104 	addi	r2,r2,4
    e734:	10800037 	ldwio	r2,0(r2)
    e738:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    e73c:	e0fffe17 	ldw	r3,-8(fp)
    e740:	00bfff84 	movi	r2,-2
    e744:	1884703a 	and	r2,r3,r2
    e748:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e74c:	e0bfff17 	ldw	r2,-4(fp)
    e750:	10800a17 	ldw	r2,40(r2)
    e754:	10800104 	addi	r2,r2,4
    e758:	e0fffe17 	ldw	r3,-8(fp)
    e75c:	10c00035 	stwio	r3,0(r2)
}
    e760:	e037883a 	mov	sp,fp
    e764:	df000017 	ldw	fp,0(sp)
    e768:	dec00104 	addi	sp,sp,4
    e76c:	f800283a 	ret

0000e770 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    e770:	defffd04 	addi	sp,sp,-12
    e774:	df000215 	stw	fp,8(sp)
    e778:	df000204 	addi	fp,sp,8
    e77c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e780:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    e784:	e0bfff17 	ldw	r2,-4(fp)
    e788:	10800a17 	ldw	r2,40(r2)
    e78c:	10800084 	addi	r2,r2,2
    e790:	1080002b 	ldhuio	r2,0(r2)
    e794:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    e798:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e79c:	e037883a 	mov	sp,fp
    e7a0:	df000017 	ldw	fp,0(sp)
    e7a4:	dec00104 	addi	sp,sp,4
    e7a8:	f800283a 	ret

0000e7ac <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    e7ac:	defffd04 	addi	sp,sp,-12
    e7b0:	df000215 	stw	fp,8(sp)
    e7b4:	df000204 	addi	fp,sp,8
    e7b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e7bc:	e0bfff17 	ldw	r2,-4(fp)
    e7c0:	10800a17 	ldw	r2,40(r2)
    e7c4:	10800104 	addi	r2,r2,4
    e7c8:	10800037 	ldwio	r2,0(r2)
    e7cc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    e7d0:	e0bffe17 	ldw	r2,-8(fp)
    e7d4:	10bfffec 	andhi	r2,r2,65535
    e7d8:	1004d43a 	srli	r2,r2,16
}
    e7dc:	e037883a 	mov	sp,fp
    e7e0:	df000017 	ldw	fp,0(sp)
    e7e4:	dec00104 	addi	sp,sp,4
    e7e8:	f800283a 	ret

0000e7ec <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    e7ec:	defffc04 	addi	sp,sp,-16
    e7f0:	df000315 	stw	fp,12(sp)
    e7f4:	df000304 	addi	fp,sp,12
    e7f8:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    e7fc:	e0bffe17 	ldw	r2,-8(fp)
    e800:	1080800c 	andi	r2,r2,512
    e804:	1004d27a 	srli	r2,r2,9
    e808:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    e80c:	e0bffd17 	ldw	r2,-12(fp)
    e810:	1005003a 	cmpeq	r2,r2,zero
    e814:	1000031e 	bne	r2,zero,e824 <alt_up_irda_check_parity+0x38>
    e818:	00bfffc4 	movi	r2,-1
    e81c:	e0bfff15 	stw	r2,-4(fp)
    e820:	00000106 	br	e828 <alt_up_irda_check_parity+0x3c>
    e824:	e03fff15 	stw	zero,-4(fp)
    e828:	e0bfff17 	ldw	r2,-4(fp)
}
    e82c:	e037883a 	mov	sp,fp
    e830:	df000017 	ldw	fp,0(sp)
    e834:	dec00104 	addi	sp,sp,4
    e838:	f800283a 	ret

0000e83c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    e83c:	defffc04 	addi	sp,sp,-16
    e840:	df000315 	stw	fp,12(sp)
    e844:	df000304 	addi	fp,sp,12
    e848:	e13ffe15 	stw	r4,-8(fp)
    e84c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e850:	e0bffe17 	ldw	r2,-8(fp)
    e854:	10800a17 	ldw	r2,40(r2)
    e858:	10800037 	ldwio	r2,0(r2)
    e85c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    e860:	e0bffe17 	ldw	r2,-8(fp)
    e864:	10800a17 	ldw	r2,40(r2)
    e868:	e0ffff03 	ldbu	r3,-4(fp)
    e86c:	10c00035 	stwio	r3,0(r2)
	return 0;
    e870:	0005883a 	mov	r2,zero
}
    e874:	e037883a 	mov	sp,fp
    e878:	df000017 	ldw	fp,0(sp)
    e87c:	dec00104 	addi	sp,sp,4
    e880:	f800283a 	ret

0000e884 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    e884:	defffa04 	addi	sp,sp,-24
    e888:	dfc00515 	stw	ra,20(sp)
    e88c:	df000415 	stw	fp,16(sp)
    e890:	df000404 	addi	fp,sp,16
    e894:	e13ffd15 	stw	r4,-12(fp)
    e898:	e17ffe15 	stw	r5,-8(fp)
    e89c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e8a0:	e0bffd17 	ldw	r2,-12(fp)
    e8a4:	10800a17 	ldw	r2,40(r2)
    e8a8:	10800037 	ldwio	r2,0(r2)
    e8ac:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    e8b0:	e0bffc17 	ldw	r2,-16(fp)
    e8b4:	1007883a 	mov	r3,r2
    e8b8:	e0bffe17 	ldw	r2,-8(fp)
    e8bc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    e8c0:	e13ffc17 	ldw	r4,-16(fp)
    e8c4:	000e7ec0 	call	e7ec <alt_up_irda_check_parity>
    e8c8:	1007883a 	mov	r3,r2
    e8cc:	e0bfff17 	ldw	r2,-4(fp)
    e8d0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    e8d4:	e0bffc17 	ldw	r2,-16(fp)
    e8d8:	10a0000c 	andi	r2,r2,32768
    e8dc:	1004d3fa 	srli	r2,r2,15
    e8e0:	10bfffc4 	addi	r2,r2,-1
}
    e8e4:	e037883a 	mov	sp,fp
    e8e8:	dfc00117 	ldw	ra,4(sp)
    e8ec:	df000017 	ldw	fp,0(sp)
    e8f0:	dec00204 	addi	sp,sp,8
    e8f4:	f800283a 	ret

0000e8f8 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    e8f8:	defff804 	addi	sp,sp,-32
    e8fc:	dfc00715 	stw	ra,28(sp)
    e900:	df000615 	stw	fp,24(sp)
    e904:	df000604 	addi	fp,sp,24
    e908:	e13ffd15 	stw	r4,-12(fp)
    e90c:	e17ffe15 	stw	r5,-8(fp)
    e910:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e914:	e0bffd17 	ldw	r2,-12(fp)
    e918:	10800017 	ldw	r2,0(r2)
    e91c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e920:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e924:	00000c06 	br	e958 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    e928:	e17ffe17 	ldw	r5,-8(fp)
    e92c:	e0bffe17 	ldw	r2,-8(fp)
    e930:	10800044 	addi	r2,r2,1
    e934:	e0bffe15 	stw	r2,-8(fp)
    e938:	e1bffc04 	addi	r6,fp,-16
    e93c:	e13ffb17 	ldw	r4,-20(fp)
    e940:	000e8840 	call	e884 <alt_up_irda_read_data>
    e944:	1004c03a 	cmpne	r2,r2,zero
    e948:	1000091e 	bne	r2,zero,e970 <alt_up_irda_read_fd+0x78>
			count++;
    e94c:	e0bffa17 	ldw	r2,-24(fp)
    e950:	10800044 	addi	r2,r2,1
    e954:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e958:	e0bfff17 	ldw	r2,-4(fp)
    e95c:	10bfffc4 	addi	r2,r2,-1
    e960:	e0bfff15 	stw	r2,-4(fp)
    e964:	e0bfff17 	ldw	r2,-4(fp)
    e968:	10bfffd8 	cmpnei	r2,r2,-1
    e96c:	103fee1e 	bne	r2,zero,e928 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    e970:	e0bffa17 	ldw	r2,-24(fp)
}
    e974:	e037883a 	mov	sp,fp
    e978:	dfc00117 	ldw	ra,4(sp)
    e97c:	df000017 	ldw	fp,0(sp)
    e980:	dec00204 	addi	sp,sp,8
    e984:	f800283a 	ret

0000e988 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e988:	defff904 	addi	sp,sp,-28
    e98c:	dfc00615 	stw	ra,24(sp)
    e990:	df000515 	stw	fp,20(sp)
    e994:	df000504 	addi	fp,sp,20
    e998:	e13ffd15 	stw	r4,-12(fp)
    e99c:	e17ffe15 	stw	r5,-8(fp)
    e9a0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e9a4:	e0bffd17 	ldw	r2,-12(fp)
    e9a8:	10800017 	ldw	r2,0(r2)
    e9ac:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    e9b0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    e9b4:	00000c06 	br	e9e8 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    e9b8:	e0bffe17 	ldw	r2,-8(fp)
    e9bc:	11403fcc 	andi	r5,r2,255
    e9c0:	e0bffe17 	ldw	r2,-8(fp)
    e9c4:	10800044 	addi	r2,r2,1
    e9c8:	e0bffe15 	stw	r2,-8(fp)
    e9cc:	e13ffc17 	ldw	r4,-16(fp)
    e9d0:	000e83c0 	call	e83c <alt_up_irda_write_data>
    e9d4:	1004c03a 	cmpne	r2,r2,zero
    e9d8:	1000091e 	bne	r2,zero,ea00 <alt_up_irda_write_fd+0x78>
			count++;
    e9dc:	e0bffb17 	ldw	r2,-20(fp)
    e9e0:	10800044 	addi	r2,r2,1
    e9e4:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    e9e8:	e0bfff17 	ldw	r2,-4(fp)
    e9ec:	10bfffc4 	addi	r2,r2,-1
    e9f0:	e0bfff15 	stw	r2,-4(fp)
    e9f4:	e0bfff17 	ldw	r2,-4(fp)
    e9f8:	10bfffd8 	cmpnei	r2,r2,-1
    e9fc:	103fee1e 	bne	r2,zero,e9b8 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    ea00:	e0bffb17 	ldw	r2,-20(fp)
}
    ea04:	e037883a 	mov	sp,fp
    ea08:	dfc00117 	ldw	ra,4(sp)
    ea0c:	df000017 	ldw	fp,0(sp)
    ea10:	dec00204 	addi	sp,sp,8
    ea14:	f800283a 	ret

0000ea18 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    ea18:	defffc04 	addi	sp,sp,-16
    ea1c:	dfc00315 	stw	ra,12(sp)
    ea20:	df000215 	stw	fp,8(sp)
    ea24:	df000204 	addi	fp,sp,8
    ea28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    ea2c:	e13fff17 	ldw	r4,-4(fp)
    ea30:	01400074 	movhi	r5,1
    ea34:	2952f604 	addi	r5,r5,19416
    ea38:	00110ec0 	call	110ec <alt_find_dev>
    ea3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ea40:	e0bffe17 	ldw	r2,-8(fp)
}
    ea44:	e037883a 	mov	sp,fp
    ea48:	dfc00117 	ldw	ra,4(sp)
    ea4c:	df000017 	ldw	fp,0(sp)
    ea50:	dec00204 	addi	sp,sp,8
    ea54:	f800283a 	ret

0000ea58 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    ea58:	defffc04 	addi	sp,sp,-16
    ea5c:	dfc00315 	stw	ra,12(sp)
    ea60:	df000215 	stw	fp,8(sp)
    ea64:	df000204 	addi	fp,sp,8
    ea68:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    ea6c:	e13fff17 	ldw	r4,-4(fp)
    ea70:	01400074 	movhi	r5,1
    ea74:	2952f604 	addi	r5,r5,19416
    ea78:	00110ec0 	call	110ec <alt_find_dev>
    ea7c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ea80:	e0bffe17 	ldw	r2,-8(fp)
}
    ea84:	e037883a 	mov	sp,fp
    ea88:	dfc00117 	ldw	ra,4(sp)
    ea8c:	df000017 	ldw	fp,0(sp)
    ea90:	dec00204 	addi	sp,sp,8
    ea94:	f800283a 	ret

0000ea98 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    ea98:	defffd04 	addi	sp,sp,-12
    ea9c:	df000215 	stw	fp,8(sp)
    eaa0:	df000204 	addi	fp,sp,8
    eaa4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    eaa8:	e0bfff17 	ldw	r2,-4(fp)
    eaac:	1080400c 	andi	r2,r2,256
    eab0:	1004d23a 	srli	r2,r2,8
    eab4:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    eab8:	e0bffe03 	ldbu	r2,-8(fp)
}
    eabc:	e037883a 	mov	sp,fp
    eac0:	df000017 	ldw	fp,0(sp)
    eac4:	dec00104 	addi	sp,sp,4
    eac8:	f800283a 	ret

0000eacc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    eacc:	defffd04 	addi	sp,sp,-12
    ead0:	df000215 	stw	fp,8(sp)
    ead4:	df000204 	addi	fp,sp,8
    ead8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    eadc:	e0bfff17 	ldw	r2,-4(fp)
    eae0:	1080004c 	andi	r2,r2,1
    eae4:	e0bffe05 	stb	r2,-8(fp)
	return re;
    eae8:	e0bffe03 	ldbu	r2,-8(fp)
}
    eaec:	e037883a 	mov	sp,fp
    eaf0:	df000017 	ldw	fp,0(sp)
    eaf4:	dec00104 	addi	sp,sp,4
    eaf8:	f800283a 	ret

0000eafc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    eafc:	defffd04 	addi	sp,sp,-12
    eb00:	df000215 	stw	fp,8(sp)
    eb04:	df000204 	addi	fp,sp,8
    eb08:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    eb0c:	e0bfff17 	ldw	r2,-4(fp)
    eb10:	1081000c 	andi	r2,r2,1024
    eb14:	1004d2ba 	srli	r2,r2,10
    eb18:	e0bffe05 	stb	r2,-8(fp)
	return re;
    eb1c:	e0bffe03 	ldbu	r2,-8(fp)
}
    eb20:	e037883a 	mov	sp,fp
    eb24:	df000017 	ldw	fp,0(sp)
    eb28:	dec00104 	addi	sp,sp,4
    eb2c:	f800283a 	ret

0000eb30 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    eb30:	defffd04 	addi	sp,sp,-12
    eb34:	df000215 	stw	fp,8(sp)
    eb38:	df000204 	addi	fp,sp,8
    eb3c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    eb40:	e0bfff17 	ldw	r2,-4(fp)
    eb44:	10bfffec 	andhi	r2,r2,65535
    eb48:	1004d43a 	srli	r2,r2,16
    eb4c:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    eb50:	e0bffe0b 	ldhu	r2,-8(fp)
}
    eb54:	e037883a 	mov	sp,fp
    eb58:	df000017 	ldw	fp,0(sp)
    eb5c:	dec00104 	addi	sp,sp,4
    eb60:	f800283a 	ret

0000eb64 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    eb64:	defffd04 	addi	sp,sp,-12
    eb68:	df000215 	stw	fp,8(sp)
    eb6c:	df000204 	addi	fp,sp,8
    eb70:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    eb74:	e0bfff17 	ldw	r2,-4(fp)
    eb78:	10a0000c 	andi	r2,r2,32768
    eb7c:	1004d3fa 	srli	r2,r2,15
    eb80:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    eb84:	e0bffe03 	ldbu	r2,-8(fp)
}
    eb88:	e037883a 	mov	sp,fp
    eb8c:	df000017 	ldw	fp,0(sp)
    eb90:	dec00104 	addi	sp,sp,4
    eb94:	f800283a 	ret

0000eb98 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    eb98:	defffd04 	addi	sp,sp,-12
    eb9c:	df000215 	stw	fp,8(sp)
    eba0:	df000204 	addi	fp,sp,8
    eba4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    eba8:	e0bfff17 	ldw	r2,-4(fp)
    ebac:	e0bffe05 	stb	r2,-8(fp)
	return data;
    ebb0:	e0bffe03 	ldbu	r2,-8(fp)
}
    ebb4:	e037883a 	mov	sp,fp
    ebb8:	df000017 	ldw	fp,0(sp)
    ebbc:	dec00104 	addi	sp,sp,4
    ebc0:	f800283a 	ret

0000ebc4 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    ebc4:	defffb04 	addi	sp,sp,-20
    ebc8:	dfc00415 	stw	ra,16(sp)
    ebcc:	df000315 	stw	fp,12(sp)
    ebd0:	df000304 	addi	fp,sp,12
    ebd4:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    ebd8:	e13fff17 	ldw	r4,-4(fp)
    ebdc:	01403fc4 	movi	r5,255
    ebe0:	000ee240 	call	ee24 <alt_up_ps2_write_data_byte_with_ack>
    ebe4:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    ebe8:	e0bffd17 	ldw	r2,-12(fp)
    ebec:	1004c03a 	cmpne	r2,r2,zero
    ebf0:	1000221e 	bne	r2,zero,ec7c <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    ebf4:	e17ffe04 	addi	r5,fp,-8
    ebf8:	e13fff17 	ldw	r4,-4(fp)
    ebfc:	000ee900 	call	ee90 <alt_up_ps2_read_data_byte_timeout>
    ec00:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    ec04:	e0bffd17 	ldw	r2,-12(fp)
    ec08:	1004c03a 	cmpne	r2,r2,zero
    ec0c:	10001b1e 	bne	r2,zero,ec7c <alt_up_ps2_init+0xb8>
    ec10:	e0bffe03 	ldbu	r2,-8(fp)
    ec14:	10803fcc 	andi	r2,r2,255
    ec18:	10802a98 	cmpnei	r2,r2,170
    ec1c:	1000171e 	bne	r2,zero,ec7c <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    ec20:	e17ffe04 	addi	r5,fp,-8
    ec24:	e13fff17 	ldw	r4,-4(fp)
    ec28:	000ee900 	call	ee90 <alt_up_ps2_read_data_byte_timeout>
    ec2c:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    ec30:	e0bffd17 	ldw	r2,-12(fp)
    ec34:	10bfe318 	cmpnei	r2,r2,-116
    ec38:	1000041e 	bne	r2,zero,ec4c <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    ec3c:	e0ffff17 	ldw	r3,-4(fp)
    ec40:	00800044 	movi	r2,1
    ec44:	18800d15 	stw	r2,52(r3)
    ec48:	00000c06 	br	ec7c <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    ec4c:	e0bffd17 	ldw	r2,-12(fp)
    ec50:	1004c03a 	cmpne	r2,r2,zero
    ec54:	1000091e 	bne	r2,zero,ec7c <alt_up_ps2_init+0xb8>
    ec58:	e0bffe03 	ldbu	r2,-8(fp)
    ec5c:	10803fcc 	andi	r2,r2,255
    ec60:	1004c03a 	cmpne	r2,r2,zero
    ec64:	1000051e 	bne	r2,zero,ec7c <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    ec68:	e0bfff17 	ldw	r2,-4(fp)
    ec6c:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    ec70:	e13fff17 	ldw	r4,-4(fp)
    ec74:	01403d04 	movi	r5,244
    ec78:	000ed3c0 	call	ed3c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    ec7c:	e037883a 	mov	sp,fp
    ec80:	dfc00117 	ldw	ra,4(sp)
    ec84:	df000017 	ldw	fp,0(sp)
    ec88:	dec00204 	addi	sp,sp,8
    ec8c:	f800283a 	ret

0000ec90 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    ec90:	defffd04 	addi	sp,sp,-12
    ec94:	df000215 	stw	fp,8(sp)
    ec98:	df000204 	addi	fp,sp,8
    ec9c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    eca0:	e0bfff17 	ldw	r2,-4(fp)
    eca4:	10800a17 	ldw	r2,40(r2)
    eca8:	10800104 	addi	r2,r2,4
    ecac:	10800037 	ldwio	r2,0(r2)
    ecb0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    ecb4:	e0bffe17 	ldw	r2,-8(fp)
    ecb8:	10800054 	ori	r2,r2,1
    ecbc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    ecc0:	e0bfff17 	ldw	r2,-4(fp)
    ecc4:	10800a17 	ldw	r2,40(r2)
    ecc8:	10800104 	addi	r2,r2,4
    eccc:	e0fffe17 	ldw	r3,-8(fp)
    ecd0:	10c00035 	stwio	r3,0(r2)
}
    ecd4:	e037883a 	mov	sp,fp
    ecd8:	df000017 	ldw	fp,0(sp)
    ecdc:	dec00104 	addi	sp,sp,4
    ece0:	f800283a 	ret

0000ece4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    ece4:	defffd04 	addi	sp,sp,-12
    ece8:	df000215 	stw	fp,8(sp)
    ecec:	df000204 	addi	fp,sp,8
    ecf0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    ecf4:	e0bfff17 	ldw	r2,-4(fp)
    ecf8:	10800a17 	ldw	r2,40(r2)
    ecfc:	10800104 	addi	r2,r2,4
    ed00:	10800037 	ldwio	r2,0(r2)
    ed04:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    ed08:	e0fffe17 	ldw	r3,-8(fp)
    ed0c:	00bfff84 	movi	r2,-2
    ed10:	1884703a 	and	r2,r3,r2
    ed14:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    ed18:	e0bfff17 	ldw	r2,-4(fp)
    ed1c:	10800a17 	ldw	r2,40(r2)
    ed20:	10800104 	addi	r2,r2,4
    ed24:	e0fffe17 	ldw	r3,-8(fp)
    ed28:	10c00035 	stwio	r3,0(r2)
}
    ed2c:	e037883a 	mov	sp,fp
    ed30:	df000017 	ldw	fp,0(sp)
    ed34:	dec00104 	addi	sp,sp,4
    ed38:	f800283a 	ret

0000ed3c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    ed3c:	defffa04 	addi	sp,sp,-24
    ed40:	dfc00515 	stw	ra,20(sp)
    ed44:	df000415 	stw	fp,16(sp)
    ed48:	df000404 	addi	fp,sp,16
    ed4c:	e13ffd15 	stw	r4,-12(fp)
    ed50:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    ed54:	e0bffd17 	ldw	r2,-12(fp)
    ed58:	10800a17 	ldw	r2,40(r2)
    ed5c:	e0fffe03 	ldbu	r3,-8(fp)
    ed60:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    ed64:	e0bffd17 	ldw	r2,-12(fp)
    ed68:	10800a17 	ldw	r2,40(r2)
    ed6c:	10800104 	addi	r2,r2,4
    ed70:	10800037 	ldwio	r2,0(r2)
    ed74:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    ed78:	e13ffc17 	ldw	r4,-16(fp)
    ed7c:	000eafc0 	call	eafc <read_CE_bit>
    ed80:	10803fcc 	andi	r2,r2,255
    ed84:	1005003a 	cmpeq	r2,r2,zero
    ed88:	1000031e 	bne	r2,zero,ed98 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    ed8c:	00bffec4 	movi	r2,-5
    ed90:	e0bfff15 	stw	r2,-4(fp)
    ed94:	00000106 	br	ed9c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    ed98:	e03fff15 	stw	zero,-4(fp)
    ed9c:	e0bfff17 	ldw	r2,-4(fp)
}
    eda0:	e037883a 	mov	sp,fp
    eda4:	dfc00117 	ldw	ra,4(sp)
    eda8:	df000017 	ldw	fp,0(sp)
    edac:	dec00204 	addi	sp,sp,8
    edb0:	f800283a 	ret

0000edb4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    edb4:	defffb04 	addi	sp,sp,-20
    edb8:	dfc00415 	stw	ra,16(sp)
    edbc:	df000315 	stw	fp,12(sp)
    edc0:	df000304 	addi	fp,sp,12
    edc4:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    edc8:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    edcc:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    edd0:	e17ffd44 	addi	r5,fp,-11
    edd4:	e13ffe17 	ldw	r4,-8(fp)
    edd8:	000ee900 	call	ee90 <alt_up_ps2_read_data_byte_timeout>
    eddc:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    ede0:	e0bffd03 	ldbu	r2,-12(fp)
    ede4:	1004c03a 	cmpne	r2,r2,zero
    ede8:	1000061e 	bne	r2,zero,ee04 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    edec:	e0bffd43 	ldbu	r2,-11(fp)
    edf0:	10803fcc 	andi	r2,r2,255
    edf4:	10803e98 	cmpnei	r2,r2,250
    edf8:	103ff51e 	bne	r2,zero,edd0 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    edfc:	e03fff15 	stw	zero,-4(fp)
    ee00:	00000206 	br	ee0c <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    ee04:	e0bffd03 	ldbu	r2,-12(fp)
    ee08:	e0bfff15 	stw	r2,-4(fp)
    ee0c:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    ee10:	e037883a 	mov	sp,fp
    ee14:	dfc00117 	ldw	ra,4(sp)
    ee18:	df000017 	ldw	fp,0(sp)
    ee1c:	dec00204 	addi	sp,sp,8
    ee20:	f800283a 	ret

0000ee24 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    ee24:	defff904 	addi	sp,sp,-28
    ee28:	dfc00615 	stw	ra,24(sp)
    ee2c:	df000515 	stw	fp,20(sp)
    ee30:	df000504 	addi	fp,sp,20
    ee34:	e13ffd15 	stw	r4,-12(fp)
    ee38:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    ee3c:	e17ffe03 	ldbu	r5,-8(fp)
    ee40:	e13ffd17 	ldw	r4,-12(fp)
    ee44:	000ed3c0 	call	ed3c <alt_up_ps2_write_data_byte>
    ee48:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    ee4c:	e0bffc17 	ldw	r2,-16(fp)
    ee50:	1005003a 	cmpeq	r2,r2,zero
    ee54:	1000031e 	bne	r2,zero,ee64 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    ee58:	e0bffc17 	ldw	r2,-16(fp)
    ee5c:	e0bfff15 	stw	r2,-4(fp)
    ee60:	00000506 	br	ee78 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    ee64:	e13ffd17 	ldw	r4,-12(fp)
    ee68:	000edb40 	call	edb4 <alt_up_ps2_wait_for_ack>
    ee6c:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    ee70:	e0bffb17 	ldw	r2,-20(fp)
    ee74:	e0bfff15 	stw	r2,-4(fp)
    ee78:	e0bfff17 	ldw	r2,-4(fp)
}
    ee7c:	e037883a 	mov	sp,fp
    ee80:	dfc00117 	ldw	ra,4(sp)
    ee84:	df000017 	ldw	fp,0(sp)
    ee88:	dec00204 	addi	sp,sp,8
    ee8c:	f800283a 	ret

0000ee90 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    ee90:	defff904 	addi	sp,sp,-28
    ee94:	dfc00615 	stw	ra,24(sp)
    ee98:	df000515 	stw	fp,20(sp)
    ee9c:	df000504 	addi	fp,sp,20
    eea0:	e13ffd15 	stw	r4,-12(fp)
    eea4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    eea8:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    eeac:	e03ffb15 	stw	zero,-20(fp)
    eeb0:	00000006 	br	eeb4 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    eeb4:	e0bffb17 	ldw	r2,-20(fp)
    eeb8:	10800044 	addi	r2,r2,1
    eebc:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    eec0:	e0bffd17 	ldw	r2,-12(fp)
    eec4:	10800a17 	ldw	r2,40(r2)
    eec8:	10800037 	ldwio	r2,0(r2)
    eecc:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    eed0:	e13ffc17 	ldw	r4,-16(fp)
    eed4:	000eb640 	call	eb64 <read_data_valid>
    eed8:	10803fcc 	andi	r2,r2,255
    eedc:	1005003a 	cmpeq	r2,r2,zero
    eee0:	1000071e 	bne	r2,zero,ef00 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    eee4:	e13ffc17 	ldw	r4,-16(fp)
    eee8:	000eb980 	call	eb98 <read_data_byte>
    eeec:	1007883a 	mov	r3,r2
    eef0:	e0bffe17 	ldw	r2,-8(fp)
    eef4:	10c00005 	stb	r3,0(r2)
			return 0;
    eef8:	e03fff15 	stw	zero,-4(fp)
    eefc:	00000a06 	br	ef28 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    ef00:	e0bffd17 	ldw	r2,-12(fp)
    ef04:	10800c17 	ldw	r2,48(r2)
    ef08:	1005003a 	cmpeq	r2,r2,zero
    ef0c:	103fe91e 	bne	r2,zero,eeb4 <alt_up_ps2_read_data_byte_timeout+0x24>
    ef10:	e0bffd17 	ldw	r2,-12(fp)
    ef14:	10c00c17 	ldw	r3,48(r2)
    ef18:	e0bffb17 	ldw	r2,-20(fp)
    ef1c:	18bfe52e 	bgeu	r3,r2,eeb4 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    ef20:	00bfe304 	movi	r2,-116
    ef24:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    ef28:	e0bfff17 	ldw	r2,-4(fp)
}
    ef2c:	e037883a 	mov	sp,fp
    ef30:	dfc00117 	ldw	ra,4(sp)
    ef34:	df000017 	ldw	fp,0(sp)
    ef38:	dec00204 	addi	sp,sp,8
    ef3c:	f800283a 	ret

0000ef40 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    ef40:	defffa04 	addi	sp,sp,-24
    ef44:	dfc00515 	stw	ra,20(sp)
    ef48:	df000415 	stw	fp,16(sp)
    ef4c:	df000404 	addi	fp,sp,16
    ef50:	e13ffd15 	stw	r4,-12(fp)
    ef54:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    ef58:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    ef5c:	e0bffd17 	ldw	r2,-12(fp)
    ef60:	10800a17 	ldw	r2,40(r2)
    ef64:	10800037 	ldwio	r2,0(r2)
    ef68:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    ef6c:	e13ffc17 	ldw	r4,-16(fp)
    ef70:	000eb640 	call	eb64 <read_data_valid>
    ef74:	10803fcc 	andi	r2,r2,255
    ef78:	1005003a 	cmpeq	r2,r2,zero
    ef7c:	1000071e 	bne	r2,zero,ef9c <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    ef80:	e13ffc17 	ldw	r4,-16(fp)
    ef84:	000eb980 	call	eb98 <read_data_byte>
    ef88:	1007883a 	mov	r3,r2
    ef8c:	e0bffe17 	ldw	r2,-8(fp)
    ef90:	10c00005 	stb	r3,0(r2)
		return 0;
    ef94:	e03fff15 	stw	zero,-4(fp)
    ef98:	00000206 	br	efa4 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    ef9c:	00bfffc4 	movi	r2,-1
    efa0:	e0bfff15 	stw	r2,-4(fp)
    efa4:	e0bfff17 	ldw	r2,-4(fp)
}
    efa8:	e037883a 	mov	sp,fp
    efac:	dfc00117 	ldw	ra,4(sp)
    efb0:	df000017 	ldw	fp,0(sp)
    efb4:	dec00204 	addi	sp,sp,8
    efb8:	f800283a 	ret

0000efbc <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    efbc:	defffb04 	addi	sp,sp,-20
    efc0:	dfc00415 	stw	ra,16(sp)
    efc4:	df000315 	stw	fp,12(sp)
    efc8:	df000304 	addi	fp,sp,12
    efcc:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    efd0:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    efd4:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    efd8:	e0bfff17 	ldw	r2,-4(fp)
    efdc:	10800a17 	ldw	r2,40(r2)
    efe0:	10800037 	ldwio	r2,0(r2)
    efe4:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    efe8:	e13ffd17 	ldw	r4,-12(fp)
    efec:	000eb300 	call	eb30 <read_num_bytes_available>
    eff0:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    eff4:	e0bffe0b 	ldhu	r2,-8(fp)
    eff8:	1004c03a 	cmpne	r2,r2,zero
    effc:	103ff61e 	bne	r2,zero,efd8 <alt_up_ps2_clear_fifo+0x1c>
}
    f000:	e037883a 	mov	sp,fp
    f004:	dfc00117 	ldw	ra,4(sp)
    f008:	df000017 	ldw	fp,0(sp)
    f00c:	dec00204 	addi	sp,sp,8
    f010:	f800283a 	ret

0000f014 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    f014:	defff704 	addi	sp,sp,-36
    f018:	dfc00815 	stw	ra,32(sp)
    f01c:	df000715 	stw	fp,28(sp)
    f020:	df000704 	addi	fp,sp,28
    f024:	e13ffc15 	stw	r4,-16(fp)
    f028:	e17ffd15 	stw	r5,-12(fp)
    f02c:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f030:	e0bffc17 	ldw	r2,-16(fp)
    f034:	10800017 	ldw	r2,0(r2)
    f038:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    f03c:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    f040:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    f044:	e0fff917 	ldw	r3,-28(fp)
    f048:	e0bffe17 	ldw	r2,-8(fp)
    f04c:	18bffd16 	blt	r3,r2,f044 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    f050:	e17ffd17 	ldw	r5,-12(fp)
    f054:	e0bffd17 	ldw	r2,-12(fp)
    f058:	10800044 	addi	r2,r2,1
    f05c:	e0bffd15 	stw	r2,-12(fp)
    f060:	e13ffb17 	ldw	r4,-20(fp)
    f064:	000ee900 	call	ee90 <alt_up_ps2_read_data_byte_timeout>
    f068:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    f06c:	e0bffa17 	ldw	r2,-24(fp)
    f070:	1005003a 	cmpeq	r2,r2,zero
    f074:	1000031e 	bne	r2,zero,f084 <alt_up_ps2_read_fd+0x70>
			return count;
    f078:	e0bff917 	ldw	r2,-28(fp)
    f07c:	e0bfff15 	stw	r2,-4(fp)
    f080:	00000506 	br	f098 <alt_up_ps2_read_fd+0x84>
		count++;
    f084:	e0bff917 	ldw	r2,-28(fp)
    f088:	10800044 	addi	r2,r2,1
    f08c:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    f090:	e0bff917 	ldw	r2,-28(fp)
    f094:	e0bfff15 	stw	r2,-4(fp)
    f098:	e0bfff17 	ldw	r2,-4(fp)
}
    f09c:	e037883a 	mov	sp,fp
    f0a0:	dfc00117 	ldw	ra,4(sp)
    f0a4:	df000017 	ldw	fp,0(sp)
    f0a8:	dec00204 	addi	sp,sp,8
    f0ac:	f800283a 	ret

0000f0b0 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f0b0:	defff704 	addi	sp,sp,-36
    f0b4:	dfc00815 	stw	ra,32(sp)
    f0b8:	df000715 	stw	fp,28(sp)
    f0bc:	df000704 	addi	fp,sp,28
    f0c0:	e13ffc15 	stw	r4,-16(fp)
    f0c4:	e17ffd15 	stw	r5,-12(fp)
    f0c8:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    f0cc:	e0bffc17 	ldw	r2,-16(fp)
    f0d0:	10800017 	ldw	r2,0(r2)
    f0d4:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    f0d8:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    f0dc:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    f0e0:	00001206 	br	f12c <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    f0e4:	e0bffd17 	ldw	r2,-12(fp)
    f0e8:	10800003 	ldbu	r2,0(r2)
    f0ec:	11403fcc 	andi	r5,r2,255
    f0f0:	e0bffd17 	ldw	r2,-12(fp)
    f0f4:	10800044 	addi	r2,r2,1
    f0f8:	e0bffd15 	stw	r2,-12(fp)
    f0fc:	e13ffb17 	ldw	r4,-20(fp)
    f100:	000ed3c0 	call	ed3c <alt_up_ps2_write_data_byte>
    f104:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    f108:	e0bffa17 	ldw	r2,-24(fp)
    f10c:	1005003a 	cmpeq	r2,r2,zero
    f110:	1000031e 	bne	r2,zero,f120 <alt_up_ps2_write_fd+0x70>
			return count;
    f114:	e0bff917 	ldw	r2,-28(fp)
    f118:	e0bfff15 	stw	r2,-4(fp)
    f11c:	00000806 	br	f140 <alt_up_ps2_write_fd+0x90>
		count++;
    f120:	e0bff917 	ldw	r2,-28(fp)
    f124:	10800044 	addi	r2,r2,1
    f128:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    f12c:	e0fff917 	ldw	r3,-28(fp)
    f130:	e0bffe17 	ldw	r2,-8(fp)
    f134:	18bfeb16 	blt	r3,r2,f0e4 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    f138:	e0bff917 	ldw	r2,-28(fp)
    f13c:	e0bfff15 	stw	r2,-4(fp)
    f140:	e0bfff17 	ldw	r2,-4(fp)
}
    f144:	e037883a 	mov	sp,fp
    f148:	dfc00117 	ldw	ra,4(sp)
    f14c:	df000017 	ldw	fp,0(sp)
    f150:	dec00204 	addi	sp,sp,8
    f154:	f800283a 	ret

0000f158 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    f158:	defffc04 	addi	sp,sp,-16
    f15c:	dfc00315 	stw	ra,12(sp)
    f160:	df000215 	stw	fp,8(sp)
    f164:	df000204 	addi	fp,sp,8
    f168:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    f16c:	e13fff17 	ldw	r4,-4(fp)
    f170:	01400074 	movhi	r5,1
    f174:	2952f604 	addi	r5,r5,19416
    f178:	00110ec0 	call	110ec <alt_find_dev>
    f17c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f180:	e0bffe17 	ldw	r2,-8(fp)
}
    f184:	e037883a 	mov	sp,fp
    f188:	dfc00117 	ldw	ra,4(sp)
    f18c:	df000017 	ldw	fp,0(sp)
    f190:	dec00204 	addi	sp,sp,8
    f194:	f800283a 	ret

0000f198 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f198:	defffd04 	addi	sp,sp,-12
    f19c:	df000215 	stw	fp,8(sp)
    f1a0:	df000204 	addi	fp,sp,8
    f1a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f1a8:	e0bfff17 	ldw	r2,-4(fp)
    f1ac:	10800a17 	ldw	r2,40(r2)
    f1b0:	10800104 	addi	r2,r2,4
    f1b4:	10800037 	ldwio	r2,0(r2)
    f1b8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    f1bc:	e0bffe17 	ldw	r2,-8(fp)
    f1c0:	10800054 	ori	r2,r2,1
    f1c4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f1c8:	e0bfff17 	ldw	r2,-4(fp)
    f1cc:	10800a17 	ldw	r2,40(r2)
    f1d0:	10800104 	addi	r2,r2,4
    f1d4:	e0fffe17 	ldw	r3,-8(fp)
    f1d8:	10c00035 	stwio	r3,0(r2)
}
    f1dc:	e037883a 	mov	sp,fp
    f1e0:	df000017 	ldw	fp,0(sp)
    f1e4:	dec00104 	addi	sp,sp,4
    f1e8:	f800283a 	ret

0000f1ec <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    f1ec:	defffd04 	addi	sp,sp,-12
    f1f0:	df000215 	stw	fp,8(sp)
    f1f4:	df000204 	addi	fp,sp,8
    f1f8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f1fc:	e0bfff17 	ldw	r2,-4(fp)
    f200:	10800a17 	ldw	r2,40(r2)
    f204:	10800104 	addi	r2,r2,4
    f208:	10800037 	ldwio	r2,0(r2)
    f20c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    f210:	e0fffe17 	ldw	r3,-8(fp)
    f214:	00bfff84 	movi	r2,-2
    f218:	1884703a 	and	r2,r3,r2
    f21c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    f220:	e0bfff17 	ldw	r2,-4(fp)
    f224:	10800a17 	ldw	r2,40(r2)
    f228:	10800104 	addi	r2,r2,4
    f22c:	e0fffe17 	ldw	r3,-8(fp)
    f230:	10c00035 	stwio	r3,0(r2)
}
    f234:	e037883a 	mov	sp,fp
    f238:	df000017 	ldw	fp,0(sp)
    f23c:	dec00104 	addi	sp,sp,4
    f240:	f800283a 	ret

0000f244 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    f244:	defffd04 	addi	sp,sp,-12
    f248:	df000215 	stw	fp,8(sp)
    f24c:	df000204 	addi	fp,sp,8
    f250:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    f254:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    f258:	e0bfff17 	ldw	r2,-4(fp)
    f25c:	10800a17 	ldw	r2,40(r2)
    f260:	10800084 	addi	r2,r2,2
    f264:	1080002b 	ldhuio	r2,0(r2)
    f268:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    f26c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    f270:	e037883a 	mov	sp,fp
    f274:	df000017 	ldw	fp,0(sp)
    f278:	dec00104 	addi	sp,sp,4
    f27c:	f800283a 	ret

0000f280 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    f280:	defffd04 	addi	sp,sp,-12
    f284:	df000215 	stw	fp,8(sp)
    f288:	df000204 	addi	fp,sp,8
    f28c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    f290:	e0bfff17 	ldw	r2,-4(fp)
    f294:	10800a17 	ldw	r2,40(r2)
    f298:	10800104 	addi	r2,r2,4
    f29c:	10800037 	ldwio	r2,0(r2)
    f2a0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    f2a4:	e0bffe17 	ldw	r2,-8(fp)
    f2a8:	10bfffec 	andhi	r2,r2,65535
    f2ac:	1004d43a 	srli	r2,r2,16
}
    f2b0:	e037883a 	mov	sp,fp
    f2b4:	df000017 	ldw	fp,0(sp)
    f2b8:	dec00104 	addi	sp,sp,4
    f2bc:	f800283a 	ret

0000f2c0 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    f2c0:	defffc04 	addi	sp,sp,-16
    f2c4:	df000315 	stw	fp,12(sp)
    f2c8:	df000304 	addi	fp,sp,12
    f2cc:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    f2d0:	e0bffe17 	ldw	r2,-8(fp)
    f2d4:	1080800c 	andi	r2,r2,512
    f2d8:	1004d27a 	srli	r2,r2,9
    f2dc:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    f2e0:	e0bffd17 	ldw	r2,-12(fp)
    f2e4:	1005003a 	cmpeq	r2,r2,zero
    f2e8:	1000031e 	bne	r2,zero,f2f8 <alt_up_rs232_check_parity+0x38>
    f2ec:	00bfffc4 	movi	r2,-1
    f2f0:	e0bfff15 	stw	r2,-4(fp)
    f2f4:	00000106 	br	f2fc <alt_up_rs232_check_parity+0x3c>
    f2f8:	e03fff15 	stw	zero,-4(fp)
    f2fc:	e0bfff17 	ldw	r2,-4(fp)
}
    f300:	e037883a 	mov	sp,fp
    f304:	df000017 	ldw	fp,0(sp)
    f308:	dec00104 	addi	sp,sp,4
    f30c:	f800283a 	ret

0000f310 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    f310:	defffc04 	addi	sp,sp,-16
    f314:	df000315 	stw	fp,12(sp)
    f318:	df000304 	addi	fp,sp,12
    f31c:	e13ffe15 	stw	r4,-8(fp)
    f320:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f324:	e0bffe17 	ldw	r2,-8(fp)
    f328:	10800a17 	ldw	r2,40(r2)
    f32c:	10800037 	ldwio	r2,0(r2)
    f330:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    f334:	e0bffe17 	ldw	r2,-8(fp)
    f338:	10800a17 	ldw	r2,40(r2)
    f33c:	e0ffff03 	ldbu	r3,-4(fp)
    f340:	10c00035 	stwio	r3,0(r2)
	return 0;
    f344:	0005883a 	mov	r2,zero
}
    f348:	e037883a 	mov	sp,fp
    f34c:	df000017 	ldw	fp,0(sp)
    f350:	dec00104 	addi	sp,sp,4
    f354:	f800283a 	ret

0000f358 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    f358:	defffa04 	addi	sp,sp,-24
    f35c:	dfc00515 	stw	ra,20(sp)
    f360:	df000415 	stw	fp,16(sp)
    f364:	df000404 	addi	fp,sp,16
    f368:	e13ffd15 	stw	r4,-12(fp)
    f36c:	e17ffe15 	stw	r5,-8(fp)
    f370:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f374:	e0bffd17 	ldw	r2,-12(fp)
    f378:	10800a17 	ldw	r2,40(r2)
    f37c:	10800037 	ldwio	r2,0(r2)
    f380:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    f384:	e0bffc17 	ldw	r2,-16(fp)
    f388:	1007883a 	mov	r3,r2
    f38c:	e0bffe17 	ldw	r2,-8(fp)
    f390:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    f394:	e13ffc17 	ldw	r4,-16(fp)
    f398:	000f2c00 	call	f2c0 <alt_up_rs232_check_parity>
    f39c:	1007883a 	mov	r3,r2
    f3a0:	e0bfff17 	ldw	r2,-4(fp)
    f3a4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    f3a8:	e0bffc17 	ldw	r2,-16(fp)
    f3ac:	10a0000c 	andi	r2,r2,32768
    f3b0:	1004d3fa 	srli	r2,r2,15
    f3b4:	10bfffc4 	addi	r2,r2,-1
}
    f3b8:	e037883a 	mov	sp,fp
    f3bc:	dfc00117 	ldw	ra,4(sp)
    f3c0:	df000017 	ldw	fp,0(sp)
    f3c4:	dec00204 	addi	sp,sp,8
    f3c8:	f800283a 	ret

0000f3cc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    f3cc:	defff804 	addi	sp,sp,-32
    f3d0:	dfc00715 	stw	ra,28(sp)
    f3d4:	df000615 	stw	fp,24(sp)
    f3d8:	df000604 	addi	fp,sp,24
    f3dc:	e13ffd15 	stw	r4,-12(fp)
    f3e0:	e17ffe15 	stw	r5,-8(fp)
    f3e4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f3e8:	e0bffd17 	ldw	r2,-12(fp)
    f3ec:	10800017 	ldw	r2,0(r2)
    f3f0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    f3f4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    f3f8:	00000c06 	br	f42c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    f3fc:	e17ffe17 	ldw	r5,-8(fp)
    f400:	e0bffe17 	ldw	r2,-8(fp)
    f404:	10800044 	addi	r2,r2,1
    f408:	e0bffe15 	stw	r2,-8(fp)
    f40c:	e1bffc04 	addi	r6,fp,-16
    f410:	e13ffb17 	ldw	r4,-20(fp)
    f414:	000f3580 	call	f358 <alt_up_rs232_read_data>
    f418:	1004c03a 	cmpne	r2,r2,zero
    f41c:	1000091e 	bne	r2,zero,f444 <alt_up_rs232_read_fd+0x78>
			count++;
    f420:	e0bffa17 	ldw	r2,-24(fp)
    f424:	10800044 	addi	r2,r2,1
    f428:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f42c:	e0bfff17 	ldw	r2,-4(fp)
    f430:	10bfffc4 	addi	r2,r2,-1
    f434:	e0bfff15 	stw	r2,-4(fp)
    f438:	e0bfff17 	ldw	r2,-4(fp)
    f43c:	10bfffd8 	cmpnei	r2,r2,-1
    f440:	103fee1e 	bne	r2,zero,f3fc <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    f444:	e0bffa17 	ldw	r2,-24(fp)
}
    f448:	e037883a 	mov	sp,fp
    f44c:	dfc00117 	ldw	ra,4(sp)
    f450:	df000017 	ldw	fp,0(sp)
    f454:	dec00204 	addi	sp,sp,8
    f458:	f800283a 	ret

0000f45c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f45c:	defff904 	addi	sp,sp,-28
    f460:	dfc00615 	stw	ra,24(sp)
    f464:	df000515 	stw	fp,20(sp)
    f468:	df000504 	addi	fp,sp,20
    f46c:	e13ffd15 	stw	r4,-12(fp)
    f470:	e17ffe15 	stw	r5,-8(fp)
    f474:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f478:	e0bffd17 	ldw	r2,-12(fp)
    f47c:	10800017 	ldw	r2,0(r2)
    f480:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    f484:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    f488:	00000d06 	br	f4c0 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    f48c:	e0bffe17 	ldw	r2,-8(fp)
    f490:	10800003 	ldbu	r2,0(r2)
    f494:	11403fcc 	andi	r5,r2,255
    f498:	e13ffc17 	ldw	r4,-16(fp)
    f49c:	000f3100 	call	f310 <alt_up_rs232_write_data>
    f4a0:	1004c03a 	cmpne	r2,r2,zero
    f4a4:	10000c1e 	bne	r2,zero,f4d8 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    f4a8:	e0bffb17 	ldw	r2,-20(fp)
    f4ac:	10800044 	addi	r2,r2,1
    f4b0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    f4b4:	e0bffe17 	ldw	r2,-8(fp)
    f4b8:	10800044 	addi	r2,r2,1
    f4bc:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    f4c0:	e0bfff17 	ldw	r2,-4(fp)
    f4c4:	10bfffc4 	addi	r2,r2,-1
    f4c8:	e0bfff15 	stw	r2,-4(fp)
    f4cc:	e0bfff17 	ldw	r2,-4(fp)
    f4d0:	10bfffd8 	cmpnei	r2,r2,-1
    f4d4:	103fed1e 	bne	r2,zero,f48c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    f4d8:	e0bffb17 	ldw	r2,-20(fp)
}
    f4dc:	e037883a 	mov	sp,fp
    f4e0:	dfc00117 	ldw	ra,4(sp)
    f4e4:	df000017 	ldw	fp,0(sp)
    f4e8:	dec00204 	addi	sp,sp,8
    f4ec:	f800283a 	ret

0000f4f0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    f4f0:	defffc04 	addi	sp,sp,-16
    f4f4:	dfc00315 	stw	ra,12(sp)
    f4f8:	df000215 	stw	fp,8(sp)
    f4fc:	df000204 	addi	fp,sp,8
    f500:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    f504:	e13fff17 	ldw	r4,-4(fp)
    f508:	01400074 	movhi	r5,1
    f50c:	2952f604 	addi	r5,r5,19416
    f510:	00110ec0 	call	110ec <alt_find_dev>
    f514:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f518:	e0bffe17 	ldw	r2,-8(fp)
}
    f51c:	e037883a 	mov	sp,fp
    f520:	dfc00117 	ldw	ra,4(sp)
    f524:	df000017 	ldw	fp,0(sp)
    f528:	dec00204 	addi	sp,sp,8
    f52c:	f800283a 	ret

0000f530 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    f530:	defffc04 	addi	sp,sp,-16
    f534:	dfc00315 	stw	ra,12(sp)
    f538:	df000215 	stw	fp,8(sp)
    f53c:	df000204 	addi	fp,sp,8
    f540:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    f544:	e0bfff17 	ldw	r2,-4(fp)
    f548:	10800217 	ldw	r2,8(r2)
    f54c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    f550:	00000c06 	br	f584 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    f554:	e13ffe17 	ldw	r4,-8(fp)
    f558:	01400074 	movhi	r5,1
    f55c:	294b3304 	addi	r5,r5,11468
    f560:	0009ae80 	call	9ae8 <strcmp>
    f564:	1004c03a 	cmpne	r2,r2,zero
    f568:	1000031e 	bne	r2,zero,f578 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    f56c:	e0bffe17 	ldw	r2,-8(fp)
    f570:	10000005 	stb	zero,0(r2)
			break;
    f574:	00000a06 	br	f5a0 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    f578:	e0bffe17 	ldw	r2,-8(fp)
    f57c:	10800044 	addi	r2,r2,1
    f580:	e0bffe15 	stw	r2,-8(fp)
    f584:	e0bffe17 	ldw	r2,-8(fp)
    f588:	10800003 	ldbu	r2,0(r2)
    f58c:	10803fcc 	andi	r2,r2,255
    f590:	1080201c 	xori	r2,r2,128
    f594:	10bfe004 	addi	r2,r2,-128
    f598:	1004c03a 	cmpne	r2,r2,zero
    f59c:	103fed1e 	bne	r2,zero,f554 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    f5a0:	e037883a 	mov	sp,fp
    f5a4:	dfc00117 	ldw	ra,4(sp)
    f5a8:	df000017 	ldw	fp,0(sp)
    f5ac:	dec00204 	addi	sp,sp,8
    f5b0:	f800283a 	ret

0000f5b4 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    f5b4:	defffc04 	addi	sp,sp,-16
    f5b8:	dfc00315 	stw	ra,12(sp)
    f5bc:	df000215 	stw	fp,8(sp)
    f5c0:	df000204 	addi	fp,sp,8
    f5c4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    f5c8:	e13fff17 	ldw	r4,-4(fp)
    f5cc:	01400074 	movhi	r5,1
    f5d0:	2952f604 	addi	r5,r5,19416
    f5d4:	00110ec0 	call	110ec <alt_find_dev>
    f5d8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f5dc:	e0bffe17 	ldw	r2,-8(fp)
}
    f5e0:	e037883a 	mov	sp,fp
    f5e4:	dfc00117 	ldw	ra,4(sp)
    f5e8:	df000017 	ldw	fp,0(sp)
    f5ec:	dec00204 	addi	sp,sp,8
    f5f0:	f800283a 	ret

0000f5f4 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    f5f4:	defff904 	addi	sp,sp,-28
    f5f8:	df000615 	stw	fp,24(sp)
    f5fc:	df000604 	addi	fp,sp,24
    f600:	e13ffb15 	stw	r4,-20(fp)
    f604:	e1bffd15 	stw	r6,-12(fp)
    f608:	e1fffe15 	stw	r7,-8(fp)
    f60c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f610:	e0bffb17 	ldw	r2,-20(fp)
    f614:	10c00c17 	ldw	r3,48(r2)
    f618:	e0bffd17 	ldw	r2,-12(fp)
    f61c:	10c0042e 	bgeu	r2,r3,f630 <alt_up_char_buffer_draw+0x3c>
    f620:	e0bffb17 	ldw	r2,-20(fp)
    f624:	10c00d17 	ldw	r3,52(r2)
    f628:	e0bffe17 	ldw	r2,-8(fp)
    f62c:	10c00336 	bltu	r2,r3,f63c <alt_up_char_buffer_draw+0x48>
		return -1;
    f630:	00bfffc4 	movi	r2,-1
    f634:	e0bfff15 	stw	r2,-4(fp)
    f638:	00001d06 	br	f6b0 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    f63c:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    f640:	e0bffb17 	ldw	r2,-20(fp)
    f644:	10c00f17 	ldw	r3,60(r2)
    f648:	e0bffd17 	ldw	r2,-12(fp)
    f64c:	1886703a 	and	r3,r3,r2
    f650:	e0bffb17 	ldw	r2,-20(fp)
    f654:	10800e17 	ldw	r2,56(r2)
    f658:	1886983a 	sll	r3,r3,r2
    f65c:	e0bffa17 	ldw	r2,-24(fp)
    f660:	10c4b03a 	or	r2,r2,r3
    f664:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    f668:	e0bffb17 	ldw	r2,-20(fp)
    f66c:	10c01117 	ldw	r3,68(r2)
    f670:	e0bffe17 	ldw	r2,-8(fp)
    f674:	1886703a 	and	r3,r3,r2
    f678:	e0bffb17 	ldw	r2,-20(fp)
    f67c:	10801017 	ldw	r2,64(r2)
    f680:	1886983a 	sll	r3,r3,r2
    f684:	e0bffa17 	ldw	r2,-24(fp)
    f688:	10c4b03a 	or	r2,r2,r3
    f68c:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    f690:	e0bffb17 	ldw	r2,-20(fp)
    f694:	10800b17 	ldw	r2,44(r2)
    f698:	1007883a 	mov	r3,r2
    f69c:	e0bffa17 	ldw	r2,-24(fp)
    f6a0:	1885883a 	add	r2,r3,r2
    f6a4:	e0fffc03 	ldbu	r3,-16(fp)
    f6a8:	10c00025 	stbio	r3,0(r2)

	return 0;
    f6ac:	e03fff15 	stw	zero,-4(fp)
    f6b0:	e0bfff17 	ldw	r2,-4(fp)
}
    f6b4:	e037883a 	mov	sp,fp
    f6b8:	df000017 	ldw	fp,0(sp)
    f6bc:	dec00104 	addi	sp,sp,4
    f6c0:	f800283a 	ret

0000f6c4 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    f6c4:	defff904 	addi	sp,sp,-28
    f6c8:	df000615 	stw	fp,24(sp)
    f6cc:	df000604 	addi	fp,sp,24
    f6d0:	e13ffb15 	stw	r4,-20(fp)
    f6d4:	e17ffc15 	stw	r5,-16(fp)
    f6d8:	e1bffd15 	stw	r6,-12(fp)
    f6dc:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f6e0:	e0bffb17 	ldw	r2,-20(fp)
    f6e4:	10c00c17 	ldw	r3,48(r2)
    f6e8:	e0bffd17 	ldw	r2,-12(fp)
    f6ec:	10c0042e 	bgeu	r2,r3,f700 <alt_up_char_buffer_string+0x3c>
    f6f0:	e0bffb17 	ldw	r2,-20(fp)
    f6f4:	10c00d17 	ldw	r3,52(r2)
    f6f8:	e0bffe17 	ldw	r2,-8(fp)
    f6fc:	10c00336 	bltu	r2,r3,f70c <alt_up_char_buffer_string+0x48>
		return -1;
    f700:	00bfffc4 	movi	r2,-1
    f704:	e0bfff15 	stw	r2,-4(fp)
    f708:	00002e06 	br	f7c4 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    f70c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    f710:	e0bffb17 	ldw	r2,-20(fp)
    f714:	10801017 	ldw	r2,64(r2)
    f718:	1007883a 	mov	r3,r2
    f71c:	e0bffe17 	ldw	r2,-8(fp)
    f720:	10c6983a 	sll	r3,r2,r3
    f724:	e0bffd17 	ldw	r2,-12(fp)
    f728:	1885883a 	add	r2,r3,r2
    f72c:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    f730:	00001c06 	br	f7a4 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    f734:	e0bffb17 	ldw	r2,-20(fp)
    f738:	10800b17 	ldw	r2,44(r2)
    f73c:	1007883a 	mov	r3,r2
    f740:	e0bffa17 	ldw	r2,-24(fp)
    f744:	1889883a 	add	r4,r3,r2
    f748:	e0bffc17 	ldw	r2,-16(fp)
    f74c:	10800003 	ldbu	r2,0(r2)
    f750:	10c03fcc 	andi	r3,r2,255
    f754:	18c0201c 	xori	r3,r3,128
    f758:	18ffe004 	addi	r3,r3,-128
    f75c:	2005883a 	mov	r2,r4
    f760:	10c00025 	stbio	r3,0(r2)
		++ptr;
    f764:	e0bffc17 	ldw	r2,-16(fp)
    f768:	10800044 	addi	r2,r2,1
    f76c:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    f770:	e0bffd17 	ldw	r2,-12(fp)
    f774:	10800044 	addi	r2,r2,1
    f778:	e0bffd15 	stw	r2,-12(fp)
    f77c:	e0bffb17 	ldw	r2,-20(fp)
    f780:	10c00c17 	ldw	r3,48(r2)
    f784:	e0bffd17 	ldw	r2,-12(fp)
    f788:	10c00336 	bltu	r2,r3,f798 <alt_up_char_buffer_string+0xd4>
			return -1;
    f78c:	00bfffc4 	movi	r2,-1
    f790:	e0bfff15 	stw	r2,-4(fp)
    f794:	00000b06 	br	f7c4 <alt_up_char_buffer_string+0x100>
		++offset;
    f798:	e0bffa17 	ldw	r2,-24(fp)
    f79c:	10800044 	addi	r2,r2,1
    f7a0:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    f7a4:	e0bffc17 	ldw	r2,-16(fp)
    f7a8:	10800003 	ldbu	r2,0(r2)
    f7ac:	10803fcc 	andi	r2,r2,255
    f7b0:	1080201c 	xori	r2,r2,128
    f7b4:	10bfe004 	addi	r2,r2,-128
    f7b8:	1004c03a 	cmpne	r2,r2,zero
    f7bc:	103fdd1e 	bne	r2,zero,f734 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    f7c0:	e03fff15 	stw	zero,-4(fp)
    f7c4:	e0bfff17 	ldw	r2,-4(fp)
}
    f7c8:	e037883a 	mov	sp,fp
    f7cc:	df000017 	ldw	fp,0(sp)
    f7d0:	dec00104 	addi	sp,sp,4
    f7d4:	f800283a 	ret

0000f7d8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    f7d8:	defffe04 	addi	sp,sp,-8
    f7dc:	df000115 	stw	fp,4(sp)
    f7e0:	df000104 	addi	fp,sp,4
    f7e4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    f7e8:	e0bfff17 	ldw	r2,-4(fp)
    f7ec:	10800a17 	ldw	r2,40(r2)
    f7f0:	10800084 	addi	r2,r2,2
    f7f4:	1007883a 	mov	r3,r2
    f7f8:	00800044 	movi	r2,1
    f7fc:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    f800:	e0bfff17 	ldw	r2,-4(fp)
    f804:	10800a17 	ldw	r2,40(r2)
    f808:	10800084 	addi	r2,r2,2
    f80c:	10800023 	ldbuio	r2,0(r2)
    f810:	1080004c 	andi	r2,r2,1
    f814:	10803fcc 	andi	r2,r2,255
    f818:	1004c03a 	cmpne	r2,r2,zero
    f81c:	103ff81e 	bne	r2,zero,f800 <alt_up_char_buffer_clear+0x28>
	return 0;
    f820:	0005883a 	mov	r2,zero
}
    f824:	e037883a 	mov	sp,fp
    f828:	df000017 	ldw	fp,0(sp)
    f82c:	dec00104 	addi	sp,sp,4
    f830:	f800283a 	ret

0000f834 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    f834:	defffc04 	addi	sp,sp,-16
    f838:	dfc00315 	stw	ra,12(sp)
    f83c:	df000215 	stw	fp,8(sp)
    f840:	df000204 	addi	fp,sp,8
    f844:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    f848:	e13fff17 	ldw	r4,-4(fp)
    f84c:	01400074 	movhi	r5,1
    f850:	2952f604 	addi	r5,r5,19416
    f854:	00110ec0 	call	110ec <alt_find_dev>
    f858:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f85c:	e0bffe17 	ldw	r2,-8(fp)
}
    f860:	e037883a 	mov	sp,fp
    f864:	dfc00117 	ldw	ra,4(sp)
    f868:	df000017 	ldw	fp,0(sp)
    f86c:	dec00204 	addi	sp,sp,8
    f870:	f800283a 	ret

0000f874 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    f874:	defff904 	addi	sp,sp,-28
    f878:	df000615 	stw	fp,24(sp)
    f87c:	df000604 	addi	fp,sp,24
    f880:	e13ffb15 	stw	r4,-20(fp)
    f884:	e17ffc15 	stw	r5,-16(fp)
    f888:	e1bffd15 	stw	r6,-12(fp)
    f88c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    f890:	e0bffb17 	ldw	r2,-20(fp)
    f894:	10c00f17 	ldw	r3,60(r2)
    f898:	e0bffd17 	ldw	r2,-12(fp)
    f89c:	10c0042e 	bgeu	r2,r3,f8b0 <alt_up_pixel_buffer_dma_draw+0x3c>
    f8a0:	e0bffb17 	ldw	r2,-20(fp)
    f8a4:	10c01017 	ldw	r3,64(r2)
    f8a8:	e0bffe17 	ldw	r2,-8(fp)
    f8ac:	10c00336 	bltu	r2,r3,f8bc <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
    f8b0:	00bfffc4 	movi	r2,-1
    f8b4:	e0bfff15 	stw	r2,-4(fp)
    f8b8:	00005106 	br	fa00 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
    f8bc:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f8c0:	e0bffb17 	ldw	r2,-20(fp)
    f8c4:	10800d17 	ldw	r2,52(r2)
    f8c8:	1004c03a 	cmpne	r2,r2,zero
    f8cc:	1000151e 	bne	r2,zero,f924 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    f8d0:	e0bffb17 	ldw	r2,-20(fp)
    f8d4:	10c01217 	ldw	r3,72(r2)
    f8d8:	e0bffd17 	ldw	r2,-12(fp)
    f8dc:	1886703a 	and	r3,r3,r2
    f8e0:	e0bffb17 	ldw	r2,-20(fp)
    f8e4:	10801117 	ldw	r2,68(r2)
    f8e8:	1886983a 	sll	r3,r3,r2
    f8ec:	e0bffa17 	ldw	r2,-24(fp)
    f8f0:	10c4b03a 	or	r2,r2,r3
    f8f4:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    f8f8:	e0bffb17 	ldw	r2,-20(fp)
    f8fc:	10c01417 	ldw	r3,80(r2)
    f900:	e0bffe17 	ldw	r2,-8(fp)
    f904:	1886703a 	and	r3,r3,r2
    f908:	e0bffb17 	ldw	r2,-20(fp)
    f90c:	10801317 	ldw	r2,76(r2)
    f910:	1886983a 	sll	r3,r3,r2
    f914:	e0bffa17 	ldw	r2,-24(fp)
    f918:	10c4b03a 	or	r2,r2,r3
    f91c:	e0bffa15 	stw	r2,-24(fp)
    f920:	00001706 	br	f980 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    f924:	e0bffb17 	ldw	r2,-20(fp)
    f928:	10c01217 	ldw	r3,72(r2)
    f92c:	e0bffd17 	ldw	r2,-12(fp)
    f930:	1886703a 	and	r3,r3,r2
    f934:	e0bffb17 	ldw	r2,-20(fp)
    f938:	10801117 	ldw	r2,68(r2)
    f93c:	1886983a 	sll	r3,r3,r2
    f940:	e0bffa17 	ldw	r2,-24(fp)
    f944:	10c5883a 	add	r2,r2,r3
    f948:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    f94c:	e0bffb17 	ldw	r2,-20(fp)
    f950:	10c01417 	ldw	r3,80(r2)
    f954:	e0bffe17 	ldw	r2,-8(fp)
    f958:	1886703a 	and	r3,r3,r2
    f95c:	e0bffb17 	ldw	r2,-20(fp)
    f960:	10800f17 	ldw	r2,60(r2)
    f964:	1887383a 	mul	r3,r3,r2
    f968:	e0bffb17 	ldw	r2,-20(fp)
    f96c:	10801117 	ldw	r2,68(r2)
    f970:	1886983a 	sll	r3,r3,r2
    f974:	e0bffa17 	ldw	r2,-24(fp)
    f978:	10c5883a 	add	r2,r2,r3
    f97c:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f980:	e0bffb17 	ldw	r2,-20(fp)
    f984:	10800e17 	ldw	r2,56(r2)
    f988:	10800058 	cmpnei	r2,r2,1
    f98c:	1000081e 	bne	r2,zero,f9b0 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f990:	e0bffb17 	ldw	r2,-20(fp)
    f994:	10800c17 	ldw	r2,48(r2)
    f998:	1007883a 	mov	r3,r2
    f99c:	e0bffa17 	ldw	r2,-24(fp)
    f9a0:	1885883a 	add	r2,r3,r2
    f9a4:	e0fffc17 	ldw	r3,-16(fp)
    f9a8:	10c00025 	stbio	r3,0(r2)
    f9ac:	00001306 	br	f9fc <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f9b0:	e0bffb17 	ldw	r2,-20(fp)
    f9b4:	10800e17 	ldw	r2,56(r2)
    f9b8:	10800098 	cmpnei	r2,r2,2
    f9bc:	1000081e 	bne	r2,zero,f9e0 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f9c0:	e0bffb17 	ldw	r2,-20(fp)
    f9c4:	10800c17 	ldw	r2,48(r2)
    f9c8:	1007883a 	mov	r3,r2
    f9cc:	e0bffa17 	ldw	r2,-24(fp)
    f9d0:	1885883a 	add	r2,r3,r2
    f9d4:	e0fffc17 	ldw	r3,-16(fp)
    f9d8:	10c0002d 	sthio	r3,0(r2)
    f9dc:	00000706 	br	f9fc <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f9e0:	e0bffb17 	ldw	r2,-20(fp)
    f9e4:	10800c17 	ldw	r2,48(r2)
    f9e8:	1007883a 	mov	r3,r2
    f9ec:	e0bffa17 	ldw	r2,-24(fp)
    f9f0:	1885883a 	add	r2,r3,r2
    f9f4:	e0fffc17 	ldw	r3,-16(fp)
    f9f8:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
    f9fc:	e03fff15 	stw	zero,-4(fp)
    fa00:	e0bfff17 	ldw	r2,-4(fp)
}
    fa04:	e037883a 	mov	sp,fp
    fa08:	df000017 	ldw	fp,0(sp)
    fa0c:	dec00104 	addi	sp,sp,4
    fa10:	f800283a 	ret

0000fa14 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    fa14:	defffd04 	addi	sp,sp,-12
    fa18:	df000215 	stw	fp,8(sp)
    fa1c:	df000204 	addi	fp,sp,8
    fa20:	e13ffe15 	stw	r4,-8(fp)
    fa24:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    fa28:	e0bffe17 	ldw	r2,-8(fp)
    fa2c:	10800a17 	ldw	r2,40(r2)
    fa30:	10800104 	addi	r2,r2,4
    fa34:	e0ffff17 	ldw	r3,-4(fp)
    fa38:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    fa3c:	e0bffe17 	ldw	r2,-8(fp)
    fa40:	10800a17 	ldw	r2,40(r2)
    fa44:	10800104 	addi	r2,r2,4
    fa48:	10800037 	ldwio	r2,0(r2)
    fa4c:	1007883a 	mov	r3,r2
    fa50:	e0bffe17 	ldw	r2,-8(fp)
    fa54:	10c00c15 	stw	r3,48(r2)
	return 0;
    fa58:	0005883a 	mov	r2,zero
}
    fa5c:	e037883a 	mov	sp,fp
    fa60:	df000017 	ldw	fp,0(sp)
    fa64:	dec00104 	addi	sp,sp,4
    fa68:	f800283a 	ret

0000fa6c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    fa6c:	defffe04 	addi	sp,sp,-8
    fa70:	df000115 	stw	fp,4(sp)
    fa74:	df000104 	addi	fp,sp,4
    fa78:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    fa7c:	e0bfff17 	ldw	r2,-4(fp)
    fa80:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    fa84:	e0bfff17 	ldw	r2,-4(fp)
    fa88:	10800a17 	ldw	r2,40(r2)
    fa8c:	1007883a 	mov	r3,r2
    fa90:	00800044 	movi	r2,1
    fa94:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    fa98:	e0bfff17 	ldw	r2,-4(fp)
    fa9c:	10c00b17 	ldw	r3,44(r2)
    faa0:	e0bfff17 	ldw	r2,-4(fp)
    faa4:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    faa8:	e0bfff17 	ldw	r2,-4(fp)
    faac:	11000b15 	stw	r4,44(r2)
	return 0;
    fab0:	0005883a 	mov	r2,zero
}
    fab4:	e037883a 	mov	sp,fp
    fab8:	df000017 	ldw	fp,0(sp)
    fabc:	dec00104 	addi	sp,sp,4
    fac0:	f800283a 	ret

0000fac4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    fac4:	defffe04 	addi	sp,sp,-8
    fac8:	df000115 	stw	fp,4(sp)
    facc:	df000104 	addi	fp,sp,4
    fad0:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    fad4:	e0bfff17 	ldw	r2,-4(fp)
    fad8:	10800a17 	ldw	r2,40(r2)
    fadc:	10800304 	addi	r2,r2,12
    fae0:	10800037 	ldwio	r2,0(r2)
    fae4:	1080004c 	andi	r2,r2,1
}
    fae8:	e037883a 	mov	sp,fp
    faec:	df000017 	ldw	fp,0(sp)
    faf0:	dec00104 	addi	sp,sp,4
    faf4:	f800283a 	ret

0000faf8 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    faf8:	defff604 	addi	sp,sp,-40
    fafc:	df000915 	stw	fp,36(sp)
    fb00:	df000904 	addi	fp,sp,36
    fb04:	e13ff715 	stw	r4,-36(fp)
    fb08:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    fb0c:	e0bff817 	ldw	r2,-32(fp)
    fb10:	10800058 	cmpnei	r2,r2,1
    fb14:	1000041e 	bne	r2,zero,fb28 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
    fb18:	e0bff717 	ldw	r2,-36(fp)
    fb1c:	10800c17 	ldw	r2,48(r2)
    fb20:	e0bfff15 	stw	r2,-4(fp)
    fb24:	00000306 	br	fb34 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
    fb28:	e0bff717 	ldw	r2,-36(fp)
    fb2c:	10800b17 	ldw	r2,44(r2)
    fb30:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
    fb34:	e0bff717 	ldw	r2,-36(fp)
    fb38:	10800f17 	ldw	r2,60(r2)
    fb3c:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fb40:	e0bff717 	ldw	r2,-36(fp)
    fb44:	10800e17 	ldw	r2,56(r2)
    fb48:	10800098 	cmpnei	r2,r2,2
    fb4c:	1000051e 	bne	r2,zero,fb64 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
    fb50:	e0fffe17 	ldw	r3,-8(fp)
    fb54:	e0fffe17 	ldw	r3,-8(fp)
    fb58:	18c5883a 	add	r2,r3,r3
    fb5c:	e0bffe15 	stw	r2,-8(fp)
    fb60:	00000506 	br	fb78 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
    fb64:	e13ffe17 	ldw	r4,-8(fp)
    fb68:	e13ffe17 	ldw	r4,-8(fp)
    fb6c:	2105883a 	add	r2,r4,r4
    fb70:	1085883a 	add	r2,r2,r2
    fb74:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
    fb78:	e0bff717 	ldw	r2,-36(fp)
    fb7c:	10801017 	ldw	r2,64(r2)
    fb80:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    fb84:	e0bff717 	ldw	r2,-36(fp)
    fb88:	10800d17 	ldw	r2,52(r2)
    fb8c:	1004c03a 	cmpne	r2,r2,zero
    fb90:	10001e1e 	bne	r2,zero,fc0c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    fb94:	e0bff717 	ldw	r2,-36(fp)
    fb98:	10801317 	ldw	r2,76(r2)
    fb9c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
    fba0:	e03ffb15 	stw	zero,-20(fp)
    fba4:	00001506 	br	fbfc <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
    fba8:	e03ffc15 	stw	zero,-16(fp)
    fbac:	00000706 	br	fbcc <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
    fbb0:	e0ffff17 	ldw	r3,-4(fp)
    fbb4:	e0bffc17 	ldw	r2,-16(fp)
    fbb8:	1885883a 	add	r2,r3,r2
    fbbc:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    fbc0:	e0bffc17 	ldw	r2,-16(fp)
    fbc4:	10800104 	addi	r2,r2,4
    fbc8:	e0bffc15 	stw	r2,-16(fp)
    fbcc:	e0fffc17 	ldw	r3,-16(fp)
    fbd0:	e13ffe17 	ldw	r4,-8(fp)
    fbd4:	193ff636 	bltu	r3,r4,fbb0 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    fbd8:	e0fffa17 	ldw	r3,-24(fp)
    fbdc:	00800044 	movi	r2,1
    fbe0:	10c4983a 	sll	r2,r2,r3
    fbe4:	e0ffff17 	ldw	r3,-4(fp)
    fbe8:	1887883a 	add	r3,r3,r2
    fbec:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    fbf0:	e13ffb17 	ldw	r4,-20(fp)
    fbf4:	21000044 	addi	r4,r4,1
    fbf8:	e13ffb15 	stw	r4,-20(fp)
    fbfc:	e0bffb17 	ldw	r2,-20(fp)
    fc00:	e0fffd17 	ldw	r3,-12(fp)
    fc04:	10ffe836 	bltu	r2,r3,fba8 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    fc08:	00001006 	br	fc4c <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    fc0c:	e13ffd17 	ldw	r4,-12(fp)
    fc10:	e0bffe17 	ldw	r2,-8(fp)
    fc14:	2089383a 	mul	r4,r4,r2
    fc18:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
    fc1c:	e03ff915 	stw	zero,-28(fp)
    fc20:	00000706 	br	fc40 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
    fc24:	e0ffff17 	ldw	r3,-4(fp)
    fc28:	e0bff917 	ldw	r2,-28(fp)
    fc2c:	1885883a 	add	r2,r3,r2
    fc30:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    fc34:	e0fff917 	ldw	r3,-28(fp)
    fc38:	18c00104 	addi	r3,r3,4
    fc3c:	e0fff915 	stw	r3,-28(fp)
    fc40:	e0bff917 	ldw	r2,-28(fp)
    fc44:	e13ffd17 	ldw	r4,-12(fp)
    fc48:	113ff636 	bltu	r2,r4,fc24 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    fc4c:	e037883a 	mov	sp,fp
    fc50:	df000017 	ldw	fp,0(sp)
    fc54:	dec00104 	addi	sp,sp,4
    fc58:	f800283a 	ret

0000fc5c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    fc5c:	deffed04 	addi	sp,sp,-76
    fc60:	df001215 	stw	fp,72(sp)
    fc64:	df001204 	addi	fp,sp,72
    fc68:	e13fee15 	stw	r4,-72(fp)
    fc6c:	e17fef15 	stw	r5,-68(fp)
    fc70:	e1bff015 	stw	r6,-64(fp)
    fc74:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    fc78:	e0bfee17 	ldw	r2,-72(fp)
    fc7c:	10800f17 	ldw	r2,60(r2)
    fc80:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    fc84:	e0bfee17 	ldw	r2,-72(fp)
    fc88:	10801017 	ldw	r2,64(r2)
    fc8c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    fc90:	e0bfef17 	ldw	r2,-68(fp)
    fc94:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
    fc98:	e0fff117 	ldw	r3,-60(fp)
    fc9c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
    fca0:	e13ff017 	ldw	r4,-64(fp)
    fca4:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
    fca8:	e0800117 	ldw	r2,4(fp)
    fcac:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
    fcb0:	e0c00217 	ldw	r3,8(fp)
    fcb4:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    fcb8:	e13ffa17 	ldw	r4,-24(fp)
    fcbc:	e0bffb17 	ldw	r2,-20(fp)
    fcc0:	2080062e 	bgeu	r4,r2,fcdc <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
    fcc4:	e0fffb17 	ldw	r3,-20(fp)
    fcc8:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
    fccc:	e13ffa17 	ldw	r4,-24(fp)
    fcd0:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
    fcd4:	e0bffc17 	ldw	r2,-16(fp)
    fcd8:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
    fcdc:	e0fff817 	ldw	r3,-32(fp)
    fce0:	e13ff917 	ldw	r4,-28(fp)
    fce4:	1900062e 	bgeu	r3,r4,fd00 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
    fce8:	e0bff917 	ldw	r2,-28(fp)
    fcec:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
    fcf0:	e0fff817 	ldw	r3,-32(fp)
    fcf4:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
    fcf8:	e13ffc17 	ldw	r4,-16(fp)
    fcfc:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    fd00:	e0bffb17 	ldw	r2,-20(fp)
    fd04:	e0fffe17 	ldw	r3,-8(fp)
    fd08:	10c10d2e 	bgeu	r2,r3,10140 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
    fd0c:	e13ff917 	ldw	r4,-28(fp)
    fd10:	e0bffd17 	ldw	r2,-12(fp)
    fd14:	20800136 	bltu	r4,r2,fd1c <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    fd18:	00010906 	br	10140 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    fd1c:	e0fffa17 	ldw	r3,-24(fp)
    fd20:	e13ffe17 	ldw	r4,-8(fp)
    fd24:	19000336 	bltu	r3,r4,fd34 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
    fd28:	e0bffe17 	ldw	r2,-8(fp)
    fd2c:	10bfffc4 	addi	r2,r2,-1
    fd30:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    fd34:	e0fff817 	ldw	r3,-32(fp)
    fd38:	e13ffd17 	ldw	r4,-12(fp)
    fd3c:	19000336 	bltu	r3,r4,fd4c <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
    fd40:	e0bffd17 	ldw	r2,-12(fp)
    fd44:	10bfffc4 	addi	r2,r2,-1
    fd48:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    fd4c:	e0800317 	ldw	r2,12(fp)
    fd50:	10800058 	cmpnei	r2,r2,1
    fd54:	1000041e 	bne	r2,zero,fd68 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
    fd58:	e0bfee17 	ldw	r2,-72(fp)
    fd5c:	10800c17 	ldw	r2,48(r2)
    fd60:	e0bfff15 	stw	r2,-4(fp)
    fd64:	00000306 	br	fd74 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
    fd68:	e0bfee17 	ldw	r2,-72(fp)
    fd6c:	10800b17 	ldw	r2,44(r2)
    fd70:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    fd74:	e0bfee17 	ldw	r2,-72(fp)
    fd78:	10800d17 	ldw	r2,52(r2)
    fd7c:	1004c03a 	cmpne	r2,r2,zero
    fd80:	1000721e 	bne	r2,zero,ff4c <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    fd84:	e0bfee17 	ldw	r2,-72(fp)
    fd88:	10801317 	ldw	r2,76(r2)
    fd8c:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
    fd90:	e0bff417 	ldw	r2,-48(fp)
    fd94:	e0fff917 	ldw	r3,-28(fp)
    fd98:	1884983a 	sll	r2,r3,r2
    fd9c:	e13fff17 	ldw	r4,-4(fp)
    fda0:	2089883a 	add	r4,r4,r2
    fda4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fda8:	e0bfee17 	ldw	r2,-72(fp)
    fdac:	10800e17 	ldw	r2,56(r2)
    fdb0:	10800058 	cmpnei	r2,r2,1
    fdb4:	10001e1e 	bne	r2,zero,fe30 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
    fdb8:	e0bff917 	ldw	r2,-28(fp)
    fdbc:	e0bff515 	stw	r2,-44(fp)
    fdc0:	00001706 	br	fe20 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
    fdc4:	e0fffb17 	ldw	r3,-20(fp)
    fdc8:	e0fff615 	stw	r3,-40(fp)
    fdcc:	00000806 	br	fdf0 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
    fdd0:	e0ffff17 	ldw	r3,-4(fp)
    fdd4:	e0bff617 	ldw	r2,-40(fp)
    fdd8:	1885883a 	add	r2,r3,r2
    fddc:	e0fff717 	ldw	r3,-36(fp)
    fde0:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fde4:	e13ff617 	ldw	r4,-40(fp)
    fde8:	21000044 	addi	r4,r4,1
    fdec:	e13ff615 	stw	r4,-40(fp)
    fdf0:	e0bffa17 	ldw	r2,-24(fp)
    fdf4:	e0fff617 	ldw	r3,-40(fp)
    fdf8:	10fff52e 	bgeu	r2,r3,fdd0 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    fdfc:	e0fff417 	ldw	r3,-48(fp)
    fe00:	00800044 	movi	r2,1
    fe04:	10c4983a 	sll	r2,r2,r3
    fe08:	e13fff17 	ldw	r4,-4(fp)
    fe0c:	2089883a 	add	r4,r4,r2
    fe10:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    fe14:	e0bff517 	ldw	r2,-44(fp)
    fe18:	10800044 	addi	r2,r2,1
    fe1c:	e0bff515 	stw	r2,-44(fp)
    fe20:	e0fff817 	ldw	r3,-32(fp)
    fe24:	e13ff517 	ldw	r4,-44(fp)
    fe28:	193fe62e 	bgeu	r3,r4,fdc4 <alt_up_pixel_buffer_dma_draw_box+0x168>
    fe2c:	0000c406 	br	10140 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fe30:	e0bfee17 	ldw	r2,-72(fp)
    fe34:	10800e17 	ldw	r2,56(r2)
    fe38:	10800098 	cmpnei	r2,r2,2
    fe3c:	1000211e 	bne	r2,zero,fec4 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
    fe40:	e0bff917 	ldw	r2,-28(fp)
    fe44:	e0bff515 	stw	r2,-44(fp)
    fe48:	00001a06 	br	feb4 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
    fe4c:	e0fffb17 	ldw	r3,-20(fp)
    fe50:	e0fff615 	stw	r3,-40(fp)
    fe54:	00000b06 	br	fe84 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    fe58:	e13ff617 	ldw	r4,-40(fp)
    fe5c:	e13ff617 	ldw	r4,-40(fp)
    fe60:	2105883a 	add	r2,r4,r4
    fe64:	1007883a 	mov	r3,r2
    fe68:	e0bfff17 	ldw	r2,-4(fp)
    fe6c:	1885883a 	add	r2,r3,r2
    fe70:	e0fff717 	ldw	r3,-36(fp)
    fe74:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fe78:	e0bff617 	ldw	r2,-40(fp)
    fe7c:	10800044 	addi	r2,r2,1
    fe80:	e0bff615 	stw	r2,-40(fp)
    fe84:	e0fffa17 	ldw	r3,-24(fp)
    fe88:	e13ff617 	ldw	r4,-40(fp)
    fe8c:	193ff22e 	bgeu	r3,r4,fe58 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    fe90:	e0fff417 	ldw	r3,-48(fp)
    fe94:	00800044 	movi	r2,1
    fe98:	10c4983a 	sll	r2,r2,r3
    fe9c:	e0ffff17 	ldw	r3,-4(fp)
    fea0:	1887883a 	add	r3,r3,r2
    fea4:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    fea8:	e13ff517 	ldw	r4,-44(fp)
    feac:	21000044 	addi	r4,r4,1
    feb0:	e13ff515 	stw	r4,-44(fp)
    feb4:	e0bff817 	ldw	r2,-32(fp)
    feb8:	e0fff517 	ldw	r3,-44(fp)
    febc:	10ffe32e 	bgeu	r2,r3,fe4c <alt_up_pixel_buffer_dma_draw_box+0x1f0>
    fec0:	00009f06 	br	10140 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    fec4:	e13ff917 	ldw	r4,-28(fp)
    fec8:	e13ff515 	stw	r4,-44(fp)
    fecc:	00001b06 	br	ff3c <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
    fed0:	e0bffb17 	ldw	r2,-20(fp)
    fed4:	e0bff615 	stw	r2,-40(fp)
    fed8:	00000c06 	br	ff0c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    fedc:	e0fff617 	ldw	r3,-40(fp)
    fee0:	e0fff617 	ldw	r3,-40(fp)
    fee4:	18c5883a 	add	r2,r3,r3
    fee8:	1085883a 	add	r2,r2,r2
    feec:	1007883a 	mov	r3,r2
    fef0:	e0bfff17 	ldw	r2,-4(fp)
    fef4:	1885883a 	add	r2,r3,r2
    fef8:	e0fff717 	ldw	r3,-36(fp)
    fefc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ff00:	e13ff617 	ldw	r4,-40(fp)
    ff04:	21000044 	addi	r4,r4,1
    ff08:	e13ff615 	stw	r4,-40(fp)
    ff0c:	e0bffa17 	ldw	r2,-24(fp)
    ff10:	e0fff617 	ldw	r3,-40(fp)
    ff14:	10fff12e 	bgeu	r2,r3,fedc <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    ff18:	e0fff417 	ldw	r3,-48(fp)
    ff1c:	00800044 	movi	r2,1
    ff20:	10c4983a 	sll	r2,r2,r3
    ff24:	e13fff17 	ldw	r4,-4(fp)
    ff28:	2089883a 	add	r4,r4,r2
    ff2c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    ff30:	e0bff517 	ldw	r2,-44(fp)
    ff34:	10800044 	addi	r2,r2,1
    ff38:	e0bff515 	stw	r2,-44(fp)
    ff3c:	e0fff817 	ldw	r3,-32(fp)
    ff40:	e13ff517 	ldw	r4,-44(fp)
    ff44:	193fe22e 	bgeu	r3,r4,fed0 <alt_up_pixel_buffer_dma_draw_box+0x274>
    ff48:	00007d06 	br	10140 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    ff4c:	e0bfee17 	ldw	r2,-72(fp)
    ff50:	10800e17 	ldw	r2,56(r2)
    ff54:	10800058 	cmpnei	r2,r2,1
    ff58:	1000221e 	bne	r2,zero,ffe4 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
    ff5c:	e0fff917 	ldw	r3,-28(fp)
    ff60:	e13ffe17 	ldw	r4,-8(fp)
    ff64:	1905383a 	mul	r2,r3,r4
    ff68:	e0ffff17 	ldw	r3,-4(fp)
    ff6c:	1887883a 	add	r3,r3,r2
    ff70:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    ff74:	e13ff917 	ldw	r4,-28(fp)
    ff78:	e13ff215 	stw	r4,-56(fp)
    ff7c:	00001506 	br	ffd4 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
    ff80:	e0bffb17 	ldw	r2,-20(fp)
    ff84:	e0bff315 	stw	r2,-52(fp)
    ff88:	00000806 	br	ffac <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
    ff8c:	e0ffff17 	ldw	r3,-4(fp)
    ff90:	e0bff317 	ldw	r2,-52(fp)
    ff94:	1885883a 	add	r2,r3,r2
    ff98:	e0fff717 	ldw	r3,-36(fp)
    ff9c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ffa0:	e0fff317 	ldw	r3,-52(fp)
    ffa4:	18c00044 	addi	r3,r3,1
    ffa8:	e0fff315 	stw	r3,-52(fp)
    ffac:	e13ffa17 	ldw	r4,-24(fp)
    ffb0:	e0bff317 	ldw	r2,-52(fp)
    ffb4:	20bff52e 	bgeu	r4,r2,ff8c <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    ffb8:	e0ffff17 	ldw	r3,-4(fp)
    ffbc:	e13ffe17 	ldw	r4,-8(fp)
    ffc0:	1907883a 	add	r3,r3,r4
    ffc4:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    ffc8:	e0bff217 	ldw	r2,-56(fp)
    ffcc:	10800044 	addi	r2,r2,1
    ffd0:	e0bff215 	stw	r2,-56(fp)
    ffd4:	e0fff817 	ldw	r3,-32(fp)
    ffd8:	e13ff217 	ldw	r4,-56(fp)
    ffdc:	193fe82e 	bgeu	r3,r4,ff80 <alt_up_pixel_buffer_dma_draw_box+0x324>
    ffe0:	00005706 	br	10140 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ffe4:	e0bfee17 	ldw	r2,-72(fp)
    ffe8:	10800e17 	ldw	r2,56(r2)
    ffec:	10800098 	cmpnei	r2,r2,2
    fff0:	1000291e 	bne	r2,zero,10098 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
    fff4:	e0fffe17 	ldw	r3,-8(fp)
    fff8:	e0fffe17 	ldw	r3,-8(fp)
    fffc:	18c5883a 	add	r2,r3,r3
   10000:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   10004:	e13ff917 	ldw	r4,-28(fp)
   10008:	e0fffe17 	ldw	r3,-8(fp)
   1000c:	20c5383a 	mul	r2,r4,r3
   10010:	e13fff17 	ldw	r4,-4(fp)
   10014:	2089883a 	add	r4,r4,r2
   10018:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   1001c:	e0bff917 	ldw	r2,-28(fp)
   10020:	e0bff215 	stw	r2,-56(fp)
   10024:	00001806 	br	10088 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
   10028:	e0fffb17 	ldw	r3,-20(fp)
   1002c:	e0fff315 	stw	r3,-52(fp)
   10030:	00000b06 	br	10060 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   10034:	e13ff317 	ldw	r4,-52(fp)
   10038:	e13ff317 	ldw	r4,-52(fp)
   1003c:	2105883a 	add	r2,r4,r4
   10040:	1007883a 	mov	r3,r2
   10044:	e0bfff17 	ldw	r2,-4(fp)
   10048:	1885883a 	add	r2,r3,r2
   1004c:	e0fff717 	ldw	r3,-36(fp)
   10050:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10054:	e0bff317 	ldw	r2,-52(fp)
   10058:	10800044 	addi	r2,r2,1
   1005c:	e0bff315 	stw	r2,-52(fp)
   10060:	e0fffa17 	ldw	r3,-24(fp)
   10064:	e13ff317 	ldw	r4,-52(fp)
   10068:	193ff22e 	bgeu	r3,r4,10034 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   1006c:	e0bfff17 	ldw	r2,-4(fp)
   10070:	e0fffe17 	ldw	r3,-8(fp)
   10074:	10c5883a 	add	r2,r2,r3
   10078:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1007c:	e13ff217 	ldw	r4,-56(fp)
   10080:	21000044 	addi	r4,r4,1
   10084:	e13ff215 	stw	r4,-56(fp)
   10088:	e0bff817 	ldw	r2,-32(fp)
   1008c:	e0fff217 	ldw	r3,-56(fp)
   10090:	10ffe52e 	bgeu	r2,r3,10028 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
   10094:	00002a06 	br	10140 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   10098:	e13ffe17 	ldw	r4,-8(fp)
   1009c:	e13ffe17 	ldw	r4,-8(fp)
   100a0:	2105883a 	add	r2,r4,r4
   100a4:	1085883a 	add	r2,r2,r2
   100a8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   100ac:	e0fff917 	ldw	r3,-28(fp)
   100b0:	e13ffe17 	ldw	r4,-8(fp)
   100b4:	1905383a 	mul	r2,r3,r4
   100b8:	e0ffff17 	ldw	r3,-4(fp)
   100bc:	1887883a 	add	r3,r3,r2
   100c0:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   100c4:	e13ff917 	ldw	r4,-28(fp)
   100c8:	e13ff215 	stw	r4,-56(fp)
   100cc:	00001906 	br	10134 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
   100d0:	e0bffb17 	ldw	r2,-20(fp)
   100d4:	e0bff315 	stw	r2,-52(fp)
   100d8:	00000c06 	br	1010c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   100dc:	e0fff317 	ldw	r3,-52(fp)
   100e0:	e0fff317 	ldw	r3,-52(fp)
   100e4:	18c5883a 	add	r2,r3,r3
   100e8:	1085883a 	add	r2,r2,r2
   100ec:	1007883a 	mov	r3,r2
   100f0:	e0bfff17 	ldw	r2,-4(fp)
   100f4:	1885883a 	add	r2,r3,r2
   100f8:	e0fff717 	ldw	r3,-36(fp)
   100fc:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10100:	e13ff317 	ldw	r4,-52(fp)
   10104:	21000044 	addi	r4,r4,1
   10108:	e13ff315 	stw	r4,-52(fp)
   1010c:	e0bffa17 	ldw	r2,-24(fp)
   10110:	e0fff317 	ldw	r3,-52(fp)
   10114:	10fff12e 	bgeu	r2,r3,100dc <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   10118:	e13fff17 	ldw	r4,-4(fp)
   1011c:	e0bffe17 	ldw	r2,-8(fp)
   10120:	2089883a 	add	r4,r4,r2
   10124:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10128:	e0fff217 	ldw	r3,-56(fp)
   1012c:	18c00044 	addi	r3,r3,1
   10130:	e0fff215 	stw	r3,-56(fp)
   10134:	e13ff817 	ldw	r4,-32(fp)
   10138:	e0bff217 	ldw	r2,-56(fp)
   1013c:	20bfe42e 	bgeu	r4,r2,100d0 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
   10140:	e037883a 	mov	sp,fp
   10144:	df000017 	ldw	fp,0(sp)
   10148:	dec00104 	addi	sp,sp,4
   1014c:	f800283a 	ret

00010150 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
   10150:	defff204 	addi	sp,sp,-56
   10154:	df000d15 	stw	fp,52(sp)
   10158:	df000d04 	addi	fp,sp,52
   1015c:	e13ff315 	stw	r4,-52(fp)
   10160:	e17ff415 	stw	r5,-48(fp)
   10164:	e1bff515 	stw	r6,-44(fp)
   10168:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1016c:	e0bff317 	ldw	r2,-52(fp)
   10170:	10800f17 	ldw	r2,60(r2)
   10174:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10178:	e0bff317 	ldw	r2,-52(fp)
   1017c:	10801017 	ldw	r2,64(r2)
   10180:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
   10184:	e0bff417 	ldw	r2,-48(fp)
   10188:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
   1018c:	e0fff517 	ldw	r3,-44(fp)
   10190:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
   10194:	e13ff617 	ldw	r4,-40(fp)
   10198:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   1019c:	e0800117 	ldw	r2,4(fp)
   101a0:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
   101a4:	e0fffb17 	ldw	r3,-20(fp)
   101a8:	e13ffc17 	ldw	r4,-16(fp)
   101ac:	1900042e 	bgeu	r3,r4,101c0 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
   101b0:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
   101b4:	e0fffb17 	ldw	r3,-20(fp)
   101b8:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
   101bc:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   101c0:	e13ffc17 	ldw	r4,-16(fp)
   101c4:	e0bffe17 	ldw	r2,-8(fp)
   101c8:	2080b12e 	bgeu	r4,r2,10490 <alt_up_pixel_buffer_dma_draw_hline+0x340>
   101cc:	e0fffa17 	ldw	r3,-24(fp)
   101d0:	e13ffd17 	ldw	r4,-12(fp)
   101d4:	19000136 	bltu	r3,r4,101dc <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   101d8:	0000ad06 	br	10490 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   101dc:	e0bffb17 	ldw	r2,-20(fp)
   101e0:	e0fffe17 	ldw	r3,-8(fp)
   101e4:	10c00336 	bltu	r2,r3,101f4 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
   101e8:	e13ffe17 	ldw	r4,-8(fp)
   101ec:	213fffc4 	addi	r4,r4,-1
   101f0:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   101f4:	e0800217 	ldw	r2,8(fp)
   101f8:	10800058 	cmpnei	r2,r2,1
   101fc:	1000041e 	bne	r2,zero,10210 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   10200:	e0bff317 	ldw	r2,-52(fp)
   10204:	10800c17 	ldw	r2,48(r2)
   10208:	e0bfff15 	stw	r2,-4(fp)
   1020c:	00000306 	br	1021c <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   10210:	e0bff317 	ldw	r2,-52(fp)
   10214:	10800b17 	ldw	r2,44(r2)
   10218:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1021c:	e0bff317 	ldw	r2,-52(fp)
   10220:	10800d17 	ldw	r2,52(r2)
   10224:	1004c03a 	cmpne	r2,r2,zero
   10228:	1000431e 	bne	r2,zero,10338 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1022c:	e0bff317 	ldw	r2,-52(fp)
   10230:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
   10234:	e0fffa17 	ldw	r3,-24(fp)
   10238:	1884983a 	sll	r2,r3,r2
   1023c:	e13fff17 	ldw	r4,-4(fp)
   10240:	2089883a 	add	r4,r4,r2
   10244:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10248:	e0bff317 	ldw	r2,-52(fp)
   1024c:	10800e17 	ldw	r2,56(r2)
   10250:	10800058 	cmpnei	r2,r2,1
   10254:	10000f1e 	bne	r2,zero,10294 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
   10258:	e0bffc17 	ldw	r2,-16(fp)
   1025c:	e0bff815 	stw	r2,-32(fp)
   10260:	00000806 	br	10284 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
   10264:	e0ffff17 	ldw	r3,-4(fp)
   10268:	e0bff817 	ldw	r2,-32(fp)
   1026c:	1885883a 	add	r2,r3,r2
   10270:	e0fff917 	ldw	r3,-28(fp)
   10274:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   10278:	e0fff817 	ldw	r3,-32(fp)
   1027c:	18c00044 	addi	r3,r3,1
   10280:	e0fff815 	stw	r3,-32(fp)
   10284:	e13ffb17 	ldw	r4,-20(fp)
   10288:	e0bff817 	ldw	r2,-32(fp)
   1028c:	20bff52e 	bgeu	r4,r2,10264 <alt_up_pixel_buffer_dma_draw_hline+0x114>
   10290:	00007f06 	br	10490 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10294:	e0bff317 	ldw	r2,-52(fp)
   10298:	10800e17 	ldw	r2,56(r2)
   1029c:	10800098 	cmpnei	r2,r2,2
   102a0:	1000121e 	bne	r2,zero,102ec <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
   102a4:	e0fffc17 	ldw	r3,-16(fp)
   102a8:	e0fff815 	stw	r3,-32(fp)
   102ac:	00000b06 	br	102dc <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   102b0:	e13ff817 	ldw	r4,-32(fp)
   102b4:	e13ff817 	ldw	r4,-32(fp)
   102b8:	2105883a 	add	r2,r4,r4
   102bc:	1007883a 	mov	r3,r2
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	1885883a 	add	r2,r3,r2
   102c8:	e0fff917 	ldw	r3,-28(fp)
   102cc:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   102d0:	e0bff817 	ldw	r2,-32(fp)
   102d4:	10800044 	addi	r2,r2,1
   102d8:	e0bff815 	stw	r2,-32(fp)
   102dc:	e0fffb17 	ldw	r3,-20(fp)
   102e0:	e13ff817 	ldw	r4,-32(fp)
   102e4:	193ff22e 	bgeu	r3,r4,102b0 <alt_up_pixel_buffer_dma_draw_hline+0x160>
   102e8:	00006906 	br	10490 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   102ec:	e0bffc17 	ldw	r2,-16(fp)
   102f0:	e0bff815 	stw	r2,-32(fp)
   102f4:	00000c06 	br	10328 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   102f8:	e0fff817 	ldw	r3,-32(fp)
   102fc:	e0fff817 	ldw	r3,-32(fp)
   10300:	18c5883a 	add	r2,r3,r3
   10304:	1085883a 	add	r2,r2,r2
   10308:	1007883a 	mov	r3,r2
   1030c:	e0bfff17 	ldw	r2,-4(fp)
   10310:	1885883a 	add	r2,r3,r2
   10314:	e0fff917 	ldw	r3,-28(fp)
   10318:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   1031c:	e13ff817 	ldw	r4,-32(fp)
   10320:	21000044 	addi	r4,r4,1
   10324:	e13ff815 	stw	r4,-32(fp)
   10328:	e0bffb17 	ldw	r2,-20(fp)
   1032c:	e0fff817 	ldw	r3,-32(fp)
   10330:	10fff12e 	bgeu	r2,r3,102f8 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
   10334:	00005606 	br	10490 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10338:	e0bff317 	ldw	r2,-52(fp)
   1033c:	10800e17 	ldw	r2,56(r2)
   10340:	10800058 	cmpnei	r2,r2,1
   10344:	1000151e 	bne	r2,zero,1039c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
   10348:	e13ffa17 	ldw	r4,-24(fp)
   1034c:	e0fffe17 	ldw	r3,-8(fp)
   10350:	20c5383a 	mul	r2,r4,r3
   10354:	e13fff17 	ldw	r4,-4(fp)
   10358:	2089883a 	add	r4,r4,r2
   1035c:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   10360:	e0bffc17 	ldw	r2,-16(fp)
   10364:	e0bff715 	stw	r2,-36(fp)
   10368:	00000806 	br	1038c <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
   1036c:	e0ffff17 	ldw	r3,-4(fp)
   10370:	e0bff717 	ldw	r2,-36(fp)
   10374:	1885883a 	add	r2,r3,r2
   10378:	e0fff917 	ldw	r3,-28(fp)
   1037c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10380:	e0fff717 	ldw	r3,-36(fp)
   10384:	18c00044 	addi	r3,r3,1
   10388:	e0fff715 	stw	r3,-36(fp)
   1038c:	e13ffb17 	ldw	r4,-20(fp)
   10390:	e0bff717 	ldw	r2,-36(fp)
   10394:	20bff52e 	bgeu	r4,r2,1036c <alt_up_pixel_buffer_dma_draw_hline+0x21c>
   10398:	00003d06 	br	10490 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1039c:	e0bff317 	ldw	r2,-52(fp)
   103a0:	10800e17 	ldw	r2,56(r2)
   103a4:	10800098 	cmpnei	r2,r2,2
   103a8:	10001c1e 	bne	r2,zero,1041c <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
   103ac:	e0fffe17 	ldw	r3,-8(fp)
   103b0:	e0fffe17 	ldw	r3,-8(fp)
   103b4:	18c5883a 	add	r2,r3,r3
   103b8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   103bc:	e13ffa17 	ldw	r4,-24(fp)
   103c0:	e0fffe17 	ldw	r3,-8(fp)
   103c4:	20c5383a 	mul	r2,r4,r3
   103c8:	e13fff17 	ldw	r4,-4(fp)
   103cc:	2089883a 	add	r4,r4,r2
   103d0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   103d4:	e0bffc17 	ldw	r2,-16(fp)
   103d8:	e0bff715 	stw	r2,-36(fp)
   103dc:	00000b06 	br	1040c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   103e0:	e0fff717 	ldw	r3,-36(fp)
   103e4:	e0fff717 	ldw	r3,-36(fp)
   103e8:	18c5883a 	add	r2,r3,r3
   103ec:	1007883a 	mov	r3,r2
   103f0:	e0bfff17 	ldw	r2,-4(fp)
   103f4:	1885883a 	add	r2,r3,r2
   103f8:	e0fff917 	ldw	r3,-28(fp)
   103fc:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10400:	e13ff717 	ldw	r4,-36(fp)
   10404:	21000044 	addi	r4,r4,1
   10408:	e13ff715 	stw	r4,-36(fp)
   1040c:	e0bffb17 	ldw	r2,-20(fp)
   10410:	e0fff717 	ldw	r3,-36(fp)
   10414:	10fff22e 	bgeu	r2,r3,103e0 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   10418:	00001d06 	br	10490 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1041c:	e13ffe17 	ldw	r4,-8(fp)
   10420:	e13ffe17 	ldw	r4,-8(fp)
   10424:	2105883a 	add	r2,r4,r4
   10428:	1085883a 	add	r2,r2,r2
   1042c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   10430:	e0fffa17 	ldw	r3,-24(fp)
   10434:	e13ffe17 	ldw	r4,-8(fp)
   10438:	1905383a 	mul	r2,r3,r4
   1043c:	e0ffff17 	ldw	r3,-4(fp)
   10440:	1887883a 	add	r3,r3,r2
   10444:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
   10448:	e13ffc17 	ldw	r4,-16(fp)
   1044c:	e13ff715 	stw	r4,-36(fp)
   10450:	00000c06 	br	10484 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10454:	e0fff717 	ldw	r3,-36(fp)
   10458:	e0fff717 	ldw	r3,-36(fp)
   1045c:	18c5883a 	add	r2,r3,r3
   10460:	1085883a 	add	r2,r2,r2
   10464:	1007883a 	mov	r3,r2
   10468:	e0bfff17 	ldw	r2,-4(fp)
   1046c:	1885883a 	add	r2,r3,r2
   10470:	e0fff917 	ldw	r3,-28(fp)
   10474:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10478:	e13ff717 	ldw	r4,-36(fp)
   1047c:	21000044 	addi	r4,r4,1
   10480:	e13ff715 	stw	r4,-36(fp)
   10484:	e0bffb17 	ldw	r2,-20(fp)
   10488:	e0fff717 	ldw	r3,-36(fp)
   1048c:	10fff12e 	bgeu	r2,r3,10454 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   10490:	e037883a 	mov	sp,fp
   10494:	df000017 	ldw	fp,0(sp)
   10498:	dec00104 	addi	sp,sp,4
   1049c:	f800283a 	ret

000104a0 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   104a0:	defff104 	addi	sp,sp,-60
   104a4:	df000e15 	stw	fp,56(sp)
   104a8:	df000e04 	addi	fp,sp,56
   104ac:	e13ff215 	stw	r4,-56(fp)
   104b0:	e17ff315 	stw	r5,-52(fp)
   104b4:	e1bff415 	stw	r6,-48(fp)
   104b8:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   104bc:	e0bff217 	ldw	r2,-56(fp)
   104c0:	10800f17 	ldw	r2,60(r2)
   104c4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   104c8:	e0bff217 	ldw	r2,-56(fp)
   104cc:	10801017 	ldw	r2,64(r2)
   104d0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
   104d4:	e0bff317 	ldw	r2,-52(fp)
   104d8:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
   104dc:	e0fff417 	ldw	r3,-48(fp)
   104e0:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
   104e4:	e13ff517 	ldw	r4,-44(fp)
   104e8:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   104ec:	e0800117 	ldw	r2,4(fp)
   104f0:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   104f4:	e0fffa17 	ldw	r3,-24(fp)
   104f8:	e13ffb17 	ldw	r4,-20(fp)
   104fc:	1900042e 	bgeu	r3,r4,10510 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
   10500:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
   10504:	e0fffa17 	ldw	r3,-24(fp)
   10508:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
   1050c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   10510:	e13ffc17 	ldw	r4,-16(fp)
   10514:	e0bffe17 	ldw	r2,-8(fp)
   10518:	2080d12e 	bgeu	r4,r2,10860 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   1051c:	e0fffb17 	ldw	r3,-20(fp)
   10520:	e13ffd17 	ldw	r4,-12(fp)
   10524:	19000136 	bltu	r3,r4,1052c <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   10528:	0000cd06 	br	10860 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   1052c:	e0bffa17 	ldw	r2,-24(fp)
   10530:	e0fffd17 	ldw	r3,-12(fp)
   10534:	10c00336 	bltu	r2,r3,10544 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
   10538:	e13ffd17 	ldw	r4,-12(fp)
   1053c:	213fffc4 	addi	r4,r4,-1
   10540:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10544:	e0800217 	ldw	r2,8(fp)
   10548:	10800058 	cmpnei	r2,r2,1
   1054c:	1000041e 	bne	r2,zero,10560 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   10550:	e0bff217 	ldw	r2,-56(fp)
   10554:	10800c17 	ldw	r2,48(r2)
   10558:	e0bfff15 	stw	r2,-4(fp)
   1055c:	00000306 	br	1056c <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   10560:	e0bff217 	ldw	r2,-56(fp)
   10564:	10800b17 	ldw	r2,44(r2)
   10568:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   1056c:	e0bff217 	ldw	r2,-56(fp)
   10570:	10800d17 	ldw	r2,52(r2)
   10574:	1004c03a 	cmpne	r2,r2,zero
   10578:	1000571e 	bne	r2,zero,106d8 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1057c:	e0bff217 	ldw	r2,-56(fp)
   10580:	10801317 	ldw	r2,76(r2)
   10584:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
   10588:	e0bff717 	ldw	r2,-36(fp)
   1058c:	e0fffb17 	ldw	r3,-20(fp)
   10590:	1884983a 	sll	r2,r3,r2
   10594:	e13fff17 	ldw	r4,-4(fp)
   10598:	2089883a 	add	r4,r4,r2
   1059c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   105a0:	e0bff217 	ldw	r2,-56(fp)
   105a4:	10800e17 	ldw	r2,56(r2)
   105a8:	10800058 	cmpnei	r2,r2,1
   105ac:	1000151e 	bne	r2,zero,10604 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
   105b0:	e0bffb17 	ldw	r2,-20(fp)
   105b4:	e0bff815 	stw	r2,-32(fp)
   105b8:	00000e06 	br	105f4 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   105bc:	e0ffff17 	ldw	r3,-4(fp)
   105c0:	e0bffc17 	ldw	r2,-16(fp)
   105c4:	1885883a 	add	r2,r3,r2
   105c8:	e0fff917 	ldw	r3,-28(fp)
   105cc:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   105d0:	e0fff717 	ldw	r3,-36(fp)
   105d4:	00800044 	movi	r2,1
   105d8:	10c4983a 	sll	r2,r2,r3
   105dc:	e0ffff17 	ldw	r3,-4(fp)
   105e0:	1887883a 	add	r3,r3,r2
   105e4:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   105e8:	e13ff817 	ldw	r4,-32(fp)
   105ec:	21000044 	addi	r4,r4,1
   105f0:	e13ff815 	stw	r4,-32(fp)
   105f4:	e0bffa17 	ldw	r2,-24(fp)
   105f8:	e0fff817 	ldw	r3,-32(fp)
   105fc:	10ffef2e 	bgeu	r2,r3,105bc <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   10600:	00009706 	br	10860 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10604:	e0bff217 	ldw	r2,-56(fp)
   10608:	10800e17 	ldw	r2,56(r2)
   1060c:	10800098 	cmpnei	r2,r2,2
   10610:	1000181e 	bne	r2,zero,10674 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
   10614:	e13ffb17 	ldw	r4,-20(fp)
   10618:	e13ff815 	stw	r4,-32(fp)
   1061c:	00001106 	br	10664 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10620:	e0fffc17 	ldw	r3,-16(fp)
   10624:	e0fffc17 	ldw	r3,-16(fp)
   10628:	18c5883a 	add	r2,r3,r3
   1062c:	1007883a 	mov	r3,r2
   10630:	e0bfff17 	ldw	r2,-4(fp)
   10634:	1885883a 	add	r2,r3,r2
   10638:	e0fff917 	ldw	r3,-28(fp)
   1063c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   10640:	e0fff717 	ldw	r3,-36(fp)
   10644:	00800044 	movi	r2,1
   10648:	10c4983a 	sll	r2,r2,r3
   1064c:	e13fff17 	ldw	r4,-4(fp)
   10650:	2089883a 	add	r4,r4,r2
   10654:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10658:	e0bff817 	ldw	r2,-32(fp)
   1065c:	10800044 	addi	r2,r2,1
   10660:	e0bff815 	stw	r2,-32(fp)
   10664:	e0fffa17 	ldw	r3,-24(fp)
   10668:	e13ff817 	ldw	r4,-32(fp)
   1066c:	193fec2e 	bgeu	r3,r4,10620 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   10670:	00007b06 	br	10860 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10674:	e0bffb17 	ldw	r2,-20(fp)
   10678:	e0bff815 	stw	r2,-32(fp)
   1067c:	00001206 	br	106c8 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10680:	e0fffc17 	ldw	r3,-16(fp)
   10684:	e0fffc17 	ldw	r3,-16(fp)
   10688:	18c5883a 	add	r2,r3,r3
   1068c:	1085883a 	add	r2,r2,r2
   10690:	1007883a 	mov	r3,r2
   10694:	e0bfff17 	ldw	r2,-4(fp)
   10698:	1885883a 	add	r2,r3,r2
   1069c:	e0fff917 	ldw	r3,-28(fp)
   106a0:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   106a4:	e0fff717 	ldw	r3,-36(fp)
   106a8:	00800044 	movi	r2,1
   106ac:	10c4983a 	sll	r2,r2,r3
   106b0:	e13fff17 	ldw	r4,-4(fp)
   106b4:	2089883a 	add	r4,r4,r2
   106b8:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   106bc:	e0bff817 	ldw	r2,-32(fp)
   106c0:	10800044 	addi	r2,r2,1
   106c4:	e0bff815 	stw	r2,-32(fp)
   106c8:	e0fffa17 	ldw	r3,-24(fp)
   106cc:	e13ff817 	ldw	r4,-32(fp)
   106d0:	193feb2e 	bgeu	r3,r4,10680 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   106d4:	00006206 	br	10860 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   106d8:	e0bff217 	ldw	r2,-56(fp)
   106dc:	10800e17 	ldw	r2,56(r2)
   106e0:	10800058 	cmpnei	r2,r2,1
   106e4:	1000191e 	bne	r2,zero,1074c <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
   106e8:	e0fffb17 	ldw	r3,-20(fp)
   106ec:	e13ffe17 	ldw	r4,-8(fp)
   106f0:	1905383a 	mul	r2,r3,r4
   106f4:	e0ffff17 	ldw	r3,-4(fp)
   106f8:	1887883a 	add	r3,r3,r2
   106fc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10700:	e13ffb17 	ldw	r4,-20(fp)
   10704:	e13ff615 	stw	r4,-40(fp)
   10708:	00000c06 	br	1073c <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1070c:	e0ffff17 	ldw	r3,-4(fp)
   10710:	e0bffc17 	ldw	r2,-16(fp)
   10714:	1885883a 	add	r2,r3,r2
   10718:	e0fff917 	ldw	r3,-28(fp)
   1071c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   10720:	e0bfff17 	ldw	r2,-4(fp)
   10724:	e0fffe17 	ldw	r3,-8(fp)
   10728:	10c5883a 	add	r2,r2,r3
   1072c:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10730:	e13ff617 	ldw	r4,-40(fp)
   10734:	21000044 	addi	r4,r4,1
   10738:	e13ff615 	stw	r4,-40(fp)
   1073c:	e0bffa17 	ldw	r2,-24(fp)
   10740:	e0fff617 	ldw	r3,-40(fp)
   10744:	10fff12e 	bgeu	r2,r3,1070c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   10748:	00004506 	br	10860 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1074c:	e0bff217 	ldw	r2,-56(fp)
   10750:	10800e17 	ldw	r2,56(r2)
   10754:	10800098 	cmpnei	r2,r2,2
   10758:	1000201e 	bne	r2,zero,107dc <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
   1075c:	e13ffe17 	ldw	r4,-8(fp)
   10760:	e13ffe17 	ldw	r4,-8(fp)
   10764:	2105883a 	add	r2,r4,r4
   10768:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   1076c:	e0fffb17 	ldw	r3,-20(fp)
   10770:	e13ffe17 	ldw	r4,-8(fp)
   10774:	1905383a 	mul	r2,r3,r4
   10778:	e0ffff17 	ldw	r3,-4(fp)
   1077c:	1887883a 	add	r3,r3,r2
   10780:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10784:	e13ffb17 	ldw	r4,-20(fp)
   10788:	e13ff615 	stw	r4,-40(fp)
   1078c:	00000f06 	br	107cc <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10790:	e0fffc17 	ldw	r3,-16(fp)
   10794:	e0fffc17 	ldw	r3,-16(fp)
   10798:	18c5883a 	add	r2,r3,r3
   1079c:	1007883a 	mov	r3,r2
   107a0:	e0bfff17 	ldw	r2,-4(fp)
   107a4:	1885883a 	add	r2,r3,r2
   107a8:	e0fff917 	ldw	r3,-28(fp)
   107ac:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   107b0:	e13fff17 	ldw	r4,-4(fp)
   107b4:	e0bffe17 	ldw	r2,-8(fp)
   107b8:	2089883a 	add	r4,r4,r2
   107bc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   107c0:	e0fff617 	ldw	r3,-40(fp)
   107c4:	18c00044 	addi	r3,r3,1
   107c8:	e0fff615 	stw	r3,-40(fp)
   107cc:	e13ffa17 	ldw	r4,-24(fp)
   107d0:	e0bff617 	ldw	r2,-40(fp)
   107d4:	20bfee2e 	bgeu	r4,r2,10790 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   107d8:	00002106 	br	10860 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   107dc:	e0fffe17 	ldw	r3,-8(fp)
   107e0:	e0fffe17 	ldw	r3,-8(fp)
   107e4:	18c5883a 	add	r2,r3,r3
   107e8:	1085883a 	add	r2,r2,r2
   107ec:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   107f0:	e13ffb17 	ldw	r4,-20(fp)
   107f4:	e0fffe17 	ldw	r3,-8(fp)
   107f8:	20c5383a 	mul	r2,r4,r3
   107fc:	e13fff17 	ldw	r4,-4(fp)
   10800:	2089883a 	add	r4,r4,r2
   10804:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10808:	e0bffb17 	ldw	r2,-20(fp)
   1080c:	e0bff615 	stw	r2,-40(fp)
   10810:	00001006 	br	10854 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10814:	e0fffc17 	ldw	r3,-16(fp)
   10818:	e0fffc17 	ldw	r3,-16(fp)
   1081c:	18c5883a 	add	r2,r3,r3
   10820:	1085883a 	add	r2,r2,r2
   10824:	1007883a 	mov	r3,r2
   10828:	e0bfff17 	ldw	r2,-4(fp)
   1082c:	1885883a 	add	r2,r3,r2
   10830:	e0fff917 	ldw	r3,-28(fp)
   10834:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   10838:	e13fff17 	ldw	r4,-4(fp)
   1083c:	e0bffe17 	ldw	r2,-8(fp)
   10840:	2089883a 	add	r4,r4,r2
   10844:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10848:	e0fff617 	ldw	r3,-40(fp)
   1084c:	18c00044 	addi	r3,r3,1
   10850:	e0fff615 	stw	r3,-40(fp)
   10854:	e13ffa17 	ldw	r4,-24(fp)
   10858:	e0bff617 	ldw	r2,-40(fp)
   1085c:	20bfed2e 	bgeu	r4,r2,10814 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   10860:	e037883a 	mov	sp,fp
   10864:	df000017 	ldw	fp,0(sp)
   10868:	dec00104 	addi	sp,sp,4
   1086c:	f800283a 	ret

00010870 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   10870:	defff804 	addi	sp,sp,-32
   10874:	dfc00715 	stw	ra,28(sp)
   10878:	df000615 	stw	fp,24(sp)
   1087c:	df000604 	addi	fp,sp,24
   10880:	e13ffc15 	stw	r4,-16(fp)
   10884:	e17ffd15 	stw	r5,-12(fp)
   10888:	e1bffe15 	stw	r6,-8(fp)
   1088c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   10890:	e0800317 	ldw	r2,12(fp)
   10894:	d8800015 	stw	r2,0(sp)
   10898:	e0800417 	ldw	r2,16(fp)
   1089c:	d8800115 	stw	r2,4(sp)
   108a0:	e13ffc17 	ldw	r4,-16(fp)
   108a4:	e17ffd17 	ldw	r5,-12(fp)
   108a8:	e1bfff17 	ldw	r6,-4(fp)
   108ac:	e1fffe17 	ldw	r7,-8(fp)
   108b0:	00101500 	call	10150 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   108b4:	e0800317 	ldw	r2,12(fp)
   108b8:	d8800015 	stw	r2,0(sp)
   108bc:	e0800417 	ldw	r2,16(fp)
   108c0:	d8800115 	stw	r2,4(sp)
   108c4:	e13ffc17 	ldw	r4,-16(fp)
   108c8:	e17ffd17 	ldw	r5,-12(fp)
   108cc:	e1bfff17 	ldw	r6,-4(fp)
   108d0:	e1c00217 	ldw	r7,8(fp)
   108d4:	00101500 	call	10150 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   108d8:	e0800317 	ldw	r2,12(fp)
   108dc:	d8800015 	stw	r2,0(sp)
   108e0:	e0800417 	ldw	r2,16(fp)
   108e4:	d8800115 	stw	r2,4(sp)
   108e8:	e13ffc17 	ldw	r4,-16(fp)
   108ec:	e17ffd17 	ldw	r5,-12(fp)
   108f0:	e1bffe17 	ldw	r6,-8(fp)
   108f4:	e1c00217 	ldw	r7,8(fp)
   108f8:	00104a00 	call	104a0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   108fc:	e0800317 	ldw	r2,12(fp)
   10900:	d8800015 	stw	r2,0(sp)
   10904:	e0800417 	ldw	r2,16(fp)
   10908:	d8800115 	stw	r2,4(sp)
   1090c:	e13ffc17 	ldw	r4,-16(fp)
   10910:	e17fff17 	ldw	r5,-4(fp)
   10914:	e1bffe17 	ldw	r6,-8(fp)
   10918:	e1c00217 	ldw	r7,8(fp)
   1091c:	00104a00 	call	104a0 <alt_up_pixel_buffer_dma_draw_vline>
}
   10920:	e037883a 	mov	sp,fp
   10924:	dfc00117 	ldw	ra,4(sp)
   10928:	df000017 	ldw	fp,0(sp)
   1092c:	dec00204 	addi	sp,sp,8
   10930:	f800283a 	ret

00010934 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   10934:	defffb04 	addi	sp,sp,-20
   10938:	df000415 	stw	fp,16(sp)
   1093c:	df000404 	addi	fp,sp,16
   10940:	e13ffc15 	stw	r4,-16(fp)
   10944:	e17ffd15 	stw	r5,-12(fp)
   10948:	e1bffe15 	stw	r6,-8(fp)
   1094c:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
   10950:	e0c00217 	ldw	r3,8(fp)
   10954:	1804c03a 	cmpne	r2,r3,zero
   10958:	10000b1e 	bne	r2,zero,10988 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   1095c:	e13ffd17 	ldw	r4,-12(fp)
   10960:	e0ffff17 	ldw	r3,-4(fp)
   10964:	20c5383a 	mul	r2,r4,r3
   10968:	e13ffe17 	ldw	r4,-8(fp)
   1096c:	1105883a 	add	r2,r2,r4
   10970:	1007883a 	mov	r3,r2
   10974:	e0bffc17 	ldw	r2,-16(fp)
   10978:	1885883a 	add	r2,r3,r2
   1097c:	e0c00117 	ldw	r3,4(fp)
   10980:	10c00025 	stbio	r3,0(r2)
   10984:	00001b06 	br	109f4 <helper_plot_pixel+0xc0>
	else if (mode == 1)
   10988:	e1000217 	ldw	r4,8(fp)
   1098c:	20800058 	cmpnei	r2,r4,1
   10990:	10000c1e 	bne	r2,zero,109c4 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   10994:	e0fffd17 	ldw	r3,-12(fp)
   10998:	e13fff17 	ldw	r4,-4(fp)
   1099c:	1905383a 	mul	r2,r3,r4
   109a0:	e0fffe17 	ldw	r3,-8(fp)
   109a4:	10c5883a 	add	r2,r2,r3
   109a8:	1085883a 	add	r2,r2,r2
   109ac:	1007883a 	mov	r3,r2
   109b0:	e0bffc17 	ldw	r2,-16(fp)
   109b4:	1885883a 	add	r2,r3,r2
   109b8:	e1000117 	ldw	r4,4(fp)
   109bc:	1100002d 	sthio	r4,0(r2)
   109c0:	00000c06 	br	109f4 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   109c4:	e0fffd17 	ldw	r3,-12(fp)
   109c8:	e13fff17 	ldw	r4,-4(fp)
   109cc:	1905383a 	mul	r2,r3,r4
   109d0:	e0fffe17 	ldw	r3,-8(fp)
   109d4:	10c5883a 	add	r2,r2,r3
   109d8:	1085883a 	add	r2,r2,r2
   109dc:	1085883a 	add	r2,r2,r2
   109e0:	1007883a 	mov	r3,r2
   109e4:	e0bffc17 	ldw	r2,-16(fp)
   109e8:	1885883a 	add	r2,r3,r2
   109ec:	e1000117 	ldw	r4,4(fp)
   109f0:	11000035 	stwio	r4,0(r2)
}
   109f4:	e037883a 	mov	sp,fp
   109f8:	df000017 	ldw	fp,0(sp)
   109fc:	dec00104 	addi	sp,sp,4
   10a00:	f800283a 	ret

00010a04 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   10a04:	deffe404 	addi	sp,sp,-112
   10a08:	dfc01b15 	stw	ra,108(sp)
   10a0c:	df001a15 	stw	fp,104(sp)
   10a10:	df001a04 	addi	fp,sp,104
   10a14:	e13fe815 	stw	r4,-96(fp)
   10a18:	e17fe915 	stw	r5,-92(fp)
   10a1c:	e1bfea15 	stw	r6,-88(fp)
   10a20:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
   10a24:	e0bfe917 	ldw	r2,-92(fp)
   10a28:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
   10a2c:	e0ffea17 	ldw	r3,-88(fp)
   10a30:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
   10a34:	e13feb17 	ldw	r4,-84(fp)
   10a38:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
   10a3c:	e0800217 	ldw	r2,8(fp)
   10a40:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   10a44:	e0fff717 	ldw	r3,-36(fp)
   10a48:	e13ff917 	ldw	r4,-28(fp)
   10a4c:	1905c83a 	sub	r2,r3,r4
   10a50:	e0bfff15 	stw	r2,-4(fp)
   10a54:	e0ffff17 	ldw	r3,-4(fp)
   10a58:	1804403a 	cmpge	r2,r3,zero
   10a5c:	1000031e 	bne	r2,zero,10a6c <alt_up_pixel_buffer_dma_draw_line+0x68>
   10a60:	e13fff17 	ldw	r4,-4(fp)
   10a64:	0109c83a 	sub	r4,zero,r4
   10a68:	e13fff15 	stw	r4,-4(fp)
   10a6c:	e0fff817 	ldw	r3,-32(fp)
   10a70:	e13ffa17 	ldw	r4,-24(fp)
   10a74:	1905c83a 	sub	r2,r3,r4
   10a78:	e0bffe15 	stw	r2,-8(fp)
   10a7c:	e0fffe17 	ldw	r3,-8(fp)
   10a80:	1804403a 	cmpge	r2,r3,zero
   10a84:	1000031e 	bne	r2,zero,10a94 <alt_up_pixel_buffer_dma_draw_line+0x90>
   10a88:	e13ffe17 	ldw	r4,-8(fp)
   10a8c:	0109c83a 	sub	r4,zero,r4
   10a90:	e13ffe15 	stw	r4,-8(fp)
   10a94:	e0fffe17 	ldw	r3,-8(fp)
   10a98:	e13fff17 	ldw	r4,-4(fp)
   10a9c:	1904803a 	cmplt	r2,r3,r4
   10aa0:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   10aa4:	e0bfe817 	ldw	r2,-96(fp)
   10aa8:	10800e17 	ldw	r2,56(r2)
   10aac:	10800060 	cmpeqi	r2,r2,1
   10ab0:	10000c1e 	bne	r2,zero,10ae4 <alt_up_pixel_buffer_dma_draw_line+0xe0>
   10ab4:	e0bfe817 	ldw	r2,-96(fp)
   10ab8:	10800e17 	ldw	r2,56(r2)
   10abc:	10800098 	cmpnei	r2,r2,2
   10ac0:	1000031e 	bne	r2,zero,10ad0 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   10ac4:	00800044 	movi	r2,1
   10ac8:	e0bffc15 	stw	r2,-16(fp)
   10acc:	00000206 	br	10ad8 <alt_up_pixel_buffer_dma_draw_line+0xd4>
   10ad0:	00c00084 	movi	r3,2
   10ad4:	e0fffc15 	stw	r3,-16(fp)
   10ad8:	e13ffc17 	ldw	r4,-16(fp)
   10adc:	e13ffd15 	stw	r4,-12(fp)
   10ae0:	00000106 	br	10ae8 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   10ae4:	e03ffd15 	stw	zero,-12(fp)
   10ae8:	e0bffd17 	ldw	r2,-12(fp)
   10aec:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
   10af0:	e0c00317 	ldw	r3,12(fp)
   10af4:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   10af8:	e0bfe817 	ldw	r2,-96(fp)
   10afc:	10800d17 	ldw	r2,52(r2)
   10b00:	1004c03a 	cmpne	r2,r2,zero
   10b04:	1000091e 	bne	r2,zero,10b2c <alt_up_pixel_buffer_dma_draw_line+0x128>
   10b08:	e0bfe817 	ldw	r2,-96(fp)
   10b0c:	10c01317 	ldw	r3,76(r2)
   10b10:	e0bfef17 	ldw	r2,-68(fp)
   10b14:	1885c83a 	sub	r2,r3,r2
   10b18:	1007883a 	mov	r3,r2
   10b1c:	00800044 	movi	r2,1
   10b20:	10c4983a 	sll	r2,r2,r3
   10b24:	e0bffb15 	stw	r2,-20(fp)
   10b28:	00000306 	br	10b38 <alt_up_pixel_buffer_dma_draw_line+0x134>
   10b2c:	e0bfe817 	ldw	r2,-96(fp)
   10b30:	10800f17 	ldw	r2,60(r2)
   10b34:	e0bffb15 	stw	r2,-20(fp)
   10b38:	e13ffb17 	ldw	r4,-20(fp)
   10b3c:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
   10b40:	e0800417 	ldw	r2,16(fp)
   10b44:	10800058 	cmpnei	r2,r2,1
   10b48:	1000041e 	bne	r2,zero,10b5c <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
   10b4c:	e0bfe817 	ldw	r2,-96(fp)
   10b50:	10800c17 	ldw	r2,48(r2)
   10b54:	e0bfed15 	stw	r2,-76(fp)
   10b58:	00000306 	br	10b68 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   10b5c:	e0bfe817 	ldw	r2,-96(fp)
   10b60:	10800b17 	ldw	r2,44(r2)
   10b64:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
   10b68:	e0fff603 	ldbu	r3,-40(fp)
   10b6c:	18803fcc 	andi	r2,r3,255
   10b70:	1080201c 	xori	r2,r2,128
   10b74:	10bfe004 	addi	r2,r2,-128
   10b78:	10800050 	cmplti	r2,r2,1
   10b7c:	10000c1e 	bne	r2,zero,10bb0 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
   10b80:	e13ffa17 	ldw	r4,-24(fp)
   10b84:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
   10b88:	e0bff917 	ldw	r2,-28(fp)
   10b8c:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
   10b90:	e0fff317 	ldw	r3,-52(fp)
   10b94:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
   10b98:	e13ff817 	ldw	r4,-32(fp)
   10b9c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
   10ba0:	e0bff717 	ldw	r2,-36(fp)
   10ba4:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
   10ba8:	e0fff317 	ldw	r3,-52(fp)
   10bac:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
   10bb0:	e13ff817 	ldw	r4,-32(fp)
   10bb4:	e0bffa17 	ldw	r2,-24(fp)
   10bb8:	20800c0e 	bge	r4,r2,10bec <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
   10bbc:	e0fffa17 	ldw	r3,-24(fp)
   10bc0:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
   10bc4:	e13ff817 	ldw	r4,-32(fp)
   10bc8:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
   10bcc:	e0bff317 	ldw	r2,-52(fp)
   10bd0:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
   10bd4:	e0fff917 	ldw	r3,-28(fp)
   10bd8:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
   10bdc:	e13ff717 	ldw	r4,-36(fp)
   10be0:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
   10be4:	e0bff317 	ldw	r2,-52(fp)
   10be8:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   10bec:	e0fff817 	ldw	r3,-32(fp)
   10bf0:	e13ffa17 	ldw	r4,-24(fp)
   10bf4:	1907c83a 	sub	r3,r3,r4
   10bf8:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
   10bfc:	e0fff717 	ldw	r3,-36(fp)
   10c00:	e13ff917 	ldw	r4,-28(fp)
   10c04:	1905c83a 	sub	r2,r3,r4
   10c08:	e0bff415 	stw	r2,-48(fp)
   10c0c:	e0fff417 	ldw	r3,-48(fp)
   10c10:	1804403a 	cmpge	r2,r3,zero
   10c14:	1000031e 	bne	r2,zero,10c24 <alt_up_pixel_buffer_dma_draw_line+0x220>
   10c18:	e13ff417 	ldw	r4,-48(fp)
   10c1c:	0109c83a 	sub	r4,zero,r4
   10c20:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
   10c24:	e0fff517 	ldw	r3,-44(fp)
   10c28:	1804d7fa 	srli	r2,r3,31
   10c2c:	e13ff517 	ldw	r4,-44(fp)
   10c30:	1105883a 	add	r2,r2,r4
   10c34:	1005d07a 	srai	r2,r2,1
   10c38:	0085c83a 	sub	r2,zero,r2
   10c3c:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
   10c40:	e0bff917 	ldw	r2,-28(fp)
   10c44:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
   10c48:	e0fff917 	ldw	r3,-28(fp)
   10c4c:	e13ff717 	ldw	r4,-36(fp)
   10c50:	1900030e 	bge	r3,r4,10c60 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
   10c54:	00800044 	movi	r2,1
   10c58:	e0bff215 	stw	r2,-56(fp)
   10c5c:	00000206 	br	10c68 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
   10c60:	00ffffc4 	movi	r3,-1
   10c64:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   10c68:	e13ff603 	ldbu	r4,-40(fp)
   10c6c:	20803fcc 	andi	r2,r4,255
   10c70:	1080201c 	xori	r2,r2,128
   10c74:	10bfe004 	addi	r2,r2,-128
   10c78:	10800058 	cmpnei	r2,r2,1
   10c7c:	1000221e 	bne	r2,zero,10d08 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
   10c80:	e0bffa17 	ldw	r2,-24(fp)
   10c84:	e0bff115 	stw	r2,-60(fp)
   10c88:	00001b06 	br	10cf8 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   10c8c:	e0ffee17 	ldw	r3,-72(fp)
   10c90:	d8c00015 	stw	r3,0(sp)
   10c94:	e13fef17 	ldw	r4,-68(fp)
   10c98:	d9000115 	stw	r4,4(sp)
   10c9c:	e13fed17 	ldw	r4,-76(fp)
   10ca0:	e17fec17 	ldw	r5,-80(fp)
   10ca4:	e1bff017 	ldw	r6,-64(fp)
   10ca8:	e1fff117 	ldw	r7,-60(fp)
   10cac:	00109340 	call	10934 <helper_plot_pixel>
			error = error + deltay;
   10cb0:	e0bff317 	ldw	r2,-52(fp)
   10cb4:	e0fff417 	ldw	r3,-48(fp)
   10cb8:	10c5883a 	add	r2,r2,r3
   10cbc:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
   10cc0:	e13ff317 	ldw	r4,-52(fp)
   10cc4:	20800050 	cmplti	r2,r4,1
   10cc8:	1000081e 	bne	r2,zero,10cec <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
   10ccc:	e0bff017 	ldw	r2,-64(fp)
   10cd0:	e0fff217 	ldw	r3,-56(fp)
   10cd4:	10c5883a 	add	r2,r2,r3
   10cd8:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
   10cdc:	e13ff317 	ldw	r4,-52(fp)
   10ce0:	e0bff517 	ldw	r2,-44(fp)
   10ce4:	2089c83a 	sub	r4,r4,r2
   10ce8:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   10cec:	e0fff117 	ldw	r3,-60(fp)
   10cf0:	18c00044 	addi	r3,r3,1
   10cf4:	e0fff115 	stw	r3,-60(fp)
   10cf8:	e13ff817 	ldw	r4,-32(fp)
   10cfc:	e0bff117 	ldw	r2,-60(fp)
   10d00:	20bfe20e 	bge	r4,r2,10c8c <alt_up_pixel_buffer_dma_draw_line+0x288>
   10d04:	00002106 	br	10d8c <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10d08:	e0fffa17 	ldw	r3,-24(fp)
   10d0c:	e0fff115 	stw	r3,-60(fp)
   10d10:	00001b06 	br	10d80 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   10d14:	e13fee17 	ldw	r4,-72(fp)
   10d18:	d9000015 	stw	r4,0(sp)
   10d1c:	e0bfef17 	ldw	r2,-68(fp)
   10d20:	d8800115 	stw	r2,4(sp)
   10d24:	e13fed17 	ldw	r4,-76(fp)
   10d28:	e17fec17 	ldw	r5,-80(fp)
   10d2c:	e1bff117 	ldw	r6,-60(fp)
   10d30:	e1fff017 	ldw	r7,-64(fp)
   10d34:	00109340 	call	10934 <helper_plot_pixel>
			error = error + deltay;
   10d38:	e0fff317 	ldw	r3,-52(fp)
   10d3c:	e13ff417 	ldw	r4,-48(fp)
   10d40:	1907883a 	add	r3,r3,r4
   10d44:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
   10d48:	e0fff317 	ldw	r3,-52(fp)
   10d4c:	18800050 	cmplti	r2,r3,1
   10d50:	1000081e 	bne	r2,zero,10d74 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
   10d54:	e13ff017 	ldw	r4,-64(fp)
   10d58:	e0bff217 	ldw	r2,-56(fp)
   10d5c:	2089883a 	add	r4,r4,r2
   10d60:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
   10d64:	e0fff317 	ldw	r3,-52(fp)
   10d68:	e13ff517 	ldw	r4,-44(fp)
   10d6c:	1907c83a 	sub	r3,r3,r4
   10d70:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10d74:	e0bff117 	ldw	r2,-60(fp)
   10d78:	10800044 	addi	r2,r2,1
   10d7c:	e0bff115 	stw	r2,-60(fp)
   10d80:	e0fff817 	ldw	r3,-32(fp)
   10d84:	e13ff117 	ldw	r4,-60(fp)
   10d88:	193fe20e 	bge	r3,r4,10d14 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   10d8c:	e037883a 	mov	sp,fp
   10d90:	dfc00117 	ldw	ra,4(sp)
   10d94:	df000017 	ldw	fp,0(sp)
   10d98:	dec00204 	addi	sp,sp,8
   10d9c:	f800283a 	ret

00010da0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10da0:	defff404 	addi	sp,sp,-48
   10da4:	df000b15 	stw	fp,44(sp)
   10da8:	df000b04 	addi	fp,sp,44
   10dac:	e13ffb15 	stw	r4,-20(fp)
   10db0:	e17ffc15 	stw	r5,-16(fp)
   10db4:	e1bffd15 	stw	r6,-12(fp)
   10db8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10dbc:	e03ff915 	stw	zero,-28(fp)
   10dc0:	00800074 	movhi	r2,1
   10dc4:	109ad704 	addi	r2,r2,27484
   10dc8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10dcc:	1005003a 	cmpeq	r2,r2,zero
   10dd0:	1000411e 	bne	r2,zero,10ed8 <alt_alarm_start+0x138>
  {
    if (alarm)
   10dd4:	e0bffb17 	ldw	r2,-20(fp)
   10dd8:	1005003a 	cmpeq	r2,r2,zero
   10ddc:	10003b1e 	bne	r2,zero,10ecc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   10de0:	e0fffb17 	ldw	r3,-20(fp)
   10de4:	e0bffd17 	ldw	r2,-12(fp)
   10de8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   10dec:	e0fffb17 	ldw	r3,-20(fp)
   10df0:	e0bffe17 	ldw	r2,-8(fp)
   10df4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10df8:	0005303a 	rdctl	r2,status
   10dfc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e00:	e0fff817 	ldw	r3,-32(fp)
   10e04:	00bfff84 	movi	r2,-2
   10e08:	1884703a 	and	r2,r3,r2
   10e0c:	1001703a 	wrctl	status,r2
  
  return context;
   10e10:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10e14:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10e18:	00800074 	movhi	r2,1
   10e1c:	109ad804 	addi	r2,r2,27488
   10e20:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10e24:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10e28:	e0fffc17 	ldw	r3,-16(fp)
   10e2c:	e0bff917 	ldw	r2,-28(fp)
   10e30:	1885883a 	add	r2,r3,r2
   10e34:	10c00044 	addi	r3,r2,1
   10e38:	e0bffb17 	ldw	r2,-20(fp)
   10e3c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10e40:	e0bffb17 	ldw	r2,-20(fp)
   10e44:	10c00217 	ldw	r3,8(r2)
   10e48:	e0bff917 	ldw	r2,-28(fp)
   10e4c:	1880042e 	bgeu	r3,r2,10e60 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   10e50:	e0fffb17 	ldw	r3,-20(fp)
   10e54:	00800044 	movi	r2,1
   10e58:	18800405 	stb	r2,16(r3)
   10e5c:	00000206 	br	10e68 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   10e60:	e0bffb17 	ldw	r2,-20(fp)
   10e64:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10e68:	e0fffb17 	ldw	r3,-20(fp)
   10e6c:	00800074 	movhi	r2,1
   10e70:	1092fc04 	addi	r2,r2,19440
   10e74:	e0bff615 	stw	r2,-40(fp)
   10e78:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10e7c:	e0fff717 	ldw	r3,-36(fp)
   10e80:	e0bff617 	ldw	r2,-40(fp)
   10e84:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10e88:	e0bff617 	ldw	r2,-40(fp)
   10e8c:	10c00017 	ldw	r3,0(r2)
   10e90:	e0bff717 	ldw	r2,-36(fp)
   10e94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10e98:	e0bff617 	ldw	r2,-40(fp)
   10e9c:	10c00017 	ldw	r3,0(r2)
   10ea0:	e0bff717 	ldw	r2,-36(fp)
   10ea4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10ea8:	e0fff617 	ldw	r3,-40(fp)
   10eac:	e0bff717 	ldw	r2,-36(fp)
   10eb0:	18800015 	stw	r2,0(r3)
   10eb4:	e0bffa17 	ldw	r2,-24(fp)
   10eb8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ebc:	e0bff517 	ldw	r2,-44(fp)
   10ec0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10ec4:	e03fff15 	stw	zero,-4(fp)
   10ec8:	00000506 	br	10ee0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   10ecc:	00bffa84 	movi	r2,-22
   10ed0:	e0bfff15 	stw	r2,-4(fp)
   10ed4:	00000206 	br	10ee0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   10ed8:	00bfde84 	movi	r2,-134
   10edc:	e0bfff15 	stw	r2,-4(fp)
   10ee0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   10ee4:	e037883a 	mov	sp,fp
   10ee8:	df000017 	ldw	fp,0(sp)
   10eec:	dec00104 	addi	sp,sp,4
   10ef0:	f800283a 	ret

00010ef4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10ef4:	deffff04 	addi	sp,sp,-4
   10ef8:	df000015 	stw	fp,0(sp)
   10efc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10f00:	e037883a 	mov	sp,fp
   10f04:	df000017 	ldw	fp,0(sp)
   10f08:	dec00104 	addi	sp,sp,4
   10f0c:	f800283a 	ret

00010f10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10f10:	defff904 	addi	sp,sp,-28
   10f14:	dfc00615 	stw	ra,24(sp)
   10f18:	df000515 	stw	fp,20(sp)
   10f1c:	df000504 	addi	fp,sp,20
   10f20:	e13ffd15 	stw	r4,-12(fp)
   10f24:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10f28:	e0bffd17 	ldw	r2,-12(fp)
   10f2c:	1005003a 	cmpeq	r2,r2,zero
   10f30:	1000041e 	bne	r2,zero,10f44 <alt_dev_llist_insert+0x34>
   10f34:	e0bffd17 	ldw	r2,-12(fp)
   10f38:	10800217 	ldw	r2,8(r2)
   10f3c:	1004c03a 	cmpne	r2,r2,zero
   10f40:	1000071e 	bne	r2,zero,10f60 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   10f44:	0010fc40 	call	10fc4 <alt_get_errno>
   10f48:	1007883a 	mov	r3,r2
   10f4c:	00800584 	movi	r2,22
   10f50:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10f54:	00bffa84 	movi	r2,-22
   10f58:	e0bfff15 	stw	r2,-4(fp)
   10f5c:	00001306 	br	10fac <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10f60:	e0fffd17 	ldw	r3,-12(fp)
   10f64:	e0bffe17 	ldw	r2,-8(fp)
   10f68:	e0bffb15 	stw	r2,-20(fp)
   10f6c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10f70:	e0fffc17 	ldw	r3,-16(fp)
   10f74:	e0bffb17 	ldw	r2,-20(fp)
   10f78:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10f7c:	e0bffb17 	ldw	r2,-20(fp)
   10f80:	10c00017 	ldw	r3,0(r2)
   10f84:	e0bffc17 	ldw	r2,-16(fp)
   10f88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10f8c:	e0bffb17 	ldw	r2,-20(fp)
   10f90:	10c00017 	ldw	r3,0(r2)
   10f94:	e0bffc17 	ldw	r2,-16(fp)
   10f98:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10f9c:	e0fffb17 	ldw	r3,-20(fp)
   10fa0:	e0bffc17 	ldw	r2,-16(fp)
   10fa4:	18800015 	stw	r2,0(r3)

  return 0;  
   10fa8:	e03fff15 	stw	zero,-4(fp)
   10fac:	e0bfff17 	ldw	r2,-4(fp)
}
   10fb0:	e037883a 	mov	sp,fp
   10fb4:	dfc00117 	ldw	ra,4(sp)
   10fb8:	df000017 	ldw	fp,0(sp)
   10fbc:	dec00204 	addi	sp,sp,8
   10fc0:	f800283a 	ret

00010fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10fc4:	defffd04 	addi	sp,sp,-12
   10fc8:	dfc00215 	stw	ra,8(sp)
   10fcc:	df000115 	stw	fp,4(sp)
   10fd0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10fd4:	00800074 	movhi	r2,1
   10fd8:	1092f904 	addi	r2,r2,19428
   10fdc:	10800017 	ldw	r2,0(r2)
   10fe0:	1005003a 	cmpeq	r2,r2,zero
   10fe4:	1000061e 	bne	r2,zero,11000 <alt_get_errno+0x3c>
   10fe8:	00800074 	movhi	r2,1
   10fec:	1092f904 	addi	r2,r2,19428
   10ff0:	10800017 	ldw	r2,0(r2)
   10ff4:	103ee83a 	callr	r2
   10ff8:	e0bfff15 	stw	r2,-4(fp)
   10ffc:	00000306 	br	1100c <alt_get_errno+0x48>
   11000:	00800074 	movhi	r2,1
   11004:	109ad004 	addi	r2,r2,27456
   11008:	e0bfff15 	stw	r2,-4(fp)
   1100c:	e0bfff17 	ldw	r2,-4(fp)
}
   11010:	e037883a 	mov	sp,fp
   11014:	dfc00117 	ldw	ra,4(sp)
   11018:	df000017 	ldw	fp,0(sp)
   1101c:	dec00204 	addi	sp,sp,8
   11020:	f800283a 	ret

00011024 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11024:	defffd04 	addi	sp,sp,-12
   11028:	dfc00215 	stw	ra,8(sp)
   1102c:	df000115 	stw	fp,4(sp)
   11030:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11034:	00bfff04 	movi	r2,-4
   11038:	00c00074 	movhi	r3,1
   1103c:	18c89f04 	addi	r3,r3,8828
   11040:	1885883a 	add	r2,r3,r2
   11044:	e0bfff15 	stw	r2,-4(fp)
   11048:	00000606 	br	11064 <_do_ctors+0x40>
        (*ctor) (); 
   1104c:	e0bfff17 	ldw	r2,-4(fp)
   11050:	10800017 	ldw	r2,0(r2)
   11054:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11058:	e0bfff17 	ldw	r2,-4(fp)
   1105c:	10bfff04 	addi	r2,r2,-4
   11060:	e0bfff15 	stw	r2,-4(fp)
   11064:	e0ffff17 	ldw	r3,-4(fp)
   11068:	00800074 	movhi	r2,1
   1106c:	10889e04 	addi	r2,r2,8824
   11070:	18bff62e 	bgeu	r3,r2,1104c <_do_ctors+0x28>
        (*ctor) (); 
}
   11074:	e037883a 	mov	sp,fp
   11078:	dfc00117 	ldw	ra,4(sp)
   1107c:	df000017 	ldw	fp,0(sp)
   11080:	dec00204 	addi	sp,sp,8
   11084:	f800283a 	ret

00011088 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11088:	defffd04 	addi	sp,sp,-12
   1108c:	dfc00215 	stw	ra,8(sp)
   11090:	df000115 	stw	fp,4(sp)
   11094:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11098:	00bfff04 	movi	r2,-4
   1109c:	00c00074 	movhi	r3,1
   110a0:	18c89f04 	addi	r3,r3,8828
   110a4:	1885883a 	add	r2,r3,r2
   110a8:	e0bfff15 	stw	r2,-4(fp)
   110ac:	00000606 	br	110c8 <_do_dtors+0x40>
        (*dtor) (); 
   110b0:	e0bfff17 	ldw	r2,-4(fp)
   110b4:	10800017 	ldw	r2,0(r2)
   110b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   110bc:	e0bfff17 	ldw	r2,-4(fp)
   110c0:	10bfff04 	addi	r2,r2,-4
   110c4:	e0bfff15 	stw	r2,-4(fp)
   110c8:	e0ffff17 	ldw	r3,-4(fp)
   110cc:	00800074 	movhi	r2,1
   110d0:	10889f04 	addi	r2,r2,8828
   110d4:	18bff62e 	bgeu	r3,r2,110b0 <_do_dtors+0x28>
        (*dtor) (); 
}
   110d8:	e037883a 	mov	sp,fp
   110dc:	dfc00117 	ldw	ra,4(sp)
   110e0:	df000017 	ldw	fp,0(sp)
   110e4:	dec00204 	addi	sp,sp,8
   110e8:	f800283a 	ret

000110ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   110ec:	defff904 	addi	sp,sp,-28
   110f0:	dfc00615 	stw	ra,24(sp)
   110f4:	df000515 	stw	fp,20(sp)
   110f8:	df000504 	addi	fp,sp,20
   110fc:	e13ffd15 	stw	r4,-12(fp)
   11100:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11104:	e0bffe17 	ldw	r2,-8(fp)
   11108:	10800017 	ldw	r2,0(r2)
   1110c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11110:	e13ffd17 	ldw	r4,-12(fp)
   11114:	0002f880 	call	2f88 <strlen>
   11118:	10800044 	addi	r2,r2,1
   1111c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11120:	00000d06 	br	11158 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11124:	e0bffc17 	ldw	r2,-16(fp)
   11128:	11000217 	ldw	r4,8(r2)
   1112c:	e1bffb17 	ldw	r6,-20(fp)
   11130:	e17ffd17 	ldw	r5,-12(fp)
   11134:	0011b840 	call	11b84 <memcmp>
   11138:	1004c03a 	cmpne	r2,r2,zero
   1113c:	1000031e 	bne	r2,zero,1114c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11140:	e0bffc17 	ldw	r2,-16(fp)
   11144:	e0bfff15 	stw	r2,-4(fp)
   11148:	00000706 	br	11168 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1114c:	e0bffc17 	ldw	r2,-16(fp)
   11150:	10800017 	ldw	r2,0(r2)
   11154:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11158:	e0fffe17 	ldw	r3,-8(fp)
   1115c:	e0bffc17 	ldw	r2,-16(fp)
   11160:	10fff01e 	bne	r2,r3,11124 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11164:	e03fff15 	stw	zero,-4(fp)
   11168:	e0bfff17 	ldw	r2,-4(fp)
}
   1116c:	e037883a 	mov	sp,fp
   11170:	dfc00117 	ldw	ra,4(sp)
   11174:	df000017 	ldw	fp,0(sp)
   11178:	dec00204 	addi	sp,sp,8
   1117c:	f800283a 	ret

00011180 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11180:	defffe04 	addi	sp,sp,-8
   11184:	dfc00115 	stw	ra,4(sp)
   11188:	df000015 	stw	fp,0(sp)
   1118c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   11190:	0009883a 	mov	r4,zero
   11194:	01440004 	movi	r5,4096
   11198:	0011aa80 	call	11aa8 <alt_icache_flush>
#endif
}
   1119c:	e037883a 	mov	sp,fp
   111a0:	dfc00117 	ldw	ra,4(sp)
   111a4:	df000017 	ldw	fp,0(sp)
   111a8:	dec00204 	addi	sp,sp,8
   111ac:	f800283a 	ret

000111b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   111b0:	defff904 	addi	sp,sp,-28
   111b4:	dfc00615 	stw	ra,24(sp)
   111b8:	df000515 	stw	fp,20(sp)
   111bc:	df000504 	addi	fp,sp,20
   111c0:	e13ffc15 	stw	r4,-16(fp)
   111c4:	e17ffd15 	stw	r5,-12(fp)
   111c8:	e1bffe15 	stw	r6,-8(fp)
   111cc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   111d0:	e13ffd17 	ldw	r4,-12(fp)
   111d4:	e17ffe17 	ldw	r5,-8(fp)
   111d8:	e1bfff17 	ldw	r6,-4(fp)
   111dc:	00113c80 	call	113c8 <open>
   111e0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   111e4:	e0bffb17 	ldw	r2,-20(fp)
   111e8:	1004803a 	cmplt	r2,r2,zero
   111ec:	10001c1e 	bne	r2,zero,11260 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   111f0:	e0bffb17 	ldw	r2,-20(fp)
   111f4:	00c00074 	movhi	r3,1
   111f8:	18cd8904 	addi	r3,r3,13860
   111fc:	10800324 	muli	r2,r2,12
   11200:	10c5883a 	add	r2,r2,r3
   11204:	10c00017 	ldw	r3,0(r2)
   11208:	e0bffc17 	ldw	r2,-16(fp)
   1120c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11210:	e0bffb17 	ldw	r2,-20(fp)
   11214:	00c00074 	movhi	r3,1
   11218:	18cd8904 	addi	r3,r3,13860
   1121c:	10800324 	muli	r2,r2,12
   11220:	10c5883a 	add	r2,r2,r3
   11224:	10800104 	addi	r2,r2,4
   11228:	10c00017 	ldw	r3,0(r2)
   1122c:	e0bffc17 	ldw	r2,-16(fp)
   11230:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11234:	e0bffb17 	ldw	r2,-20(fp)
   11238:	00c00074 	movhi	r3,1
   1123c:	18cd8904 	addi	r3,r3,13860
   11240:	10800324 	muli	r2,r2,12
   11244:	10c5883a 	add	r2,r2,r3
   11248:	10800204 	addi	r2,r2,8
   1124c:	10c00017 	ldw	r3,0(r2)
   11250:	e0bffc17 	ldw	r2,-16(fp)
   11254:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11258:	e13ffb17 	ldw	r4,-20(fp)
   1125c:	000c2d80 	call	c2d8 <alt_release_fd>
  }
} 
   11260:	e037883a 	mov	sp,fp
   11264:	dfc00117 	ldw	ra,4(sp)
   11268:	df000017 	ldw	fp,0(sp)
   1126c:	dec00204 	addi	sp,sp,8
   11270:	f800283a 	ret

00011274 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11274:	defffb04 	addi	sp,sp,-20
   11278:	dfc00415 	stw	ra,16(sp)
   1127c:	df000315 	stw	fp,12(sp)
   11280:	df000304 	addi	fp,sp,12
   11284:	e13ffd15 	stw	r4,-12(fp)
   11288:	e17ffe15 	stw	r5,-8(fp)
   1128c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11290:	01000074 	movhi	r4,1
   11294:	210d8c04 	addi	r4,r4,13872
   11298:	e17ffd17 	ldw	r5,-12(fp)
   1129c:	01800044 	movi	r6,1
   112a0:	01c07fc4 	movi	r7,511
   112a4:	00111b00 	call	111b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   112a8:	01000074 	movhi	r4,1
   112ac:	210d8904 	addi	r4,r4,13860
   112b0:	e17ffe17 	ldw	r5,-8(fp)
   112b4:	000d883a 	mov	r6,zero
   112b8:	01c07fc4 	movi	r7,511
   112bc:	00111b00 	call	111b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   112c0:	01000074 	movhi	r4,1
   112c4:	210d8f04 	addi	r4,r4,13884
   112c8:	e17fff17 	ldw	r5,-4(fp)
   112cc:	01800044 	movi	r6,1
   112d0:	01c07fc4 	movi	r7,511
   112d4:	00111b00 	call	111b0 <alt_open_fd>
}  
   112d8:	e037883a 	mov	sp,fp
   112dc:	dfc00117 	ldw	ra,4(sp)
   112e0:	df000017 	ldw	fp,0(sp)
   112e4:	dec00204 	addi	sp,sp,8
   112e8:	f800283a 	ret

000112ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   112ec:	defffc04 	addi	sp,sp,-16
   112f0:	df000315 	stw	fp,12(sp)
   112f4:	df000304 	addi	fp,sp,12
   112f8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   112fc:	e0bffe17 	ldw	r2,-8(fp)
   11300:	10800217 	ldw	r2,8(r2)
   11304:	10d00034 	orhi	r3,r2,16384
   11308:	e0bffe17 	ldw	r2,-8(fp)
   1130c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11310:	e03ffd15 	stw	zero,-12(fp)
   11314:	00002006 	br	11398 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11318:	e0bffd17 	ldw	r2,-12(fp)
   1131c:	00c00074 	movhi	r3,1
   11320:	18cd8904 	addi	r3,r3,13860
   11324:	10800324 	muli	r2,r2,12
   11328:	10c5883a 	add	r2,r2,r3
   1132c:	10c00017 	ldw	r3,0(r2)
   11330:	e0bffe17 	ldw	r2,-8(fp)
   11334:	10800017 	ldw	r2,0(r2)
   11338:	1880141e 	bne	r3,r2,1138c <alt_file_locked+0xa0>
   1133c:	e0bffd17 	ldw	r2,-12(fp)
   11340:	00c00074 	movhi	r3,1
   11344:	18cd8904 	addi	r3,r3,13860
   11348:	10800324 	muli	r2,r2,12
   1134c:	10c5883a 	add	r2,r2,r3
   11350:	10800204 	addi	r2,r2,8
   11354:	10800017 	ldw	r2,0(r2)
   11358:	1004403a 	cmpge	r2,r2,zero
   1135c:	10000b1e 	bne	r2,zero,1138c <alt_file_locked+0xa0>
   11360:	e0bffd17 	ldw	r2,-12(fp)
   11364:	10800324 	muli	r2,r2,12
   11368:	1007883a 	mov	r3,r2
   1136c:	00800074 	movhi	r2,1
   11370:	108d8904 	addi	r2,r2,13860
   11374:	1887883a 	add	r3,r3,r2
   11378:	e0bffe17 	ldw	r2,-8(fp)
   1137c:	18800326 	beq	r3,r2,1138c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11380:	00bffcc4 	movi	r2,-13
   11384:	e0bfff15 	stw	r2,-4(fp)
   11388:	00000a06 	br	113b4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1138c:	e0bffd17 	ldw	r2,-12(fp)
   11390:	10800044 	addi	r2,r2,1
   11394:	e0bffd15 	stw	r2,-12(fp)
   11398:	00800074 	movhi	r2,1
   1139c:	1092f804 	addi	r2,r2,19424
   113a0:	10800017 	ldw	r2,0(r2)
   113a4:	1007883a 	mov	r3,r2
   113a8:	e0bffd17 	ldw	r2,-12(fp)
   113ac:	18bfda2e 	bgeu	r3,r2,11318 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   113b0:	e03fff15 	stw	zero,-4(fp)
   113b4:	e0bfff17 	ldw	r2,-4(fp)
}
   113b8:	e037883a 	mov	sp,fp
   113bc:	df000017 	ldw	fp,0(sp)
   113c0:	dec00104 	addi	sp,sp,4
   113c4:	f800283a 	ret

000113c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   113c8:	defff404 	addi	sp,sp,-48
   113cc:	dfc00b15 	stw	ra,44(sp)
   113d0:	df000a15 	stw	fp,40(sp)
   113d4:	df000a04 	addi	fp,sp,40
   113d8:	e13ffb15 	stw	r4,-20(fp)
   113dc:	e17ffc15 	stw	r5,-16(fp)
   113e0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   113e4:	00bfffc4 	movi	r2,-1
   113e8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   113ec:	00bffb44 	movi	r2,-19
   113f0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   113f4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   113f8:	e13ffb17 	ldw	r4,-20(fp)
   113fc:	01400074 	movhi	r5,1
   11400:	2952f604 	addi	r5,r5,19416
   11404:	00110ec0 	call	110ec <alt_find_dev>
   11408:	e0bffa15 	stw	r2,-24(fp)
   1140c:	e0bffa17 	ldw	r2,-24(fp)
   11410:	1004c03a 	cmpne	r2,r2,zero
   11414:	1000051e 	bne	r2,zero,1142c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11418:	e13ffb17 	ldw	r4,-20(fp)
   1141c:	00118d00 	call	118d0 <alt_find_file>
   11420:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   11424:	00800044 	movi	r2,1
   11428:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1142c:	e0bffa17 	ldw	r2,-24(fp)
   11430:	1005003a 	cmpeq	r2,r2,zero
   11434:	1000301e 	bne	r2,zero,114f8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11438:	e13ffa17 	ldw	r4,-24(fp)
   1143c:	00119f00 	call	119f0 <alt_get_fd>
   11440:	e0bff815 	stw	r2,-32(fp)
   11444:	e0bff817 	ldw	r2,-32(fp)
   11448:	1004403a 	cmpge	r2,r2,zero
   1144c:	1000031e 	bne	r2,zero,1145c <open+0x94>
    {
      status = index;
   11450:	e0bff817 	ldw	r2,-32(fp)
   11454:	e0bff715 	stw	r2,-36(fp)
   11458:	00002906 	br	11500 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   1145c:	e0bff817 	ldw	r2,-32(fp)
   11460:	10800324 	muli	r2,r2,12
   11464:	1007883a 	mov	r3,r2
   11468:	00800074 	movhi	r2,1
   1146c:	108d8904 	addi	r2,r2,13860
   11470:	1885883a 	add	r2,r3,r2
   11474:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11478:	e0fffc17 	ldw	r3,-16(fp)
   1147c:	00900034 	movhi	r2,16384
   11480:	10bfffc4 	addi	r2,r2,-1
   11484:	1886703a 	and	r3,r3,r2
   11488:	e0bff917 	ldw	r2,-28(fp)
   1148c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11490:	e0bff617 	ldw	r2,-40(fp)
   11494:	1004c03a 	cmpne	r2,r2,zero
   11498:	1000061e 	bne	r2,zero,114b4 <open+0xec>
   1149c:	e13ff917 	ldw	r4,-28(fp)
   114a0:	00112ec0 	call	112ec <alt_file_locked>
   114a4:	e0bff715 	stw	r2,-36(fp)
   114a8:	e0bff717 	ldw	r2,-36(fp)
   114ac:	1004803a 	cmplt	r2,r2,zero
   114b0:	1000131e 	bne	r2,zero,11500 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   114b4:	e0bffa17 	ldw	r2,-24(fp)
   114b8:	10800317 	ldw	r2,12(r2)
   114bc:	1005003a 	cmpeq	r2,r2,zero
   114c0:	1000091e 	bne	r2,zero,114e8 <open+0x120>
   114c4:	e0bffa17 	ldw	r2,-24(fp)
   114c8:	10800317 	ldw	r2,12(r2)
   114cc:	e13ff917 	ldw	r4,-28(fp)
   114d0:	e17ffb17 	ldw	r5,-20(fp)
   114d4:	e1bffc17 	ldw	r6,-16(fp)
   114d8:	e1fffd17 	ldw	r7,-12(fp)
   114dc:	103ee83a 	callr	r2
   114e0:	e0bfff15 	stw	r2,-4(fp)
   114e4:	00000106 	br	114ec <open+0x124>
   114e8:	e03fff15 	stw	zero,-4(fp)
   114ec:	e0bfff17 	ldw	r2,-4(fp)
   114f0:	e0bff715 	stw	r2,-36(fp)
   114f4:	00000206 	br	11500 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   114f8:	00bffb44 	movi	r2,-19
   114fc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11500:	e0bff717 	ldw	r2,-36(fp)
   11504:	1004403a 	cmpge	r2,r2,zero
   11508:	1000091e 	bne	r2,zero,11530 <open+0x168>
  {
    alt_release_fd (index);  
   1150c:	e13ff817 	ldw	r4,-32(fp)
   11510:	000c2d80 	call	c2d8 <alt_release_fd>
    ALT_ERRNO = -status;
   11514:	00115500 	call	11550 <alt_get_errno>
   11518:	e0fff717 	ldw	r3,-36(fp)
   1151c:	00c7c83a 	sub	r3,zero,r3
   11520:	10c00015 	stw	r3,0(r2)
    return -1;
   11524:	00bfffc4 	movi	r2,-1
   11528:	e0bffe15 	stw	r2,-8(fp)
   1152c:	00000206 	br	11538 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   11530:	e0bff817 	ldw	r2,-32(fp)
   11534:	e0bffe15 	stw	r2,-8(fp)
   11538:	e0bffe17 	ldw	r2,-8(fp)
}
   1153c:	e037883a 	mov	sp,fp
   11540:	dfc00117 	ldw	ra,4(sp)
   11544:	df000017 	ldw	fp,0(sp)
   11548:	dec00204 	addi	sp,sp,8
   1154c:	f800283a 	ret

00011550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11550:	defffd04 	addi	sp,sp,-12
   11554:	dfc00215 	stw	ra,8(sp)
   11558:	df000115 	stw	fp,4(sp)
   1155c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11560:	00800074 	movhi	r2,1
   11564:	1092f904 	addi	r2,r2,19428
   11568:	10800017 	ldw	r2,0(r2)
   1156c:	1005003a 	cmpeq	r2,r2,zero
   11570:	1000061e 	bne	r2,zero,1158c <alt_get_errno+0x3c>
   11574:	00800074 	movhi	r2,1
   11578:	1092f904 	addi	r2,r2,19428
   1157c:	10800017 	ldw	r2,0(r2)
   11580:	103ee83a 	callr	r2
   11584:	e0bfff15 	stw	r2,-4(fp)
   11588:	00000306 	br	11598 <alt_get_errno+0x48>
   1158c:	00800074 	movhi	r2,1
   11590:	109ad004 	addi	r2,r2,27456
   11594:	e0bfff15 	stw	r2,-4(fp)
   11598:	e0bfff17 	ldw	r2,-4(fp)
}
   1159c:	e037883a 	mov	sp,fp
   115a0:	dfc00117 	ldw	ra,4(sp)
   115a4:	df000017 	ldw	fp,0(sp)
   115a8:	dec00204 	addi	sp,sp,8
   115ac:	f800283a 	ret

000115b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   115b0:	defffa04 	addi	sp,sp,-24
   115b4:	df000515 	stw	fp,20(sp)
   115b8:	df000504 	addi	fp,sp,20
   115bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115c0:	0005303a 	rdctl	r2,status
   115c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115c8:	e0fffd17 	ldw	r3,-12(fp)
   115cc:	00bfff84 	movi	r2,-2
   115d0:	1884703a 	and	r2,r3,r2
   115d4:	1001703a 	wrctl	status,r2
  
  return context;
   115d8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   115dc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   115e0:	e0bfff17 	ldw	r2,-4(fp)
   115e4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   115e8:	e0bffc17 	ldw	r2,-16(fp)
   115ec:	10c00017 	ldw	r3,0(r2)
   115f0:	e0bffc17 	ldw	r2,-16(fp)
   115f4:	10800117 	ldw	r2,4(r2)
   115f8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   115fc:	e0bffc17 	ldw	r2,-16(fp)
   11600:	10c00117 	ldw	r3,4(r2)
   11604:	e0bffc17 	ldw	r2,-16(fp)
   11608:	10800017 	ldw	r2,0(r2)
   1160c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11610:	e0fffc17 	ldw	r3,-16(fp)
   11614:	e0bffc17 	ldw	r2,-16(fp)
   11618:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1161c:	e0fffc17 	ldw	r3,-16(fp)
   11620:	e0bffc17 	ldw	r2,-16(fp)
   11624:	18800015 	stw	r2,0(r3)
   11628:	e0bffe17 	ldw	r2,-8(fp)
   1162c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11630:	e0bffb17 	ldw	r2,-20(fp)
   11634:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11638:	e037883a 	mov	sp,fp
   1163c:	df000017 	ldw	fp,0(sp)
   11640:	dec00104 	addi	sp,sp,4
   11644:	f800283a 	ret

00011648 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11648:	defffb04 	addi	sp,sp,-20
   1164c:	dfc00415 	stw	ra,16(sp)
   11650:	df000315 	stw	fp,12(sp)
   11654:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11658:	d0a00e17 	ldw	r2,-32712(gp)
   1165c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11660:	d0a7ea17 	ldw	r2,-24664(gp)
   11664:	10800044 	addi	r2,r2,1
   11668:	d0a7ea15 	stw	r2,-24664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1166c:	00003106 	br	11734 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   11670:	e0bffe17 	ldw	r2,-8(fp)
   11674:	10800017 	ldw	r2,0(r2)
   11678:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1167c:	e0bffe17 	ldw	r2,-8(fp)
   11680:	10800403 	ldbu	r2,16(r2)
   11684:	10803fcc 	andi	r2,r2,255
   11688:	1005003a 	cmpeq	r2,r2,zero
   1168c:	1000051e 	bne	r2,zero,116a4 <alt_tick+0x5c>
   11690:	d0a7ea17 	ldw	r2,-24664(gp)
   11694:	1004c03a 	cmpne	r2,r2,zero
   11698:	1000021e 	bne	r2,zero,116a4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1169c:	e0bffe17 	ldw	r2,-8(fp)
   116a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   116a4:	e0bffe17 	ldw	r2,-8(fp)
   116a8:	10c00217 	ldw	r3,8(r2)
   116ac:	d0a7ea17 	ldw	r2,-24664(gp)
   116b0:	10c01e36 	bltu	r2,r3,1172c <alt_tick+0xe4>
   116b4:	e0bffe17 	ldw	r2,-8(fp)
   116b8:	10800403 	ldbu	r2,16(r2)
   116bc:	10803fcc 	andi	r2,r2,255
   116c0:	1004c03a 	cmpne	r2,r2,zero
   116c4:	1000191e 	bne	r2,zero,1172c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   116c8:	e0bffe17 	ldw	r2,-8(fp)
   116cc:	10c00317 	ldw	r3,12(r2)
   116d0:	e0bffe17 	ldw	r2,-8(fp)
   116d4:	11000517 	ldw	r4,20(r2)
   116d8:	183ee83a 	callr	r3
   116dc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   116e0:	e0bffd17 	ldw	r2,-12(fp)
   116e4:	1004c03a 	cmpne	r2,r2,zero
   116e8:	1000031e 	bne	r2,zero,116f8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   116ec:	e13ffe17 	ldw	r4,-8(fp)
   116f0:	00115b00 	call	115b0 <alt_alarm_stop>
   116f4:	00000d06 	br	1172c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   116f8:	e0bffe17 	ldw	r2,-8(fp)
   116fc:	10c00217 	ldw	r3,8(r2)
   11700:	e0bffd17 	ldw	r2,-12(fp)
   11704:	1887883a 	add	r3,r3,r2
   11708:	e0bffe17 	ldw	r2,-8(fp)
   1170c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11710:	e0bffe17 	ldw	r2,-8(fp)
   11714:	10c00217 	ldw	r3,8(r2)
   11718:	d0a7ea17 	ldw	r2,-24664(gp)
   1171c:	1880032e 	bgeu	r3,r2,1172c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   11720:	e0fffe17 	ldw	r3,-8(fp)
   11724:	00800044 	movi	r2,1
   11728:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1172c:	e0bfff17 	ldw	r2,-4(fp)
   11730:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11734:	d0e00e04 	addi	r3,gp,-32712
   11738:	e0bffe17 	ldw	r2,-8(fp)
   1173c:	10ffcc1e 	bne	r2,r3,11670 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   11740:	e037883a 	mov	sp,fp
   11744:	dfc00117 	ldw	ra,4(sp)
   11748:	df000017 	ldw	fp,0(sp)
   1174c:	dec00204 	addi	sp,sp,8
   11750:	f800283a 	ret

00011754 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   11754:	defffd04 	addi	sp,sp,-12
   11758:	dfc00215 	stw	ra,8(sp)
   1175c:	df000115 	stw	fp,4(sp)
   11760:	df000104 	addi	fp,sp,4
   11764:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   11768:	e13fff17 	ldw	r4,-4(fp)
   1176c:	00117a40 	call	117a4 <alt_busy_sleep>
}
   11770:	e037883a 	mov	sp,fp
   11774:	dfc00117 	ldw	ra,4(sp)
   11778:	df000017 	ldw	fp,0(sp)
   1177c:	dec00204 	addi	sp,sp,8
   11780:	f800283a 	ret

00011784 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11784:	deffff04 	addi	sp,sp,-4
   11788:	df000015 	stw	fp,0(sp)
   1178c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11790:	000170fa 	wrctl	ienable,zero
}
   11794:	e037883a 	mov	sp,fp
   11798:	df000017 	ldw	fp,0(sp)
   1179c:	dec00104 	addi	sp,sp,4
   117a0:	f800283a 	ret

000117a4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   117a4:	defffb04 	addi	sp,sp,-20
   117a8:	df000415 	stw	fp,16(sp)
   117ac:	df000404 	addi	fp,sp,16
   117b0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   117b4:	008000c4 	movi	r2,3
   117b8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   117bc:	e0fffc17 	ldw	r3,-16(fp)
   117c0:	008003f4 	movhi	r2,15
   117c4:	10909004 	addi	r2,r2,16960
   117c8:	1887383a 	mul	r3,r3,r2
   117cc:	0080bef4 	movhi	r2,763
   117d0:	10bc2004 	addi	r2,r2,-3968
   117d4:	10c7203a 	divu	r3,r2,r3
   117d8:	00a00034 	movhi	r2,32768
   117dc:	10bfffc4 	addi	r2,r2,-1
   117e0:	10c7203a 	divu	r3,r2,r3
   117e4:	e0bfff17 	ldw	r2,-4(fp)
   117e8:	10c5203a 	divu	r2,r2,r3
   117ec:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   117f0:	e0bffd17 	ldw	r2,-12(fp)
   117f4:	1005003a 	cmpeq	r2,r2,zero
   117f8:	1000251e 	bne	r2,zero,11890 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
   117fc:	e03ffe15 	stw	zero,-8(fp)
   11800:	00001406 	br	11854 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11804:	00a00034 	movhi	r2,32768
   11808:	10bfffc4 	addi	r2,r2,-1
   1180c:	10bfffc4 	addi	r2,r2,-1
   11810:	103ffe1e 	bne	r2,zero,1180c <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11814:	e0fffc17 	ldw	r3,-16(fp)
   11818:	008003f4 	movhi	r2,15
   1181c:	10909004 	addi	r2,r2,16960
   11820:	1887383a 	mul	r3,r3,r2
   11824:	0080bef4 	movhi	r2,763
   11828:	10bc2004 	addi	r2,r2,-3968
   1182c:	10c7203a 	divu	r3,r2,r3
   11830:	00a00034 	movhi	r2,32768
   11834:	10bfffc4 	addi	r2,r2,-1
   11838:	10c7203a 	divu	r3,r2,r3
   1183c:	e0bfff17 	ldw	r2,-4(fp)
   11840:	10c5c83a 	sub	r2,r2,r3
   11844:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11848:	e0bffe17 	ldw	r2,-8(fp)
   1184c:	10800044 	addi	r2,r2,1
   11850:	e0bffe15 	stw	r2,-8(fp)
   11854:	e0fffe17 	ldw	r3,-8(fp)
   11858:	e0bffd17 	ldw	r2,-12(fp)
   1185c:	18bfe916 	blt	r3,r2,11804 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11860:	e0fffc17 	ldw	r3,-16(fp)
   11864:	008003f4 	movhi	r2,15
   11868:	10909004 	addi	r2,r2,16960
   1186c:	1887383a 	mul	r3,r3,r2
   11870:	0080bef4 	movhi	r2,763
   11874:	10bc2004 	addi	r2,r2,-3968
   11878:	10c7203a 	divu	r3,r2,r3
   1187c:	e0bfff17 	ldw	r2,-4(fp)
   11880:	1885383a 	mul	r2,r3,r2
   11884:	10bfffc4 	addi	r2,r2,-1
   11888:	103ffe1e 	bne	r2,zero,11884 <alt_busy_sleep+0xe0>
   1188c:	00000b06 	br	118bc <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11890:	e0fffc17 	ldw	r3,-16(fp)
   11894:	008003f4 	movhi	r2,15
   11898:	10909004 	addi	r2,r2,16960
   1189c:	1887383a 	mul	r3,r3,r2
   118a0:	0080bef4 	movhi	r2,763
   118a4:	10bc2004 	addi	r2,r2,-3968
   118a8:	10c7203a 	divu	r3,r2,r3
   118ac:	e0bfff17 	ldw	r2,-4(fp)
   118b0:	1885383a 	mul	r2,r3,r2
   118b4:	10bfffc4 	addi	r2,r2,-1
   118b8:	00bffe16 	blt	zero,r2,118b4 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   118bc:	0005883a 	mov	r2,zero
}
   118c0:	e037883a 	mov	sp,fp
   118c4:	df000017 	ldw	fp,0(sp)
   118c8:	dec00104 	addi	sp,sp,4
   118cc:	f800283a 	ret

000118d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   118d0:	defffa04 	addi	sp,sp,-24
   118d4:	dfc00515 	stw	ra,20(sp)
   118d8:	df000415 	stw	fp,16(sp)
   118dc:	df000404 	addi	fp,sp,16
   118e0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   118e4:	00800074 	movhi	r2,1
   118e8:	1092f404 	addi	r2,r2,19408
   118ec:	10800017 	ldw	r2,0(r2)
   118f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   118f4:	00003306 	br	119c4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   118f8:	e0bffd17 	ldw	r2,-12(fp)
   118fc:	11000217 	ldw	r4,8(r2)
   11900:	0002f880 	call	2f88 <strlen>
   11904:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   11908:	e0bffd17 	ldw	r2,-12(fp)
   1190c:	10c00217 	ldw	r3,8(r2)
   11910:	e0bffc17 	ldw	r2,-16(fp)
   11914:	1885883a 	add	r2,r3,r2
   11918:	10bfffc4 	addi	r2,r2,-1
   1191c:	10800003 	ldbu	r2,0(r2)
   11920:	10803fcc 	andi	r2,r2,255
   11924:	1080201c 	xori	r2,r2,128
   11928:	10bfe004 	addi	r2,r2,-128
   1192c:	10800bd8 	cmpnei	r2,r2,47
   11930:	1000031e 	bne	r2,zero,11940 <alt_find_file+0x70>
    {
      len -= 1;
   11934:	e0bffc17 	ldw	r2,-16(fp)
   11938:	10bfffc4 	addi	r2,r2,-1
   1193c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11940:	e0bffc17 	ldw	r2,-16(fp)
   11944:	1007883a 	mov	r3,r2
   11948:	e0bffe17 	ldw	r2,-8(fp)
   1194c:	1885883a 	add	r2,r3,r2
   11950:	10800003 	ldbu	r2,0(r2)
   11954:	10803fcc 	andi	r2,r2,255
   11958:	1080201c 	xori	r2,r2,128
   1195c:	10bfe004 	addi	r2,r2,-128
   11960:	10800be0 	cmpeqi	r2,r2,47
   11964:	10000a1e 	bne	r2,zero,11990 <alt_find_file+0xc0>
   11968:	e0bffc17 	ldw	r2,-16(fp)
   1196c:	1007883a 	mov	r3,r2
   11970:	e0bffe17 	ldw	r2,-8(fp)
   11974:	1885883a 	add	r2,r3,r2
   11978:	10800003 	ldbu	r2,0(r2)
   1197c:	10803fcc 	andi	r2,r2,255
   11980:	1080201c 	xori	r2,r2,128
   11984:	10bfe004 	addi	r2,r2,-128
   11988:	1004c03a 	cmpne	r2,r2,zero
   1198c:	10000a1e 	bne	r2,zero,119b8 <alt_find_file+0xe8>
   11990:	e0bffd17 	ldw	r2,-12(fp)
   11994:	11000217 	ldw	r4,8(r2)
   11998:	e1bffc17 	ldw	r6,-16(fp)
   1199c:	e17ffe17 	ldw	r5,-8(fp)
   119a0:	0011b840 	call	11b84 <memcmp>
   119a4:	1004c03a 	cmpne	r2,r2,zero
   119a8:	1000031e 	bne	r2,zero,119b8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   119ac:	e0bffd17 	ldw	r2,-12(fp)
   119b0:	e0bfff15 	stw	r2,-4(fp)
   119b4:	00000806 	br	119d8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   119b8:	e0bffd17 	ldw	r2,-12(fp)
   119bc:	10800017 	ldw	r2,0(r2)
   119c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   119c4:	00c00074 	movhi	r3,1
   119c8:	18d2f404 	addi	r3,r3,19408
   119cc:	e0bffd17 	ldw	r2,-12(fp)
   119d0:	10ffc91e 	bne	r2,r3,118f8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   119d4:	e03fff15 	stw	zero,-4(fp)
   119d8:	e0bfff17 	ldw	r2,-4(fp)
}
   119dc:	e037883a 	mov	sp,fp
   119e0:	dfc00117 	ldw	ra,4(sp)
   119e4:	df000017 	ldw	fp,0(sp)
   119e8:	dec00204 	addi	sp,sp,8
   119ec:	f800283a 	ret

000119f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   119f0:	defffc04 	addi	sp,sp,-16
   119f4:	df000315 	stw	fp,12(sp)
   119f8:	df000304 	addi	fp,sp,12
   119fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   11a00:	00bffa04 	movi	r2,-24
   11a04:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11a08:	e03ffe15 	stw	zero,-8(fp)
   11a0c:	00001e06 	br	11a88 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   11a10:	e0bffe17 	ldw	r2,-8(fp)
   11a14:	00c00074 	movhi	r3,1
   11a18:	18cd8904 	addi	r3,r3,13860
   11a1c:	10800324 	muli	r2,r2,12
   11a20:	10c5883a 	add	r2,r2,r3
   11a24:	10800017 	ldw	r2,0(r2)
   11a28:	1004c03a 	cmpne	r2,r2,zero
   11a2c:	1000131e 	bne	r2,zero,11a7c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   11a30:	e0bffe17 	ldw	r2,-8(fp)
   11a34:	00c00074 	movhi	r3,1
   11a38:	18cd8904 	addi	r3,r3,13860
   11a3c:	10800324 	muli	r2,r2,12
   11a40:	10c7883a 	add	r3,r2,r3
   11a44:	e0bfff17 	ldw	r2,-4(fp)
   11a48:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   11a4c:	00800074 	movhi	r2,1
   11a50:	1092f804 	addi	r2,r2,19424
   11a54:	10c00017 	ldw	r3,0(r2)
   11a58:	e0bffe17 	ldw	r2,-8(fp)
   11a5c:	1880040e 	bge	r3,r2,11a70 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   11a60:	00c00074 	movhi	r3,1
   11a64:	18d2f804 	addi	r3,r3,19424
   11a68:	e0bffe17 	ldw	r2,-8(fp)
   11a6c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   11a70:	e0bffe17 	ldw	r2,-8(fp)
   11a74:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11a78:	00000606 	br	11a94 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11a7c:	e0bffe17 	ldw	r2,-8(fp)
   11a80:	10800044 	addi	r2,r2,1
   11a84:	e0bffe15 	stw	r2,-8(fp)
   11a88:	e0bffe17 	ldw	r2,-8(fp)
   11a8c:	10800810 	cmplti	r2,r2,32
   11a90:	103fdf1e 	bne	r2,zero,11a10 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11a94:	e0bffd17 	ldw	r2,-12(fp)
}
   11a98:	e037883a 	mov	sp,fp
   11a9c:	df000017 	ldw	fp,0(sp)
   11aa0:	dec00104 	addi	sp,sp,4
   11aa4:	f800283a 	ret

00011aa8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11aa8:	defffb04 	addi	sp,sp,-20
   11aac:	df000415 	stw	fp,16(sp)
   11ab0:	df000404 	addi	fp,sp,16
   11ab4:	e13ffe15 	stw	r4,-8(fp)
   11ab8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11abc:	e0bfff17 	ldw	r2,-4(fp)
   11ac0:	10840070 	cmpltui	r2,r2,4097
   11ac4:	1000021e 	bne	r2,zero,11ad0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11ac8:	00840004 	movi	r2,4096
   11acc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11ad0:	e0fffe17 	ldw	r3,-8(fp)
   11ad4:	e0bfff17 	ldw	r2,-4(fp)
   11ad8:	1885883a 	add	r2,r3,r2
   11adc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11ae0:	e0bffe17 	ldw	r2,-8(fp)
   11ae4:	e0bffd15 	stw	r2,-12(fp)
   11ae8:	00000506 	br	11b00 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11aec:	e0bffd17 	ldw	r2,-12(fp)
   11af0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11af4:	e0bffd17 	ldw	r2,-12(fp)
   11af8:	10800804 	addi	r2,r2,32
   11afc:	e0bffd15 	stw	r2,-12(fp)
   11b00:	e0fffd17 	ldw	r3,-12(fp)
   11b04:	e0bffc17 	ldw	r2,-16(fp)
   11b08:	18bff836 	bltu	r3,r2,11aec <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11b0c:	e0bffe17 	ldw	r2,-8(fp)
   11b10:	108007cc 	andi	r2,r2,31
   11b14:	1005003a 	cmpeq	r2,r2,zero
   11b18:	1000021e 	bne	r2,zero,11b24 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11b1c:	e0bffd17 	ldw	r2,-12(fp)
   11b20:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11b24:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11b28:	e037883a 	mov	sp,fp
   11b2c:	df000017 	ldw	fp,0(sp)
   11b30:	dec00104 	addi	sp,sp,4
   11b34:	f800283a 	ret

00011b38 <atexit>:
   11b38:	200b883a 	mov	r5,r4
   11b3c:	000d883a 	mov	r6,zero
   11b40:	0009883a 	mov	r4,zero
   11b44:	000f883a 	mov	r7,zero
   11b48:	0011f301 	jmpi	11f30 <__register_exitproc>

00011b4c <exit>:
   11b4c:	defffe04 	addi	sp,sp,-8
   11b50:	000b883a 	mov	r5,zero
   11b54:	dc000015 	stw	r16,0(sp)
   11b58:	dfc00115 	stw	ra,4(sp)
   11b5c:	2021883a 	mov	r16,r4
   11b60:	00120680 	call	12068 <__call_exitprocs>
   11b64:	00800074 	movhi	r2,1
   11b68:	1092ef04 	addi	r2,r2,19388
   11b6c:	11000017 	ldw	r4,0(r2)
   11b70:	20800f17 	ldw	r2,60(r4)
   11b74:	10000126 	beq	r2,zero,11b7c <exit+0x30>
   11b78:	103ee83a 	callr	r2
   11b7c:	8009883a 	mov	r4,r16
   11b80:	00122580 	call	12258 <_exit>

00011b84 <memcmp>:
   11b84:	00c000c4 	movi	r3,3
   11b88:	1980032e 	bgeu	r3,r6,11b98 <memcmp+0x14>
   11b8c:	2144b03a 	or	r2,r4,r5
   11b90:	10c4703a 	and	r2,r2,r3
   11b94:	10000f26 	beq	r2,zero,11bd4 <memcmp+0x50>
   11b98:	31ffffc4 	addi	r7,r6,-1
   11b9c:	3000061e 	bne	r6,zero,11bb8 <memcmp+0x34>
   11ba0:	00000a06 	br	11bcc <memcmp+0x48>
   11ba4:	39ffffc4 	addi	r7,r7,-1
   11ba8:	00bfffc4 	movi	r2,-1
   11bac:	21000044 	addi	r4,r4,1
   11bb0:	29400044 	addi	r5,r5,1
   11bb4:	38800526 	beq	r7,r2,11bcc <memcmp+0x48>
   11bb8:	20c00003 	ldbu	r3,0(r4)
   11bbc:	28800003 	ldbu	r2,0(r5)
   11bc0:	18bff826 	beq	r3,r2,11ba4 <memcmp+0x20>
   11bc4:	1885c83a 	sub	r2,r3,r2
   11bc8:	f800283a 	ret
   11bcc:	0005883a 	mov	r2,zero
   11bd0:	f800283a 	ret
   11bd4:	180f883a 	mov	r7,r3
   11bd8:	20c00017 	ldw	r3,0(r4)
   11bdc:	28800017 	ldw	r2,0(r5)
   11be0:	18bfed1e 	bne	r3,r2,11b98 <memcmp+0x14>
   11be4:	31bfff04 	addi	r6,r6,-4
   11be8:	21000104 	addi	r4,r4,4
   11bec:	29400104 	addi	r5,r5,4
   11bf0:	39bff936 	bltu	r7,r6,11bd8 <memcmp+0x54>
   11bf4:	003fe806 	br	11b98 <memcmp+0x14>

00011bf8 <putc>:
   11bf8:	defffc04 	addi	sp,sp,-16
   11bfc:	dc800215 	stw	r18,8(sp)
   11c00:	04800074 	movhi	r18,1
   11c04:	9492ee04 	addi	r18,r18,19384
   11c08:	90c00017 	ldw	r3,0(r18)
   11c0c:	dc400115 	stw	r17,4(sp)
   11c10:	dc000015 	stw	r16,0(sp)
   11c14:	dfc00315 	stw	ra,12(sp)
   11c18:	2023883a 	mov	r17,r4
   11c1c:	2821883a 	mov	r16,r5
   11c20:	18000226 	beq	r3,zero,11c2c <putc+0x34>
   11c24:	18800e17 	ldw	r2,56(r3)
   11c28:	10001126 	beq	r2,zero,11c70 <putc+0x78>
   11c2c:	80800217 	ldw	r2,8(r16)
   11c30:	10ffffc4 	addi	r3,r2,-1
   11c34:	80c00215 	stw	r3,8(r16)
   11c38:	18001316 	blt	r3,zero,11c88 <putc+0x90>
   11c3c:	80800017 	ldw	r2,0(r16)
   11c40:	14400005 	stb	r17,0(r2)
   11c44:	80c00017 	ldw	r3,0(r16)
   11c48:	18800044 	addi	r2,r3,1
   11c4c:	18c00003 	ldbu	r3,0(r3)
   11c50:	80800015 	stw	r2,0(r16)
   11c54:	1805883a 	mov	r2,r3
   11c58:	dfc00317 	ldw	ra,12(sp)
   11c5c:	dc800217 	ldw	r18,8(sp)
   11c60:	dc400117 	ldw	r17,4(sp)
   11c64:	dc000017 	ldw	r16,0(sp)
   11c68:	dec00404 	addi	sp,sp,16
   11c6c:	f800283a 	ret
   11c70:	1809883a 	mov	r4,r3
   11c74:	0006ac40 	call	6ac4 <__sinit>
   11c78:	80800217 	ldw	r2,8(r16)
   11c7c:	10ffffc4 	addi	r3,r2,-1
   11c80:	80c00215 	stw	r3,8(r16)
   11c84:	183fed0e 	bge	r3,zero,11c3c <putc+0x44>
   11c88:	80800617 	ldw	r2,24(r16)
   11c8c:	18800f16 	blt	r3,r2,11ccc <putc+0xd4>
   11c90:	80800017 	ldw	r2,0(r16)
   11c94:	14400005 	stb	r17,0(r2)
   11c98:	81000017 	ldw	r4,0(r16)
   11c9c:	00800284 	movi	r2,10
   11ca0:	20c00003 	ldbu	r3,0(r4)
   11ca4:	18801226 	beq	r3,r2,11cf0 <putc+0xf8>
   11ca8:	20800044 	addi	r2,r4,1
   11cac:	80800015 	stw	r2,0(r16)
   11cb0:	1805883a 	mov	r2,r3
   11cb4:	dfc00317 	ldw	ra,12(sp)
   11cb8:	dc800217 	ldw	r18,8(sp)
   11cbc:	dc400117 	ldw	r17,4(sp)
   11cc0:	dc000017 	ldw	r16,0(sp)
   11cc4:	dec00404 	addi	sp,sp,16
   11cc8:	f800283a 	ret
   11ccc:	91000017 	ldw	r4,0(r18)
   11cd0:	880b883a 	mov	r5,r17
   11cd4:	800d883a 	mov	r6,r16
   11cd8:	dfc00317 	ldw	ra,12(sp)
   11cdc:	dc800217 	ldw	r18,8(sp)
   11ce0:	dc400117 	ldw	r17,4(sp)
   11ce4:	dc000017 	ldw	r16,0(sp)
   11ce8:	dec00404 	addi	sp,sp,16
   11cec:	0011de41 	jmpi	11de4 <__swbuf_r>
   11cf0:	91000017 	ldw	r4,0(r18)
   11cf4:	180b883a 	mov	r5,r3
   11cf8:	003ff606 	br	11cd4 <putc+0xdc>

00011cfc <_putc_r>:
   11cfc:	defffc04 	addi	sp,sp,-16
   11d00:	dc400215 	stw	r17,8(sp)
   11d04:	dc000115 	stw	r16,4(sp)
   11d08:	dfc00315 	stw	ra,12(sp)
   11d0c:	2021883a 	mov	r16,r4
   11d10:	2823883a 	mov	r17,r5
   11d14:	20000226 	beq	r4,zero,11d20 <_putc_r+0x24>
   11d18:	20800e17 	ldw	r2,56(r4)
   11d1c:	10001026 	beq	r2,zero,11d60 <_putc_r+0x64>
   11d20:	30800217 	ldw	r2,8(r6)
   11d24:	10ffffc4 	addi	r3,r2,-1
   11d28:	30c00215 	stw	r3,8(r6)
   11d2c:	18001316 	blt	r3,zero,11d7c <_putc_r+0x80>
   11d30:	30800017 	ldw	r2,0(r6)
   11d34:	14400005 	stb	r17,0(r2)
   11d38:	30c00017 	ldw	r3,0(r6)
   11d3c:	18800044 	addi	r2,r3,1
   11d40:	18c00003 	ldbu	r3,0(r3)
   11d44:	30800015 	stw	r2,0(r6)
   11d48:	1805883a 	mov	r2,r3
   11d4c:	dfc00317 	ldw	ra,12(sp)
   11d50:	dc400217 	ldw	r17,8(sp)
   11d54:	dc000117 	ldw	r16,4(sp)
   11d58:	dec00404 	addi	sp,sp,16
   11d5c:	f800283a 	ret
   11d60:	d9800015 	stw	r6,0(sp)
   11d64:	0006ac40 	call	6ac4 <__sinit>
   11d68:	d9800017 	ldw	r6,0(sp)
   11d6c:	30800217 	ldw	r2,8(r6)
   11d70:	10ffffc4 	addi	r3,r2,-1
   11d74:	30c00215 	stw	r3,8(r6)
   11d78:	183fed0e 	bge	r3,zero,11d30 <_putc_r+0x34>
   11d7c:	30800617 	ldw	r2,24(r6)
   11d80:	18800e16 	blt	r3,r2,11dbc <_putc_r+0xc0>
   11d84:	30800017 	ldw	r2,0(r6)
   11d88:	14400005 	stb	r17,0(r2)
   11d8c:	31000017 	ldw	r4,0(r6)
   11d90:	00800284 	movi	r2,10
   11d94:	20c00003 	ldbu	r3,0(r4)
   11d98:	18800f26 	beq	r3,r2,11dd8 <_putc_r+0xdc>
   11d9c:	20800044 	addi	r2,r4,1
   11da0:	30800015 	stw	r2,0(r6)
   11da4:	1805883a 	mov	r2,r3
   11da8:	dfc00317 	ldw	ra,12(sp)
   11dac:	dc400217 	ldw	r17,8(sp)
   11db0:	dc000117 	ldw	r16,4(sp)
   11db4:	dec00404 	addi	sp,sp,16
   11db8:	f800283a 	ret
   11dbc:	8009883a 	mov	r4,r16
   11dc0:	880b883a 	mov	r5,r17
   11dc4:	dfc00317 	ldw	ra,12(sp)
   11dc8:	dc400217 	ldw	r17,8(sp)
   11dcc:	dc000117 	ldw	r16,4(sp)
   11dd0:	dec00404 	addi	sp,sp,16
   11dd4:	0011de41 	jmpi	11de4 <__swbuf_r>
   11dd8:	8009883a 	mov	r4,r16
   11ddc:	180b883a 	mov	r5,r3
   11de0:	003ff806 	br	11dc4 <_putc_r+0xc8>

00011de4 <__swbuf_r>:
   11de4:	defffc04 	addi	sp,sp,-16
   11de8:	dc400215 	stw	r17,8(sp)
   11dec:	dc000115 	stw	r16,4(sp)
   11df0:	dfc00315 	stw	ra,12(sp)
   11df4:	2023883a 	mov	r17,r4
   11df8:	2821883a 	mov	r16,r5
   11dfc:	20000226 	beq	r4,zero,11e08 <__swbuf_r+0x24>
   11e00:	20800e17 	ldw	r2,56(r4)
   11e04:	10002f26 	beq	r2,zero,11ec4 <__swbuf_r+0xe0>
   11e08:	3080030b 	ldhu	r2,12(r6)
   11e0c:	30c00617 	ldw	r3,24(r6)
   11e10:	1080020c 	andi	r2,r2,8
   11e14:	30c00215 	stw	r3,8(r6)
   11e18:	10002226 	beq	r2,zero,11ea4 <__swbuf_r+0xc0>
   11e1c:	30c00417 	ldw	r3,16(r6)
   11e20:	18002026 	beq	r3,zero,11ea4 <__swbuf_r+0xc0>
   11e24:	31000017 	ldw	r4,0(r6)
   11e28:	30800517 	ldw	r2,20(r6)
   11e2c:	20c7c83a 	sub	r3,r4,r3
   11e30:	18802f0e 	bge	r3,r2,11ef0 <__swbuf_r+0x10c>
   11e34:	19400044 	addi	r5,r3,1
   11e38:	30800217 	ldw	r2,8(r6)
   11e3c:	84003fcc 	andi	r16,r16,255
   11e40:	20c00044 	addi	r3,r4,1
   11e44:	10bfffc4 	addi	r2,r2,-1
   11e48:	30800215 	stw	r2,8(r6)
   11e4c:	24000005 	stb	r16,0(r4)
   11e50:	30800517 	ldw	r2,20(r6)
   11e54:	30c00015 	stw	r3,0(r6)
   11e58:	11400c26 	beq	r2,r5,11e8c <__swbuf_r+0xa8>
   11e5c:	3080030b 	ldhu	r2,12(r6)
   11e60:	1080004c 	andi	r2,r2,1
   11e64:	1005003a 	cmpeq	r2,r2,zero
   11e68:	10000626 	beq	r2,zero,11e84 <__swbuf_r+0xa0>
   11e6c:	8005883a 	mov	r2,r16
   11e70:	dfc00317 	ldw	ra,12(sp)
   11e74:	dc400217 	ldw	r17,8(sp)
   11e78:	dc000117 	ldw	r16,4(sp)
   11e7c:	dec00404 	addi	sp,sp,16
   11e80:	f800283a 	ret
   11e84:	00800284 	movi	r2,10
   11e88:	80bff81e 	bne	r16,r2,11e6c <__swbuf_r+0x88>
   11e8c:	8809883a 	mov	r4,r17
   11e90:	300b883a 	mov	r5,r6
   11e94:	000682c0 	call	682c <_fflush_r>
   11e98:	103ff426 	beq	r2,zero,11e6c <__swbuf_r+0x88>
   11e9c:	043fffc4 	movi	r16,-1
   11ea0:	003ff206 	br	11e6c <__swbuf_r+0x88>
   11ea4:	300b883a 	mov	r5,r6
   11ea8:	8809883a 	mov	r4,r17
   11eac:	d9800015 	stw	r6,0(sp)
   11eb0:	0004f240 	call	4f24 <__swsetup_r>
   11eb4:	d9800017 	ldw	r6,0(sp)
   11eb8:	1000061e 	bne	r2,zero,11ed4 <__swbuf_r+0xf0>
   11ebc:	30c00417 	ldw	r3,16(r6)
   11ec0:	003fd806 	br	11e24 <__swbuf_r+0x40>
   11ec4:	d9800015 	stw	r6,0(sp)
   11ec8:	0006ac40 	call	6ac4 <__sinit>
   11ecc:	d9800017 	ldw	r6,0(sp)
   11ed0:	003fcd06 	br	11e08 <__swbuf_r+0x24>
   11ed4:	3080030b 	ldhu	r2,12(r6)
   11ed8:	00c00244 	movi	r3,9
   11edc:	043fffc4 	movi	r16,-1
   11ee0:	10801014 	ori	r2,r2,64
   11ee4:	3080030d 	sth	r2,12(r6)
   11ee8:	88c00015 	stw	r3,0(r17)
   11eec:	003fdf06 	br	11e6c <__swbuf_r+0x88>
   11ef0:	300b883a 	mov	r5,r6
   11ef4:	8809883a 	mov	r4,r17
   11ef8:	d9800015 	stw	r6,0(sp)
   11efc:	000682c0 	call	682c <_fflush_r>
   11f00:	d9800017 	ldw	r6,0(sp)
   11f04:	103fe51e 	bne	r2,zero,11e9c <__swbuf_r+0xb8>
   11f08:	31000017 	ldw	r4,0(r6)
   11f0c:	01400044 	movi	r5,1
   11f10:	003fc906 	br	11e38 <__swbuf_r+0x54>

00011f14 <__swbuf>:
   11f14:	01800074 	movhi	r6,1
   11f18:	3192ee04 	addi	r6,r6,19384
   11f1c:	2007883a 	mov	r3,r4
   11f20:	31000017 	ldw	r4,0(r6)
   11f24:	280d883a 	mov	r6,r5
   11f28:	180b883a 	mov	r5,r3
   11f2c:	0011de41 	jmpi	11de4 <__swbuf_r>

00011f30 <__register_exitproc>:
   11f30:	defffa04 	addi	sp,sp,-24
   11f34:	00800074 	movhi	r2,1
   11f38:	1092ef04 	addi	r2,r2,19388
   11f3c:	dc000015 	stw	r16,0(sp)
   11f40:	14000017 	ldw	r16,0(r2)
   11f44:	dd000415 	stw	r20,16(sp)
   11f48:	2829883a 	mov	r20,r5
   11f4c:	81405217 	ldw	r5,328(r16)
   11f50:	dcc00315 	stw	r19,12(sp)
   11f54:	dc800215 	stw	r18,8(sp)
   11f58:	dc400115 	stw	r17,4(sp)
   11f5c:	dfc00515 	stw	ra,20(sp)
   11f60:	2023883a 	mov	r17,r4
   11f64:	3027883a 	mov	r19,r6
   11f68:	3825883a 	mov	r18,r7
   11f6c:	28002526 	beq	r5,zero,12004 <__register_exitproc+0xd4>
   11f70:	29000117 	ldw	r4,4(r5)
   11f74:	008007c4 	movi	r2,31
   11f78:	11002716 	blt	r2,r4,12018 <__register_exitproc+0xe8>
   11f7c:	8800101e 	bne	r17,zero,11fc0 <__register_exitproc+0x90>
   11f80:	2105883a 	add	r2,r4,r4
   11f84:	1085883a 	add	r2,r2,r2
   11f88:	20c00044 	addi	r3,r4,1
   11f8c:	1145883a 	add	r2,r2,r5
   11f90:	0009883a 	mov	r4,zero
   11f94:	15000215 	stw	r20,8(r2)
   11f98:	28c00115 	stw	r3,4(r5)
   11f9c:	2005883a 	mov	r2,r4
   11fa0:	dfc00517 	ldw	ra,20(sp)
   11fa4:	dd000417 	ldw	r20,16(sp)
   11fa8:	dcc00317 	ldw	r19,12(sp)
   11fac:	dc800217 	ldw	r18,8(sp)
   11fb0:	dc400117 	ldw	r17,4(sp)
   11fb4:	dc000017 	ldw	r16,0(sp)
   11fb8:	dec00604 	addi	sp,sp,24
   11fbc:	f800283a 	ret
   11fc0:	29802204 	addi	r6,r5,136
   11fc4:	00800044 	movi	r2,1
   11fc8:	110e983a 	sll	r7,r2,r4
   11fcc:	30c04017 	ldw	r3,256(r6)
   11fd0:	2105883a 	add	r2,r4,r4
   11fd4:	1085883a 	add	r2,r2,r2
   11fd8:	1185883a 	add	r2,r2,r6
   11fdc:	19c6b03a 	or	r3,r3,r7
   11fe0:	14802015 	stw	r18,128(r2)
   11fe4:	14c00015 	stw	r19,0(r2)
   11fe8:	00800084 	movi	r2,2
   11fec:	30c04015 	stw	r3,256(r6)
   11ff0:	88bfe31e 	bne	r17,r2,11f80 <__register_exitproc+0x50>
   11ff4:	30804117 	ldw	r2,260(r6)
   11ff8:	11c4b03a 	or	r2,r2,r7
   11ffc:	30804115 	stw	r2,260(r6)
   12000:	003fdf06 	br	11f80 <__register_exitproc+0x50>
   12004:	00801774 	movhi	r2,93
   12008:	10bf0b04 	addi	r2,r2,-980
   1200c:	100b883a 	mov	r5,r2
   12010:	80805215 	stw	r2,328(r16)
   12014:	003fd606 	br	11f70 <__register_exitproc+0x40>
   12018:	00800034 	movhi	r2,0
   1201c:	10800004 	addi	r2,r2,0
   12020:	1000021e 	bne	r2,zero,1202c <__register_exitproc+0xfc>
   12024:	013fffc4 	movi	r4,-1
   12028:	003fdc06 	br	11f9c <__register_exitproc+0x6c>
   1202c:	01006404 	movi	r4,400
   12030:	103ee83a 	callr	r2
   12034:	1007883a 	mov	r3,r2
   12038:	103ffa26 	beq	r2,zero,12024 <__register_exitproc+0xf4>
   1203c:	80805217 	ldw	r2,328(r16)
   12040:	180b883a 	mov	r5,r3
   12044:	18000115 	stw	zero,4(r3)
   12048:	18800015 	stw	r2,0(r3)
   1204c:	80c05215 	stw	r3,328(r16)
   12050:	18006215 	stw	zero,392(r3)
   12054:	18006315 	stw	zero,396(r3)
   12058:	0009883a 	mov	r4,zero
   1205c:	883fc826 	beq	r17,zero,11f80 <__register_exitproc+0x50>
   12060:	003fd706 	br	11fc0 <__register_exitproc+0x90>

00012064 <register_fini>:
   12064:	f800283a 	ret

00012068 <__call_exitprocs>:
   12068:	00800074 	movhi	r2,1
   1206c:	1092ef04 	addi	r2,r2,19388
   12070:	10800017 	ldw	r2,0(r2)
   12074:	defff304 	addi	sp,sp,-52
   12078:	df000b15 	stw	fp,44(sp)
   1207c:	d8800115 	stw	r2,4(sp)
   12080:	00800034 	movhi	r2,0
   12084:	10800004 	addi	r2,r2,0
   12088:	1005003a 	cmpeq	r2,r2,zero
   1208c:	d8800215 	stw	r2,8(sp)
   12090:	d8800117 	ldw	r2,4(sp)
   12094:	dd400815 	stw	r21,32(sp)
   12098:	dd000715 	stw	r20,28(sp)
   1209c:	10805204 	addi	r2,r2,328
   120a0:	dfc00c15 	stw	ra,48(sp)
   120a4:	ddc00a15 	stw	r23,40(sp)
   120a8:	dd800915 	stw	r22,36(sp)
   120ac:	dcc00615 	stw	r19,24(sp)
   120b0:	dc800515 	stw	r18,20(sp)
   120b4:	dc400415 	stw	r17,16(sp)
   120b8:	dc000315 	stw	r16,12(sp)
   120bc:	282b883a 	mov	r21,r5
   120c0:	2039883a 	mov	fp,r4
   120c4:	d8800015 	stw	r2,0(sp)
   120c8:	2829003a 	cmpeq	r20,r5,zero
   120cc:	d8800117 	ldw	r2,4(sp)
   120d0:	14405217 	ldw	r17,328(r2)
   120d4:	88001026 	beq	r17,zero,12118 <__call_exitprocs+0xb0>
   120d8:	ddc00017 	ldw	r23,0(sp)
   120dc:	88800117 	ldw	r2,4(r17)
   120e0:	8c802204 	addi	r18,r17,136
   120e4:	143fffc4 	addi	r16,r2,-1
   120e8:	80000916 	blt	r16,zero,12110 <__call_exitprocs+0xa8>
   120ec:	05bfffc4 	movi	r22,-1
   120f0:	a000151e 	bne	r20,zero,12148 <__call_exitprocs+0xe0>
   120f4:	8409883a 	add	r4,r16,r16
   120f8:	2105883a 	add	r2,r4,r4
   120fc:	1485883a 	add	r2,r2,r18
   12100:	10c02017 	ldw	r3,128(r2)
   12104:	a8c01126 	beq	r21,r3,1214c <__call_exitprocs+0xe4>
   12108:	843fffc4 	addi	r16,r16,-1
   1210c:	85bff81e 	bne	r16,r22,120f0 <__call_exitprocs+0x88>
   12110:	d8800217 	ldw	r2,8(sp)
   12114:	10003126 	beq	r2,zero,121dc <__call_exitprocs+0x174>
   12118:	dfc00c17 	ldw	ra,48(sp)
   1211c:	df000b17 	ldw	fp,44(sp)
   12120:	ddc00a17 	ldw	r23,40(sp)
   12124:	dd800917 	ldw	r22,36(sp)
   12128:	dd400817 	ldw	r21,32(sp)
   1212c:	dd000717 	ldw	r20,28(sp)
   12130:	dcc00617 	ldw	r19,24(sp)
   12134:	dc800517 	ldw	r18,20(sp)
   12138:	dc400417 	ldw	r17,16(sp)
   1213c:	dc000317 	ldw	r16,12(sp)
   12140:	dec00d04 	addi	sp,sp,52
   12144:	f800283a 	ret
   12148:	8409883a 	add	r4,r16,r16
   1214c:	88c00117 	ldw	r3,4(r17)
   12150:	2105883a 	add	r2,r4,r4
   12154:	1445883a 	add	r2,r2,r17
   12158:	18ffffc4 	addi	r3,r3,-1
   1215c:	11800217 	ldw	r6,8(r2)
   12160:	1c001526 	beq	r3,r16,121b8 <__call_exitprocs+0x150>
   12164:	10000215 	stw	zero,8(r2)
   12168:	303fe726 	beq	r6,zero,12108 <__call_exitprocs+0xa0>
   1216c:	00c00044 	movi	r3,1
   12170:	1c06983a 	sll	r3,r3,r16
   12174:	90804017 	ldw	r2,256(r18)
   12178:	8cc00117 	ldw	r19,4(r17)
   1217c:	1884703a 	and	r2,r3,r2
   12180:	10001426 	beq	r2,zero,121d4 <__call_exitprocs+0x16c>
   12184:	90804117 	ldw	r2,260(r18)
   12188:	1884703a 	and	r2,r3,r2
   1218c:	10000c1e 	bne	r2,zero,121c0 <__call_exitprocs+0x158>
   12190:	2105883a 	add	r2,r4,r4
   12194:	1485883a 	add	r2,r2,r18
   12198:	11400017 	ldw	r5,0(r2)
   1219c:	e009883a 	mov	r4,fp
   121a0:	303ee83a 	callr	r6
   121a4:	88800117 	ldw	r2,4(r17)
   121a8:	98bfc81e 	bne	r19,r2,120cc <__call_exitprocs+0x64>
   121ac:	b8800017 	ldw	r2,0(r23)
   121b0:	147fd526 	beq	r2,r17,12108 <__call_exitprocs+0xa0>
   121b4:	003fc506 	br	120cc <__call_exitprocs+0x64>
   121b8:	8c000115 	stw	r16,4(r17)
   121bc:	003fea06 	br	12168 <__call_exitprocs+0x100>
   121c0:	2105883a 	add	r2,r4,r4
   121c4:	1485883a 	add	r2,r2,r18
   121c8:	11000017 	ldw	r4,0(r2)
   121cc:	303ee83a 	callr	r6
   121d0:	003ff406 	br	121a4 <__call_exitprocs+0x13c>
   121d4:	303ee83a 	callr	r6
   121d8:	003ff206 	br	121a4 <__call_exitprocs+0x13c>
   121dc:	88800117 	ldw	r2,4(r17)
   121e0:	1000081e 	bne	r2,zero,12204 <__call_exitprocs+0x19c>
   121e4:	89000017 	ldw	r4,0(r17)
   121e8:	20000726 	beq	r4,zero,12208 <__call_exitprocs+0x1a0>
   121ec:	b9000015 	stw	r4,0(r23)
   121f0:	8809883a 	mov	r4,r17
   121f4:	00000000 	call	0 <__alt_mem_SDRAM>
   121f8:	bc400017 	ldw	r17,0(r23)
   121fc:	883fb71e 	bne	r17,zero,120dc <__call_exitprocs+0x74>
   12200:	003fc506 	br	12118 <__call_exitprocs+0xb0>
   12204:	89000017 	ldw	r4,0(r17)
   12208:	882f883a 	mov	r23,r17
   1220c:	2023883a 	mov	r17,r4
   12210:	883fb21e 	bne	r17,zero,120dc <__call_exitprocs+0x74>
   12214:	003fc006 	br	12118 <__call_exitprocs+0xb0>

00012218 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   12218:	defffd04 	addi	sp,sp,-12
   1221c:	df000215 	stw	fp,8(sp)
   12220:	df000204 	addi	fp,sp,8
   12224:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   12228:	e0bfff17 	ldw	r2,-4(fp)
   1222c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12230:	e0bffe17 	ldw	r2,-8(fp)
   12234:	1005003a 	cmpeq	r2,r2,zero
   12238:	1000021e 	bne	r2,zero,12244 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1223c:	002af070 	cmpltui	zero,zero,43969
   12240:	00000106 	br	12248 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   12244:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   12248:	e037883a 	mov	sp,fp
   1224c:	df000017 	ldw	fp,0(sp)
   12250:	dec00104 	addi	sp,sp,4
   12254:	f800283a 	ret

00012258 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12258:	defffd04 	addi	sp,sp,-12
   1225c:	dfc00215 	stw	ra,8(sp)
   12260:	df000115 	stw	fp,4(sp)
   12264:	df000104 	addi	fp,sp,4
   12268:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1226c:	e13fff17 	ldw	r4,-4(fp)
   12270:	00122180 	call	12218 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12274:	003fff06 	br	12274 <_exit+0x1c>
   12278:	00012064 	muli	zero,zero,1153
