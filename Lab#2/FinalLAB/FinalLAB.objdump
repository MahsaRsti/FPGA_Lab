
FinalLAB.elf:     file format elf32-littlenios2
FinalLAB.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001277c memsz 0x0001277c flags r-x
    LOAD off    0x0001379c vaddr 0x0001279c paddr 0x000146ac align 2**12
         filesz 0x00001f10 memsz 0x00001f10 flags rw-
    LOAD off    0x000165bc vaddr 0x000165bc paddr 0x000165bc align 2**12
         filesz 0x00000000 memsz 0x007a1528 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011d54  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000890  00011f0c  00011f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f10  0001279c  000146ac  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          007a1802  000165bc  000165bc  000165bc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000156ac  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000eb8  00000000  00000000  000156d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002217  00000000  00000000  00016590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d5df  00000000  00000000  000187a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008f1b  00000000  00000000  00045d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018ab4  00000000  00000000  0004eca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024c8  00000000  00000000  00067758  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b79  00000000  00000000  00069c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d173  00000000  00000000  0006c799  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0007990c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00079960  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007ea4c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0007ea4f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007ea52  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007ea53  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007ea54  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007ea58  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007ea5c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007ea60  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007ea69  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007ea72  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007ea7b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000027  00000000  00000000  0007ea86  2**0
                  CONTENTS, READONLY
 29 .jdi          00004aa3  00000000  00000000  0007eaad  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00108489  00000000  00000000  00083550  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00011f0c l    d  .rodata	00000000 .rodata
0001279c l    d  .rwdata	00000000 .rwdata
000165bc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PS2_ISR.c
00000000 l    df *ABS*	00000000 audio_ISR.c
00000000 l    df *ABS*	00000000 globals.c
00000000 l    df *ABS*	00000000 interval_timer_ISR.c
00000000 l    df *ABS*	00000000 media_interrupt_HAL.c
000122ca l     O .rodata	00000010 C.57.2315
00000000 l    df *ABS*	00000000 pushbutton_ISR.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001e68 l     F .text	00000058 __sprint_r
0001234a l     O .rodata	00000010 blanks.3452
0001233a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003ecc l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000058c8 l     F .text	00000058 std
000059d4 l     F .text	00000008 __fp_lock
000059dc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001289c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00014678 l     O .rwdata	00000004 charset
00012380 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000124c8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009aa4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000abd0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b444 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b4a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b5a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b884 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b964 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000bac0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000bf84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000146a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000c220 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013258 l     O .rwdata	00001060 JTAG_UART
000142b8 l     O .rwdata	00000030 AV_Config
000142e8 l     O .rwdata	00000030 Audio
00014318 l     O .rwdata	0000002c Char_LCD_16x2
00014344 l     O .rwdata	0000003c Ethernet
00014380 l     O .rwdata	0000002c IrDA_UART
000143ac l     O .rwdata	0000002c Expansion_JP1
000143d8 l     O .rwdata	0000002c Expansion_JP2
00014404 l     O .rwdata	0000002c Green_LEDs
00014430 l     O .rwdata	0000002c HEX3_HEX0
0001445c l     O .rwdata	0000002c HEX7_HEX4
00014488 l     O .rwdata	0000002c Pushbuttons
000144b4 l     O .rwdata	0000002c Red_LEDs
000144e0 l     O .rwdata	0000002c Slider_Switches
0001450c l     O .rwdata	00000038 PS2_Port
00014544 l     O .rwdata	0000002c Serial_Port
00014570 l     O .rwdata	00000034 USB
000145a4 l     O .rwdata	00000048 VGA_Char_Buffer
000145ec l     O .rwdata	00000054 VGA_Pixel_Buffer
00014640 l     O .rwdata	0000002c SD_Card
0000c6b4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c8ec l     F .text	0000022c altera_avalon_jtag_uart_irq
0000cb18 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d194 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ethernet_low_level_driver.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010c54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010e40 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00010f7c l     F .text	000000dc alt_file_locked
000111e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011cf4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00011ea8 l     F .text	00000040 alt_sim_halt
0000754c g     F .text	00000094 _mprec_log10
00007638 g     F .text	00000088 __any_on
00008db8 g     F .text	00000070 _isatty_r
000124a0 g     O .rodata	00000028 __mprec_tinytens
0000bb20 g     F .text	0000006c alt_main
00010130 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0000070c g     F .text	00000060 interval_timer_ISR
0000e974 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
007b7854 g     O .bss	00000100 alt_irq
00008e28 g     F .text	00000078 _lseek_r
000146ac g       *ABS*	00000000 __flash_rwdata_start
0000db18 g     F .text	00000034 alt_up_character_lcd_send_cmd
0000a5c4 g     F .text	00000088 __eqdf2
000165bc g     O .bss	00000001 byte2
0000d508 g     F .text	00000070 alt_up_audio_read_fifo_avail
007b7ae4 g       *ABS*	00000000 __alt_heap_start
0000165c g     F .text	00000104 make_echo
0000d578 g     F .text	00000070 alt_up_audio_record_r
000165bd g     O .bss	00000001 byte3
00008810 g     F .text	00000068 __sseek
00005930 g     F .text	000000a4 __sinit
00011a74 g     F .text	00000130 __swbuf_r
0000f354 g     F .text	00000114 alt_up_char_buffer_string
0000e78c g     F .text	00000034 read_CE_bit
00001760 g     F .text	000000e0 run_command
00006608 g     F .text	00000084 _setlocale_r
00005a30 g     F .text	00000068 __sfmoreglue
0000bbac g     F .text	00000020 __malloc_unlock
0000eb20 g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
0000f05c g     F .text	00000090 alt_up_rs232_read_fd
0000f284 g     F .text	000000d0 alt_up_char_buffer_draw
0000d480 g     F .text	00000088 alt_up_audio_reset_audio_core
00007060 g     F .text	000000e0 memmove
000165be g     O .bss	00000001 byte1
00005a20 g     F .text	00000010 _cleanup
0000115c g     F .text	000002a0 setMouseBounds
000076c0 g     F .text	000000bc _Balloc
000019c0 g     F .text	000001e4 draw_mouse
0001279c g     O .rwdata	00000100 cursor_shape
0000f504 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
0000a6d4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000da9c g     F .text	0000007c get_DDRAM_addr
0000f4c4 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008d44 g     F .text	00000074 _fstat_r
000165f0 g     O .bss	00000004 errno
0000d444 g     F .text	0000003c alt_up_audio_write_interrupt_pending
000165fc g     O .bss	00000004 alt_argv
0001c66c g       *ABS*	00000000 _gp
000113e4 g     F .text	00000030 usleep
0000f6a4 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
000130d8 g     O .rwdata	00000180 alt_fd_list
00010d7c g     F .text	00000094 alt_find_dev
00001c5c g     F .text	000000a0 memcpy
0000dcb0 g     F .text	0000004c alt_up_character_lcd_write_fd
0000f468 g     F .text	0000005c alt_up_char_buffer_clear
00005a14 g     F .text	0000000c _cleanup_r
0000a86c g     F .text	000000f8 __floatsidf
00010f04 g     F .text	00000078 alt_io_redirect
0000a7e4 g     F .text	00000088 __ltdf2
00011f0c g       *ABS*	00000000 __DTOR_END__
0000e618 g     F .text	00000090 alt_up_irda_write_fd
0000efe8 g     F .text	00000074 alt_up_rs232_read_data
0000749c g     F .text	000000b0 __ratio
000165bf g     O .bss	00000001 valid_byte3
0000d9dc g     F .text	00000060 alt_up_audio_read_fifo_head
0000f754 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000e400 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
0000cd30 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000ad0c g     F .text	00000008 __udivsi3
0000b7c4 g     F .text	000000c0 isatty
0000e158 g     F .text	00000044 alt_up_ethernet_reg_write
000123b0 g     O .rodata	000000c8 __mprec_tens
0000fde0 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
000065e4 g     F .text	00000008 __locale_charset
0000e3a8 g     F .text	00000058 alt_up_irda_disable_read_interrupt
000165c0 g     O .bss	00000001 cnt
00011738 g     F .text	00000090 alt_icache_flush
000165e4 g     O .bss	00000004 __malloc_top_pad
00014674 g     O .rwdata	00000004 __mb_cur_max
000065ec g     F .text	0000000c _localeconv_r
00007db8 g     F .text	0000003c __i2b
00005fc8 g     F .text	0000049c __sfvwrite_r
00008798 g     F .text	00000070 _sbrk_r
003e6f34 g     O .bss	00000020 up_dev
000105c4 g     F .text	000000d0 helper_plot_pixel
00008ea0 g     F .text	00000078 _read_r
000165c1 g     O .bss	00000001 command
00012c9c g     O .rwdata	0000000c __lc_ctype
00014694 g     O .rwdata	00000004 alt_max_fd
0000ef50 g     F .text	00000050 alt_up_rs232_check_parity
0000da3c g     F .text	00000060 alt_up_audio_write_fifo_head
0000dfcc g     F .text	00000110 alt_up_ethernet_init
0000b148 g     F .text	00000138 __unpack_d
00008c20 g     F .text	00000110 _fclose_r
0000e7c0 g     F .text	00000034 read_num_bytes_available
00005894 g     F .text	00000034 fflush
000165e8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b604 g     F .text	000001c0 alt_irq_register
0000e728 g     F .text	00000034 read_RI_bit
00009f34 g     F .text	00000074 __adddf3
0000737c g     F .text	00000120 __b2d
0000f788 g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
000094f4 g     F .text	000005b0 __umoddi3
0000b9d0 g     F .text	000000f0 lseek
00014670 g     O .rwdata	00000004 _global_impure_ptr
00008134 g     F .text	000005f4 _realloc_r
007b7ae4 g       *ABS*	00000000 __bss_end
0000f8ec g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
000112d8 g     F .text	0000010c alt_tick
00008f18 g     F .text	000005dc __udivdi3
00012478 g     O .rodata	00000028 __mprec_bigtens
00008014 g     F .text	00000120 __s2b
0000aa3c g     F .text	00000194 __floatunsidf
0000729c g     F .text	00000060 __mcmp
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000d290 g     F .text	00000040 alt_up_audio_open_dev
0000e828 g     F .text	0000002c read_data_byte
000059fc g     F .text	00000018 __fp_lock_all
00001078 g     F .text	000000e4 mouse_color
0000d6cc g     F .text	00000070 alt_up_audio_play_r
00011240 g     F .text	00000098 alt_alarm_stop
0000e75c g     F .text	00000030 read_RE_bit
000165f4 g     O .bss	00000004 alt_irq_active
0000e43c g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
000130b0 g     O .rwdata	00000028 alt_dev_null
0000df98 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
000165c2 g     O .bss	00000001 flag_mouse
000165d2 g     O .bss	00000002 y_axis_mouse
0000e6e8 g     F .text	00000040 alt_up_parallel_port_open_dev
0000e9cc g     F .text	00000078 alt_up_ps2_write_data_byte
00010b84 g     F .text	0000001c alt_dcache_flush_all
00007168 g     F .text	00000070 __hi0bits
00010500 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0000a964 g     F .text	000000d8 __fixdfsi
000146ac g       *ABS*	00000000 __ram_rwdata_end
00001840 g     F .text	00000180 command_det
0001468c g     O .rwdata	00000008 alt_dev_list
0000c100 g     F .text	00000120 write
0001198c g     F .text	000000e8 _putc_r
00010694 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0001279c g       *ABS*	00000000 __ram_rodata_end
0000b4d0 g     F .text	000000d4 fstat
0000f0ec g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00007ef4 g     F .text	00000120 __pow5mult
000165d8 g     O .bss	00000004 __nlocale_changed
0000ad14 g     F .text	00000008 __umodsi3
007b7ae4 g       *ABS*	00000000 end
0000ed40 g     F .text	000000a8 alt_up_ps2_write_fd
0000e47c g     F .text	00000050 alt_up_irda_check_parity
0000f1c0 g     F .text	00000084 alt_up_char_buffer_init
00016634 g     O .bss	001e8480 r_buf
0000c834 g     F .text	000000b8 altera_avalon_jtag_uart_init
00011f08 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000d208 g     F .text	00000088 alt_avalon_timer_sc_init
0000adb4 g     F .text	00000080 __clzsi2
0000cf54 g     F .text	00000240 altera_avalon_jtag_uart_write
00005920 g     F .text	00000004 __sfp_lock_acquire
00006f7c g     F .text	000000e4 memchr
0000dbc0 g     F .text	00000078 alt_up_character_lcd_write
00001ec0 g     F .text	00001eac ___vfprintf_internal_r
00001e08 g     F .text	00000060 _sprintf_r
00005cb4 g     F .text	00000314 _free_r
0000bbcc g     F .text	00000258 alt_printf
00011cf8 g     F .text	000001b0 __call_exitprocs
000165dc g     O .bss	00000004 __mlocale_changed
00014680 g     O .rwdata	00000004 __malloc_sbrk_base
000001b8 g     F .text	0000003c _start
00016604 g     O .bss	00000004 _alt_tick_rate
0000d8b0 g     F .text	0000012c alt_up_audio_write_fifo
00007a84 g     F .text	0000014c __lshift
00016608 g     O .bss	00000004 _alt_nticks
0000be64 g     F .text	00000120 read
0000c2b4 g     F .text	00000400 alt_sys_init
0000de24 g     F .text	000000b0 alt_up_character_lcd_shift_display
0000d7ac g     F .text	00000104 alt_up_audio_read_fifo
00011bc0 g     F .text	00000134 __register_exitproc
000165d4 g     O .bss	00000002 x_axis_mouse
0000d3b8 g     F .text	00000050 alt_up_audio_disable_write_interrupt
0000ec4c g     F .text	00000058 alt_up_ps2_clear_fifo
0000ef10 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00007bd0 g     F .text	000001e8 __multiply
0000ded4 g     F .text	00000090 alt_up_character_lcd_erase_pos
0000cbc8 g     F .text	00000074 altera_avalon_jtag_uart_close
0001279c g       *ABS*	00000000 __ram_rwdata_start
000165c3 g     O .bss	00000001 valid_byte2
00011f0c g       *ABS*	00000000 __ram_rodata_start
0001660c g     O .bss	00000028 __malloc_current_mallinfo
0000777c g     F .text	0000017c __d2b
0000c6ec g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00011680 g     F .text	000000b8 alt_get_fd
00011434 g     F .text	0000012c alt_busy_sleep
0000b280 g     F .text	000000c8 __fpcmp_parts_d
00008bb0 g     F .text	00000070 _close_r
0000d36c g     F .text	0000004c alt_up_audio_enable_write_interrupt
00011814 g     F .text	00000074 memcmp
0000c79c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
007b7ae4 g       *ABS*	00000000 __alt_stack_base
0000c7e4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000e354 g     F .text	00000054 alt_up_irda_enable_read_interrupt
00003d90 g     F .text	0000013c __swsetup_r
0000a36c g     F .text	00000258 __divdf3
0000d31c g     F .text	00000050 alt_up_audio_disable_read_interrupt
00005a98 g     F .text	000000f0 __sfp
000075e0 g     F .text	00000058 __copybits
00012ca8 g     O .rwdata	00000408 __malloc_av_
0000592c g     F .text	00000004 __sinit_lock_release
00009fa8 g     F .text	000003c4 __muldf3
000088f4 g     F .text	00000060 __sread
0000ee7c g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00011560 g     F .text	00000120 alt_find_file
00010ba0 g     F .text	000000b4 alt_dev_llist_insert
0000bb8c g     F .text	00000020 __malloc_lock
0000c044 g     F .text	000000bc sbrk
00005698 g     F .text	000001fc _fflush_r
00008afc g     F .text	000000b4 _calloc_r
000165bc g       *ABS*	00000000 __bss_start
00001cfc g     F .text	00000098 memset
0000076c g     F .text	0000090c main
0000d658 g     F .text	00000074 alt_up_audio_write_fifo_space
00016600 g     O .bss	00000004 alt_envp
000165ec g     O .bss	00000004 __malloc_max_total_mem
0000f6fc g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
0000f244 g     F .text	00000040 alt_up_char_buffer_open_dev
0000c744 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00011ba4 g     F .text	0000001c __swbuf
0000dd74 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00008808 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00008d30 g     F .text	00000014 fclose
0000ebd0 g     F .text	0000007c alt_up_ps2_read_data_byte
000165c4 g     O .bss	00000004 timeout
007b7954 g     O .bss	00000190 _atexit0
000040e4 g     F .text	000015b4 _dtoa_r
0000683c g     F .text	00000740 _malloc_r
00014698 g     O .rwdata	00000004 alt_errno
0000652c g     F .text	000000b8 _fwalk
0000e4cc g     F .text	00000048 alt_up_irda_write_data
0000ede8 g     F .text	00000040 alt_up_ps2_open_dev
00011888 g     F .text	00000104 putc
0000ac4c g     F .text	00000060 __divsi3
000124d4 g     O .rodata	00000014 __thenan_df
0000db80 g     F .text	00000040 alt_up_character_lcd_open_dev
00005b88 g     F .text	0000012c _malloc_trim_r
0000e920 g     F .text	00000054 alt_up_ps2_enable_read_interrupt
00011f0c g       *ABS*	00000000 __CTOR_END__
0000db4c g     F .text	00000034 alt_up_character_lcd_init
00008954 g     F .text	000000bc strcmp
00011f0c g       *ABS*	00000000 __flash_rodata_start
00011f0c g       *ABS*	00000000 __DTOR_LIST__
0000f180 g     F .text	00000040 alt_up_rs232_open_dev
0000a64c g     F .text	00000088 __nedf2
0000c280 g     F .text	00000034 alt_irq_init
0000bfe4 g     F .text	00000060 alt_release_fd
0000e7f4 g     F .text	00000034 read_data_valid
00001d94 g     F .text	00000074 sprintf
0000df64 g     F .text	00000034 alt_up_character_lcd_cursor_off
000124e8 g     O .rodata	00000100 __clz_tab
000165e0 g     O .bss	00000004 _PathLocale
000117c8 g     F .text	00000014 atexit
0000eab4 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
00008a84 g     F .text	00000078 _write_r
0000668c g     F .text	0000001c setlocale
00001ba4 g     F .text	000000b8 pushbutton_ISR
000001f4 g     F .text	0000018c PS2_ISR
0001466c g     O .rwdata	00000004 _impure_ptr
000165c8 g     O .bss	00000004 buf_index_play
000165f8 g     O .bss	00000004 alt_argc
00010d18 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000072fc g     F .text	00000080 __ulp
00008728 g     F .text	00000040 __isinfd
000059e4 g     F .text	00000018 __fp_unlock_all
00014684 g     O .rwdata	00000008 alt_fs_list
0000ee28 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0000d5e8 g     F .text	00000070 alt_up_audio_record_l
0000efa0 g     F .text	00000048 alt_up_rs232_write_data
0000e19c g     F .text	000000e0 alt_up_ethernet_phy_reg_read
00000020 g       *ABS*	00000000 __ram_exceptions_start
000065f8 g     F .text	00000010 localeconv
000146ac g       *ABS*	00000000 _edata
007b7ae4 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
0000cc3c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00000380 g     F .text	0000038c audio_ISR
001feab4 g     O .bss	001e8480 l_buf
0000d73c g     F .text	00000070 alt_up_audio_play_l
00008878 g     F .text	0000007c __swrite
0001467c g     O .rwdata	00000004 __malloc_trim_threshold
00011414 g     F .text	00000020 altera_nios2_qsys_irq_init
000117dc g     F .text	00000038 exit
0000e514 g     F .text	00000074 alt_up_irda_read_data
00006464 g     F .text	000000c8 _fwalk_reent
0000e854 g     F .text	000000cc alt_up_ps2_init
000078f8 g     F .text	0000018c __mdiff
0000acac g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005924 g     F .text	00000004 __sfp_lock_release
0000dc38 g     F .text	00000078 alt_up_character_lcd_string
0000e6a8 g     F .text	00000040 alt_up_irda_open_dev
00011ee8 g     F .text	00000020 _exit
00008768 g     F .text	00000030 __isnand
00010a30 g     F .text	00000154 alt_alarm_start
0000ad1c g     F .text	00000098 __muldi3
000066a8 g     F .text	00000194 __smakebuf_r
0000ea44 g     F .text	00000070 alt_up_ps2_wait_for_ack
00008a10 g     F .text	00000074 strlen
0000e0dc g     F .text	00000040 alt_up_ethernet_open_dev
00011058 g     F .text	00000188 open
0000a75c g     F .text	00000088 __gedf2
0000be24 g     F .text	00000040 alt_putchar
000165cc g     O .bss	00000004 buf_index_record
003e6f54 g     O .bss	001e8480 r_buf_echo
00010e10 g     F .text	00000030 alt_icache_flush_all
0000e27c g     F .text	000000d8 alt_up_ethernet_phy_reg_write
0000dcfc g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0001469c g     O .rwdata	00000004 alt_priority_mask
00003d6c g     F .text	00000024 __vfprintf_internal
0000eca4 g     F .text	0000009c alt_up_ps2_read_fd
00009eb4 g     F .text	00000080 __subdf3
0000e588 g     F .text	00000090 alt_up_irda_read_fd
005cf3d4 g     O .bss	001e8480 l_buf_echo
000071d8 g     F .text	000000c4 __lo0bits
000146a4 g     O .rwdata	00000008 alt_alarm_list
00010cb4 g     F .text	00000064 _do_ctors
0000eed4 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
000013fc g     F .text	00000260 Mouse_ISR
0000b348 g     F .text	000000fc close
000165d0 g     O .bss	00000001 valid_byte1
0000b8e4 g     F .text	00000080 alt_load
0000e11c g     F .text	0000003c alt_up_ethernet_reg_read
0000d2d0 g     F .text	0000004c alt_up_audio_enable_read_interrupt
0000ae34 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00005928 g     F .text	00000004 __sinit_lock_acquire
00007df4 g     F .text	00000100 __multadd
00007140 g     F .text	00000028 _Bfree
0000d408 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c01ef4 	movhi	r3,123
 134:	18de1504 	addi	r3,r3,30804
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c01ef4 	movhi	r3,123
 14c:	18de1504 	addi	r3,r3,30804
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c4:	d6b19b14 	ori	gp,gp,50796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1cc:	10996f14 	ori	r2,r2,26044

    movhi r3, %hi(__bss_end)
     1d0:	00c01ef4 	movhi	r3,123
    ori r3, r3, %lo(__bss_end)
     1d4:	18deb914 	ori	r3,r3,31460

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	000b8e40 	call	b8e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	000bb200 	call	bb20 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <PS2_ISR>:
 * This routine checks which KEY has been pressed. If it is KEY1 or KEY2, it writes this 
 * value to the global variable key_pressed. If it is KEY3 then it loads the SW switch 
 * values and stores in the variable pattern
****************************************************************************************/
void PS2_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	dfc00415 	stw	ra,16(sp)
     1fc:	df000315 	stw	fp,12(sp)
     200:	df000304 	addi	fp,sp,12
     204:	e13ffe15 	stw	r4,-8(fp)
     208:	e17fff15 	stw	r5,-4(fp)
	unsigned char PS2_data;

	/* check for PS/2 data--display on HEX displays */
	if (alt_up_ps2_read_data_byte (up_dev->PS2_dev, &PS2_data) == 0)
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	11000317 	ldw	r4,12(r2)
     214:	e17ffd04 	addi	r5,fp,-12
     218:	000ebd00 	call	ebd0 <alt_up_ps2_read_data_byte>
     21c:	1004c03a 	cmpne	r2,r2,zero
     220:	1000521e 	bne	r2,zero,36c <PS2_ISR+0x178>
	{
		if(cnt >= 1) cnt++;
     224:	00800074 	movhi	r2,1
     228:	10997004 	addi	r2,r2,26048
     22c:	10800003 	ldbu	r2,0(r2)
     230:	10803fcc 	andi	r2,r2,255
     234:	1005003a 	cmpeq	r2,r2,zero
     238:	1000081e 	bne	r2,zero,25c <PS2_ISR+0x68>
     23c:	00800074 	movhi	r2,1
     240:	10997004 	addi	r2,r2,26048
     244:	10800003 	ldbu	r2,0(r2)
     248:	10800044 	addi	r2,r2,1
     24c:	1007883a 	mov	r3,r2
     250:	00800074 	movhi	r2,1
     254:	10997004 	addi	r2,r2,26048
     258:	10c00005 	stb	r3,0(r2)
		
		/* allows save the last three bytes of data */
		byte1 = byte2;
     25c:	00800074 	movhi	r2,1
     260:	10996f04 	addi	r2,r2,26044
     264:	10c00003 	ldbu	r3,0(r2)
     268:	00800074 	movhi	r2,1
     26c:	10996f84 	addi	r2,r2,26046
     270:	10c00005 	stb	r3,0(r2)
		byte2 = byte3;
     274:	00800074 	movhi	r2,1
     278:	10996f44 	addi	r2,r2,26045
     27c:	10c00003 	ldbu	r3,0(r2)
     280:	00800074 	movhi	r2,1
     284:	10996f04 	addi	r2,r2,26044
     288:	10c00005 	stb	r3,0(r2)
		byte3 = PS2_data;
     28c:	e0fffd03 	ldbu	r3,-12(fp)
     290:	00800074 	movhi	r2,1
     294:	10996f44 	addi	r2,r2,26045
     298:	10c00005 	stb	r3,0(r2)
		if(cnt == 4){
     29c:	00800074 	movhi	r2,1
     2a0:	10997004 	addi	r2,r2,26048
     2a4:	10800003 	ldbu	r2,0(r2)
     2a8:	10803fcc 	andi	r2,r2,255
     2ac:	10800118 	cmpnei	r2,r2,4
     2b0:	10001a1e 	bne	r2,zero,31c <PS2_ISR+0x128>
			cnt = 1;
     2b4:	00c00074 	movhi	r3,1
     2b8:	18d97004 	addi	r3,r3,26048
     2bc:	00800044 	movi	r2,1
     2c0:	18800005 	stb	r2,0(r3)
			valid_byte1 = byte1;
     2c4:	00800074 	movhi	r2,1
     2c8:	10996f84 	addi	r2,r2,26046
     2cc:	10c00003 	ldbu	r3,0(r2)
     2d0:	00800074 	movhi	r2,1
     2d4:	10997404 	addi	r2,r2,26064
     2d8:	10c00005 	stb	r3,0(r2)
			valid_byte2 = byte2;
     2dc:	00800074 	movhi	r2,1
     2e0:	10996f04 	addi	r2,r2,26044
     2e4:	10c00003 	ldbu	r3,0(r2)
     2e8:	00800074 	movhi	r2,1
     2ec:	109970c4 	addi	r2,r2,26051
     2f0:	10c00005 	stb	r3,0(r2)
			valid_byte3 = byte3;
     2f4:	00800074 	movhi	r2,1
     2f8:	10996f44 	addi	r2,r2,26045
     2fc:	10c00003 	ldbu	r3,0(r2)
     300:	00800074 	movhi	r2,1
     304:	10996fc4 	addi	r2,r2,26047
     308:	10c00005 	stb	r3,0(r2)
			flag_mouse = 1;
     30c:	00c00074 	movhi	r3,1
     310:	18d97084 	addi	r3,r3,26050
     314:	00800044 	movi	r2,1
     318:	18800005 	stb	r2,0(r3)
		}
		if ( (byte2 == (unsigned char) 0xAA) && (byte3 == (unsigned char) 0x00) ){
     31c:	00800074 	movhi	r2,1
     320:	10996f04 	addi	r2,r2,26044
     324:	10800003 	ldbu	r2,0(r2)
     328:	10803fcc 	andi	r2,r2,255
     32c:	10802a98 	cmpnei	r2,r2,170
     330:	10000e1e 	bne	r2,zero,36c <PS2_ISR+0x178>
     334:	00800074 	movhi	r2,1
     338:	10996f44 	addi	r2,r2,26045
     33c:	10800003 	ldbu	r2,0(r2)
     340:	10803fcc 	andi	r2,r2,255
     344:	1004c03a 	cmpne	r2,r2,zero
     348:	1000081e 	bne	r2,zero,36c <PS2_ISR+0x178>
			// mouse inserted; initialize sending of data
			(void) alt_up_ps2_write_data_byte_with_ack (up_dev->PS2_dev, (unsigned char) 0xF4);
     34c:	e0bffe17 	ldw	r2,-8(fp)
     350:	11000317 	ldw	r4,12(r2)
     354:	01403d04 	movi	r5,244
     358:	000eab40 	call	eab4 <alt_up_ps2_write_data_byte_with_ack>
			cnt = 1; // enable cnt
     35c:	00c00074 	movhi	r3,1
     360:	18d97004 	addi	r3,r3,26048
     364:	00800044 	movi	r2,1
     368:	18800005 	stb	r2,0(r3)
			
		}
	}
	return;
}
     36c:	e037883a 	mov	sp,fp
     370:	dfc00117 	ldw	ra,4(sp)
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00204 	addi	sp,sp,8
     37c:	f800283a 	ret

00000380 <audio_ISR>:
 *                                                                          
 * This interrupt service routine records or plays back audio, depending on which type
 * interrupt (read or write) is pending in the audio device.
****************************************************************************************/
void audio_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     380:	defff904 	addi	sp,sp,-28
     384:	dfc00615 	stw	ra,24(sp)
     388:	df000515 	stw	fp,20(sp)
     38c:	df000504 	addi	fp,sp,20
     390:	e13ffe15 	stw	r4,-8(fp)
     394:	e17fff15 	stw	r5,-4(fp)
	int num_read; int num_written;

	unsigned int fifospace;
		
	if (alt_up_audio_read_interrupt_pending(up_dev->audio_dev))	// check for read interrupt
     398:	e0bffe17 	ldw	r2,-8(fp)
     39c:	11000517 	ldw	r4,20(r2)
     3a0:	000d4080 	call	d408 <alt_up_audio_read_interrupt_pending>
     3a4:	1005003a 	cmpeq	r2,r2,zero
     3a8:	1000411e 	bne	r2,zero,4b0 <audio_ISR+0x130>
	{
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x1); // set LEDG[0] on
     3ac:	e0bffe17 	ldw	r2,-8(fp)
     3b0:	10800117 	ldw	r2,4(r2)
     3b4:	10800a17 	ldw	r2,40(r2)
     3b8:	1007883a 	mov	r3,r2
     3bc:	00800044 	movi	r2,1
     3c0:	18800035 	stwio	r2,0(r3)

		// store data until the buffer is full
		if (buf_index_record < BUF_SIZE)
     3c4:	00800074 	movhi	r2,1
     3c8:	10997304 	addi	r2,r2,26060
     3cc:	10c00017 	ldw	r3,0(r2)
     3d0:	00800234 	movhi	r2,8
     3d4:	10a847c4 	addi	r2,r2,-24289
     3d8:	10c03516 	blt	r2,r3,4b0 <audio_ISR+0x130>
		{
			num_read = alt_up_audio_record_r (up_dev->audio_dev, &(r_buf[buf_index_record]), 
     3dc:	e0bffe17 	ldw	r2,-8(fp)
     3e0:	11000517 	ldw	r4,20(r2)
     3e4:	00800074 	movhi	r2,1
     3e8:	10997304 	addi	r2,r2,26060
     3ec:	10800017 	ldw	r2,0(r2)
     3f0:	1085883a 	add	r2,r2,r2
     3f4:	1085883a 	add	r2,r2,r2
     3f8:	1007883a 	mov	r3,r2
     3fc:	00800074 	movhi	r2,1
     400:	10998d04 	addi	r2,r2,26164
     404:	188b883a 	add	r5,r3,r2
     408:	00800074 	movhi	r2,1
     40c:	10997304 	addi	r2,r2,26060
     410:	10c00017 	ldw	r3,0(r2)
     414:	00800234 	movhi	r2,8
     418:	10a84804 	addi	r2,r2,-24288
     41c:	10cdc83a 	sub	r6,r2,r3
     420:	000d5780 	call	d578 <alt_up_audio_record_r>
     424:	e0bffd15 	stw	r2,-12(fp)
				BUF_SIZE - buf_index_record);
			/* assume we can read same # words from the left and right */
			(void) alt_up_audio_record_l (up_dev->audio_dev, &(l_buf[buf_index_record]), 
     428:	e0bffe17 	ldw	r2,-8(fp)
     42c:	11000517 	ldw	r4,20(r2)
     430:	00800074 	movhi	r2,1
     434:	10997304 	addi	r2,r2,26060
     438:	10800017 	ldw	r2,0(r2)
     43c:	1085883a 	add	r2,r2,r2
     440:	1085883a 	add	r2,r2,r2
     444:	1007883a 	mov	r3,r2
     448:	00800834 	movhi	r2,32
     44c:	10baad04 	addi	r2,r2,-5452
     450:	188b883a 	add	r5,r3,r2
     454:	e1bffd17 	ldw	r6,-12(fp)
     458:	000d5e80 	call	d5e8 <alt_up_audio_record_l>
				num_read);
			buf_index_record += num_read;
     45c:	00800074 	movhi	r2,1
     460:	10997304 	addi	r2,r2,26060
     464:	10c00017 	ldw	r3,0(r2)
     468:	e0bffd17 	ldw	r2,-12(fp)
     46c:	1887883a 	add	r3,r3,r2
     470:	00800074 	movhi	r2,1
     474:	10997304 	addi	r2,r2,26060
     478:	10c00015 	stw	r3,0(r2)

			if (buf_index_record == BUF_SIZE)
     47c:	00800074 	movhi	r2,1
     480:	10997304 	addi	r2,r2,26060
     484:	10c00017 	ldw	r3,0(r2)
     488:	00800234 	movhi	r2,8
     48c:	10a84804 	addi	r2,r2,-24288
     490:	1880071e 	bne	r3,r2,4b0 <audio_ISR+0x130>
			{
				// done recording
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     494:	e0bffe17 	ldw	r2,-8(fp)
     498:	10800117 	ldw	r2,4(r2)
     49c:	10800a17 	ldw	r2,40(r2)
     4a0:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_read_interrupt(up_dev->audio_dev);
     4a4:	e0bffe17 	ldw	r2,-8(fp)
     4a8:	11000517 	ldw	r4,20(r2)
     4ac:	000d31c0 	call	d31c <alt_up_audio_disable_read_interrupt>
			}
		}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     4b0:	e0bffe17 	ldw	r2,-8(fp)
     4b4:	11000517 	ldw	r4,20(r2)
     4b8:	000d4440 	call	d444 <alt_up_audio_write_interrupt_pending>
     4bc:	1005003a 	cmpeq	r2,r2,zero
     4c0:	1000411e 	bne	r2,zero,5c8 <audio_ISR+0x248>
	{
		// if(command == 1){
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[1] on
     4c4:	e0bffe17 	ldw	r2,-8(fp)
     4c8:	10800117 	ldw	r2,4(r2)
     4cc:	10800a17 	ldw	r2,40(r2)
     4d0:	1007883a 	mov	r3,r2
     4d4:	00800084 	movi	r2,2
     4d8:	18800035 	stwio	r2,0(r3)

		// output data until the buffer is empty 
		if (buf_index_play < BUF_SIZE)
     4dc:	00800074 	movhi	r2,1
     4e0:	10997204 	addi	r2,r2,26056
     4e4:	10c00017 	ldw	r3,0(r2)
     4e8:	00800234 	movhi	r2,8
     4ec:	10a847c4 	addi	r2,r2,-24289
     4f0:	10c03516 	blt	r2,r3,5c8 <audio_ISR+0x248>
		{
			num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf[buf_index_play]), 
     4f4:	e0bffe17 	ldw	r2,-8(fp)
     4f8:	11000517 	ldw	r4,20(r2)
     4fc:	00800074 	movhi	r2,1
     500:	10997204 	addi	r2,r2,26056
     504:	10800017 	ldw	r2,0(r2)
     508:	1085883a 	add	r2,r2,r2
     50c:	1085883a 	add	r2,r2,r2
     510:	1007883a 	mov	r3,r2
     514:	00800074 	movhi	r2,1
     518:	10998d04 	addi	r2,r2,26164
     51c:	188b883a 	add	r5,r3,r2
     520:	00800074 	movhi	r2,1
     524:	10997204 	addi	r2,r2,26056
     528:	10c00017 	ldw	r3,0(r2)
     52c:	00800234 	movhi	r2,8
     530:	10a84804 	addi	r2,r2,-24288
     534:	10cdc83a 	sub	r6,r2,r3
     538:	000d6cc0 	call	d6cc <alt_up_audio_play_r>
     53c:	e0bffc15 	stw	r2,-16(fp)
			 	BUF_SIZE - buf_index_play);
			/* assume that we can write the same # words to the left and right */
			(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf[buf_index_play]), 
     540:	e0bffe17 	ldw	r2,-8(fp)
     544:	11000517 	ldw	r4,20(r2)
     548:	00800074 	movhi	r2,1
     54c:	10997204 	addi	r2,r2,26056
     550:	10800017 	ldw	r2,0(r2)
     554:	1085883a 	add	r2,r2,r2
     558:	1085883a 	add	r2,r2,r2
     55c:	1007883a 	mov	r3,r2
     560:	00800834 	movhi	r2,32
     564:	10baad04 	addi	r2,r2,-5452
     568:	188b883a 	add	r5,r3,r2
     56c:	e1bffc17 	ldw	r6,-16(fp)
     570:	000d73c0 	call	d73c <alt_up_audio_play_l>
				num_written);
			buf_index_play += num_written;
     574:	00800074 	movhi	r2,1
     578:	10997204 	addi	r2,r2,26056
     57c:	10c00017 	ldw	r3,0(r2)
     580:	e0bffc17 	ldw	r2,-16(fp)
     584:	1887883a 	add	r3,r3,r2
     588:	00800074 	movhi	r2,1
     58c:	10997204 	addi	r2,r2,26056
     590:	10c00015 	stw	r3,0(r2)
	
			if (buf_index_play == BUF_SIZE)
     594:	00800074 	movhi	r2,1
     598:	10997204 	addi	r2,r2,26056
     59c:	10c00017 	ldw	r3,0(r2)
     5a0:	00800234 	movhi	r2,8
     5a4:	10a84804 	addi	r2,r2,-24288
     5a8:	1880071e 	bne	r3,r2,5c8 <audio_ISR+0x248>
			{
				// done playback
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     5ac:	e0bffe17 	ldw	r2,-8(fp)
     5b0:	10800117 	ldw	r2,4(r2)
     5b4:	10800a17 	ldw	r2,40(r2)
     5b8:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     5bc:	e0bffe17 	ldw	r2,-8(fp)
     5c0:	11000517 	ldw	r4,20(r2)
     5c4:	000d3b80 	call	d3b8 <alt_up_audio_disable_write_interrupt>
			}
		}//}
	}
	if (alt_up_audio_write_interrupt_pending(up_dev->audio_dev))	// check for write interrupt
     5c8:	e0bffe17 	ldw	r2,-8(fp)
     5cc:	11000517 	ldw	r4,20(r2)
     5d0:	000d4440 	call	d444 <alt_up_audio_write_interrupt_pending>
     5d4:	1005003a 	cmpeq	r2,r2,zero
     5d8:	1000471e 	bne	r2,zero,6f8 <audio_ISR+0x378>
	{
		if(command == 2){
     5dc:	00800074 	movhi	r2,1
     5e0:	10997044 	addi	r2,r2,26049
     5e4:	10800003 	ldbu	r2,0(r2)
     5e8:	10803fcc 	andi	r2,r2,255
     5ec:	10800098 	cmpnei	r2,r2,2
     5f0:	1000411e 	bne	r2,zero,6f8 <audio_ISR+0x378>
		alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0x2); // set LEDG[1] on
     5f4:	e0bffe17 	ldw	r2,-8(fp)
     5f8:	10800117 	ldw	r2,4(r2)
     5fc:	10800a17 	ldw	r2,40(r2)
     600:	1007883a 	mov	r3,r2
     604:	00800084 	movi	r2,2
     608:	18800035 	stwio	r2,0(r3)

		// output data until the buffer is empty 
		if (buf_index_play < BUF_SIZE)
     60c:	00800074 	movhi	r2,1
     610:	10997204 	addi	r2,r2,26056
     614:	10c00017 	ldw	r3,0(r2)
     618:	00800234 	movhi	r2,8
     61c:	10a847c4 	addi	r2,r2,-24289
     620:	10c03516 	blt	r2,r3,6f8 <audio_ISR+0x378>
		{
			num_written = alt_up_audio_play_r (up_dev->audio_dev, &(r_buf_echo[buf_index_play]), 
     624:	e0bffe17 	ldw	r2,-8(fp)
     628:	11000517 	ldw	r4,20(r2)
     62c:	00800074 	movhi	r2,1
     630:	10997204 	addi	r2,r2,26056
     634:	10800017 	ldw	r2,0(r2)
     638:	1085883a 	add	r2,r2,r2
     63c:	1085883a 	add	r2,r2,r2
     640:	1007883a 	mov	r3,r2
     644:	00800fb4 	movhi	r2,62
     648:	109bd504 	addi	r2,r2,28500
     64c:	188b883a 	add	r5,r3,r2
     650:	00800074 	movhi	r2,1
     654:	10997204 	addi	r2,r2,26056
     658:	10c00017 	ldw	r3,0(r2)
     65c:	00800234 	movhi	r2,8
     660:	10a84804 	addi	r2,r2,-24288
     664:	10cdc83a 	sub	r6,r2,r3
     668:	000d6cc0 	call	d6cc <alt_up_audio_play_r>
     66c:	e0bffc15 	stw	r2,-16(fp)
			 	BUF_SIZE - buf_index_play);
			/* assume that we can write the same # words to the left and right */
			(void) alt_up_audio_play_l (up_dev->audio_dev, &(l_buf_echo[buf_index_play]), 
     670:	e0bffe17 	ldw	r2,-8(fp)
     674:	11000517 	ldw	r4,20(r2)
     678:	00800074 	movhi	r2,1
     67c:	10997204 	addi	r2,r2,26056
     680:	10800017 	ldw	r2,0(r2)
     684:	1085883a 	add	r2,r2,r2
     688:	1085883a 	add	r2,r2,r2
     68c:	1007883a 	mov	r3,r2
     690:	00801774 	movhi	r2,93
     694:	10bcf504 	addi	r2,r2,-3116
     698:	188b883a 	add	r5,r3,r2
     69c:	e1bffc17 	ldw	r6,-16(fp)
     6a0:	000d73c0 	call	d73c <alt_up_audio_play_l>
				num_written);
			buf_index_play += num_written;
     6a4:	00800074 	movhi	r2,1
     6a8:	10997204 	addi	r2,r2,26056
     6ac:	10c00017 	ldw	r3,0(r2)
     6b0:	e0bffc17 	ldw	r2,-16(fp)
     6b4:	1887883a 	add	r3,r3,r2
     6b8:	00800074 	movhi	r2,1
     6bc:	10997204 	addi	r2,r2,26056
     6c0:	10c00015 	stw	r3,0(r2)
	
			if (buf_index_play == BUF_SIZE)
     6c4:	00800074 	movhi	r2,1
     6c8:	10997204 	addi	r2,r2,26056
     6cc:	10c00017 	ldw	r3,0(r2)
     6d0:	00800234 	movhi	r2,8
     6d4:	10a84804 	addi	r2,r2,-24288
     6d8:	1880071e 	bne	r3,r2,6f8 <audio_ISR+0x378>
			{
				// done playback
				alt_up_parallel_port_write_data (up_dev->green_LEDs_dev, 0); // turn off LEDG
     6dc:	e0bffe17 	ldw	r2,-8(fp)
     6e0:	10800117 	ldw	r2,4(r2)
     6e4:	10800a17 	ldw	r2,40(r2)
     6e8:	10000035 	stwio	zero,0(r2)
				alt_up_audio_disable_write_interrupt(up_dev->audio_dev);
     6ec:	e0bffe17 	ldw	r2,-8(fp)
     6f0:	11000517 	ldw	r4,20(r2)
     6f4:	000d3b80 	call	d3b8 <alt_up_audio_disable_write_interrupt>
			}
		}
	}
	}
	return;
}
     6f8:	e037883a 	mov	sp,fp
     6fc:	dfc00117 	ldw	ra,4(sp)
     700:	df000017 	ldw	fp,0(sp)
     704:	dec00204 	addi	sp,sp,8
     708:	f800283a 	ret

0000070c <interval_timer_ISR>:
 * Shifts a PATTERN being displayed on the LCD character display. The shift 
 * direction is determined by the external variable KEY_PRESSED.
 * 
******************************************************************************/
void interval_timer_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
     70c:	defffb04 	addi	sp,sp,-20
     710:	dfc00415 	stw	ra,16(sp)
     714:	df000315 	stw	fp,12(sp)
     718:	df000304 	addi	fp,sp,12
     71c:	e13ffe15 	stw	r4,-8(fp)
     720:	e17fff15 	stw	r5,-4(fp)
	volatile int *interval_timer_ptr = (int *) 0x10002000;
     724:	00840034 	movhi	r2,4096
     728:	10880004 	addi	r2,r2,8192
     72c:	e0bffd15 	stw	r2,-12(fp)

	*(interval_timer_ptr) = 0; 										// clear the interrupt
     730:	e0bffd17 	ldw	r2,-12(fp)
     734:	10000015 	stw	zero,0(r2)
	timeout = 1;															// set global variable
     738:	00c00074 	movhi	r3,1
     73c:	18d97104 	addi	r3,r3,26052
     740:	00800044 	movi	r2,1
     744:	18800015 	stw	r2,0(r3)

	/* shift the LCD display to the left */
	alt_up_character_lcd_shift_display (up_dev->lcd_dev, -1);
     748:	e0bffe17 	ldw	r2,-8(fp)
     74c:	11000417 	ldw	r4,16(r2)
     750:	017fffc4 	movi	r5,-1
     754:	000de240 	call	de24 <alt_up_character_lcd_shift_display>

	return;
}
     758:	e037883a 	mov	sp,fp
     75c:	dfc00117 	ldw	ra,4(sp)
     760:	df000017 	ldw	fp,0(sp)
     764:	dec00204 	addi	sp,sp,8
     768:	f800283a 	ret

0000076c <main>:
 * 	   interrupts
 * 	6. The speed of scrolling the LCD display and of refreshing the VGA screen
 * 	   are controlled by interrupts from the interval timer
********************************************************************************/
int main(void)
{
     76c:	deffa804 	addi	sp,sp,-352
     770:	dfc05715 	stw	ra,348(sp)
     774:	df005615 	stw	fp,344(sp)
     778:	df005604 	addi	fp,sp,344
	signed short pre_x_axis_mouse, pre_y_axis_mouse;
	x_axis_mouse = 160;
     77c:	00802804 	movi	r2,160
     780:	d0a7da0d 	sth	r2,-24728(gp)
	y_axis_mouse = 120;
     784:	00801e04 	movi	r2,120
     788:	d0a7d98d 	sth	r2,-24730(gp)
	alt_up_character_lcd_dev *lcd_dev;
	alt_up_audio_dev *audio_dev;
	alt_up_char_buffer_dev *char_buffer_dev;
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	/* declare volatile pointer for interval timer, which does not have HAL functions */
	volatile int * interval_timer_ptr = (int *) 0x10002000;	// interal timer base address
     78c:	00840034 	movhi	r2,4096
     790:	10880004 	addi	r2,r2,8192
     794:	e0bfc815 	stw	r2,-224(fp)

	/* initialize some variables */
	valid_byte1 = 0; valid_byte2 = 0; valid_byte3 = 0; 			// used to hold PS/2 data
     798:	00800074 	movhi	r2,1
     79c:	10997404 	addi	r2,r2,26064
     7a0:	10000005 	stb	zero,0(r2)
     7a4:	00800074 	movhi	r2,1
     7a8:	109970c4 	addi	r2,r2,26051
     7ac:	10000005 	stb	zero,0(r2)
     7b0:	00800074 	movhi	r2,1
     7b4:	10996fc4 	addi	r2,r2,26047
     7b8:	10000005 	stb	zero,0(r2)
	timeout = 0;										// synchronize with the timer
     7bc:	00800074 	movhi	r2,1
     7c0:	10997104 	addi	r2,r2,26052
     7c4:	10000015 	stw	zero,0(r2)
	int record_box_x1, record_box_x2, record_box_y1, record_box_y2;
	int play_box_x1, play_box_x2, play_box_y1, play_box_y2;
	int echo_box_x1, echo_box_x2, echo_box_y1, echo_box_y2;

	/* set the interval timer period for scrolling the HEX displays */
	int counter = 0x960000;				// 1/(50 MHz) x (0x960000) ~= 200 msec
     7c8:	008025b4 	movhi	r2,150
     7cc:	e0bfad15 	stw	r2,-332(fp)
	*(interval_timer_ptr + 0x2) = (counter & 0xFFFF);
     7d0:	e0bfc817 	ldw	r2,-224(fp)
     7d4:	10c00204 	addi	r3,r2,8
     7d8:	e0bfad17 	ldw	r2,-332(fp)
     7dc:	10bfffcc 	andi	r2,r2,65535
     7e0:	18800015 	stw	r2,0(r3)
	*(interval_timer_ptr + 0x3) = (counter >> 16) & 0xFFFF;
     7e4:	e0bfc817 	ldw	r2,-224(fp)
     7e8:	10c00304 	addi	r3,r2,12
     7ec:	e0bfad17 	ldw	r2,-332(fp)
     7f0:	1005d43a 	srai	r2,r2,16
     7f4:	10bfffcc 	andi	r2,r2,65535
     7f8:	18800015 	stw	r2,0(r3)

	/* start interval timer, enable its interrupts */
	*(interval_timer_ptr + 1) = 0x7;	// STOP = 0, START = 1, CONT = 1, ITO = 1 
     7fc:	e0bfc817 	ldw	r2,-224(fp)
     800:	10c00104 	addi	r3,r2,4
     804:	008001c4 	movi	r2,7
     808:	18800015 	stw	r2,0(r3)
	
	// open the pushbuttom KEY parallel port
	KEY_dev = alt_up_parallel_port_open_dev ("/dev/Pushbuttons");
     80c:	01000074 	movhi	r4,1
     810:	2107c304 	addi	r4,r4,7948
     814:	000e6e80 	call	e6e8 <alt_up_parallel_port_open_dev>
     818:	e0bfd015 	stw	r2,-192(fp)
	if ( KEY_dev == NULL)
     81c:	e0bfd017 	ldw	r2,-192(fp)
     820:	1004c03a 	cmpne	r2,r2,zero
     824:	1000061e 	bne	r2,zero,840 <main+0xd4>
	{
		alt_printf ("Error: could not open pushbutton KEY device\n");
     828:	01000074 	movhi	r4,1
     82c:	2107c804 	addi	r4,r4,7968
     830:	000bbcc0 	call	bbcc <alt_printf>
		return -1;
     834:	00bfffc4 	movi	r2,-1
     838:	e0bfff15 	stw	r2,-4(fp)
     83c:	00020806 	br	1060 <main+0x8f4>
	}
	else
	{
		alt_printf ("Opened pushbutton KEY device\n");
     840:	01000074 	movhi	r4,1
     844:	2107d404 	addi	r4,r4,8016
     848:	000bbcc0 	call	bbcc <alt_printf>
		up_dev.KEY_dev = KEY_dev;	// store for use by ISRs
     84c:	00c00fb4 	movhi	r3,62
     850:	18dbcd04 	addi	r3,r3,28468
     854:	e0bfd017 	ldw	r2,-192(fp)
     858:	18800015 	stw	r2,0(r3)
	}
	/* write to the pushbutton interrupt mask register, and set 3 mask bits to 1 
	 * (bit 0 is Nios II reset) */
	alt_up_parallel_port_set_interrupt_mask (KEY_dev, 0xE);
     85c:	e0bfd017 	ldw	r2,-192(fp)
     860:	10800a17 	ldw	r2,40(r2)
     864:	10800204 	addi	r2,r2,8
     868:	1007883a 	mov	r3,r2
     86c:	00800384 	movi	r2,14
     870:	18800035 	stwio	r2,0(r3)

	// open the green LEDs parallel port
	green_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Green_LEDs");
     874:	01000074 	movhi	r4,1
     878:	2107dc04 	addi	r4,r4,8048
     87c:	000e6e80 	call	e6e8 <alt_up_parallel_port_open_dev>
     880:	e0bfcf15 	stw	r2,-196(fp)
	if ( green_LEDs_dev == NULL)
     884:	e0bfcf17 	ldw	r2,-196(fp)
     888:	1004c03a 	cmpne	r2,r2,zero
     88c:	1000061e 	bne	r2,zero,8a8 <main+0x13c>
	{
		alt_printf ("Error: could not open green LEDs device\n");
     890:	01000074 	movhi	r4,1
     894:	2107e004 	addi	r4,r4,8064
     898:	000bbcc0 	call	bbcc <alt_printf>
		return -1;
     89c:	00bfffc4 	movi	r2,-1
     8a0:	e0bfff15 	stw	r2,-4(fp)
     8a4:	0001ee06 	br	1060 <main+0x8f4>
	}
	else
	{
		alt_printf ("Opened green LEDs device\n");
     8a8:	01000074 	movhi	r4,1
     8ac:	2107eb04 	addi	r4,r4,8108
     8b0:	000bbcc0 	call	bbcc <alt_printf>
		up_dev.green_LEDs_dev = green_LEDs_dev;	// store for use by ISRs
     8b4:	00c00fb4 	movhi	r3,62
     8b8:	18dbcd04 	addi	r3,r3,28468
     8bc:	e0bfcf17 	ldw	r2,-196(fp)
     8c0:	18800115 	stw	r2,4(r3)
	}

	// open the red LEDs parallel port
	red_LEDs_dev = alt_up_parallel_port_open_dev ("/dev/Red_LEDs");
     8c4:	01000074 	movhi	r4,1
     8c8:	2107f204 	addi	r4,r4,8136
     8cc:	000e6e80 	call	e6e8 <alt_up_parallel_port_open_dev>
     8d0:	e0bfce15 	stw	r2,-200(fp)
	if ( red_LEDs_dev == NULL)
     8d4:	e0bfce17 	ldw	r2,-200(fp)
     8d8:	1004c03a 	cmpne	r2,r2,zero
     8dc:	1000061e 	bne	r2,zero,8f8 <main+0x18c>
	{
		alt_printf ("Error: could not open red LEDs device\n");
     8e0:	01000074 	movhi	r4,1
     8e4:	2107f604 	addi	r4,r4,8152
     8e8:	000bbcc0 	call	bbcc <alt_printf>
		return -1;
     8ec:	00bfffc4 	movi	r2,-1
     8f0:	e0bfff15 	stw	r2,-4(fp)
     8f4:	0001da06 	br	1060 <main+0x8f4>
	}
	else
	{
		alt_printf ("Opened red LEDs device\n");
     8f8:	01000074 	movhi	r4,1
     8fc:	21080004 	addi	r4,r4,8192
     900:	000bbcc0 	call	bbcc <alt_printf>
		up_dev.red_LEDs_dev = red_LEDs_dev;	// store for use by ISRs
     904:	00c00fb4 	movhi	r3,62
     908:	18dbcd04 	addi	r3,r3,28468
     90c:	e0bfce17 	ldw	r2,-200(fp)
     910:	18800215 	stw	r2,8(r3)
	}


	// open the PS2 port
	PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
     914:	01000074 	movhi	r4,1
     918:	21080604 	addi	r4,r4,8216
     91c:	000ede80 	call	ede8 <alt_up_ps2_open_dev>
     920:	e0bfcd15 	stw	r2,-204(fp)
	if ( PS2_dev == NULL)
     924:	e0bfcd17 	ldw	r2,-204(fp)
     928:	1004c03a 	cmpne	r2,r2,zero
     92c:	1000061e 	bne	r2,zero,948 <main+0x1dc>
	{
		alt_printf ("Error: could not open PS2 device\n");
     930:	01000074 	movhi	r4,1
     934:	21080a04 	addi	r4,r4,8232
     938:	000bbcc0 	call	bbcc <alt_printf>
		return -1;
     93c:	00bfffc4 	movi	r2,-1
     940:	e0bfff15 	stw	r2,-4(fp)
     944:	0001c606 	br	1060 <main+0x8f4>
	}
	else
	{
		alt_printf ("Opened PS2 device\n");
     948:	01000074 	movhi	r4,1
     94c:	21081304 	addi	r4,r4,8268
     950:	000bbcc0 	call	bbcc <alt_printf>
		up_dev.PS2_dev = PS2_dev;	// store for use by ISRs
     954:	00c00fb4 	movhi	r3,62
     958:	18dbcd04 	addi	r3,r3,28468
     95c:	e0bfcd17 	ldw	r2,-204(fp)
     960:	18800315 	stw	r2,12(r3)
	}
	(void) alt_up_ps2_write_data_byte (PS2_dev, 0xFF);		// reset
     964:	e13fcd17 	ldw	r4,-204(fp)
     968:	01403fc4 	movi	r5,255
     96c:	000e9cc0 	call	e9cc <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt (PS2_dev); // enable interrupts from PS/2 port
     970:	e13fcd17 	ldw	r4,-204(fp)
     974:	000e9200 	call	e920 <alt_up_ps2_enable_read_interrupt>

	// open the audio port
	audio_dev = alt_up_audio_open_dev ("/dev/Audio");
     978:	01000074 	movhi	r4,1
     97c:	21081804 	addi	r4,r4,8288
     980:	000d2900 	call	d290 <alt_up_audio_open_dev>
     984:	e0bfcb15 	stw	r2,-212(fp)
	if ( audio_dev == NULL)
     988:	e0bfcb17 	ldw	r2,-212(fp)
     98c:	1004c03a 	cmpne	r2,r2,zero
     990:	1000061e 	bne	r2,zero,9ac <main+0x240>
	{
		alt_printf ("Error: could not open audio device\n");
     994:	01000074 	movhi	r4,1
     998:	21081b04 	addi	r4,r4,8300
     99c:	000bbcc0 	call	bbcc <alt_printf>
		return -1;
     9a0:	00bfffc4 	movi	r2,-1
     9a4:	e0bfff15 	stw	r2,-4(fp)
     9a8:	0001ad06 	br	1060 <main+0x8f4>
	}
	else
	{
		alt_printf ("Opened audio device\n");
     9ac:	01000074 	movhi	r4,1
     9b0:	21082404 	addi	r4,r4,8336
     9b4:	000bbcc0 	call	bbcc <alt_printf>
		up_dev.audio_dev = audio_dev;	// store for use by ISRs
     9b8:	00c00fb4 	movhi	r3,62
     9bc:	18dbcd04 	addi	r3,r3,28468
     9c0:	e0bfcb17 	ldw	r2,-212(fp)
     9c4:	18800515 	stw	r2,20(r3)
	}

	// open the 16x2 character display port
	lcd_dev = alt_up_character_lcd_open_dev ("/dev/Char_LCD_16x2");
     9c8:	01000074 	movhi	r4,1
     9cc:	21082a04 	addi	r4,r4,8360
     9d0:	000db800 	call	db80 <alt_up_character_lcd_open_dev>
     9d4:	e0bfcc15 	stw	r2,-208(fp)
	if ( lcd_dev == NULL)
     9d8:	e0bfcc17 	ldw	r2,-208(fp)
     9dc:	1004c03a 	cmpne	r2,r2,zero
     9e0:	1000061e 	bne	r2,zero,9fc <main+0x290>
	{
		alt_printf ("Error: could not open character LCD device\n");
     9e4:	01000074 	movhi	r4,1
     9e8:	21082f04 	addi	r4,r4,8380
     9ec:	000bbcc0 	call	bbcc <alt_printf>
		return -1;
     9f0:	00bfffc4 	movi	r2,-1
     9f4:	e0bfff15 	stw	r2,-4(fp)
     9f8:	00019906 	br	1060 <main+0x8f4>
	}
	else
	{
		alt_printf ("Opened character LCD device\n");
     9fc:	01000074 	movhi	r4,1
     a00:	21083a04 	addi	r4,r4,8424
     a04:	000bbcc0 	call	bbcc <alt_printf>
		up_dev.lcd_dev = lcd_dev;	// store for use by ISRs
     a08:	00c00fb4 	movhi	r3,62
     a0c:	18dbcd04 	addi	r3,r3,28468
     a10:	e0bfcc17 	ldw	r2,-208(fp)
     a14:	18800415 	stw	r2,16(r3)
	/* use the HAL facility for registering interrupt service routines. */
	/* Note: we are passsing a pointer to up_dev to each ISR (using the context argument) as 
	 * a way of giving the ISR a pointer to every open device. This is useful because some of the
	 * ISRs need to access more than just one device (e.g. the pushbutton ISR accesses both
	 * the pushbutton device and the audio device) */
	alt_irq_register (0, (void *) &up_dev, (void *) interval_timer_ISR);
     a18:	01800034 	movhi	r6,0
     a1c:	3181c304 	addi	r6,r6,1804
     a20:	0009883a 	mov	r4,zero
     a24:	01400fb4 	movhi	r5,62
     a28:	295bcd04 	addi	r5,r5,28468
     a2c:	000b6040 	call	b604 <alt_irq_register>
	alt_irq_register (1, (void *) &up_dev, (void *) pushbutton_ISR);
     a30:	01800034 	movhi	r6,0
     a34:	3186e904 	addi	r6,r6,7076
     a38:	01000044 	movi	r4,1
     a3c:	01400fb4 	movhi	r5,62
     a40:	295bcd04 	addi	r5,r5,28468
     a44:	000b6040 	call	b604 <alt_irq_register>
	alt_irq_register (6, (void *) &up_dev, (void *) audio_ISR);
     a48:	01800034 	movhi	r6,0
     a4c:	3180e004 	addi	r6,r6,896
     a50:	01000184 	movi	r4,6
     a54:	01400fb4 	movhi	r5,62
     a58:	295bcd04 	addi	r5,r5,28468
     a5c:	000b6040 	call	b604 <alt_irq_register>
	alt_irq_register (7, (void *) &up_dev, (void *) PS2_ISR);
     a60:	01800034 	movhi	r6,0
     a64:	31807d04 	addi	r6,r6,500
     a68:	010001c4 	movi	r4,7
     a6c:	01400fb4 	movhi	r5,62
     a70:	295bcd04 	addi	r5,r5,28468
     a74:	000b6040 	call	b604 <alt_irq_register>

	/* create a messages to be displayed on the VGA and LCD displays */
	char text_top_LCD[80] = "Welcome to the DE2 Media Computer...\0";
     a78:	00c00074 	movhi	r3,1
     a7c:	18c87404 	addi	r3,r3,8656
     a80:	18800017 	ldw	r2,0(r3)
     a84:	e0bfd415 	stw	r2,-176(fp)
     a88:	18800117 	ldw	r2,4(r3)
     a8c:	e0bfd515 	stw	r2,-172(fp)
     a90:	18800217 	ldw	r2,8(r3)
     a94:	e0bfd615 	stw	r2,-168(fp)
     a98:	18800317 	ldw	r2,12(r3)
     a9c:	e0bfd715 	stw	r2,-164(fp)
     aa0:	18800417 	ldw	r2,16(r3)
     aa4:	e0bfd815 	stw	r2,-160(fp)
     aa8:	18800517 	ldw	r2,20(r3)
     aac:	e0bfd915 	stw	r2,-156(fp)
     ab0:	18800617 	ldw	r2,24(r3)
     ab4:	e0bfda15 	stw	r2,-152(fp)
     ab8:	18800717 	ldw	r2,28(r3)
     abc:	e0bfdb15 	stw	r2,-148(fp)
     ac0:	18800817 	ldw	r2,32(r3)
     ac4:	e0bfdc15 	stw	r2,-144(fp)
     ac8:	1880090b 	ldhu	r2,36(r3)
     acc:	e0bfdd0d 	sth	r2,-140(fp)
     ad0:	e13fdd84 	addi	r4,fp,-138
     ad4:	01800a84 	movi	r6,42
     ad8:	000b883a 	mov	r5,zero
     adc:	0001cfc0 	call	1cfc <memset>
	char text_top_VGA[20] = "Altera DE2\0";
     ae0:	00c00074 	movhi	r3,1
     ae4:	18c88804 	addi	r3,r3,8736
     ae8:	18800017 	ldw	r2,0(r3)
     aec:	e0bfe815 	stw	r2,-96(fp)
     af0:	18800117 	ldw	r2,4(r3)
     af4:	e0bfe915 	stw	r2,-92(fp)
     af8:	18800217 	ldw	r2,8(r3)
     afc:	e0bfea15 	stw	r2,-88(fp)
     b00:	e03feb15 	stw	zero,-84(fp)
     b04:	e03fec15 	stw	zero,-80(fp)
	char text_bottom_VGA[20] = "Media Computer\0";
     b08:	00c00074 	movhi	r3,1
     b0c:	18c88d04 	addi	r3,r3,8756
     b10:	18800017 	ldw	r2,0(r3)
     b14:	e0bfed15 	stw	r2,-76(fp)
     b18:	18800117 	ldw	r2,4(r3)
     b1c:	e0bfee15 	stw	r2,-72(fp)
     b20:	18800217 	ldw	r2,8(r3)
     b24:	e0bfef15 	stw	r2,-68(fp)
     b28:	18800317 	ldw	r2,12(r3)
     b2c:	e0bff015 	stw	r2,-64(fp)
     b30:	e03ff115 	stw	zero,-60(fp)
	char text_ALTERA[10] = "SAEED\0";
     b34:	00c00074 	movhi	r3,1
     b38:	18c89204 	addi	r3,r3,8776
     b3c:	18800017 	ldw	r2,0(r3)
     b40:	e0bff215 	stw	r2,-56(fp)
     b44:	1880010b 	ldhu	r2,4(r3)
     b48:	e0bff30d 	sth	r2,-52(fp)
     b4c:	18800183 	ldbu	r2,6(r3)
     b50:	e0bff385 	stb	r2,-50(fp)
     b54:	e03ff3c5 	stb	zero,-49(fp)
     b58:	e03ff405 	stb	zero,-48(fp)
     b5c:	e03ff445 	stb	zero,-47(fp)
	char text_erase[10] = "      \0";
     b60:	00c00074 	movhi	r3,1
     b64:	18c89504 	addi	r3,r3,8788
     b68:	1880000b 	ldhu	r2,0(r3)
     b6c:	e0bff48d 	sth	r2,-46(fp)
     b70:	1880008b 	ldhu	r2,2(r3)
     b74:	e0bff50d 	sth	r2,-44(fp)
     b78:	1880010b 	ldhu	r2,4(r3)
     b7c:	e0bff58d 	sth	r2,-42(fp)
     b80:	1880018b 	ldhu	r2,6(r3)
     b84:	e0bff60d 	sth	r2,-40(fp)
     b88:	e03ff68d 	sth	zero,-38(fp)
	char text_echo[10] = "Echo\0";
     b8c:	00c00074 	movhi	r3,1
     b90:	18c89804 	addi	r3,r3,8800
     b94:	18800017 	ldw	r2,0(r3)
     b98:	e0bff715 	stw	r2,-36(fp)
     b9c:	1880010b 	ldhu	r2,4(r3)
     ba0:	e0bff80d 	sth	r2,-32(fp)
     ba4:	e03ff88d 	sth	zero,-30(fp)
     ba8:	e03ff90d 	sth	zero,-28(fp)
	char text_play[10] = "Play\0";
     bac:	00c00074 	movhi	r3,1
     bb0:	18c89b04 	addi	r3,r3,8812
     bb4:	1880000b 	ldhu	r2,0(r3)
     bb8:	e0bff98d 	sth	r2,-26(fp)
     bbc:	1880008b 	ldhu	r2,2(r3)
     bc0:	e0bffa0d 	sth	r2,-24(fp)
     bc4:	1880010b 	ldhu	r2,4(r3)
     bc8:	e0bffa8d 	sth	r2,-22(fp)
     bcc:	e03ffb0d 	sth	zero,-20(fp)
     bd0:	e03ffb8d 	sth	zero,-18(fp)
	char text_record[10] = "Record\0";
     bd4:	00c00074 	movhi	r3,1
     bd8:	18c89e04 	addi	r3,r3,8824
     bdc:	18800017 	ldw	r2,0(r3)
     be0:	e0bffc15 	stw	r2,-16(fp)
     be4:	18800117 	ldw	r2,4(r3)
     be8:	e0bffd15 	stw	r2,-12(fp)
     bec:	e03ffe0d 	sth	zero,-8(fp)


	/* output text message to the LCD */
	alt_up_character_lcd_set_cursor_pos (lcd_dev, 0, 0);	// set LCD cursor location to top row
     bf0:	e13fcc17 	ldw	r4,-208(fp)
     bf4:	000b883a 	mov	r5,zero
     bf8:	000d883a 	mov	r6,zero
     bfc:	000dcfc0 	call	dcfc <alt_up_character_lcd_set_cursor_pos>
	alt_up_character_lcd_string (lcd_dev, text_top_LCD);
     c00:	e17fd404 	addi	r5,fp,-176
     c04:	e13fcc17 	ldw	r4,-208(fp)
     c08:	000dc380 	call	dc38 <alt_up_character_lcd_string>
	alt_up_character_lcd_cursor_off (lcd_dev);				// turn off the LCD cursor 
     c0c:	e13fcc17 	ldw	r4,-208(fp)
     c10:	000df640 	call	df64 <alt_up_character_lcd_cursor_off>

	/* open the pixel buffer */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     c14:	01000074 	movhi	r4,1
     c18:	21084204 	addi	r4,r4,8456
     c1c:	000f4c40 	call	f4c4 <alt_up_pixel_buffer_dma_open_dev>
     c20:	e0bfc915 	stw	r2,-220(fp)
	if ( pixel_buffer_dev == NULL)
     c24:	e0bfc917 	ldw	r2,-220(fp)
     c28:	1004c03a 	cmpne	r2,r2,zero
     c2c:	1000041e 	bne	r2,zero,c40 <main+0x4d4>
		alt_printf ("Error: could not open pixel buffer device\n");
     c30:	01000074 	movhi	r4,1
     c34:	21084804 	addi	r4,r4,8480
     c38:	000bbcc0 	call	bbcc <alt_printf>
     c3c:	00000306 	br	c4c <main+0x4e0>
	else
		alt_printf ("Opened pixel buffer device\n");
     c40:	01000074 	movhi	r4,1
     c44:	21085304 	addi	r4,r4,8524
     c48:	000bbcc0 	call	bbcc <alt_printf>

	/* the following variables give the size of the pixel buffer */
	screen_x = 319; screen_y = 239;
     c4c:	00804fc4 	movi	r2,319
     c50:	e0bfbe15 	stw	r2,-264(fp)
     c54:	00803bc4 	movi	r2,239
     c58:	e0bfbd15 	stw	r2,-268(fp)
	color = 0x5550;		// a dark grey color
     c5c:	00955404 	movi	r2,21840
     c60:	e0bfba0d 	sth	r2,-280(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, 0, 0, screen_x, 
     c64:	e0ffba0f 	ldh	r3,-280(fp)
     c68:	e0bfbd17 	ldw	r2,-268(fp)
     c6c:	d8800015 	stw	r2,0(sp)
     c70:	d8c00115 	stw	r3,4(sp)
     c74:	d8000215 	stw	zero,8(sp)
     c78:	e13fc917 	ldw	r4,-220(fp)
     c7c:	000b883a 	mov	r5,zero
     c80:	000d883a 	mov	r6,zero
     c84:	e1ffbe17 	ldw	r7,-264(fp)
     c88:	000f8ec0 	call	f8ec <alt_up_pixel_buffer_dma_draw_box>
	// color = 0x187F;		// a medium blue color
	// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, blue_x1 * 4, blue_y1 * 4, blue_x2 * 4, 
	// 	blue_y2 * 4, color, 0);

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     c8c:	01000074 	movhi	r4,1
     c90:	21085a04 	addi	r4,r4,8552
     c94:	000f2440 	call	f244 <alt_up_char_buffer_open_dev>
     c98:	e0bfca15 	stw	r2,-216(fp)
	if ( char_buffer_dev == NULL)
     c9c:	e0bfca17 	ldw	r2,-216(fp)
     ca0:	1004c03a 	cmpne	r2,r2,zero
     ca4:	1000041e 	bne	r2,zero,cb8 <main+0x54c>
		alt_printf ("Error: could not open character buffer device\n");
     ca8:	01000074 	movhi	r4,1
     cac:	21086004 	addi	r4,r4,8576
     cb0:	000bbcc0 	call	bbcc <alt_printf>
     cb4:	00000306 	br	cc4 <main+0x558>
	else
		alt_printf ("Opened character buffer device\n");
     cb8:	01000074 	movhi	r4,1
     cbc:	21086c04 	addi	r4,r4,8624
     cc0:	000bbcc0 	call	bbcc <alt_printf>




	// Place your code here
	record_box_x1 = 35; record_box_x2 = 100; record_box_y1 = 92; record_box_y2 = 136;
     cc4:	008008c4 	movi	r2,35
     cc8:	e0bfb915 	stw	r2,-284(fp)
     ccc:	00801904 	movi	r2,100
     cd0:	e0bfb815 	stw	r2,-288(fp)
     cd4:	00801704 	movi	r2,92
     cd8:	e0bfb715 	stw	r2,-292(fp)
     cdc:	00802204 	movi	r2,136
     ce0:	e0bfb615 	stw	r2,-296(fp)
	// character coords * 4 since characters are 4 x 4 pixel buffer coords (8 x 8 VGA coords)
	color = 0x6F00;		// a bad yellow color
     ce4:	009bc004 	movi	r2,28416
     ce8:	e0bfba0d 	sth	r2,-280(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, record_box_x1, record_box_y1,
     cec:	e0ffba0f 	ldh	r3,-280(fp)
     cf0:	e0bfb617 	ldw	r2,-296(fp)
     cf4:	d8800015 	stw	r2,0(sp)
     cf8:	d8c00115 	stw	r3,4(sp)
     cfc:	d8000215 	stw	zero,8(sp)
     d00:	e13fc917 	ldw	r4,-220(fp)
     d04:	e17fb917 	ldw	r5,-284(fp)
     d08:	e1bfb717 	ldw	r6,-292(fp)
     d0c:	e1ffb817 	ldw	r7,-288(fp)
     d10:	000f8ec0 	call	f8ec <alt_up_pixel_buffer_dma_draw_box>
									  record_box_x2, record_box_y2, color, 0);
	play_box_x1 = 125; play_box_x2 = 190; play_box_y1 = 92; play_box_y2 = 136;
     d14:	00801f44 	movi	r2,125
     d18:	e0bfb515 	stw	r2,-300(fp)
     d1c:	00802f84 	movi	r2,190
     d20:	e0bfb415 	stw	r2,-304(fp)
     d24:	00801704 	movi	r2,92
     d28:	e0bfb315 	stw	r2,-308(fp)
     d2c:	00802204 	movi	r2,136
     d30:	e0bfb215 	stw	r2,-312(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, play_box_x1, play_box_y1,
     d34:	e0ffba0f 	ldh	r3,-280(fp)
     d38:	e0bfb217 	ldw	r2,-312(fp)
     d3c:	d8800015 	stw	r2,0(sp)
     d40:	d8c00115 	stw	r3,4(sp)
     d44:	d8000215 	stw	zero,8(sp)
     d48:	e13fc917 	ldw	r4,-220(fp)
     d4c:	e17fb517 	ldw	r5,-300(fp)
     d50:	e1bfb317 	ldw	r6,-308(fp)
     d54:	e1ffb417 	ldw	r7,-304(fp)
     d58:	000f8ec0 	call	f8ec <alt_up_pixel_buffer_dma_draw_box>
									  play_box_x2, play_box_y2, color, 0);
	echo_box_x1 = 215; echo_box_x2 = 280; echo_box_y1 = 92; echo_box_y2 = 136;
     d5c:	008035c4 	movi	r2,215
     d60:	e0bfb115 	stw	r2,-316(fp)
     d64:	00804604 	movi	r2,280
     d68:	e0bfb015 	stw	r2,-320(fp)
     d6c:	00801704 	movi	r2,92
     d70:	e0bfaf15 	stw	r2,-324(fp)
     d74:	00802204 	movi	r2,136
     d78:	e0bfae15 	stw	r2,-328(fp)
	alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, echo_box_x1, echo_box_y1,
     d7c:	e0ffba0f 	ldh	r3,-280(fp)
     d80:	e0bfae17 	ldw	r2,-328(fp)
     d84:	d8800015 	stw	r2,0(sp)
     d88:	d8c00115 	stw	r3,4(sp)
     d8c:	d8000215 	stw	zero,8(sp)
     d90:	e13fc917 	ldw	r4,-220(fp)
     d94:	e17fb117 	ldw	r5,-316(fp)
     d98:	e1bfaf17 	ldw	r6,-324(fp)
     d9c:	e1ffb017 	ldw	r7,-320(fp)
     da0:	000f8ec0 	call	f8ec <alt_up_pixel_buffer_dma_draw_box>
									  echo_box_x2, echo_box_y2, color, 0);
	

	alt_up_char_buffer_string (char_buffer_dev, text_record, 14, 28);
     da4:	e17ffc04 	addi	r5,fp,-16
     da8:	e13fca17 	ldw	r4,-216(fp)
     dac:	01800384 	movi	r6,14
     db0:	01c00704 	movi	r7,28
     db4:	000f3540 	call	f354 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_play, 37, 28);
     db8:	e17ff984 	addi	r5,fp,-26
     dbc:	e13fca17 	ldw	r4,-216(fp)
     dc0:	01800944 	movi	r6,37
     dc4:	01c00704 	movi	r7,28
     dc8:	000f3540 	call	f354 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_echo, 60, 28);
     dcc:	e17ff704 	addi	r5,fp,-36
     dd0:	e13fca17 	ldw	r4,-216(fp)
     dd4:	01800f04 	movi	r6,60
     dd8:	01c00704 	movi	r7,28
     ddc:	000f3540 	call	f354 <alt_up_char_buffer_string>
     de0:	00000006 	br	de4 <main+0x678>



	
		
		while (!timeout)
     de4:	00800074 	movhi	r2,1
     de8:	10997104 	addi	r2,r2,26052
     dec:	10800017 	ldw	r2,0(r2)
     df0:	1005003a 	cmpeq	r2,r2,zero
     df4:	103ffb1e 	bne	r2,zero,de4 <main+0x678>
		/* also, display any PS/2 data (from its interrupt service routine) on HEX displays */
		// HEX_PS2 (byte1, byte2, byte3);


		
		if(flag_mouse){
     df8:	00800074 	movhi	r2,1
     dfc:	10997084 	addi	r2,r2,26050
     e00:	10800003 	ldbu	r2,0(r2)
     e04:	10803fcc 	andi	r2,r2,255
     e08:	1005003a 	cmpeq	r2,r2,zero
     e0c:	1000061e 	bne	r2,zero,e28 <main+0x6bc>
			Mouse_ISR(&up_dev);
     e10:	01000fb4 	movhi	r4,62
     e14:	211bcd04 	addi	r4,r4,28468
     e18:	00013fc0 	call	13fc <Mouse_ISR>
			flag_mouse = 0;
     e1c:	00800074 	movhi	r2,1
     e20:	10997084 	addi	r2,r2,26050
     e24:	10000005 	stb	zero,0(r2)
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, pre_x_axis_mouse - 2, pre_y_axis_mouse - 2,
		// 								pre_x_axis_mouse + 2, pre_y_axis_mouse + 2, color, 0);
		// short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
     e28:	d0a7da0b 	ldhu	r2,-24728(gp)
     e2c:	e0ffd38f 	ldh	r3,-178(fp)
     e30:	10bfffcc 	andi	r2,r2,65535
     e34:	10a0001c 	xori	r2,r2,32768
     e38:	10a00004 	addi	r2,r2,-32768
     e3c:	1880061e 	bne	r3,r2,e58 <main+0x6ec>
     e40:	d0a7d98b 	ldhu	r2,-24730(gp)
     e44:	e0ffd30f 	ldh	r3,-180(fp)
     e48:	10bfffcc 	andi	r2,r2,65535
     e4c:	10a0001c 	xori	r2,r2,32768
     e50:	10a00004 	addi	r2,r2,-32768
     e54:	18803226 	beq	r3,r2,f20 <main+0x7b4>
			for(j=0;j<8;j++){//clear previous mouse cursor
     e58:	e03fd115 	stw	zero,-188(fp)
     e5c:	00002d06 	br	f14 <main+0x7a8>
				for(i=0;i<16;i++){
     e60:	e03fd215 	stw	zero,-184(fp)
     e64:	00002506 	br	efc <main+0x790>
					if(cursor_shape[i][j]!= -1)
     e68:	e0bfd217 	ldw	r2,-184(fp)
     e6c:	e0ffd117 	ldw	r3,-188(fp)
     e70:	01000074 	movhi	r4,1
     e74:	2109e704 	addi	r4,r4,10140
     e78:	100490fa 	slli	r2,r2,3
     e7c:	10c5883a 	add	r2,r2,r3
     e80:	1085883a 	add	r2,r2,r2
     e84:	1105883a 	add	r2,r2,r4
     e88:	1080000b 	ldhu	r2,0(r2)
     e8c:	10bfffcc 	andi	r2,r2,65535
     e90:	10a0001c 	xori	r2,r2,32768
     e94:	10a00004 	addi	r2,r2,-32768
     e98:	10bfffe0 	cmpeqi	r2,r2,-1
     e9c:	1000141e 	bne	r2,zero,ef0 <main+0x784>
						alt_up_pixel_buffer_dma_draw(pixel_buffer_dev,mouse_color(pre_x_axis_mouse+j,pre_y_axis_mouse+i),pre_x_axis_mouse+j, pre_y_axis_mouse+i);
     ea0:	e0ffd38f 	ldh	r3,-178(fp)
     ea4:	e0bfd117 	ldw	r2,-188(fp)
     ea8:	1889883a 	add	r4,r3,r2
     eac:	e0ffd30f 	ldh	r3,-180(fp)
     eb0:	e0bfd217 	ldw	r2,-184(fp)
     eb4:	188b883a 	add	r5,r3,r2
     eb8:	00010780 	call	1078 <mouse_color>
     ebc:	117fffcc 	andi	r5,r2,65535
     ec0:	2960001c 	xori	r5,r5,32768
     ec4:	29600004 	addi	r5,r5,-32768
     ec8:	e0ffd38f 	ldh	r3,-178(fp)
     ecc:	e0bfd117 	ldw	r2,-188(fp)
     ed0:	1885883a 	add	r2,r3,r2
     ed4:	100d883a 	mov	r6,r2
     ed8:	e0ffd30f 	ldh	r3,-180(fp)
     edc:	e0bfd217 	ldw	r2,-184(fp)
     ee0:	1885883a 	add	r2,r3,r2
     ee4:	100f883a 	mov	r7,r2
     ee8:	e13fc917 	ldw	r4,-220(fp)
     eec:	000f5040 	call	f504 <alt_up_pixel_buffer_dma_draw>
		// short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
			for(j=0;j<8;j++){//clear previous mouse cursor
				for(i=0;i<16;i++){
     ef0:	e0bfd217 	ldw	r2,-184(fp)
     ef4:	10800044 	addi	r2,r2,1
     ef8:	e0bfd215 	stw	r2,-184(fp)
     efc:	e0bfd217 	ldw	r2,-184(fp)
     f00:	10800410 	cmplti	r2,r2,16
     f04:	103fd81e 	bne	r2,zero,e68 <main+0x6fc>
		// 								pre_x_axis_mouse + 2, pre_y_axis_mouse + 2, color, 0);
		// short color = 0xFFFF;		// a White color
		// alt_up_pixel_buffer_dma_draw_box (pixel_buffer_dev, x_axis_mouse - 2, y_axis_mouse - 2,
		// 								x_axis_mouse + 2, y_axis_mouse + 2, color, 0);
		if(pre_x_axis_mouse != x_axis_mouse || pre_y_axis_mouse != y_axis_mouse){
			for(j=0;j<8;j++){//clear previous mouse cursor
     f08:	e0bfd117 	ldw	r2,-188(fp)
     f0c:	10800044 	addi	r2,r2,1
     f10:	e0bfd115 	stw	r2,-188(fp)
     f14:	e0bfd117 	ldw	r2,-188(fp)
     f18:	10800210 	cmplti	r2,r2,8
     f1c:	103fd01e 	bne	r2,zero,e60 <main+0x6f4>
				}
			}
		}


		for(j=0;j<8;j++){//print mouse cursor
     f20:	e03fd115 	stw	zero,-188(fp)
     f24:	00003706 	br	1004 <main+0x898>
			for(i=0;i<16;i++){
     f28:	e03fd215 	stw	zero,-184(fp)
     f2c:	00002f06 	br	fec <main+0x880>
				if(cursor_shape[i][j]!= -1)
     f30:	e0bfd217 	ldw	r2,-184(fp)
     f34:	e0ffd117 	ldw	r3,-188(fp)
     f38:	01000074 	movhi	r4,1
     f3c:	2109e704 	addi	r4,r4,10140
     f40:	100490fa 	slli	r2,r2,3
     f44:	10c5883a 	add	r2,r2,r3
     f48:	1085883a 	add	r2,r2,r2
     f4c:	1105883a 	add	r2,r2,r4
     f50:	1080000b 	ldhu	r2,0(r2)
     f54:	10bfffcc 	andi	r2,r2,65535
     f58:	10a0001c 	xori	r2,r2,32768
     f5c:	10a00004 	addi	r2,r2,-32768
     f60:	10bfffe0 	cmpeqi	r2,r2,-1
     f64:	10001e1e 	bne	r2,zero,fe0 <main+0x874>
					alt_up_pixel_buffer_dma_draw(pixel_buffer_dev,cursor_shape[i][j]*(-1),x_axis_mouse+j, y_axis_mouse+i);
     f68:	e0bfd217 	ldw	r2,-184(fp)
     f6c:	e0ffd117 	ldw	r3,-188(fp)
     f70:	01000074 	movhi	r4,1
     f74:	2109e704 	addi	r4,r4,10140
     f78:	100490fa 	slli	r2,r2,3
     f7c:	10c5883a 	add	r2,r2,r3
     f80:	1085883a 	add	r2,r2,r2
     f84:	1105883a 	add	r2,r2,r4
     f88:	1080000b 	ldhu	r2,0(r2)
     f8c:	10bfffcc 	andi	r2,r2,65535
     f90:	10a0001c 	xori	r2,r2,32768
     f94:	10a00004 	addi	r2,r2,-32768
     f98:	0085c83a 	sub	r2,zero,r2
     f9c:	100b883a 	mov	r5,r2
     fa0:	d0a7da0b 	ldhu	r2,-24728(gp)
     fa4:	10ffffcc 	andi	r3,r2,65535
     fa8:	18e0001c 	xori	r3,r3,32768
     fac:	18e00004 	addi	r3,r3,-32768
     fb0:	e0bfd117 	ldw	r2,-188(fp)
     fb4:	1885883a 	add	r2,r3,r2
     fb8:	100d883a 	mov	r6,r2
     fbc:	d0a7d98b 	ldhu	r2,-24730(gp)
     fc0:	10ffffcc 	andi	r3,r2,65535
     fc4:	18e0001c 	xori	r3,r3,32768
     fc8:	18e00004 	addi	r3,r3,-32768
     fcc:	e0bfd217 	ldw	r2,-184(fp)
     fd0:	1885883a 	add	r2,r3,r2
     fd4:	100f883a 	mov	r7,r2
     fd8:	e13fc917 	ldw	r4,-220(fp)
     fdc:	000f5040 	call	f504 <alt_up_pixel_buffer_dma_draw>
			}
		}


		for(j=0;j<8;j++){//print mouse cursor
			for(i=0;i<16;i++){
     fe0:	e0bfd217 	ldw	r2,-184(fp)
     fe4:	10800044 	addi	r2,r2,1
     fe8:	e0bfd215 	stw	r2,-184(fp)
     fec:	e0bfd217 	ldw	r2,-184(fp)
     ff0:	10800410 	cmplti	r2,r2,16
     ff4:	103fce1e 	bne	r2,zero,f30 <main+0x7c4>
				}
			}
		}


		for(j=0;j<8;j++){//print mouse cursor
     ff8:	e0bfd117 	ldw	r2,-188(fp)
     ffc:	10800044 	addi	r2,r2,1
    1000:	e0bfd115 	stw	r2,-188(fp)
    1004:	e0bfd117 	ldw	r2,-188(fp)
    1008:	10800210 	cmplti	r2,r2,8
    100c:	103fc61e 	bne	r2,zero,f28 <main+0x7bc>

		// draw_mouse(&up_dev);



		pre_x_axis_mouse = x_axis_mouse;
    1010:	d0a7da0b 	ldhu	r2,-24728(gp)
    1014:	e0bfd38d 	sth	r2,-178(fp)
		pre_y_axis_mouse = y_axis_mouse;
    1018:	d0a7d98b 	ldhu	r2,-24730(gp)
    101c:	e0bfd30d 	sth	r2,-180(fp)

		command = command_det(valid_byte1); // 0:record, 1:play, 2:echo
    1020:	00800074 	movhi	r2,1
    1024:	10997404 	addi	r2,r2,26064
    1028:	10800003 	ldbu	r2,0(r2)
    102c:	11003fcc 	andi	r4,r2,255
    1030:	00018400 	call	1840 <command_det>
    1034:	1007883a 	mov	r3,r2
    1038:	00800074 	movhi	r2,1
    103c:	10997044 	addi	r2,r2,26049
    1040:	10c00005 	stb	r3,0(r2)
		run_command(&up_dev);
    1044:	01000fb4 	movhi	r4,62
    1048:	211bcd04 	addi	r4,r4,28468
    104c:	00017600 	call	1760 <run_command>
		

		timeout = 0;
    1050:	00800074 	movhi	r2,1
    1054:	10997104 	addi	r2,r2,26052
    1058:	10000015 	stw	zero,0(r2)
	}
    105c:	003f6106 	br	de4 <main+0x678>
    1060:	e0bfff17 	ldw	r2,-4(fp)

}
    1064:	e037883a 	mov	sp,fp
    1068:	dfc00117 	ldw	ra,4(sp)
    106c:	df000017 	ldw	fp,0(sp)
    1070:	dec00204 	addi	sp,sp,8
    1074:	f800283a 	ret

00001078 <mouse_color>:
short mouse_color(int i, int j){
    1078:	defffc04 	addi	sp,sp,-16
    107c:	df000315 	stw	fp,12(sp)
    1080:	df000304 	addi	fp,sp,12
    1084:	e13ffd15 	stw	r4,-12(fp)
    1088:	e17ffe15 	stw	r5,-8(fp)
	if(i >= 35 && i <= 100 &&
    108c:	e0bffd17 	ldw	r2,-12(fp)
    1090:	108008d0 	cmplti	r2,r2,35
    1094:	10000c1e 	bne	r2,zero,10c8 <mouse_color+0x50>
    1098:	e0bffd17 	ldw	r2,-12(fp)
    109c:	10801948 	cmpgei	r2,r2,101
    10a0:	1000091e 	bne	r2,zero,10c8 <mouse_color+0x50>
    10a4:	e0bffe17 	ldw	r2,-8(fp)
    10a8:	10801710 	cmplti	r2,r2,92
    10ac:	1000061e 	bne	r2,zero,10c8 <mouse_color+0x50>
    10b0:	e0bffe17 	ldw	r2,-8(fp)
    10b4:	10802248 	cmpgei	r2,r2,137
    10b8:	1000031e 	bne	r2,zero,10c8 <mouse_color+0x50>
		j >= 92 && j <= 136)
		return 0x6F00;
    10bc:	009bc004 	movi	r2,28416
    10c0:	e0bfff15 	stw	r2,-4(fp)
    10c4:	00002006 	br	1148 <mouse_color+0xd0>
	else if(i >= 125 && i <= 190 &&
    10c8:	e0bffd17 	ldw	r2,-12(fp)
    10cc:	10801f50 	cmplti	r2,r2,125
    10d0:	10000c1e 	bne	r2,zero,1104 <mouse_color+0x8c>
    10d4:	e0bffd17 	ldw	r2,-12(fp)
    10d8:	10802fc8 	cmpgei	r2,r2,191
    10dc:	1000091e 	bne	r2,zero,1104 <mouse_color+0x8c>
    10e0:	e0bffe17 	ldw	r2,-8(fp)
    10e4:	10801710 	cmplti	r2,r2,92
    10e8:	1000061e 	bne	r2,zero,1104 <mouse_color+0x8c>
    10ec:	e0bffe17 	ldw	r2,-8(fp)
    10f0:	10802248 	cmpgei	r2,r2,137
    10f4:	1000031e 	bne	r2,zero,1104 <mouse_color+0x8c>
			j >= 92 && j <= 136)
		return 0x6F00;
    10f8:	009bc004 	movi	r2,28416
    10fc:	e0bfff15 	stw	r2,-4(fp)
    1100:	00001106 	br	1148 <mouse_color+0xd0>
	else if(i >= 215 && i <= 280 &&
    1104:	e0bffd17 	ldw	r2,-12(fp)
    1108:	108035d0 	cmplti	r2,r2,215
    110c:	10000c1e 	bne	r2,zero,1140 <mouse_color+0xc8>
    1110:	e0bffd17 	ldw	r2,-12(fp)
    1114:	10804648 	cmpgei	r2,r2,281
    1118:	1000091e 	bne	r2,zero,1140 <mouse_color+0xc8>
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	10801710 	cmplti	r2,r2,92
    1124:	1000061e 	bne	r2,zero,1140 <mouse_color+0xc8>
    1128:	e0bffe17 	ldw	r2,-8(fp)
    112c:	10802248 	cmpgei	r2,r2,137
    1130:	1000031e 	bne	r2,zero,1140 <mouse_color+0xc8>
			j >= 92 && j <= 136)
		return 0x6F00;
    1134:	009bc004 	movi	r2,28416
    1138:	e0bfff15 	stw	r2,-4(fp)
    113c:	00000206 	br	1148 <mouse_color+0xd0>

	return 0x5550;
    1140:	00955404 	movi	r2,21840
    1144:	e0bfff15 	stw	r2,-4(fp)
    1148:	e0bfff17 	ldw	r2,-4(fp)
}
    114c:	e037883a 	mov	sp,fp
    1150:	df000017 	ldw	fp,0(sp)
    1154:	dec00104 	addi	sp,sp,4
    1158:	f800283a 	ret

0000115c <setMouseBounds>:
void setMouseBounds(unsigned char info, unsigned char x_move, unsigned char y_move) {
    115c:	deffe104 	addi	sp,sp,-124
    1160:	dfc01e15 	stw	ra,120(sp)
    1164:	df001d15 	stw	fp,116(sp)
    1168:	df001d04 	addi	fp,sp,116
    116c:	e13ffd05 	stb	r4,-12(fp)
    1170:	e17ffe05 	stb	r5,-8(fp)
    1174:	e1bfff05 	stb	r6,-4(fp)
	
	signed short x_move_s = x_move, y_move_s = y_move;
    1178:	e0bffe03 	ldbu	r2,-8(fp)
    117c:	e0bfe38d 	sth	r2,-114(fp)
    1180:	e0bfff03 	ldbu	r2,-4(fp)
    1184:	e0bfe30d 	sth	r2,-116(fp)
	if(x_move_s >> 7 & 0x01)x_move_s -= 256;
    1188:	e0bfe38f 	ldh	r2,-114(fp)
    118c:	1005d1fa 	srai	r2,r2,7
    1190:	10bfffcc 	andi	r2,r2,65535
    1194:	1080004c 	andi	r2,r2,1
    1198:	10803fcc 	andi	r2,r2,255
    119c:	1005003a 	cmpeq	r2,r2,zero
    11a0:	1000031e 	bne	r2,zero,11b0 <setMouseBounds+0x54>
    11a4:	e0bfe38b 	ldhu	r2,-114(fp)
    11a8:	10bfc004 	addi	r2,r2,-256
    11ac:	e0bfe38d 	sth	r2,-114(fp)
	if(y_move_s >> 7 & 0x01)y_move_s -= 256;
    11b0:	e0bfe30f 	ldh	r2,-116(fp)
    11b4:	1005d1fa 	srai	r2,r2,7
    11b8:	10bfffcc 	andi	r2,r2,65535
    11bc:	1080004c 	andi	r2,r2,1
    11c0:	10803fcc 	andi	r2,r2,255
    11c4:	1005003a 	cmpeq	r2,r2,zero
    11c8:	1000031e 	bne	r2,zero,11d8 <setMouseBounds+0x7c>
    11cc:	e0bfe30b 	ldhu	r2,-116(fp)
    11d0:	10bfc004 	addi	r2,r2,-256
    11d4:	e0bfe30d 	sth	r2,-116(fp)

	if((info >> 6) & 0x01){ // x overflow = 1
    11d8:	e0bffd03 	ldbu	r2,-12(fp)
    11dc:	1004d1ba 	srli	r2,r2,6
    11e0:	10803fcc 	andi	r2,r2,255
    11e4:	1080004c 	andi	r2,r2,1
    11e8:	10803fcc 	andi	r2,r2,255
    11ec:	1005003a 	cmpeq	r2,r2,zero
    11f0:	1000151e 	bne	r2,zero,1248 <setMouseBounds+0xec>
		if((info >> 4) & 0x01)
    11f4:	e0bffd03 	ldbu	r2,-12(fp)
    11f8:	1004d13a 	srli	r2,r2,4
    11fc:	10803fcc 	andi	r2,r2,255
    1200:	1080004c 	andi	r2,r2,1
    1204:	10803fcc 	andi	r2,r2,255
    1208:	1005003a 	cmpeq	r2,r2,zero
    120c:	1000071e 	bne	r2,zero,122c <setMouseBounds+0xd0>
			x_axis_mouse += (-255 + x_move_s);
    1210:	d0a7da0b 	ldhu	r2,-24728(gp)
    1214:	1007883a 	mov	r3,r2
    1218:	e0bfe38b 	ldhu	r2,-114(fp)
    121c:	1885883a 	add	r2,r3,r2
    1220:	10bfc044 	addi	r2,r2,-255
    1224:	d0a7da0d 	sth	r2,-24728(gp)
    1228:	00000c06 	br	125c <setMouseBounds+0x100>
		else
			x_axis_mouse += (+255 + x_move_s);
    122c:	d0a7da0b 	ldhu	r2,-24728(gp)
    1230:	1007883a 	mov	r3,r2
    1234:	e0bfe38b 	ldhu	r2,-114(fp)
    1238:	1885883a 	add	r2,r3,r2
    123c:	10803fc4 	addi	r2,r2,255
    1240:	d0a7da0d 	sth	r2,-24728(gp)
    1244:	00000506 	br	125c <setMouseBounds+0x100>
	}
	else // x overflow = 0
		x_axis_mouse += x_move_s;
    1248:	d0a7da0b 	ldhu	r2,-24728(gp)
    124c:	1007883a 	mov	r3,r2
    1250:	e0bfe38b 	ldhu	r2,-114(fp)
    1254:	1885883a 	add	r2,r3,r2
    1258:	d0a7da0d 	sth	r2,-24728(gp)

	if((info >> 7) & 0x01){ // y overflow = 1
    125c:	e0bffd03 	ldbu	r2,-12(fp)
    1260:	1004d1fa 	srli	r2,r2,7
    1264:	10803fcc 	andi	r2,r2,255
    1268:	1080004c 	andi	r2,r2,1
    126c:	10803fcc 	andi	r2,r2,255
    1270:	1005003a 	cmpeq	r2,r2,zero
    1274:	1000151e 	bne	r2,zero,12cc <setMouseBounds+0x170>
		if((info >> 5) & 0x01)
    1278:	e0bffd03 	ldbu	r2,-12(fp)
    127c:	1004d17a 	srli	r2,r2,5
    1280:	10803fcc 	andi	r2,r2,255
    1284:	1080004c 	andi	r2,r2,1
    1288:	10803fcc 	andi	r2,r2,255
    128c:	1005003a 	cmpeq	r2,r2,zero
    1290:	1000071e 	bne	r2,zero,12b0 <setMouseBounds+0x154>
			y_axis_mouse -= (-255 + y_move_s);
    1294:	d0a7d98b 	ldhu	r2,-24730(gp)
    1298:	1007883a 	mov	r3,r2
    129c:	e0bfe30b 	ldhu	r2,-116(fp)
    12a0:	1885c83a 	sub	r2,r3,r2
    12a4:	10803fc4 	addi	r2,r2,255
    12a8:	d0a7d98d 	sth	r2,-24730(gp)
    12ac:	00000c06 	br	12e0 <setMouseBounds+0x184>
		else
			y_axis_mouse -= (+255 + y_move_s);
    12b0:	d0a7d98b 	ldhu	r2,-24730(gp)
    12b4:	1007883a 	mov	r3,r2
    12b8:	e0bfe30b 	ldhu	r2,-116(fp)
    12bc:	1885c83a 	sub	r2,r3,r2
    12c0:	10bfc044 	addi	r2,r2,-255
    12c4:	d0a7d98d 	sth	r2,-24730(gp)
    12c8:	00000506 	br	12e0 <setMouseBounds+0x184>
	}
	else // y overflow = 0
		y_axis_mouse -= y_move_s;
    12cc:	d0a7d98b 	ldhu	r2,-24730(gp)
    12d0:	1007883a 	mov	r3,r2
    12d4:	e0bfe30b 	ldhu	r2,-116(fp)
    12d8:	1885c83a 	sub	r2,r3,r2
    12dc:	d0a7d98d 	sth	r2,-24730(gp)

	char buf [100];

	//Debugging start
	sprintf(buf, "x_move_s: %d\n", (int) x_move_s);
    12e0:	e1bfe38f 	ldh	r6,-114(fp)
    12e4:	e13fe404 	addi	r4,fp,-112
    12e8:	01400074 	movhi	r5,1
    12ec:	2948a104 	addi	r5,r5,8836
    12f0:	0001d940 	call	1d94 <sprintf>
	alt_printf(buf);
    12f4:	e13fe404 	addi	r4,fp,-112
    12f8:	000bbcc0 	call	bbcc <alt_printf>
	sprintf(buf, "y_move_s: %d\n", (int) y_move_s);
    12fc:	e1bfe30f 	ldh	r6,-116(fp)
    1300:	e13fe404 	addi	r4,fp,-112
    1304:	01400074 	movhi	r5,1
    1308:	2948a504 	addi	r5,r5,8852
    130c:	0001d940 	call	1d94 <sprintf>
	alt_printf(buf);
    1310:	e13fe404 	addi	r4,fp,-112
    1314:	000bbcc0 	call	bbcc <alt_printf>

	sprintf(buf, "x_axis_mouse: %d\n", (int) x_axis_mouse);
    1318:	d0a7da0b 	ldhu	r2,-24728(gp)
    131c:	11bfffcc 	andi	r6,r2,65535
    1320:	31a0001c 	xori	r6,r6,32768
    1324:	31a00004 	addi	r6,r6,-32768
    1328:	e13fe404 	addi	r4,fp,-112
    132c:	01400074 	movhi	r5,1
    1330:	2948a904 	addi	r5,r5,8868
    1334:	0001d940 	call	1d94 <sprintf>
	alt_printf(buf);
    1338:	e13fe404 	addi	r4,fp,-112
    133c:	000bbcc0 	call	bbcc <alt_printf>
	sprintf(buf, "y_axis_mouse: %d\n", (int) y_axis_mouse);
    1340:	d0a7d98b 	ldhu	r2,-24730(gp)
    1344:	11bfffcc 	andi	r6,r2,65535
    1348:	31a0001c 	xori	r6,r6,32768
    134c:	31a00004 	addi	r6,r6,-32768
    1350:	e13fe404 	addi	r4,fp,-112
    1354:	01400074 	movhi	r5,1
    1358:	2948ae04 	addi	r5,r5,8888
    135c:	0001d940 	call	1d94 <sprintf>
	alt_printf(buf);
    1360:	e13fe404 	addi	r4,fp,-112
    1364:	000bbcc0 	call	bbcc <alt_printf>
	//Debugging end



	if(x_axis_mouse < 2) x_axis_mouse = 2;
    1368:	d0a7da0b 	ldhu	r2,-24728(gp)
    136c:	10bfffcc 	andi	r2,r2,65535
    1370:	10a0001c 	xori	r2,r2,32768
    1374:	10a00004 	addi	r2,r2,-32768
    1378:	10800088 	cmpgei	r2,r2,2
    137c:	1000021e 	bne	r2,zero,1388 <setMouseBounds+0x22c>
    1380:	00800084 	movi	r2,2
    1384:	d0a7da0d 	sth	r2,-24728(gp)
	if(x_axis_mouse > X_BOUND - 2) x_axis_mouse = X_BOUND - 2;
    1388:	d0a7da0b 	ldhu	r2,-24728(gp)
    138c:	10bfffcc 	andi	r2,r2,65535
    1390:	10a0001c 	xori	r2,r2,32768
    1394:	10a00004 	addi	r2,r2,-32768
    1398:	10804f90 	cmplti	r2,r2,318
    139c:	1000021e 	bne	r2,zero,13a8 <setMouseBounds+0x24c>
    13a0:	00804f44 	movi	r2,317
    13a4:	d0a7da0d 	sth	r2,-24728(gp)
	if(y_axis_mouse < 2) y_axis_mouse = 2;
    13a8:	d0a7d98b 	ldhu	r2,-24730(gp)
    13ac:	10bfffcc 	andi	r2,r2,65535
    13b0:	10a0001c 	xori	r2,r2,32768
    13b4:	10a00004 	addi	r2,r2,-32768
    13b8:	10800088 	cmpgei	r2,r2,2
    13bc:	1000021e 	bne	r2,zero,13c8 <setMouseBounds+0x26c>
    13c0:	00800084 	movi	r2,2
    13c4:	d0a7d98d 	sth	r2,-24730(gp)
	if(y_axis_mouse > Y_BOUND - 2) y_axis_mouse = Y_BOUND - 2;
    13c8:	d0a7d98b 	ldhu	r2,-24730(gp)
    13cc:	10bfffcc 	andi	r2,r2,65535
    13d0:	10a0001c 	xori	r2,r2,32768
    13d4:	10a00004 	addi	r2,r2,-32768
    13d8:	10803b90 	cmplti	r2,r2,238
    13dc:	1000021e 	bne	r2,zero,13e8 <setMouseBounds+0x28c>
    13e0:	00803b44 	movi	r2,237
    13e4:	d0a7d98d 	sth	r2,-24730(gp)
}
    13e8:	e037883a 	mov	sp,fp
    13ec:	dfc00117 	ldw	ra,4(sp)
    13f0:	df000017 	ldw	fp,0(sp)
    13f4:	dec00204 	addi	sp,sp,8
    13f8:	f800283a 	ret

000013fc <Mouse_ISR>:


void Mouse_ISR (struct alt_up_dev *up_dev) {
    13fc:	defff304 	addi	sp,sp,-52
    1400:	dfc00c15 	stw	ra,48(sp)
    1404:	df000b15 	stw	fp,44(sp)
    1408:	df000b04 	addi	fp,sp,44
    140c:	e13fff15 	stw	r4,-4(fp)
	unsigned char b1 = valid_byte1;
    1410:	00800074 	movhi	r2,1
    1414:	10997404 	addi	r2,r2,26064
    1418:	10800003 	ldbu	r2,0(r2)
    141c:	e0bff785 	stb	r2,-34(fp)
	unsigned char b2 = valid_byte2;
    1420:	00800074 	movhi	r2,1
    1424:	109970c4 	addi	r2,r2,26051
    1428:	10800003 	ldbu	r2,0(r2)
    142c:	e0bff745 	stb	r2,-35(fp)
	unsigned char b3 = valid_byte3;
    1430:	00800074 	movhi	r2,1
    1434:	10996fc4 	addi	r2,r2,26047
    1438:	10800003 	ldbu	r2,0(r2)
    143c:	e0bff705 	stb	r2,-36(fp)
	volatile int *HEX3_HEX0_ptr = (int *) 0x10000020;
    1440:	00840034 	movhi	r2,4096
    1444:	10800804 	addi	r2,r2,32
    1448:	e0bff615 	stw	r2,-40(fp)
	volatile int *HEX7_HEX4_ptr = (int *) 0x10000030;
    144c:	00840034 	movhi	r2,4096
    1450:	10800c04 	addi	r2,r2,48
    1454:	e0bff515 	stw	r2,-44(fp)
	unsigned char hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    1458:	e03ff7c5 	stb	zero,-33(fp)
    145c:	e03ff805 	stb	zero,-32(fp)
    1460:	e03ff845 	stb	zero,-31(fp)
    1464:	e03ff885 	stb	zero,-30(fp)
    1468:	e03ff8c5 	stb	zero,-29(fp)
    146c:	e03ff905 	stb	zero,-28(fp)
    1470:	e03ff945 	stb	zero,-27(fp)
    1474:	e03ff985 	stb	zero,-26(fp)
	unsigned char button_mouse[3];

	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 
											0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
    1478:	00800074 	movhi	r2,1
    147c:	1088b284 	addi	r2,r2,8906
    1480:	e13ffa84 	addi	r4,fp,-22
    1484:	100b883a 	mov	r5,r2
    1488:	01800404 	movi	r6,16
    148c:	0001c5c0 	call	1c5c <memcpy>


	alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0); // Turn off LEDRs
    1490:	e0bfff17 	ldw	r2,-4(fp)
    1494:	10800217 	ldw	r2,8(r2)
    1498:	10800a17 	ldw	r2,40(r2)
    149c:	10000035 	stwio	zero,0(r2)
	
	if(b1 & 0x01){
    14a0:	e0bff783 	ldbu	r2,-34(fp)
    14a4:	1080004c 	andi	r2,r2,1
    14a8:	10803fcc 	andi	r2,r2,255
    14ac:	1005003a 	cmpeq	r2,r2,zero
    14b0:	1000071e 	bne	r2,zero,14d0 <Mouse_ISR+0xd4>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x1);/*LED0 -> Left btn*/
    14b4:	e0bfff17 	ldw	r2,-4(fp)
    14b8:	10800217 	ldw	r2,8(r2)
    14bc:	10800a17 	ldw	r2,40(r2)
    14c0:	1007883a 	mov	r3,r2
    14c4:	00800044 	movi	r2,1
    14c8:	18800035 	stwio	r2,0(r3)
    14cc:	00001506 	br	1524 <Mouse_ISR+0x128>
	}
	else if(b1 & 0x02){
    14d0:	e0bff783 	ldbu	r2,-34(fp)
    14d4:	1080008c 	andi	r2,r2,2
    14d8:	1005003a 	cmpeq	r2,r2,zero
    14dc:	1000071e 	bne	r2,zero,14fc <Mouse_ISR+0x100>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x2);/*LED1 -> Right btn*/
    14e0:	e0bfff17 	ldw	r2,-4(fp)
    14e4:	10800217 	ldw	r2,8(r2)
    14e8:	10800a17 	ldw	r2,40(r2)
    14ec:	1007883a 	mov	r3,r2
    14f0:	00800084 	movi	r2,2
    14f4:	18800035 	stwio	r2,0(r3)
    14f8:	00000a06 	br	1524 <Mouse_ISR+0x128>
	}
	else if(b1 & 0x04){
    14fc:	e0bff783 	ldbu	r2,-34(fp)
    1500:	1080010c 	andi	r2,r2,4
    1504:	1005003a 	cmpeq	r2,r2,zero
    1508:	1000061e 	bne	r2,zero,1524 <Mouse_ISR+0x128>
		alt_up_parallel_port_write_data (up_dev->red_LEDs_dev, 0x4);/*LED2 -> Middle btn*/
    150c:	e0bfff17 	ldw	r2,-4(fp)
    1510:	10800217 	ldw	r2,8(r2)
    1514:	10800a17 	ldw	r2,40(r2)
    1518:	1007883a 	mov	r3,r2
    151c:	00800104 	movi	r2,4
    1520:	18800035 	stwio	r2,0(r3)
	}

	hex_segs[0] = seven_seg_decode_table [b3 & 0x0F];
    1524:	e0bff703 	ldbu	r2,-36(fp)
    1528:	10c003cc 	andi	r3,r2,15
    152c:	e0bffa84 	addi	r2,fp,-22
    1530:	10c5883a 	add	r2,r2,r3
    1534:	10800003 	ldbu	r2,0(r2)
    1538:	e0bff7c5 	stb	r2,-33(fp)
	hex_segs[1] = seven_seg_decode_table [(b3 >> 4) & 0x0F];
    153c:	e0bff703 	ldbu	r2,-36(fp)
    1540:	1004d13a 	srli	r2,r2,4
    1544:	10803fcc 	andi	r2,r2,255
    1548:	10c003cc 	andi	r3,r2,15
    154c:	e0bffa84 	addi	r2,fp,-22
    1550:	10c5883a 	add	r2,r2,r3
    1554:	10800003 	ldbu	r2,0(r2)
    1558:	e0bff805 	stb	r2,-32(fp)
	hex_segs[2] = seven_seg_decode_table[b1 >> 7 & 0x01];
    155c:	e0bff783 	ldbu	r2,-34(fp)
    1560:	1004d1fa 	srli	r2,r2,7
    1564:	10803fcc 	andi	r2,r2,255
    1568:	10c0004c 	andi	r3,r2,1
    156c:	e0bffa84 	addi	r2,fp,-22
    1570:	10c5883a 	add	r2,r2,r3
    1574:	10800003 	ldbu	r2,0(r2)
    1578:	e0bff845 	stb	r2,-31(fp)
	hex_segs[3] = seven_seg_decode_table[b1 >> 5 & 0x01];
    157c:	e0bff783 	ldbu	r2,-34(fp)
    1580:	1004d17a 	srli	r2,r2,5
    1584:	10803fcc 	andi	r2,r2,255
    1588:	10c0004c 	andi	r3,r2,1
    158c:	e0bffa84 	addi	r2,fp,-22
    1590:	10c5883a 	add	r2,r2,r3
    1594:	10800003 	ldbu	r2,0(r2)
    1598:	e0bff885 	stb	r2,-30(fp)

	hex_segs[4] = seven_seg_decode_table [b2 & 0x0F];
    159c:	e0bff743 	ldbu	r2,-35(fp)
    15a0:	10c003cc 	andi	r3,r2,15
    15a4:	e0bffa84 	addi	r2,fp,-22
    15a8:	10c5883a 	add	r2,r2,r3
    15ac:	10800003 	ldbu	r2,0(r2)
    15b0:	e0bff8c5 	stb	r2,-29(fp)
	hex_segs[5] = seven_seg_decode_table [(b2 >> 4) & 0x0F];
    15b4:	e0bff743 	ldbu	r2,-35(fp)
    15b8:	1004d13a 	srli	r2,r2,4
    15bc:	10803fcc 	andi	r2,r2,255
    15c0:	10c003cc 	andi	r3,r2,15
    15c4:	e0bffa84 	addi	r2,fp,-22
    15c8:	10c5883a 	add	r2,r2,r3
    15cc:	10800003 	ldbu	r2,0(r2)
    15d0:	e0bff905 	stb	r2,-28(fp)
	hex_segs[6] = seven_seg_decode_table[b1 >> 6 & 0x01];
    15d4:	e0bff783 	ldbu	r2,-34(fp)
    15d8:	1004d1ba 	srli	r2,r2,6
    15dc:	10803fcc 	andi	r2,r2,255
    15e0:	10c0004c 	andi	r3,r2,1
    15e4:	e0bffa84 	addi	r2,fp,-22
    15e8:	10c5883a 	add	r2,r2,r3
    15ec:	10800003 	ldbu	r2,0(r2)
    15f0:	e0bff945 	stb	r2,-27(fp)
	hex_segs[7] = seven_seg_decode_table[b1 >> 4 & 0x01];
    15f4:	e0bff783 	ldbu	r2,-34(fp)
    15f8:	1004d13a 	srli	r2,r2,4
    15fc:	10803fcc 	andi	r2,r2,255
    1600:	10c0004c 	andi	r3,r2,1
    1604:	e0bffa84 	addi	r2,fp,-22
    1608:	10c5883a 	add	r2,r2,r3
    160c:	10800003 	ldbu	r2,0(r2)
    1610:	e0bff985 	stb	r2,-26(fp)

	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
    1614:	e0bff7c4 	addi	r2,fp,-33
    1618:	10c00017 	ldw	r3,0(r2)
    161c:	e0bff617 	ldw	r2,-40(fp)
    1620:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
    1624:	e0bff7c4 	addi	r2,fp,-33
    1628:	10800104 	addi	r2,r2,4
    162c:	10c00017 	ldw	r3,0(r2)
    1630:	e0bff517 	ldw	r2,-44(fp)
    1634:	10c00015 	stw	r3,0(r2)

	setMouseBounds(b1, b2, b3);
    1638:	e13ff783 	ldbu	r4,-34(fp)
    163c:	e17ff743 	ldbu	r5,-35(fp)
    1640:	e1bff703 	ldbu	r6,-36(fp)
    1644:	000115c0 	call	115c <setMouseBounds>


}
    1648:	e037883a 	mov	sp,fp
    164c:	dfc00117 	ldw	ra,4(sp)
    1650:	df000017 	ldw	fp,0(sp)
    1654:	dec00204 	addi	sp,sp,8
    1658:	f800283a 	ret

0000165c <make_echo>:





void make_echo(){
    165c:	defffe04 	addi	sp,sp,-8
    1660:	df000115 	stw	fp,4(sp)
    1664:	df000104 	addi	fp,sp,4
	int i;
	for (i = 5000; i < BUF_SIZE; i++){
    1668:	0084e204 	movi	r2,5000
    166c:	e0bfff15 	stw	r2,-4(fp)
    1670:	00003306 	br	1740 <make_echo+0xe4>
		l_buf_echo[i] = l_buf[i - 5000] + l_buf[i - 1000];
    1674:	e17fff17 	ldw	r5,-4(fp)
    1678:	e0bfff17 	ldw	r2,-4(fp)
    167c:	10bb1e04 	addi	r2,r2,-5000
    1680:	00c00834 	movhi	r3,32
    1684:	18faad04 	addi	r3,r3,-5452
    1688:	1085883a 	add	r2,r2,r2
    168c:	1085883a 	add	r2,r2,r2
    1690:	10c5883a 	add	r2,r2,r3
    1694:	11000017 	ldw	r4,0(r2)
    1698:	e0bfff17 	ldw	r2,-4(fp)
    169c:	10bf0604 	addi	r2,r2,-1000
    16a0:	00c00834 	movhi	r3,32
    16a4:	18faad04 	addi	r3,r3,-5452
    16a8:	1085883a 	add	r2,r2,r2
    16ac:	1085883a 	add	r2,r2,r2
    16b0:	10c5883a 	add	r2,r2,r3
    16b4:	10800017 	ldw	r2,0(r2)
    16b8:	2089883a 	add	r4,r4,r2
    16bc:	00c01774 	movhi	r3,93
    16c0:	18fcf504 	addi	r3,r3,-3116
    16c4:	2945883a 	add	r2,r5,r5
    16c8:	1085883a 	add	r2,r2,r2
    16cc:	10c5883a 	add	r2,r2,r3
    16d0:	11000015 	stw	r4,0(r2)
		r_buf_echo[i] = r_buf[i - 5000] + r_buf[i - 1000];
    16d4:	e17fff17 	ldw	r5,-4(fp)
    16d8:	e0bfff17 	ldw	r2,-4(fp)
    16dc:	10bb1e04 	addi	r2,r2,-5000
    16e0:	00c00074 	movhi	r3,1
    16e4:	18d98d04 	addi	r3,r3,26164
    16e8:	1085883a 	add	r2,r2,r2
    16ec:	1085883a 	add	r2,r2,r2
    16f0:	10c5883a 	add	r2,r2,r3
    16f4:	11000017 	ldw	r4,0(r2)
    16f8:	e0bfff17 	ldw	r2,-4(fp)
    16fc:	10bf0604 	addi	r2,r2,-1000
    1700:	00c00074 	movhi	r3,1
    1704:	18d98d04 	addi	r3,r3,26164
    1708:	1085883a 	add	r2,r2,r2
    170c:	1085883a 	add	r2,r2,r2
    1710:	10c5883a 	add	r2,r2,r3
    1714:	10800017 	ldw	r2,0(r2)
    1718:	2089883a 	add	r4,r4,r2
    171c:	00c00fb4 	movhi	r3,62
    1720:	18dbd504 	addi	r3,r3,28500
    1724:	2945883a 	add	r2,r5,r5
    1728:	1085883a 	add	r2,r2,r2
    172c:	10c5883a 	add	r2,r2,r3
    1730:	11000015 	stw	r4,0(r2)



void make_echo(){
	int i;
	for (i = 5000; i < BUF_SIZE; i++){
    1734:	e0bfff17 	ldw	r2,-4(fp)
    1738:	10800044 	addi	r2,r2,1
    173c:	e0bfff15 	stw	r2,-4(fp)
    1740:	e0ffff17 	ldw	r3,-4(fp)
    1744:	00800234 	movhi	r2,8
    1748:	10a847c4 	addi	r2,r2,-24289
    174c:	10ffc90e 	bge	r2,r3,1674 <make_echo+0x18>
		l_buf_echo[i] = l_buf[i - 5000] + l_buf[i - 1000];
		r_buf_echo[i] = r_buf[i - 5000] + r_buf[i - 1000];
	}
}
    1750:	e037883a 	mov	sp,fp
    1754:	df000017 	ldw	fp,0(sp)
    1758:	dec00104 	addi	sp,sp,4
    175c:	f800283a 	ret

00001760 <run_command>:


void run_command(struct alt_up_dev *up_dev) {
    1760:	defffb04 	addi	sp,sp,-20
    1764:	dfc00415 	stw	ra,16(sp)
    1768:	df000315 	stw	fp,12(sp)
    176c:	df000304 	addi	fp,sp,12
    1770:	e13fff15 	stw	r4,-4(fp)
	int num_read;
	int num_written;
	if(command == 0){ //Record
    1774:	00800074 	movhi	r2,1
    1778:	10997044 	addi	r2,r2,26049
    177c:	10800003 	ldbu	r2,0(r2)
    1780:	10803fcc 	andi	r2,r2,255
    1784:	1004c03a 	cmpne	r2,r2,zero
    1788:	10000a1e 	bne	r2,zero,17b4 <run_command+0x54>
		// reset the buffer index for recording
		buf_index_record = 0;
    178c:	00800074 	movhi	r2,1
    1790:	10997304 	addi	r2,r2,26060
    1794:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    1798:	e0bfff17 	ldw	r2,-4(fp)
    179c:	11000517 	ldw	r4,20(r2)
    17a0:	000d4800 	call	d480 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (up_dev->audio_dev);
    17a4:	e0bfff17 	ldw	r2,-4(fp)
    17a8:	11000517 	ldw	r4,20(r2)
    17ac:	000d2d00 	call	d2d0 <alt_up_audio_enable_read_interrupt>
		make_echo();
    17b0:	000165c0 	call	165c <make_echo>
	}
	if(command == 1){ //Play
    17b4:	00800074 	movhi	r2,1
    17b8:	10997044 	addi	r2,r2,26049
    17bc:	10800003 	ldbu	r2,0(r2)
    17c0:	10803fcc 	andi	r2,r2,255
    17c4:	10800058 	cmpnei	r2,r2,1
    17c8:	1000091e 	bne	r2,zero,17f0 <run_command+0x90>
		// reset counter to start playback
		buf_index_play = 0;
    17cc:	00800074 	movhi	r2,1
    17d0:	10997204 	addi	r2,r2,26056
    17d4:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    17d8:	e0bfff17 	ldw	r2,-4(fp)
    17dc:	11000517 	ldw	r4,20(r2)
    17e0:	000d4800 	call	d480 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (up_dev->audio_dev);
    17e4:	e0bfff17 	ldw	r2,-4(fp)
    17e8:	11000517 	ldw	r4,20(r2)
    17ec:	000d36c0 	call	d36c <alt_up_audio_enable_write_interrupt>
	}
	if(command == 2){ //ECHO
    17f0:	00800074 	movhi	r2,1
    17f4:	10997044 	addi	r2,r2,26049
    17f8:	10800003 	ldbu	r2,0(r2)
    17fc:	10803fcc 	andi	r2,r2,255
    1800:	10800098 	cmpnei	r2,r2,2
    1804:	1000091e 	bne	r2,zero,182c <run_command+0xcc>
		// reset counter to start playback
		buf_index_play = 0;
    1808:	00800074 	movhi	r2,1
    180c:	10997204 	addi	r2,r2,26056
    1810:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (up_dev->audio_dev);
    1814:	e0bfff17 	ldw	r2,-4(fp)
    1818:	11000517 	ldw	r4,20(r2)
    181c:	000d4800 	call	d480 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (up_dev->audio_dev);
    1820:	e0bfff17 	ldw	r2,-4(fp)
    1824:	11000517 	ldw	r4,20(r2)
    1828:	000d36c0 	call	d36c <alt_up_audio_enable_write_interrupt>
	}
}
    182c:	e037883a 	mov	sp,fp
    1830:	dfc00117 	ldw	ra,4(sp)
    1834:	df000017 	ldw	fp,0(sp)
    1838:	dec00204 	addi	sp,sp,8
    183c:	f800283a 	ret

00001840 <command_det>:

unsigned char command_det(unsigned char buttons_stat) {
    1840:	defffd04 	addi	sp,sp,-12
    1844:	df000215 	stw	fp,8(sp)
    1848:	df000204 	addi	fp,sp,8
    184c:	e13ffe05 	stb	r4,-8(fp)
	if((buttons_stat >> 0) % 2){
    1850:	e0bffe03 	ldbu	r2,-8(fp)
    1854:	1080004c 	andi	r2,r2,1
    1858:	10803fcc 	andi	r2,r2,255
    185c:	1005003a 	cmpeq	r2,r2,zero
    1860:	1000501e 	bne	r2,zero,19a4 <command_det+0x164>
		if(x_axis_mouse >= 35 && x_axis_mouse <= 100 &&
    1864:	d0a7da0b 	ldhu	r2,-24728(gp)
    1868:	10bfffcc 	andi	r2,r2,65535
    186c:	10a0001c 	xori	r2,r2,32768
    1870:	10a00004 	addi	r2,r2,-32768
    1874:	108008d0 	cmplti	r2,r2,35
    1878:	1000141e 	bne	r2,zero,18cc <command_det+0x8c>
    187c:	d0a7da0b 	ldhu	r2,-24728(gp)
    1880:	10bfffcc 	andi	r2,r2,65535
    1884:	10a0001c 	xori	r2,r2,32768
    1888:	10a00004 	addi	r2,r2,-32768
    188c:	10801948 	cmpgei	r2,r2,101
    1890:	10000e1e 	bne	r2,zero,18cc <command_det+0x8c>
    1894:	d0a7d98b 	ldhu	r2,-24730(gp)
    1898:	10bfffcc 	andi	r2,r2,65535
    189c:	10a0001c 	xori	r2,r2,32768
    18a0:	10a00004 	addi	r2,r2,-32768
    18a4:	10801710 	cmplti	r2,r2,92
    18a8:	1000081e 	bne	r2,zero,18cc <command_det+0x8c>
    18ac:	d0a7d98b 	ldhu	r2,-24730(gp)
    18b0:	10bfffcc 	andi	r2,r2,65535
    18b4:	10a0001c 	xori	r2,r2,32768
    18b8:	10a00004 	addi	r2,r2,-32768
    18bc:	10802248 	cmpgei	r2,r2,137
    18c0:	1000021e 	bne	r2,zero,18cc <command_det+0x8c>
		   y_axis_mouse >= 92 && y_axis_mouse <= 136)
			return 0;
    18c4:	e03fff15 	stw	zero,-4(fp)
    18c8:	00003806 	br	19ac <command_det+0x16c>
		else if(x_axis_mouse >= 125 && x_axis_mouse <= 190 &&
    18cc:	d0a7da0b 	ldhu	r2,-24728(gp)
    18d0:	10bfffcc 	andi	r2,r2,65535
    18d4:	10a0001c 	xori	r2,r2,32768
    18d8:	10a00004 	addi	r2,r2,-32768
    18dc:	10801f50 	cmplti	r2,r2,125
    18e0:	1000151e 	bne	r2,zero,1938 <command_det+0xf8>
    18e4:	d0a7da0b 	ldhu	r2,-24728(gp)
    18e8:	10bfffcc 	andi	r2,r2,65535
    18ec:	10a0001c 	xori	r2,r2,32768
    18f0:	10a00004 	addi	r2,r2,-32768
    18f4:	10802fc8 	cmpgei	r2,r2,191
    18f8:	10000f1e 	bne	r2,zero,1938 <command_det+0xf8>
    18fc:	d0a7d98b 	ldhu	r2,-24730(gp)
    1900:	10bfffcc 	andi	r2,r2,65535
    1904:	10a0001c 	xori	r2,r2,32768
    1908:	10a00004 	addi	r2,r2,-32768
    190c:	10801710 	cmplti	r2,r2,92
    1910:	1000091e 	bne	r2,zero,1938 <command_det+0xf8>
    1914:	d0a7d98b 	ldhu	r2,-24730(gp)
    1918:	10bfffcc 	andi	r2,r2,65535
    191c:	10a0001c 	xori	r2,r2,32768
    1920:	10a00004 	addi	r2,r2,-32768
    1924:	10802248 	cmpgei	r2,r2,137
    1928:	1000031e 	bne	r2,zero,1938 <command_det+0xf8>
				y_axis_mouse >= 92 && y_axis_mouse <= 136)
			return 1;
    192c:	00800044 	movi	r2,1
    1930:	e0bfff15 	stw	r2,-4(fp)
    1934:	00001d06 	br	19ac <command_det+0x16c>
		else if(x_axis_mouse >= 215 && x_axis_mouse <= 280 &&
    1938:	d0a7da0b 	ldhu	r2,-24728(gp)
    193c:	10bfffcc 	andi	r2,r2,65535
    1940:	10a0001c 	xori	r2,r2,32768
    1944:	10a00004 	addi	r2,r2,-32768
    1948:	108035d0 	cmplti	r2,r2,215
    194c:	1000151e 	bne	r2,zero,19a4 <command_det+0x164>
    1950:	d0a7da0b 	ldhu	r2,-24728(gp)
    1954:	10bfffcc 	andi	r2,r2,65535
    1958:	10a0001c 	xori	r2,r2,32768
    195c:	10a00004 	addi	r2,r2,-32768
    1960:	10804648 	cmpgei	r2,r2,281
    1964:	10000f1e 	bne	r2,zero,19a4 <command_det+0x164>
    1968:	d0a7d98b 	ldhu	r2,-24730(gp)
    196c:	10bfffcc 	andi	r2,r2,65535
    1970:	10a0001c 	xori	r2,r2,32768
    1974:	10a00004 	addi	r2,r2,-32768
    1978:	10801710 	cmplti	r2,r2,92
    197c:	1000091e 	bne	r2,zero,19a4 <command_det+0x164>
    1980:	d0a7d98b 	ldhu	r2,-24730(gp)
    1984:	10bfffcc 	andi	r2,r2,65535
    1988:	10a0001c 	xori	r2,r2,32768
    198c:	10a00004 	addi	r2,r2,-32768
    1990:	10802248 	cmpgei	r2,r2,137
    1994:	1000031e 	bne	r2,zero,19a4 <command_det+0x164>
				y_axis_mouse >= 92 && y_axis_mouse <= 136)
			return 2;
    1998:	00800084 	movi	r2,2
    199c:	e0bfff15 	stw	r2,-4(fp)
    19a0:	00000206 	br	19ac <command_det+0x16c>
	}
	return -1;
    19a4:	00803fc4 	movi	r2,255
    19a8:	e0bfff15 	stw	r2,-4(fp)
    19ac:	e0bfff17 	ldw	r2,-4(fp)
}
    19b0:	e037883a 	mov	sp,fp
    19b4:	df000017 	ldw	fp,0(sp)
    19b8:	dec00104 	addi	sp,sp,4
    19bc:	f800283a 	ret

000019c0 <draw_mouse>:

void draw_mouse(struct alt_up_dev *up_dev){
    19c0:	defffb04 	addi	sp,sp,-20
    19c4:	dfc00415 	stw	ra,16(sp)
    19c8:	df000315 	stw	fp,12(sp)
    19cc:	df000304 	addi	fp,sp,12
    19d0:	e13fff15 	stw	r4,-4(fp)
	int i,j;
	for(j=0;j<8;j++){//clear previous mouse cursor
    19d4:	e03ffd15 	stw	zero,-12(fp)
    19d8:	00002b06 	br	1a88 <draw_mouse+0xc8>
		for(i=0;i<16;i++){
    19dc:	e03ffe15 	stw	zero,-8(fp)
    19e0:	00002306 	br	1a70 <draw_mouse+0xb0>
			if(cursor_shape[i][j]!= -1)
    19e4:	e0bffe17 	ldw	r2,-8(fp)
    19e8:	e0fffd17 	ldw	r3,-12(fp)
    19ec:	01000074 	movhi	r4,1
    19f0:	2109e704 	addi	r4,r4,10140
    19f4:	100490fa 	slli	r2,r2,3
    19f8:	10c5883a 	add	r2,r2,r3
    19fc:	1085883a 	add	r2,r2,r2
    1a00:	1105883a 	add	r2,r2,r4
    1a04:	1080000b 	ldhu	r2,0(r2)
    1a08:	10bfffcc 	andi	r2,r2,65535
    1a0c:	10a0001c 	xori	r2,r2,32768
    1a10:	10a00004 	addi	r2,r2,-32768
    1a14:	10bfffe0 	cmpeqi	r2,r2,-1
    1a18:	1000121e 	bne	r2,zero,1a64 <draw_mouse+0xa4>
				alt_up_pixel_buffer_dma_draw(up_dev->pixel_buffer_dev,0,x_axis_mouse+j, y_axis_mouse+i);
    1a1c:	e0bfff17 	ldw	r2,-4(fp)
    1a20:	11000717 	ldw	r4,28(r2)
    1a24:	d0a7da0b 	ldhu	r2,-24728(gp)
    1a28:	10ffffcc 	andi	r3,r2,65535
    1a2c:	18e0001c 	xori	r3,r3,32768
    1a30:	18e00004 	addi	r3,r3,-32768
    1a34:	e0bffd17 	ldw	r2,-12(fp)
    1a38:	1885883a 	add	r2,r3,r2
    1a3c:	100d883a 	mov	r6,r2
    1a40:	d0a7d98b 	ldhu	r2,-24730(gp)
    1a44:	10ffffcc 	andi	r3,r2,65535
    1a48:	18e0001c 	xori	r3,r3,32768
    1a4c:	18e00004 	addi	r3,r3,-32768
    1a50:	e0bffe17 	ldw	r2,-8(fp)
    1a54:	1885883a 	add	r2,r3,r2
    1a58:	100f883a 	mov	r7,r2
    1a5c:	000b883a 	mov	r5,zero
    1a60:	000f5040 	call	f504 <alt_up_pixel_buffer_dma_draw>
}

void draw_mouse(struct alt_up_dev *up_dev){
	int i,j;
	for(j=0;j<8;j++){//clear previous mouse cursor
		for(i=0;i<16;i++){
    1a64:	e0bffe17 	ldw	r2,-8(fp)
    1a68:	10800044 	addi	r2,r2,1
    1a6c:	e0bffe15 	stw	r2,-8(fp)
    1a70:	e0bffe17 	ldw	r2,-8(fp)
    1a74:	10800410 	cmplti	r2,r2,16
    1a78:	103fda1e 	bne	r2,zero,19e4 <draw_mouse+0x24>
	return -1;
}

void draw_mouse(struct alt_up_dev *up_dev){
	int i,j;
	for(j=0;j<8;j++){//clear previous mouse cursor
    1a7c:	e0bffd17 	ldw	r2,-12(fp)
    1a80:	10800044 	addi	r2,r2,1
    1a84:	e0bffd15 	stw	r2,-12(fp)
    1a88:	e0bffd17 	ldw	r2,-12(fp)
    1a8c:	10800210 	cmplti	r2,r2,8
    1a90:	103fd21e 	bne	r2,zero,19dc <draw_mouse+0x1c>
		}
	}

	//mouseLocation(byte1,byte2,byte3);//calculates the location of the mouse cursor in the screen

	for(j=0;j<8;j++){//print mouse cursor
    1a94:	e03ffd15 	stw	zero,-12(fp)
    1a98:	00003a06 	br	1b84 <draw_mouse+0x1c4>
		for(i=0;i<16;i++){
    1a9c:	e03ffe15 	stw	zero,-8(fp)
    1aa0:	00003206 	br	1b6c <draw_mouse+0x1ac>
			if(cursor_shape[i][j]!= -1)
    1aa4:	e0bffe17 	ldw	r2,-8(fp)
    1aa8:	e0fffd17 	ldw	r3,-12(fp)
    1aac:	01000074 	movhi	r4,1
    1ab0:	2109e704 	addi	r4,r4,10140
    1ab4:	100490fa 	slli	r2,r2,3
    1ab8:	10c5883a 	add	r2,r2,r3
    1abc:	1085883a 	add	r2,r2,r2
    1ac0:	1105883a 	add	r2,r2,r4
    1ac4:	1080000b 	ldhu	r2,0(r2)
    1ac8:	10bfffcc 	andi	r2,r2,65535
    1acc:	10a0001c 	xori	r2,r2,32768
    1ad0:	10a00004 	addi	r2,r2,-32768
    1ad4:	10bfffe0 	cmpeqi	r2,r2,-1
    1ad8:	1000211e 	bne	r2,zero,1b60 <draw_mouse+0x1a0>
				alt_up_pixel_buffer_dma_draw(up_dev->pixel_buffer_dev,cursor_shape[i][j]*(-1),x_axis_mouse+j, y_axis_mouse+i);
    1adc:	e0bfff17 	ldw	r2,-4(fp)
    1ae0:	11400717 	ldw	r5,28(r2)
    1ae4:	e0bffe17 	ldw	r2,-8(fp)
    1ae8:	e0fffd17 	ldw	r3,-12(fp)
    1aec:	01000074 	movhi	r4,1
    1af0:	2109e704 	addi	r4,r4,10140
    1af4:	100490fa 	slli	r2,r2,3
    1af8:	10c5883a 	add	r2,r2,r3
    1afc:	1085883a 	add	r2,r2,r2
    1b00:	1105883a 	add	r2,r2,r4
    1b04:	1080000b 	ldhu	r2,0(r2)
    1b08:	10bfffcc 	andi	r2,r2,65535
    1b0c:	10a0001c 	xori	r2,r2,32768
    1b10:	10a00004 	addi	r2,r2,-32768
    1b14:	0085c83a 	sub	r2,zero,r2
    1b18:	1011883a 	mov	r8,r2
    1b1c:	d0a7da0b 	ldhu	r2,-24728(gp)
    1b20:	10ffffcc 	andi	r3,r2,65535
    1b24:	18e0001c 	xori	r3,r3,32768
    1b28:	18e00004 	addi	r3,r3,-32768
    1b2c:	e0bffd17 	ldw	r2,-12(fp)
    1b30:	1885883a 	add	r2,r3,r2
    1b34:	100d883a 	mov	r6,r2
    1b38:	d0a7d98b 	ldhu	r2,-24730(gp)
    1b3c:	10ffffcc 	andi	r3,r2,65535
    1b40:	18e0001c 	xori	r3,r3,32768
    1b44:	18e00004 	addi	r3,r3,-32768
    1b48:	e0bffe17 	ldw	r2,-8(fp)
    1b4c:	1885883a 	add	r2,r3,r2
    1b50:	100f883a 	mov	r7,r2
    1b54:	2809883a 	mov	r4,r5
    1b58:	400b883a 	mov	r5,r8
    1b5c:	000f5040 	call	f504 <alt_up_pixel_buffer_dma_draw>
	}

	//mouseLocation(byte1,byte2,byte3);//calculates the location of the mouse cursor in the screen

	for(j=0;j<8;j++){//print mouse cursor
		for(i=0;i<16;i++){
    1b60:	e0bffe17 	ldw	r2,-8(fp)
    1b64:	10800044 	addi	r2,r2,1
    1b68:	e0bffe15 	stw	r2,-8(fp)
    1b6c:	e0bffe17 	ldw	r2,-8(fp)
    1b70:	10800410 	cmplti	r2,r2,16
    1b74:	103fcb1e 	bne	r2,zero,1aa4 <draw_mouse+0xe4>
		}
	}

	//mouseLocation(byte1,byte2,byte3);//calculates the location of the mouse cursor in the screen

	for(j=0;j<8;j++){//print mouse cursor
    1b78:	e0bffd17 	ldw	r2,-12(fp)
    1b7c:	10800044 	addi	r2,r2,1
    1b80:	e0bffd15 	stw	r2,-12(fp)
    1b84:	e0bffd17 	ldw	r2,-12(fp)
    1b88:	10800210 	cmplti	r2,r2,8
    1b8c:	103fc31e 	bne	r2,zero,1a9c <draw_mouse+0xdc>
		for(i=0;i<16;i++){
			if(cursor_shape[i][j]!= -1)
				alt_up_pixel_buffer_dma_draw(up_dev->pixel_buffer_dev,cursor_shape[i][j]*(-1),x_axis_mouse+j, y_axis_mouse+i);
		}
	}
    1b90:	e037883a 	mov	sp,fp
    1b94:	dfc00117 	ldw	ra,4(sp)
    1b98:	df000017 	ldw	fp,0(sp)
    1b9c:	dec00204 	addi	sp,sp,8
    1ba0:	f800283a 	ret

00001ba4 <pushbutton_ISR>:
 *                                                                          
 * This ISR checks which KEY has been pressed. If KEY1, then it enables audio-in
 * interrupts (recording). If KEY2, it enables audio-out interrupts (playback).
****************************************************************************************/
void pushbutton_ISR(struct alt_up_dev *up_dev, unsigned int id)
{
    1ba4:	defffa04 	addi	sp,sp,-24
    1ba8:	dfc00515 	stw	ra,20(sp)
    1bac:	df000415 	stw	fp,16(sp)
    1bb0:	df000404 	addi	fp,sp,16
    1bb4:	e13ffe15 	stw	r4,-8(fp)
    1bb8:	e17fff15 	stw	r5,-4(fp)
	alt_up_audio_dev *audio_dev;

	audio_dev = up_dev->audio_dev;
    1bbc:	e0bffe17 	ldw	r2,-8(fp)
    1bc0:	10800517 	ldw	r2,20(r2)
    1bc4:	e0bffd15 	stw	r2,-12(fp)
	
	int KEY_value;

	/* read the pushbutton interrupt register */
	KEY_value = alt_up_parallel_port_read_edge_capture (up_dev->KEY_dev);
    1bc8:	e0bffe17 	ldw	r2,-8(fp)
    1bcc:	10800017 	ldw	r2,0(r2)
    1bd0:	10800a17 	ldw	r2,40(r2)
    1bd4:	10800304 	addi	r2,r2,12
    1bd8:	10800037 	ldwio	r2,0(r2)
    1bdc:	e0bffc15 	stw	r2,-16(fp)
	alt_up_parallel_port_clear_edge_capture (up_dev->KEY_dev);	// Clear the interrupt
    1be0:	e0bffe17 	ldw	r2,-8(fp)
    1be4:	10800017 	ldw	r2,0(r2)
    1be8:	10800a17 	ldw	r2,40(r2)
    1bec:	10800304 	addi	r2,r2,12
    1bf0:	10000035 	stwio	zero,0(r2)

	if (KEY_value == 0x2)										// check KEY1
    1bf4:	e0bffc17 	ldw	r2,-16(fp)
    1bf8:	10800098 	cmpnei	r2,r2,2
    1bfc:	1000081e 	bne	r2,zero,1c20 <pushbutton_ISR+0x7c>
	{
		// reset the buffer index for recording
		buf_index_record = 0;
    1c00:	00800074 	movhi	r2,1
    1c04:	10997304 	addi	r2,r2,26060
    1c08:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    1c0c:	e13ffd17 	ldw	r4,-12(fp)
    1c10:	000d4800 	call	d480 <alt_up_audio_reset_audio_core>
		// enable audio-in interrupts
		alt_up_audio_enable_read_interrupt (audio_dev);
    1c14:	e13ffd17 	ldw	r4,-12(fp)
    1c18:	000d2d00 	call	d2d0 <alt_up_audio_enable_read_interrupt>
    1c1c:	00000a06 	br	1c48 <pushbutton_ISR+0xa4>
	}
	else if (KEY_value == 0x4)									// check KEY2
    1c20:	e0bffc17 	ldw	r2,-16(fp)
    1c24:	10800118 	cmpnei	r2,r2,4
    1c28:	1000071e 	bne	r2,zero,1c48 <pushbutton_ISR+0xa4>
	{
		// reset counter to start playback
		buf_index_play = 0;
    1c2c:	00800074 	movhi	r2,1
    1c30:	10997204 	addi	r2,r2,26056
    1c34:	10000015 	stw	zero,0(r2)
		// clear audio FIFOs
		alt_up_audio_reset_audio_core (audio_dev);
    1c38:	e13ffd17 	ldw	r4,-12(fp)
    1c3c:	000d4800 	call	d480 <alt_up_audio_reset_audio_core>
		// enable audio-out interrupts
		alt_up_audio_enable_write_interrupt (audio_dev);
    1c40:	e13ffd17 	ldw	r4,-12(fp)
    1c44:	000d36c0 	call	d36c <alt_up_audio_enable_write_interrupt>
	}
	return;
}
    1c48:	e037883a 	mov	sp,fp
    1c4c:	dfc00117 	ldw	ra,4(sp)
    1c50:	df000017 	ldw	fp,0(sp)
    1c54:	dec00204 	addi	sp,sp,8
    1c58:	f800283a 	ret

00001c5c <memcpy>:
    1c5c:	01c003c4 	movi	r7,15
    1c60:	2007883a 	mov	r3,r4
    1c64:	3980032e 	bgeu	r7,r6,1c74 <memcpy+0x18>
    1c68:	2904b03a 	or	r2,r5,r4
    1c6c:	108000cc 	andi	r2,r2,3
    1c70:	10000926 	beq	r2,zero,1c98 <memcpy+0x3c>
    1c74:	30000626 	beq	r6,zero,1c90 <memcpy+0x34>
    1c78:	30cd883a 	add	r6,r6,r3
    1c7c:	28800003 	ldbu	r2,0(r5)
    1c80:	29400044 	addi	r5,r5,1
    1c84:	18800005 	stb	r2,0(r3)
    1c88:	18c00044 	addi	r3,r3,1
    1c8c:	30fffb1e 	bne	r6,r3,1c7c <memcpy+0x20>
    1c90:	2005883a 	mov	r2,r4
    1c94:	f800283a 	ret
    1c98:	3811883a 	mov	r8,r7
    1c9c:	200f883a 	mov	r7,r4
    1ca0:	28c00017 	ldw	r3,0(r5)
    1ca4:	31bffc04 	addi	r6,r6,-16
    1ca8:	38c00015 	stw	r3,0(r7)
    1cac:	28800117 	ldw	r2,4(r5)
    1cb0:	38800115 	stw	r2,4(r7)
    1cb4:	28c00217 	ldw	r3,8(r5)
    1cb8:	38c00215 	stw	r3,8(r7)
    1cbc:	28800317 	ldw	r2,12(r5)
    1cc0:	29400404 	addi	r5,r5,16
    1cc4:	38800315 	stw	r2,12(r7)
    1cc8:	39c00404 	addi	r7,r7,16
    1ccc:	41bff436 	bltu	r8,r6,1ca0 <memcpy+0x44>
    1cd0:	008000c4 	movi	r2,3
    1cd4:	1180072e 	bgeu	r2,r6,1cf4 <memcpy+0x98>
    1cd8:	1007883a 	mov	r3,r2
    1cdc:	28800017 	ldw	r2,0(r5)
    1ce0:	31bfff04 	addi	r6,r6,-4
    1ce4:	29400104 	addi	r5,r5,4
    1ce8:	38800015 	stw	r2,0(r7)
    1cec:	39c00104 	addi	r7,r7,4
    1cf0:	19bffa36 	bltu	r3,r6,1cdc <memcpy+0x80>
    1cf4:	3807883a 	mov	r3,r7
    1cf8:	003fde06 	br	1c74 <memcpy+0x18>

00001cfc <memset>:
    1cfc:	008000c4 	movi	r2,3
    1d00:	29403fcc 	andi	r5,r5,255
    1d04:	2007883a 	mov	r3,r4
    1d08:	1180022e 	bgeu	r2,r6,1d14 <memset+0x18>
    1d0c:	2084703a 	and	r2,r4,r2
    1d10:	10000826 	beq	r2,zero,1d34 <memset+0x38>
    1d14:	30000526 	beq	r6,zero,1d2c <memset+0x30>
    1d18:	2805883a 	mov	r2,r5
    1d1c:	30cd883a 	add	r6,r6,r3
    1d20:	18800005 	stb	r2,0(r3)
    1d24:	18c00044 	addi	r3,r3,1
    1d28:	19bffd1e 	bne	r3,r6,1d20 <memset+0x24>
    1d2c:	2005883a 	mov	r2,r4
    1d30:	f800283a 	ret
    1d34:	2804923a 	slli	r2,r5,8
    1d38:	020003c4 	movi	r8,15
    1d3c:	200f883a 	mov	r7,r4
    1d40:	2884b03a 	or	r2,r5,r2
    1d44:	1006943a 	slli	r3,r2,16
    1d48:	10c6b03a 	or	r3,r2,r3
    1d4c:	41800a2e 	bgeu	r8,r6,1d78 <memset+0x7c>
    1d50:	4005883a 	mov	r2,r8
    1d54:	31bffc04 	addi	r6,r6,-16
    1d58:	38c00015 	stw	r3,0(r7)
    1d5c:	38c00115 	stw	r3,4(r7)
    1d60:	38c00215 	stw	r3,8(r7)
    1d64:	38c00315 	stw	r3,12(r7)
    1d68:	39c00404 	addi	r7,r7,16
    1d6c:	11bff936 	bltu	r2,r6,1d54 <memset+0x58>
    1d70:	008000c4 	movi	r2,3
    1d74:	1180052e 	bgeu	r2,r6,1d8c <memset+0x90>
    1d78:	31bfff04 	addi	r6,r6,-4
    1d7c:	008000c4 	movi	r2,3
    1d80:	38c00015 	stw	r3,0(r7)
    1d84:	39c00104 	addi	r7,r7,4
    1d88:	11bffb36 	bltu	r2,r6,1d78 <memset+0x7c>
    1d8c:	3807883a 	mov	r3,r7
    1d90:	003fe006 	br	1d14 <memset+0x18>

00001d94 <sprintf>:
    1d94:	deffe504 	addi	sp,sp,-108
    1d98:	2013883a 	mov	r9,r4
    1d9c:	dfc01815 	stw	ra,96(sp)
    1da0:	d9801915 	stw	r6,100(sp)
    1da4:	d9c01a15 	stw	r7,104(sp)
    1da8:	d8801904 	addi	r2,sp,100
    1dac:	d8800015 	stw	r2,0(sp)
    1db0:	00800074 	movhi	r2,1
    1db4:	10919b04 	addi	r2,r2,18028
    1db8:	11000017 	ldw	r4,0(r2)
    1dbc:	d9c00017 	ldw	r7,0(sp)
    1dc0:	00808204 	movi	r2,520
    1dc4:	00e00034 	movhi	r3,32768
    1dc8:	18ffffc4 	addi	r3,r3,-1
    1dcc:	280d883a 	mov	r6,r5
    1dd0:	d880040d 	sth	r2,16(sp)
    1dd4:	d9400104 	addi	r5,sp,4
    1dd8:	00bfffc4 	movi	r2,-1
    1ddc:	d8c00615 	stw	r3,24(sp)
    1de0:	d8c00315 	stw	r3,12(sp)
    1de4:	da400515 	stw	r9,20(sp)
    1de8:	d880048d 	sth	r2,18(sp)
    1dec:	da400115 	stw	r9,4(sp)
    1df0:	0001ec00 	call	1ec0 <___vfprintf_internal_r>
    1df4:	d8c00117 	ldw	r3,4(sp)
    1df8:	18000005 	stb	zero,0(r3)
    1dfc:	dfc01817 	ldw	ra,96(sp)
    1e00:	dec01b04 	addi	sp,sp,108
    1e04:	f800283a 	ret

00001e08 <_sprintf_r>:
    1e08:	deffe604 	addi	sp,sp,-104
    1e0c:	2813883a 	mov	r9,r5
    1e10:	dfc01815 	stw	ra,96(sp)
    1e14:	d9c01915 	stw	r7,100(sp)
    1e18:	d8801904 	addi	r2,sp,100
    1e1c:	d8800015 	stw	r2,0(sp)
    1e20:	100f883a 	mov	r7,r2
    1e24:	00808204 	movi	r2,520
    1e28:	00e00034 	movhi	r3,32768
    1e2c:	18ffffc4 	addi	r3,r3,-1
    1e30:	d880040d 	sth	r2,16(sp)
    1e34:	d9400104 	addi	r5,sp,4
    1e38:	00bfffc4 	movi	r2,-1
    1e3c:	d8c00615 	stw	r3,24(sp)
    1e40:	d8c00315 	stw	r3,12(sp)
    1e44:	da400515 	stw	r9,20(sp)
    1e48:	d880048d 	sth	r2,18(sp)
    1e4c:	da400115 	stw	r9,4(sp)
    1e50:	0001ec00 	call	1ec0 <___vfprintf_internal_r>
    1e54:	d8c00117 	ldw	r3,4(sp)
    1e58:	18000005 	stb	zero,0(r3)
    1e5c:	dfc01817 	ldw	ra,96(sp)
    1e60:	dec01a04 	addi	sp,sp,104
    1e64:	f800283a 	ret

00001e68 <__sprint_r>:
    1e68:	30800217 	ldw	r2,8(r6)
    1e6c:	defffe04 	addi	sp,sp,-8
    1e70:	dc000015 	stw	r16,0(sp)
    1e74:	dfc00115 	stw	ra,4(sp)
    1e78:	3021883a 	mov	r16,r6
    1e7c:	0007883a 	mov	r3,zero
    1e80:	1000061e 	bne	r2,zero,1e9c <__sprint_r+0x34>
    1e84:	1805883a 	mov	r2,r3
    1e88:	30000115 	stw	zero,4(r6)
    1e8c:	dfc00117 	ldw	ra,4(sp)
    1e90:	dc000017 	ldw	r16,0(sp)
    1e94:	dec00204 	addi	sp,sp,8
    1e98:	f800283a 	ret
    1e9c:	0005fc80 	call	5fc8 <__sfvwrite_r>
    1ea0:	1007883a 	mov	r3,r2
    1ea4:	1805883a 	mov	r2,r3
    1ea8:	80000115 	stw	zero,4(r16)
    1eac:	80000215 	stw	zero,8(r16)
    1eb0:	dfc00117 	ldw	ra,4(sp)
    1eb4:	dc000017 	ldw	r16,0(sp)
    1eb8:	dec00204 	addi	sp,sp,8
    1ebc:	f800283a 	ret

00001ec0 <___vfprintf_internal_r>:
    1ec0:	defea404 	addi	sp,sp,-1392
    1ec4:	dd815815 	stw	r22,1376(sp)
    1ec8:	dc015215 	stw	r16,1352(sp)
    1ecc:	d9c15115 	stw	r7,1348(sp)
    1ed0:	dfc15b15 	stw	ra,1388(sp)
    1ed4:	df015a15 	stw	fp,1384(sp)
    1ed8:	ddc15915 	stw	r23,1380(sp)
    1edc:	dd415715 	stw	r21,1372(sp)
    1ee0:	dd015615 	stw	r20,1368(sp)
    1ee4:	dcc15515 	stw	r19,1364(sp)
    1ee8:	dc815415 	stw	r18,1360(sp)
    1eec:	dc415315 	stw	r17,1356(sp)
    1ef0:	282d883a 	mov	r22,r5
    1ef4:	3021883a 	mov	r16,r6
    1ef8:	d9014f15 	stw	r4,1340(sp)
    1efc:	00065ec0 	call	65ec <_localeconv_r>
    1f00:	10800017 	ldw	r2,0(r2)
    1f04:	d9c15117 	ldw	r7,1348(sp)
    1f08:	d8814915 	stw	r2,1316(sp)
    1f0c:	d8814f17 	ldw	r2,1340(sp)
    1f10:	10000226 	beq	r2,zero,1f1c <___vfprintf_internal_r+0x5c>
    1f14:	10800e17 	ldw	r2,56(r2)
    1f18:	10020d26 	beq	r2,zero,2750 <___vfprintf_internal_r+0x890>
    1f1c:	b080030b 	ldhu	r2,12(r22)
    1f20:	1080020c 	andi	r2,r2,8
    1f24:	10020e26 	beq	r2,zero,2760 <___vfprintf_internal_r+0x8a0>
    1f28:	b0800417 	ldw	r2,16(r22)
    1f2c:	10020c26 	beq	r2,zero,2760 <___vfprintf_internal_r+0x8a0>
    1f30:	b200030b 	ldhu	r8,12(r22)
    1f34:	00800284 	movi	r2,10
    1f38:	40c0068c 	andi	r3,r8,26
    1f3c:	18802f1e 	bne	r3,r2,1ffc <___vfprintf_internal_r+0x13c>
    1f40:	b080038f 	ldh	r2,14(r22)
    1f44:	10002d16 	blt	r2,zero,1ffc <___vfprintf_internal_r+0x13c>
    1f48:	b240038b 	ldhu	r9,14(r22)
    1f4c:	b2800717 	ldw	r10,28(r22)
    1f50:	b2c00917 	ldw	r11,36(r22)
    1f54:	d9014f17 	ldw	r4,1340(sp)
    1f58:	dc402904 	addi	r17,sp,164
    1f5c:	d8804004 	addi	r2,sp,256
    1f60:	00c10004 	movi	r3,1024
    1f64:	423fff4c 	andi	r8,r8,65533
    1f68:	800d883a 	mov	r6,r16
    1f6c:	880b883a 	mov	r5,r17
    1f70:	da002c0d 	sth	r8,176(sp)
    1f74:	da402c8d 	sth	r9,178(sp)
    1f78:	da803015 	stw	r10,192(sp)
    1f7c:	dac03215 	stw	r11,200(sp)
    1f80:	d8802d15 	stw	r2,180(sp)
    1f84:	d8c02e15 	stw	r3,184(sp)
    1f88:	d8802915 	stw	r2,164(sp)
    1f8c:	d8c02b15 	stw	r3,172(sp)
    1f90:	d8002f15 	stw	zero,188(sp)
    1f94:	0001ec00 	call	1ec0 <___vfprintf_internal_r>
    1f98:	d8814b15 	stw	r2,1324(sp)
    1f9c:	10000416 	blt	r2,zero,1fb0 <___vfprintf_internal_r+0xf0>
    1fa0:	d9014f17 	ldw	r4,1340(sp)
    1fa4:	880b883a 	mov	r5,r17
    1fa8:	00056980 	call	5698 <_fflush_r>
    1fac:	1002321e 	bne	r2,zero,2878 <___vfprintf_internal_r+0x9b8>
    1fb0:	d8802c0b 	ldhu	r2,176(sp)
    1fb4:	1080100c 	andi	r2,r2,64
    1fb8:	10000326 	beq	r2,zero,1fc8 <___vfprintf_internal_r+0x108>
    1fbc:	b080030b 	ldhu	r2,12(r22)
    1fc0:	10801014 	ori	r2,r2,64
    1fc4:	b080030d 	sth	r2,12(r22)
    1fc8:	d8814b17 	ldw	r2,1324(sp)
    1fcc:	dfc15b17 	ldw	ra,1388(sp)
    1fd0:	df015a17 	ldw	fp,1384(sp)
    1fd4:	ddc15917 	ldw	r23,1380(sp)
    1fd8:	dd815817 	ldw	r22,1376(sp)
    1fdc:	dd415717 	ldw	r21,1372(sp)
    1fe0:	dd015617 	ldw	r20,1368(sp)
    1fe4:	dcc15517 	ldw	r19,1364(sp)
    1fe8:	dc815417 	ldw	r18,1360(sp)
    1fec:	dc415317 	ldw	r17,1356(sp)
    1ff0:	dc015217 	ldw	r16,1352(sp)
    1ff4:	dec15c04 	addi	sp,sp,1392
    1ff8:	f800283a 	ret
    1ffc:	0005883a 	mov	r2,zero
    2000:	0007883a 	mov	r3,zero
    2004:	dd401904 	addi	r21,sp,100
    2008:	d8814215 	stw	r2,1288(sp)
    200c:	802f883a 	mov	r23,r16
    2010:	d8c14315 	stw	r3,1292(sp)
    2014:	d8014b15 	stw	zero,1324(sp)
    2018:	d8014815 	stw	zero,1312(sp)
    201c:	d8014415 	stw	zero,1296(sp)
    2020:	d8014715 	stw	zero,1308(sp)
    2024:	dd400c15 	stw	r21,48(sp)
    2028:	d8000e15 	stw	zero,56(sp)
    202c:	d8000d15 	stw	zero,52(sp)
    2030:	b8800007 	ldb	r2,0(r23)
    2034:	10001926 	beq	r2,zero,209c <___vfprintf_internal_r+0x1dc>
    2038:	00c00944 	movi	r3,37
    203c:	10c01726 	beq	r2,r3,209c <___vfprintf_internal_r+0x1dc>
    2040:	b821883a 	mov	r16,r23
    2044:	00000106 	br	204c <___vfprintf_internal_r+0x18c>
    2048:	10c00326 	beq	r2,r3,2058 <___vfprintf_internal_r+0x198>
    204c:	84000044 	addi	r16,r16,1
    2050:	80800007 	ldb	r2,0(r16)
    2054:	103ffc1e 	bne	r2,zero,2048 <___vfprintf_internal_r+0x188>
    2058:	85e7c83a 	sub	r19,r16,r23
    205c:	98000e26 	beq	r19,zero,2098 <___vfprintf_internal_r+0x1d8>
    2060:	dc800e17 	ldw	r18,56(sp)
    2064:	dc400d17 	ldw	r17,52(sp)
    2068:	008001c4 	movi	r2,7
    206c:	94e5883a 	add	r18,r18,r19
    2070:	8c400044 	addi	r17,r17,1
    2074:	adc00015 	stw	r23,0(r21)
    2078:	dc800e15 	stw	r18,56(sp)
    207c:	acc00115 	stw	r19,4(r21)
    2080:	dc400d15 	stw	r17,52(sp)
    2084:	14428b16 	blt	r2,r17,2ab4 <___vfprintf_internal_r+0xbf4>
    2088:	ad400204 	addi	r21,r21,8
    208c:	d9014b17 	ldw	r4,1324(sp)
    2090:	24c9883a 	add	r4,r4,r19
    2094:	d9014b15 	stw	r4,1324(sp)
    2098:	802f883a 	mov	r23,r16
    209c:	b8800007 	ldb	r2,0(r23)
    20a0:	10013c26 	beq	r2,zero,2594 <___vfprintf_internal_r+0x6d4>
    20a4:	bdc00044 	addi	r23,r23,1
    20a8:	d8000405 	stb	zero,16(sp)
    20ac:	b8c00007 	ldb	r3,0(r23)
    20b0:	04ffffc4 	movi	r19,-1
    20b4:	d8014c15 	stw	zero,1328(sp)
    20b8:	d8014a15 	stw	zero,1320(sp)
    20bc:	d8c14d15 	stw	r3,1332(sp)
    20c0:	bdc00044 	addi	r23,r23,1
    20c4:	d9414d17 	ldw	r5,1332(sp)
    20c8:	00801604 	movi	r2,88
    20cc:	28fff804 	addi	r3,r5,-32
    20d0:	10c06036 	bltu	r2,r3,2254 <___vfprintf_internal_r+0x394>
    20d4:	18c5883a 	add	r2,r3,r3
    20d8:	1085883a 	add	r2,r2,r2
    20dc:	00c00034 	movhi	r3,0
    20e0:	18c83c04 	addi	r3,r3,8432
    20e4:	10c5883a 	add	r2,r2,r3
    20e8:	11000017 	ldw	r4,0(r2)
    20ec:	2000683a 	jmp	r4
    20f0:	00003064 	muli	zero,zero,193
    20f4:	00002254 	movui	zero,137
    20f8:	00002254 	movui	zero,137
    20fc:	00003050 	cmplti	zero,zero,193
    2100:	00002254 	movui	zero,137
    2104:	00002254 	movui	zero,137
    2108:	00002254 	movui	zero,137
    210c:	00002254 	movui	zero,137
    2110:	00002254 	movui	zero,137
    2114:	00002254 	movui	zero,137
    2118:	00002e30 	cmpltui	zero,zero,184
    211c:	00003040 	call	304 <PS2_ISR+0x110>
    2120:	00002254 	movui	zero,137
    2124:	00002e48 	cmpgei	zero,zero,185
    2128:	000030dc 	xori	zero,zero,195
    212c:	00002254 	movui	zero,137
    2130:	000030c8 	cmpgei	zero,zero,195
    2134:	00003090 	cmplti	zero,zero,194
    2138:	00003090 	cmplti	zero,zero,194
    213c:	00003090 	cmplti	zero,zero,194
    2140:	00003090 	cmplti	zero,zero,194
    2144:	00003090 	cmplti	zero,zero,194
    2148:	00003090 	cmplti	zero,zero,194
    214c:	00003090 	cmplti	zero,zero,194
    2150:	00003090 	cmplti	zero,zero,194
    2154:	00003090 	cmplti	zero,zero,194
    2158:	00002254 	movui	zero,137
    215c:	00002254 	movui	zero,137
    2160:	00002254 	movui	zero,137
    2164:	00002254 	movui	zero,137
    2168:	00002254 	movui	zero,137
    216c:	00002254 	movui	zero,137
    2170:	00002254 	movui	zero,137
    2174:	00002254 	movui	zero,137
    2178:	00002254 	movui	zero,137
    217c:	00002254 	movui	zero,137
    2180:	000028ac 	andhi	zero,zero,162
    2184:	00002f18 	cmpnei	zero,zero,188
    2188:	00002254 	movui	zero,137
    218c:	00002f18 	cmpnei	zero,zero,188
    2190:	00002254 	movui	zero,137
    2194:	00002254 	movui	zero,137
    2198:	00002254 	movui	zero,137
    219c:	00002254 	movui	zero,137
    21a0:	0000307c 	xorhi	zero,zero,193
    21a4:	00002254 	movui	zero,137
    21a8:	00002254 	movui	zero,137
    21ac:	00002960 	cmpeqi	zero,zero,165
    21b0:	00002254 	movui	zero,137
    21b4:	00002254 	movui	zero,137
    21b8:	00002254 	movui	zero,137
    21bc:	00002254 	movui	zero,137
    21c0:	00002254 	movui	zero,137
    21c4:	000029ac 	andhi	zero,zero,166
    21c8:	00002254 	movui	zero,137
    21cc:	00002254 	movui	zero,137
    21d0:	00002fcc 	andi	zero,zero,191
    21d4:	00002254 	movui	zero,137
    21d8:	00002254 	movui	zero,137
    21dc:	00002254 	movui	zero,137
    21e0:	00002254 	movui	zero,137
    21e4:	00002254 	movui	zero,137
    21e8:	00002254 	movui	zero,137
    21ec:	00002254 	movui	zero,137
    21f0:	00002254 	movui	zero,137
    21f4:	00002254 	movui	zero,137
    21f8:	00002254 	movui	zero,137
    21fc:	00002fa0 	cmpeqi	zero,zero,190
    2200:	000028b8 	rdprs	zero,zero,162
    2204:	00002f18 	cmpnei	zero,zero,188
    2208:	00002f18 	cmpnei	zero,zero,188
    220c:	00002f18 	cmpnei	zero,zero,188
    2210:	00002f04 	movi	zero,188
    2214:	000028b8 	rdprs	zero,zero,162
    2218:	00002254 	movui	zero,137
    221c:	00002254 	movui	zero,137
    2220:	00002e8c 	andi	zero,zero,186
    2224:	00002254 	movui	zero,137
    2228:	00002e5c 	xori	zero,zero,185
    222c:	0000296c 	andhi	zero,zero,165
    2230:	00002ebc 	xorhi	zero,zero,186
    2234:	00002ea8 	cmpgeui	zero,zero,186
    2238:	00002254 	movui	zero,137
    223c:	00003138 	rdprs	zero,zero,196
    2240:	00002254 	movui	zero,137
    2244:	000029b8 	rdprs	zero,zero,166
    2248:	00002254 	movui	zero,137
    224c:	00002254 	movui	zero,137
    2250:	00003030 	cmpltui	zero,zero,192
    2254:	d9014d17 	ldw	r4,1332(sp)
    2258:	2000ce26 	beq	r4,zero,2594 <___vfprintf_internal_r+0x6d4>
    225c:	01400044 	movi	r5,1
    2260:	d9800f04 	addi	r6,sp,60
    2264:	d9c14015 	stw	r7,1280(sp)
    2268:	d9414515 	stw	r5,1300(sp)
    226c:	d9814115 	stw	r6,1284(sp)
    2270:	280f883a 	mov	r7,r5
    2274:	d9000f05 	stb	r4,60(sp)
    2278:	d8000405 	stb	zero,16(sp)
    227c:	d8014615 	stw	zero,1304(sp)
    2280:	d8c14c17 	ldw	r3,1328(sp)
    2284:	1880008c 	andi	r2,r3,2
    2288:	1005003a 	cmpeq	r2,r2,zero
    228c:	d8815015 	stw	r2,1344(sp)
    2290:	1000031e 	bne	r2,zero,22a0 <___vfprintf_internal_r+0x3e0>
    2294:	d9014517 	ldw	r4,1300(sp)
    2298:	21000084 	addi	r4,r4,2
    229c:	d9014515 	stw	r4,1300(sp)
    22a0:	d9414c17 	ldw	r5,1328(sp)
    22a4:	2940210c 	andi	r5,r5,132
    22a8:	d9414e15 	stw	r5,1336(sp)
    22ac:	28002d1e 	bne	r5,zero,2364 <___vfprintf_internal_r+0x4a4>
    22b0:	d9814a17 	ldw	r6,1320(sp)
    22b4:	d8814517 	ldw	r2,1300(sp)
    22b8:	30a1c83a 	sub	r16,r6,r2
    22bc:	0400290e 	bge	zero,r16,2364 <___vfprintf_internal_r+0x4a4>
    22c0:	00800404 	movi	r2,16
    22c4:	1404580e 	bge	r2,r16,3428 <___vfprintf_internal_r+0x1568>
    22c8:	dc800e17 	ldw	r18,56(sp)
    22cc:	dc400d17 	ldw	r17,52(sp)
    22d0:	1027883a 	mov	r19,r2
    22d4:	07000074 	movhi	fp,1
    22d8:	e708d284 	addi	fp,fp,9034
    22dc:	050001c4 	movi	r20,7
    22e0:	00000306 	br	22f0 <___vfprintf_internal_r+0x430>
    22e4:	843ffc04 	addi	r16,r16,-16
    22e8:	ad400204 	addi	r21,r21,8
    22ec:	9c00130e 	bge	r19,r16,233c <___vfprintf_internal_r+0x47c>
    22f0:	94800404 	addi	r18,r18,16
    22f4:	8c400044 	addi	r17,r17,1
    22f8:	af000015 	stw	fp,0(r21)
    22fc:	acc00115 	stw	r19,4(r21)
    2300:	dc800e15 	stw	r18,56(sp)
    2304:	dc400d15 	stw	r17,52(sp)
    2308:	a47ff60e 	bge	r20,r17,22e4 <___vfprintf_internal_r+0x424>
    230c:	d9014f17 	ldw	r4,1340(sp)
    2310:	b00b883a 	mov	r5,r22
    2314:	d9800c04 	addi	r6,sp,48
    2318:	d9c15115 	stw	r7,1348(sp)
    231c:	0001e680 	call	1e68 <__sprint_r>
    2320:	d9c15117 	ldw	r7,1348(sp)
    2324:	10009e1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2328:	843ffc04 	addi	r16,r16,-16
    232c:	dc800e17 	ldw	r18,56(sp)
    2330:	dc400d17 	ldw	r17,52(sp)
    2334:	dd401904 	addi	r21,sp,100
    2338:	9c3fed16 	blt	r19,r16,22f0 <___vfprintf_internal_r+0x430>
    233c:	9425883a 	add	r18,r18,r16
    2340:	8c400044 	addi	r17,r17,1
    2344:	008001c4 	movi	r2,7
    2348:	af000015 	stw	fp,0(r21)
    234c:	ac000115 	stw	r16,4(r21)
    2350:	dc800e15 	stw	r18,56(sp)
    2354:	dc400d15 	stw	r17,52(sp)
    2358:	1441f516 	blt	r2,r17,2b30 <___vfprintf_internal_r+0xc70>
    235c:	ad400204 	addi	r21,r21,8
    2360:	00000206 	br	236c <___vfprintf_internal_r+0x4ac>
    2364:	dc800e17 	ldw	r18,56(sp)
    2368:	dc400d17 	ldw	r17,52(sp)
    236c:	d8800407 	ldb	r2,16(sp)
    2370:	10000b26 	beq	r2,zero,23a0 <___vfprintf_internal_r+0x4e0>
    2374:	00800044 	movi	r2,1
    2378:	94800044 	addi	r18,r18,1
    237c:	8c400044 	addi	r17,r17,1
    2380:	a8800115 	stw	r2,4(r21)
    2384:	d8c00404 	addi	r3,sp,16
    2388:	008001c4 	movi	r2,7
    238c:	a8c00015 	stw	r3,0(r21)
    2390:	dc800e15 	stw	r18,56(sp)
    2394:	dc400d15 	stw	r17,52(sp)
    2398:	1441da16 	blt	r2,r17,2b04 <___vfprintf_internal_r+0xc44>
    239c:	ad400204 	addi	r21,r21,8
    23a0:	d9015017 	ldw	r4,1344(sp)
    23a4:	20000b1e 	bne	r4,zero,23d4 <___vfprintf_internal_r+0x514>
    23a8:	d8800444 	addi	r2,sp,17
    23ac:	94800084 	addi	r18,r18,2
    23b0:	8c400044 	addi	r17,r17,1
    23b4:	a8800015 	stw	r2,0(r21)
    23b8:	00c00084 	movi	r3,2
    23bc:	008001c4 	movi	r2,7
    23c0:	a8c00115 	stw	r3,4(r21)
    23c4:	dc800e15 	stw	r18,56(sp)
    23c8:	dc400d15 	stw	r17,52(sp)
    23cc:	1441c216 	blt	r2,r17,2ad8 <___vfprintf_internal_r+0xc18>
    23d0:	ad400204 	addi	r21,r21,8
    23d4:	d9414e17 	ldw	r5,1336(sp)
    23d8:	00802004 	movi	r2,128
    23dc:	2880b126 	beq	r5,r2,26a4 <___vfprintf_internal_r+0x7e4>
    23e0:	d8c14617 	ldw	r3,1304(sp)
    23e4:	19e1c83a 	sub	r16,r3,r7
    23e8:	0400260e 	bge	zero,r16,2484 <___vfprintf_internal_r+0x5c4>
    23ec:	00800404 	movi	r2,16
    23f0:	1403c90e 	bge	r2,r16,3318 <___vfprintf_internal_r+0x1458>
    23f4:	1027883a 	mov	r19,r2
    23f8:	07000074 	movhi	fp,1
    23fc:	e708ce84 	addi	fp,fp,9018
    2400:	050001c4 	movi	r20,7
    2404:	00000306 	br	2414 <___vfprintf_internal_r+0x554>
    2408:	843ffc04 	addi	r16,r16,-16
    240c:	ad400204 	addi	r21,r21,8
    2410:	9c00130e 	bge	r19,r16,2460 <___vfprintf_internal_r+0x5a0>
    2414:	94800404 	addi	r18,r18,16
    2418:	8c400044 	addi	r17,r17,1
    241c:	af000015 	stw	fp,0(r21)
    2420:	acc00115 	stw	r19,4(r21)
    2424:	dc800e15 	stw	r18,56(sp)
    2428:	dc400d15 	stw	r17,52(sp)
    242c:	a47ff60e 	bge	r20,r17,2408 <___vfprintf_internal_r+0x548>
    2430:	d9014f17 	ldw	r4,1340(sp)
    2434:	b00b883a 	mov	r5,r22
    2438:	d9800c04 	addi	r6,sp,48
    243c:	d9c15115 	stw	r7,1348(sp)
    2440:	0001e680 	call	1e68 <__sprint_r>
    2444:	d9c15117 	ldw	r7,1348(sp)
    2448:	1000551e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    244c:	843ffc04 	addi	r16,r16,-16
    2450:	dc800e17 	ldw	r18,56(sp)
    2454:	dc400d17 	ldw	r17,52(sp)
    2458:	dd401904 	addi	r21,sp,100
    245c:	9c3fed16 	blt	r19,r16,2414 <___vfprintf_internal_r+0x554>
    2460:	9425883a 	add	r18,r18,r16
    2464:	8c400044 	addi	r17,r17,1
    2468:	008001c4 	movi	r2,7
    246c:	af000015 	stw	fp,0(r21)
    2470:	ac000115 	stw	r16,4(r21)
    2474:	dc800e15 	stw	r18,56(sp)
    2478:	dc400d15 	stw	r17,52(sp)
    247c:	14418216 	blt	r2,r17,2a88 <___vfprintf_internal_r+0xbc8>
    2480:	ad400204 	addi	r21,r21,8
    2484:	d9014c17 	ldw	r4,1328(sp)
    2488:	2080400c 	andi	r2,r4,256
    248c:	10004a1e 	bne	r2,zero,25b8 <___vfprintf_internal_r+0x6f8>
    2490:	d9414117 	ldw	r5,1284(sp)
    2494:	91e5883a 	add	r18,r18,r7
    2498:	8c400044 	addi	r17,r17,1
    249c:	008001c4 	movi	r2,7
    24a0:	a9400015 	stw	r5,0(r21)
    24a4:	a9c00115 	stw	r7,4(r21)
    24a8:	dc800e15 	stw	r18,56(sp)
    24ac:	dc400d15 	stw	r17,52(sp)
    24b0:	14416716 	blt	r2,r17,2a50 <___vfprintf_internal_r+0xb90>
    24b4:	a8c00204 	addi	r3,r21,8
    24b8:	d9814c17 	ldw	r6,1328(sp)
    24bc:	3080010c 	andi	r2,r6,4
    24c0:	10002826 	beq	r2,zero,2564 <___vfprintf_internal_r+0x6a4>
    24c4:	d8814a17 	ldw	r2,1320(sp)
    24c8:	d9014517 	ldw	r4,1300(sp)
    24cc:	1121c83a 	sub	r16,r2,r4
    24d0:	0400240e 	bge	zero,r16,2564 <___vfprintf_internal_r+0x6a4>
    24d4:	00800404 	movi	r2,16
    24d8:	14044f0e 	bge	r2,r16,3618 <___vfprintf_internal_r+0x1758>
    24dc:	dc400d17 	ldw	r17,52(sp)
    24e0:	1027883a 	mov	r19,r2
    24e4:	07000074 	movhi	fp,1
    24e8:	e708d284 	addi	fp,fp,9034
    24ec:	050001c4 	movi	r20,7
    24f0:	00000306 	br	2500 <___vfprintf_internal_r+0x640>
    24f4:	843ffc04 	addi	r16,r16,-16
    24f8:	18c00204 	addi	r3,r3,8
    24fc:	9c00110e 	bge	r19,r16,2544 <___vfprintf_internal_r+0x684>
    2500:	94800404 	addi	r18,r18,16
    2504:	8c400044 	addi	r17,r17,1
    2508:	1f000015 	stw	fp,0(r3)
    250c:	1cc00115 	stw	r19,4(r3)
    2510:	dc800e15 	stw	r18,56(sp)
    2514:	dc400d15 	stw	r17,52(sp)
    2518:	a47ff60e 	bge	r20,r17,24f4 <___vfprintf_internal_r+0x634>
    251c:	d9014f17 	ldw	r4,1340(sp)
    2520:	b00b883a 	mov	r5,r22
    2524:	d9800c04 	addi	r6,sp,48
    2528:	0001e680 	call	1e68 <__sprint_r>
    252c:	10001c1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2530:	843ffc04 	addi	r16,r16,-16
    2534:	dc800e17 	ldw	r18,56(sp)
    2538:	dc400d17 	ldw	r17,52(sp)
    253c:	d8c01904 	addi	r3,sp,100
    2540:	9c3fef16 	blt	r19,r16,2500 <___vfprintf_internal_r+0x640>
    2544:	9425883a 	add	r18,r18,r16
    2548:	8c400044 	addi	r17,r17,1
    254c:	008001c4 	movi	r2,7
    2550:	1f000015 	stw	fp,0(r3)
    2554:	1c000115 	stw	r16,4(r3)
    2558:	dc800e15 	stw	r18,56(sp)
    255c:	dc400d15 	stw	r17,52(sp)
    2560:	1440cb16 	blt	r2,r17,2890 <___vfprintf_internal_r+0x9d0>
    2564:	d8814a17 	ldw	r2,1320(sp)
    2568:	d9414517 	ldw	r5,1300(sp)
    256c:	1140010e 	bge	r2,r5,2574 <___vfprintf_internal_r+0x6b4>
    2570:	2805883a 	mov	r2,r5
    2574:	d9814b17 	ldw	r6,1324(sp)
    2578:	308d883a 	add	r6,r6,r2
    257c:	d9814b15 	stw	r6,1324(sp)
    2580:	90013b1e 	bne	r18,zero,2a70 <___vfprintf_internal_r+0xbb0>
    2584:	d9c14017 	ldw	r7,1280(sp)
    2588:	dd401904 	addi	r21,sp,100
    258c:	d8000d15 	stw	zero,52(sp)
    2590:	003ea706 	br	2030 <___vfprintf_internal_r+0x170>
    2594:	d8800e17 	ldw	r2,56(sp)
    2598:	10053f1e 	bne	r2,zero,3a98 <___vfprintf_internal_r+0x1bd8>
    259c:	d8000d15 	stw	zero,52(sp)
    25a0:	b080030b 	ldhu	r2,12(r22)
    25a4:	1080100c 	andi	r2,r2,64
    25a8:	103e8726 	beq	r2,zero,1fc8 <___vfprintf_internal_r+0x108>
    25ac:	00bfffc4 	movi	r2,-1
    25b0:	d8814b15 	stw	r2,1324(sp)
    25b4:	003e8406 	br	1fc8 <___vfprintf_internal_r+0x108>
    25b8:	d9814d17 	ldw	r6,1332(sp)
    25bc:	00801944 	movi	r2,101
    25c0:	11806e16 	blt	r2,r6,277c <___vfprintf_internal_r+0x8bc>
    25c4:	d9414717 	ldw	r5,1308(sp)
    25c8:	00c00044 	movi	r3,1
    25cc:	1943430e 	bge	r3,r5,32dc <___vfprintf_internal_r+0x141c>
    25d0:	d8814117 	ldw	r2,1284(sp)
    25d4:	94800044 	addi	r18,r18,1
    25d8:	8c400044 	addi	r17,r17,1
    25dc:	a8800015 	stw	r2,0(r21)
    25e0:	008001c4 	movi	r2,7
    25e4:	a8c00115 	stw	r3,4(r21)
    25e8:	dc800e15 	stw	r18,56(sp)
    25ec:	dc400d15 	stw	r17,52(sp)
    25f0:	1441ca16 	blt	r2,r17,2d1c <___vfprintf_internal_r+0xe5c>
    25f4:	a8c00204 	addi	r3,r21,8
    25f8:	d9014917 	ldw	r4,1316(sp)
    25fc:	00800044 	movi	r2,1
    2600:	94800044 	addi	r18,r18,1
    2604:	8c400044 	addi	r17,r17,1
    2608:	18800115 	stw	r2,4(r3)
    260c:	008001c4 	movi	r2,7
    2610:	19000015 	stw	r4,0(r3)
    2614:	dc800e15 	stw	r18,56(sp)
    2618:	dc400d15 	stw	r17,52(sp)
    261c:	1441b616 	blt	r2,r17,2cf8 <___vfprintf_internal_r+0xe38>
    2620:	1cc00204 	addi	r19,r3,8
    2624:	d9014217 	ldw	r4,1288(sp)
    2628:	d9414317 	ldw	r5,1292(sp)
    262c:	000d883a 	mov	r6,zero
    2630:	000f883a 	mov	r7,zero
    2634:	000a64c0 	call	a64c <__nedf2>
    2638:	10017426 	beq	r2,zero,2c0c <___vfprintf_internal_r+0xd4c>
    263c:	d9414717 	ldw	r5,1308(sp)
    2640:	d9814117 	ldw	r6,1284(sp)
    2644:	8c400044 	addi	r17,r17,1
    2648:	2c85883a 	add	r2,r5,r18
    264c:	14bfffc4 	addi	r18,r2,-1
    2650:	28bfffc4 	addi	r2,r5,-1
    2654:	30c00044 	addi	r3,r6,1
    2658:	98800115 	stw	r2,4(r19)
    265c:	008001c4 	movi	r2,7
    2660:	98c00015 	stw	r3,0(r19)
    2664:	dc800e15 	stw	r18,56(sp)
    2668:	dc400d15 	stw	r17,52(sp)
    266c:	14418e16 	blt	r2,r17,2ca8 <___vfprintf_internal_r+0xde8>
    2670:	9cc00204 	addi	r19,r19,8
    2674:	d9414817 	ldw	r5,1312(sp)
    2678:	d8800804 	addi	r2,sp,32
    267c:	8c400044 	addi	r17,r17,1
    2680:	9165883a 	add	r18,r18,r5
    2684:	98800015 	stw	r2,0(r19)
    2688:	008001c4 	movi	r2,7
    268c:	99400115 	stw	r5,4(r19)
    2690:	dc800e15 	stw	r18,56(sp)
    2694:	dc400d15 	stw	r17,52(sp)
    2698:	1440ed16 	blt	r2,r17,2a50 <___vfprintf_internal_r+0xb90>
    269c:	98c00204 	addi	r3,r19,8
    26a0:	003f8506 	br	24b8 <___vfprintf_internal_r+0x5f8>
    26a4:	d9814a17 	ldw	r6,1320(sp)
    26a8:	d8814517 	ldw	r2,1300(sp)
    26ac:	30a1c83a 	sub	r16,r6,r2
    26b0:	043f4b0e 	bge	zero,r16,23e0 <___vfprintf_internal_r+0x520>
    26b4:	00800404 	movi	r2,16
    26b8:	1404340e 	bge	r2,r16,378c <___vfprintf_internal_r+0x18cc>
    26bc:	1027883a 	mov	r19,r2
    26c0:	07000074 	movhi	fp,1
    26c4:	e708ce84 	addi	fp,fp,9018
    26c8:	050001c4 	movi	r20,7
    26cc:	00000306 	br	26dc <___vfprintf_internal_r+0x81c>
    26d0:	843ffc04 	addi	r16,r16,-16
    26d4:	ad400204 	addi	r21,r21,8
    26d8:	9c00130e 	bge	r19,r16,2728 <___vfprintf_internal_r+0x868>
    26dc:	94800404 	addi	r18,r18,16
    26e0:	8c400044 	addi	r17,r17,1
    26e4:	af000015 	stw	fp,0(r21)
    26e8:	acc00115 	stw	r19,4(r21)
    26ec:	dc800e15 	stw	r18,56(sp)
    26f0:	dc400d15 	stw	r17,52(sp)
    26f4:	a47ff60e 	bge	r20,r17,26d0 <___vfprintf_internal_r+0x810>
    26f8:	d9014f17 	ldw	r4,1340(sp)
    26fc:	b00b883a 	mov	r5,r22
    2700:	d9800c04 	addi	r6,sp,48
    2704:	d9c15115 	stw	r7,1348(sp)
    2708:	0001e680 	call	1e68 <__sprint_r>
    270c:	d9c15117 	ldw	r7,1348(sp)
    2710:	103fa31e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2714:	843ffc04 	addi	r16,r16,-16
    2718:	dc800e17 	ldw	r18,56(sp)
    271c:	dc400d17 	ldw	r17,52(sp)
    2720:	dd401904 	addi	r21,sp,100
    2724:	9c3fed16 	blt	r19,r16,26dc <___vfprintf_internal_r+0x81c>
    2728:	9425883a 	add	r18,r18,r16
    272c:	8c400044 	addi	r17,r17,1
    2730:	008001c4 	movi	r2,7
    2734:	af000015 	stw	fp,0(r21)
    2738:	ac000115 	stw	r16,4(r21)
    273c:	dc800e15 	stw	r18,56(sp)
    2740:	dc400d15 	stw	r17,52(sp)
    2744:	14416116 	blt	r2,r17,2ccc <___vfprintf_internal_r+0xe0c>
    2748:	ad400204 	addi	r21,r21,8
    274c:	003f2406 	br	23e0 <___vfprintf_internal_r+0x520>
    2750:	d9014f17 	ldw	r4,1340(sp)
    2754:	00059300 	call	5930 <__sinit>
    2758:	d9c15117 	ldw	r7,1348(sp)
    275c:	003def06 	br	1f1c <___vfprintf_internal_r+0x5c>
    2760:	d9014f17 	ldw	r4,1340(sp)
    2764:	b00b883a 	mov	r5,r22
    2768:	d9c15115 	stw	r7,1348(sp)
    276c:	0003d900 	call	3d90 <__swsetup_r>
    2770:	d9c15117 	ldw	r7,1348(sp)
    2774:	103dee26 	beq	r2,zero,1f30 <___vfprintf_internal_r+0x70>
    2778:	003f8c06 	br	25ac <___vfprintf_internal_r+0x6ec>
    277c:	d9014217 	ldw	r4,1288(sp)
    2780:	d9414317 	ldw	r5,1292(sp)
    2784:	000d883a 	mov	r6,zero
    2788:	000f883a 	mov	r7,zero
    278c:	000a5c40 	call	a5c4 <__eqdf2>
    2790:	1000f21e 	bne	r2,zero,2b5c <___vfprintf_internal_r+0xc9c>
    2794:	00800074 	movhi	r2,1
    2798:	1088ce04 	addi	r2,r2,9016
    279c:	94800044 	addi	r18,r18,1
    27a0:	8c400044 	addi	r17,r17,1
    27a4:	a8800015 	stw	r2,0(r21)
    27a8:	00c00044 	movi	r3,1
    27ac:	008001c4 	movi	r2,7
    27b0:	a8c00115 	stw	r3,4(r21)
    27b4:	dc800e15 	stw	r18,56(sp)
    27b8:	dc400d15 	stw	r17,52(sp)
    27bc:	1442fa16 	blt	r2,r17,33a8 <___vfprintf_internal_r+0x14e8>
    27c0:	a8c00204 	addi	r3,r21,8
    27c4:	d8800517 	ldw	r2,20(sp)
    27c8:	d9014717 	ldw	r4,1308(sp)
    27cc:	11015c0e 	bge	r2,r4,2d40 <___vfprintf_internal_r+0xe80>
    27d0:	dc400d17 	ldw	r17,52(sp)
    27d4:	d9814917 	ldw	r6,1316(sp)
    27d8:	00800044 	movi	r2,1
    27dc:	94800044 	addi	r18,r18,1
    27e0:	8c400044 	addi	r17,r17,1
    27e4:	18800115 	stw	r2,4(r3)
    27e8:	008001c4 	movi	r2,7
    27ec:	19800015 	stw	r6,0(r3)
    27f0:	dc800e15 	stw	r18,56(sp)
    27f4:	dc400d15 	stw	r17,52(sp)
    27f8:	14431016 	blt	r2,r17,343c <___vfprintf_internal_r+0x157c>
    27fc:	18c00204 	addi	r3,r3,8
    2800:	d8814717 	ldw	r2,1308(sp)
    2804:	143fffc4 	addi	r16,r2,-1
    2808:	043f2b0e 	bge	zero,r16,24b8 <___vfprintf_internal_r+0x5f8>
    280c:	00800404 	movi	r2,16
    2810:	1402a20e 	bge	r2,r16,329c <___vfprintf_internal_r+0x13dc>
    2814:	dc400d17 	ldw	r17,52(sp)
    2818:	1027883a 	mov	r19,r2
    281c:	07000074 	movhi	fp,1
    2820:	e708ce84 	addi	fp,fp,9018
    2824:	050001c4 	movi	r20,7
    2828:	00000306 	br	2838 <___vfprintf_internal_r+0x978>
    282c:	18c00204 	addi	r3,r3,8
    2830:	843ffc04 	addi	r16,r16,-16
    2834:	9c029c0e 	bge	r19,r16,32a8 <___vfprintf_internal_r+0x13e8>
    2838:	94800404 	addi	r18,r18,16
    283c:	8c400044 	addi	r17,r17,1
    2840:	1f000015 	stw	fp,0(r3)
    2844:	1cc00115 	stw	r19,4(r3)
    2848:	dc800e15 	stw	r18,56(sp)
    284c:	dc400d15 	stw	r17,52(sp)
    2850:	a47ff60e 	bge	r20,r17,282c <___vfprintf_internal_r+0x96c>
    2854:	d9014f17 	ldw	r4,1340(sp)
    2858:	b00b883a 	mov	r5,r22
    285c:	d9800c04 	addi	r6,sp,48
    2860:	0001e680 	call	1e68 <__sprint_r>
    2864:	103f4e1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2868:	dc800e17 	ldw	r18,56(sp)
    286c:	dc400d17 	ldw	r17,52(sp)
    2870:	d8c01904 	addi	r3,sp,100
    2874:	003fee06 	br	2830 <___vfprintf_internal_r+0x970>
    2878:	d8802c0b 	ldhu	r2,176(sp)
    287c:	00ffffc4 	movi	r3,-1
    2880:	d8c14b15 	stw	r3,1324(sp)
    2884:	1080100c 	andi	r2,r2,64
    2888:	103dcc1e 	bne	r2,zero,1fbc <___vfprintf_internal_r+0xfc>
    288c:	003dce06 	br	1fc8 <___vfprintf_internal_r+0x108>
    2890:	d9014f17 	ldw	r4,1340(sp)
    2894:	b00b883a 	mov	r5,r22
    2898:	d9800c04 	addi	r6,sp,48
    289c:	0001e680 	call	1e68 <__sprint_r>
    28a0:	103f3f1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    28a4:	dc800e17 	ldw	r18,56(sp)
    28a8:	003f2e06 	br	2564 <___vfprintf_internal_r+0x6a4>
    28ac:	d9414c17 	ldw	r5,1328(sp)
    28b0:	29400414 	ori	r5,r5,16
    28b4:	d9414c15 	stw	r5,1328(sp)
    28b8:	d9814c17 	ldw	r6,1328(sp)
    28bc:	3080080c 	andi	r2,r6,32
    28c0:	10014f1e 	bne	r2,zero,2e00 <___vfprintf_internal_r+0xf40>
    28c4:	d8c14c17 	ldw	r3,1328(sp)
    28c8:	1880040c 	andi	r2,r3,16
    28cc:	1002ea1e 	bne	r2,zero,3478 <___vfprintf_internal_r+0x15b8>
    28d0:	d9014c17 	ldw	r4,1328(sp)
    28d4:	2080100c 	andi	r2,r4,64
    28d8:	1002e726 	beq	r2,zero,3478 <___vfprintf_internal_r+0x15b8>
    28dc:	3880000f 	ldh	r2,0(r7)
    28e0:	39c00104 	addi	r7,r7,4
    28e4:	d9c14015 	stw	r7,1280(sp)
    28e8:	1023d7fa 	srai	r17,r2,31
    28ec:	1021883a 	mov	r16,r2
    28f0:	88037216 	blt	r17,zero,36bc <___vfprintf_internal_r+0x17fc>
    28f4:	01000044 	movi	r4,1
    28f8:	98000416 	blt	r19,zero,290c <___vfprintf_internal_r+0xa4c>
    28fc:	d8c14c17 	ldw	r3,1328(sp)
    2900:	00bfdfc4 	movi	r2,-129
    2904:	1886703a 	and	r3,r3,r2
    2908:	d8c14c15 	stw	r3,1328(sp)
    290c:	8444b03a 	or	r2,r16,r17
    2910:	1002261e 	bne	r2,zero,31ac <___vfprintf_internal_r+0x12ec>
    2914:	9802251e 	bne	r19,zero,31ac <___vfprintf_internal_r+0x12ec>
    2918:	20803fcc 	andi	r2,r4,255
    291c:	10029b26 	beq	r2,zero,338c <___vfprintf_internal_r+0x14cc>
    2920:	d8c01904 	addi	r3,sp,100
    2924:	dd000f04 	addi	r20,sp,60
    2928:	d8c14115 	stw	r3,1284(sp)
    292c:	d8c14117 	ldw	r3,1284(sp)
    2930:	dcc14515 	stw	r19,1300(sp)
    2934:	a0c5c83a 	sub	r2,r20,r3
    2938:	11c00a04 	addi	r7,r2,40
    293c:	99c0010e 	bge	r19,r7,2944 <___vfprintf_internal_r+0xa84>
    2940:	d9c14515 	stw	r7,1300(sp)
    2944:	dcc14615 	stw	r19,1304(sp)
    2948:	d8800407 	ldb	r2,16(sp)
    294c:	103e4c26 	beq	r2,zero,2280 <___vfprintf_internal_r+0x3c0>
    2950:	d8814517 	ldw	r2,1300(sp)
    2954:	10800044 	addi	r2,r2,1
    2958:	d8814515 	stw	r2,1300(sp)
    295c:	003e4806 	br	2280 <___vfprintf_internal_r+0x3c0>
    2960:	d9814c17 	ldw	r6,1328(sp)
    2964:	31800414 	ori	r6,r6,16
    2968:	d9814c15 	stw	r6,1328(sp)
    296c:	d8c14c17 	ldw	r3,1328(sp)
    2970:	1880080c 	andi	r2,r3,32
    2974:	1001271e 	bne	r2,zero,2e14 <___vfprintf_internal_r+0xf54>
    2978:	d9414c17 	ldw	r5,1328(sp)
    297c:	2880040c 	andi	r2,r5,16
    2980:	1002b61e 	bne	r2,zero,345c <___vfprintf_internal_r+0x159c>
    2984:	d9814c17 	ldw	r6,1328(sp)
    2988:	3080100c 	andi	r2,r6,64
    298c:	1002b326 	beq	r2,zero,345c <___vfprintf_internal_r+0x159c>
    2990:	3c00000b 	ldhu	r16,0(r7)
    2994:	0009883a 	mov	r4,zero
    2998:	39c00104 	addi	r7,r7,4
    299c:	0023883a 	mov	r17,zero
    29a0:	d9c14015 	stw	r7,1280(sp)
    29a4:	d8000405 	stb	zero,16(sp)
    29a8:	003fd306 	br	28f8 <___vfprintf_internal_r+0xa38>
    29ac:	d9014c17 	ldw	r4,1328(sp)
    29b0:	21000414 	ori	r4,r4,16
    29b4:	d9014c15 	stw	r4,1328(sp)
    29b8:	d9414c17 	ldw	r5,1328(sp)
    29bc:	2880080c 	andi	r2,r5,32
    29c0:	1001081e 	bne	r2,zero,2de4 <___vfprintf_internal_r+0xf24>
    29c4:	d8c14c17 	ldw	r3,1328(sp)
    29c8:	1880040c 	andi	r2,r3,16
    29cc:	1002b01e 	bne	r2,zero,3490 <___vfprintf_internal_r+0x15d0>
    29d0:	d9014c17 	ldw	r4,1328(sp)
    29d4:	2080100c 	andi	r2,r4,64
    29d8:	1002ad26 	beq	r2,zero,3490 <___vfprintf_internal_r+0x15d0>
    29dc:	3c00000b 	ldhu	r16,0(r7)
    29e0:	01000044 	movi	r4,1
    29e4:	39c00104 	addi	r7,r7,4
    29e8:	0023883a 	mov	r17,zero
    29ec:	d9c14015 	stw	r7,1280(sp)
    29f0:	d8000405 	stb	zero,16(sp)
    29f4:	003fc006 	br	28f8 <___vfprintf_internal_r+0xa38>
    29f8:	d9014f17 	ldw	r4,1340(sp)
    29fc:	b00b883a 	mov	r5,r22
    2a00:	d9800c04 	addi	r6,sp,48
    2a04:	0001e680 	call	1e68 <__sprint_r>
    2a08:	103ee51e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2a0c:	dc800e17 	ldw	r18,56(sp)
    2a10:	d8c01904 	addi	r3,sp,100
    2a14:	d9814c17 	ldw	r6,1328(sp)
    2a18:	3080004c 	andi	r2,r6,1
    2a1c:	1005003a 	cmpeq	r2,r2,zero
    2a20:	103ea51e 	bne	r2,zero,24b8 <___vfprintf_internal_r+0x5f8>
    2a24:	00800044 	movi	r2,1
    2a28:	dc400d17 	ldw	r17,52(sp)
    2a2c:	18800115 	stw	r2,4(r3)
    2a30:	d8814917 	ldw	r2,1316(sp)
    2a34:	94800044 	addi	r18,r18,1
    2a38:	8c400044 	addi	r17,r17,1
    2a3c:	18800015 	stw	r2,0(r3)
    2a40:	008001c4 	movi	r2,7
    2a44:	dc800e15 	stw	r18,56(sp)
    2a48:	dc400d15 	stw	r17,52(sp)
    2a4c:	14421e0e 	bge	r2,r17,32c8 <___vfprintf_internal_r+0x1408>
    2a50:	d9014f17 	ldw	r4,1340(sp)
    2a54:	b00b883a 	mov	r5,r22
    2a58:	d9800c04 	addi	r6,sp,48
    2a5c:	0001e680 	call	1e68 <__sprint_r>
    2a60:	103ecf1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2a64:	dc800e17 	ldw	r18,56(sp)
    2a68:	d8c01904 	addi	r3,sp,100
    2a6c:	003e9206 	br	24b8 <___vfprintf_internal_r+0x5f8>
    2a70:	d9014f17 	ldw	r4,1340(sp)
    2a74:	b00b883a 	mov	r5,r22
    2a78:	d9800c04 	addi	r6,sp,48
    2a7c:	0001e680 	call	1e68 <__sprint_r>
    2a80:	103ec026 	beq	r2,zero,2584 <___vfprintf_internal_r+0x6c4>
    2a84:	003ec606 	br	25a0 <___vfprintf_internal_r+0x6e0>
    2a88:	d9014f17 	ldw	r4,1340(sp)
    2a8c:	b00b883a 	mov	r5,r22
    2a90:	d9800c04 	addi	r6,sp,48
    2a94:	d9c15115 	stw	r7,1348(sp)
    2a98:	0001e680 	call	1e68 <__sprint_r>
    2a9c:	d9c15117 	ldw	r7,1348(sp)
    2aa0:	103ebf1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2aa4:	dc800e17 	ldw	r18,56(sp)
    2aa8:	dc400d17 	ldw	r17,52(sp)
    2aac:	dd401904 	addi	r21,sp,100
    2ab0:	003e7406 	br	2484 <___vfprintf_internal_r+0x5c4>
    2ab4:	d9014f17 	ldw	r4,1340(sp)
    2ab8:	b00b883a 	mov	r5,r22
    2abc:	d9800c04 	addi	r6,sp,48
    2ac0:	d9c15115 	stw	r7,1348(sp)
    2ac4:	0001e680 	call	1e68 <__sprint_r>
    2ac8:	d9c15117 	ldw	r7,1348(sp)
    2acc:	103eb41e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2ad0:	dd401904 	addi	r21,sp,100
    2ad4:	003d6d06 	br	208c <___vfprintf_internal_r+0x1cc>
    2ad8:	d9014f17 	ldw	r4,1340(sp)
    2adc:	b00b883a 	mov	r5,r22
    2ae0:	d9800c04 	addi	r6,sp,48
    2ae4:	d9c15115 	stw	r7,1348(sp)
    2ae8:	0001e680 	call	1e68 <__sprint_r>
    2aec:	d9c15117 	ldw	r7,1348(sp)
    2af0:	103eab1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2af4:	dc800e17 	ldw	r18,56(sp)
    2af8:	dc400d17 	ldw	r17,52(sp)
    2afc:	dd401904 	addi	r21,sp,100
    2b00:	003e3406 	br	23d4 <___vfprintf_internal_r+0x514>
    2b04:	d9014f17 	ldw	r4,1340(sp)
    2b08:	b00b883a 	mov	r5,r22
    2b0c:	d9800c04 	addi	r6,sp,48
    2b10:	d9c15115 	stw	r7,1348(sp)
    2b14:	0001e680 	call	1e68 <__sprint_r>
    2b18:	d9c15117 	ldw	r7,1348(sp)
    2b1c:	103ea01e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2b20:	dc800e17 	ldw	r18,56(sp)
    2b24:	dc400d17 	ldw	r17,52(sp)
    2b28:	dd401904 	addi	r21,sp,100
    2b2c:	003e1c06 	br	23a0 <___vfprintf_internal_r+0x4e0>
    2b30:	d9014f17 	ldw	r4,1340(sp)
    2b34:	b00b883a 	mov	r5,r22
    2b38:	d9800c04 	addi	r6,sp,48
    2b3c:	d9c15115 	stw	r7,1348(sp)
    2b40:	0001e680 	call	1e68 <__sprint_r>
    2b44:	d9c15117 	ldw	r7,1348(sp)
    2b48:	103e951e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2b4c:	dc800e17 	ldw	r18,56(sp)
    2b50:	dc400d17 	ldw	r17,52(sp)
    2b54:	dd401904 	addi	r21,sp,100
    2b58:	003e0406 	br	236c <___vfprintf_internal_r+0x4ac>
    2b5c:	d9000517 	ldw	r4,20(sp)
    2b60:	0102520e 	bge	zero,r4,34ac <___vfprintf_internal_r+0x15ec>
    2b64:	d9814717 	ldw	r6,1308(sp)
    2b68:	21807a16 	blt	r4,r6,2d54 <___vfprintf_internal_r+0xe94>
    2b6c:	d8814117 	ldw	r2,1284(sp)
    2b70:	91a5883a 	add	r18,r18,r6
    2b74:	8c400044 	addi	r17,r17,1
    2b78:	a8800015 	stw	r2,0(r21)
    2b7c:	008001c4 	movi	r2,7
    2b80:	a9800115 	stw	r6,4(r21)
    2b84:	dc800e15 	stw	r18,56(sp)
    2b88:	dc400d15 	stw	r17,52(sp)
    2b8c:	1442f616 	blt	r2,r17,3768 <___vfprintf_internal_r+0x18a8>
    2b90:	a8c00204 	addi	r3,r21,8
    2b94:	d9414717 	ldw	r5,1308(sp)
    2b98:	2161c83a 	sub	r16,r4,r5
    2b9c:	043f9d0e 	bge	zero,r16,2a14 <___vfprintf_internal_r+0xb54>
    2ba0:	00800404 	movi	r2,16
    2ba4:	1402130e 	bge	r2,r16,33f4 <___vfprintf_internal_r+0x1534>
    2ba8:	dc400d17 	ldw	r17,52(sp)
    2bac:	1027883a 	mov	r19,r2
    2bb0:	07000074 	movhi	fp,1
    2bb4:	e708ce84 	addi	fp,fp,9018
    2bb8:	050001c4 	movi	r20,7
    2bbc:	00000306 	br	2bcc <___vfprintf_internal_r+0xd0c>
    2bc0:	18c00204 	addi	r3,r3,8
    2bc4:	843ffc04 	addi	r16,r16,-16
    2bc8:	9c020d0e 	bge	r19,r16,3400 <___vfprintf_internal_r+0x1540>
    2bcc:	94800404 	addi	r18,r18,16
    2bd0:	8c400044 	addi	r17,r17,1
    2bd4:	1f000015 	stw	fp,0(r3)
    2bd8:	1cc00115 	stw	r19,4(r3)
    2bdc:	dc800e15 	stw	r18,56(sp)
    2be0:	dc400d15 	stw	r17,52(sp)
    2be4:	a47ff60e 	bge	r20,r17,2bc0 <___vfprintf_internal_r+0xd00>
    2be8:	d9014f17 	ldw	r4,1340(sp)
    2bec:	b00b883a 	mov	r5,r22
    2bf0:	d9800c04 	addi	r6,sp,48
    2bf4:	0001e680 	call	1e68 <__sprint_r>
    2bf8:	103e691e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2bfc:	dc800e17 	ldw	r18,56(sp)
    2c00:	dc400d17 	ldw	r17,52(sp)
    2c04:	d8c01904 	addi	r3,sp,100
    2c08:	003fee06 	br	2bc4 <___vfprintf_internal_r+0xd04>
    2c0c:	d8814717 	ldw	r2,1308(sp)
    2c10:	143fffc4 	addi	r16,r2,-1
    2c14:	043e970e 	bge	zero,r16,2674 <___vfprintf_internal_r+0x7b4>
    2c18:	00800404 	movi	r2,16
    2c1c:	1400180e 	bge	r2,r16,2c80 <___vfprintf_internal_r+0xdc0>
    2c20:	1029883a 	mov	r20,r2
    2c24:	07000074 	movhi	fp,1
    2c28:	e708ce84 	addi	fp,fp,9018
    2c2c:	054001c4 	movi	r21,7
    2c30:	00000306 	br	2c40 <___vfprintf_internal_r+0xd80>
    2c34:	9cc00204 	addi	r19,r19,8
    2c38:	843ffc04 	addi	r16,r16,-16
    2c3c:	a400120e 	bge	r20,r16,2c88 <___vfprintf_internal_r+0xdc8>
    2c40:	94800404 	addi	r18,r18,16
    2c44:	8c400044 	addi	r17,r17,1
    2c48:	9f000015 	stw	fp,0(r19)
    2c4c:	9d000115 	stw	r20,4(r19)
    2c50:	dc800e15 	stw	r18,56(sp)
    2c54:	dc400d15 	stw	r17,52(sp)
    2c58:	ac7ff60e 	bge	r21,r17,2c34 <___vfprintf_internal_r+0xd74>
    2c5c:	d9014f17 	ldw	r4,1340(sp)
    2c60:	b00b883a 	mov	r5,r22
    2c64:	d9800c04 	addi	r6,sp,48
    2c68:	0001e680 	call	1e68 <__sprint_r>
    2c6c:	103e4c1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2c70:	dc800e17 	ldw	r18,56(sp)
    2c74:	dc400d17 	ldw	r17,52(sp)
    2c78:	dcc01904 	addi	r19,sp,100
    2c7c:	003fee06 	br	2c38 <___vfprintf_internal_r+0xd78>
    2c80:	07000074 	movhi	fp,1
    2c84:	e708ce84 	addi	fp,fp,9018
    2c88:	9425883a 	add	r18,r18,r16
    2c8c:	8c400044 	addi	r17,r17,1
    2c90:	008001c4 	movi	r2,7
    2c94:	9f000015 	stw	fp,0(r19)
    2c98:	9c000115 	stw	r16,4(r19)
    2c9c:	dc800e15 	stw	r18,56(sp)
    2ca0:	dc400d15 	stw	r17,52(sp)
    2ca4:	147e720e 	bge	r2,r17,2670 <___vfprintf_internal_r+0x7b0>
    2ca8:	d9014f17 	ldw	r4,1340(sp)
    2cac:	b00b883a 	mov	r5,r22
    2cb0:	d9800c04 	addi	r6,sp,48
    2cb4:	0001e680 	call	1e68 <__sprint_r>
    2cb8:	103e391e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2cbc:	dc800e17 	ldw	r18,56(sp)
    2cc0:	dc400d17 	ldw	r17,52(sp)
    2cc4:	dcc01904 	addi	r19,sp,100
    2cc8:	003e6a06 	br	2674 <___vfprintf_internal_r+0x7b4>
    2ccc:	d9014f17 	ldw	r4,1340(sp)
    2cd0:	b00b883a 	mov	r5,r22
    2cd4:	d9800c04 	addi	r6,sp,48
    2cd8:	d9c15115 	stw	r7,1348(sp)
    2cdc:	0001e680 	call	1e68 <__sprint_r>
    2ce0:	d9c15117 	ldw	r7,1348(sp)
    2ce4:	103e2e1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2ce8:	dc800e17 	ldw	r18,56(sp)
    2cec:	dc400d17 	ldw	r17,52(sp)
    2cf0:	dd401904 	addi	r21,sp,100
    2cf4:	003dba06 	br	23e0 <___vfprintf_internal_r+0x520>
    2cf8:	d9014f17 	ldw	r4,1340(sp)
    2cfc:	b00b883a 	mov	r5,r22
    2d00:	d9800c04 	addi	r6,sp,48
    2d04:	0001e680 	call	1e68 <__sprint_r>
    2d08:	103e251e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2d0c:	dc800e17 	ldw	r18,56(sp)
    2d10:	dc400d17 	ldw	r17,52(sp)
    2d14:	dcc01904 	addi	r19,sp,100
    2d18:	003e4206 	br	2624 <___vfprintf_internal_r+0x764>
    2d1c:	d9014f17 	ldw	r4,1340(sp)
    2d20:	b00b883a 	mov	r5,r22
    2d24:	d9800c04 	addi	r6,sp,48
    2d28:	0001e680 	call	1e68 <__sprint_r>
    2d2c:	103e1c1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    2d30:	dc800e17 	ldw	r18,56(sp)
    2d34:	dc400d17 	ldw	r17,52(sp)
    2d38:	d8c01904 	addi	r3,sp,100
    2d3c:	003e2e06 	br	25f8 <___vfprintf_internal_r+0x738>
    2d40:	d9414c17 	ldw	r5,1328(sp)
    2d44:	2880004c 	andi	r2,r5,1
    2d48:	1005003a 	cmpeq	r2,r2,zero
    2d4c:	103dda1e 	bne	r2,zero,24b8 <___vfprintf_internal_r+0x5f8>
    2d50:	003e9f06 	br	27d0 <___vfprintf_internal_r+0x910>
    2d54:	d8c14117 	ldw	r3,1284(sp)
    2d58:	9125883a 	add	r18,r18,r4
    2d5c:	8c400044 	addi	r17,r17,1
    2d60:	008001c4 	movi	r2,7
    2d64:	a8c00015 	stw	r3,0(r21)
    2d68:	a9000115 	stw	r4,4(r21)
    2d6c:	dc800e15 	stw	r18,56(sp)
    2d70:	dc400d15 	stw	r17,52(sp)
    2d74:	14426616 	blt	r2,r17,3710 <___vfprintf_internal_r+0x1850>
    2d78:	a8c00204 	addi	r3,r21,8
    2d7c:	d9414917 	ldw	r5,1316(sp)
    2d80:	00800044 	movi	r2,1
    2d84:	94800044 	addi	r18,r18,1
    2d88:	8c400044 	addi	r17,r17,1
    2d8c:	18800115 	stw	r2,4(r3)
    2d90:	008001c4 	movi	r2,7
    2d94:	19400015 	stw	r5,0(r3)
    2d98:	dc800e15 	stw	r18,56(sp)
    2d9c:	dc400d15 	stw	r17,52(sp)
    2da0:	2021883a 	mov	r16,r4
    2da4:	14425016 	blt	r2,r17,36e8 <___vfprintf_internal_r+0x1828>
    2da8:	19400204 	addi	r5,r3,8
    2dac:	d9814717 	ldw	r6,1308(sp)
    2db0:	8c400044 	addi	r17,r17,1
    2db4:	dc400d15 	stw	r17,52(sp)
    2db8:	3107c83a 	sub	r3,r6,r4
    2dbc:	d9014117 	ldw	r4,1284(sp)
    2dc0:	90e5883a 	add	r18,r18,r3
    2dc4:	28c00115 	stw	r3,4(r5)
    2dc8:	8105883a 	add	r2,r16,r4
    2dcc:	28800015 	stw	r2,0(r5)
    2dd0:	008001c4 	movi	r2,7
    2dd4:	dc800e15 	stw	r18,56(sp)
    2dd8:	147f1d16 	blt	r2,r17,2a50 <___vfprintf_internal_r+0xb90>
    2ddc:	28c00204 	addi	r3,r5,8
    2de0:	003db506 	br	24b8 <___vfprintf_internal_r+0x5f8>
    2de4:	3c000017 	ldw	r16,0(r7)
    2de8:	3c400117 	ldw	r17,4(r7)
    2dec:	39800204 	addi	r6,r7,8
    2df0:	01000044 	movi	r4,1
    2df4:	d9814015 	stw	r6,1280(sp)
    2df8:	d8000405 	stb	zero,16(sp)
    2dfc:	003ebe06 	br	28f8 <___vfprintf_internal_r+0xa38>
    2e00:	3c000017 	ldw	r16,0(r7)
    2e04:	3c400117 	ldw	r17,4(r7)
    2e08:	38800204 	addi	r2,r7,8
    2e0c:	d8814015 	stw	r2,1280(sp)
    2e10:	003eb706 	br	28f0 <___vfprintf_internal_r+0xa30>
    2e14:	3c000017 	ldw	r16,0(r7)
    2e18:	3c400117 	ldw	r17,4(r7)
    2e1c:	39000204 	addi	r4,r7,8
    2e20:	d9014015 	stw	r4,1280(sp)
    2e24:	0009883a 	mov	r4,zero
    2e28:	d8000405 	stb	zero,16(sp)
    2e2c:	003eb206 	br	28f8 <___vfprintf_internal_r+0xa38>
    2e30:	38c00017 	ldw	r3,0(r7)
    2e34:	39c00104 	addi	r7,r7,4
    2e38:	d8c14a15 	stw	r3,1320(sp)
    2e3c:	1800d10e 	bge	r3,zero,3184 <___vfprintf_internal_r+0x12c4>
    2e40:	00c7c83a 	sub	r3,zero,r3
    2e44:	d8c14a15 	stw	r3,1320(sp)
    2e48:	d9014c17 	ldw	r4,1328(sp)
    2e4c:	b8c00007 	ldb	r3,0(r23)
    2e50:	21000114 	ori	r4,r4,4
    2e54:	d9014c15 	stw	r4,1328(sp)
    2e58:	003c9806 	br	20bc <___vfprintf_internal_r+0x1fc>
    2e5c:	d9814c17 	ldw	r6,1328(sp)
    2e60:	3080080c 	andi	r2,r6,32
    2e64:	1001f026 	beq	r2,zero,3628 <___vfprintf_internal_r+0x1768>
    2e68:	d9014b17 	ldw	r4,1324(sp)
    2e6c:	38800017 	ldw	r2,0(r7)
    2e70:	39c00104 	addi	r7,r7,4
    2e74:	d9c14015 	stw	r7,1280(sp)
    2e78:	2007d7fa 	srai	r3,r4,31
    2e7c:	d9c14017 	ldw	r7,1280(sp)
    2e80:	11000015 	stw	r4,0(r2)
    2e84:	10c00115 	stw	r3,4(r2)
    2e88:	003c6906 	br	2030 <___vfprintf_internal_r+0x170>
    2e8c:	b8c00007 	ldb	r3,0(r23)
    2e90:	00801b04 	movi	r2,108
    2e94:	18824f26 	beq	r3,r2,37d4 <___vfprintf_internal_r+0x1914>
    2e98:	d9414c17 	ldw	r5,1328(sp)
    2e9c:	29400414 	ori	r5,r5,16
    2ea0:	d9414c15 	stw	r5,1328(sp)
    2ea4:	003c8506 	br	20bc <___vfprintf_internal_r+0x1fc>
    2ea8:	d9814c17 	ldw	r6,1328(sp)
    2eac:	b8c00007 	ldb	r3,0(r23)
    2eb0:	31800814 	ori	r6,r6,32
    2eb4:	d9814c15 	stw	r6,1328(sp)
    2eb8:	003c8006 	br	20bc <___vfprintf_internal_r+0x1fc>
    2ebc:	d8814c17 	ldw	r2,1328(sp)
    2ec0:	3c000017 	ldw	r16,0(r7)
    2ec4:	00c01e04 	movi	r3,120
    2ec8:	10800094 	ori	r2,r2,2
    2ecc:	d8814c15 	stw	r2,1328(sp)
    2ed0:	39c00104 	addi	r7,r7,4
    2ed4:	01400074 	movhi	r5,1
    2ed8:	2948b704 	addi	r5,r5,8924
    2edc:	00800c04 	movi	r2,48
    2ee0:	0023883a 	mov	r17,zero
    2ee4:	01000084 	movi	r4,2
    2ee8:	d9c14015 	stw	r7,1280(sp)
    2eec:	d8c14d15 	stw	r3,1332(sp)
    2ef0:	d9414415 	stw	r5,1296(sp)
    2ef4:	d8800445 	stb	r2,17(sp)
    2ef8:	d8c00485 	stb	r3,18(sp)
    2efc:	d8000405 	stb	zero,16(sp)
    2f00:	003e7d06 	br	28f8 <___vfprintf_internal_r+0xa38>
    2f04:	d8814c17 	ldw	r2,1328(sp)
    2f08:	b8c00007 	ldb	r3,0(r23)
    2f0c:	10801014 	ori	r2,r2,64
    2f10:	d8814c15 	stw	r2,1328(sp)
    2f14:	003c6906 	br	20bc <___vfprintf_internal_r+0x1fc>
    2f18:	d9414c17 	ldw	r5,1328(sp)
    2f1c:	2880020c 	andi	r2,r5,8
    2f20:	1001df26 	beq	r2,zero,36a0 <___vfprintf_internal_r+0x17e0>
    2f24:	39800017 	ldw	r6,0(r7)
    2f28:	38800204 	addi	r2,r7,8
    2f2c:	d8814015 	stw	r2,1280(sp)
    2f30:	d9814215 	stw	r6,1288(sp)
    2f34:	39c00117 	ldw	r7,4(r7)
    2f38:	d9c14315 	stw	r7,1292(sp)
    2f3c:	d9014217 	ldw	r4,1288(sp)
    2f40:	d9414317 	ldw	r5,1292(sp)
    2f44:	00087280 	call	8728 <__isinfd>
    2f48:	10021726 	beq	r2,zero,37a8 <___vfprintf_internal_r+0x18e8>
    2f4c:	d9014217 	ldw	r4,1288(sp)
    2f50:	d9414317 	ldw	r5,1292(sp)
    2f54:	000d883a 	mov	r6,zero
    2f58:	000f883a 	mov	r7,zero
    2f5c:	000a7e40 	call	a7e4 <__ltdf2>
    2f60:	1002ca16 	blt	r2,zero,3a8c <___vfprintf_internal_r+0x1bcc>
    2f64:	d9414d17 	ldw	r5,1332(sp)
    2f68:	008011c4 	movi	r2,71
    2f6c:	11420a16 	blt	r2,r5,3798 <___vfprintf_internal_r+0x18d8>
    2f70:	01800074 	movhi	r6,1
    2f74:	3188bc04 	addi	r6,r6,8944
    2f78:	d9814115 	stw	r6,1284(sp)
    2f7c:	d9014c17 	ldw	r4,1328(sp)
    2f80:	00c000c4 	movi	r3,3
    2f84:	00bfdfc4 	movi	r2,-129
    2f88:	2088703a 	and	r4,r4,r2
    2f8c:	180f883a 	mov	r7,r3
    2f90:	d8c14515 	stw	r3,1300(sp)
    2f94:	d9014c15 	stw	r4,1328(sp)
    2f98:	d8014615 	stw	zero,1304(sp)
    2f9c:	003e6a06 	br	2948 <___vfprintf_internal_r+0xa88>
    2fa0:	38800017 	ldw	r2,0(r7)
    2fa4:	00c00044 	movi	r3,1
    2fa8:	39c00104 	addi	r7,r7,4
    2fac:	d9c14015 	stw	r7,1280(sp)
    2fb0:	d9000f04 	addi	r4,sp,60
    2fb4:	180f883a 	mov	r7,r3
    2fb8:	d8c14515 	stw	r3,1300(sp)
    2fbc:	d9014115 	stw	r4,1284(sp)
    2fc0:	d8800f05 	stb	r2,60(sp)
    2fc4:	d8000405 	stb	zero,16(sp)
    2fc8:	003cac06 	br	227c <___vfprintf_internal_r+0x3bc>
    2fcc:	01400074 	movhi	r5,1
    2fd0:	2948c204 	addi	r5,r5,8968
    2fd4:	d9414415 	stw	r5,1296(sp)
    2fd8:	d9814c17 	ldw	r6,1328(sp)
    2fdc:	3080080c 	andi	r2,r6,32
    2fe0:	1000f926 	beq	r2,zero,33c8 <___vfprintf_internal_r+0x1508>
    2fe4:	3c000017 	ldw	r16,0(r7)
    2fe8:	3c400117 	ldw	r17,4(r7)
    2fec:	38800204 	addi	r2,r7,8
    2ff0:	d8814015 	stw	r2,1280(sp)
    2ff4:	d9414c17 	ldw	r5,1328(sp)
    2ff8:	2880004c 	andi	r2,r5,1
    2ffc:	1005003a 	cmpeq	r2,r2,zero
    3000:	1000b31e 	bne	r2,zero,32d0 <___vfprintf_internal_r+0x1410>
    3004:	8444b03a 	or	r2,r16,r17
    3008:	1000b126 	beq	r2,zero,32d0 <___vfprintf_internal_r+0x1410>
    300c:	d9814d17 	ldw	r6,1332(sp)
    3010:	29400094 	ori	r5,r5,2
    3014:	00800c04 	movi	r2,48
    3018:	01000084 	movi	r4,2
    301c:	d9414c15 	stw	r5,1328(sp)
    3020:	d8800445 	stb	r2,17(sp)
    3024:	d9800485 	stb	r6,18(sp)
    3028:	d8000405 	stb	zero,16(sp)
    302c:	003e3206 	br	28f8 <___vfprintf_internal_r+0xa38>
    3030:	01800074 	movhi	r6,1
    3034:	3188b704 	addi	r6,r6,8924
    3038:	d9814415 	stw	r6,1296(sp)
    303c:	003fe606 	br	2fd8 <___vfprintf_internal_r+0x1118>
    3040:	00800ac4 	movi	r2,43
    3044:	d8800405 	stb	r2,16(sp)
    3048:	b8c00007 	ldb	r3,0(r23)
    304c:	003c1b06 	br	20bc <___vfprintf_internal_r+0x1fc>
    3050:	d8814c17 	ldw	r2,1328(sp)
    3054:	b8c00007 	ldb	r3,0(r23)
    3058:	10800054 	ori	r2,r2,1
    305c:	d8814c15 	stw	r2,1328(sp)
    3060:	003c1606 	br	20bc <___vfprintf_internal_r+0x1fc>
    3064:	d8800407 	ldb	r2,16(sp)
    3068:	1000461e 	bne	r2,zero,3184 <___vfprintf_internal_r+0x12c4>
    306c:	00800804 	movi	r2,32
    3070:	d8800405 	stb	r2,16(sp)
    3074:	b8c00007 	ldb	r3,0(r23)
    3078:	003c1006 	br	20bc <___vfprintf_internal_r+0x1fc>
    307c:	d9814c17 	ldw	r6,1328(sp)
    3080:	b8c00007 	ldb	r3,0(r23)
    3084:	31800214 	ori	r6,r6,8
    3088:	d9814c15 	stw	r6,1328(sp)
    308c:	003c0b06 	br	20bc <___vfprintf_internal_r+0x1fc>
    3090:	0007883a 	mov	r3,zero
    3094:	01000244 	movi	r4,9
    3098:	188002a4 	muli	r2,r3,10
    309c:	b8c00007 	ldb	r3,0(r23)
    30a0:	d9814d17 	ldw	r6,1332(sp)
    30a4:	bdc00044 	addi	r23,r23,1
    30a8:	d8c14d15 	stw	r3,1332(sp)
    30ac:	d9414d17 	ldw	r5,1332(sp)
    30b0:	3085883a 	add	r2,r6,r2
    30b4:	10fff404 	addi	r3,r2,-48
    30b8:	28bff404 	addi	r2,r5,-48
    30bc:	20bff62e 	bgeu	r4,r2,3098 <___vfprintf_internal_r+0x11d8>
    30c0:	d8c14a15 	stw	r3,1320(sp)
    30c4:	003bff06 	br	20c4 <___vfprintf_internal_r+0x204>
    30c8:	d9414c17 	ldw	r5,1328(sp)
    30cc:	b8c00007 	ldb	r3,0(r23)
    30d0:	29402014 	ori	r5,r5,128
    30d4:	d9414c15 	stw	r5,1328(sp)
    30d8:	003bf806 	br	20bc <___vfprintf_internal_r+0x1fc>
    30dc:	b8c00007 	ldb	r3,0(r23)
    30e0:	00800a84 	movi	r2,42
    30e4:	bdc00044 	addi	r23,r23,1
    30e8:	18831526 	beq	r3,r2,3d40 <___vfprintf_internal_r+0x1e80>
    30ec:	d8c14d15 	stw	r3,1332(sp)
    30f0:	18bff404 	addi	r2,r3,-48
    30f4:	00c00244 	movi	r3,9
    30f8:	18827836 	bltu	r3,r2,3adc <___vfprintf_internal_r+0x1c1c>
    30fc:	000d883a 	mov	r6,zero
    3100:	308002a4 	muli	r2,r6,10
    3104:	b9800007 	ldb	r6,0(r23)
    3108:	d9414d17 	ldw	r5,1332(sp)
    310c:	bdc00044 	addi	r23,r23,1
    3110:	d9814d15 	stw	r6,1332(sp)
    3114:	d9014d17 	ldw	r4,1332(sp)
    3118:	1145883a 	add	r2,r2,r5
    311c:	11bff404 	addi	r6,r2,-48
    3120:	20bff404 	addi	r2,r4,-48
    3124:	18bff62e 	bgeu	r3,r2,3100 <___vfprintf_internal_r+0x1240>
    3128:	3027883a 	mov	r19,r6
    312c:	303be50e 	bge	r6,zero,20c4 <___vfprintf_internal_r+0x204>
    3130:	04ffffc4 	movi	r19,-1
    3134:	003be306 	br	20c4 <___vfprintf_internal_r+0x204>
    3138:	d8000405 	stb	zero,16(sp)
    313c:	39800017 	ldw	r6,0(r7)
    3140:	39c00104 	addi	r7,r7,4
    3144:	d9c14015 	stw	r7,1280(sp)
    3148:	d9814115 	stw	r6,1284(sp)
    314c:	3001c926 	beq	r6,zero,3874 <___vfprintf_internal_r+0x19b4>
    3150:	98000e16 	blt	r19,zero,318c <___vfprintf_internal_r+0x12cc>
    3154:	d9014117 	ldw	r4,1284(sp)
    3158:	000b883a 	mov	r5,zero
    315c:	980d883a 	mov	r6,r19
    3160:	0006f7c0 	call	6f7c <memchr>
    3164:	10025926 	beq	r2,zero,3acc <___vfprintf_internal_r+0x1c0c>
    3168:	d8c14117 	ldw	r3,1284(sp)
    316c:	10cfc83a 	sub	r7,r2,r3
    3170:	99c19e16 	blt	r19,r7,37ec <___vfprintf_internal_r+0x192c>
    3174:	d9c14515 	stw	r7,1300(sp)
    3178:	38000916 	blt	r7,zero,31a0 <___vfprintf_internal_r+0x12e0>
    317c:	d8014615 	stw	zero,1304(sp)
    3180:	003df106 	br	2948 <___vfprintf_internal_r+0xa88>
    3184:	b8c00007 	ldb	r3,0(r23)
    3188:	003bcc06 	br	20bc <___vfprintf_internal_r+0x1fc>
    318c:	d9014117 	ldw	r4,1284(sp)
    3190:	0008a100 	call	8a10 <strlen>
    3194:	d8814515 	stw	r2,1300(sp)
    3198:	100f883a 	mov	r7,r2
    319c:	103ff70e 	bge	r2,zero,317c <___vfprintf_internal_r+0x12bc>
    31a0:	d8014515 	stw	zero,1300(sp)
    31a4:	d8014615 	stw	zero,1304(sp)
    31a8:	003de706 	br	2948 <___vfprintf_internal_r+0xa88>
    31ac:	20c03fcc 	andi	r3,r4,255
    31b0:	00800044 	movi	r2,1
    31b4:	18802d26 	beq	r3,r2,326c <___vfprintf_internal_r+0x13ac>
    31b8:	18800e36 	bltu	r3,r2,31f4 <___vfprintf_internal_r+0x1334>
    31bc:	00800084 	movi	r2,2
    31c0:	1880fa26 	beq	r3,r2,35ac <___vfprintf_internal_r+0x16ec>
    31c4:	01000074 	movhi	r4,1
    31c8:	2108c704 	addi	r4,r4,8988
    31cc:	0008a100 	call	8a10 <strlen>
    31d0:	100f883a 	mov	r7,r2
    31d4:	dcc14515 	stw	r19,1300(sp)
    31d8:	9880010e 	bge	r19,r2,31e0 <___vfprintf_internal_r+0x1320>
    31dc:	d8814515 	stw	r2,1300(sp)
    31e0:	00800074 	movhi	r2,1
    31e4:	1088c704 	addi	r2,r2,8988
    31e8:	dcc14615 	stw	r19,1304(sp)
    31ec:	d8814115 	stw	r2,1284(sp)
    31f0:	003dd506 	br	2948 <___vfprintf_internal_r+0xa88>
    31f4:	d9401904 	addi	r5,sp,100
    31f8:	dd000f04 	addi	r20,sp,60
    31fc:	d9414115 	stw	r5,1284(sp)
    3200:	880a977a 	slli	r5,r17,29
    3204:	d9814117 	ldw	r6,1284(sp)
    3208:	8004d0fa 	srli	r2,r16,3
    320c:	8806d0fa 	srli	r3,r17,3
    3210:	810001cc 	andi	r4,r16,7
    3214:	2884b03a 	or	r2,r5,r2
    3218:	31bfffc4 	addi	r6,r6,-1
    321c:	21000c04 	addi	r4,r4,48
    3220:	d9814115 	stw	r6,1284(sp)
    3224:	10cab03a 	or	r5,r2,r3
    3228:	31000005 	stb	r4,0(r6)
    322c:	1021883a 	mov	r16,r2
    3230:	1823883a 	mov	r17,r3
    3234:	283ff21e 	bne	r5,zero,3200 <___vfprintf_internal_r+0x1340>
    3238:	d8c14c17 	ldw	r3,1328(sp)
    323c:	1880004c 	andi	r2,r3,1
    3240:	1005003a 	cmpeq	r2,r2,zero
    3244:	103db91e 	bne	r2,zero,292c <___vfprintf_internal_r+0xa6c>
    3248:	20803fcc 	andi	r2,r4,255
    324c:	1080201c 	xori	r2,r2,128
    3250:	10bfe004 	addi	r2,r2,-128
    3254:	00c00c04 	movi	r3,48
    3258:	10fdb426 	beq	r2,r3,292c <___vfprintf_internal_r+0xa6c>
    325c:	31bfffc4 	addi	r6,r6,-1
    3260:	d9814115 	stw	r6,1284(sp)
    3264:	30c00005 	stb	r3,0(r6)
    3268:	003db006 	br	292c <___vfprintf_internal_r+0xa6c>
    326c:	88800068 	cmpgeui	r2,r17,1
    3270:	10002c1e 	bne	r2,zero,3324 <___vfprintf_internal_r+0x1464>
    3274:	8800021e 	bne	r17,zero,3280 <___vfprintf_internal_r+0x13c0>
    3278:	00800244 	movi	r2,9
    327c:	14002936 	bltu	r2,r16,3324 <___vfprintf_internal_r+0x1464>
    3280:	d90018c4 	addi	r4,sp,99
    3284:	dd000f04 	addi	r20,sp,60
    3288:	d9014115 	stw	r4,1284(sp)
    328c:	d9014117 	ldw	r4,1284(sp)
    3290:	80800c04 	addi	r2,r16,48
    3294:	20800005 	stb	r2,0(r4)
    3298:	003da406 	br	292c <___vfprintf_internal_r+0xa6c>
    329c:	dc400d17 	ldw	r17,52(sp)
    32a0:	07000074 	movhi	fp,1
    32a4:	e708ce84 	addi	fp,fp,9018
    32a8:	9425883a 	add	r18,r18,r16
    32ac:	8c400044 	addi	r17,r17,1
    32b0:	008001c4 	movi	r2,7
    32b4:	1f000015 	stw	fp,0(r3)
    32b8:	1c000115 	stw	r16,4(r3)
    32bc:	dc800e15 	stw	r18,56(sp)
    32c0:	dc400d15 	stw	r17,52(sp)
    32c4:	147de216 	blt	r2,r17,2a50 <___vfprintf_internal_r+0xb90>
    32c8:	18c00204 	addi	r3,r3,8
    32cc:	003c7a06 	br	24b8 <___vfprintf_internal_r+0x5f8>
    32d0:	01000084 	movi	r4,2
    32d4:	d8000405 	stb	zero,16(sp)
    32d8:	003d8706 	br	28f8 <___vfprintf_internal_r+0xa38>
    32dc:	d9814c17 	ldw	r6,1328(sp)
    32e0:	30c4703a 	and	r2,r6,r3
    32e4:	1005003a 	cmpeq	r2,r2,zero
    32e8:	103cb926 	beq	r2,zero,25d0 <___vfprintf_internal_r+0x710>
    32ec:	d9014117 	ldw	r4,1284(sp)
    32f0:	94800044 	addi	r18,r18,1
    32f4:	8c400044 	addi	r17,r17,1
    32f8:	008001c4 	movi	r2,7
    32fc:	a9000015 	stw	r4,0(r21)
    3300:	a8c00115 	stw	r3,4(r21)
    3304:	dc800e15 	stw	r18,56(sp)
    3308:	dc400d15 	stw	r17,52(sp)
    330c:	147e6616 	blt	r2,r17,2ca8 <___vfprintf_internal_r+0xde8>
    3310:	acc00204 	addi	r19,r21,8
    3314:	003cd706 	br	2674 <___vfprintf_internal_r+0x7b4>
    3318:	07000074 	movhi	fp,1
    331c:	e708ce84 	addi	fp,fp,9018
    3320:	003c4f06 	br	2460 <___vfprintf_internal_r+0x5a0>
    3324:	dd000f04 	addi	r20,sp,60
    3328:	dc801904 	addi	r18,sp,100
    332c:	8009883a 	mov	r4,r16
    3330:	880b883a 	mov	r5,r17
    3334:	01800284 	movi	r6,10
    3338:	000f883a 	mov	r7,zero
    333c:	00094f40 	call	94f4 <__umoddi3>
    3340:	12000c04 	addi	r8,r2,48
    3344:	94bfffc4 	addi	r18,r18,-1
    3348:	8009883a 	mov	r4,r16
    334c:	880b883a 	mov	r5,r17
    3350:	01800284 	movi	r6,10
    3354:	000f883a 	mov	r7,zero
    3358:	92000005 	stb	r8,0(r18)
    335c:	0008f180 	call	8f18 <__udivdi3>
    3360:	1009883a 	mov	r4,r2
    3364:	1021883a 	mov	r16,r2
    3368:	18800068 	cmpgeui	r2,r3,1
    336c:	1823883a 	mov	r17,r3
    3370:	103fee1e 	bne	r2,zero,332c <___vfprintf_internal_r+0x146c>
    3374:	1800021e 	bne	r3,zero,3380 <___vfprintf_internal_r+0x14c0>
    3378:	00800244 	movi	r2,9
    337c:	113feb36 	bltu	r2,r4,332c <___vfprintf_internal_r+0x146c>
    3380:	94bfffc4 	addi	r18,r18,-1
    3384:	dc814115 	stw	r18,1284(sp)
    3388:	003fc006 	br	328c <___vfprintf_internal_r+0x13cc>
    338c:	d9014c17 	ldw	r4,1328(sp)
    3390:	2080004c 	andi	r2,r4,1
    3394:	10009a1e 	bne	r2,zero,3600 <___vfprintf_internal_r+0x1740>
    3398:	d9401904 	addi	r5,sp,100
    339c:	dd000f04 	addi	r20,sp,60
    33a0:	d9414115 	stw	r5,1284(sp)
    33a4:	003d6106 	br	292c <___vfprintf_internal_r+0xa6c>
    33a8:	d9014f17 	ldw	r4,1340(sp)
    33ac:	b00b883a 	mov	r5,r22
    33b0:	d9800c04 	addi	r6,sp,48
    33b4:	0001e680 	call	1e68 <__sprint_r>
    33b8:	103c791e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    33bc:	dc800e17 	ldw	r18,56(sp)
    33c0:	d8c01904 	addi	r3,sp,100
    33c4:	003cff06 	br	27c4 <___vfprintf_internal_r+0x904>
    33c8:	d8c14c17 	ldw	r3,1328(sp)
    33cc:	1880040c 	andi	r2,r3,16
    33d0:	1000711e 	bne	r2,zero,3598 <___vfprintf_internal_r+0x16d8>
    33d4:	d9014c17 	ldw	r4,1328(sp)
    33d8:	2080100c 	andi	r2,r4,64
    33dc:	10006e26 	beq	r2,zero,3598 <___vfprintf_internal_r+0x16d8>
    33e0:	3c00000b 	ldhu	r16,0(r7)
    33e4:	0023883a 	mov	r17,zero
    33e8:	39c00104 	addi	r7,r7,4
    33ec:	d9c14015 	stw	r7,1280(sp)
    33f0:	003f0006 	br	2ff4 <___vfprintf_internal_r+0x1134>
    33f4:	dc400d17 	ldw	r17,52(sp)
    33f8:	07000074 	movhi	fp,1
    33fc:	e708ce84 	addi	fp,fp,9018
    3400:	9425883a 	add	r18,r18,r16
    3404:	8c400044 	addi	r17,r17,1
    3408:	008001c4 	movi	r2,7
    340c:	1f000015 	stw	fp,0(r3)
    3410:	1c000115 	stw	r16,4(r3)
    3414:	dc800e15 	stw	r18,56(sp)
    3418:	dc400d15 	stw	r17,52(sp)
    341c:	147d7616 	blt	r2,r17,29f8 <___vfprintf_internal_r+0xb38>
    3420:	18c00204 	addi	r3,r3,8
    3424:	003d7b06 	br	2a14 <___vfprintf_internal_r+0xb54>
    3428:	dc800e17 	ldw	r18,56(sp)
    342c:	dc400d17 	ldw	r17,52(sp)
    3430:	07000074 	movhi	fp,1
    3434:	e708d284 	addi	fp,fp,9034
    3438:	003bc006 	br	233c <___vfprintf_internal_r+0x47c>
    343c:	d9014f17 	ldw	r4,1340(sp)
    3440:	b00b883a 	mov	r5,r22
    3444:	d9800c04 	addi	r6,sp,48
    3448:	0001e680 	call	1e68 <__sprint_r>
    344c:	103c541e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    3450:	dc800e17 	ldw	r18,56(sp)
    3454:	d8c01904 	addi	r3,sp,100
    3458:	003ce906 	br	2800 <___vfprintf_internal_r+0x940>
    345c:	3c000017 	ldw	r16,0(r7)
    3460:	0009883a 	mov	r4,zero
    3464:	39c00104 	addi	r7,r7,4
    3468:	0023883a 	mov	r17,zero
    346c:	d9c14015 	stw	r7,1280(sp)
    3470:	d8000405 	stb	zero,16(sp)
    3474:	003d2006 	br	28f8 <___vfprintf_internal_r+0xa38>
    3478:	38800017 	ldw	r2,0(r7)
    347c:	39c00104 	addi	r7,r7,4
    3480:	d9c14015 	stw	r7,1280(sp)
    3484:	1023d7fa 	srai	r17,r2,31
    3488:	1021883a 	mov	r16,r2
    348c:	003d1806 	br	28f0 <___vfprintf_internal_r+0xa30>
    3490:	3c000017 	ldw	r16,0(r7)
    3494:	01000044 	movi	r4,1
    3498:	39c00104 	addi	r7,r7,4
    349c:	0023883a 	mov	r17,zero
    34a0:	d9c14015 	stw	r7,1280(sp)
    34a4:	d8000405 	stb	zero,16(sp)
    34a8:	003d1306 	br	28f8 <___vfprintf_internal_r+0xa38>
    34ac:	00800074 	movhi	r2,1
    34b0:	1088ce04 	addi	r2,r2,9016
    34b4:	94800044 	addi	r18,r18,1
    34b8:	8c400044 	addi	r17,r17,1
    34bc:	a8800015 	stw	r2,0(r21)
    34c0:	00c00044 	movi	r3,1
    34c4:	008001c4 	movi	r2,7
    34c8:	a8c00115 	stw	r3,4(r21)
    34cc:	dc800e15 	stw	r18,56(sp)
    34d0:	dc400d15 	stw	r17,52(sp)
    34d4:	1440ca16 	blt	r2,r17,3800 <___vfprintf_internal_r+0x1940>
    34d8:	a8c00204 	addi	r3,r21,8
    34dc:	2000061e 	bne	r4,zero,34f8 <___vfprintf_internal_r+0x1638>
    34e0:	d9414717 	ldw	r5,1308(sp)
    34e4:	2800041e 	bne	r5,zero,34f8 <___vfprintf_internal_r+0x1638>
    34e8:	d9814c17 	ldw	r6,1328(sp)
    34ec:	3080004c 	andi	r2,r6,1
    34f0:	1005003a 	cmpeq	r2,r2,zero
    34f4:	103bf01e 	bne	r2,zero,24b8 <___vfprintf_internal_r+0x5f8>
    34f8:	00800044 	movi	r2,1
    34fc:	dc400d17 	ldw	r17,52(sp)
    3500:	18800115 	stw	r2,4(r3)
    3504:	d8814917 	ldw	r2,1316(sp)
    3508:	94800044 	addi	r18,r18,1
    350c:	8c400044 	addi	r17,r17,1
    3510:	18800015 	stw	r2,0(r3)
    3514:	008001c4 	movi	r2,7
    3518:	dc800e15 	stw	r18,56(sp)
    351c:	dc400d15 	stw	r17,52(sp)
    3520:	1440ca16 	blt	r2,r17,384c <___vfprintf_internal_r+0x198c>
    3524:	18c00204 	addi	r3,r3,8
    3528:	0121c83a 	sub	r16,zero,r4
    352c:	0400500e 	bge	zero,r16,3670 <___vfprintf_internal_r+0x17b0>
    3530:	00800404 	movi	r2,16
    3534:	1400800e 	bge	r2,r16,3738 <___vfprintf_internal_r+0x1878>
    3538:	1027883a 	mov	r19,r2
    353c:	07000074 	movhi	fp,1
    3540:	e708ce84 	addi	fp,fp,9018
    3544:	050001c4 	movi	r20,7
    3548:	00000306 	br	3558 <___vfprintf_internal_r+0x1698>
    354c:	18c00204 	addi	r3,r3,8
    3550:	843ffc04 	addi	r16,r16,-16
    3554:	9c007a0e 	bge	r19,r16,3740 <___vfprintf_internal_r+0x1880>
    3558:	94800404 	addi	r18,r18,16
    355c:	8c400044 	addi	r17,r17,1
    3560:	1f000015 	stw	fp,0(r3)
    3564:	1cc00115 	stw	r19,4(r3)
    3568:	dc800e15 	stw	r18,56(sp)
    356c:	dc400d15 	stw	r17,52(sp)
    3570:	a47ff60e 	bge	r20,r17,354c <___vfprintf_internal_r+0x168c>
    3574:	d9014f17 	ldw	r4,1340(sp)
    3578:	b00b883a 	mov	r5,r22
    357c:	d9800c04 	addi	r6,sp,48
    3580:	0001e680 	call	1e68 <__sprint_r>
    3584:	103c061e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    3588:	dc800e17 	ldw	r18,56(sp)
    358c:	dc400d17 	ldw	r17,52(sp)
    3590:	d8c01904 	addi	r3,sp,100
    3594:	003fee06 	br	3550 <___vfprintf_internal_r+0x1690>
    3598:	3c000017 	ldw	r16,0(r7)
    359c:	0023883a 	mov	r17,zero
    35a0:	39c00104 	addi	r7,r7,4
    35a4:	d9c14015 	stw	r7,1280(sp)
    35a8:	003e9206 	br	2ff4 <___vfprintf_internal_r+0x1134>
    35ac:	d9401904 	addi	r5,sp,100
    35b0:	dd000f04 	addi	r20,sp,60
    35b4:	d9414115 	stw	r5,1284(sp)
    35b8:	d9814417 	ldw	r6,1296(sp)
    35bc:	880a973a 	slli	r5,r17,28
    35c0:	8004d13a 	srli	r2,r16,4
    35c4:	810003cc 	andi	r4,r16,15
    35c8:	3109883a 	add	r4,r6,r4
    35cc:	2884b03a 	or	r2,r5,r2
    35d0:	21400003 	ldbu	r5,0(r4)
    35d4:	d9014117 	ldw	r4,1284(sp)
    35d8:	8806d13a 	srli	r3,r17,4
    35dc:	1021883a 	mov	r16,r2
    35e0:	213fffc4 	addi	r4,r4,-1
    35e4:	d9014115 	stw	r4,1284(sp)
    35e8:	d9814117 	ldw	r6,1284(sp)
    35ec:	10c8b03a 	or	r4,r2,r3
    35f0:	1823883a 	mov	r17,r3
    35f4:	31400005 	stb	r5,0(r6)
    35f8:	203fef1e 	bne	r4,zero,35b8 <___vfprintf_internal_r+0x16f8>
    35fc:	003ccb06 	br	292c <___vfprintf_internal_r+0xa6c>
    3600:	00800c04 	movi	r2,48
    3604:	d98018c4 	addi	r6,sp,99
    3608:	dd000f04 	addi	r20,sp,60
    360c:	d88018c5 	stb	r2,99(sp)
    3610:	d9814115 	stw	r6,1284(sp)
    3614:	003cc506 	br	292c <___vfprintf_internal_r+0xa6c>
    3618:	dc400d17 	ldw	r17,52(sp)
    361c:	07000074 	movhi	fp,1
    3620:	e708d284 	addi	fp,fp,9034
    3624:	003bc706 	br	2544 <___vfprintf_internal_r+0x684>
    3628:	d9414c17 	ldw	r5,1328(sp)
    362c:	2880040c 	andi	r2,r5,16
    3630:	10007c26 	beq	r2,zero,3824 <___vfprintf_internal_r+0x1964>
    3634:	38800017 	ldw	r2,0(r7)
    3638:	39c00104 	addi	r7,r7,4
    363c:	d9c14015 	stw	r7,1280(sp)
    3640:	d9814b17 	ldw	r6,1324(sp)
    3644:	d9c14017 	ldw	r7,1280(sp)
    3648:	11800015 	stw	r6,0(r2)
    364c:	003a7806 	br	2030 <___vfprintf_internal_r+0x170>
    3650:	d9014f17 	ldw	r4,1340(sp)
    3654:	b00b883a 	mov	r5,r22
    3658:	d9800c04 	addi	r6,sp,48
    365c:	0001e680 	call	1e68 <__sprint_r>
    3660:	103bcf1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    3664:	dc800e17 	ldw	r18,56(sp)
    3668:	dc400d17 	ldw	r17,52(sp)
    366c:	d8c01904 	addi	r3,sp,100
    3670:	d9014717 	ldw	r4,1308(sp)
    3674:	d9414117 	ldw	r5,1284(sp)
    3678:	8c400044 	addi	r17,r17,1
    367c:	9125883a 	add	r18,r18,r4
    3680:	008001c4 	movi	r2,7
    3684:	19400015 	stw	r5,0(r3)
    3688:	19000115 	stw	r4,4(r3)
    368c:	dc800e15 	stw	r18,56(sp)
    3690:	dc400d15 	stw	r17,52(sp)
    3694:	147cee16 	blt	r2,r17,2a50 <___vfprintf_internal_r+0xb90>
    3698:	18c00204 	addi	r3,r3,8
    369c:	003b8606 	br	24b8 <___vfprintf_internal_r+0x5f8>
    36a0:	38c00017 	ldw	r3,0(r7)
    36a4:	39000204 	addi	r4,r7,8
    36a8:	d9014015 	stw	r4,1280(sp)
    36ac:	d8c14215 	stw	r3,1288(sp)
    36b0:	39c00117 	ldw	r7,4(r7)
    36b4:	d9c14315 	stw	r7,1292(sp)
    36b8:	003e2006 	br	2f3c <___vfprintf_internal_r+0x107c>
    36bc:	0005883a 	mov	r2,zero
    36c0:	1409c83a 	sub	r4,r2,r16
    36c4:	1105803a 	cmpltu	r2,r2,r4
    36c8:	044bc83a 	sub	r5,zero,r17
    36cc:	2885c83a 	sub	r2,r5,r2
    36d0:	2021883a 	mov	r16,r4
    36d4:	1023883a 	mov	r17,r2
    36d8:	01000044 	movi	r4,1
    36dc:	00800b44 	movi	r2,45
    36e0:	d8800405 	stb	r2,16(sp)
    36e4:	003c8406 	br	28f8 <___vfprintf_internal_r+0xa38>
    36e8:	d9014f17 	ldw	r4,1340(sp)
    36ec:	b00b883a 	mov	r5,r22
    36f0:	d9800c04 	addi	r6,sp,48
    36f4:	0001e680 	call	1e68 <__sprint_r>
    36f8:	103ba91e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    36fc:	dc800e17 	ldw	r18,56(sp)
    3700:	dc400d17 	ldw	r17,52(sp)
    3704:	d9000517 	ldw	r4,20(sp)
    3708:	d9401904 	addi	r5,sp,100
    370c:	003da706 	br	2dac <___vfprintf_internal_r+0xeec>
    3710:	d9014f17 	ldw	r4,1340(sp)
    3714:	b00b883a 	mov	r5,r22
    3718:	d9800c04 	addi	r6,sp,48
    371c:	0001e680 	call	1e68 <__sprint_r>
    3720:	103b9f1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    3724:	dc800e17 	ldw	r18,56(sp)
    3728:	dc400d17 	ldw	r17,52(sp)
    372c:	d9000517 	ldw	r4,20(sp)
    3730:	d8c01904 	addi	r3,sp,100
    3734:	003d9106 	br	2d7c <___vfprintf_internal_r+0xebc>
    3738:	07000074 	movhi	fp,1
    373c:	e708ce84 	addi	fp,fp,9018
    3740:	9425883a 	add	r18,r18,r16
    3744:	8c400044 	addi	r17,r17,1
    3748:	008001c4 	movi	r2,7
    374c:	1f000015 	stw	fp,0(r3)
    3750:	1c000115 	stw	r16,4(r3)
    3754:	dc800e15 	stw	r18,56(sp)
    3758:	dc400d15 	stw	r17,52(sp)
    375c:	147fbc16 	blt	r2,r17,3650 <___vfprintf_internal_r+0x1790>
    3760:	18c00204 	addi	r3,r3,8
    3764:	003fc206 	br	3670 <___vfprintf_internal_r+0x17b0>
    3768:	d9014f17 	ldw	r4,1340(sp)
    376c:	b00b883a 	mov	r5,r22
    3770:	d9800c04 	addi	r6,sp,48
    3774:	0001e680 	call	1e68 <__sprint_r>
    3778:	103b891e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    377c:	dc800e17 	ldw	r18,56(sp)
    3780:	d9000517 	ldw	r4,20(sp)
    3784:	d8c01904 	addi	r3,sp,100
    3788:	003d0206 	br	2b94 <___vfprintf_internal_r+0xcd4>
    378c:	07000074 	movhi	fp,1
    3790:	e708ce84 	addi	fp,fp,9018
    3794:	003be406 	br	2728 <___vfprintf_internal_r+0x868>
    3798:	00800074 	movhi	r2,1
    379c:	1088bd04 	addi	r2,r2,8948
    37a0:	d8814115 	stw	r2,1284(sp)
    37a4:	003df506 	br	2f7c <___vfprintf_internal_r+0x10bc>
    37a8:	d9014217 	ldw	r4,1288(sp)
    37ac:	d9414317 	ldw	r5,1292(sp)
    37b0:	00087680 	call	8768 <__isnand>
    37b4:	10003926 	beq	r2,zero,389c <___vfprintf_internal_r+0x19dc>
    37b8:	d9414d17 	ldw	r5,1332(sp)
    37bc:	008011c4 	movi	r2,71
    37c0:	1140ce16 	blt	r2,r5,3afc <___vfprintf_internal_r+0x1c3c>
    37c4:	01800074 	movhi	r6,1
    37c8:	3188be04 	addi	r6,r6,8952
    37cc:	d9814115 	stw	r6,1284(sp)
    37d0:	003dea06 	br	2f7c <___vfprintf_internal_r+0x10bc>
    37d4:	d9014c17 	ldw	r4,1328(sp)
    37d8:	bdc00044 	addi	r23,r23,1
    37dc:	b8c00007 	ldb	r3,0(r23)
    37e0:	21000814 	ori	r4,r4,32
    37e4:	d9014c15 	stw	r4,1328(sp)
    37e8:	003a3406 	br	20bc <___vfprintf_internal_r+0x1fc>
    37ec:	dcc14515 	stw	r19,1300(sp)
    37f0:	98011016 	blt	r19,zero,3c34 <___vfprintf_internal_r+0x1d74>
    37f4:	980f883a 	mov	r7,r19
    37f8:	d8014615 	stw	zero,1304(sp)
    37fc:	003c5206 	br	2948 <___vfprintf_internal_r+0xa88>
    3800:	d9014f17 	ldw	r4,1340(sp)
    3804:	b00b883a 	mov	r5,r22
    3808:	d9800c04 	addi	r6,sp,48
    380c:	0001e680 	call	1e68 <__sprint_r>
    3810:	103b631e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    3814:	dc800e17 	ldw	r18,56(sp)
    3818:	d9000517 	ldw	r4,20(sp)
    381c:	d8c01904 	addi	r3,sp,100
    3820:	003f2e06 	br	34dc <___vfprintf_internal_r+0x161c>
    3824:	d8c14c17 	ldw	r3,1328(sp)
    3828:	1880100c 	andi	r2,r3,64
    382c:	1000a026 	beq	r2,zero,3ab0 <___vfprintf_internal_r+0x1bf0>
    3830:	38800017 	ldw	r2,0(r7)
    3834:	39c00104 	addi	r7,r7,4
    3838:	d9c14015 	stw	r7,1280(sp)
    383c:	d9014b17 	ldw	r4,1324(sp)
    3840:	d9c14017 	ldw	r7,1280(sp)
    3844:	1100000d 	sth	r4,0(r2)
    3848:	0039f906 	br	2030 <___vfprintf_internal_r+0x170>
    384c:	d9014f17 	ldw	r4,1340(sp)
    3850:	b00b883a 	mov	r5,r22
    3854:	d9800c04 	addi	r6,sp,48
    3858:	0001e680 	call	1e68 <__sprint_r>
    385c:	103b501e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    3860:	dc800e17 	ldw	r18,56(sp)
    3864:	dc400d17 	ldw	r17,52(sp)
    3868:	d9000517 	ldw	r4,20(sp)
    386c:	d8c01904 	addi	r3,sp,100
    3870:	003f2d06 	br	3528 <___vfprintf_internal_r+0x1668>
    3874:	00800184 	movi	r2,6
    3878:	14c09a36 	bltu	r2,r19,3ae4 <___vfprintf_internal_r+0x1c24>
    387c:	dcc14515 	stw	r19,1300(sp)
    3880:	9800010e 	bge	r19,zero,3888 <___vfprintf_internal_r+0x19c8>
    3884:	d8014515 	stw	zero,1300(sp)
    3888:	00800074 	movhi	r2,1
    388c:	1088c004 	addi	r2,r2,8960
    3890:	980f883a 	mov	r7,r19
    3894:	d8814115 	stw	r2,1284(sp)
    3898:	003a7806 	br	227c <___vfprintf_internal_r+0x3bc>
    389c:	00bfffc4 	movi	r2,-1
    38a0:	9880e226 	beq	r19,r2,3c2c <___vfprintf_internal_r+0x1d6c>
    38a4:	d9414d17 	ldw	r5,1332(sp)
    38a8:	008019c4 	movi	r2,103
    38ac:	2880dc26 	beq	r5,r2,3c20 <___vfprintf_internal_r+0x1d60>
    38b0:	008011c4 	movi	r2,71
    38b4:	2880da26 	beq	r5,r2,3c20 <___vfprintf_internal_r+0x1d60>
    38b8:	d9414c17 	ldw	r5,1328(sp)
    38bc:	d9014317 	ldw	r4,1292(sp)
    38c0:	d9814217 	ldw	r6,1288(sp)
    38c4:	29404014 	ori	r5,r5,256
    38c8:	d9414c15 	stw	r5,1328(sp)
    38cc:	2000cc16 	blt	r4,zero,3c00 <___vfprintf_internal_r+0x1d40>
    38d0:	3021883a 	mov	r16,r6
    38d4:	2023883a 	mov	r17,r4
    38d8:	0039883a 	mov	fp,zero
    38dc:	d9414d17 	ldw	r5,1332(sp)
    38e0:	00801984 	movi	r2,102
    38e4:	2880b726 	beq	r5,r2,3bc4 <___vfprintf_internal_r+0x1d04>
    38e8:	00801184 	movi	r2,70
    38ec:	2880b526 	beq	r5,r2,3bc4 <___vfprintf_internal_r+0x1d04>
    38f0:	00801944 	movi	r2,101
    38f4:	2880c826 	beq	r5,r2,3c18 <___vfprintf_internal_r+0x1d58>
    38f8:	00801144 	movi	r2,69
    38fc:	2880c626 	beq	r5,r2,3c18 <___vfprintf_internal_r+0x1d58>
    3900:	9829883a 	mov	r20,r19
    3904:	d9014f17 	ldw	r4,1340(sp)
    3908:	d8800504 	addi	r2,sp,20
    390c:	880d883a 	mov	r6,r17
    3910:	d8800115 	stw	r2,4(sp)
    3914:	d8c00604 	addi	r3,sp,24
    3918:	d8800704 	addi	r2,sp,28
    391c:	800b883a 	mov	r5,r16
    3920:	01c00084 	movi	r7,2
    3924:	d8c00215 	stw	r3,8(sp)
    3928:	d8800315 	stw	r2,12(sp)
    392c:	dd000015 	stw	r20,0(sp)
    3930:	00040e40 	call	40e4 <_dtoa_r>
    3934:	d9814d17 	ldw	r6,1332(sp)
    3938:	d8814115 	stw	r2,1284(sp)
    393c:	008019c4 	movi	r2,103
    3940:	30809526 	beq	r6,r2,3b98 <___vfprintf_internal_r+0x1cd8>
    3944:	d8c14d17 	ldw	r3,1332(sp)
    3948:	008011c4 	movi	r2,71
    394c:	18809226 	beq	r3,r2,3b98 <___vfprintf_internal_r+0x1cd8>
    3950:	d9414117 	ldw	r5,1284(sp)
    3954:	d9814d17 	ldw	r6,1332(sp)
    3958:	00801984 	movi	r2,102
    395c:	2d25883a 	add	r18,r5,r20
    3960:	30808626 	beq	r6,r2,3b7c <___vfprintf_internal_r+0x1cbc>
    3964:	00801184 	movi	r2,70
    3968:	30808426 	beq	r6,r2,3b7c <___vfprintf_internal_r+0x1cbc>
    396c:	000d883a 	mov	r6,zero
    3970:	000f883a 	mov	r7,zero
    3974:	880b883a 	mov	r5,r17
    3978:	8009883a 	mov	r4,r16
    397c:	000a5c40 	call	a5c4 <__eqdf2>
    3980:	1000751e 	bne	r2,zero,3b58 <___vfprintf_internal_r+0x1c98>
    3984:	9005883a 	mov	r2,r18
    3988:	dc800715 	stw	r18,28(sp)
    398c:	d9014117 	ldw	r4,1284(sp)
    3990:	d9414d17 	ldw	r5,1332(sp)
    3994:	00c019c4 	movi	r3,103
    3998:	1125c83a 	sub	r18,r2,r4
    399c:	28c06826 	beq	r5,r3,3b40 <___vfprintf_internal_r+0x1c80>
    39a0:	008011c4 	movi	r2,71
    39a4:	28806626 	beq	r5,r2,3b40 <___vfprintf_internal_r+0x1c80>
    39a8:	d9000517 	ldw	r4,20(sp)
    39ac:	d8c14d17 	ldw	r3,1332(sp)
    39b0:	00801944 	movi	r2,101
    39b4:	10c05516 	blt	r2,r3,3b0c <___vfprintf_internal_r+0x1c4c>
    39b8:	213fffc4 	addi	r4,r4,-1
    39bc:	d9000515 	stw	r4,20(sp)
    39c0:	d8c00805 	stb	r3,32(sp)
    39c4:	2021883a 	mov	r16,r4
    39c8:	2000c116 	blt	r4,zero,3cd0 <___vfprintf_internal_r+0x1e10>
    39cc:	00800ac4 	movi	r2,43
    39d0:	d8800845 	stb	r2,33(sp)
    39d4:	00800244 	movi	r2,9
    39d8:	1400af0e 	bge	r2,r16,3c98 <___vfprintf_internal_r+0x1dd8>
    39dc:	1027883a 	mov	r19,r2
    39e0:	dc400b84 	addi	r17,sp,46
    39e4:	8009883a 	mov	r4,r16
    39e8:	01400284 	movi	r5,10
    39ec:	000acac0 	call	acac <__modsi3>
    39f0:	10800c04 	addi	r2,r2,48
    39f4:	8c7fffc4 	addi	r17,r17,-1
    39f8:	8009883a 	mov	r4,r16
    39fc:	01400284 	movi	r5,10
    3a00:	88800005 	stb	r2,0(r17)
    3a04:	000ac4c0 	call	ac4c <__divsi3>
    3a08:	1021883a 	mov	r16,r2
    3a0c:	98bff516 	blt	r19,r2,39e4 <___vfprintf_internal_r+0x1b24>
    3a10:	10c00c04 	addi	r3,r2,48
    3a14:	d88009c4 	addi	r2,sp,39
    3a18:	108001c4 	addi	r2,r2,7
    3a1c:	897fffc4 	addi	r5,r17,-1
    3a20:	88ffffc5 	stb	r3,-1(r17)
    3a24:	2880a72e 	bgeu	r5,r2,3cc4 <___vfprintf_internal_r+0x1e04>
    3a28:	1009883a 	mov	r4,r2
    3a2c:	d9800804 	addi	r6,sp,32
    3a30:	d8c00884 	addi	r3,sp,34
    3a34:	28800003 	ldbu	r2,0(r5)
    3a38:	29400044 	addi	r5,r5,1
    3a3c:	18800005 	stb	r2,0(r3)
    3a40:	18c00044 	addi	r3,r3,1
    3a44:	293ffb36 	bltu	r5,r4,3a34 <___vfprintf_internal_r+0x1b74>
    3a48:	1987c83a 	sub	r3,r3,r6
    3a4c:	00800044 	movi	r2,1
    3a50:	d8c14815 	stw	r3,1312(sp)
    3a54:	90cf883a 	add	r7,r18,r3
    3a58:	1480960e 	bge	r2,r18,3cb4 <___vfprintf_internal_r+0x1df4>
    3a5c:	39c00044 	addi	r7,r7,1
    3a60:	d9c14515 	stw	r7,1300(sp)
    3a64:	38003416 	blt	r7,zero,3b38 <___vfprintf_internal_r+0x1c78>
    3a68:	e0803fcc 	andi	r2,fp,255
    3a6c:	1080201c 	xori	r2,r2,128
    3a70:	10bfe004 	addi	r2,r2,-128
    3a74:	10004e26 	beq	r2,zero,3bb0 <___vfprintf_internal_r+0x1cf0>
    3a78:	00800b44 	movi	r2,45
    3a7c:	dc814715 	stw	r18,1308(sp)
    3a80:	d8014615 	stw	zero,1304(sp)
    3a84:	d8800405 	stb	r2,16(sp)
    3a88:	003bb106 	br	2950 <___vfprintf_internal_r+0xa90>
    3a8c:	00800b44 	movi	r2,45
    3a90:	d8800405 	stb	r2,16(sp)
    3a94:	003d3306 	br	2f64 <___vfprintf_internal_r+0x10a4>
    3a98:	d9014f17 	ldw	r4,1340(sp)
    3a9c:	b00b883a 	mov	r5,r22
    3aa0:	d9800c04 	addi	r6,sp,48
    3aa4:	0001e680 	call	1e68 <__sprint_r>
    3aa8:	103abd1e 	bne	r2,zero,25a0 <___vfprintf_internal_r+0x6e0>
    3aac:	003abb06 	br	259c <___vfprintf_internal_r+0x6dc>
    3ab0:	38800017 	ldw	r2,0(r7)
    3ab4:	39c00104 	addi	r7,r7,4
    3ab8:	d9c14015 	stw	r7,1280(sp)
    3abc:	d9414b17 	ldw	r5,1324(sp)
    3ac0:	d9c14017 	ldw	r7,1280(sp)
    3ac4:	11400015 	stw	r5,0(r2)
    3ac8:	00395906 	br	2030 <___vfprintf_internal_r+0x170>
    3acc:	980f883a 	mov	r7,r19
    3ad0:	dcc14515 	stw	r19,1300(sp)
    3ad4:	d8014615 	stw	zero,1304(sp)
    3ad8:	003b9b06 	br	2948 <___vfprintf_internal_r+0xa88>
    3adc:	0027883a 	mov	r19,zero
    3ae0:	00397806 	br	20c4 <___vfprintf_internal_r+0x204>
    3ae4:	00c00074 	movhi	r3,1
    3ae8:	18c8c004 	addi	r3,r3,8960
    3aec:	100f883a 	mov	r7,r2
    3af0:	d8814515 	stw	r2,1300(sp)
    3af4:	d8c14115 	stw	r3,1284(sp)
    3af8:	0039e006 	br	227c <___vfprintf_internal_r+0x3bc>
    3afc:	00800074 	movhi	r2,1
    3b00:	1088bf04 	addi	r2,r2,8956
    3b04:	d8814115 	stw	r2,1284(sp)
    3b08:	003d1c06 	br	2f7c <___vfprintf_internal_r+0x10bc>
    3b0c:	d9414d17 	ldw	r5,1332(sp)
    3b10:	00801984 	movi	r2,102
    3b14:	28804926 	beq	r5,r2,3c3c <___vfprintf_internal_r+0x1d7c>
    3b18:	200f883a 	mov	r7,r4
    3b1c:	24805716 	blt	r4,r18,3c7c <___vfprintf_internal_r+0x1dbc>
    3b20:	d9414c17 	ldw	r5,1328(sp)
    3b24:	2880004c 	andi	r2,r5,1
    3b28:	10000126 	beq	r2,zero,3b30 <___vfprintf_internal_r+0x1c70>
    3b2c:	21c00044 	addi	r7,r4,1
    3b30:	d9c14515 	stw	r7,1300(sp)
    3b34:	383fcc0e 	bge	r7,zero,3a68 <___vfprintf_internal_r+0x1ba8>
    3b38:	d8014515 	stw	zero,1300(sp)
    3b3c:	003fca06 	br	3a68 <___vfprintf_internal_r+0x1ba8>
    3b40:	d9000517 	ldw	r4,20(sp)
    3b44:	00bfff04 	movi	r2,-4
    3b48:	1100480e 	bge	r2,r4,3c6c <___vfprintf_internal_r+0x1dac>
    3b4c:	99004716 	blt	r19,r4,3c6c <___vfprintf_internal_r+0x1dac>
    3b50:	d8c14d15 	stw	r3,1332(sp)
    3b54:	003ff006 	br	3b18 <___vfprintf_internal_r+0x1c58>
    3b58:	d8800717 	ldw	r2,28(sp)
    3b5c:	14bf8b2e 	bgeu	r2,r18,398c <___vfprintf_internal_r+0x1acc>
    3b60:	9007883a 	mov	r3,r18
    3b64:	01000c04 	movi	r4,48
    3b68:	11000005 	stb	r4,0(r2)
    3b6c:	10800044 	addi	r2,r2,1
    3b70:	d8800715 	stw	r2,28(sp)
    3b74:	18bffc1e 	bne	r3,r2,3b68 <___vfprintf_internal_r+0x1ca8>
    3b78:	003f8406 	br	398c <___vfprintf_internal_r+0x1acc>
    3b7c:	d8814117 	ldw	r2,1284(sp)
    3b80:	10c00007 	ldb	r3,0(r2)
    3b84:	00800c04 	movi	r2,48
    3b88:	18805b26 	beq	r3,r2,3cf8 <___vfprintf_internal_r+0x1e38>
    3b8c:	d9000517 	ldw	r4,20(sp)
    3b90:	9125883a 	add	r18,r18,r4
    3b94:	003f7506 	br	396c <___vfprintf_internal_r+0x1aac>
    3b98:	d9014c17 	ldw	r4,1328(sp)
    3b9c:	2080004c 	andi	r2,r4,1
    3ba0:	1005003a 	cmpeq	r2,r2,zero
    3ba4:	103f6a26 	beq	r2,zero,3950 <___vfprintf_internal_r+0x1a90>
    3ba8:	d8800717 	ldw	r2,28(sp)
    3bac:	003f7706 	br	398c <___vfprintf_internal_r+0x1acc>
    3bb0:	d9c14515 	stw	r7,1300(sp)
    3bb4:	38004d16 	blt	r7,zero,3cec <___vfprintf_internal_r+0x1e2c>
    3bb8:	dc814715 	stw	r18,1308(sp)
    3bbc:	d8014615 	stw	zero,1304(sp)
    3bc0:	003b6106 	br	2948 <___vfprintf_internal_r+0xa88>
    3bc4:	d9014f17 	ldw	r4,1340(sp)
    3bc8:	d8800504 	addi	r2,sp,20
    3bcc:	d8800115 	stw	r2,4(sp)
    3bd0:	d8c00604 	addi	r3,sp,24
    3bd4:	d8800704 	addi	r2,sp,28
    3bd8:	800b883a 	mov	r5,r16
    3bdc:	880d883a 	mov	r6,r17
    3be0:	01c000c4 	movi	r7,3
    3be4:	d8c00215 	stw	r3,8(sp)
    3be8:	d8800315 	stw	r2,12(sp)
    3bec:	dcc00015 	stw	r19,0(sp)
    3bf0:	9829883a 	mov	r20,r19
    3bf4:	00040e40 	call	40e4 <_dtoa_r>
    3bf8:	d8814115 	stw	r2,1284(sp)
    3bfc:	003f5106 	br	3944 <___vfprintf_internal_r+0x1a84>
    3c00:	d8c14217 	ldw	r3,1288(sp)
    3c04:	d9014317 	ldw	r4,1292(sp)
    3c08:	07000b44 	movi	fp,45
    3c0c:	1821883a 	mov	r16,r3
    3c10:	2460003c 	xorhi	r17,r4,32768
    3c14:	003f3106 	br	38dc <___vfprintf_internal_r+0x1a1c>
    3c18:	9d000044 	addi	r20,r19,1
    3c1c:	003f3906 	br	3904 <___vfprintf_internal_r+0x1a44>
    3c20:	983f251e 	bne	r19,zero,38b8 <___vfprintf_internal_r+0x19f8>
    3c24:	04c00044 	movi	r19,1
    3c28:	003f2306 	br	38b8 <___vfprintf_internal_r+0x19f8>
    3c2c:	04c00184 	movi	r19,6
    3c30:	003f2106 	br	38b8 <___vfprintf_internal_r+0x19f8>
    3c34:	d8014515 	stw	zero,1300(sp)
    3c38:	003eee06 	br	37f4 <___vfprintf_internal_r+0x1934>
    3c3c:	200f883a 	mov	r7,r4
    3c40:	0100370e 	bge	zero,r4,3d20 <___vfprintf_internal_r+0x1e60>
    3c44:	9800031e 	bne	r19,zero,3c54 <___vfprintf_internal_r+0x1d94>
    3c48:	d9814c17 	ldw	r6,1328(sp)
    3c4c:	3080004c 	andi	r2,r6,1
    3c50:	103fb726 	beq	r2,zero,3b30 <___vfprintf_internal_r+0x1c70>
    3c54:	20800044 	addi	r2,r4,1
    3c58:	98a7883a 	add	r19,r19,r2
    3c5c:	dcc14515 	stw	r19,1300(sp)
    3c60:	980f883a 	mov	r7,r19
    3c64:	983f800e 	bge	r19,zero,3a68 <___vfprintf_internal_r+0x1ba8>
    3c68:	003fb306 	br	3b38 <___vfprintf_internal_r+0x1c78>
    3c6c:	d9814d17 	ldw	r6,1332(sp)
    3c70:	31bfff84 	addi	r6,r6,-2
    3c74:	d9814d15 	stw	r6,1332(sp)
    3c78:	003f4c06 	br	39ac <___vfprintf_internal_r+0x1aec>
    3c7c:	0100180e 	bge	zero,r4,3ce0 <___vfprintf_internal_r+0x1e20>
    3c80:	00800044 	movi	r2,1
    3c84:	1485883a 	add	r2,r2,r18
    3c88:	d8814515 	stw	r2,1300(sp)
    3c8c:	100f883a 	mov	r7,r2
    3c90:	103f750e 	bge	r2,zero,3a68 <___vfprintf_internal_r+0x1ba8>
    3c94:	003fa806 	br	3b38 <___vfprintf_internal_r+0x1c78>
    3c98:	80c00c04 	addi	r3,r16,48
    3c9c:	00800c04 	movi	r2,48
    3ca0:	d8c008c5 	stb	r3,35(sp)
    3ca4:	d9800804 	addi	r6,sp,32
    3ca8:	d8c00904 	addi	r3,sp,36
    3cac:	d8800885 	stb	r2,34(sp)
    3cb0:	003f6506 	br	3a48 <___vfprintf_internal_r+0x1b88>
    3cb4:	d9014c17 	ldw	r4,1328(sp)
    3cb8:	2084703a 	and	r2,r4,r2
    3cbc:	103f9c26 	beq	r2,zero,3b30 <___vfprintf_internal_r+0x1c70>
    3cc0:	003f6606 	br	3a5c <___vfprintf_internal_r+0x1b9c>
    3cc4:	d9800804 	addi	r6,sp,32
    3cc8:	d8c00884 	addi	r3,sp,34
    3ccc:	003f5e06 	br	3a48 <___vfprintf_internal_r+0x1b88>
    3cd0:	00800b44 	movi	r2,45
    3cd4:	0121c83a 	sub	r16,zero,r4
    3cd8:	d8800845 	stb	r2,33(sp)
    3cdc:	003f3d06 	br	39d4 <___vfprintf_internal_r+0x1b14>
    3ce0:	00800084 	movi	r2,2
    3ce4:	1105c83a 	sub	r2,r2,r4
    3ce8:	003fe606 	br	3c84 <___vfprintf_internal_r+0x1dc4>
    3cec:	d8014515 	stw	zero,1300(sp)
    3cf0:	dc814715 	stw	r18,1308(sp)
    3cf4:	003fb106 	br	3bbc <___vfprintf_internal_r+0x1cfc>
    3cf8:	000d883a 	mov	r6,zero
    3cfc:	000f883a 	mov	r7,zero
    3d00:	8009883a 	mov	r4,r16
    3d04:	880b883a 	mov	r5,r17
    3d08:	000a64c0 	call	a64c <__nedf2>
    3d0c:	103f9f26 	beq	r2,zero,3b8c <___vfprintf_internal_r+0x1ccc>
    3d10:	00800044 	movi	r2,1
    3d14:	1509c83a 	sub	r4,r2,r20
    3d18:	d9000515 	stw	r4,20(sp)
    3d1c:	003f9b06 	br	3b8c <___vfprintf_internal_r+0x1ccc>
    3d20:	98000d1e 	bne	r19,zero,3d58 <___vfprintf_internal_r+0x1e98>
    3d24:	d8c14c17 	ldw	r3,1328(sp)
    3d28:	1880004c 	andi	r2,r3,1
    3d2c:	10000a1e 	bne	r2,zero,3d58 <___vfprintf_internal_r+0x1e98>
    3d30:	01000044 	movi	r4,1
    3d34:	200f883a 	mov	r7,r4
    3d38:	d9014515 	stw	r4,1300(sp)
    3d3c:	003f4a06 	br	3a68 <___vfprintf_internal_r+0x1ba8>
    3d40:	3cc00017 	ldw	r19,0(r7)
    3d44:	39c00104 	addi	r7,r7,4
    3d48:	983d0e0e 	bge	r19,zero,3184 <___vfprintf_internal_r+0x12c4>
    3d4c:	b8c00007 	ldb	r3,0(r23)
    3d50:	04ffffc4 	movi	r19,-1
    3d54:	0038d906 	br	20bc <___vfprintf_internal_r+0x1fc>
    3d58:	9cc00084 	addi	r19,r19,2
    3d5c:	dcc14515 	stw	r19,1300(sp)
    3d60:	980f883a 	mov	r7,r19
    3d64:	983f400e 	bge	r19,zero,3a68 <___vfprintf_internal_r+0x1ba8>
    3d68:	003f7306 	br	3b38 <___vfprintf_internal_r+0x1c78>

00003d6c <__vfprintf_internal>:
    3d6c:	00800074 	movhi	r2,1
    3d70:	10919b04 	addi	r2,r2,18028
    3d74:	2013883a 	mov	r9,r4
    3d78:	11000017 	ldw	r4,0(r2)
    3d7c:	2805883a 	mov	r2,r5
    3d80:	300f883a 	mov	r7,r6
    3d84:	480b883a 	mov	r5,r9
    3d88:	100d883a 	mov	r6,r2
    3d8c:	0001ec01 	jmpi	1ec0 <___vfprintf_internal_r>

00003d90 <__swsetup_r>:
    3d90:	00800074 	movhi	r2,1
    3d94:	10919b04 	addi	r2,r2,18028
    3d98:	10c00017 	ldw	r3,0(r2)
    3d9c:	defffd04 	addi	sp,sp,-12
    3da0:	dc400115 	stw	r17,4(sp)
    3da4:	dc000015 	stw	r16,0(sp)
    3da8:	dfc00215 	stw	ra,8(sp)
    3dac:	2023883a 	mov	r17,r4
    3db0:	2821883a 	mov	r16,r5
    3db4:	18000226 	beq	r3,zero,3dc0 <__swsetup_r+0x30>
    3db8:	18800e17 	ldw	r2,56(r3)
    3dbc:	10001f26 	beq	r2,zero,3e3c <__swsetup_r+0xac>
    3dc0:	8100030b 	ldhu	r4,12(r16)
    3dc4:	2080020c 	andi	r2,r4,8
    3dc8:	10002826 	beq	r2,zero,3e6c <__swsetup_r+0xdc>
    3dcc:	81400417 	ldw	r5,16(r16)
    3dd0:	28001d26 	beq	r5,zero,3e48 <__swsetup_r+0xb8>
    3dd4:	2080004c 	andi	r2,r4,1
    3dd8:	1005003a 	cmpeq	r2,r2,zero
    3ddc:	10000b26 	beq	r2,zero,3e0c <__swsetup_r+0x7c>
    3de0:	2080008c 	andi	r2,r4,2
    3de4:	10001226 	beq	r2,zero,3e30 <__swsetup_r+0xa0>
    3de8:	0005883a 	mov	r2,zero
    3dec:	80800215 	stw	r2,8(r16)
    3df0:	28000b26 	beq	r5,zero,3e20 <__swsetup_r+0x90>
    3df4:	0005883a 	mov	r2,zero
    3df8:	dfc00217 	ldw	ra,8(sp)
    3dfc:	dc400117 	ldw	r17,4(sp)
    3e00:	dc000017 	ldw	r16,0(sp)
    3e04:	dec00304 	addi	sp,sp,12
    3e08:	f800283a 	ret
    3e0c:	80800517 	ldw	r2,20(r16)
    3e10:	80000215 	stw	zero,8(r16)
    3e14:	0085c83a 	sub	r2,zero,r2
    3e18:	80800615 	stw	r2,24(r16)
    3e1c:	283ff51e 	bne	r5,zero,3df4 <__swsetup_r+0x64>
    3e20:	2080200c 	andi	r2,r4,128
    3e24:	103ff326 	beq	r2,zero,3df4 <__swsetup_r+0x64>
    3e28:	00bfffc4 	movi	r2,-1
    3e2c:	003ff206 	br	3df8 <__swsetup_r+0x68>
    3e30:	80800517 	ldw	r2,20(r16)
    3e34:	80800215 	stw	r2,8(r16)
    3e38:	003fed06 	br	3df0 <__swsetup_r+0x60>
    3e3c:	1809883a 	mov	r4,r3
    3e40:	00059300 	call	5930 <__sinit>
    3e44:	003fde06 	br	3dc0 <__swsetup_r+0x30>
    3e48:	20c0a00c 	andi	r3,r4,640
    3e4c:	00808004 	movi	r2,512
    3e50:	18bfe026 	beq	r3,r2,3dd4 <__swsetup_r+0x44>
    3e54:	8809883a 	mov	r4,r17
    3e58:	800b883a 	mov	r5,r16
    3e5c:	00066a80 	call	66a8 <__smakebuf_r>
    3e60:	8100030b 	ldhu	r4,12(r16)
    3e64:	81400417 	ldw	r5,16(r16)
    3e68:	003fda06 	br	3dd4 <__swsetup_r+0x44>
    3e6c:	2080040c 	andi	r2,r4,16
    3e70:	103fed26 	beq	r2,zero,3e28 <__swsetup_r+0x98>
    3e74:	2080010c 	andi	r2,r4,4
    3e78:	10001226 	beq	r2,zero,3ec4 <__swsetup_r+0x134>
    3e7c:	81400c17 	ldw	r5,48(r16)
    3e80:	28000526 	beq	r5,zero,3e98 <__swsetup_r+0x108>
    3e84:	80801004 	addi	r2,r16,64
    3e88:	28800226 	beq	r5,r2,3e94 <__swsetup_r+0x104>
    3e8c:	8809883a 	mov	r4,r17
    3e90:	0005cb40 	call	5cb4 <_free_r>
    3e94:	80000c15 	stw	zero,48(r16)
    3e98:	8080030b 	ldhu	r2,12(r16)
    3e9c:	81400417 	ldw	r5,16(r16)
    3ea0:	80000115 	stw	zero,4(r16)
    3ea4:	10bff6cc 	andi	r2,r2,65499
    3ea8:	8080030d 	sth	r2,12(r16)
    3eac:	81400015 	stw	r5,0(r16)
    3eb0:	8080030b 	ldhu	r2,12(r16)
    3eb4:	10800214 	ori	r2,r2,8
    3eb8:	113fffcc 	andi	r4,r2,65535
    3ebc:	8080030d 	sth	r2,12(r16)
    3ec0:	003fc306 	br	3dd0 <__swsetup_r+0x40>
    3ec4:	81400417 	ldw	r5,16(r16)
    3ec8:	003ff906 	br	3eb0 <__swsetup_r+0x120>

00003ecc <quorem>:
    3ecc:	28c00417 	ldw	r3,16(r5)
    3ed0:	20800417 	ldw	r2,16(r4)
    3ed4:	defff604 	addi	sp,sp,-40
    3ed8:	ddc00715 	stw	r23,28(sp)
    3edc:	dd400515 	stw	r21,20(sp)
    3ee0:	dfc00915 	stw	ra,36(sp)
    3ee4:	df000815 	stw	fp,32(sp)
    3ee8:	dd800615 	stw	r22,24(sp)
    3eec:	dd000415 	stw	r20,16(sp)
    3ef0:	dcc00315 	stw	r19,12(sp)
    3ef4:	dc800215 	stw	r18,8(sp)
    3ef8:	dc400115 	stw	r17,4(sp)
    3efc:	dc000015 	stw	r16,0(sp)
    3f00:	202f883a 	mov	r23,r4
    3f04:	282b883a 	mov	r21,r5
    3f08:	10c07416 	blt	r2,r3,40dc <quorem+0x210>
    3f0c:	1c7fffc4 	addi	r17,r3,-1
    3f10:	8c45883a 	add	r2,r17,r17
    3f14:	1085883a 	add	r2,r2,r2
    3f18:	2c000504 	addi	r16,r5,20
    3f1c:	24c00504 	addi	r19,r4,20
    3f20:	14ed883a 	add	r22,r2,r19
    3f24:	80a5883a 	add	r18,r16,r2
    3f28:	b7000017 	ldw	fp,0(r22)
    3f2c:	91400017 	ldw	r5,0(r18)
    3f30:	e009883a 	mov	r4,fp
    3f34:	29400044 	addi	r5,r5,1
    3f38:	000ad0c0 	call	ad0c <__udivsi3>
    3f3c:	1029883a 	mov	r20,r2
    3f40:	10003c1e 	bne	r2,zero,4034 <quorem+0x168>
    3f44:	a80b883a 	mov	r5,r21
    3f48:	b809883a 	mov	r4,r23
    3f4c:	000729c0 	call	729c <__mcmp>
    3f50:	10002b16 	blt	r2,zero,4000 <quorem+0x134>
    3f54:	a5000044 	addi	r20,r20,1
    3f58:	980f883a 	mov	r7,r19
    3f5c:	0011883a 	mov	r8,zero
    3f60:	0009883a 	mov	r4,zero
    3f64:	81400017 	ldw	r5,0(r16)
    3f68:	38c00017 	ldw	r3,0(r7)
    3f6c:	84000104 	addi	r16,r16,4
    3f70:	28bfffcc 	andi	r2,r5,65535
    3f74:	2085883a 	add	r2,r4,r2
    3f78:	11bfffcc 	andi	r6,r2,65535
    3f7c:	193fffcc 	andi	r4,r3,65535
    3f80:	1004d43a 	srli	r2,r2,16
    3f84:	280ad43a 	srli	r5,r5,16
    3f88:	2189c83a 	sub	r4,r4,r6
    3f8c:	2209883a 	add	r4,r4,r8
    3f90:	1806d43a 	srli	r3,r3,16
    3f94:	288b883a 	add	r5,r5,r2
    3f98:	200dd43a 	srai	r6,r4,16
    3f9c:	28bfffcc 	andi	r2,r5,65535
    3fa0:	1887c83a 	sub	r3,r3,r2
    3fa4:	1987883a 	add	r3,r3,r6
    3fa8:	3900000d 	sth	r4,0(r7)
    3fac:	38c0008d 	sth	r3,2(r7)
    3fb0:	2808d43a 	srli	r4,r5,16
    3fb4:	39c00104 	addi	r7,r7,4
    3fb8:	1811d43a 	srai	r8,r3,16
    3fbc:	943fe92e 	bgeu	r18,r16,3f64 <quorem+0x98>
    3fc0:	8c45883a 	add	r2,r17,r17
    3fc4:	1085883a 	add	r2,r2,r2
    3fc8:	9885883a 	add	r2,r19,r2
    3fcc:	10c00017 	ldw	r3,0(r2)
    3fd0:	18000b1e 	bne	r3,zero,4000 <quorem+0x134>
    3fd4:	113fff04 	addi	r4,r2,-4
    3fd8:	9900082e 	bgeu	r19,r4,3ffc <quorem+0x130>
    3fdc:	10bfff17 	ldw	r2,-4(r2)
    3fe0:	10000326 	beq	r2,zero,3ff0 <quorem+0x124>
    3fe4:	00000506 	br	3ffc <quorem+0x130>
    3fe8:	20800017 	ldw	r2,0(r4)
    3fec:	1000031e 	bne	r2,zero,3ffc <quorem+0x130>
    3ff0:	213fff04 	addi	r4,r4,-4
    3ff4:	8c7fffc4 	addi	r17,r17,-1
    3ff8:	993ffb36 	bltu	r19,r4,3fe8 <quorem+0x11c>
    3ffc:	bc400415 	stw	r17,16(r23)
    4000:	a005883a 	mov	r2,r20
    4004:	dfc00917 	ldw	ra,36(sp)
    4008:	df000817 	ldw	fp,32(sp)
    400c:	ddc00717 	ldw	r23,28(sp)
    4010:	dd800617 	ldw	r22,24(sp)
    4014:	dd400517 	ldw	r21,20(sp)
    4018:	dd000417 	ldw	r20,16(sp)
    401c:	dcc00317 	ldw	r19,12(sp)
    4020:	dc800217 	ldw	r18,8(sp)
    4024:	dc400117 	ldw	r17,4(sp)
    4028:	dc000017 	ldw	r16,0(sp)
    402c:	dec00a04 	addi	sp,sp,40
    4030:	f800283a 	ret
    4034:	980f883a 	mov	r7,r19
    4038:	8011883a 	mov	r8,r16
    403c:	0013883a 	mov	r9,zero
    4040:	000d883a 	mov	r6,zero
    4044:	40c00017 	ldw	r3,0(r8)
    4048:	39000017 	ldw	r4,0(r7)
    404c:	42000104 	addi	r8,r8,4
    4050:	18bfffcc 	andi	r2,r3,65535
    4054:	a085383a 	mul	r2,r20,r2
    4058:	1806d43a 	srli	r3,r3,16
    405c:	217fffcc 	andi	r5,r4,65535
    4060:	3085883a 	add	r2,r6,r2
    4064:	11bfffcc 	andi	r6,r2,65535
    4068:	a0c7383a 	mul	r3,r20,r3
    406c:	1004d43a 	srli	r2,r2,16
    4070:	298bc83a 	sub	r5,r5,r6
    4074:	2a4b883a 	add	r5,r5,r9
    4078:	2008d43a 	srli	r4,r4,16
    407c:	1887883a 	add	r3,r3,r2
    4080:	280dd43a 	srai	r6,r5,16
    4084:	18bfffcc 	andi	r2,r3,65535
    4088:	2089c83a 	sub	r4,r4,r2
    408c:	2189883a 	add	r4,r4,r6
    4090:	3900008d 	sth	r4,2(r7)
    4094:	3940000d 	sth	r5,0(r7)
    4098:	180cd43a 	srli	r6,r3,16
    409c:	39c00104 	addi	r7,r7,4
    40a0:	2013d43a 	srai	r9,r4,16
    40a4:	923fe72e 	bgeu	r18,r8,4044 <quorem+0x178>
    40a8:	e03fa61e 	bne	fp,zero,3f44 <quorem+0x78>
    40ac:	b0ffff04 	addi	r3,r22,-4
    40b0:	98c0082e 	bgeu	r19,r3,40d4 <quorem+0x208>
    40b4:	b0bfff17 	ldw	r2,-4(r22)
    40b8:	10000326 	beq	r2,zero,40c8 <quorem+0x1fc>
    40bc:	00000506 	br	40d4 <quorem+0x208>
    40c0:	18800017 	ldw	r2,0(r3)
    40c4:	1000031e 	bne	r2,zero,40d4 <quorem+0x208>
    40c8:	18ffff04 	addi	r3,r3,-4
    40cc:	8c7fffc4 	addi	r17,r17,-1
    40d0:	98fffb36 	bltu	r19,r3,40c0 <quorem+0x1f4>
    40d4:	bc400415 	stw	r17,16(r23)
    40d8:	003f9a06 	br	3f44 <quorem+0x78>
    40dc:	0005883a 	mov	r2,zero
    40e0:	003fc806 	br	4004 <quorem+0x138>

000040e4 <_dtoa_r>:
    40e4:	22001017 	ldw	r8,64(r4)
    40e8:	deffda04 	addi	sp,sp,-152
    40ec:	dd402115 	stw	r21,132(sp)
    40f0:	dd002015 	stw	r20,128(sp)
    40f4:	dc801e15 	stw	r18,120(sp)
    40f8:	dc401d15 	stw	r17,116(sp)
    40fc:	dfc02515 	stw	ra,148(sp)
    4100:	df002415 	stw	fp,144(sp)
    4104:	ddc02315 	stw	r23,140(sp)
    4108:	dd802215 	stw	r22,136(sp)
    410c:	dcc01f15 	stw	r19,124(sp)
    4110:	dc001c15 	stw	r16,112(sp)
    4114:	d9001615 	stw	r4,88(sp)
    4118:	3023883a 	mov	r17,r6
    411c:	2829883a 	mov	r20,r5
    4120:	d9c01715 	stw	r7,92(sp)
    4124:	dc802817 	ldw	r18,160(sp)
    4128:	302b883a 	mov	r21,r6
    412c:	40000a26 	beq	r8,zero,4158 <_dtoa_r+0x74>
    4130:	20801117 	ldw	r2,68(r4)
    4134:	400b883a 	mov	r5,r8
    4138:	40800115 	stw	r2,4(r8)
    413c:	20c01117 	ldw	r3,68(r4)
    4140:	00800044 	movi	r2,1
    4144:	10c4983a 	sll	r2,r2,r3
    4148:	40800215 	stw	r2,8(r8)
    414c:	00071400 	call	7140 <_Bfree>
    4150:	d8c01617 	ldw	r3,88(sp)
    4154:	18001015 	stw	zero,64(r3)
    4158:	8800a316 	blt	r17,zero,43e8 <_dtoa_r+0x304>
    415c:	90000015 	stw	zero,0(r18)
    4160:	a8dffc2c 	andhi	r3,r21,32752
    4164:	009ffc34 	movhi	r2,32752
    4168:	18809126 	beq	r3,r2,43b0 <_dtoa_r+0x2cc>
    416c:	000d883a 	mov	r6,zero
    4170:	000f883a 	mov	r7,zero
    4174:	a009883a 	mov	r4,r20
    4178:	a80b883a 	mov	r5,r21
    417c:	dd001215 	stw	r20,72(sp)
    4180:	dd401315 	stw	r21,76(sp)
    4184:	000a64c0 	call	a64c <__nedf2>
    4188:	1000171e 	bne	r2,zero,41e8 <_dtoa_r+0x104>
    418c:	d9802717 	ldw	r6,156(sp)
    4190:	00800044 	movi	r2,1
    4194:	30800015 	stw	r2,0(r6)
    4198:	d8802917 	ldw	r2,164(sp)
    419c:	10029b26 	beq	r2,zero,4c0c <_dtoa_r+0xb28>
    41a0:	d9002917 	ldw	r4,164(sp)
    41a4:	00800074 	movhi	r2,1
    41a8:	1088ce44 	addi	r2,r2,9017
    41ac:	10ffffc4 	addi	r3,r2,-1
    41b0:	20800015 	stw	r2,0(r4)
    41b4:	1805883a 	mov	r2,r3
    41b8:	dfc02517 	ldw	ra,148(sp)
    41bc:	df002417 	ldw	fp,144(sp)
    41c0:	ddc02317 	ldw	r23,140(sp)
    41c4:	dd802217 	ldw	r22,136(sp)
    41c8:	dd402117 	ldw	r21,132(sp)
    41cc:	dd002017 	ldw	r20,128(sp)
    41d0:	dcc01f17 	ldw	r19,124(sp)
    41d4:	dc801e17 	ldw	r18,120(sp)
    41d8:	dc401d17 	ldw	r17,116(sp)
    41dc:	dc001c17 	ldw	r16,112(sp)
    41e0:	dec02604 	addi	sp,sp,152
    41e4:	f800283a 	ret
    41e8:	d9001617 	ldw	r4,88(sp)
    41ec:	d9401217 	ldw	r5,72(sp)
    41f0:	d8800104 	addi	r2,sp,4
    41f4:	a80d883a 	mov	r6,r21
    41f8:	d9c00204 	addi	r7,sp,8
    41fc:	d8800015 	stw	r2,0(sp)
    4200:	000777c0 	call	777c <__d2b>
    4204:	d8800715 	stw	r2,28(sp)
    4208:	a804d53a 	srli	r2,r21,20
    420c:	1101ffcc 	andi	r4,r2,2047
    4210:	20008626 	beq	r4,zero,442c <_dtoa_r+0x348>
    4214:	d8c01217 	ldw	r3,72(sp)
    4218:	00800434 	movhi	r2,16
    421c:	10bfffc4 	addi	r2,r2,-1
    4220:	ddc00117 	ldw	r23,4(sp)
    4224:	a884703a 	and	r2,r21,r2
    4228:	1811883a 	mov	r8,r3
    422c:	124ffc34 	orhi	r9,r2,16368
    4230:	25bf0044 	addi	r22,r4,-1023
    4234:	d8000815 	stw	zero,32(sp)
    4238:	0005883a 	mov	r2,zero
    423c:	00cffe34 	movhi	r3,16376
    4240:	480b883a 	mov	r5,r9
    4244:	4009883a 	mov	r4,r8
    4248:	180f883a 	mov	r7,r3
    424c:	100d883a 	mov	r6,r2
    4250:	0009eb40 	call	9eb4 <__subdf3>
    4254:	0218dbf4 	movhi	r8,25455
    4258:	4210d844 	addi	r8,r8,17249
    425c:	024ff4f4 	movhi	r9,16339
    4260:	4a61e9c4 	addi	r9,r9,-30809
    4264:	480f883a 	mov	r7,r9
    4268:	400d883a 	mov	r6,r8
    426c:	180b883a 	mov	r5,r3
    4270:	1009883a 	mov	r4,r2
    4274:	0009fa80 	call	9fa8 <__muldf3>
    4278:	0222d874 	movhi	r8,35681
    427c:	42322cc4 	addi	r8,r8,-14157
    4280:	024ff1f4 	movhi	r9,16327
    4284:	4a628a04 	addi	r9,r9,-30168
    4288:	480f883a 	mov	r7,r9
    428c:	400d883a 	mov	r6,r8
    4290:	180b883a 	mov	r5,r3
    4294:	1009883a 	mov	r4,r2
    4298:	0009f340 	call	9f34 <__adddf3>
    429c:	b009883a 	mov	r4,r22
    42a0:	1021883a 	mov	r16,r2
    42a4:	1823883a 	mov	r17,r3
    42a8:	000a86c0 	call	a86c <__floatsidf>
    42ac:	021427f4 	movhi	r8,20639
    42b0:	421e7ec4 	addi	r8,r8,31227
    42b4:	024ff4f4 	movhi	r9,16339
    42b8:	4a5104c4 	addi	r9,r9,17427
    42bc:	480f883a 	mov	r7,r9
    42c0:	400d883a 	mov	r6,r8
    42c4:	180b883a 	mov	r5,r3
    42c8:	1009883a 	mov	r4,r2
    42cc:	0009fa80 	call	9fa8 <__muldf3>
    42d0:	180f883a 	mov	r7,r3
    42d4:	880b883a 	mov	r5,r17
    42d8:	100d883a 	mov	r6,r2
    42dc:	8009883a 	mov	r4,r16
    42e0:	0009f340 	call	9f34 <__adddf3>
    42e4:	1009883a 	mov	r4,r2
    42e8:	180b883a 	mov	r5,r3
    42ec:	1021883a 	mov	r16,r2
    42f0:	1823883a 	mov	r17,r3
    42f4:	000a9640 	call	a964 <__fixdfsi>
    42f8:	000d883a 	mov	r6,zero
    42fc:	000f883a 	mov	r7,zero
    4300:	8009883a 	mov	r4,r16
    4304:	880b883a 	mov	r5,r17
    4308:	d8800d15 	stw	r2,52(sp)
    430c:	000a7e40 	call	a7e4 <__ltdf2>
    4310:	10031716 	blt	r2,zero,4f70 <_dtoa_r+0xe8c>
    4314:	d8c00d17 	ldw	r3,52(sp)
    4318:	00800584 	movi	r2,22
    431c:	10c1482e 	bgeu	r2,r3,4840 <_dtoa_r+0x75c>
    4320:	01000044 	movi	r4,1
    4324:	d9000c15 	stw	r4,48(sp)
    4328:	bd85c83a 	sub	r2,r23,r22
    432c:	11bfffc4 	addi	r6,r2,-1
    4330:	30030b16 	blt	r6,zero,4f60 <_dtoa_r+0xe7c>
    4334:	d9800a15 	stw	r6,40(sp)
    4338:	d8001115 	stw	zero,68(sp)
    433c:	d8c00d17 	ldw	r3,52(sp)
    4340:	1802ff16 	blt	r3,zero,4f40 <_dtoa_r+0xe5c>
    4344:	d9000a17 	ldw	r4,40(sp)
    4348:	d8c00915 	stw	r3,36(sp)
    434c:	d8001015 	stw	zero,64(sp)
    4350:	20c9883a 	add	r4,r4,r3
    4354:	d9000a15 	stw	r4,40(sp)
    4358:	d9001717 	ldw	r4,92(sp)
    435c:	00800244 	movi	r2,9
    4360:	11004636 	bltu	r2,r4,447c <_dtoa_r+0x398>
    4364:	00800144 	movi	r2,5
    4368:	11020416 	blt	r2,r4,4b7c <_dtoa_r+0xa98>
    436c:	04400044 	movi	r17,1
    4370:	d8c01717 	ldw	r3,92(sp)
    4374:	00800144 	movi	r2,5
    4378:	10c1ed36 	bltu	r2,r3,4b30 <_dtoa_r+0xa4c>
    437c:	18c5883a 	add	r2,r3,r3
    4380:	1085883a 	add	r2,r2,r2
    4384:	00c00034 	movhi	r3,0
    4388:	18d0e604 	addi	r3,r3,17304
    438c:	10c5883a 	add	r2,r2,r3
    4390:	11000017 	ldw	r4,0(r2)
    4394:	2000683a 	jmp	r4
    4398:	00004484 	movi	zero,274
    439c:	00004484 	movi	zero,274
    43a0:	00004e84 	movi	zero,314
    43a4:	00004e5c 	xori	zero,zero,313
    43a8:	00004ea0 	cmpeqi	zero,zero,314
    43ac:	00004eac 	andhi	zero,zero,314
    43b0:	d9002717 	ldw	r4,156(sp)
    43b4:	0089c3c4 	movi	r2,9999
    43b8:	20800015 	stw	r2,0(r4)
    43bc:	a0001026 	beq	r20,zero,4400 <_dtoa_r+0x31c>
    43c0:	00c00074 	movhi	r3,1
    43c4:	18c8da04 	addi	r3,r3,9064
    43c8:	d9802917 	ldw	r6,164(sp)
    43cc:	303f7926 	beq	r6,zero,41b4 <_dtoa_r+0xd0>
    43d0:	188000c7 	ldb	r2,3(r3)
    43d4:	190000c4 	addi	r4,r3,3
    43d8:	1000101e 	bne	r2,zero,441c <_dtoa_r+0x338>
    43dc:	d8802917 	ldw	r2,164(sp)
    43e0:	11000015 	stw	r4,0(r2)
    43e4:	003f7306 	br	41b4 <_dtoa_r+0xd0>
    43e8:	00a00034 	movhi	r2,32768
    43ec:	10bfffc4 	addi	r2,r2,-1
    43f0:	00c00044 	movi	r3,1
    43f4:	88aa703a 	and	r21,r17,r2
    43f8:	90c00015 	stw	r3,0(r18)
    43fc:	003f5806 	br	4160 <_dtoa_r+0x7c>
    4400:	00800434 	movhi	r2,16
    4404:	10bfffc4 	addi	r2,r2,-1
    4408:	a884703a 	and	r2,r21,r2
    440c:	103fec1e 	bne	r2,zero,43c0 <_dtoa_r+0x2dc>
    4410:	00c00074 	movhi	r3,1
    4414:	18c8d704 	addi	r3,r3,9052
    4418:	003feb06 	br	43c8 <_dtoa_r+0x2e4>
    441c:	d8802917 	ldw	r2,164(sp)
    4420:	19000204 	addi	r4,r3,8
    4424:	11000015 	stw	r4,0(r2)
    4428:	003f6206 	br	41b4 <_dtoa_r+0xd0>
    442c:	ddc00117 	ldw	r23,4(sp)
    4430:	d8800217 	ldw	r2,8(sp)
    4434:	01000804 	movi	r4,32
    4438:	b8c10c84 	addi	r3,r23,1074
    443c:	18a3883a 	add	r17,r3,r2
    4440:	2441b80e 	bge	r4,r17,4b24 <_dtoa_r+0xa40>
    4444:	00c01004 	movi	r3,64
    4448:	1c47c83a 	sub	r3,r3,r17
    444c:	88bff804 	addi	r2,r17,-32
    4450:	a8c6983a 	sll	r3,r21,r3
    4454:	a084d83a 	srl	r2,r20,r2
    4458:	1888b03a 	or	r4,r3,r2
    445c:	000aa3c0 	call	aa3c <__floatunsidf>
    4460:	1011883a 	mov	r8,r2
    4464:	00bf8434 	movhi	r2,65040
    4468:	01000044 	movi	r4,1
    446c:	10d3883a 	add	r9,r2,r3
    4470:	8dbef344 	addi	r22,r17,-1075
    4474:	d9000815 	stw	r4,32(sp)
    4478:	003f6f06 	br	4238 <_dtoa_r+0x154>
    447c:	d8001715 	stw	zero,92(sp)
    4480:	04400044 	movi	r17,1
    4484:	00bfffc4 	movi	r2,-1
    4488:	00c00044 	movi	r3,1
    448c:	d8800e15 	stw	r2,56(sp)
    4490:	d8002615 	stw	zero,152(sp)
    4494:	d8800f15 	stw	r2,60(sp)
    4498:	d8c00b15 	stw	r3,44(sp)
    449c:	1021883a 	mov	r16,r2
    44a0:	d8801617 	ldw	r2,88(sp)
    44a4:	10001115 	stw	zero,68(r2)
    44a8:	d8801617 	ldw	r2,88(sp)
    44ac:	11401117 	ldw	r5,68(r2)
    44b0:	1009883a 	mov	r4,r2
    44b4:	00076c00 	call	76c0 <_Balloc>
    44b8:	d8c01617 	ldw	r3,88(sp)
    44bc:	d8800515 	stw	r2,20(sp)
    44c0:	18801015 	stw	r2,64(r3)
    44c4:	00800384 	movi	r2,14
    44c8:	14006836 	bltu	r2,r16,466c <_dtoa_r+0x588>
    44cc:	8805003a 	cmpeq	r2,r17,zero
    44d0:	1000661e 	bne	r2,zero,466c <_dtoa_r+0x588>
    44d4:	d9000d17 	ldw	r4,52(sp)
    44d8:	0102300e 	bge	zero,r4,4d9c <_dtoa_r+0xcb8>
    44dc:	208003cc 	andi	r2,r4,15
    44e0:	100490fa 	slli	r2,r2,3
    44e4:	2025d13a 	srai	r18,r4,4
    44e8:	00c00074 	movhi	r3,1
    44ec:	18c8ec04 	addi	r3,r3,9136
    44f0:	10c5883a 	add	r2,r2,r3
    44f4:	90c0040c 	andi	r3,r18,16
    44f8:	14000017 	ldw	r16,0(r2)
    44fc:	14400117 	ldw	r17,4(r2)
    4500:	18036a1e 	bne	r3,zero,52ac <_dtoa_r+0x11c8>
    4504:	05800084 	movi	r22,2
    4508:	90001026 	beq	r18,zero,454c <_dtoa_r+0x468>
    450c:	04c00074 	movhi	r19,1
    4510:	9cc91e04 	addi	r19,r19,9336
    4514:	9080004c 	andi	r2,r18,1
    4518:	1005003a 	cmpeq	r2,r2,zero
    451c:	1000081e 	bne	r2,zero,4540 <_dtoa_r+0x45c>
    4520:	99800017 	ldw	r6,0(r19)
    4524:	99c00117 	ldw	r7,4(r19)
    4528:	880b883a 	mov	r5,r17
    452c:	8009883a 	mov	r4,r16
    4530:	0009fa80 	call	9fa8 <__muldf3>
    4534:	1021883a 	mov	r16,r2
    4538:	b5800044 	addi	r22,r22,1
    453c:	1823883a 	mov	r17,r3
    4540:	9025d07a 	srai	r18,r18,1
    4544:	9cc00204 	addi	r19,r19,8
    4548:	903ff21e 	bne	r18,zero,4514 <_dtoa_r+0x430>
    454c:	a80b883a 	mov	r5,r21
    4550:	a009883a 	mov	r4,r20
    4554:	880f883a 	mov	r7,r17
    4558:	800d883a 	mov	r6,r16
    455c:	000a36c0 	call	a36c <__divdf3>
    4560:	1029883a 	mov	r20,r2
    4564:	182b883a 	mov	r21,r3
    4568:	d8c00c17 	ldw	r3,48(sp)
    456c:	1805003a 	cmpeq	r2,r3,zero
    4570:	1000081e 	bne	r2,zero,4594 <_dtoa_r+0x4b0>
    4574:	0005883a 	mov	r2,zero
    4578:	00cffc34 	movhi	r3,16368
    457c:	180f883a 	mov	r7,r3
    4580:	a009883a 	mov	r4,r20
    4584:	a80b883a 	mov	r5,r21
    4588:	100d883a 	mov	r6,r2
    458c:	000a7e40 	call	a7e4 <__ltdf2>
    4590:	1003fe16 	blt	r2,zero,558c <_dtoa_r+0x14a8>
    4594:	b009883a 	mov	r4,r22
    4598:	000a86c0 	call	a86c <__floatsidf>
    459c:	180b883a 	mov	r5,r3
    45a0:	1009883a 	mov	r4,r2
    45a4:	a00d883a 	mov	r6,r20
    45a8:	a80f883a 	mov	r7,r21
    45ac:	0009fa80 	call	9fa8 <__muldf3>
    45b0:	0011883a 	mov	r8,zero
    45b4:	02500734 	movhi	r9,16412
    45b8:	1009883a 	mov	r4,r2
    45bc:	180b883a 	mov	r5,r3
    45c0:	480f883a 	mov	r7,r9
    45c4:	400d883a 	mov	r6,r8
    45c8:	0009f340 	call	9f34 <__adddf3>
    45cc:	d9000f17 	ldw	r4,60(sp)
    45d0:	102d883a 	mov	r22,r2
    45d4:	00bf3034 	movhi	r2,64704
    45d8:	18b9883a 	add	fp,r3,r2
    45dc:	e02f883a 	mov	r23,fp
    45e0:	20028f1e 	bne	r4,zero,5020 <_dtoa_r+0xf3c>
    45e4:	0005883a 	mov	r2,zero
    45e8:	00d00534 	movhi	r3,16404
    45ec:	a009883a 	mov	r4,r20
    45f0:	a80b883a 	mov	r5,r21
    45f4:	180f883a 	mov	r7,r3
    45f8:	100d883a 	mov	r6,r2
    45fc:	0009eb40 	call	9eb4 <__subdf3>
    4600:	1009883a 	mov	r4,r2
    4604:	e00f883a 	mov	r7,fp
    4608:	180b883a 	mov	r5,r3
    460c:	b00d883a 	mov	r6,r22
    4610:	1025883a 	mov	r18,r2
    4614:	1827883a 	mov	r19,r3
    4618:	000a6d40 	call	a6d4 <__gtdf2>
    461c:	00834f16 	blt	zero,r2,535c <_dtoa_r+0x1278>
    4620:	e0e0003c 	xorhi	r3,fp,32768
    4624:	9009883a 	mov	r4,r18
    4628:	980b883a 	mov	r5,r19
    462c:	180f883a 	mov	r7,r3
    4630:	b00d883a 	mov	r6,r22
    4634:	000a7e40 	call	a7e4 <__ltdf2>
    4638:	1000080e 	bge	r2,zero,465c <_dtoa_r+0x578>
    463c:	0027883a 	mov	r19,zero
    4640:	0025883a 	mov	r18,zero
    4644:	d8802617 	ldw	r2,152(sp)
    4648:	df000517 	ldw	fp,20(sp)
    464c:	d8000615 	stw	zero,24(sp)
    4650:	0084303a 	nor	r2,zero,r2
    4654:	d8800d15 	stw	r2,52(sp)
    4658:	00019b06 	br	4cc8 <_dtoa_r+0xbe4>
    465c:	d9801217 	ldw	r6,72(sp)
    4660:	d8801317 	ldw	r2,76(sp)
    4664:	3029883a 	mov	r20,r6
    4668:	102b883a 	mov	r21,r2
    466c:	d8c00217 	ldw	r3,8(sp)
    4670:	18008516 	blt	r3,zero,4888 <_dtoa_r+0x7a4>
    4674:	d9000d17 	ldw	r4,52(sp)
    4678:	00800384 	movi	r2,14
    467c:	11008216 	blt	r2,r4,4888 <_dtoa_r+0x7a4>
    4680:	200490fa 	slli	r2,r4,3
    4684:	d9802617 	ldw	r6,152(sp)
    4688:	00c00074 	movhi	r3,1
    468c:	18c8ec04 	addi	r3,r3,9136
    4690:	10c5883a 	add	r2,r2,r3
    4694:	14800017 	ldw	r18,0(r2)
    4698:	14c00117 	ldw	r19,4(r2)
    469c:	30031e16 	blt	r6,zero,5318 <_dtoa_r+0x1234>
    46a0:	d9000517 	ldw	r4,20(sp)
    46a4:	d8c00f17 	ldw	r3,60(sp)
    46a8:	a823883a 	mov	r17,r21
    46ac:	a021883a 	mov	r16,r20
    46b0:	192b883a 	add	r21,r3,r4
    46b4:	2039883a 	mov	fp,r4
    46b8:	00000f06 	br	46f8 <_dtoa_r+0x614>
    46bc:	0005883a 	mov	r2,zero
    46c0:	00d00934 	movhi	r3,16420
    46c4:	5009883a 	mov	r4,r10
    46c8:	580b883a 	mov	r5,r11
    46cc:	180f883a 	mov	r7,r3
    46d0:	100d883a 	mov	r6,r2
    46d4:	0009fa80 	call	9fa8 <__muldf3>
    46d8:	180b883a 	mov	r5,r3
    46dc:	000d883a 	mov	r6,zero
    46e0:	000f883a 	mov	r7,zero
    46e4:	1009883a 	mov	r4,r2
    46e8:	1021883a 	mov	r16,r2
    46ec:	1823883a 	mov	r17,r3
    46f0:	000a64c0 	call	a64c <__nedf2>
    46f4:	10004526 	beq	r2,zero,480c <_dtoa_r+0x728>
    46f8:	900d883a 	mov	r6,r18
    46fc:	980f883a 	mov	r7,r19
    4700:	8009883a 	mov	r4,r16
    4704:	880b883a 	mov	r5,r17
    4708:	000a36c0 	call	a36c <__divdf3>
    470c:	180b883a 	mov	r5,r3
    4710:	1009883a 	mov	r4,r2
    4714:	000a9640 	call	a964 <__fixdfsi>
    4718:	1009883a 	mov	r4,r2
    471c:	1029883a 	mov	r20,r2
    4720:	000a86c0 	call	a86c <__floatsidf>
    4724:	180f883a 	mov	r7,r3
    4728:	9009883a 	mov	r4,r18
    472c:	980b883a 	mov	r5,r19
    4730:	100d883a 	mov	r6,r2
    4734:	0009fa80 	call	9fa8 <__muldf3>
    4738:	180f883a 	mov	r7,r3
    473c:	880b883a 	mov	r5,r17
    4740:	8009883a 	mov	r4,r16
    4744:	100d883a 	mov	r6,r2
    4748:	0009eb40 	call	9eb4 <__subdf3>
    474c:	1015883a 	mov	r10,r2
    4750:	a0800c04 	addi	r2,r20,48
    4754:	e0800005 	stb	r2,0(fp)
    4758:	e7000044 	addi	fp,fp,1
    475c:	1817883a 	mov	r11,r3
    4760:	e57fd61e 	bne	fp,r21,46bc <_dtoa_r+0x5d8>
    4764:	500d883a 	mov	r6,r10
    4768:	180f883a 	mov	r7,r3
    476c:	5009883a 	mov	r4,r10
    4770:	180b883a 	mov	r5,r3
    4774:	0009f340 	call	9f34 <__adddf3>
    4778:	100d883a 	mov	r6,r2
    477c:	9009883a 	mov	r4,r18
    4780:	980b883a 	mov	r5,r19
    4784:	180f883a 	mov	r7,r3
    4788:	1021883a 	mov	r16,r2
    478c:	1823883a 	mov	r17,r3
    4790:	000a7e40 	call	a7e4 <__ltdf2>
    4794:	10000816 	blt	r2,zero,47b8 <_dtoa_r+0x6d4>
    4798:	980b883a 	mov	r5,r19
    479c:	800d883a 	mov	r6,r16
    47a0:	880f883a 	mov	r7,r17
    47a4:	9009883a 	mov	r4,r18
    47a8:	000a5c40 	call	a5c4 <__eqdf2>
    47ac:	1000171e 	bne	r2,zero,480c <_dtoa_r+0x728>
    47b0:	a080004c 	andi	r2,r20,1
    47b4:	10001526 	beq	r2,zero,480c <_dtoa_r+0x728>
    47b8:	d8800d17 	ldw	r2,52(sp)
    47bc:	d8800415 	stw	r2,16(sp)
    47c0:	e009883a 	mov	r4,fp
    47c4:	213fffc4 	addi	r4,r4,-1
    47c8:	20c00007 	ldb	r3,0(r4)
    47cc:	00800e44 	movi	r2,57
    47d0:	1880081e 	bne	r3,r2,47f4 <_dtoa_r+0x710>
    47d4:	d8800517 	ldw	r2,20(sp)
    47d8:	113ffa1e 	bne	r2,r4,47c4 <_dtoa_r+0x6e0>
    47dc:	d8c00417 	ldw	r3,16(sp)
    47e0:	d9800517 	ldw	r6,20(sp)
    47e4:	00800c04 	movi	r2,48
    47e8:	18c00044 	addi	r3,r3,1
    47ec:	d8c00415 	stw	r3,16(sp)
    47f0:	30800005 	stb	r2,0(r6)
    47f4:	20800003 	ldbu	r2,0(r4)
    47f8:	d8c00417 	ldw	r3,16(sp)
    47fc:	27000044 	addi	fp,r4,1
    4800:	10800044 	addi	r2,r2,1
    4804:	d8c00d15 	stw	r3,52(sp)
    4808:	20800005 	stb	r2,0(r4)
    480c:	d9001617 	ldw	r4,88(sp)
    4810:	d9400717 	ldw	r5,28(sp)
    4814:	00071400 	call	7140 <_Bfree>
    4818:	e0000005 	stb	zero,0(fp)
    481c:	d9800d17 	ldw	r6,52(sp)
    4820:	d8c02717 	ldw	r3,156(sp)
    4824:	d9002917 	ldw	r4,164(sp)
    4828:	30800044 	addi	r2,r6,1
    482c:	18800015 	stw	r2,0(r3)
    4830:	20029c26 	beq	r4,zero,52a4 <_dtoa_r+0x11c0>
    4834:	d8c00517 	ldw	r3,20(sp)
    4838:	27000015 	stw	fp,0(r4)
    483c:	003e5d06 	br	41b4 <_dtoa_r+0xd0>
    4840:	d9800d17 	ldw	r6,52(sp)
    4844:	00c00074 	movhi	r3,1
    4848:	18c8ec04 	addi	r3,r3,9136
    484c:	d9001217 	ldw	r4,72(sp)
    4850:	300490fa 	slli	r2,r6,3
    4854:	d9401317 	ldw	r5,76(sp)
    4858:	10c5883a 	add	r2,r2,r3
    485c:	12000017 	ldw	r8,0(r2)
    4860:	12400117 	ldw	r9,4(r2)
    4864:	400d883a 	mov	r6,r8
    4868:	480f883a 	mov	r7,r9
    486c:	000a7e40 	call	a7e4 <__ltdf2>
    4870:	1000030e 	bge	r2,zero,4880 <_dtoa_r+0x79c>
    4874:	d8800d17 	ldw	r2,52(sp)
    4878:	10bfffc4 	addi	r2,r2,-1
    487c:	d8800d15 	stw	r2,52(sp)
    4880:	d8000c15 	stw	zero,48(sp)
    4884:	003ea806 	br	4328 <_dtoa_r+0x244>
    4888:	d9000b17 	ldw	r4,44(sp)
    488c:	202cc03a 	cmpne	r22,r4,zero
    4890:	b000c71e 	bne	r22,zero,4bb0 <_dtoa_r+0xacc>
    4894:	dc001117 	ldw	r16,68(sp)
    4898:	dc801017 	ldw	r18,64(sp)
    489c:	0027883a 	mov	r19,zero
    48a0:	04000b0e 	bge	zero,r16,48d0 <_dtoa_r+0x7ec>
    48a4:	d8c00a17 	ldw	r3,40(sp)
    48a8:	00c0090e 	bge	zero,r3,48d0 <_dtoa_r+0x7ec>
    48ac:	8005883a 	mov	r2,r16
    48b0:	1c011316 	blt	r3,r16,4d00 <_dtoa_r+0xc1c>
    48b4:	d9000a17 	ldw	r4,40(sp)
    48b8:	d9801117 	ldw	r6,68(sp)
    48bc:	80a1c83a 	sub	r16,r16,r2
    48c0:	2089c83a 	sub	r4,r4,r2
    48c4:	308dc83a 	sub	r6,r6,r2
    48c8:	d9000a15 	stw	r4,40(sp)
    48cc:	d9801115 	stw	r6,68(sp)
    48d0:	d8801017 	ldw	r2,64(sp)
    48d4:	0080150e 	bge	zero,r2,492c <_dtoa_r+0x848>
    48d8:	d8c00b17 	ldw	r3,44(sp)
    48dc:	1805003a 	cmpeq	r2,r3,zero
    48e0:	1001c91e 	bne	r2,zero,5008 <_dtoa_r+0xf24>
    48e4:	04800e0e 	bge	zero,r18,4920 <_dtoa_r+0x83c>
    48e8:	d9001617 	ldw	r4,88(sp)
    48ec:	980b883a 	mov	r5,r19
    48f0:	900d883a 	mov	r6,r18
    48f4:	0007ef40 	call	7ef4 <__pow5mult>
    48f8:	d9001617 	ldw	r4,88(sp)
    48fc:	d9800717 	ldw	r6,28(sp)
    4900:	100b883a 	mov	r5,r2
    4904:	1027883a 	mov	r19,r2
    4908:	0007bd00 	call	7bd0 <__multiply>
    490c:	d9001617 	ldw	r4,88(sp)
    4910:	d9400717 	ldw	r5,28(sp)
    4914:	1023883a 	mov	r17,r2
    4918:	00071400 	call	7140 <_Bfree>
    491c:	dc400715 	stw	r17,28(sp)
    4920:	d9001017 	ldw	r4,64(sp)
    4924:	248dc83a 	sub	r6,r4,r18
    4928:	30010e1e 	bne	r6,zero,4d64 <_dtoa_r+0xc80>
    492c:	d9001617 	ldw	r4,88(sp)
    4930:	04400044 	movi	r17,1
    4934:	880b883a 	mov	r5,r17
    4938:	0007db80 	call	7db8 <__i2b>
    493c:	d9800917 	ldw	r6,36(sp)
    4940:	1025883a 	mov	r18,r2
    4944:	0180040e 	bge	zero,r6,4958 <_dtoa_r+0x874>
    4948:	d9001617 	ldw	r4,88(sp)
    494c:	100b883a 	mov	r5,r2
    4950:	0007ef40 	call	7ef4 <__pow5mult>
    4954:	1025883a 	mov	r18,r2
    4958:	d8801717 	ldw	r2,92(sp)
    495c:	8880f30e 	bge	r17,r2,4d2c <_dtoa_r+0xc48>
    4960:	0023883a 	mov	r17,zero
    4964:	d9800917 	ldw	r6,36(sp)
    4968:	30019e1e 	bne	r6,zero,4fe4 <_dtoa_r+0xf00>
    496c:	00c00044 	movi	r3,1
    4970:	d9000a17 	ldw	r4,40(sp)
    4974:	20c5883a 	add	r2,r4,r3
    4978:	10c007cc 	andi	r3,r2,31
    497c:	1800841e 	bne	r3,zero,4b90 <_dtoa_r+0xaac>
    4980:	00800704 	movi	r2,28
    4984:	d9000a17 	ldw	r4,40(sp)
    4988:	d9801117 	ldw	r6,68(sp)
    498c:	80a1883a 	add	r16,r16,r2
    4990:	2089883a 	add	r4,r4,r2
    4994:	308d883a 	add	r6,r6,r2
    4998:	d9000a15 	stw	r4,40(sp)
    499c:	d9801115 	stw	r6,68(sp)
    49a0:	d8801117 	ldw	r2,68(sp)
    49a4:	0080050e 	bge	zero,r2,49bc <_dtoa_r+0x8d8>
    49a8:	d9400717 	ldw	r5,28(sp)
    49ac:	d9001617 	ldw	r4,88(sp)
    49b0:	100d883a 	mov	r6,r2
    49b4:	0007a840 	call	7a84 <__lshift>
    49b8:	d8800715 	stw	r2,28(sp)
    49bc:	d8c00a17 	ldw	r3,40(sp)
    49c0:	00c0050e 	bge	zero,r3,49d8 <_dtoa_r+0x8f4>
    49c4:	d9001617 	ldw	r4,88(sp)
    49c8:	900b883a 	mov	r5,r18
    49cc:	180d883a 	mov	r6,r3
    49d0:	0007a840 	call	7a84 <__lshift>
    49d4:	1025883a 	mov	r18,r2
    49d8:	d9000c17 	ldw	r4,48(sp)
    49dc:	2005003a 	cmpeq	r2,r4,zero
    49e0:	10016f26 	beq	r2,zero,4fa0 <_dtoa_r+0xebc>
    49e4:	d9000f17 	ldw	r4,60(sp)
    49e8:	0102170e 	bge	zero,r4,5248 <_dtoa_r+0x1164>
    49ec:	d9800b17 	ldw	r6,44(sp)
    49f0:	3005003a 	cmpeq	r2,r6,zero
    49f4:	1000881e 	bne	r2,zero,4c18 <_dtoa_r+0xb34>
    49f8:	0400050e 	bge	zero,r16,4a10 <_dtoa_r+0x92c>
    49fc:	d9001617 	ldw	r4,88(sp)
    4a00:	980b883a 	mov	r5,r19
    4a04:	800d883a 	mov	r6,r16
    4a08:	0007a840 	call	7a84 <__lshift>
    4a0c:	1027883a 	mov	r19,r2
    4a10:	8804c03a 	cmpne	r2,r17,zero
    4a14:	1002541e 	bne	r2,zero,5368 <_dtoa_r+0x1284>
    4a18:	980b883a 	mov	r5,r19
    4a1c:	dd800517 	ldw	r22,20(sp)
    4a20:	dcc00615 	stw	r19,24(sp)
    4a24:	a700004c 	andi	fp,r20,1
    4a28:	2827883a 	mov	r19,r5
    4a2c:	d9000717 	ldw	r4,28(sp)
    4a30:	900b883a 	mov	r5,r18
    4a34:	0003ecc0 	call	3ecc <quorem>
    4a38:	d9000717 	ldw	r4,28(sp)
    4a3c:	d9400617 	ldw	r5,24(sp)
    4a40:	1023883a 	mov	r17,r2
    4a44:	8dc00c04 	addi	r23,r17,48
    4a48:	000729c0 	call	729c <__mcmp>
    4a4c:	d9001617 	ldw	r4,88(sp)
    4a50:	900b883a 	mov	r5,r18
    4a54:	980d883a 	mov	r6,r19
    4a58:	1029883a 	mov	r20,r2
    4a5c:	00078f80 	call	78f8 <__mdiff>
    4a60:	102b883a 	mov	r21,r2
    4a64:	10800317 	ldw	r2,12(r2)
    4a68:	1001281e 	bne	r2,zero,4f0c <_dtoa_r+0xe28>
    4a6c:	d9000717 	ldw	r4,28(sp)
    4a70:	a80b883a 	mov	r5,r21
    4a74:	000729c0 	call	729c <__mcmp>
    4a78:	d9001617 	ldw	r4,88(sp)
    4a7c:	1021883a 	mov	r16,r2
    4a80:	a80b883a 	mov	r5,r21
    4a84:	00071400 	call	7140 <_Bfree>
    4a88:	8000041e 	bne	r16,zero,4a9c <_dtoa_r+0x9b8>
    4a8c:	d8801717 	ldw	r2,92(sp)
    4a90:	1000021e 	bne	r2,zero,4a9c <_dtoa_r+0x9b8>
    4a94:	e004c03a 	cmpne	r2,fp,zero
    4a98:	10011726 	beq	r2,zero,4ef8 <_dtoa_r+0xe14>
    4a9c:	a0010616 	blt	r20,zero,4eb8 <_dtoa_r+0xdd4>
    4aa0:	a000041e 	bne	r20,zero,4ab4 <_dtoa_r+0x9d0>
    4aa4:	d8c01717 	ldw	r3,92(sp)
    4aa8:	1800021e 	bne	r3,zero,4ab4 <_dtoa_r+0x9d0>
    4aac:	e004c03a 	cmpne	r2,fp,zero
    4ab0:	10010126 	beq	r2,zero,4eb8 <_dtoa_r+0xdd4>
    4ab4:	04023d16 	blt	zero,r16,53ac <_dtoa_r+0x12c8>
    4ab8:	b5c00005 	stb	r23,0(r22)
    4abc:	d9800517 	ldw	r6,20(sp)
    4ac0:	d9000f17 	ldw	r4,60(sp)
    4ac4:	b5800044 	addi	r22,r22,1
    4ac8:	3105883a 	add	r2,r6,r4
    4acc:	b0806526 	beq	r22,r2,4c64 <_dtoa_r+0xb80>
    4ad0:	d9400717 	ldw	r5,28(sp)
    4ad4:	d9001617 	ldw	r4,88(sp)
    4ad8:	01800284 	movi	r6,10
    4adc:	000f883a 	mov	r7,zero
    4ae0:	0007df40 	call	7df4 <__multadd>
    4ae4:	d8800715 	stw	r2,28(sp)
    4ae8:	d8800617 	ldw	r2,24(sp)
    4aec:	14c10c26 	beq	r2,r19,4f20 <_dtoa_r+0xe3c>
    4af0:	d9400617 	ldw	r5,24(sp)
    4af4:	d9001617 	ldw	r4,88(sp)
    4af8:	01800284 	movi	r6,10
    4afc:	000f883a 	mov	r7,zero
    4b00:	0007df40 	call	7df4 <__multadd>
    4b04:	d9001617 	ldw	r4,88(sp)
    4b08:	980b883a 	mov	r5,r19
    4b0c:	01800284 	movi	r6,10
    4b10:	000f883a 	mov	r7,zero
    4b14:	d8800615 	stw	r2,24(sp)
    4b18:	0007df40 	call	7df4 <__multadd>
    4b1c:	1027883a 	mov	r19,r2
    4b20:	003fc206 	br	4a2c <_dtoa_r+0x948>
    4b24:	2445c83a 	sub	r2,r4,r17
    4b28:	a088983a 	sll	r4,r20,r2
    4b2c:	003e4b06 	br	445c <_dtoa_r+0x378>
    4b30:	01bfffc4 	movi	r6,-1
    4b34:	00800044 	movi	r2,1
    4b38:	d9800e15 	stw	r6,56(sp)
    4b3c:	d9800f15 	stw	r6,60(sp)
    4b40:	d8800b15 	stw	r2,44(sp)
    4b44:	d8c01617 	ldw	r3,88(sp)
    4b48:	008005c4 	movi	r2,23
    4b4c:	18001115 	stw	zero,68(r3)
    4b50:	1580082e 	bgeu	r2,r22,4b74 <_dtoa_r+0xa90>
    4b54:	00c00104 	movi	r3,4
    4b58:	0009883a 	mov	r4,zero
    4b5c:	18c7883a 	add	r3,r3,r3
    4b60:	18800504 	addi	r2,r3,20
    4b64:	21000044 	addi	r4,r4,1
    4b68:	b0bffc2e 	bgeu	r22,r2,4b5c <_dtoa_r+0xa78>
    4b6c:	d9801617 	ldw	r6,88(sp)
    4b70:	31001115 	stw	r4,68(r6)
    4b74:	dc000f17 	ldw	r16,60(sp)
    4b78:	003e4b06 	br	44a8 <_dtoa_r+0x3c4>
    4b7c:	d9801717 	ldw	r6,92(sp)
    4b80:	0023883a 	mov	r17,zero
    4b84:	31bfff04 	addi	r6,r6,-4
    4b88:	d9801715 	stw	r6,92(sp)
    4b8c:	003df806 	br	4370 <_dtoa_r+0x28c>
    4b90:	00800804 	movi	r2,32
    4b94:	10c9c83a 	sub	r4,r2,r3
    4b98:	00c00104 	movi	r3,4
    4b9c:	19005a16 	blt	r3,r4,4d08 <_dtoa_r+0xc24>
    4ba0:	008000c4 	movi	r2,3
    4ba4:	113f7e16 	blt	r2,r4,49a0 <_dtoa_r+0x8bc>
    4ba8:	20800704 	addi	r2,r4,28
    4bac:	003f7506 	br	4984 <_dtoa_r+0x8a0>
    4bb0:	d9801717 	ldw	r6,92(sp)
    4bb4:	00800044 	movi	r2,1
    4bb8:	1180a10e 	bge	r2,r6,4e40 <_dtoa_r+0xd5c>
    4bbc:	d9800f17 	ldw	r6,60(sp)
    4bc0:	d8c01017 	ldw	r3,64(sp)
    4bc4:	30bfffc4 	addi	r2,r6,-1
    4bc8:	1881c616 	blt	r3,r2,52e4 <_dtoa_r+0x1200>
    4bcc:	18a5c83a 	sub	r18,r3,r2
    4bd0:	d8800f17 	ldw	r2,60(sp)
    4bd4:	10026216 	blt	r2,zero,5560 <_dtoa_r+0x147c>
    4bd8:	dc001117 	ldw	r16,68(sp)
    4bdc:	1007883a 	mov	r3,r2
    4be0:	d9800a17 	ldw	r6,40(sp)
    4be4:	d8801117 	ldw	r2,68(sp)
    4be8:	d9001617 	ldw	r4,88(sp)
    4bec:	30cd883a 	add	r6,r6,r3
    4bf0:	10c5883a 	add	r2,r2,r3
    4bf4:	01400044 	movi	r5,1
    4bf8:	d9800a15 	stw	r6,40(sp)
    4bfc:	d8801115 	stw	r2,68(sp)
    4c00:	0007db80 	call	7db8 <__i2b>
    4c04:	1027883a 	mov	r19,r2
    4c08:	003f2506 	br	48a0 <_dtoa_r+0x7bc>
    4c0c:	00c00074 	movhi	r3,1
    4c10:	18c8ce04 	addi	r3,r3,9016
    4c14:	003d6706 	br	41b4 <_dtoa_r+0xd0>
    4c18:	dd800517 	ldw	r22,20(sp)
    4c1c:	04000044 	movi	r16,1
    4c20:	00000706 	br	4c40 <_dtoa_r+0xb5c>
    4c24:	d9400717 	ldw	r5,28(sp)
    4c28:	d9001617 	ldw	r4,88(sp)
    4c2c:	01800284 	movi	r6,10
    4c30:	000f883a 	mov	r7,zero
    4c34:	0007df40 	call	7df4 <__multadd>
    4c38:	d8800715 	stw	r2,28(sp)
    4c3c:	84000044 	addi	r16,r16,1
    4c40:	d9000717 	ldw	r4,28(sp)
    4c44:	900b883a 	mov	r5,r18
    4c48:	0003ecc0 	call	3ecc <quorem>
    4c4c:	15c00c04 	addi	r23,r2,48
    4c50:	b5c00005 	stb	r23,0(r22)
    4c54:	d8c00f17 	ldw	r3,60(sp)
    4c58:	b5800044 	addi	r22,r22,1
    4c5c:	80fff116 	blt	r16,r3,4c24 <_dtoa_r+0xb40>
    4c60:	d8000615 	stw	zero,24(sp)
    4c64:	d9400717 	ldw	r5,28(sp)
    4c68:	d9001617 	ldw	r4,88(sp)
    4c6c:	01800044 	movi	r6,1
    4c70:	0007a840 	call	7a84 <__lshift>
    4c74:	1009883a 	mov	r4,r2
    4c78:	900b883a 	mov	r5,r18
    4c7c:	d8800715 	stw	r2,28(sp)
    4c80:	000729c0 	call	729c <__mcmp>
    4c84:	00803c0e 	bge	zero,r2,4d78 <_dtoa_r+0xc94>
    4c88:	b009883a 	mov	r4,r22
    4c8c:	213fffc4 	addi	r4,r4,-1
    4c90:	21400003 	ldbu	r5,0(r4)
    4c94:	00800e44 	movi	r2,57
    4c98:	28c03fcc 	andi	r3,r5,255
    4c9c:	18c0201c 	xori	r3,r3,128
    4ca0:	18ffe004 	addi	r3,r3,-128
    4ca4:	1881981e 	bne	r3,r2,5308 <_dtoa_r+0x1224>
    4ca8:	d9800517 	ldw	r6,20(sp)
    4cac:	21bff71e 	bne	r4,r6,4c8c <_dtoa_r+0xba8>
    4cb0:	d8800d17 	ldw	r2,52(sp)
    4cb4:	37000044 	addi	fp,r6,1
    4cb8:	10800044 	addi	r2,r2,1
    4cbc:	d8800d15 	stw	r2,52(sp)
    4cc0:	00800c44 	movi	r2,49
    4cc4:	30800005 	stb	r2,0(r6)
    4cc8:	d9001617 	ldw	r4,88(sp)
    4ccc:	900b883a 	mov	r5,r18
    4cd0:	00071400 	call	7140 <_Bfree>
    4cd4:	983ecd26 	beq	r19,zero,480c <_dtoa_r+0x728>
    4cd8:	d8c00617 	ldw	r3,24(sp)
    4cdc:	18000426 	beq	r3,zero,4cf0 <_dtoa_r+0xc0c>
    4ce0:	1cc00326 	beq	r3,r19,4cf0 <_dtoa_r+0xc0c>
    4ce4:	d9001617 	ldw	r4,88(sp)
    4ce8:	180b883a 	mov	r5,r3
    4cec:	00071400 	call	7140 <_Bfree>
    4cf0:	d9001617 	ldw	r4,88(sp)
    4cf4:	980b883a 	mov	r5,r19
    4cf8:	00071400 	call	7140 <_Bfree>
    4cfc:	003ec306 	br	480c <_dtoa_r+0x728>
    4d00:	1805883a 	mov	r2,r3
    4d04:	003eeb06 	br	48b4 <_dtoa_r+0x7d0>
    4d08:	d9800a17 	ldw	r6,40(sp)
    4d0c:	d8c01117 	ldw	r3,68(sp)
    4d10:	20bfff04 	addi	r2,r4,-4
    4d14:	308d883a 	add	r6,r6,r2
    4d18:	1887883a 	add	r3,r3,r2
    4d1c:	80a1883a 	add	r16,r16,r2
    4d20:	d9800a15 	stw	r6,40(sp)
    4d24:	d8c01115 	stw	r3,68(sp)
    4d28:	003f1d06 	br	49a0 <_dtoa_r+0x8bc>
    4d2c:	a03f0c1e 	bne	r20,zero,4960 <_dtoa_r+0x87c>
    4d30:	00800434 	movhi	r2,16
    4d34:	10bfffc4 	addi	r2,r2,-1
    4d38:	a884703a 	and	r2,r21,r2
    4d3c:	103f081e 	bne	r2,zero,4960 <_dtoa_r+0x87c>
    4d40:	a89ffc2c 	andhi	r2,r21,32752
    4d44:	103f0626 	beq	r2,zero,4960 <_dtoa_r+0x87c>
    4d48:	d8c01117 	ldw	r3,68(sp)
    4d4c:	d9000a17 	ldw	r4,40(sp)
    4d50:	18c00044 	addi	r3,r3,1
    4d54:	21000044 	addi	r4,r4,1
    4d58:	d8c01115 	stw	r3,68(sp)
    4d5c:	d9000a15 	stw	r4,40(sp)
    4d60:	003f0006 	br	4964 <_dtoa_r+0x880>
    4d64:	d9400717 	ldw	r5,28(sp)
    4d68:	d9001617 	ldw	r4,88(sp)
    4d6c:	0007ef40 	call	7ef4 <__pow5mult>
    4d70:	d8800715 	stw	r2,28(sp)
    4d74:	003eed06 	br	492c <_dtoa_r+0x848>
    4d78:	1000021e 	bne	r2,zero,4d84 <_dtoa_r+0xca0>
    4d7c:	b880004c 	andi	r2,r23,1
    4d80:	103fc11e 	bne	r2,zero,4c88 <_dtoa_r+0xba4>
    4d84:	b5bfffc4 	addi	r22,r22,-1
    4d88:	b0c00007 	ldb	r3,0(r22)
    4d8c:	00800c04 	movi	r2,48
    4d90:	18bffc26 	beq	r3,r2,4d84 <_dtoa_r+0xca0>
    4d94:	b7000044 	addi	fp,r22,1
    4d98:	003fcb06 	br	4cc8 <_dtoa_r+0xbe4>
    4d9c:	d9800d17 	ldw	r6,52(sp)
    4da0:	018fc83a 	sub	r7,zero,r6
    4da4:	3801f726 	beq	r7,zero,5584 <_dtoa_r+0x14a0>
    4da8:	398003cc 	andi	r6,r7,15
    4dac:	300c90fa 	slli	r6,r6,3
    4db0:	01400074 	movhi	r5,1
    4db4:	2948ec04 	addi	r5,r5,9136
    4db8:	d9001217 	ldw	r4,72(sp)
    4dbc:	314d883a 	add	r6,r6,r5
    4dc0:	30c00117 	ldw	r3,4(r6)
    4dc4:	30800017 	ldw	r2,0(r6)
    4dc8:	d9401317 	ldw	r5,76(sp)
    4dcc:	3821d13a 	srai	r16,r7,4
    4dd0:	100d883a 	mov	r6,r2
    4dd4:	180f883a 	mov	r7,r3
    4dd8:	0009fa80 	call	9fa8 <__muldf3>
    4ddc:	1011883a 	mov	r8,r2
    4de0:	1813883a 	mov	r9,r3
    4de4:	1029883a 	mov	r20,r2
    4de8:	182b883a 	mov	r21,r3
    4dec:	8001e526 	beq	r16,zero,5584 <_dtoa_r+0x14a0>
    4df0:	05800084 	movi	r22,2
    4df4:	04400074 	movhi	r17,1
    4df8:	8c491e04 	addi	r17,r17,9336
    4dfc:	8080004c 	andi	r2,r16,1
    4e00:	1005003a 	cmpeq	r2,r2,zero
    4e04:	1000081e 	bne	r2,zero,4e28 <_dtoa_r+0xd44>
    4e08:	89800017 	ldw	r6,0(r17)
    4e0c:	89c00117 	ldw	r7,4(r17)
    4e10:	480b883a 	mov	r5,r9
    4e14:	4009883a 	mov	r4,r8
    4e18:	0009fa80 	call	9fa8 <__muldf3>
    4e1c:	1011883a 	mov	r8,r2
    4e20:	b5800044 	addi	r22,r22,1
    4e24:	1813883a 	mov	r9,r3
    4e28:	8021d07a 	srai	r16,r16,1
    4e2c:	8c400204 	addi	r17,r17,8
    4e30:	803ff21e 	bne	r16,zero,4dfc <_dtoa_r+0xd18>
    4e34:	4029883a 	mov	r20,r8
    4e38:	482b883a 	mov	r21,r9
    4e3c:	003dca06 	br	4568 <_dtoa_r+0x484>
    4e40:	d9000817 	ldw	r4,32(sp)
    4e44:	2005003a 	cmpeq	r2,r4,zero
    4e48:	1001f61e 	bne	r2,zero,5624 <_dtoa_r+0x1540>
    4e4c:	dc001117 	ldw	r16,68(sp)
    4e50:	dc801017 	ldw	r18,64(sp)
    4e54:	18c10cc4 	addi	r3,r3,1075
    4e58:	003f6106 	br	4be0 <_dtoa_r+0xafc>
    4e5c:	d8000b15 	stw	zero,44(sp)
    4e60:	d9802617 	ldw	r6,152(sp)
    4e64:	d8c00d17 	ldw	r3,52(sp)
    4e68:	30800044 	addi	r2,r6,1
    4e6c:	18ad883a 	add	r22,r3,r2
    4e70:	b13fffc4 	addi	r4,r22,-1
    4e74:	d9000e15 	stw	r4,56(sp)
    4e78:	0581f60e 	bge	zero,r22,5654 <_dtoa_r+0x1570>
    4e7c:	dd800f15 	stw	r22,60(sp)
    4e80:	003f3006 	br	4b44 <_dtoa_r+0xa60>
    4e84:	d8000b15 	stw	zero,44(sp)
    4e88:	d9002617 	ldw	r4,152(sp)
    4e8c:	0101eb0e 	bge	zero,r4,563c <_dtoa_r+0x1558>
    4e90:	202d883a 	mov	r22,r4
    4e94:	d9000e15 	stw	r4,56(sp)
    4e98:	d9000f15 	stw	r4,60(sp)
    4e9c:	003f2906 	br	4b44 <_dtoa_r+0xa60>
    4ea0:	01800044 	movi	r6,1
    4ea4:	d9800b15 	stw	r6,44(sp)
    4ea8:	003ff706 	br	4e88 <_dtoa_r+0xda4>
    4eac:	01000044 	movi	r4,1
    4eb0:	d9000b15 	stw	r4,44(sp)
    4eb4:	003fea06 	br	4e60 <_dtoa_r+0xd7c>
    4eb8:	04000c0e 	bge	zero,r16,4eec <_dtoa_r+0xe08>
    4ebc:	d9400717 	ldw	r5,28(sp)
    4ec0:	d9001617 	ldw	r4,88(sp)
    4ec4:	01800044 	movi	r6,1
    4ec8:	0007a840 	call	7a84 <__lshift>
    4ecc:	1009883a 	mov	r4,r2
    4ed0:	900b883a 	mov	r5,r18
    4ed4:	d8800715 	stw	r2,28(sp)
    4ed8:	000729c0 	call	729c <__mcmp>
    4edc:	0081e00e 	bge	zero,r2,5660 <_dtoa_r+0x157c>
    4ee0:	bdc00044 	addi	r23,r23,1
    4ee4:	00800e84 	movi	r2,58
    4ee8:	b881a226 	beq	r23,r2,5574 <_dtoa_r+0x1490>
    4eec:	b7000044 	addi	fp,r22,1
    4ef0:	b5c00005 	stb	r23,0(r22)
    4ef4:	003f7406 	br	4cc8 <_dtoa_r+0xbe4>
    4ef8:	00800e44 	movi	r2,57
    4efc:	b8819d26 	beq	r23,r2,5574 <_dtoa_r+0x1490>
    4f00:	053ffa0e 	bge	zero,r20,4eec <_dtoa_r+0xe08>
    4f04:	8dc00c44 	addi	r23,r17,49
    4f08:	003ff806 	br	4eec <_dtoa_r+0xe08>
    4f0c:	d9001617 	ldw	r4,88(sp)
    4f10:	a80b883a 	mov	r5,r21
    4f14:	04000044 	movi	r16,1
    4f18:	00071400 	call	7140 <_Bfree>
    4f1c:	003edf06 	br	4a9c <_dtoa_r+0x9b8>
    4f20:	d9001617 	ldw	r4,88(sp)
    4f24:	980b883a 	mov	r5,r19
    4f28:	01800284 	movi	r6,10
    4f2c:	000f883a 	mov	r7,zero
    4f30:	0007df40 	call	7df4 <__multadd>
    4f34:	1027883a 	mov	r19,r2
    4f38:	d8800615 	stw	r2,24(sp)
    4f3c:	003ebb06 	br	4a2c <_dtoa_r+0x948>
    4f40:	d9801117 	ldw	r6,68(sp)
    4f44:	d8800d17 	ldw	r2,52(sp)
    4f48:	d8000915 	stw	zero,36(sp)
    4f4c:	308dc83a 	sub	r6,r6,r2
    4f50:	0087c83a 	sub	r3,zero,r2
    4f54:	d9801115 	stw	r6,68(sp)
    4f58:	d8c01015 	stw	r3,64(sp)
    4f5c:	003cfe06 	br	4358 <_dtoa_r+0x274>
    4f60:	018dc83a 	sub	r6,zero,r6
    4f64:	d9801115 	stw	r6,68(sp)
    4f68:	d8000a15 	stw	zero,40(sp)
    4f6c:	003cf306 	br	433c <_dtoa_r+0x258>
    4f70:	d9000d17 	ldw	r4,52(sp)
    4f74:	000a86c0 	call	a86c <__floatsidf>
    4f78:	880b883a 	mov	r5,r17
    4f7c:	8009883a 	mov	r4,r16
    4f80:	180f883a 	mov	r7,r3
    4f84:	100d883a 	mov	r6,r2
    4f88:	000a64c0 	call	a64c <__nedf2>
    4f8c:	103ce126 	beq	r2,zero,4314 <_dtoa_r+0x230>
    4f90:	d9800d17 	ldw	r6,52(sp)
    4f94:	31bfffc4 	addi	r6,r6,-1
    4f98:	d9800d15 	stw	r6,52(sp)
    4f9c:	003cdd06 	br	4314 <_dtoa_r+0x230>
    4fa0:	d9000717 	ldw	r4,28(sp)
    4fa4:	900b883a 	mov	r5,r18
    4fa8:	000729c0 	call	729c <__mcmp>
    4fac:	103e8d0e 	bge	r2,zero,49e4 <_dtoa_r+0x900>
    4fb0:	d9400717 	ldw	r5,28(sp)
    4fb4:	d9001617 	ldw	r4,88(sp)
    4fb8:	01800284 	movi	r6,10
    4fbc:	000f883a 	mov	r7,zero
    4fc0:	0007df40 	call	7df4 <__multadd>
    4fc4:	d9800d17 	ldw	r6,52(sp)
    4fc8:	d8800715 	stw	r2,28(sp)
    4fcc:	31bfffc4 	addi	r6,r6,-1
    4fd0:	d9800d15 	stw	r6,52(sp)
    4fd4:	b001a71e 	bne	r22,zero,5674 <_dtoa_r+0x1590>
    4fd8:	d8800e17 	ldw	r2,56(sp)
    4fdc:	d8800f15 	stw	r2,60(sp)
    4fe0:	003e8006 	br	49e4 <_dtoa_r+0x900>
    4fe4:	90800417 	ldw	r2,16(r18)
    4fe8:	1085883a 	add	r2,r2,r2
    4fec:	1085883a 	add	r2,r2,r2
    4ff0:	1485883a 	add	r2,r2,r18
    4ff4:	11000417 	ldw	r4,16(r2)
    4ff8:	00071680 	call	7168 <__hi0bits>
    4ffc:	00c00804 	movi	r3,32
    5000:	1887c83a 	sub	r3,r3,r2
    5004:	003e5a06 	br	4970 <_dtoa_r+0x88c>
    5008:	d9400717 	ldw	r5,28(sp)
    500c:	d9801017 	ldw	r6,64(sp)
    5010:	d9001617 	ldw	r4,88(sp)
    5014:	0007ef40 	call	7ef4 <__pow5mult>
    5018:	d8800715 	stw	r2,28(sp)
    501c:	003e4306 	br	492c <_dtoa_r+0x848>
    5020:	d9800f17 	ldw	r6,60(sp)
    5024:	d8800d17 	ldw	r2,52(sp)
    5028:	d9800315 	stw	r6,12(sp)
    502c:	d8800415 	stw	r2,16(sp)
    5030:	d8c00b17 	ldw	r3,44(sp)
    5034:	1805003a 	cmpeq	r2,r3,zero
    5038:	1000e21e 	bne	r2,zero,53c4 <_dtoa_r+0x12e0>
    503c:	d9000317 	ldw	r4,12(sp)
    5040:	0005883a 	mov	r2,zero
    5044:	00cff834 	movhi	r3,16352
    5048:	200c90fa 	slli	r6,r4,3
    504c:	01000074 	movhi	r4,1
    5050:	2108ec04 	addi	r4,r4,9136
    5054:	180b883a 	mov	r5,r3
    5058:	310d883a 	add	r6,r6,r4
    505c:	327fff17 	ldw	r9,-4(r6)
    5060:	323ffe17 	ldw	r8,-8(r6)
    5064:	1009883a 	mov	r4,r2
    5068:	480f883a 	mov	r7,r9
    506c:	400d883a 	mov	r6,r8
    5070:	000a36c0 	call	a36c <__divdf3>
    5074:	180b883a 	mov	r5,r3
    5078:	b00d883a 	mov	r6,r22
    507c:	b80f883a 	mov	r7,r23
    5080:	1009883a 	mov	r4,r2
    5084:	0009eb40 	call	9eb4 <__subdf3>
    5088:	a80b883a 	mov	r5,r21
    508c:	a009883a 	mov	r4,r20
    5090:	d8c01915 	stw	r3,100(sp)
    5094:	d8801815 	stw	r2,96(sp)
    5098:	000a9640 	call	a964 <__fixdfsi>
    509c:	1009883a 	mov	r4,r2
    50a0:	1027883a 	mov	r19,r2
    50a4:	000a86c0 	call	a86c <__floatsidf>
    50a8:	a80b883a 	mov	r5,r21
    50ac:	a009883a 	mov	r4,r20
    50b0:	180f883a 	mov	r7,r3
    50b4:	100d883a 	mov	r6,r2
    50b8:	0009eb40 	call	9eb4 <__subdf3>
    50bc:	d9801817 	ldw	r6,96(sp)
    50c0:	1823883a 	mov	r17,r3
    50c4:	d8801415 	stw	r2,80(sp)
    50c8:	302d883a 	mov	r22,r6
    50cc:	d9800517 	ldw	r6,20(sp)
    50d0:	9cc00c04 	addi	r19,r19,48
    50d4:	dc401515 	stw	r17,84(sp)
    50d8:	d8c01917 	ldw	r3,100(sp)
    50dc:	34c00005 	stb	r19,0(r6)
    50e0:	d8800517 	ldw	r2,20(sp)
    50e4:	d9401917 	ldw	r5,100(sp)
    50e8:	d9801417 	ldw	r6,80(sp)
    50ec:	b009883a 	mov	r4,r22
    50f0:	880f883a 	mov	r7,r17
    50f4:	182f883a 	mov	r23,r3
    50f8:	17000044 	addi	fp,r2,1
    50fc:	000a6d40 	call	a6d4 <__gtdf2>
    5100:	00804e16 	blt	zero,r2,523c <_dtoa_r+0x1158>
    5104:	d9801417 	ldw	r6,80(sp)
    5108:	0005883a 	mov	r2,zero
    510c:	00cffc34 	movhi	r3,16368
    5110:	180b883a 	mov	r5,r3
    5114:	880f883a 	mov	r7,r17
    5118:	1009883a 	mov	r4,r2
    511c:	0009eb40 	call	9eb4 <__subdf3>
    5120:	d9401917 	ldw	r5,100(sp)
    5124:	180f883a 	mov	r7,r3
    5128:	b009883a 	mov	r4,r22
    512c:	100d883a 	mov	r6,r2
    5130:	000a6d40 	call	a6d4 <__gtdf2>
    5134:	00bda216 	blt	zero,r2,47c0 <_dtoa_r+0x6dc>
    5138:	d8c00317 	ldw	r3,12(sp)
    513c:	00800044 	movi	r2,1
    5140:	10c01216 	blt	r2,r3,518c <_dtoa_r+0x10a8>
    5144:	003d4506 	br	465c <_dtoa_r+0x578>
    5148:	d9801417 	ldw	r6,80(sp)
    514c:	0005883a 	mov	r2,zero
    5150:	00cffc34 	movhi	r3,16368
    5154:	180b883a 	mov	r5,r3
    5158:	880f883a 	mov	r7,r17
    515c:	1009883a 	mov	r4,r2
    5160:	0009eb40 	call	9eb4 <__subdf3>
    5164:	d9c01b17 	ldw	r7,108(sp)
    5168:	180b883a 	mov	r5,r3
    516c:	1009883a 	mov	r4,r2
    5170:	b00d883a 	mov	r6,r22
    5174:	000a7e40 	call	a7e4 <__ltdf2>
    5178:	103d9116 	blt	r2,zero,47c0 <_dtoa_r+0x6dc>
    517c:	d9800517 	ldw	r6,20(sp)
    5180:	d9000317 	ldw	r4,12(sp)
    5184:	3105883a 	add	r2,r6,r4
    5188:	e0bd3426 	beq	fp,r2,465c <_dtoa_r+0x578>
    518c:	04500934 	movhi	r17,16420
    5190:	0021883a 	mov	r16,zero
    5194:	b80b883a 	mov	r5,r23
    5198:	b009883a 	mov	r4,r22
    519c:	800d883a 	mov	r6,r16
    51a0:	880f883a 	mov	r7,r17
    51a4:	0009fa80 	call	9fa8 <__muldf3>
    51a8:	d9401517 	ldw	r5,84(sp)
    51ac:	d9001417 	ldw	r4,80(sp)
    51b0:	880f883a 	mov	r7,r17
    51b4:	000d883a 	mov	r6,zero
    51b8:	d8801a15 	stw	r2,104(sp)
    51bc:	d8c01b15 	stw	r3,108(sp)
    51c0:	0009fa80 	call	9fa8 <__muldf3>
    51c4:	180b883a 	mov	r5,r3
    51c8:	1009883a 	mov	r4,r2
    51cc:	1823883a 	mov	r17,r3
    51d0:	1021883a 	mov	r16,r2
    51d4:	000a9640 	call	a964 <__fixdfsi>
    51d8:	1009883a 	mov	r4,r2
    51dc:	102b883a 	mov	r21,r2
    51e0:	000a86c0 	call	a86c <__floatsidf>
    51e4:	880b883a 	mov	r5,r17
    51e8:	8009883a 	mov	r4,r16
    51ec:	180f883a 	mov	r7,r3
    51f0:	100d883a 	mov	r6,r2
    51f4:	0009eb40 	call	9eb4 <__subdf3>
    51f8:	1021883a 	mov	r16,r2
    51fc:	d9001b17 	ldw	r4,108(sp)
    5200:	1823883a 	mov	r17,r3
    5204:	dc001415 	stw	r16,80(sp)
    5208:	ad400c04 	addi	r21,r21,48
    520c:	dc401515 	stw	r17,84(sp)
    5210:	d8801a17 	ldw	r2,104(sp)
    5214:	e5400005 	stb	r21,0(fp)
    5218:	202f883a 	mov	r23,r4
    521c:	d9c01b17 	ldw	r7,108(sp)
    5220:	d9001417 	ldw	r4,80(sp)
    5224:	880b883a 	mov	r5,r17
    5228:	100d883a 	mov	r6,r2
    522c:	102d883a 	mov	r22,r2
    5230:	e7000044 	addi	fp,fp,1
    5234:	000a7e40 	call	a7e4 <__ltdf2>
    5238:	103fc30e 	bge	r2,zero,5148 <_dtoa_r+0x1064>
    523c:	d9000417 	ldw	r4,16(sp)
    5240:	d9000d15 	stw	r4,52(sp)
    5244:	003d7106 	br	480c <_dtoa_r+0x728>
    5248:	d9801717 	ldw	r6,92(sp)
    524c:	00800084 	movi	r2,2
    5250:	11bde60e 	bge	r2,r6,49ec <_dtoa_r+0x908>
    5254:	203cfb1e 	bne	r4,zero,4644 <_dtoa_r+0x560>
    5258:	d9001617 	ldw	r4,88(sp)
    525c:	900b883a 	mov	r5,r18
    5260:	01800144 	movi	r6,5
    5264:	000f883a 	mov	r7,zero
    5268:	0007df40 	call	7df4 <__multadd>
    526c:	d9000717 	ldw	r4,28(sp)
    5270:	100b883a 	mov	r5,r2
    5274:	1025883a 	mov	r18,r2
    5278:	000729c0 	call	729c <__mcmp>
    527c:	00bcf10e 	bge	zero,r2,4644 <_dtoa_r+0x560>
    5280:	d8c00d17 	ldw	r3,52(sp)
    5284:	d9000517 	ldw	r4,20(sp)
    5288:	d8000615 	stw	zero,24(sp)
    528c:	18c00044 	addi	r3,r3,1
    5290:	d8c00d15 	stw	r3,52(sp)
    5294:	00800c44 	movi	r2,49
    5298:	27000044 	addi	fp,r4,1
    529c:	20800005 	stb	r2,0(r4)
    52a0:	003e8906 	br	4cc8 <_dtoa_r+0xbe4>
    52a4:	d8c00517 	ldw	r3,20(sp)
    52a8:	003bc206 	br	41b4 <_dtoa_r+0xd0>
    52ac:	01800074 	movhi	r6,1
    52b0:	31891e04 	addi	r6,r6,9336
    52b4:	30c00917 	ldw	r3,36(r6)
    52b8:	30800817 	ldw	r2,32(r6)
    52bc:	d9001217 	ldw	r4,72(sp)
    52c0:	d9401317 	ldw	r5,76(sp)
    52c4:	180f883a 	mov	r7,r3
    52c8:	100d883a 	mov	r6,r2
    52cc:	000a36c0 	call	a36c <__divdf3>
    52d0:	948003cc 	andi	r18,r18,15
    52d4:	058000c4 	movi	r22,3
    52d8:	1029883a 	mov	r20,r2
    52dc:	182b883a 	mov	r21,r3
    52e0:	003c8906 	br	4508 <_dtoa_r+0x424>
    52e4:	d9001017 	ldw	r4,64(sp)
    52e8:	d9800917 	ldw	r6,36(sp)
    52ec:	0025883a 	mov	r18,zero
    52f0:	1105c83a 	sub	r2,r2,r4
    52f4:	2089883a 	add	r4,r4,r2
    52f8:	308d883a 	add	r6,r6,r2
    52fc:	d9001015 	stw	r4,64(sp)
    5300:	d9800915 	stw	r6,36(sp)
    5304:	003e3206 	br	4bd0 <_dtoa_r+0xaec>
    5308:	28800044 	addi	r2,r5,1
    530c:	27000044 	addi	fp,r4,1
    5310:	20800005 	stb	r2,0(r4)
    5314:	003e6c06 	br	4cc8 <_dtoa_r+0xbe4>
    5318:	d8800f17 	ldw	r2,60(sp)
    531c:	00bce016 	blt	zero,r2,46a0 <_dtoa_r+0x5bc>
    5320:	d9800f17 	ldw	r6,60(sp)
    5324:	303cc51e 	bne	r6,zero,463c <_dtoa_r+0x558>
    5328:	0005883a 	mov	r2,zero
    532c:	00d00534 	movhi	r3,16404
    5330:	980b883a 	mov	r5,r19
    5334:	180f883a 	mov	r7,r3
    5338:	9009883a 	mov	r4,r18
    533c:	100d883a 	mov	r6,r2
    5340:	0009fa80 	call	9fa8 <__muldf3>
    5344:	180b883a 	mov	r5,r3
    5348:	a80f883a 	mov	r7,r21
    534c:	1009883a 	mov	r4,r2
    5350:	a00d883a 	mov	r6,r20
    5354:	000a75c0 	call	a75c <__gedf2>
    5358:	103cb80e 	bge	r2,zero,463c <_dtoa_r+0x558>
    535c:	0027883a 	mov	r19,zero
    5360:	0025883a 	mov	r18,zero
    5364:	003fc606 	br	5280 <_dtoa_r+0x119c>
    5368:	99400117 	ldw	r5,4(r19)
    536c:	d9001617 	ldw	r4,88(sp)
    5370:	00076c00 	call	76c0 <_Balloc>
    5374:	99800417 	ldw	r6,16(r19)
    5378:	11000304 	addi	r4,r2,12
    537c:	99400304 	addi	r5,r19,12
    5380:	318d883a 	add	r6,r6,r6
    5384:	318d883a 	add	r6,r6,r6
    5388:	31800204 	addi	r6,r6,8
    538c:	1023883a 	mov	r17,r2
    5390:	0001c5c0 	call	1c5c <memcpy>
    5394:	d9001617 	ldw	r4,88(sp)
    5398:	880b883a 	mov	r5,r17
    539c:	01800044 	movi	r6,1
    53a0:	0007a840 	call	7a84 <__lshift>
    53a4:	100b883a 	mov	r5,r2
    53a8:	003d9c06 	br	4a1c <_dtoa_r+0x938>
    53ac:	00800e44 	movi	r2,57
    53b0:	b8807026 	beq	r23,r2,5574 <_dtoa_r+0x1490>
    53b4:	b8800044 	addi	r2,r23,1
    53b8:	b7000044 	addi	fp,r22,1
    53bc:	b0800005 	stb	r2,0(r22)
    53c0:	003e4106 	br	4cc8 <_dtoa_r+0xbe4>
    53c4:	d8800317 	ldw	r2,12(sp)
    53c8:	01800074 	movhi	r6,1
    53cc:	3188ec04 	addi	r6,r6,9136
    53d0:	b009883a 	mov	r4,r22
    53d4:	100e90fa 	slli	r7,r2,3
    53d8:	b80b883a 	mov	r5,r23
    53dc:	398f883a 	add	r7,r7,r6
    53e0:	38bffe17 	ldw	r2,-8(r7)
    53e4:	d9800517 	ldw	r6,20(sp)
    53e8:	38ffff17 	ldw	r3,-4(r7)
    53ec:	37000044 	addi	fp,r6,1
    53f0:	180f883a 	mov	r7,r3
    53f4:	100d883a 	mov	r6,r2
    53f8:	0009fa80 	call	9fa8 <__muldf3>
    53fc:	a80b883a 	mov	r5,r21
    5400:	a009883a 	mov	r4,r20
    5404:	182f883a 	mov	r23,r3
    5408:	102d883a 	mov	r22,r2
    540c:	000a9640 	call	a964 <__fixdfsi>
    5410:	1009883a 	mov	r4,r2
    5414:	1027883a 	mov	r19,r2
    5418:	000a86c0 	call	a86c <__floatsidf>
    541c:	a80b883a 	mov	r5,r21
    5420:	a009883a 	mov	r4,r20
    5424:	180f883a 	mov	r7,r3
    5428:	100d883a 	mov	r6,r2
    542c:	0009eb40 	call	9eb4 <__subdf3>
    5430:	180b883a 	mov	r5,r3
    5434:	d8c00517 	ldw	r3,20(sp)
    5438:	9cc00c04 	addi	r19,r19,48
    543c:	1009883a 	mov	r4,r2
    5440:	1cc00005 	stb	r19,0(r3)
    5444:	2021883a 	mov	r16,r4
    5448:	d9000317 	ldw	r4,12(sp)
    544c:	00800044 	movi	r2,1
    5450:	2823883a 	mov	r17,r5
    5454:	20802226 	beq	r4,r2,54e0 <_dtoa_r+0x13fc>
    5458:	1029883a 	mov	r20,r2
    545c:	0005883a 	mov	r2,zero
    5460:	00d00934 	movhi	r3,16420
    5464:	180f883a 	mov	r7,r3
    5468:	100d883a 	mov	r6,r2
    546c:	880b883a 	mov	r5,r17
    5470:	8009883a 	mov	r4,r16
    5474:	0009fa80 	call	9fa8 <__muldf3>
    5478:	180b883a 	mov	r5,r3
    547c:	1009883a 	mov	r4,r2
    5480:	1823883a 	mov	r17,r3
    5484:	1021883a 	mov	r16,r2
    5488:	000a9640 	call	a964 <__fixdfsi>
    548c:	1009883a 	mov	r4,r2
    5490:	102b883a 	mov	r21,r2
    5494:	000a86c0 	call	a86c <__floatsidf>
    5498:	880b883a 	mov	r5,r17
    549c:	8009883a 	mov	r4,r16
    54a0:	180f883a 	mov	r7,r3
    54a4:	100d883a 	mov	r6,r2
    54a8:	0009eb40 	call	9eb4 <__subdf3>
    54ac:	180b883a 	mov	r5,r3
    54b0:	d8c00517 	ldw	r3,20(sp)
    54b4:	1009883a 	mov	r4,r2
    54b8:	ad400c04 	addi	r21,r21,48
    54bc:	1d05883a 	add	r2,r3,r20
    54c0:	15400005 	stb	r21,0(r2)
    54c4:	2021883a 	mov	r16,r4
    54c8:	d9000317 	ldw	r4,12(sp)
    54cc:	a5000044 	addi	r20,r20,1
    54d0:	2823883a 	mov	r17,r5
    54d4:	a13fe11e 	bne	r20,r4,545c <_dtoa_r+0x1378>
    54d8:	e505883a 	add	r2,fp,r20
    54dc:	173fffc4 	addi	fp,r2,-1
    54e0:	0025883a 	mov	r18,zero
    54e4:	04cff834 	movhi	r19,16352
    54e8:	b009883a 	mov	r4,r22
    54ec:	b80b883a 	mov	r5,r23
    54f0:	900d883a 	mov	r6,r18
    54f4:	980f883a 	mov	r7,r19
    54f8:	0009f340 	call	9f34 <__adddf3>
    54fc:	180b883a 	mov	r5,r3
    5500:	1009883a 	mov	r4,r2
    5504:	800d883a 	mov	r6,r16
    5508:	880f883a 	mov	r7,r17
    550c:	000a7e40 	call	a7e4 <__ltdf2>
    5510:	103cab16 	blt	r2,zero,47c0 <_dtoa_r+0x6dc>
    5514:	0009883a 	mov	r4,zero
    5518:	980b883a 	mov	r5,r19
    551c:	b80f883a 	mov	r7,r23
    5520:	b00d883a 	mov	r6,r22
    5524:	0009eb40 	call	9eb4 <__subdf3>
    5528:	180b883a 	mov	r5,r3
    552c:	880f883a 	mov	r7,r17
    5530:	1009883a 	mov	r4,r2
    5534:	800d883a 	mov	r6,r16
    5538:	000a6d40 	call	a6d4 <__gtdf2>
    553c:	00bc470e 	bge	zero,r2,465c <_dtoa_r+0x578>
    5540:	00c00c04 	movi	r3,48
    5544:	e73fffc4 	addi	fp,fp,-1
    5548:	e0800007 	ldb	r2,0(fp)
    554c:	10fffd26 	beq	r2,r3,5544 <_dtoa_r+0x1460>
    5550:	d9800417 	ldw	r6,16(sp)
    5554:	e7000044 	addi	fp,fp,1
    5558:	d9800d15 	stw	r6,52(sp)
    555c:	003cab06 	br	480c <_dtoa_r+0x728>
    5560:	d8c00f17 	ldw	r3,60(sp)
    5564:	d9001117 	ldw	r4,68(sp)
    5568:	20e1c83a 	sub	r16,r4,r3
    556c:	0007883a 	mov	r3,zero
    5570:	003d9b06 	br	4be0 <_dtoa_r+0xafc>
    5574:	00800e44 	movi	r2,57
    5578:	b0800005 	stb	r2,0(r22)
    557c:	b5800044 	addi	r22,r22,1
    5580:	003dc106 	br	4c88 <_dtoa_r+0xba4>
    5584:	05800084 	movi	r22,2
    5588:	003bf706 	br	4568 <_dtoa_r+0x484>
    558c:	d9000f17 	ldw	r4,60(sp)
    5590:	013c000e 	bge	zero,r4,4594 <_dtoa_r+0x4b0>
    5594:	d9800e17 	ldw	r6,56(sp)
    5598:	01bc300e 	bge	zero,r6,465c <_dtoa_r+0x578>
    559c:	0005883a 	mov	r2,zero
    55a0:	00d00934 	movhi	r3,16420
    55a4:	a80b883a 	mov	r5,r21
    55a8:	180f883a 	mov	r7,r3
    55ac:	a009883a 	mov	r4,r20
    55b0:	100d883a 	mov	r6,r2
    55b4:	0009fa80 	call	9fa8 <__muldf3>
    55b8:	b1000044 	addi	r4,r22,1
    55bc:	1021883a 	mov	r16,r2
    55c0:	1823883a 	mov	r17,r3
    55c4:	000a86c0 	call	a86c <__floatsidf>
    55c8:	880b883a 	mov	r5,r17
    55cc:	8009883a 	mov	r4,r16
    55d0:	180f883a 	mov	r7,r3
    55d4:	100d883a 	mov	r6,r2
    55d8:	0009fa80 	call	9fa8 <__muldf3>
    55dc:	0011883a 	mov	r8,zero
    55e0:	02500734 	movhi	r9,16412
    55e4:	180b883a 	mov	r5,r3
    55e8:	480f883a 	mov	r7,r9
    55ec:	1009883a 	mov	r4,r2
    55f0:	400d883a 	mov	r6,r8
    55f4:	0009f340 	call	9f34 <__adddf3>
    55f8:	102d883a 	mov	r22,r2
    55fc:	00bf3034 	movhi	r2,64704
    5600:	10ef883a 	add	r23,r2,r3
    5604:	d8800d17 	ldw	r2,52(sp)
    5608:	d8c00e17 	ldw	r3,56(sp)
    560c:	8029883a 	mov	r20,r16
    5610:	10bfffc4 	addi	r2,r2,-1
    5614:	882b883a 	mov	r21,r17
    5618:	d8800415 	stw	r2,16(sp)
    561c:	d8c00315 	stw	r3,12(sp)
    5620:	003e8306 	br	5030 <_dtoa_r+0xf4c>
    5624:	d8800117 	ldw	r2,4(sp)
    5628:	dc001117 	ldw	r16,68(sp)
    562c:	dc801017 	ldw	r18,64(sp)
    5630:	00c00d84 	movi	r3,54
    5634:	1887c83a 	sub	r3,r3,r2
    5638:	003d6906 	br	4be0 <_dtoa_r+0xafc>
    563c:	01800044 	movi	r6,1
    5640:	3021883a 	mov	r16,r6
    5644:	d9800f15 	stw	r6,60(sp)
    5648:	d9802615 	stw	r6,152(sp)
    564c:	d9800e15 	stw	r6,56(sp)
    5650:	003b9306 	br	44a0 <_dtoa_r+0x3bc>
    5654:	b021883a 	mov	r16,r22
    5658:	dd800f15 	stw	r22,60(sp)
    565c:	003b9006 	br	44a0 <_dtoa_r+0x3bc>
    5660:	103e221e 	bne	r2,zero,4eec <_dtoa_r+0xe08>
    5664:	b880004c 	andi	r2,r23,1
    5668:	1005003a 	cmpeq	r2,r2,zero
    566c:	103e1f1e 	bne	r2,zero,4eec <_dtoa_r+0xe08>
    5670:	003e1b06 	br	4ee0 <_dtoa_r+0xdfc>
    5674:	d9001617 	ldw	r4,88(sp)
    5678:	980b883a 	mov	r5,r19
    567c:	01800284 	movi	r6,10
    5680:	000f883a 	mov	r7,zero
    5684:	0007df40 	call	7df4 <__multadd>
    5688:	d8c00e17 	ldw	r3,56(sp)
    568c:	1027883a 	mov	r19,r2
    5690:	d8c00f15 	stw	r3,60(sp)
    5694:	003cd306 	br	49e4 <_dtoa_r+0x900>

00005698 <_fflush_r>:
    5698:	defffb04 	addi	sp,sp,-20
    569c:	dcc00315 	stw	r19,12(sp)
    56a0:	dc800215 	stw	r18,8(sp)
    56a4:	dfc00415 	stw	ra,16(sp)
    56a8:	dc400115 	stw	r17,4(sp)
    56ac:	dc000015 	stw	r16,0(sp)
    56b0:	2027883a 	mov	r19,r4
    56b4:	2825883a 	mov	r18,r5
    56b8:	20000226 	beq	r4,zero,56c4 <_fflush_r+0x2c>
    56bc:	20800e17 	ldw	r2,56(r4)
    56c0:	10005626 	beq	r2,zero,581c <_fflush_r+0x184>
    56c4:	9100030b 	ldhu	r4,12(r18)
    56c8:	20ffffcc 	andi	r3,r4,65535
    56cc:	18e0001c 	xori	r3,r3,32768
    56d0:	18e00004 	addi	r3,r3,-32768
    56d4:	1880020c 	andi	r2,r3,8
    56d8:	1000261e 	bne	r2,zero,5774 <_fflush_r+0xdc>
    56dc:	90c00117 	ldw	r3,4(r18)
    56e0:	20820014 	ori	r2,r4,2048
    56e4:	9080030d 	sth	r2,12(r18)
    56e8:	1009883a 	mov	r4,r2
    56ec:	00c0400e 	bge	zero,r3,57f0 <_fflush_r+0x158>
    56f0:	92000a17 	ldw	r8,40(r18)
    56f4:	40004026 	beq	r8,zero,57f8 <_fflush_r+0x160>
    56f8:	2084000c 	andi	r2,r4,4096
    56fc:	10005326 	beq	r2,zero,584c <_fflush_r+0x1b4>
    5700:	94001417 	ldw	r16,80(r18)
    5704:	9080030b 	ldhu	r2,12(r18)
    5708:	1080010c 	andi	r2,r2,4
    570c:	1000481e 	bne	r2,zero,5830 <_fflush_r+0x198>
    5710:	91400717 	ldw	r5,28(r18)
    5714:	9809883a 	mov	r4,r19
    5718:	800d883a 	mov	r6,r16
    571c:	000f883a 	mov	r7,zero
    5720:	403ee83a 	callr	r8
    5724:	8080261e 	bne	r16,r2,57c0 <_fflush_r+0x128>
    5728:	9080030b 	ldhu	r2,12(r18)
    572c:	91000417 	ldw	r4,16(r18)
    5730:	90000115 	stw	zero,4(r18)
    5734:	10bdffcc 	andi	r2,r2,63487
    5738:	10ffffcc 	andi	r3,r2,65535
    573c:	18c4000c 	andi	r3,r3,4096
    5740:	9080030d 	sth	r2,12(r18)
    5744:	91000015 	stw	r4,0(r18)
    5748:	18002b26 	beq	r3,zero,57f8 <_fflush_r+0x160>
    574c:	0007883a 	mov	r3,zero
    5750:	1805883a 	mov	r2,r3
    5754:	94001415 	stw	r16,80(r18)
    5758:	dfc00417 	ldw	ra,16(sp)
    575c:	dcc00317 	ldw	r19,12(sp)
    5760:	dc800217 	ldw	r18,8(sp)
    5764:	dc400117 	ldw	r17,4(sp)
    5768:	dc000017 	ldw	r16,0(sp)
    576c:	dec00504 	addi	sp,sp,20
    5770:	f800283a 	ret
    5774:	94400417 	ldw	r17,16(r18)
    5778:	88001f26 	beq	r17,zero,57f8 <_fflush_r+0x160>
    577c:	90800017 	ldw	r2,0(r18)
    5780:	18c000cc 	andi	r3,r3,3
    5784:	94400015 	stw	r17,0(r18)
    5788:	1461c83a 	sub	r16,r2,r17
    578c:	18002526 	beq	r3,zero,5824 <_fflush_r+0x18c>
    5790:	0005883a 	mov	r2,zero
    5794:	90800215 	stw	r2,8(r18)
    5798:	0400170e 	bge	zero,r16,57f8 <_fflush_r+0x160>
    579c:	90c00917 	ldw	r3,36(r18)
    57a0:	91400717 	ldw	r5,28(r18)
    57a4:	880d883a 	mov	r6,r17
    57a8:	800f883a 	mov	r7,r16
    57ac:	9809883a 	mov	r4,r19
    57b0:	183ee83a 	callr	r3
    57b4:	88a3883a 	add	r17,r17,r2
    57b8:	80a1c83a 	sub	r16,r16,r2
    57bc:	00bff616 	blt	zero,r2,5798 <_fflush_r+0x100>
    57c0:	9080030b 	ldhu	r2,12(r18)
    57c4:	00ffffc4 	movi	r3,-1
    57c8:	10801014 	ori	r2,r2,64
    57cc:	9080030d 	sth	r2,12(r18)
    57d0:	1805883a 	mov	r2,r3
    57d4:	dfc00417 	ldw	ra,16(sp)
    57d8:	dcc00317 	ldw	r19,12(sp)
    57dc:	dc800217 	ldw	r18,8(sp)
    57e0:	dc400117 	ldw	r17,4(sp)
    57e4:	dc000017 	ldw	r16,0(sp)
    57e8:	dec00504 	addi	sp,sp,20
    57ec:	f800283a 	ret
    57f0:	90800f17 	ldw	r2,60(r18)
    57f4:	00bfbe16 	blt	zero,r2,56f0 <_fflush_r+0x58>
    57f8:	0007883a 	mov	r3,zero
    57fc:	1805883a 	mov	r2,r3
    5800:	dfc00417 	ldw	ra,16(sp)
    5804:	dcc00317 	ldw	r19,12(sp)
    5808:	dc800217 	ldw	r18,8(sp)
    580c:	dc400117 	ldw	r17,4(sp)
    5810:	dc000017 	ldw	r16,0(sp)
    5814:	dec00504 	addi	sp,sp,20
    5818:	f800283a 	ret
    581c:	00059300 	call	5930 <__sinit>
    5820:	003fa806 	br	56c4 <_fflush_r+0x2c>
    5824:	90800517 	ldw	r2,20(r18)
    5828:	90800215 	stw	r2,8(r18)
    582c:	003fda06 	br	5798 <_fflush_r+0x100>
    5830:	90800117 	ldw	r2,4(r18)
    5834:	90c00c17 	ldw	r3,48(r18)
    5838:	80a1c83a 	sub	r16,r16,r2
    583c:	183fb426 	beq	r3,zero,5710 <_fflush_r+0x78>
    5840:	90800f17 	ldw	r2,60(r18)
    5844:	80a1c83a 	sub	r16,r16,r2
    5848:	003fb106 	br	5710 <_fflush_r+0x78>
    584c:	91400717 	ldw	r5,28(r18)
    5850:	9809883a 	mov	r4,r19
    5854:	000d883a 	mov	r6,zero
    5858:	01c00044 	movi	r7,1
    585c:	403ee83a 	callr	r8
    5860:	1021883a 	mov	r16,r2
    5864:	00bfffc4 	movi	r2,-1
    5868:	80800226 	beq	r16,r2,5874 <_fflush_r+0x1dc>
    586c:	92000a17 	ldw	r8,40(r18)
    5870:	003fa406 	br	5704 <_fflush_r+0x6c>
    5874:	98c00017 	ldw	r3,0(r19)
    5878:	00800744 	movi	r2,29
    587c:	18bfde26 	beq	r3,r2,57f8 <_fflush_r+0x160>
    5880:	9080030b 	ldhu	r2,12(r18)
    5884:	8007883a 	mov	r3,r16
    5888:	10801014 	ori	r2,r2,64
    588c:	9080030d 	sth	r2,12(r18)
    5890:	003fcf06 	br	57d0 <_fflush_r+0x138>

00005894 <fflush>:
    5894:	01400034 	movhi	r5,0
    5898:	2955a604 	addi	r5,r5,22168
    589c:	2007883a 	mov	r3,r4
    58a0:	20000526 	beq	r4,zero,58b8 <fflush+0x24>
    58a4:	00800074 	movhi	r2,1
    58a8:	10919b04 	addi	r2,r2,18028
    58ac:	11000017 	ldw	r4,0(r2)
    58b0:	180b883a 	mov	r5,r3
    58b4:	00056981 	jmpi	5698 <_fflush_r>
    58b8:	00800074 	movhi	r2,1
    58bc:	10919c04 	addi	r2,r2,18032
    58c0:	11000017 	ldw	r4,0(r2)
    58c4:	00064641 	jmpi	6464 <_fwalk_reent>

000058c8 <std>:
    58c8:	00800074 	movhi	r2,1
    58cc:	10a20204 	addi	r2,r2,-30712
    58d0:	20800b15 	stw	r2,44(r4)
    58d4:	00800074 	movhi	r2,1
    58d8:	10a23d04 	addi	r2,r2,-30476
    58dc:	20800815 	stw	r2,32(r4)
    58e0:	00c00074 	movhi	r3,1
    58e4:	18e21e04 	addi	r3,r3,-30600
    58e8:	00800074 	movhi	r2,1
    58ec:	10a20404 	addi	r2,r2,-30704
    58f0:	2140030d 	sth	r5,12(r4)
    58f4:	2180038d 	sth	r6,14(r4)
    58f8:	20c00915 	stw	r3,36(r4)
    58fc:	20800a15 	stw	r2,40(r4)
    5900:	20000015 	stw	zero,0(r4)
    5904:	20000115 	stw	zero,4(r4)
    5908:	20000215 	stw	zero,8(r4)
    590c:	20000415 	stw	zero,16(r4)
    5910:	20000515 	stw	zero,20(r4)
    5914:	20000615 	stw	zero,24(r4)
    5918:	21000715 	stw	r4,28(r4)
    591c:	f800283a 	ret

00005920 <__sfp_lock_acquire>:
    5920:	f800283a 	ret

00005924 <__sfp_lock_release>:
    5924:	f800283a 	ret

00005928 <__sinit_lock_acquire>:
    5928:	f800283a 	ret

0000592c <__sinit_lock_release>:
    592c:	f800283a 	ret

00005930 <__sinit>:
    5930:	20800e17 	ldw	r2,56(r4)
    5934:	defffd04 	addi	sp,sp,-12
    5938:	dc400115 	stw	r17,4(sp)
    593c:	dc000015 	stw	r16,0(sp)
    5940:	dfc00215 	stw	ra,8(sp)
    5944:	04400044 	movi	r17,1
    5948:	01400104 	movi	r5,4
    594c:	000d883a 	mov	r6,zero
    5950:	2021883a 	mov	r16,r4
    5954:	2200bb04 	addi	r8,r4,748
    5958:	200f883a 	mov	r7,r4
    595c:	10000526 	beq	r2,zero,5974 <__sinit+0x44>
    5960:	dfc00217 	ldw	ra,8(sp)
    5964:	dc400117 	ldw	r17,4(sp)
    5968:	dc000017 	ldw	r16,0(sp)
    596c:	dec00304 	addi	sp,sp,12
    5970:	f800283a 	ret
    5974:	21000117 	ldw	r4,4(r4)
    5978:	00800034 	movhi	r2,0
    597c:	10968504 	addi	r2,r2,23060
    5980:	00c000c4 	movi	r3,3
    5984:	80800f15 	stw	r2,60(r16)
    5988:	80c0b915 	stw	r3,740(r16)
    598c:	8200ba15 	stw	r8,744(r16)
    5990:	84400e15 	stw	r17,56(r16)
    5994:	8000b815 	stw	zero,736(r16)
    5998:	00058c80 	call	58c8 <std>
    599c:	81000217 	ldw	r4,8(r16)
    59a0:	880d883a 	mov	r6,r17
    59a4:	800f883a 	mov	r7,r16
    59a8:	01400284 	movi	r5,10
    59ac:	00058c80 	call	58c8 <std>
    59b0:	81000317 	ldw	r4,12(r16)
    59b4:	800f883a 	mov	r7,r16
    59b8:	01400484 	movi	r5,18
    59bc:	01800084 	movi	r6,2
    59c0:	dfc00217 	ldw	ra,8(sp)
    59c4:	dc400117 	ldw	r17,4(sp)
    59c8:	dc000017 	ldw	r16,0(sp)
    59cc:	dec00304 	addi	sp,sp,12
    59d0:	00058c81 	jmpi	58c8 <std>

000059d4 <__fp_lock>:
    59d4:	0005883a 	mov	r2,zero
    59d8:	f800283a 	ret

000059dc <__fp_unlock>:
    59dc:	0005883a 	mov	r2,zero
    59e0:	f800283a 	ret

000059e4 <__fp_unlock_all>:
    59e4:	00800074 	movhi	r2,1
    59e8:	10919b04 	addi	r2,r2,18028
    59ec:	11000017 	ldw	r4,0(r2)
    59f0:	01400034 	movhi	r5,0
    59f4:	29567704 	addi	r5,r5,23004
    59f8:	000652c1 	jmpi	652c <_fwalk>

000059fc <__fp_lock_all>:
    59fc:	00800074 	movhi	r2,1
    5a00:	10919b04 	addi	r2,r2,18028
    5a04:	11000017 	ldw	r4,0(r2)
    5a08:	01400034 	movhi	r5,0
    5a0c:	29567504 	addi	r5,r5,22996
    5a10:	000652c1 	jmpi	652c <_fwalk>

00005a14 <_cleanup_r>:
    5a14:	01400074 	movhi	r5,1
    5a18:	29634c04 	addi	r5,r5,-29392
    5a1c:	000652c1 	jmpi	652c <_fwalk>

00005a20 <_cleanup>:
    5a20:	00800074 	movhi	r2,1
    5a24:	10919c04 	addi	r2,r2,18032
    5a28:	11000017 	ldw	r4,0(r2)
    5a2c:	0005a141 	jmpi	5a14 <_cleanup_r>

00005a30 <__sfmoreglue>:
    5a30:	defffc04 	addi	sp,sp,-16
    5a34:	dc400115 	stw	r17,4(sp)
    5a38:	2c401724 	muli	r17,r5,92
    5a3c:	dc800215 	stw	r18,8(sp)
    5a40:	2825883a 	mov	r18,r5
    5a44:	89400304 	addi	r5,r17,12
    5a48:	dc000015 	stw	r16,0(sp)
    5a4c:	dfc00315 	stw	ra,12(sp)
    5a50:	000683c0 	call	683c <_malloc_r>
    5a54:	0021883a 	mov	r16,zero
    5a58:	880d883a 	mov	r6,r17
    5a5c:	000b883a 	mov	r5,zero
    5a60:	10000626 	beq	r2,zero,5a7c <__sfmoreglue+0x4c>
    5a64:	11000304 	addi	r4,r2,12
    5a68:	14800115 	stw	r18,4(r2)
    5a6c:	10000015 	stw	zero,0(r2)
    5a70:	11000215 	stw	r4,8(r2)
    5a74:	1021883a 	mov	r16,r2
    5a78:	0001cfc0 	call	1cfc <memset>
    5a7c:	8005883a 	mov	r2,r16
    5a80:	dfc00317 	ldw	ra,12(sp)
    5a84:	dc800217 	ldw	r18,8(sp)
    5a88:	dc400117 	ldw	r17,4(sp)
    5a8c:	dc000017 	ldw	r16,0(sp)
    5a90:	dec00404 	addi	sp,sp,16
    5a94:	f800283a 	ret

00005a98 <__sfp>:
    5a98:	defffd04 	addi	sp,sp,-12
    5a9c:	00800074 	movhi	r2,1
    5aa0:	10919c04 	addi	r2,r2,18032
    5aa4:	dc000015 	stw	r16,0(sp)
    5aa8:	14000017 	ldw	r16,0(r2)
    5aac:	dc400115 	stw	r17,4(sp)
    5ab0:	dfc00215 	stw	ra,8(sp)
    5ab4:	80800e17 	ldw	r2,56(r16)
    5ab8:	2023883a 	mov	r17,r4
    5abc:	10002626 	beq	r2,zero,5b58 <__sfp+0xc0>
    5ac0:	8400b804 	addi	r16,r16,736
    5ac4:	80800117 	ldw	r2,4(r16)
    5ac8:	81000217 	ldw	r4,8(r16)
    5acc:	10ffffc4 	addi	r3,r2,-1
    5ad0:	18000916 	blt	r3,zero,5af8 <__sfp+0x60>
    5ad4:	2080030f 	ldh	r2,12(r4)
    5ad8:	10000b26 	beq	r2,zero,5b08 <__sfp+0x70>
    5adc:	017fffc4 	movi	r5,-1
    5ae0:	00000206 	br	5aec <__sfp+0x54>
    5ae4:	2080030f 	ldh	r2,12(r4)
    5ae8:	10000726 	beq	r2,zero,5b08 <__sfp+0x70>
    5aec:	18ffffc4 	addi	r3,r3,-1
    5af0:	21001704 	addi	r4,r4,92
    5af4:	197ffb1e 	bne	r3,r5,5ae4 <__sfp+0x4c>
    5af8:	80800017 	ldw	r2,0(r16)
    5afc:	10001926 	beq	r2,zero,5b64 <__sfp+0xcc>
    5b00:	1021883a 	mov	r16,r2
    5b04:	003fef06 	br	5ac4 <__sfp+0x2c>
    5b08:	00bfffc4 	movi	r2,-1
    5b0c:	00c00044 	movi	r3,1
    5b10:	2080038d 	sth	r2,14(r4)
    5b14:	20c0030d 	sth	r3,12(r4)
    5b18:	20000015 	stw	zero,0(r4)
    5b1c:	20000215 	stw	zero,8(r4)
    5b20:	20000115 	stw	zero,4(r4)
    5b24:	20000415 	stw	zero,16(r4)
    5b28:	20000515 	stw	zero,20(r4)
    5b2c:	20000615 	stw	zero,24(r4)
    5b30:	20000c15 	stw	zero,48(r4)
    5b34:	20000d15 	stw	zero,52(r4)
    5b38:	20001115 	stw	zero,68(r4)
    5b3c:	20001215 	stw	zero,72(r4)
    5b40:	2005883a 	mov	r2,r4
    5b44:	dfc00217 	ldw	ra,8(sp)
    5b48:	dc400117 	ldw	r17,4(sp)
    5b4c:	dc000017 	ldw	r16,0(sp)
    5b50:	dec00304 	addi	sp,sp,12
    5b54:	f800283a 	ret
    5b58:	8009883a 	mov	r4,r16
    5b5c:	00059300 	call	5930 <__sinit>
    5b60:	003fd706 	br	5ac0 <__sfp+0x28>
    5b64:	8809883a 	mov	r4,r17
    5b68:	01400104 	movi	r5,4
    5b6c:	0005a300 	call	5a30 <__sfmoreglue>
    5b70:	80800015 	stw	r2,0(r16)
    5b74:	103fe21e 	bne	r2,zero,5b00 <__sfp+0x68>
    5b78:	00800304 	movi	r2,12
    5b7c:	0009883a 	mov	r4,zero
    5b80:	88800015 	stw	r2,0(r17)
    5b84:	003fee06 	br	5b40 <__sfp+0xa8>

00005b88 <_malloc_trim_r>:
    5b88:	defffb04 	addi	sp,sp,-20
    5b8c:	dcc00315 	stw	r19,12(sp)
    5b90:	04c00074 	movhi	r19,1
    5b94:	9ccb2a04 	addi	r19,r19,11432
    5b98:	dc800215 	stw	r18,8(sp)
    5b9c:	dc400115 	stw	r17,4(sp)
    5ba0:	dc000015 	stw	r16,0(sp)
    5ba4:	2823883a 	mov	r17,r5
    5ba8:	2025883a 	mov	r18,r4
    5bac:	dfc00415 	stw	ra,16(sp)
    5bb0:	000bb8c0 	call	bb8c <__malloc_lock>
    5bb4:	98800217 	ldw	r2,8(r19)
    5bb8:	9009883a 	mov	r4,r18
    5bbc:	000b883a 	mov	r5,zero
    5bc0:	10c00117 	ldw	r3,4(r2)
    5bc4:	00bfff04 	movi	r2,-4
    5bc8:	18a0703a 	and	r16,r3,r2
    5bcc:	8463c83a 	sub	r17,r16,r17
    5bd0:	8c43fbc4 	addi	r17,r17,4079
    5bd4:	8822d33a 	srli	r17,r17,12
    5bd8:	0083ffc4 	movi	r2,4095
    5bdc:	8c7fffc4 	addi	r17,r17,-1
    5be0:	8822933a 	slli	r17,r17,12
    5be4:	1440060e 	bge	r2,r17,5c00 <_malloc_trim_r+0x78>
    5be8:	00087980 	call	8798 <_sbrk_r>
    5bec:	98c00217 	ldw	r3,8(r19)
    5bf0:	9009883a 	mov	r4,r18
    5bf4:	044bc83a 	sub	r5,zero,r17
    5bf8:	80c7883a 	add	r3,r16,r3
    5bfc:	10c00926 	beq	r2,r3,5c24 <_malloc_trim_r+0x9c>
    5c00:	000bbac0 	call	bbac <__malloc_unlock>
    5c04:	0005883a 	mov	r2,zero
    5c08:	dfc00417 	ldw	ra,16(sp)
    5c0c:	dcc00317 	ldw	r19,12(sp)
    5c10:	dc800217 	ldw	r18,8(sp)
    5c14:	dc400117 	ldw	r17,4(sp)
    5c18:	dc000017 	ldw	r16,0(sp)
    5c1c:	dec00504 	addi	sp,sp,20
    5c20:	f800283a 	ret
    5c24:	9009883a 	mov	r4,r18
    5c28:	00087980 	call	8798 <_sbrk_r>
    5c2c:	844dc83a 	sub	r6,r16,r17
    5c30:	00ffffc4 	movi	r3,-1
    5c34:	9009883a 	mov	r4,r18
    5c38:	000b883a 	mov	r5,zero
    5c3c:	01c00074 	movhi	r7,1
    5c40:	39d98304 	addi	r7,r7,26124
    5c44:	31800054 	ori	r6,r6,1
    5c48:	10c00926 	beq	r2,r3,5c70 <_malloc_trim_r+0xe8>
    5c4c:	38800017 	ldw	r2,0(r7)
    5c50:	98c00217 	ldw	r3,8(r19)
    5c54:	9009883a 	mov	r4,r18
    5c58:	1445c83a 	sub	r2,r2,r17
    5c5c:	38800015 	stw	r2,0(r7)
    5c60:	19800115 	stw	r6,4(r3)
    5c64:	000bbac0 	call	bbac <__malloc_unlock>
    5c68:	00800044 	movi	r2,1
    5c6c:	003fe606 	br	5c08 <_malloc_trim_r+0x80>
    5c70:	00087980 	call	8798 <_sbrk_r>
    5c74:	99800217 	ldw	r6,8(r19)
    5c78:	100f883a 	mov	r7,r2
    5c7c:	9009883a 	mov	r4,r18
    5c80:	1187c83a 	sub	r3,r2,r6
    5c84:	008003c4 	movi	r2,15
    5c88:	19400054 	ori	r5,r3,1
    5c8c:	10ffdc0e 	bge	r2,r3,5c00 <_malloc_trim_r+0x78>
    5c90:	00800074 	movhi	r2,1
    5c94:	1091a004 	addi	r2,r2,18048
    5c98:	10c00017 	ldw	r3,0(r2)
    5c9c:	00800074 	movhi	r2,1
    5ca0:	10998304 	addi	r2,r2,26124
    5ca4:	31400115 	stw	r5,4(r6)
    5ca8:	38c7c83a 	sub	r3,r7,r3
    5cac:	10c00015 	stw	r3,0(r2)
    5cb0:	003fd306 	br	5c00 <_malloc_trim_r+0x78>

00005cb4 <_free_r>:
    5cb4:	defffd04 	addi	sp,sp,-12
    5cb8:	dc400115 	stw	r17,4(sp)
    5cbc:	dc000015 	stw	r16,0(sp)
    5cc0:	dfc00215 	stw	ra,8(sp)
    5cc4:	2821883a 	mov	r16,r5
    5cc8:	2023883a 	mov	r17,r4
    5ccc:	28005a26 	beq	r5,zero,5e38 <_free_r+0x184>
    5cd0:	000bb8c0 	call	bb8c <__malloc_lock>
    5cd4:	823ffe04 	addi	r8,r16,-8
    5cd8:	41400117 	ldw	r5,4(r8)
    5cdc:	00bfff84 	movi	r2,-2
    5ce0:	02800074 	movhi	r10,1
    5ce4:	528b2a04 	addi	r10,r10,11432
    5ce8:	288e703a 	and	r7,r5,r2
    5cec:	41cd883a 	add	r6,r8,r7
    5cf0:	30c00117 	ldw	r3,4(r6)
    5cf4:	51000217 	ldw	r4,8(r10)
    5cf8:	00bfff04 	movi	r2,-4
    5cfc:	1892703a 	and	r9,r3,r2
    5d00:	5017883a 	mov	r11,r10
    5d04:	31006726 	beq	r6,r4,5ea4 <_free_r+0x1f0>
    5d08:	2880004c 	andi	r2,r5,1
    5d0c:	1005003a 	cmpeq	r2,r2,zero
    5d10:	32400115 	stw	r9,4(r6)
    5d14:	10001a1e 	bne	r2,zero,5d80 <_free_r+0xcc>
    5d18:	000b883a 	mov	r5,zero
    5d1c:	3247883a 	add	r3,r6,r9
    5d20:	18800117 	ldw	r2,4(r3)
    5d24:	1080004c 	andi	r2,r2,1
    5d28:	1000231e 	bne	r2,zero,5db8 <_free_r+0x104>
    5d2c:	280ac03a 	cmpne	r5,r5,zero
    5d30:	3a4f883a 	add	r7,r7,r9
    5d34:	2800451e 	bne	r5,zero,5e4c <_free_r+0x198>
    5d38:	31000217 	ldw	r4,8(r6)
    5d3c:	00800074 	movhi	r2,1
    5d40:	108b2c04 	addi	r2,r2,11440
    5d44:	20807b26 	beq	r4,r2,5f34 <_free_r+0x280>
    5d48:	30800317 	ldw	r2,12(r6)
    5d4c:	3a07883a 	add	r3,r7,r8
    5d50:	19c00015 	stw	r7,0(r3)
    5d54:	11000215 	stw	r4,8(r2)
    5d58:	20800315 	stw	r2,12(r4)
    5d5c:	38800054 	ori	r2,r7,1
    5d60:	40800115 	stw	r2,4(r8)
    5d64:	28001a26 	beq	r5,zero,5dd0 <_free_r+0x11c>
    5d68:	8809883a 	mov	r4,r17
    5d6c:	dfc00217 	ldw	ra,8(sp)
    5d70:	dc400117 	ldw	r17,4(sp)
    5d74:	dc000017 	ldw	r16,0(sp)
    5d78:	dec00304 	addi	sp,sp,12
    5d7c:	000bbac1 	jmpi	bbac <__malloc_unlock>
    5d80:	80bffe17 	ldw	r2,-8(r16)
    5d84:	50c00204 	addi	r3,r10,8
    5d88:	4091c83a 	sub	r8,r8,r2
    5d8c:	41000217 	ldw	r4,8(r8)
    5d90:	388f883a 	add	r7,r7,r2
    5d94:	20c06126 	beq	r4,r3,5f1c <_free_r+0x268>
    5d98:	40800317 	ldw	r2,12(r8)
    5d9c:	3247883a 	add	r3,r6,r9
    5da0:	000b883a 	mov	r5,zero
    5da4:	11000215 	stw	r4,8(r2)
    5da8:	20800315 	stw	r2,12(r4)
    5dac:	18800117 	ldw	r2,4(r3)
    5db0:	1080004c 	andi	r2,r2,1
    5db4:	103fdd26 	beq	r2,zero,5d2c <_free_r+0x78>
    5db8:	38800054 	ori	r2,r7,1
    5dbc:	3a07883a 	add	r3,r7,r8
    5dc0:	280ac03a 	cmpne	r5,r5,zero
    5dc4:	40800115 	stw	r2,4(r8)
    5dc8:	19c00015 	stw	r7,0(r3)
    5dcc:	283fe61e 	bne	r5,zero,5d68 <_free_r+0xb4>
    5dd0:	00807fc4 	movi	r2,511
    5dd4:	11c01f2e 	bgeu	r2,r7,5e54 <_free_r+0x1a0>
    5dd8:	3806d27a 	srli	r3,r7,9
    5ddc:	1800481e 	bne	r3,zero,5f00 <_free_r+0x24c>
    5de0:	3804d0fa 	srli	r2,r7,3
    5de4:	100690fa 	slli	r3,r2,3
    5de8:	1acd883a 	add	r6,r3,r11
    5dec:	31400217 	ldw	r5,8(r6)
    5df0:	31405926 	beq	r6,r5,5f58 <_free_r+0x2a4>
    5df4:	28800117 	ldw	r2,4(r5)
    5df8:	00ffff04 	movi	r3,-4
    5dfc:	10c4703a 	and	r2,r2,r3
    5e00:	3880022e 	bgeu	r7,r2,5e0c <_free_r+0x158>
    5e04:	29400217 	ldw	r5,8(r5)
    5e08:	317ffa1e 	bne	r6,r5,5df4 <_free_r+0x140>
    5e0c:	29800317 	ldw	r6,12(r5)
    5e10:	41800315 	stw	r6,12(r8)
    5e14:	41400215 	stw	r5,8(r8)
    5e18:	8809883a 	mov	r4,r17
    5e1c:	2a000315 	stw	r8,12(r5)
    5e20:	32000215 	stw	r8,8(r6)
    5e24:	dfc00217 	ldw	ra,8(sp)
    5e28:	dc400117 	ldw	r17,4(sp)
    5e2c:	dc000017 	ldw	r16,0(sp)
    5e30:	dec00304 	addi	sp,sp,12
    5e34:	000bbac1 	jmpi	bbac <__malloc_unlock>
    5e38:	dfc00217 	ldw	ra,8(sp)
    5e3c:	dc400117 	ldw	r17,4(sp)
    5e40:	dc000017 	ldw	r16,0(sp)
    5e44:	dec00304 	addi	sp,sp,12
    5e48:	f800283a 	ret
    5e4c:	31000217 	ldw	r4,8(r6)
    5e50:	003fbd06 	br	5d48 <_free_r+0x94>
    5e54:	3806d0fa 	srli	r3,r7,3
    5e58:	00800044 	movi	r2,1
    5e5c:	51400117 	ldw	r5,4(r10)
    5e60:	180890fa 	slli	r4,r3,3
    5e64:	1807d0ba 	srai	r3,r3,2
    5e68:	22c9883a 	add	r4,r4,r11
    5e6c:	21800217 	ldw	r6,8(r4)
    5e70:	10c4983a 	sll	r2,r2,r3
    5e74:	41000315 	stw	r4,12(r8)
    5e78:	41800215 	stw	r6,8(r8)
    5e7c:	288ab03a 	or	r5,r5,r2
    5e80:	22000215 	stw	r8,8(r4)
    5e84:	8809883a 	mov	r4,r17
    5e88:	51400115 	stw	r5,4(r10)
    5e8c:	32000315 	stw	r8,12(r6)
    5e90:	dfc00217 	ldw	ra,8(sp)
    5e94:	dc400117 	ldw	r17,4(sp)
    5e98:	dc000017 	ldw	r16,0(sp)
    5e9c:	dec00304 	addi	sp,sp,12
    5ea0:	000bbac1 	jmpi	bbac <__malloc_unlock>
    5ea4:	2880004c 	andi	r2,r5,1
    5ea8:	3a4d883a 	add	r6,r7,r9
    5eac:	1000071e 	bne	r2,zero,5ecc <_free_r+0x218>
    5eb0:	80bffe17 	ldw	r2,-8(r16)
    5eb4:	4091c83a 	sub	r8,r8,r2
    5eb8:	41000317 	ldw	r4,12(r8)
    5ebc:	40c00217 	ldw	r3,8(r8)
    5ec0:	308d883a 	add	r6,r6,r2
    5ec4:	20c00215 	stw	r3,8(r4)
    5ec8:	19000315 	stw	r4,12(r3)
    5ecc:	00800074 	movhi	r2,1
    5ed0:	10919f04 	addi	r2,r2,18044
    5ed4:	11000017 	ldw	r4,0(r2)
    5ed8:	30c00054 	ori	r3,r6,1
    5edc:	52000215 	stw	r8,8(r10)
    5ee0:	40c00115 	stw	r3,4(r8)
    5ee4:	313fa036 	bltu	r6,r4,5d68 <_free_r+0xb4>
    5ee8:	00800074 	movhi	r2,1
    5eec:	10997904 	addi	r2,r2,26084
    5ef0:	11400017 	ldw	r5,0(r2)
    5ef4:	8809883a 	mov	r4,r17
    5ef8:	0005b880 	call	5b88 <_malloc_trim_r>
    5efc:	003f9a06 	br	5d68 <_free_r+0xb4>
    5f00:	00800104 	movi	r2,4
    5f04:	10c0072e 	bgeu	r2,r3,5f24 <_free_r+0x270>
    5f08:	00800504 	movi	r2,20
    5f0c:	10c01936 	bltu	r2,r3,5f74 <_free_r+0x2c0>
    5f10:	188016c4 	addi	r2,r3,91
    5f14:	100690fa 	slli	r3,r2,3
    5f18:	003fb306 	br	5de8 <_free_r+0x134>
    5f1c:	01400044 	movi	r5,1
    5f20:	003f7e06 	br	5d1c <_free_r+0x68>
    5f24:	3804d1ba 	srli	r2,r7,6
    5f28:	10800e04 	addi	r2,r2,56
    5f2c:	100690fa 	slli	r3,r2,3
    5f30:	003fad06 	br	5de8 <_free_r+0x134>
    5f34:	22000315 	stw	r8,12(r4)
    5f38:	22000215 	stw	r8,8(r4)
    5f3c:	3a05883a 	add	r2,r7,r8
    5f40:	38c00054 	ori	r3,r7,1
    5f44:	11c00015 	stw	r7,0(r2)
    5f48:	41000215 	stw	r4,8(r8)
    5f4c:	40c00115 	stw	r3,4(r8)
    5f50:	41000315 	stw	r4,12(r8)
    5f54:	003f8406 	br	5d68 <_free_r+0xb4>
    5f58:	1005d0ba 	srai	r2,r2,2
    5f5c:	00c00044 	movi	r3,1
    5f60:	51000117 	ldw	r4,4(r10)
    5f64:	1886983a 	sll	r3,r3,r2
    5f68:	20c8b03a 	or	r4,r4,r3
    5f6c:	51000115 	stw	r4,4(r10)
    5f70:	003fa706 	br	5e10 <_free_r+0x15c>
    5f74:	00801504 	movi	r2,84
    5f78:	10c00436 	bltu	r2,r3,5f8c <_free_r+0x2d8>
    5f7c:	3804d33a 	srli	r2,r7,12
    5f80:	10801b84 	addi	r2,r2,110
    5f84:	100690fa 	slli	r3,r2,3
    5f88:	003f9706 	br	5de8 <_free_r+0x134>
    5f8c:	00805504 	movi	r2,340
    5f90:	10c00436 	bltu	r2,r3,5fa4 <_free_r+0x2f0>
    5f94:	3804d3fa 	srli	r2,r7,15
    5f98:	10801dc4 	addi	r2,r2,119
    5f9c:	100690fa 	slli	r3,r2,3
    5fa0:	003f9106 	br	5de8 <_free_r+0x134>
    5fa4:	00815504 	movi	r2,1364
    5fa8:	10c0032e 	bgeu	r2,r3,5fb8 <_free_r+0x304>
    5fac:	00801f84 	movi	r2,126
    5fb0:	00c0fc04 	movi	r3,1008
    5fb4:	003f8c06 	br	5de8 <_free_r+0x134>
    5fb8:	3804d4ba 	srli	r2,r7,18
    5fbc:	10801f04 	addi	r2,r2,124
    5fc0:	100690fa 	slli	r3,r2,3
    5fc4:	003f8806 	br	5de8 <_free_r+0x134>

00005fc8 <__sfvwrite_r>:
    5fc8:	30800217 	ldw	r2,8(r6)
    5fcc:	defff504 	addi	sp,sp,-44
    5fd0:	df000915 	stw	fp,36(sp)
    5fd4:	dd800715 	stw	r22,28(sp)
    5fd8:	dc800315 	stw	r18,12(sp)
    5fdc:	dfc00a15 	stw	ra,40(sp)
    5fe0:	ddc00815 	stw	r23,32(sp)
    5fe4:	dd400615 	stw	r21,24(sp)
    5fe8:	dd000515 	stw	r20,20(sp)
    5fec:	dcc00415 	stw	r19,16(sp)
    5ff0:	dc400215 	stw	r17,8(sp)
    5ff4:	dc000115 	stw	r16,4(sp)
    5ff8:	302d883a 	mov	r22,r6
    5ffc:	2039883a 	mov	fp,r4
    6000:	2825883a 	mov	r18,r5
    6004:	10001c26 	beq	r2,zero,6078 <__sfvwrite_r+0xb0>
    6008:	29c0030b 	ldhu	r7,12(r5)
    600c:	3880020c 	andi	r2,r7,8
    6010:	10002726 	beq	r2,zero,60b0 <__sfvwrite_r+0xe8>
    6014:	28800417 	ldw	r2,16(r5)
    6018:	10002526 	beq	r2,zero,60b0 <__sfvwrite_r+0xe8>
    601c:	3880008c 	andi	r2,r7,2
    6020:	b5400017 	ldw	r21,0(r22)
    6024:	10002826 	beq	r2,zero,60c8 <__sfvwrite_r+0x100>
    6028:	0021883a 	mov	r16,zero
    602c:	0023883a 	mov	r17,zero
    6030:	880d883a 	mov	r6,r17
    6034:	e009883a 	mov	r4,fp
    6038:	00810004 	movi	r2,1024
    603c:	80006e26 	beq	r16,zero,61f8 <__sfvwrite_r+0x230>
    6040:	800f883a 	mov	r7,r16
    6044:	91400717 	ldw	r5,28(r18)
    6048:	1400012e 	bgeu	r2,r16,6050 <__sfvwrite_r+0x88>
    604c:	100f883a 	mov	r7,r2
    6050:	90c00917 	ldw	r3,36(r18)
    6054:	183ee83a 	callr	r3
    6058:	1007883a 	mov	r3,r2
    605c:	80a1c83a 	sub	r16,r16,r2
    6060:	88a3883a 	add	r17,r17,r2
    6064:	00806d0e 	bge	zero,r2,621c <__sfvwrite_r+0x254>
    6068:	b0800217 	ldw	r2,8(r22)
    606c:	10c5c83a 	sub	r2,r2,r3
    6070:	b0800215 	stw	r2,8(r22)
    6074:	103fee1e 	bne	r2,zero,6030 <__sfvwrite_r+0x68>
    6078:	0009883a 	mov	r4,zero
    607c:	2005883a 	mov	r2,r4
    6080:	dfc00a17 	ldw	ra,40(sp)
    6084:	df000917 	ldw	fp,36(sp)
    6088:	ddc00817 	ldw	r23,32(sp)
    608c:	dd800717 	ldw	r22,28(sp)
    6090:	dd400617 	ldw	r21,24(sp)
    6094:	dd000517 	ldw	r20,20(sp)
    6098:	dcc00417 	ldw	r19,16(sp)
    609c:	dc800317 	ldw	r18,12(sp)
    60a0:	dc400217 	ldw	r17,8(sp)
    60a4:	dc000117 	ldw	r16,4(sp)
    60a8:	dec00b04 	addi	sp,sp,44
    60ac:	f800283a 	ret
    60b0:	0003d900 	call	3d90 <__swsetup_r>
    60b4:	1000e41e 	bne	r2,zero,6448 <__sfvwrite_r+0x480>
    60b8:	91c0030b 	ldhu	r7,12(r18)
    60bc:	b5400017 	ldw	r21,0(r22)
    60c0:	3880008c 	andi	r2,r7,2
    60c4:	103fd81e 	bne	r2,zero,6028 <__sfvwrite_r+0x60>
    60c8:	3880004c 	andi	r2,r7,1
    60cc:	1005003a 	cmpeq	r2,r2,zero
    60d0:	10005726 	beq	r2,zero,6230 <__sfvwrite_r+0x268>
    60d4:	0029883a 	mov	r20,zero
    60d8:	002f883a 	mov	r23,zero
    60dc:	a0004226 	beq	r20,zero,61e8 <__sfvwrite_r+0x220>
    60e0:	3880800c 	andi	r2,r7,512
    60e4:	94000217 	ldw	r16,8(r18)
    60e8:	10008b26 	beq	r2,zero,6318 <__sfvwrite_r+0x350>
    60ec:	800d883a 	mov	r6,r16
    60f0:	a400a536 	bltu	r20,r16,6388 <__sfvwrite_r+0x3c0>
    60f4:	3881200c 	andi	r2,r7,1152
    60f8:	10002726 	beq	r2,zero,6198 <__sfvwrite_r+0x1d0>
    60fc:	90800517 	ldw	r2,20(r18)
    6100:	92000417 	ldw	r8,16(r18)
    6104:	91400017 	ldw	r5,0(r18)
    6108:	1087883a 	add	r3,r2,r2
    610c:	1887883a 	add	r3,r3,r2
    6110:	1808d7fa 	srli	r4,r3,31
    6114:	2a21c83a 	sub	r16,r5,r8
    6118:	80800044 	addi	r2,r16,1
    611c:	20c9883a 	add	r4,r4,r3
    6120:	2027d07a 	srai	r19,r4,1
    6124:	a085883a 	add	r2,r20,r2
    6128:	980d883a 	mov	r6,r19
    612c:	9880022e 	bgeu	r19,r2,6138 <__sfvwrite_r+0x170>
    6130:	1027883a 	mov	r19,r2
    6134:	100d883a 	mov	r6,r2
    6138:	3881000c 	andi	r2,r7,1024
    613c:	1000b826 	beq	r2,zero,6420 <__sfvwrite_r+0x458>
    6140:	300b883a 	mov	r5,r6
    6144:	e009883a 	mov	r4,fp
    6148:	000683c0 	call	683c <_malloc_r>
    614c:	10003126 	beq	r2,zero,6214 <__sfvwrite_r+0x24c>
    6150:	91400417 	ldw	r5,16(r18)
    6154:	1009883a 	mov	r4,r2
    6158:	800d883a 	mov	r6,r16
    615c:	1023883a 	mov	r17,r2
    6160:	0001c5c0 	call	1c5c <memcpy>
    6164:	90c0030b 	ldhu	r3,12(r18)
    6168:	00beffc4 	movi	r2,-1025
    616c:	1886703a 	and	r3,r3,r2
    6170:	18c02014 	ori	r3,r3,128
    6174:	90c0030d 	sth	r3,12(r18)
    6178:	9c07c83a 	sub	r3,r19,r16
    617c:	8c05883a 	add	r2,r17,r16
    6180:	a00d883a 	mov	r6,r20
    6184:	a021883a 	mov	r16,r20
    6188:	90800015 	stw	r2,0(r18)
    618c:	90c00215 	stw	r3,8(r18)
    6190:	94400415 	stw	r17,16(r18)
    6194:	94c00515 	stw	r19,20(r18)
    6198:	91000017 	ldw	r4,0(r18)
    619c:	b80b883a 	mov	r5,r23
    61a0:	a023883a 	mov	r17,r20
    61a4:	00070600 	call	7060 <memmove>
    61a8:	90c00217 	ldw	r3,8(r18)
    61ac:	90800017 	ldw	r2,0(r18)
    61b0:	a027883a 	mov	r19,r20
    61b4:	1c07c83a 	sub	r3,r3,r16
    61b8:	1405883a 	add	r2,r2,r16
    61bc:	90c00215 	stw	r3,8(r18)
    61c0:	a021883a 	mov	r16,r20
    61c4:	90800015 	stw	r2,0(r18)
    61c8:	b0800217 	ldw	r2,8(r22)
    61cc:	1405c83a 	sub	r2,r2,r16
    61d0:	b0800215 	stw	r2,8(r22)
    61d4:	103fa826 	beq	r2,zero,6078 <__sfvwrite_r+0xb0>
    61d8:	a469c83a 	sub	r20,r20,r17
    61dc:	91c0030b 	ldhu	r7,12(r18)
    61e0:	bcef883a 	add	r23,r23,r19
    61e4:	a03fbe1e 	bne	r20,zero,60e0 <__sfvwrite_r+0x118>
    61e8:	adc00017 	ldw	r23,0(r21)
    61ec:	ad000117 	ldw	r20,4(r21)
    61f0:	ad400204 	addi	r21,r21,8
    61f4:	003fb906 	br	60dc <__sfvwrite_r+0x114>
    61f8:	ac400017 	ldw	r17,0(r21)
    61fc:	ac000117 	ldw	r16,4(r21)
    6200:	ad400204 	addi	r21,r21,8
    6204:	003f8a06 	br	6030 <__sfvwrite_r+0x68>
    6208:	91400417 	ldw	r5,16(r18)
    620c:	e009883a 	mov	r4,fp
    6210:	0005cb40 	call	5cb4 <_free_r>
    6214:	00800304 	movi	r2,12
    6218:	e0800015 	stw	r2,0(fp)
    621c:	9080030b 	ldhu	r2,12(r18)
    6220:	013fffc4 	movi	r4,-1
    6224:	10801014 	ori	r2,r2,64
    6228:	9080030d 	sth	r2,12(r18)
    622c:	003f9306 	br	607c <__sfvwrite_r+0xb4>
    6230:	0027883a 	mov	r19,zero
    6234:	002f883a 	mov	r23,zero
    6238:	d8000015 	stw	zero,0(sp)
    623c:	0029883a 	mov	r20,zero
    6240:	98001e26 	beq	r19,zero,62bc <__sfvwrite_r+0x2f4>
    6244:	d8c00017 	ldw	r3,0(sp)
    6248:	1804c03a 	cmpne	r2,r3,zero
    624c:	10005e26 	beq	r2,zero,63c8 <__sfvwrite_r+0x400>
    6250:	9821883a 	mov	r16,r19
    6254:	a4c0012e 	bgeu	r20,r19,625c <__sfvwrite_r+0x294>
    6258:	a021883a 	mov	r16,r20
    625c:	91000017 	ldw	r4,0(r18)
    6260:	90800417 	ldw	r2,16(r18)
    6264:	91800217 	ldw	r6,8(r18)
    6268:	91c00517 	ldw	r7,20(r18)
    626c:	1100022e 	bgeu	r2,r4,6278 <__sfvwrite_r+0x2b0>
    6270:	31e3883a 	add	r17,r6,r7
    6274:	8c001616 	blt	r17,r16,62d0 <__sfvwrite_r+0x308>
    6278:	81c03816 	blt	r16,r7,635c <__sfvwrite_r+0x394>
    627c:	90c00917 	ldw	r3,36(r18)
    6280:	91400717 	ldw	r5,28(r18)
    6284:	e009883a 	mov	r4,fp
    6288:	b80d883a 	mov	r6,r23
    628c:	183ee83a 	callr	r3
    6290:	1023883a 	mov	r17,r2
    6294:	00bfe10e 	bge	zero,r2,621c <__sfvwrite_r+0x254>
    6298:	a469c83a 	sub	r20,r20,r17
    629c:	a0001826 	beq	r20,zero,6300 <__sfvwrite_r+0x338>
    62a0:	b0800217 	ldw	r2,8(r22)
    62a4:	1445c83a 	sub	r2,r2,r17
    62a8:	b0800215 	stw	r2,8(r22)
    62ac:	103f7226 	beq	r2,zero,6078 <__sfvwrite_r+0xb0>
    62b0:	9c67c83a 	sub	r19,r19,r17
    62b4:	bc6f883a 	add	r23,r23,r17
    62b8:	983fe21e 	bne	r19,zero,6244 <__sfvwrite_r+0x27c>
    62bc:	adc00017 	ldw	r23,0(r21)
    62c0:	acc00117 	ldw	r19,4(r21)
    62c4:	ad400204 	addi	r21,r21,8
    62c8:	d8000015 	stw	zero,0(sp)
    62cc:	003fdc06 	br	6240 <__sfvwrite_r+0x278>
    62d0:	b80b883a 	mov	r5,r23
    62d4:	880d883a 	mov	r6,r17
    62d8:	00070600 	call	7060 <memmove>
    62dc:	90c00017 	ldw	r3,0(r18)
    62e0:	e009883a 	mov	r4,fp
    62e4:	900b883a 	mov	r5,r18
    62e8:	1c47883a 	add	r3,r3,r17
    62ec:	90c00015 	stw	r3,0(r18)
    62f0:	00056980 	call	5698 <_fflush_r>
    62f4:	103fc91e 	bne	r2,zero,621c <__sfvwrite_r+0x254>
    62f8:	a469c83a 	sub	r20,r20,r17
    62fc:	a03fe81e 	bne	r20,zero,62a0 <__sfvwrite_r+0x2d8>
    6300:	e009883a 	mov	r4,fp
    6304:	900b883a 	mov	r5,r18
    6308:	00056980 	call	5698 <_fflush_r>
    630c:	103fc31e 	bne	r2,zero,621c <__sfvwrite_r+0x254>
    6310:	d8000015 	stw	zero,0(sp)
    6314:	003fe206 	br	62a0 <__sfvwrite_r+0x2d8>
    6318:	91000017 	ldw	r4,0(r18)
    631c:	90800417 	ldw	r2,16(r18)
    6320:	1100022e 	bgeu	r2,r4,632c <__sfvwrite_r+0x364>
    6324:	8023883a 	mov	r17,r16
    6328:	85003136 	bltu	r16,r20,63f0 <__sfvwrite_r+0x428>
    632c:	91c00517 	ldw	r7,20(r18)
    6330:	a1c01836 	bltu	r20,r7,6394 <__sfvwrite_r+0x3cc>
    6334:	90c00917 	ldw	r3,36(r18)
    6338:	91400717 	ldw	r5,28(r18)
    633c:	e009883a 	mov	r4,fp
    6340:	b80d883a 	mov	r6,r23
    6344:	183ee83a 	callr	r3
    6348:	1021883a 	mov	r16,r2
    634c:	00bfb30e 	bge	zero,r2,621c <__sfvwrite_r+0x254>
    6350:	1023883a 	mov	r17,r2
    6354:	1027883a 	mov	r19,r2
    6358:	003f9b06 	br	61c8 <__sfvwrite_r+0x200>
    635c:	b80b883a 	mov	r5,r23
    6360:	800d883a 	mov	r6,r16
    6364:	00070600 	call	7060 <memmove>
    6368:	90c00217 	ldw	r3,8(r18)
    636c:	90800017 	ldw	r2,0(r18)
    6370:	8023883a 	mov	r17,r16
    6374:	1c07c83a 	sub	r3,r3,r16
    6378:	1405883a 	add	r2,r2,r16
    637c:	90c00215 	stw	r3,8(r18)
    6380:	90800015 	stw	r2,0(r18)
    6384:	003fc406 	br	6298 <__sfvwrite_r+0x2d0>
    6388:	a00d883a 	mov	r6,r20
    638c:	a021883a 	mov	r16,r20
    6390:	003f8106 	br	6198 <__sfvwrite_r+0x1d0>
    6394:	b80b883a 	mov	r5,r23
    6398:	a00d883a 	mov	r6,r20
    639c:	00070600 	call	7060 <memmove>
    63a0:	90c00217 	ldw	r3,8(r18)
    63a4:	90800017 	ldw	r2,0(r18)
    63a8:	a021883a 	mov	r16,r20
    63ac:	1d07c83a 	sub	r3,r3,r20
    63b0:	1505883a 	add	r2,r2,r20
    63b4:	a023883a 	mov	r17,r20
    63b8:	a027883a 	mov	r19,r20
    63bc:	90c00215 	stw	r3,8(r18)
    63c0:	90800015 	stw	r2,0(r18)
    63c4:	003f8006 	br	61c8 <__sfvwrite_r+0x200>
    63c8:	b809883a 	mov	r4,r23
    63cc:	01400284 	movi	r5,10
    63d0:	980d883a 	mov	r6,r19
    63d4:	0006f7c0 	call	6f7c <memchr>
    63d8:	10001726 	beq	r2,zero,6438 <__sfvwrite_r+0x470>
    63dc:	15c5c83a 	sub	r2,r2,r23
    63e0:	15000044 	addi	r20,r2,1
    63e4:	00800044 	movi	r2,1
    63e8:	d8800015 	stw	r2,0(sp)
    63ec:	003f9806 	br	6250 <__sfvwrite_r+0x288>
    63f0:	b80b883a 	mov	r5,r23
    63f4:	800d883a 	mov	r6,r16
    63f8:	00070600 	call	7060 <memmove>
    63fc:	90c00017 	ldw	r3,0(r18)
    6400:	e009883a 	mov	r4,fp
    6404:	900b883a 	mov	r5,r18
    6408:	1c07883a 	add	r3,r3,r16
    640c:	90c00015 	stw	r3,0(r18)
    6410:	8027883a 	mov	r19,r16
    6414:	00056980 	call	5698 <_fflush_r>
    6418:	103f6b26 	beq	r2,zero,61c8 <__sfvwrite_r+0x200>
    641c:	003f7f06 	br	621c <__sfvwrite_r+0x254>
    6420:	400b883a 	mov	r5,r8
    6424:	e009883a 	mov	r4,fp
    6428:	00081340 	call	8134 <_realloc_r>
    642c:	103f7626 	beq	r2,zero,6208 <__sfvwrite_r+0x240>
    6430:	1023883a 	mov	r17,r2
    6434:	003f5006 	br	6178 <__sfvwrite_r+0x1b0>
    6438:	00c00044 	movi	r3,1
    643c:	9d000044 	addi	r20,r19,1
    6440:	d8c00015 	stw	r3,0(sp)
    6444:	003f8206 	br	6250 <__sfvwrite_r+0x288>
    6448:	9080030b 	ldhu	r2,12(r18)
    644c:	00c00244 	movi	r3,9
    6450:	013fffc4 	movi	r4,-1
    6454:	10801014 	ori	r2,r2,64
    6458:	9080030d 	sth	r2,12(r18)
    645c:	e0c00015 	stw	r3,0(fp)
    6460:	003f0606 	br	607c <__sfvwrite_r+0xb4>

00006464 <_fwalk_reent>:
    6464:	defff704 	addi	sp,sp,-36
    6468:	dcc00315 	stw	r19,12(sp)
    646c:	24c0b804 	addi	r19,r4,736
    6470:	dd800615 	stw	r22,24(sp)
    6474:	dd400515 	stw	r21,20(sp)
    6478:	dfc00815 	stw	ra,32(sp)
    647c:	ddc00715 	stw	r23,28(sp)
    6480:	dd000415 	stw	r20,16(sp)
    6484:	dc800215 	stw	r18,8(sp)
    6488:	dc400115 	stw	r17,4(sp)
    648c:	dc000015 	stw	r16,0(sp)
    6490:	202b883a 	mov	r21,r4
    6494:	282d883a 	mov	r22,r5
    6498:	00059200 	call	5920 <__sfp_lock_acquire>
    649c:	98002126 	beq	r19,zero,6524 <_fwalk_reent+0xc0>
    64a0:	002f883a 	mov	r23,zero
    64a4:	9c800117 	ldw	r18,4(r19)
    64a8:	9c000217 	ldw	r16,8(r19)
    64ac:	90bfffc4 	addi	r2,r18,-1
    64b0:	10000d16 	blt	r2,zero,64e8 <_fwalk_reent+0x84>
    64b4:	0023883a 	mov	r17,zero
    64b8:	053fffc4 	movi	r20,-1
    64bc:	8080030f 	ldh	r2,12(r16)
    64c0:	8c400044 	addi	r17,r17,1
    64c4:	10000626 	beq	r2,zero,64e0 <_fwalk_reent+0x7c>
    64c8:	8080038f 	ldh	r2,14(r16)
    64cc:	800b883a 	mov	r5,r16
    64d0:	a809883a 	mov	r4,r21
    64d4:	15000226 	beq	r2,r20,64e0 <_fwalk_reent+0x7c>
    64d8:	b03ee83a 	callr	r22
    64dc:	b8aeb03a 	or	r23,r23,r2
    64e0:	84001704 	addi	r16,r16,92
    64e4:	947ff51e 	bne	r18,r17,64bc <_fwalk_reent+0x58>
    64e8:	9cc00017 	ldw	r19,0(r19)
    64ec:	983fed1e 	bne	r19,zero,64a4 <_fwalk_reent+0x40>
    64f0:	00059240 	call	5924 <__sfp_lock_release>
    64f4:	b805883a 	mov	r2,r23
    64f8:	dfc00817 	ldw	ra,32(sp)
    64fc:	ddc00717 	ldw	r23,28(sp)
    6500:	dd800617 	ldw	r22,24(sp)
    6504:	dd400517 	ldw	r21,20(sp)
    6508:	dd000417 	ldw	r20,16(sp)
    650c:	dcc00317 	ldw	r19,12(sp)
    6510:	dc800217 	ldw	r18,8(sp)
    6514:	dc400117 	ldw	r17,4(sp)
    6518:	dc000017 	ldw	r16,0(sp)
    651c:	dec00904 	addi	sp,sp,36
    6520:	f800283a 	ret
    6524:	002f883a 	mov	r23,zero
    6528:	003ff106 	br	64f0 <_fwalk_reent+0x8c>

0000652c <_fwalk>:
    652c:	defff804 	addi	sp,sp,-32
    6530:	dcc00315 	stw	r19,12(sp)
    6534:	24c0b804 	addi	r19,r4,736
    6538:	dd400515 	stw	r21,20(sp)
    653c:	dfc00715 	stw	ra,28(sp)
    6540:	dd800615 	stw	r22,24(sp)
    6544:	dd000415 	stw	r20,16(sp)
    6548:	dc800215 	stw	r18,8(sp)
    654c:	dc400115 	stw	r17,4(sp)
    6550:	dc000015 	stw	r16,0(sp)
    6554:	282b883a 	mov	r21,r5
    6558:	00059200 	call	5920 <__sfp_lock_acquire>
    655c:	98001f26 	beq	r19,zero,65dc <_fwalk+0xb0>
    6560:	002d883a 	mov	r22,zero
    6564:	9c800117 	ldw	r18,4(r19)
    6568:	9c000217 	ldw	r16,8(r19)
    656c:	90bfffc4 	addi	r2,r18,-1
    6570:	10000c16 	blt	r2,zero,65a4 <_fwalk+0x78>
    6574:	0023883a 	mov	r17,zero
    6578:	053fffc4 	movi	r20,-1
    657c:	8080030f 	ldh	r2,12(r16)
    6580:	8c400044 	addi	r17,r17,1
    6584:	10000526 	beq	r2,zero,659c <_fwalk+0x70>
    6588:	8080038f 	ldh	r2,14(r16)
    658c:	8009883a 	mov	r4,r16
    6590:	15000226 	beq	r2,r20,659c <_fwalk+0x70>
    6594:	a83ee83a 	callr	r21
    6598:	b0acb03a 	or	r22,r22,r2
    659c:	84001704 	addi	r16,r16,92
    65a0:	947ff61e 	bne	r18,r17,657c <_fwalk+0x50>
    65a4:	9cc00017 	ldw	r19,0(r19)
    65a8:	983fee1e 	bne	r19,zero,6564 <_fwalk+0x38>
    65ac:	00059240 	call	5924 <__sfp_lock_release>
    65b0:	b005883a 	mov	r2,r22
    65b4:	dfc00717 	ldw	ra,28(sp)
    65b8:	dd800617 	ldw	r22,24(sp)
    65bc:	dd400517 	ldw	r21,20(sp)
    65c0:	dd000417 	ldw	r20,16(sp)
    65c4:	dcc00317 	ldw	r19,12(sp)
    65c8:	dc800217 	ldw	r18,8(sp)
    65cc:	dc400117 	ldw	r17,4(sp)
    65d0:	dc000017 	ldw	r16,0(sp)
    65d4:	dec00804 	addi	sp,sp,32
    65d8:	f800283a 	ret
    65dc:	002d883a 	mov	r22,zero
    65e0:	003ff206 	br	65ac <_fwalk+0x80>

000065e4 <__locale_charset>:
    65e4:	d0a00317 	ldw	r2,-32756(gp)
    65e8:	f800283a 	ret

000065ec <_localeconv_r>:
    65ec:	00800074 	movhi	r2,1
    65f0:	1088e004 	addi	r2,r2,9088
    65f4:	f800283a 	ret

000065f8 <localeconv>:
    65f8:	00800074 	movhi	r2,1
    65fc:	10919b04 	addi	r2,r2,18028
    6600:	11000017 	ldw	r4,0(r2)
    6604:	00065ec1 	jmpi	65ec <_localeconv_r>

00006608 <_setlocale_r>:
    6608:	defffc04 	addi	sp,sp,-16
    660c:	00c00074 	movhi	r3,1
    6610:	18c8db04 	addi	r3,r3,9068
    6614:	dc800215 	stw	r18,8(sp)
    6618:	dc400115 	stw	r17,4(sp)
    661c:	dc000015 	stw	r16,0(sp)
    6620:	2023883a 	mov	r17,r4
    6624:	2825883a 	mov	r18,r5
    6628:	dfc00315 	stw	ra,12(sp)
    662c:	3021883a 	mov	r16,r6
    6630:	3009883a 	mov	r4,r6
    6634:	180b883a 	mov	r5,r3
    6638:	30000926 	beq	r6,zero,6660 <_setlocale_r+0x58>
    663c:	00089540 	call	8954 <strcmp>
    6640:	8009883a 	mov	r4,r16
    6644:	01400074 	movhi	r5,1
    6648:	2948c604 	addi	r5,r5,8984
    664c:	10000b1e 	bne	r2,zero,667c <_setlocale_r+0x74>
    6650:	8c000d15 	stw	r16,52(r17)
    6654:	8c800c15 	stw	r18,48(r17)
    6658:	00c00074 	movhi	r3,1
    665c:	18c8db04 	addi	r3,r3,9068
    6660:	1805883a 	mov	r2,r3
    6664:	dfc00317 	ldw	ra,12(sp)
    6668:	dc800217 	ldw	r18,8(sp)
    666c:	dc400117 	ldw	r17,4(sp)
    6670:	dc000017 	ldw	r16,0(sp)
    6674:	dec00404 	addi	sp,sp,16
    6678:	f800283a 	ret
    667c:	00089540 	call	8954 <strcmp>
    6680:	0007883a 	mov	r3,zero
    6684:	103ff226 	beq	r2,zero,6650 <_setlocale_r+0x48>
    6688:	003ff506 	br	6660 <_setlocale_r+0x58>

0000668c <setlocale>:
    668c:	01800074 	movhi	r6,1
    6690:	31919b04 	addi	r6,r6,18028
    6694:	2007883a 	mov	r3,r4
    6698:	31000017 	ldw	r4,0(r6)
    669c:	280d883a 	mov	r6,r5
    66a0:	180b883a 	mov	r5,r3
    66a4:	00066081 	jmpi	6608 <_setlocale_r>

000066a8 <__smakebuf_r>:
    66a8:	2880030b 	ldhu	r2,12(r5)
    66ac:	deffed04 	addi	sp,sp,-76
    66b0:	dc401015 	stw	r17,64(sp)
    66b4:	1080008c 	andi	r2,r2,2
    66b8:	dc000f15 	stw	r16,60(sp)
    66bc:	dfc01215 	stw	ra,72(sp)
    66c0:	dc801115 	stw	r18,68(sp)
    66c4:	2821883a 	mov	r16,r5
    66c8:	2023883a 	mov	r17,r4
    66cc:	10000b26 	beq	r2,zero,66fc <__smakebuf_r+0x54>
    66d0:	28c010c4 	addi	r3,r5,67
    66d4:	00800044 	movi	r2,1
    66d8:	28800515 	stw	r2,20(r5)
    66dc:	28c00415 	stw	r3,16(r5)
    66e0:	28c00015 	stw	r3,0(r5)
    66e4:	dfc01217 	ldw	ra,72(sp)
    66e8:	dc801117 	ldw	r18,68(sp)
    66ec:	dc401017 	ldw	r17,64(sp)
    66f0:	dc000f17 	ldw	r16,60(sp)
    66f4:	dec01304 	addi	sp,sp,76
    66f8:	f800283a 	ret
    66fc:	2940038f 	ldh	r5,14(r5)
    6700:	28002116 	blt	r5,zero,6788 <__smakebuf_r+0xe0>
    6704:	d80d883a 	mov	r6,sp
    6708:	0008d440 	call	8d44 <_fstat_r>
    670c:	10001e16 	blt	r2,zero,6788 <__smakebuf_r+0xe0>
    6710:	d8800117 	ldw	r2,4(sp)
    6714:	00e00014 	movui	r3,32768
    6718:	113c000c 	andi	r4,r2,61440
    671c:	20c03126 	beq	r4,r3,67e4 <__smakebuf_r+0x13c>
    6720:	8080030b 	ldhu	r2,12(r16)
    6724:	00c80004 	movi	r3,8192
    6728:	10820014 	ori	r2,r2,2048
    672c:	8080030d 	sth	r2,12(r16)
    6730:	20c01e26 	beq	r4,r3,67ac <__smakebuf_r+0x104>
    6734:	04810004 	movi	r18,1024
    6738:	8809883a 	mov	r4,r17
    673c:	900b883a 	mov	r5,r18
    6740:	000683c0 	call	683c <_malloc_r>
    6744:	1009883a 	mov	r4,r2
    6748:	10003126 	beq	r2,zero,6810 <__smakebuf_r+0x168>
    674c:	80c0030b 	ldhu	r3,12(r16)
    6750:	00800034 	movhi	r2,0
    6754:	10968504 	addi	r2,r2,23060
    6758:	88800f15 	stw	r2,60(r17)
    675c:	18c02014 	ori	r3,r3,128
    6760:	84800515 	stw	r18,20(r16)
    6764:	80c0030d 	sth	r3,12(r16)
    6768:	81000415 	stw	r4,16(r16)
    676c:	81000015 	stw	r4,0(r16)
    6770:	dfc01217 	ldw	ra,72(sp)
    6774:	dc801117 	ldw	r18,68(sp)
    6778:	dc401017 	ldw	r17,64(sp)
    677c:	dc000f17 	ldw	r16,60(sp)
    6780:	dec01304 	addi	sp,sp,76
    6784:	f800283a 	ret
    6788:	80c0030b 	ldhu	r3,12(r16)
    678c:	1880200c 	andi	r2,r3,128
    6790:	10000426 	beq	r2,zero,67a4 <__smakebuf_r+0xfc>
    6794:	04801004 	movi	r18,64
    6798:	18820014 	ori	r2,r3,2048
    679c:	8080030d 	sth	r2,12(r16)
    67a0:	003fe506 	br	6738 <__smakebuf_r+0x90>
    67a4:	04810004 	movi	r18,1024
    67a8:	003ffb06 	br	6798 <__smakebuf_r+0xf0>
    67ac:	8140038f 	ldh	r5,14(r16)
    67b0:	8809883a 	mov	r4,r17
    67b4:	0008db80 	call	8db8 <_isatty_r>
    67b8:	103fde26 	beq	r2,zero,6734 <__smakebuf_r+0x8c>
    67bc:	8080030b 	ldhu	r2,12(r16)
    67c0:	80c010c4 	addi	r3,r16,67
    67c4:	04810004 	movi	r18,1024
    67c8:	10800054 	ori	r2,r2,1
    67cc:	8080030d 	sth	r2,12(r16)
    67d0:	00800044 	movi	r2,1
    67d4:	80c00415 	stw	r3,16(r16)
    67d8:	80800515 	stw	r2,20(r16)
    67dc:	80c00015 	stw	r3,0(r16)
    67e0:	003fd506 	br	6738 <__smakebuf_r+0x90>
    67e4:	80c00a17 	ldw	r3,40(r16)
    67e8:	00800074 	movhi	r2,1
    67ec:	10a20404 	addi	r2,r2,-30704
    67f0:	18bfcb1e 	bne	r3,r2,6720 <__smakebuf_r+0x78>
    67f4:	8080030b 	ldhu	r2,12(r16)
    67f8:	00c10004 	movi	r3,1024
    67fc:	1825883a 	mov	r18,r3
    6800:	10c4b03a 	or	r2,r2,r3
    6804:	8080030d 	sth	r2,12(r16)
    6808:	80c01315 	stw	r3,76(r16)
    680c:	003fca06 	br	6738 <__smakebuf_r+0x90>
    6810:	8100030b 	ldhu	r4,12(r16)
    6814:	2080800c 	andi	r2,r4,512
    6818:	103fb21e 	bne	r2,zero,66e4 <__smakebuf_r+0x3c>
    681c:	80c010c4 	addi	r3,r16,67
    6820:	21000094 	ori	r4,r4,2
    6824:	00800044 	movi	r2,1
    6828:	80800515 	stw	r2,20(r16)
    682c:	8100030d 	sth	r4,12(r16)
    6830:	80c00415 	stw	r3,16(r16)
    6834:	80c00015 	stw	r3,0(r16)
    6838:	003faa06 	br	66e4 <__smakebuf_r+0x3c>

0000683c <_malloc_r>:
    683c:	defff604 	addi	sp,sp,-40
    6840:	28c002c4 	addi	r3,r5,11
    6844:	00800584 	movi	r2,22
    6848:	dc800215 	stw	r18,8(sp)
    684c:	dfc00915 	stw	ra,36(sp)
    6850:	df000815 	stw	fp,32(sp)
    6854:	ddc00715 	stw	r23,28(sp)
    6858:	dd800615 	stw	r22,24(sp)
    685c:	dd400515 	stw	r21,20(sp)
    6860:	dd000415 	stw	r20,16(sp)
    6864:	dcc00315 	stw	r19,12(sp)
    6868:	dc400115 	stw	r17,4(sp)
    686c:	dc000015 	stw	r16,0(sp)
    6870:	2025883a 	mov	r18,r4
    6874:	10c01236 	bltu	r2,r3,68c0 <_malloc_r+0x84>
    6878:	04400404 	movi	r17,16
    687c:	8940142e 	bgeu	r17,r5,68d0 <_malloc_r+0x94>
    6880:	00800304 	movi	r2,12
    6884:	0007883a 	mov	r3,zero
    6888:	90800015 	stw	r2,0(r18)
    688c:	1805883a 	mov	r2,r3
    6890:	dfc00917 	ldw	ra,36(sp)
    6894:	df000817 	ldw	fp,32(sp)
    6898:	ddc00717 	ldw	r23,28(sp)
    689c:	dd800617 	ldw	r22,24(sp)
    68a0:	dd400517 	ldw	r21,20(sp)
    68a4:	dd000417 	ldw	r20,16(sp)
    68a8:	dcc00317 	ldw	r19,12(sp)
    68ac:	dc800217 	ldw	r18,8(sp)
    68b0:	dc400117 	ldw	r17,4(sp)
    68b4:	dc000017 	ldw	r16,0(sp)
    68b8:	dec00a04 	addi	sp,sp,40
    68bc:	f800283a 	ret
    68c0:	00bffe04 	movi	r2,-8
    68c4:	18a2703a 	and	r17,r3,r2
    68c8:	883fed16 	blt	r17,zero,6880 <_malloc_r+0x44>
    68cc:	897fec36 	bltu	r17,r5,6880 <_malloc_r+0x44>
    68d0:	9009883a 	mov	r4,r18
    68d4:	000bb8c0 	call	bb8c <__malloc_lock>
    68d8:	00807dc4 	movi	r2,503
    68dc:	14402b2e 	bgeu	r2,r17,698c <_malloc_r+0x150>
    68e0:	8806d27a 	srli	r3,r17,9
    68e4:	18003f1e 	bne	r3,zero,69e4 <_malloc_r+0x1a8>
    68e8:	880cd0fa 	srli	r6,r17,3
    68ec:	300490fa 	slli	r2,r6,3
    68f0:	02c00074 	movhi	r11,1
    68f4:	5acb2a04 	addi	r11,r11,11432
    68f8:	12cb883a 	add	r5,r2,r11
    68fc:	2c000317 	ldw	r16,12(r5)
    6900:	580f883a 	mov	r7,r11
    6904:	2c00041e 	bne	r5,r16,6918 <_malloc_r+0xdc>
    6908:	00000a06 	br	6934 <_malloc_r+0xf8>
    690c:	1800860e 	bge	r3,zero,6b28 <_malloc_r+0x2ec>
    6910:	84000317 	ldw	r16,12(r16)
    6914:	2c000726 	beq	r5,r16,6934 <_malloc_r+0xf8>
    6918:	80800117 	ldw	r2,4(r16)
    691c:	00ffff04 	movi	r3,-4
    6920:	10c8703a 	and	r4,r2,r3
    6924:	2447c83a 	sub	r3,r4,r17
    6928:	008003c4 	movi	r2,15
    692c:	10fff70e 	bge	r2,r3,690c <_malloc_r+0xd0>
    6930:	31bfffc4 	addi	r6,r6,-1
    6934:	32400044 	addi	r9,r6,1
    6938:	02800074 	movhi	r10,1
    693c:	528b2c04 	addi	r10,r10,11440
    6940:	54000217 	ldw	r16,8(r10)
    6944:	8280a026 	beq	r16,r10,6bc8 <_malloc_r+0x38c>
    6948:	80800117 	ldw	r2,4(r16)
    694c:	00ffff04 	movi	r3,-4
    6950:	10ca703a 	and	r5,r2,r3
    6954:	2c4dc83a 	sub	r6,r5,r17
    6958:	008003c4 	movi	r2,15
    695c:	11808316 	blt	r2,r6,6b6c <_malloc_r+0x330>
    6960:	52800315 	stw	r10,12(r10)
    6964:	52800215 	stw	r10,8(r10)
    6968:	30002916 	blt	r6,zero,6a10 <_malloc_r+0x1d4>
    696c:	8147883a 	add	r3,r16,r5
    6970:	18800117 	ldw	r2,4(r3)
    6974:	9009883a 	mov	r4,r18
    6978:	10800054 	ori	r2,r2,1
    697c:	18800115 	stw	r2,4(r3)
    6980:	000bbac0 	call	bbac <__malloc_unlock>
    6984:	80c00204 	addi	r3,r16,8
    6988:	003fc006 	br	688c <_malloc_r+0x50>
    698c:	02c00074 	movhi	r11,1
    6990:	5acb2a04 	addi	r11,r11,11432
    6994:	8ac5883a 	add	r2,r17,r11
    6998:	14000317 	ldw	r16,12(r2)
    699c:	580f883a 	mov	r7,r11
    69a0:	8806d0fa 	srli	r3,r17,3
    69a4:	14006c26 	beq	r2,r16,6b58 <_malloc_r+0x31c>
    69a8:	80c00117 	ldw	r3,4(r16)
    69ac:	00bfff04 	movi	r2,-4
    69b0:	81800317 	ldw	r6,12(r16)
    69b4:	1886703a 	and	r3,r3,r2
    69b8:	80c7883a 	add	r3,r16,r3
    69bc:	18800117 	ldw	r2,4(r3)
    69c0:	81400217 	ldw	r5,8(r16)
    69c4:	9009883a 	mov	r4,r18
    69c8:	10800054 	ori	r2,r2,1
    69cc:	18800115 	stw	r2,4(r3)
    69d0:	31400215 	stw	r5,8(r6)
    69d4:	29800315 	stw	r6,12(r5)
    69d8:	000bbac0 	call	bbac <__malloc_unlock>
    69dc:	80c00204 	addi	r3,r16,8
    69e0:	003faa06 	br	688c <_malloc_r+0x50>
    69e4:	00800104 	movi	r2,4
    69e8:	10c0052e 	bgeu	r2,r3,6a00 <_malloc_r+0x1c4>
    69ec:	00800504 	movi	r2,20
    69f0:	10c07836 	bltu	r2,r3,6bd4 <_malloc_r+0x398>
    69f4:	198016c4 	addi	r6,r3,91
    69f8:	300490fa 	slli	r2,r6,3
    69fc:	003fbc06 	br	68f0 <_malloc_r+0xb4>
    6a00:	8804d1ba 	srli	r2,r17,6
    6a04:	11800e04 	addi	r6,r2,56
    6a08:	300490fa 	slli	r2,r6,3
    6a0c:	003fb806 	br	68f0 <_malloc_r+0xb4>
    6a10:	00807fc4 	movi	r2,511
    6a14:	1140bb36 	bltu	r2,r5,6d04 <_malloc_r+0x4c8>
    6a18:	2806d0fa 	srli	r3,r5,3
    6a1c:	573ffe04 	addi	fp,r10,-8
    6a20:	00800044 	movi	r2,1
    6a24:	180890fa 	slli	r4,r3,3
    6a28:	1807d0ba 	srai	r3,r3,2
    6a2c:	e1c00117 	ldw	r7,4(fp)
    6a30:	5909883a 	add	r4,r11,r4
    6a34:	21400217 	ldw	r5,8(r4)
    6a38:	10c4983a 	sll	r2,r2,r3
    6a3c:	81000315 	stw	r4,12(r16)
    6a40:	81400215 	stw	r5,8(r16)
    6a44:	388eb03a 	or	r7,r7,r2
    6a48:	2c000315 	stw	r16,12(r5)
    6a4c:	24000215 	stw	r16,8(r4)
    6a50:	e1c00115 	stw	r7,4(fp)
    6a54:	4807883a 	mov	r3,r9
    6a58:	4800cd16 	blt	r9,zero,6d90 <_malloc_r+0x554>
    6a5c:	1807d0ba 	srai	r3,r3,2
    6a60:	00800044 	movi	r2,1
    6a64:	10c8983a 	sll	r4,r2,r3
    6a68:	39004436 	bltu	r7,r4,6b7c <_malloc_r+0x340>
    6a6c:	21c4703a 	and	r2,r4,r7
    6a70:	10000a1e 	bne	r2,zero,6a9c <_malloc_r+0x260>
    6a74:	2109883a 	add	r4,r4,r4
    6a78:	00bfff04 	movi	r2,-4
    6a7c:	4884703a 	and	r2,r9,r2
    6a80:	3906703a 	and	r3,r7,r4
    6a84:	12400104 	addi	r9,r2,4
    6a88:	1800041e 	bne	r3,zero,6a9c <_malloc_r+0x260>
    6a8c:	2109883a 	add	r4,r4,r4
    6a90:	3904703a 	and	r2,r7,r4
    6a94:	4a400104 	addi	r9,r9,4
    6a98:	103ffc26 	beq	r2,zero,6a8c <_malloc_r+0x250>
    6a9c:	480490fa 	slli	r2,r9,3
    6aa0:	4819883a 	mov	r12,r9
    6aa4:	023fff04 	movi	r8,-4
    6aa8:	589b883a 	add	r13,r11,r2
    6aac:	6807883a 	mov	r3,r13
    6ab0:	014003c4 	movi	r5,15
    6ab4:	1c000317 	ldw	r16,12(r3)
    6ab8:	1c00041e 	bne	r3,r16,6acc <_malloc_r+0x290>
    6abc:	0000a706 	br	6d5c <_malloc_r+0x520>
    6ac0:	3000ab0e 	bge	r6,zero,6d70 <_malloc_r+0x534>
    6ac4:	84000317 	ldw	r16,12(r16)
    6ac8:	1c00a426 	beq	r3,r16,6d5c <_malloc_r+0x520>
    6acc:	80800117 	ldw	r2,4(r16)
    6ad0:	1204703a 	and	r2,r2,r8
    6ad4:	144dc83a 	sub	r6,r2,r17
    6ad8:	29bff90e 	bge	r5,r6,6ac0 <_malloc_r+0x284>
    6adc:	81000317 	ldw	r4,12(r16)
    6ae0:	80c00217 	ldw	r3,8(r16)
    6ae4:	89400054 	ori	r5,r17,1
    6ae8:	8445883a 	add	r2,r16,r17
    6aec:	20c00215 	stw	r3,8(r4)
    6af0:	19000315 	stw	r4,12(r3)
    6af4:	81400115 	stw	r5,4(r16)
    6af8:	1187883a 	add	r3,r2,r6
    6afc:	31000054 	ori	r4,r6,1
    6b00:	50800315 	stw	r2,12(r10)
    6b04:	50800215 	stw	r2,8(r10)
    6b08:	19800015 	stw	r6,0(r3)
    6b0c:	11000115 	stw	r4,4(r2)
    6b10:	12800215 	stw	r10,8(r2)
    6b14:	12800315 	stw	r10,12(r2)
    6b18:	9009883a 	mov	r4,r18
    6b1c:	000bbac0 	call	bbac <__malloc_unlock>
    6b20:	80c00204 	addi	r3,r16,8
    6b24:	003f5906 	br	688c <_malloc_r+0x50>
    6b28:	8109883a 	add	r4,r16,r4
    6b2c:	20800117 	ldw	r2,4(r4)
    6b30:	80c00217 	ldw	r3,8(r16)
    6b34:	81400317 	ldw	r5,12(r16)
    6b38:	10800054 	ori	r2,r2,1
    6b3c:	20800115 	stw	r2,4(r4)
    6b40:	28c00215 	stw	r3,8(r5)
    6b44:	19400315 	stw	r5,12(r3)
    6b48:	9009883a 	mov	r4,r18
    6b4c:	000bbac0 	call	bbac <__malloc_unlock>
    6b50:	80c00204 	addi	r3,r16,8
    6b54:	003f4d06 	br	688c <_malloc_r+0x50>
    6b58:	80800204 	addi	r2,r16,8
    6b5c:	14000317 	ldw	r16,12(r2)
    6b60:	143f911e 	bne	r2,r16,69a8 <_malloc_r+0x16c>
    6b64:	1a400084 	addi	r9,r3,2
    6b68:	003f7306 	br	6938 <_malloc_r+0xfc>
    6b6c:	88c00054 	ori	r3,r17,1
    6b70:	8445883a 	add	r2,r16,r17
    6b74:	80c00115 	stw	r3,4(r16)
    6b78:	003fdf06 	br	6af8 <_malloc_r+0x2bc>
    6b7c:	e4000217 	ldw	r16,8(fp)
    6b80:	00bfff04 	movi	r2,-4
    6b84:	80c00117 	ldw	r3,4(r16)
    6b88:	802d883a 	mov	r22,r16
    6b8c:	18aa703a 	and	r21,r3,r2
    6b90:	ac401636 	bltu	r21,r17,6bec <_malloc_r+0x3b0>
    6b94:	ac49c83a 	sub	r4,r21,r17
    6b98:	008003c4 	movi	r2,15
    6b9c:	1100130e 	bge	r2,r4,6bec <_malloc_r+0x3b0>
    6ba0:	88800054 	ori	r2,r17,1
    6ba4:	8447883a 	add	r3,r16,r17
    6ba8:	80800115 	stw	r2,4(r16)
    6bac:	20800054 	ori	r2,r4,1
    6bb0:	18800115 	stw	r2,4(r3)
    6bb4:	e0c00215 	stw	r3,8(fp)
    6bb8:	9009883a 	mov	r4,r18
    6bbc:	000bbac0 	call	bbac <__malloc_unlock>
    6bc0:	80c00204 	addi	r3,r16,8
    6bc4:	003f3106 	br	688c <_malloc_r+0x50>
    6bc8:	39c00117 	ldw	r7,4(r7)
    6bcc:	573ffe04 	addi	fp,r10,-8
    6bd0:	003fa006 	br	6a54 <_malloc_r+0x218>
    6bd4:	00801504 	movi	r2,84
    6bd8:	10c06736 	bltu	r2,r3,6d78 <_malloc_r+0x53c>
    6bdc:	8804d33a 	srli	r2,r17,12
    6be0:	11801b84 	addi	r6,r2,110
    6be4:	300490fa 	slli	r2,r6,3
    6be8:	003f4106 	br	68f0 <_malloc_r+0xb4>
    6bec:	d0a7de17 	ldw	r2,-24712(gp)
    6bf0:	d0e00517 	ldw	r3,-32748(gp)
    6bf4:	053fffc4 	movi	r20,-1
    6bf8:	10800404 	addi	r2,r2,16
    6bfc:	88a7883a 	add	r19,r17,r2
    6c00:	1d000326 	beq	r3,r20,6c10 <_malloc_r+0x3d4>
    6c04:	98c3ffc4 	addi	r3,r19,4095
    6c08:	00bc0004 	movi	r2,-4096
    6c0c:	18a6703a 	and	r19,r3,r2
    6c10:	9009883a 	mov	r4,r18
    6c14:	980b883a 	mov	r5,r19
    6c18:	00087980 	call	8798 <_sbrk_r>
    6c1c:	1009883a 	mov	r4,r2
    6c20:	15000426 	beq	r2,r20,6c34 <_malloc_r+0x3f8>
    6c24:	854b883a 	add	r5,r16,r21
    6c28:	1029883a 	mov	r20,r2
    6c2c:	11405a2e 	bgeu	r2,r5,6d98 <_malloc_r+0x55c>
    6c30:	87000c26 	beq	r16,fp,6c64 <_malloc_r+0x428>
    6c34:	e4000217 	ldw	r16,8(fp)
    6c38:	80c00117 	ldw	r3,4(r16)
    6c3c:	00bfff04 	movi	r2,-4
    6c40:	1884703a 	and	r2,r3,r2
    6c44:	14400336 	bltu	r2,r17,6c54 <_malloc_r+0x418>
    6c48:	1449c83a 	sub	r4,r2,r17
    6c4c:	008003c4 	movi	r2,15
    6c50:	113fd316 	blt	r2,r4,6ba0 <_malloc_r+0x364>
    6c54:	9009883a 	mov	r4,r18
    6c58:	000bbac0 	call	bbac <__malloc_unlock>
    6c5c:	0007883a 	mov	r3,zero
    6c60:	003f0a06 	br	688c <_malloc_r+0x50>
    6c64:	05c00074 	movhi	r23,1
    6c68:	bdd98304 	addi	r23,r23,26124
    6c6c:	b8800017 	ldw	r2,0(r23)
    6c70:	988d883a 	add	r6,r19,r2
    6c74:	b9800015 	stw	r6,0(r23)
    6c78:	d0e00517 	ldw	r3,-32748(gp)
    6c7c:	00bfffc4 	movi	r2,-1
    6c80:	18808e26 	beq	r3,r2,6ebc <_malloc_r+0x680>
    6c84:	2145c83a 	sub	r2,r4,r5
    6c88:	3085883a 	add	r2,r6,r2
    6c8c:	b8800015 	stw	r2,0(r23)
    6c90:	20c001cc 	andi	r3,r4,7
    6c94:	18005f1e 	bne	r3,zero,6e14 <_malloc_r+0x5d8>
    6c98:	000b883a 	mov	r5,zero
    6c9c:	a4c5883a 	add	r2,r20,r19
    6ca0:	1083ffcc 	andi	r2,r2,4095
    6ca4:	00c40004 	movi	r3,4096
    6ca8:	1887c83a 	sub	r3,r3,r2
    6cac:	28e7883a 	add	r19,r5,r3
    6cb0:	9009883a 	mov	r4,r18
    6cb4:	980b883a 	mov	r5,r19
    6cb8:	00087980 	call	8798 <_sbrk_r>
    6cbc:	1007883a 	mov	r3,r2
    6cc0:	00bfffc4 	movi	r2,-1
    6cc4:	18807a26 	beq	r3,r2,6eb0 <_malloc_r+0x674>
    6cc8:	1d05c83a 	sub	r2,r3,r20
    6ccc:	9885883a 	add	r2,r19,r2
    6cd0:	10c00054 	ori	r3,r2,1
    6cd4:	b8800017 	ldw	r2,0(r23)
    6cd8:	a021883a 	mov	r16,r20
    6cdc:	a0c00115 	stw	r3,4(r20)
    6ce0:	9885883a 	add	r2,r19,r2
    6ce4:	b8800015 	stw	r2,0(r23)
    6ce8:	e5000215 	stw	r20,8(fp)
    6cec:	b7003626 	beq	r22,fp,6dc8 <_malloc_r+0x58c>
    6cf0:	018003c4 	movi	r6,15
    6cf4:	35404b36 	bltu	r6,r21,6e24 <_malloc_r+0x5e8>
    6cf8:	00800044 	movi	r2,1
    6cfc:	a0800115 	stw	r2,4(r20)
    6d00:	003fcd06 	br	6c38 <_malloc_r+0x3fc>
    6d04:	2808d27a 	srli	r4,r5,9
    6d08:	2000371e 	bne	r4,zero,6de8 <_malloc_r+0x5ac>
    6d0c:	2808d0fa 	srli	r4,r5,3
    6d10:	200690fa 	slli	r3,r4,3
    6d14:	1ad1883a 	add	r8,r3,r11
    6d18:	41800217 	ldw	r6,8(r8)
    6d1c:	41805b26 	beq	r8,r6,6e8c <_malloc_r+0x650>
    6d20:	30800117 	ldw	r2,4(r6)
    6d24:	00ffff04 	movi	r3,-4
    6d28:	10c4703a 	and	r2,r2,r3
    6d2c:	2880022e 	bgeu	r5,r2,6d38 <_malloc_r+0x4fc>
    6d30:	31800217 	ldw	r6,8(r6)
    6d34:	41bffa1e 	bne	r8,r6,6d20 <_malloc_r+0x4e4>
    6d38:	32000317 	ldw	r8,12(r6)
    6d3c:	39c00117 	ldw	r7,4(r7)
    6d40:	82000315 	stw	r8,12(r16)
    6d44:	81800215 	stw	r6,8(r16)
    6d48:	07000074 	movhi	fp,1
    6d4c:	e70b2a04 	addi	fp,fp,11432
    6d50:	34000315 	stw	r16,12(r6)
    6d54:	44000215 	stw	r16,8(r8)
    6d58:	003f3e06 	br	6a54 <_malloc_r+0x218>
    6d5c:	63000044 	addi	r12,r12,1
    6d60:	608000cc 	andi	r2,r12,3
    6d64:	10005d26 	beq	r2,zero,6edc <_malloc_r+0x6a0>
    6d68:	18c00204 	addi	r3,r3,8
    6d6c:	003f5106 	br	6ab4 <_malloc_r+0x278>
    6d70:	8089883a 	add	r4,r16,r2
    6d74:	003f6d06 	br	6b2c <_malloc_r+0x2f0>
    6d78:	00805504 	movi	r2,340
    6d7c:	10c02036 	bltu	r2,r3,6e00 <_malloc_r+0x5c4>
    6d80:	8804d3fa 	srli	r2,r17,15
    6d84:	11801dc4 	addi	r6,r2,119
    6d88:	300490fa 	slli	r2,r6,3
    6d8c:	003ed806 	br	68f0 <_malloc_r+0xb4>
    6d90:	48c000c4 	addi	r3,r9,3
    6d94:	003f3106 	br	6a5c <_malloc_r+0x220>
    6d98:	05c00074 	movhi	r23,1
    6d9c:	bdd98304 	addi	r23,r23,26124
    6da0:	b8800017 	ldw	r2,0(r23)
    6da4:	988d883a 	add	r6,r19,r2
    6da8:	b9800015 	stw	r6,0(r23)
    6dac:	293fb21e 	bne	r5,r4,6c78 <_malloc_r+0x43c>
    6db0:	2083ffcc 	andi	r2,r4,4095
    6db4:	103fb01e 	bne	r2,zero,6c78 <_malloc_r+0x43c>
    6db8:	e4000217 	ldw	r16,8(fp)
    6dbc:	9d45883a 	add	r2,r19,r21
    6dc0:	10800054 	ori	r2,r2,1
    6dc4:	80800115 	stw	r2,4(r16)
    6dc8:	b8c00017 	ldw	r3,0(r23)
    6dcc:	d0a7df17 	ldw	r2,-24708(gp)
    6dd0:	10c0012e 	bgeu	r2,r3,6dd8 <_malloc_r+0x59c>
    6dd4:	d0e7df15 	stw	r3,-24708(gp)
    6dd8:	d0a7e017 	ldw	r2,-24704(gp)
    6ddc:	10ff962e 	bgeu	r2,r3,6c38 <_malloc_r+0x3fc>
    6de0:	d0e7e015 	stw	r3,-24704(gp)
    6de4:	003f9406 	br	6c38 <_malloc_r+0x3fc>
    6de8:	00800104 	movi	r2,4
    6dec:	11001e36 	bltu	r2,r4,6e68 <_malloc_r+0x62c>
    6df0:	2804d1ba 	srli	r2,r5,6
    6df4:	11000e04 	addi	r4,r2,56
    6df8:	200690fa 	slli	r3,r4,3
    6dfc:	003fc506 	br	6d14 <_malloc_r+0x4d8>
    6e00:	00815504 	movi	r2,1364
    6e04:	10c01d2e 	bgeu	r2,r3,6e7c <_malloc_r+0x640>
    6e08:	01801f84 	movi	r6,126
    6e0c:	0080fc04 	movi	r2,1008
    6e10:	003eb706 	br	68f0 <_malloc_r+0xb4>
    6e14:	00800204 	movi	r2,8
    6e18:	10cbc83a 	sub	r5,r2,r3
    6e1c:	2169883a 	add	r20,r4,r5
    6e20:	003f9e06 	br	6c9c <_malloc_r+0x460>
    6e24:	00bffe04 	movi	r2,-8
    6e28:	a93ffd04 	addi	r4,r21,-12
    6e2c:	2088703a 	and	r4,r4,r2
    6e30:	b10b883a 	add	r5,r22,r4
    6e34:	00c00144 	movi	r3,5
    6e38:	28c00215 	stw	r3,8(r5)
    6e3c:	28c00115 	stw	r3,4(r5)
    6e40:	b0800117 	ldw	r2,4(r22)
    6e44:	1080004c 	andi	r2,r2,1
    6e48:	2084b03a 	or	r2,r4,r2
    6e4c:	b0800115 	stw	r2,4(r22)
    6e50:	313fdd2e 	bgeu	r6,r4,6dc8 <_malloc_r+0x58c>
    6e54:	b1400204 	addi	r5,r22,8
    6e58:	9009883a 	mov	r4,r18
    6e5c:	0005cb40 	call	5cb4 <_free_r>
    6e60:	e4000217 	ldw	r16,8(fp)
    6e64:	003fd806 	br	6dc8 <_malloc_r+0x58c>
    6e68:	00800504 	movi	r2,20
    6e6c:	11001536 	bltu	r2,r4,6ec4 <_malloc_r+0x688>
    6e70:	210016c4 	addi	r4,r4,91
    6e74:	200690fa 	slli	r3,r4,3
    6e78:	003fa606 	br	6d14 <_malloc_r+0x4d8>
    6e7c:	8804d4ba 	srli	r2,r17,18
    6e80:	11801f04 	addi	r6,r2,124
    6e84:	300490fa 	slli	r2,r6,3
    6e88:	003e9906 	br	68f0 <_malloc_r+0xb4>
    6e8c:	2009d0ba 	srai	r4,r4,2
    6e90:	01400074 	movhi	r5,1
    6e94:	294b2a04 	addi	r5,r5,11432
    6e98:	00c00044 	movi	r3,1
    6e9c:	28800117 	ldw	r2,4(r5)
    6ea0:	1906983a 	sll	r3,r3,r4
    6ea4:	10c4b03a 	or	r2,r2,r3
    6ea8:	28800115 	stw	r2,4(r5)
    6eac:	003fa306 	br	6d3c <_malloc_r+0x500>
    6eb0:	0027883a 	mov	r19,zero
    6eb4:	00c00044 	movi	r3,1
    6eb8:	003f8606 	br	6cd4 <_malloc_r+0x498>
    6ebc:	d1200515 	stw	r4,-32748(gp)
    6ec0:	003f7306 	br	6c90 <_malloc_r+0x454>
    6ec4:	00801504 	movi	r2,84
    6ec8:	11001936 	bltu	r2,r4,6f30 <_malloc_r+0x6f4>
    6ecc:	2804d33a 	srli	r2,r5,12
    6ed0:	11001b84 	addi	r4,r2,110
    6ed4:	200690fa 	slli	r3,r4,3
    6ed8:	003f8e06 	br	6d14 <_malloc_r+0x4d8>
    6edc:	480b883a 	mov	r5,r9
    6ee0:	6807883a 	mov	r3,r13
    6ee4:	288000cc 	andi	r2,r5,3
    6ee8:	18fffe04 	addi	r3,r3,-8
    6eec:	297fffc4 	addi	r5,r5,-1
    6ef0:	10001526 	beq	r2,zero,6f48 <_malloc_r+0x70c>
    6ef4:	18800217 	ldw	r2,8(r3)
    6ef8:	10fffa26 	beq	r2,r3,6ee4 <_malloc_r+0x6a8>
    6efc:	2109883a 	add	r4,r4,r4
    6f00:	393f1e36 	bltu	r7,r4,6b7c <_malloc_r+0x340>
    6f04:	203f1d26 	beq	r4,zero,6b7c <_malloc_r+0x340>
    6f08:	21c4703a 	and	r2,r4,r7
    6f0c:	10000226 	beq	r2,zero,6f18 <_malloc_r+0x6dc>
    6f10:	6013883a 	mov	r9,r12
    6f14:	003ee106 	br	6a9c <_malloc_r+0x260>
    6f18:	2109883a 	add	r4,r4,r4
    6f1c:	3904703a 	and	r2,r7,r4
    6f20:	63000104 	addi	r12,r12,4
    6f24:	103ffc26 	beq	r2,zero,6f18 <_malloc_r+0x6dc>
    6f28:	6013883a 	mov	r9,r12
    6f2c:	003edb06 	br	6a9c <_malloc_r+0x260>
    6f30:	00805504 	movi	r2,340
    6f34:	11000836 	bltu	r2,r4,6f58 <_malloc_r+0x71c>
    6f38:	2804d3fa 	srli	r2,r5,15
    6f3c:	11001dc4 	addi	r4,r2,119
    6f40:	200690fa 	slli	r3,r4,3
    6f44:	003f7306 	br	6d14 <_malloc_r+0x4d8>
    6f48:	0104303a 	nor	r2,zero,r4
    6f4c:	388e703a 	and	r7,r7,r2
    6f50:	e1c00115 	stw	r7,4(fp)
    6f54:	003fe906 	br	6efc <_malloc_r+0x6c0>
    6f58:	00815504 	movi	r2,1364
    6f5c:	1100032e 	bgeu	r2,r4,6f6c <_malloc_r+0x730>
    6f60:	01001f84 	movi	r4,126
    6f64:	00c0fc04 	movi	r3,1008
    6f68:	003f6a06 	br	6d14 <_malloc_r+0x4d8>
    6f6c:	2804d4ba 	srli	r2,r5,18
    6f70:	11001f04 	addi	r4,r2,124
    6f74:	200690fa 	slli	r3,r4,3
    6f78:	003f6606 	br	6d14 <_malloc_r+0x4d8>

00006f7c <memchr>:
    6f7c:	008000c4 	movi	r2,3
    6f80:	29403fcc 	andi	r5,r5,255
    6f84:	2007883a 	mov	r3,r4
    6f88:	1180022e 	bgeu	r2,r6,6f94 <memchr+0x18>
    6f8c:	2084703a 	and	r2,r4,r2
    6f90:	10000b26 	beq	r2,zero,6fc0 <memchr+0x44>
    6f94:	313fffc4 	addi	r4,r6,-1
    6f98:	3000051e 	bne	r6,zero,6fb0 <memchr+0x34>
    6f9c:	00002c06 	br	7050 <memchr+0xd4>
    6fa0:	213fffc4 	addi	r4,r4,-1
    6fa4:	00bfffc4 	movi	r2,-1
    6fa8:	18c00044 	addi	r3,r3,1
    6fac:	20802826 	beq	r4,r2,7050 <memchr+0xd4>
    6fb0:	18800003 	ldbu	r2,0(r3)
    6fb4:	28bffa1e 	bne	r5,r2,6fa0 <memchr+0x24>
    6fb8:	1805883a 	mov	r2,r3
    6fbc:	f800283a 	ret
    6fc0:	0011883a 	mov	r8,zero
    6fc4:	0007883a 	mov	r3,zero
    6fc8:	01c00104 	movi	r7,4
    6fcc:	4004923a 	slli	r2,r8,8
    6fd0:	18c00044 	addi	r3,r3,1
    6fd4:	1151883a 	add	r8,r2,r5
    6fd8:	19fffc1e 	bne	r3,r7,6fcc <memchr+0x50>
    6fdc:	02bfbff4 	movhi	r10,65279
    6fe0:	52bfbfc4 	addi	r10,r10,-257
    6fe4:	02602074 	movhi	r9,32897
    6fe8:	4a602004 	addi	r9,r9,-32640
    6fec:	02c000c4 	movi	r11,3
    6ff0:	20800017 	ldw	r2,0(r4)
    6ff4:	31bfff04 	addi	r6,r6,-4
    6ff8:	200f883a 	mov	r7,r4
    6ffc:	1204f03a 	xor	r2,r2,r8
    7000:	1287883a 	add	r3,r2,r10
    7004:	1a46703a 	and	r3,r3,r9
    7008:	0084303a 	nor	r2,zero,r2
    700c:	10c4703a 	and	r2,r2,r3
    7010:	10000b26 	beq	r2,zero,7040 <memchr+0xc4>
    7014:	20800003 	ldbu	r2,0(r4)
    7018:	28800f26 	beq	r5,r2,7058 <memchr+0xdc>
    701c:	20800043 	ldbu	r2,1(r4)
    7020:	21c00044 	addi	r7,r4,1
    7024:	28800c26 	beq	r5,r2,7058 <memchr+0xdc>
    7028:	20800083 	ldbu	r2,2(r4)
    702c:	21c00084 	addi	r7,r4,2
    7030:	28800926 	beq	r5,r2,7058 <memchr+0xdc>
    7034:	208000c3 	ldbu	r2,3(r4)
    7038:	21c000c4 	addi	r7,r4,3
    703c:	28800626 	beq	r5,r2,7058 <memchr+0xdc>
    7040:	21000104 	addi	r4,r4,4
    7044:	59bfea36 	bltu	r11,r6,6ff0 <memchr+0x74>
    7048:	2007883a 	mov	r3,r4
    704c:	003fd106 	br	6f94 <memchr+0x18>
    7050:	0005883a 	mov	r2,zero
    7054:	f800283a 	ret
    7058:	3805883a 	mov	r2,r7
    705c:	f800283a 	ret

00007060 <memmove>:
    7060:	2807883a 	mov	r3,r5
    7064:	2011883a 	mov	r8,r4
    7068:	29000c2e 	bgeu	r5,r4,709c <memmove+0x3c>
    706c:	298f883a 	add	r7,r5,r6
    7070:	21c00a2e 	bgeu	r4,r7,709c <memmove+0x3c>
    7074:	30000726 	beq	r6,zero,7094 <memmove+0x34>
    7078:	2187883a 	add	r3,r4,r6
    707c:	198dc83a 	sub	r6,r3,r6
    7080:	39ffffc4 	addi	r7,r7,-1
    7084:	38800003 	ldbu	r2,0(r7)
    7088:	18ffffc4 	addi	r3,r3,-1
    708c:	18800005 	stb	r2,0(r3)
    7090:	19bffb1e 	bne	r3,r6,7080 <memmove+0x20>
    7094:	2005883a 	mov	r2,r4
    7098:	f800283a 	ret
    709c:	01c003c4 	movi	r7,15
    70a0:	39800a36 	bltu	r7,r6,70cc <memmove+0x6c>
    70a4:	303ffb26 	beq	r6,zero,7094 <memmove+0x34>
    70a8:	400f883a 	mov	r7,r8
    70ac:	320d883a 	add	r6,r6,r8
    70b0:	28800003 	ldbu	r2,0(r5)
    70b4:	29400044 	addi	r5,r5,1
    70b8:	38800005 	stb	r2,0(r7)
    70bc:	39c00044 	addi	r7,r7,1
    70c0:	39bffb1e 	bne	r7,r6,70b0 <memmove+0x50>
    70c4:	2005883a 	mov	r2,r4
    70c8:	f800283a 	ret
    70cc:	1904b03a 	or	r2,r3,r4
    70d0:	108000cc 	andi	r2,r2,3
    70d4:	103ff31e 	bne	r2,zero,70a4 <memmove+0x44>
    70d8:	3811883a 	mov	r8,r7
    70dc:	180b883a 	mov	r5,r3
    70e0:	200f883a 	mov	r7,r4
    70e4:	28c00017 	ldw	r3,0(r5)
    70e8:	31bffc04 	addi	r6,r6,-16
    70ec:	38c00015 	stw	r3,0(r7)
    70f0:	28800117 	ldw	r2,4(r5)
    70f4:	38800115 	stw	r2,4(r7)
    70f8:	28c00217 	ldw	r3,8(r5)
    70fc:	38c00215 	stw	r3,8(r7)
    7100:	28800317 	ldw	r2,12(r5)
    7104:	29400404 	addi	r5,r5,16
    7108:	38800315 	stw	r2,12(r7)
    710c:	39c00404 	addi	r7,r7,16
    7110:	41bff436 	bltu	r8,r6,70e4 <memmove+0x84>
    7114:	008000c4 	movi	r2,3
    7118:	1180072e 	bgeu	r2,r6,7138 <memmove+0xd8>
    711c:	1007883a 	mov	r3,r2
    7120:	28800017 	ldw	r2,0(r5)
    7124:	31bfff04 	addi	r6,r6,-4
    7128:	29400104 	addi	r5,r5,4
    712c:	38800015 	stw	r2,0(r7)
    7130:	39c00104 	addi	r7,r7,4
    7134:	19bffa36 	bltu	r3,r6,7120 <memmove+0xc0>
    7138:	3811883a 	mov	r8,r7
    713c:	003fd906 	br	70a4 <memmove+0x44>

00007140 <_Bfree>:
    7140:	28000826 	beq	r5,zero,7164 <_Bfree+0x24>
    7144:	28800117 	ldw	r2,4(r5)
    7148:	21001317 	ldw	r4,76(r4)
    714c:	1085883a 	add	r2,r2,r2
    7150:	1085883a 	add	r2,r2,r2
    7154:	1105883a 	add	r2,r2,r4
    7158:	10c00017 	ldw	r3,0(r2)
    715c:	28c00015 	stw	r3,0(r5)
    7160:	11400015 	stw	r5,0(r2)
    7164:	f800283a 	ret

00007168 <__hi0bits>:
    7168:	20bfffec 	andhi	r2,r4,65535
    716c:	10001426 	beq	r2,zero,71c0 <__hi0bits+0x58>
    7170:	0007883a 	mov	r3,zero
    7174:	20bfc02c 	andhi	r2,r4,65280
    7178:	1000021e 	bne	r2,zero,7184 <__hi0bits+0x1c>
    717c:	2008923a 	slli	r4,r4,8
    7180:	18c00204 	addi	r3,r3,8
    7184:	20bc002c 	andhi	r2,r4,61440
    7188:	1000021e 	bne	r2,zero,7194 <__hi0bits+0x2c>
    718c:	2008913a 	slli	r4,r4,4
    7190:	18c00104 	addi	r3,r3,4
    7194:	20b0002c 	andhi	r2,r4,49152
    7198:	1000031e 	bne	r2,zero,71a8 <__hi0bits+0x40>
    719c:	2105883a 	add	r2,r4,r4
    71a0:	18c00084 	addi	r3,r3,2
    71a4:	1089883a 	add	r4,r2,r2
    71a8:	20000316 	blt	r4,zero,71b8 <__hi0bits+0x50>
    71ac:	2090002c 	andhi	r2,r4,16384
    71b0:	10000626 	beq	r2,zero,71cc <__hi0bits+0x64>
    71b4:	18c00044 	addi	r3,r3,1
    71b8:	1805883a 	mov	r2,r3
    71bc:	f800283a 	ret
    71c0:	2008943a 	slli	r4,r4,16
    71c4:	00c00404 	movi	r3,16
    71c8:	003fea06 	br	7174 <__hi0bits+0xc>
    71cc:	00c00804 	movi	r3,32
    71d0:	1805883a 	mov	r2,r3
    71d4:	f800283a 	ret

000071d8 <__lo0bits>:
    71d8:	20c00017 	ldw	r3,0(r4)
    71dc:	188001cc 	andi	r2,r3,7
    71e0:	10000a26 	beq	r2,zero,720c <__lo0bits+0x34>
    71e4:	1880004c 	andi	r2,r3,1
    71e8:	1005003a 	cmpeq	r2,r2,zero
    71ec:	10002126 	beq	r2,zero,7274 <__lo0bits+0x9c>
    71f0:	1880008c 	andi	r2,r3,2
    71f4:	1000251e 	bne	r2,zero,728c <__lo0bits+0xb4>
    71f8:	1804d0ba 	srli	r2,r3,2
    71fc:	01400084 	movi	r5,2
    7200:	20800015 	stw	r2,0(r4)
    7204:	2805883a 	mov	r2,r5
    7208:	f800283a 	ret
    720c:	18bfffcc 	andi	r2,r3,65535
    7210:	10001526 	beq	r2,zero,7268 <__lo0bits+0x90>
    7214:	000b883a 	mov	r5,zero
    7218:	18803fcc 	andi	r2,r3,255
    721c:	1000021e 	bne	r2,zero,7228 <__lo0bits+0x50>
    7220:	1806d23a 	srli	r3,r3,8
    7224:	29400204 	addi	r5,r5,8
    7228:	188003cc 	andi	r2,r3,15
    722c:	1000021e 	bne	r2,zero,7238 <__lo0bits+0x60>
    7230:	1806d13a 	srli	r3,r3,4
    7234:	29400104 	addi	r5,r5,4
    7238:	188000cc 	andi	r2,r3,3
    723c:	1000021e 	bne	r2,zero,7248 <__lo0bits+0x70>
    7240:	1806d0ba 	srli	r3,r3,2
    7244:	29400084 	addi	r5,r5,2
    7248:	1880004c 	andi	r2,r3,1
    724c:	1000031e 	bne	r2,zero,725c <__lo0bits+0x84>
    7250:	1806d07a 	srli	r3,r3,1
    7254:	18000a26 	beq	r3,zero,7280 <__lo0bits+0xa8>
    7258:	29400044 	addi	r5,r5,1
    725c:	2805883a 	mov	r2,r5
    7260:	20c00015 	stw	r3,0(r4)
    7264:	f800283a 	ret
    7268:	1806d43a 	srli	r3,r3,16
    726c:	01400404 	movi	r5,16
    7270:	003fe906 	br	7218 <__lo0bits+0x40>
    7274:	000b883a 	mov	r5,zero
    7278:	2805883a 	mov	r2,r5
    727c:	f800283a 	ret
    7280:	01400804 	movi	r5,32
    7284:	2805883a 	mov	r2,r5
    7288:	f800283a 	ret
    728c:	1804d07a 	srli	r2,r3,1
    7290:	01400044 	movi	r5,1
    7294:	20800015 	stw	r2,0(r4)
    7298:	003fda06 	br	7204 <__lo0bits+0x2c>

0000729c <__mcmp>:
    729c:	20800417 	ldw	r2,16(r4)
    72a0:	28c00417 	ldw	r3,16(r5)
    72a4:	10cfc83a 	sub	r7,r2,r3
    72a8:	38000c1e 	bne	r7,zero,72dc <__mcmp+0x40>
    72ac:	18c5883a 	add	r2,r3,r3
    72b0:	1085883a 	add	r2,r2,r2
    72b4:	10c00504 	addi	r3,r2,20
    72b8:	21000504 	addi	r4,r4,20
    72bc:	28cb883a 	add	r5,r5,r3
    72c0:	2085883a 	add	r2,r4,r2
    72c4:	10bfff04 	addi	r2,r2,-4
    72c8:	297fff04 	addi	r5,r5,-4
    72cc:	11800017 	ldw	r6,0(r2)
    72d0:	28c00017 	ldw	r3,0(r5)
    72d4:	30c0031e 	bne	r6,r3,72e4 <__mcmp+0x48>
    72d8:	20bffa36 	bltu	r4,r2,72c4 <__mcmp+0x28>
    72dc:	3805883a 	mov	r2,r7
    72e0:	f800283a 	ret
    72e4:	30c00336 	bltu	r6,r3,72f4 <__mcmp+0x58>
    72e8:	01c00044 	movi	r7,1
    72ec:	3805883a 	mov	r2,r7
    72f0:	f800283a 	ret
    72f4:	01ffffc4 	movi	r7,-1
    72f8:	003ff806 	br	72dc <__mcmp+0x40>

000072fc <__ulp>:
    72fc:	295ffc2c 	andhi	r5,r5,32752
    7300:	013f3034 	movhi	r4,64704
    7304:	290b883a 	add	r5,r5,r4
    7308:	0145c83a 	sub	r2,zero,r5
    730c:	1007d53a 	srai	r3,r2,20
    7310:	000d883a 	mov	r6,zero
    7314:	0140040e 	bge	zero,r5,7328 <__ulp+0x2c>
    7318:	280f883a 	mov	r7,r5
    731c:	3807883a 	mov	r3,r7
    7320:	3005883a 	mov	r2,r6
    7324:	f800283a 	ret
    7328:	008004c4 	movi	r2,19
    732c:	193ffb04 	addi	r4,r3,-20
    7330:	10c00c0e 	bge	r2,r3,7364 <__ulp+0x68>
    7334:	008007c4 	movi	r2,31
    7338:	1107c83a 	sub	r3,r2,r4
    733c:	00800784 	movi	r2,30
    7340:	01400044 	movi	r5,1
    7344:	11000216 	blt	r2,r4,7350 <__ulp+0x54>
    7348:	00800044 	movi	r2,1
    734c:	10ca983a 	sll	r5,r2,r3
    7350:	000f883a 	mov	r7,zero
    7354:	280d883a 	mov	r6,r5
    7358:	3807883a 	mov	r3,r7
    735c:	3005883a 	mov	r2,r6
    7360:	f800283a 	ret
    7364:	00800234 	movhi	r2,8
    7368:	10cfd83a 	sra	r7,r2,r3
    736c:	000d883a 	mov	r6,zero
    7370:	3005883a 	mov	r2,r6
    7374:	3807883a 	mov	r3,r7
    7378:	f800283a 	ret

0000737c <__b2d>:
    737c:	20800417 	ldw	r2,16(r4)
    7380:	defff904 	addi	sp,sp,-28
    7384:	dd000415 	stw	r20,16(sp)
    7388:	1085883a 	add	r2,r2,r2
    738c:	25000504 	addi	r20,r4,20
    7390:	1085883a 	add	r2,r2,r2
    7394:	dc000015 	stw	r16,0(sp)
    7398:	a0a1883a 	add	r16,r20,r2
    739c:	dd400515 	stw	r21,20(sp)
    73a0:	857fff17 	ldw	r21,-4(r16)
    73a4:	dc400115 	stw	r17,4(sp)
    73a8:	dfc00615 	stw	ra,24(sp)
    73ac:	a809883a 	mov	r4,r21
    73b0:	2823883a 	mov	r17,r5
    73b4:	dcc00315 	stw	r19,12(sp)
    73b8:	dc800215 	stw	r18,8(sp)
    73bc:	00071680 	call	7168 <__hi0bits>
    73c0:	100b883a 	mov	r5,r2
    73c4:	00800804 	movi	r2,32
    73c8:	1145c83a 	sub	r2,r2,r5
    73cc:	88800015 	stw	r2,0(r17)
    73d0:	00800284 	movi	r2,10
    73d4:	80ffff04 	addi	r3,r16,-4
    73d8:	11401416 	blt	r2,r5,742c <__b2d+0xb0>
    73dc:	008002c4 	movi	r2,11
    73e0:	1149c83a 	sub	r4,r2,r5
    73e4:	a0c02736 	bltu	r20,r3,7484 <__b2d+0x108>
    73e8:	000d883a 	mov	r6,zero
    73ec:	28800544 	addi	r2,r5,21
    73f0:	a906d83a 	srl	r3,r21,r4
    73f4:	a884983a 	sll	r2,r21,r2
    73f8:	1ccffc34 	orhi	r19,r3,16368
    73fc:	11a4b03a 	or	r18,r2,r6
    7400:	9005883a 	mov	r2,r18
    7404:	9807883a 	mov	r3,r19
    7408:	dfc00617 	ldw	ra,24(sp)
    740c:	dd400517 	ldw	r21,20(sp)
    7410:	dd000417 	ldw	r20,16(sp)
    7414:	dcc00317 	ldw	r19,12(sp)
    7418:	dc800217 	ldw	r18,8(sp)
    741c:	dc400117 	ldw	r17,4(sp)
    7420:	dc000017 	ldw	r16,0(sp)
    7424:	dec00704 	addi	sp,sp,28
    7428:	f800283a 	ret
    742c:	a0c00e36 	bltu	r20,r3,7468 <__b2d+0xec>
    7430:	293ffd44 	addi	r4,r5,-11
    7434:	000d883a 	mov	r6,zero
    7438:	20000f26 	beq	r4,zero,7478 <__b2d+0xfc>
    743c:	00800804 	movi	r2,32
    7440:	110bc83a 	sub	r5,r2,r4
    7444:	a0c01236 	bltu	r20,r3,7490 <__b2d+0x114>
    7448:	000f883a 	mov	r7,zero
    744c:	a904983a 	sll	r2,r21,r4
    7450:	3146d83a 	srl	r3,r6,r5
    7454:	3108983a 	sll	r4,r6,r4
    7458:	108ffc34 	orhi	r2,r2,16368
    745c:	18a6b03a 	or	r19,r3,r2
    7460:	3924b03a 	or	r18,r7,r4
    7464:	003fe606 	br	7400 <__b2d+0x84>
    7468:	293ffd44 	addi	r4,r5,-11
    746c:	81bffe17 	ldw	r6,-8(r16)
    7470:	80fffe04 	addi	r3,r16,-8
    7474:	203ff11e 	bne	r4,zero,743c <__b2d+0xc0>
    7478:	accffc34 	orhi	r19,r21,16368
    747c:	3025883a 	mov	r18,r6
    7480:	003fdf06 	br	7400 <__b2d+0x84>
    7484:	18bfff17 	ldw	r2,-4(r3)
    7488:	110cd83a 	srl	r6,r2,r4
    748c:	003fd706 	br	73ec <__b2d+0x70>
    7490:	18bfff17 	ldw	r2,-4(r3)
    7494:	114ed83a 	srl	r7,r2,r5
    7498:	003fec06 	br	744c <__b2d+0xd0>

0000749c <__ratio>:
    749c:	defff904 	addi	sp,sp,-28
    74a0:	dc400215 	stw	r17,8(sp)
    74a4:	2823883a 	mov	r17,r5
    74a8:	d80b883a 	mov	r5,sp
    74ac:	dfc00615 	stw	ra,24(sp)
    74b0:	dd000515 	stw	r20,20(sp)
    74b4:	dcc00415 	stw	r19,16(sp)
    74b8:	dc800315 	stw	r18,12(sp)
    74bc:	2025883a 	mov	r18,r4
    74c0:	000737c0 	call	737c <__b2d>
    74c4:	8809883a 	mov	r4,r17
    74c8:	d9400104 	addi	r5,sp,4
    74cc:	1027883a 	mov	r19,r2
    74d0:	1829883a 	mov	r20,r3
    74d4:	000737c0 	call	737c <__b2d>
    74d8:	89000417 	ldw	r4,16(r17)
    74dc:	91c00417 	ldw	r7,16(r18)
    74e0:	d9800117 	ldw	r6,4(sp)
    74e4:	180b883a 	mov	r5,r3
    74e8:	390fc83a 	sub	r7,r7,r4
    74ec:	1009883a 	mov	r4,r2
    74f0:	d8800017 	ldw	r2,0(sp)
    74f4:	380e917a 	slli	r7,r7,5
    74f8:	2011883a 	mov	r8,r4
    74fc:	1185c83a 	sub	r2,r2,r6
    7500:	11c5883a 	add	r2,r2,r7
    7504:	1006953a 	slli	r3,r2,20
    7508:	2813883a 	mov	r9,r5
    750c:	00800d0e 	bge	zero,r2,7544 <__ratio+0xa8>
    7510:	1d29883a 	add	r20,r3,r20
    7514:	a00b883a 	mov	r5,r20
    7518:	480f883a 	mov	r7,r9
    751c:	9809883a 	mov	r4,r19
    7520:	400d883a 	mov	r6,r8
    7524:	000a36c0 	call	a36c <__divdf3>
    7528:	dfc00617 	ldw	ra,24(sp)
    752c:	dd000517 	ldw	r20,20(sp)
    7530:	dcc00417 	ldw	r19,16(sp)
    7534:	dc800317 	ldw	r18,12(sp)
    7538:	dc400217 	ldw	r17,8(sp)
    753c:	dec00704 	addi	sp,sp,28
    7540:	f800283a 	ret
    7544:	28d3c83a 	sub	r9,r5,r3
    7548:	003ff206 	br	7514 <__ratio+0x78>

0000754c <_mprec_log10>:
    754c:	defffe04 	addi	sp,sp,-8
    7550:	008005c4 	movi	r2,23
    7554:	dc000015 	stw	r16,0(sp)
    7558:	dfc00115 	stw	ra,4(sp)
    755c:	2021883a 	mov	r16,r4
    7560:	11000c16 	blt	r2,r4,7594 <_mprec_log10+0x48>
    7564:	200490fa 	slli	r2,r4,3
    7568:	00c00074 	movhi	r3,1
    756c:	18c8ec04 	addi	r3,r3,9136
    7570:	10c5883a 	add	r2,r2,r3
    7574:	12400117 	ldw	r9,4(r2)
    7578:	12000017 	ldw	r8,0(r2)
    757c:	4807883a 	mov	r3,r9
    7580:	4005883a 	mov	r2,r8
    7584:	dfc00117 	ldw	ra,4(sp)
    7588:	dc000017 	ldw	r16,0(sp)
    758c:	dec00204 	addi	sp,sp,8
    7590:	f800283a 	ret
    7594:	0011883a 	mov	r8,zero
    7598:	024ffc34 	movhi	r9,16368
    759c:	0005883a 	mov	r2,zero
    75a0:	00d00934 	movhi	r3,16420
    75a4:	480b883a 	mov	r5,r9
    75a8:	4009883a 	mov	r4,r8
    75ac:	180f883a 	mov	r7,r3
    75b0:	100d883a 	mov	r6,r2
    75b4:	0009fa80 	call	9fa8 <__muldf3>
    75b8:	843fffc4 	addi	r16,r16,-1
    75bc:	1011883a 	mov	r8,r2
    75c0:	1813883a 	mov	r9,r3
    75c4:	803ff51e 	bne	r16,zero,759c <_mprec_log10+0x50>
    75c8:	4005883a 	mov	r2,r8
    75cc:	4807883a 	mov	r3,r9
    75d0:	dfc00117 	ldw	ra,4(sp)
    75d4:	dc000017 	ldw	r16,0(sp)
    75d8:	dec00204 	addi	sp,sp,8
    75dc:	f800283a 	ret

000075e0 <__copybits>:
    75e0:	297fffc4 	addi	r5,r5,-1
    75e4:	30800417 	ldw	r2,16(r6)
    75e8:	280bd17a 	srai	r5,r5,5
    75ec:	31800504 	addi	r6,r6,20
    75f0:	1085883a 	add	r2,r2,r2
    75f4:	294b883a 	add	r5,r5,r5
    75f8:	294b883a 	add	r5,r5,r5
    75fc:	1085883a 	add	r2,r2,r2
    7600:	290b883a 	add	r5,r5,r4
    7604:	3087883a 	add	r3,r6,r2
    7608:	29400104 	addi	r5,r5,4
    760c:	30c0052e 	bgeu	r6,r3,7624 <__copybits+0x44>
    7610:	30800017 	ldw	r2,0(r6)
    7614:	31800104 	addi	r6,r6,4
    7618:	20800015 	stw	r2,0(r4)
    761c:	21000104 	addi	r4,r4,4
    7620:	30fffb36 	bltu	r6,r3,7610 <__copybits+0x30>
    7624:	2140032e 	bgeu	r4,r5,7634 <__copybits+0x54>
    7628:	20000015 	stw	zero,0(r4)
    762c:	21000104 	addi	r4,r4,4
    7630:	217ffd36 	bltu	r4,r5,7628 <__copybits+0x48>
    7634:	f800283a 	ret

00007638 <__any_on>:
    7638:	20800417 	ldw	r2,16(r4)
    763c:	2807d17a 	srai	r3,r5,5
    7640:	21000504 	addi	r4,r4,20
    7644:	10c00d0e 	bge	r2,r3,767c <__any_on+0x44>
    7648:	1085883a 	add	r2,r2,r2
    764c:	1085883a 	add	r2,r2,r2
    7650:	208d883a 	add	r6,r4,r2
    7654:	2180182e 	bgeu	r4,r6,76b8 <__any_on+0x80>
    7658:	30bfff17 	ldw	r2,-4(r6)
    765c:	30ffff04 	addi	r3,r6,-4
    7660:	1000041e 	bne	r2,zero,7674 <__any_on+0x3c>
    7664:	20c0142e 	bgeu	r4,r3,76b8 <__any_on+0x80>
    7668:	18ffff04 	addi	r3,r3,-4
    766c:	18800017 	ldw	r2,0(r3)
    7670:	103ffc26 	beq	r2,zero,7664 <__any_on+0x2c>
    7674:	00800044 	movi	r2,1
    7678:	f800283a 	ret
    767c:	18800a0e 	bge	r3,r2,76a8 <__any_on+0x70>
    7680:	294007cc 	andi	r5,r5,31
    7684:	28000826 	beq	r5,zero,76a8 <__any_on+0x70>
    7688:	18c5883a 	add	r2,r3,r3
    768c:	1085883a 	add	r2,r2,r2
    7690:	208d883a 	add	r6,r4,r2
    7694:	30c00017 	ldw	r3,0(r6)
    7698:	1944d83a 	srl	r2,r3,r5
    769c:	1144983a 	sll	r2,r2,r5
    76a0:	18bff41e 	bne	r3,r2,7674 <__any_on+0x3c>
    76a4:	003feb06 	br	7654 <__any_on+0x1c>
    76a8:	18c5883a 	add	r2,r3,r3
    76ac:	1085883a 	add	r2,r2,r2
    76b0:	208d883a 	add	r6,r4,r2
    76b4:	003fe706 	br	7654 <__any_on+0x1c>
    76b8:	0005883a 	mov	r2,zero
    76bc:	f800283a 	ret

000076c0 <_Balloc>:
    76c0:	20c01317 	ldw	r3,76(r4)
    76c4:	defffb04 	addi	sp,sp,-20
    76c8:	dcc00315 	stw	r19,12(sp)
    76cc:	dc800215 	stw	r18,8(sp)
    76d0:	dfc00415 	stw	ra,16(sp)
    76d4:	2825883a 	mov	r18,r5
    76d8:	dc400115 	stw	r17,4(sp)
    76dc:	dc000015 	stw	r16,0(sp)
    76e0:	2027883a 	mov	r19,r4
    76e4:	01800404 	movi	r6,16
    76e8:	01400104 	movi	r5,4
    76ec:	18001726 	beq	r3,zero,774c <_Balloc+0x8c>
    76f0:	01400044 	movi	r5,1
    76f4:	9485883a 	add	r2,r18,r18
    76f8:	2ca2983a 	sll	r17,r5,r18
    76fc:	1085883a 	add	r2,r2,r2
    7700:	10c7883a 	add	r3,r2,r3
    7704:	1c000017 	ldw	r16,0(r3)
    7708:	8c4d883a 	add	r6,r17,r17
    770c:	318d883a 	add	r6,r6,r6
    7710:	9809883a 	mov	r4,r19
    7714:	31800504 	addi	r6,r6,20
    7718:	80001226 	beq	r16,zero,7764 <_Balloc+0xa4>
    771c:	80800017 	ldw	r2,0(r16)
    7720:	18800015 	stw	r2,0(r3)
    7724:	80000415 	stw	zero,16(r16)
    7728:	80000315 	stw	zero,12(r16)
    772c:	8005883a 	mov	r2,r16
    7730:	dfc00417 	ldw	ra,16(sp)
    7734:	dcc00317 	ldw	r19,12(sp)
    7738:	dc800217 	ldw	r18,8(sp)
    773c:	dc400117 	ldw	r17,4(sp)
    7740:	dc000017 	ldw	r16,0(sp)
    7744:	dec00504 	addi	sp,sp,20
    7748:	f800283a 	ret
    774c:	0008afc0 	call	8afc <_calloc_r>
    7750:	1007883a 	mov	r3,r2
    7754:	0021883a 	mov	r16,zero
    7758:	98801315 	stw	r2,76(r19)
    775c:	103fe41e 	bne	r2,zero,76f0 <_Balloc+0x30>
    7760:	003ff206 	br	772c <_Balloc+0x6c>
    7764:	0008afc0 	call	8afc <_calloc_r>
    7768:	103ff026 	beq	r2,zero,772c <_Balloc+0x6c>
    776c:	1021883a 	mov	r16,r2
    7770:	14800115 	stw	r18,4(r2)
    7774:	14400215 	stw	r17,8(r2)
    7778:	003fea06 	br	7724 <_Balloc+0x64>

0000777c <__d2b>:
    777c:	defff504 	addi	sp,sp,-44
    7780:	dcc00515 	stw	r19,20(sp)
    7784:	04c00044 	movi	r19,1
    7788:	dc000215 	stw	r16,8(sp)
    778c:	2821883a 	mov	r16,r5
    7790:	980b883a 	mov	r5,r19
    7794:	ddc00915 	stw	r23,36(sp)
    7798:	dd800815 	stw	r22,32(sp)
    779c:	dd400715 	stw	r21,28(sp)
    77a0:	dd000615 	stw	r20,24(sp)
    77a4:	dc800415 	stw	r18,16(sp)
    77a8:	dc400315 	stw	r17,12(sp)
    77ac:	dfc00a15 	stw	ra,40(sp)
    77b0:	3023883a 	mov	r17,r6
    77b4:	382d883a 	mov	r22,r7
    77b8:	ddc00b17 	ldw	r23,44(sp)
    77bc:	00076c00 	call	76c0 <_Balloc>
    77c0:	1025883a 	mov	r18,r2
    77c4:	00a00034 	movhi	r2,32768
    77c8:	10bfffc4 	addi	r2,r2,-1
    77cc:	8888703a 	and	r4,r17,r2
    77d0:	202ad53a 	srli	r21,r4,20
    77d4:	00800434 	movhi	r2,16
    77d8:	10bfffc4 	addi	r2,r2,-1
    77dc:	8886703a 	and	r3,r17,r2
    77e0:	a829003a 	cmpeq	r20,r21,zero
    77e4:	800b883a 	mov	r5,r16
    77e8:	d8c00115 	stw	r3,4(sp)
    77ec:	94000504 	addi	r16,r18,20
    77f0:	a000021e 	bne	r20,zero,77fc <__d2b+0x80>
    77f4:	18c00434 	orhi	r3,r3,16
    77f8:	d8c00115 	stw	r3,4(sp)
    77fc:	28002726 	beq	r5,zero,789c <__d2b+0x120>
    7800:	d809883a 	mov	r4,sp
    7804:	d9400015 	stw	r5,0(sp)
    7808:	00071d80 	call	71d8 <__lo0bits>
    780c:	100d883a 	mov	r6,r2
    7810:	10003526 	beq	r2,zero,78e8 <__d2b+0x16c>
    7814:	d8c00117 	ldw	r3,4(sp)
    7818:	00800804 	movi	r2,32
    781c:	1185c83a 	sub	r2,r2,r6
    7820:	d9000017 	ldw	r4,0(sp)
    7824:	1886983a 	sll	r3,r3,r2
    7828:	1906b03a 	or	r3,r3,r4
    782c:	90c00515 	stw	r3,20(r18)
    7830:	d8c00117 	ldw	r3,4(sp)
    7834:	1986d83a 	srl	r3,r3,r6
    7838:	d8c00115 	stw	r3,4(sp)
    783c:	180b003a 	cmpeq	r5,r3,zero
    7840:	00800084 	movi	r2,2
    7844:	114bc83a 	sub	r5,r2,r5
    7848:	80c00115 	stw	r3,4(r16)
    784c:	91400415 	stw	r5,16(r18)
    7850:	a0001a1e 	bne	r20,zero,78bc <__d2b+0x140>
    7854:	3545883a 	add	r2,r6,r21
    7858:	10bef344 	addi	r2,r2,-1075
    785c:	00c00d44 	movi	r3,53
    7860:	b0800015 	stw	r2,0(r22)
    7864:	1987c83a 	sub	r3,r3,r6
    7868:	b8c00015 	stw	r3,0(r23)
    786c:	9005883a 	mov	r2,r18
    7870:	dfc00a17 	ldw	ra,40(sp)
    7874:	ddc00917 	ldw	r23,36(sp)
    7878:	dd800817 	ldw	r22,32(sp)
    787c:	dd400717 	ldw	r21,28(sp)
    7880:	dd000617 	ldw	r20,24(sp)
    7884:	dcc00517 	ldw	r19,20(sp)
    7888:	dc800417 	ldw	r18,16(sp)
    788c:	dc400317 	ldw	r17,12(sp)
    7890:	dc000217 	ldw	r16,8(sp)
    7894:	dec00b04 	addi	sp,sp,44
    7898:	f800283a 	ret
    789c:	d9000104 	addi	r4,sp,4
    78a0:	00071d80 	call	71d8 <__lo0bits>
    78a4:	11800804 	addi	r6,r2,32
    78a8:	d8800117 	ldw	r2,4(sp)
    78ac:	94c00415 	stw	r19,16(r18)
    78b0:	980b883a 	mov	r5,r19
    78b4:	90800515 	stw	r2,20(r18)
    78b8:	a03fe626 	beq	r20,zero,7854 <__d2b+0xd8>
    78bc:	2945883a 	add	r2,r5,r5
    78c0:	1085883a 	add	r2,r2,r2
    78c4:	1405883a 	add	r2,r2,r16
    78c8:	113fff17 	ldw	r4,-4(r2)
    78cc:	30fef384 	addi	r3,r6,-1074
    78d0:	2820917a 	slli	r16,r5,5
    78d4:	b0c00015 	stw	r3,0(r22)
    78d8:	00071680 	call	7168 <__hi0bits>
    78dc:	80a1c83a 	sub	r16,r16,r2
    78e0:	bc000015 	stw	r16,0(r23)
    78e4:	003fe106 	br	786c <__d2b+0xf0>
    78e8:	d8800017 	ldw	r2,0(sp)
    78ec:	90800515 	stw	r2,20(r18)
    78f0:	d8c00117 	ldw	r3,4(sp)
    78f4:	003fd106 	br	783c <__d2b+0xc0>

000078f8 <__mdiff>:
    78f8:	defffb04 	addi	sp,sp,-20
    78fc:	dc000015 	stw	r16,0(sp)
    7900:	2821883a 	mov	r16,r5
    7904:	dc800215 	stw	r18,8(sp)
    7908:	300b883a 	mov	r5,r6
    790c:	2025883a 	mov	r18,r4
    7910:	8009883a 	mov	r4,r16
    7914:	dc400115 	stw	r17,4(sp)
    7918:	dfc00415 	stw	ra,16(sp)
    791c:	dcc00315 	stw	r19,12(sp)
    7920:	3023883a 	mov	r17,r6
    7924:	000729c0 	call	729c <__mcmp>
    7928:	10004226 	beq	r2,zero,7a34 <__mdiff+0x13c>
    792c:	10005016 	blt	r2,zero,7a70 <__mdiff+0x178>
    7930:	0027883a 	mov	r19,zero
    7934:	81400117 	ldw	r5,4(r16)
    7938:	9009883a 	mov	r4,r18
    793c:	00076c00 	call	76c0 <_Balloc>
    7940:	1019883a 	mov	r12,r2
    7944:	82800417 	ldw	r10,16(r16)
    7948:	88800417 	ldw	r2,16(r17)
    794c:	81800504 	addi	r6,r16,20
    7950:	5287883a 	add	r3,r10,r10
    7954:	1085883a 	add	r2,r2,r2
    7958:	18c7883a 	add	r3,r3,r3
    795c:	1085883a 	add	r2,r2,r2
    7960:	8a000504 	addi	r8,r17,20
    7964:	64c00315 	stw	r19,12(r12)
    7968:	30db883a 	add	r13,r6,r3
    796c:	4097883a 	add	r11,r8,r2
    7970:	61c00504 	addi	r7,r12,20
    7974:	0013883a 	mov	r9,zero
    7978:	31000017 	ldw	r4,0(r6)
    797c:	41400017 	ldw	r5,0(r8)
    7980:	42000104 	addi	r8,r8,4
    7984:	20bfffcc 	andi	r2,r4,65535
    7988:	28ffffcc 	andi	r3,r5,65535
    798c:	10c5c83a 	sub	r2,r2,r3
    7990:	1245883a 	add	r2,r2,r9
    7994:	2008d43a 	srli	r4,r4,16
    7998:	280ad43a 	srli	r5,r5,16
    799c:	1007d43a 	srai	r3,r2,16
    79a0:	3880000d 	sth	r2,0(r7)
    79a4:	2149c83a 	sub	r4,r4,r5
    79a8:	20c9883a 	add	r4,r4,r3
    79ac:	3900008d 	sth	r4,2(r7)
    79b0:	31800104 	addi	r6,r6,4
    79b4:	39c00104 	addi	r7,r7,4
    79b8:	2013d43a 	srai	r9,r4,16
    79bc:	42ffee36 	bltu	r8,r11,7978 <__mdiff+0x80>
    79c0:	33400c2e 	bgeu	r6,r13,79f4 <__mdiff+0xfc>
    79c4:	30800017 	ldw	r2,0(r6)
    79c8:	31800104 	addi	r6,r6,4
    79cc:	10ffffcc 	andi	r3,r2,65535
    79d0:	1a47883a 	add	r3,r3,r9
    79d4:	1004d43a 	srli	r2,r2,16
    79d8:	1809d43a 	srai	r4,r3,16
    79dc:	38c0000d 	sth	r3,0(r7)
    79e0:	1105883a 	add	r2,r2,r4
    79e4:	3880008d 	sth	r2,2(r7)
    79e8:	1013d43a 	srai	r9,r2,16
    79ec:	39c00104 	addi	r7,r7,4
    79f0:	337ff436 	bltu	r6,r13,79c4 <__mdiff+0xcc>
    79f4:	38bfff17 	ldw	r2,-4(r7)
    79f8:	38ffff04 	addi	r3,r7,-4
    79fc:	1000041e 	bne	r2,zero,7a10 <__mdiff+0x118>
    7a00:	18ffff04 	addi	r3,r3,-4
    7a04:	18800017 	ldw	r2,0(r3)
    7a08:	52bfffc4 	addi	r10,r10,-1
    7a0c:	103ffc26 	beq	r2,zero,7a00 <__mdiff+0x108>
    7a10:	6005883a 	mov	r2,r12
    7a14:	62800415 	stw	r10,16(r12)
    7a18:	dfc00417 	ldw	ra,16(sp)
    7a1c:	dcc00317 	ldw	r19,12(sp)
    7a20:	dc800217 	ldw	r18,8(sp)
    7a24:	dc400117 	ldw	r17,4(sp)
    7a28:	dc000017 	ldw	r16,0(sp)
    7a2c:	dec00504 	addi	sp,sp,20
    7a30:	f800283a 	ret
    7a34:	9009883a 	mov	r4,r18
    7a38:	000b883a 	mov	r5,zero
    7a3c:	00076c00 	call	76c0 <_Balloc>
    7a40:	1019883a 	mov	r12,r2
    7a44:	00800044 	movi	r2,1
    7a48:	60800415 	stw	r2,16(r12)
    7a4c:	6005883a 	mov	r2,r12
    7a50:	60000515 	stw	zero,20(r12)
    7a54:	dfc00417 	ldw	ra,16(sp)
    7a58:	dcc00317 	ldw	r19,12(sp)
    7a5c:	dc800217 	ldw	r18,8(sp)
    7a60:	dc400117 	ldw	r17,4(sp)
    7a64:	dc000017 	ldw	r16,0(sp)
    7a68:	dec00504 	addi	sp,sp,20
    7a6c:	f800283a 	ret
    7a70:	880d883a 	mov	r6,r17
    7a74:	04c00044 	movi	r19,1
    7a78:	8023883a 	mov	r17,r16
    7a7c:	3021883a 	mov	r16,r6
    7a80:	003fac06 	br	7934 <__mdiff+0x3c>

00007a84 <__lshift>:
    7a84:	defff904 	addi	sp,sp,-28
    7a88:	28800417 	ldw	r2,16(r5)
    7a8c:	dc000015 	stw	r16,0(sp)
    7a90:	3021d17a 	srai	r16,r6,5
    7a94:	28c00217 	ldw	r3,8(r5)
    7a98:	10800044 	addi	r2,r2,1
    7a9c:	dc400115 	stw	r17,4(sp)
    7aa0:	80a3883a 	add	r17,r16,r2
    7aa4:	dd400515 	stw	r21,20(sp)
    7aa8:	dd000415 	stw	r20,16(sp)
    7aac:	dc800215 	stw	r18,8(sp)
    7ab0:	dfc00615 	stw	ra,24(sp)
    7ab4:	2825883a 	mov	r18,r5
    7ab8:	dcc00315 	stw	r19,12(sp)
    7abc:	3029883a 	mov	r20,r6
    7ac0:	202b883a 	mov	r21,r4
    7ac4:	29400117 	ldw	r5,4(r5)
    7ac8:	1c40030e 	bge	r3,r17,7ad8 <__lshift+0x54>
    7acc:	18c7883a 	add	r3,r3,r3
    7ad0:	29400044 	addi	r5,r5,1
    7ad4:	1c7ffd16 	blt	r3,r17,7acc <__lshift+0x48>
    7ad8:	a809883a 	mov	r4,r21
    7adc:	00076c00 	call	76c0 <_Balloc>
    7ae0:	1027883a 	mov	r19,r2
    7ae4:	11400504 	addi	r5,r2,20
    7ae8:	0400090e 	bge	zero,r16,7b10 <__lshift+0x8c>
    7aec:	2805883a 	mov	r2,r5
    7af0:	0007883a 	mov	r3,zero
    7af4:	18c00044 	addi	r3,r3,1
    7af8:	10000015 	stw	zero,0(r2)
    7afc:	10800104 	addi	r2,r2,4
    7b00:	80fffc1e 	bne	r16,r3,7af4 <__lshift+0x70>
    7b04:	8405883a 	add	r2,r16,r16
    7b08:	1085883a 	add	r2,r2,r2
    7b0c:	288b883a 	add	r5,r5,r2
    7b10:	90800417 	ldw	r2,16(r18)
    7b14:	91000504 	addi	r4,r18,20
    7b18:	a18007cc 	andi	r6,r20,31
    7b1c:	1085883a 	add	r2,r2,r2
    7b20:	1085883a 	add	r2,r2,r2
    7b24:	208f883a 	add	r7,r4,r2
    7b28:	30001e26 	beq	r6,zero,7ba4 <__lshift+0x120>
    7b2c:	00800804 	movi	r2,32
    7b30:	1191c83a 	sub	r8,r2,r6
    7b34:	0007883a 	mov	r3,zero
    7b38:	20800017 	ldw	r2,0(r4)
    7b3c:	1184983a 	sll	r2,r2,r6
    7b40:	1884b03a 	or	r2,r3,r2
    7b44:	28800015 	stw	r2,0(r5)
    7b48:	20c00017 	ldw	r3,0(r4)
    7b4c:	21000104 	addi	r4,r4,4
    7b50:	29400104 	addi	r5,r5,4
    7b54:	1a06d83a 	srl	r3,r3,r8
    7b58:	21fff736 	bltu	r4,r7,7b38 <__lshift+0xb4>
    7b5c:	28c00015 	stw	r3,0(r5)
    7b60:	18000126 	beq	r3,zero,7b68 <__lshift+0xe4>
    7b64:	8c400044 	addi	r17,r17,1
    7b68:	88bfffc4 	addi	r2,r17,-1
    7b6c:	98800415 	stw	r2,16(r19)
    7b70:	a809883a 	mov	r4,r21
    7b74:	900b883a 	mov	r5,r18
    7b78:	00071400 	call	7140 <_Bfree>
    7b7c:	9805883a 	mov	r2,r19
    7b80:	dfc00617 	ldw	ra,24(sp)
    7b84:	dd400517 	ldw	r21,20(sp)
    7b88:	dd000417 	ldw	r20,16(sp)
    7b8c:	dcc00317 	ldw	r19,12(sp)
    7b90:	dc800217 	ldw	r18,8(sp)
    7b94:	dc400117 	ldw	r17,4(sp)
    7b98:	dc000017 	ldw	r16,0(sp)
    7b9c:	dec00704 	addi	sp,sp,28
    7ba0:	f800283a 	ret
    7ba4:	20800017 	ldw	r2,0(r4)
    7ba8:	21000104 	addi	r4,r4,4
    7bac:	28800015 	stw	r2,0(r5)
    7bb0:	29400104 	addi	r5,r5,4
    7bb4:	21ffec2e 	bgeu	r4,r7,7b68 <__lshift+0xe4>
    7bb8:	20800017 	ldw	r2,0(r4)
    7bbc:	21000104 	addi	r4,r4,4
    7bc0:	28800015 	stw	r2,0(r5)
    7bc4:	29400104 	addi	r5,r5,4
    7bc8:	21fff636 	bltu	r4,r7,7ba4 <__lshift+0x120>
    7bcc:	003fe606 	br	7b68 <__lshift+0xe4>

00007bd0 <__multiply>:
    7bd0:	defff904 	addi	sp,sp,-28
    7bd4:	dcc00315 	stw	r19,12(sp)
    7bd8:	dc800215 	stw	r18,8(sp)
    7bdc:	2cc00417 	ldw	r19,16(r5)
    7be0:	34800417 	ldw	r18,16(r6)
    7be4:	dd000415 	stw	r20,16(sp)
    7be8:	dc400115 	stw	r17,4(sp)
    7bec:	dfc00615 	stw	ra,24(sp)
    7bf0:	dd400515 	stw	r21,20(sp)
    7bf4:	dc000015 	stw	r16,0(sp)
    7bf8:	2823883a 	mov	r17,r5
    7bfc:	3029883a 	mov	r20,r6
    7c00:	9c80040e 	bge	r19,r18,7c14 <__multiply+0x44>
    7c04:	9027883a 	mov	r19,r18
    7c08:	2c800417 	ldw	r18,16(r5)
    7c0c:	2829883a 	mov	r20,r5
    7c10:	3023883a 	mov	r17,r6
    7c14:	88800217 	ldw	r2,8(r17)
    7c18:	9ca1883a 	add	r16,r19,r18
    7c1c:	89400117 	ldw	r5,4(r17)
    7c20:	1400010e 	bge	r2,r16,7c28 <__multiply+0x58>
    7c24:	29400044 	addi	r5,r5,1
    7c28:	00076c00 	call	76c0 <_Balloc>
    7c2c:	102b883a 	mov	r21,r2
    7c30:	8405883a 	add	r2,r16,r16
    7c34:	1085883a 	add	r2,r2,r2
    7c38:	a9000504 	addi	r4,r21,20
    7c3c:	209d883a 	add	r14,r4,r2
    7c40:	2380042e 	bgeu	r4,r14,7c54 <__multiply+0x84>
    7c44:	2005883a 	mov	r2,r4
    7c48:	10000015 	stw	zero,0(r2)
    7c4c:	10800104 	addi	r2,r2,4
    7c50:	13bffd36 	bltu	r2,r14,7c48 <__multiply+0x78>
    7c54:	9485883a 	add	r2,r18,r18
    7c58:	9cc7883a 	add	r3,r19,r19
    7c5c:	a1800504 	addi	r6,r20,20
    7c60:	1085883a 	add	r2,r2,r2
    7c64:	8b400504 	addi	r13,r17,20
    7c68:	18c7883a 	add	r3,r3,r3
    7c6c:	309f883a 	add	r15,r6,r2
    7c70:	68d7883a 	add	r11,r13,r3
    7c74:	33c03b2e 	bgeu	r6,r15,7d64 <__multiply+0x194>
    7c78:	2019883a 	mov	r12,r4
    7c7c:	30800017 	ldw	r2,0(r6)
    7c80:	127fffcc 	andi	r9,r2,65535
    7c84:	48001826 	beq	r9,zero,7ce8 <__multiply+0x118>
    7c88:	6811883a 	mov	r8,r13
    7c8c:	600f883a 	mov	r7,r12
    7c90:	0015883a 	mov	r10,zero
    7c94:	40c00017 	ldw	r3,0(r8)
    7c98:	39400017 	ldw	r5,0(r7)
    7c9c:	42000104 	addi	r8,r8,4
    7ca0:	193fffcc 	andi	r4,r3,65535
    7ca4:	4909383a 	mul	r4,r9,r4
    7ca8:	1806d43a 	srli	r3,r3,16
    7cac:	28bfffcc 	andi	r2,r5,65535
    7cb0:	5085883a 	add	r2,r10,r2
    7cb4:	2089883a 	add	r4,r4,r2
    7cb8:	48c7383a 	mul	r3,r9,r3
    7cbc:	280ad43a 	srli	r5,r5,16
    7cc0:	2004d43a 	srli	r2,r4,16
    7cc4:	3900000d 	sth	r4,0(r7)
    7cc8:	1947883a 	add	r3,r3,r5
    7ccc:	10c5883a 	add	r2,r2,r3
    7cd0:	3880008d 	sth	r2,2(r7)
    7cd4:	1014d43a 	srli	r10,r2,16
    7cd8:	39c00104 	addi	r7,r7,4
    7cdc:	42ffed36 	bltu	r8,r11,7c94 <__multiply+0xc4>
    7ce0:	3a800015 	stw	r10,0(r7)
    7ce4:	30800017 	ldw	r2,0(r6)
    7ce8:	1012d43a 	srli	r9,r2,16
    7cec:	48001926 	beq	r9,zero,7d54 <__multiply+0x184>
    7cf0:	60800017 	ldw	r2,0(r12)
    7cf4:	6811883a 	mov	r8,r13
    7cf8:	600f883a 	mov	r7,r12
    7cfc:	0015883a 	mov	r10,zero
    7d00:	100b883a 	mov	r5,r2
    7d04:	41000017 	ldw	r4,0(r8)
    7d08:	2806d43a 	srli	r3,r5,16
    7d0c:	3880000d 	sth	r2,0(r7)
    7d10:	20bfffcc 	andi	r2,r4,65535
    7d14:	4885383a 	mul	r2,r9,r2
    7d18:	50c7883a 	add	r3,r10,r3
    7d1c:	2008d43a 	srli	r4,r4,16
    7d20:	10c5883a 	add	r2,r2,r3
    7d24:	3880008d 	sth	r2,2(r7)
    7d28:	39c00104 	addi	r7,r7,4
    7d2c:	39400017 	ldw	r5,0(r7)
    7d30:	4909383a 	mul	r4,r9,r4
    7d34:	1004d43a 	srli	r2,r2,16
    7d38:	28ffffcc 	andi	r3,r5,65535
    7d3c:	20c9883a 	add	r4,r4,r3
    7d40:	1105883a 	add	r2,r2,r4
    7d44:	42000104 	addi	r8,r8,4
    7d48:	1014d43a 	srli	r10,r2,16
    7d4c:	42ffed36 	bltu	r8,r11,7d04 <__multiply+0x134>
    7d50:	38800015 	stw	r2,0(r7)
    7d54:	31800104 	addi	r6,r6,4
    7d58:	33c0022e 	bgeu	r6,r15,7d64 <__multiply+0x194>
    7d5c:	63000104 	addi	r12,r12,4
    7d60:	003fc606 	br	7c7c <__multiply+0xac>
    7d64:	0400090e 	bge	zero,r16,7d8c <__multiply+0x1bc>
    7d68:	70bfff17 	ldw	r2,-4(r14)
    7d6c:	70ffff04 	addi	r3,r14,-4
    7d70:	10000326 	beq	r2,zero,7d80 <__multiply+0x1b0>
    7d74:	00000506 	br	7d8c <__multiply+0x1bc>
    7d78:	18800017 	ldw	r2,0(r3)
    7d7c:	1000031e 	bne	r2,zero,7d8c <__multiply+0x1bc>
    7d80:	843fffc4 	addi	r16,r16,-1
    7d84:	18ffff04 	addi	r3,r3,-4
    7d88:	803ffb1e 	bne	r16,zero,7d78 <__multiply+0x1a8>
    7d8c:	a805883a 	mov	r2,r21
    7d90:	ac000415 	stw	r16,16(r21)
    7d94:	dfc00617 	ldw	ra,24(sp)
    7d98:	dd400517 	ldw	r21,20(sp)
    7d9c:	dd000417 	ldw	r20,16(sp)
    7da0:	dcc00317 	ldw	r19,12(sp)
    7da4:	dc800217 	ldw	r18,8(sp)
    7da8:	dc400117 	ldw	r17,4(sp)
    7dac:	dc000017 	ldw	r16,0(sp)
    7db0:	dec00704 	addi	sp,sp,28
    7db4:	f800283a 	ret

00007db8 <__i2b>:
    7db8:	defffd04 	addi	sp,sp,-12
    7dbc:	dc000015 	stw	r16,0(sp)
    7dc0:	04000044 	movi	r16,1
    7dc4:	dc800115 	stw	r18,4(sp)
    7dc8:	2825883a 	mov	r18,r5
    7dcc:	800b883a 	mov	r5,r16
    7dd0:	dfc00215 	stw	ra,8(sp)
    7dd4:	00076c00 	call	76c0 <_Balloc>
    7dd8:	14000415 	stw	r16,16(r2)
    7ddc:	14800515 	stw	r18,20(r2)
    7de0:	dfc00217 	ldw	ra,8(sp)
    7de4:	dc800117 	ldw	r18,4(sp)
    7de8:	dc000017 	ldw	r16,0(sp)
    7dec:	dec00304 	addi	sp,sp,12
    7df0:	f800283a 	ret

00007df4 <__multadd>:
    7df4:	defffa04 	addi	sp,sp,-24
    7df8:	dc800215 	stw	r18,8(sp)
    7dfc:	2c800417 	ldw	r18,16(r5)
    7e00:	dd000415 	stw	r20,16(sp)
    7e04:	dcc00315 	stw	r19,12(sp)
    7e08:	dc000015 	stw	r16,0(sp)
    7e0c:	dfc00515 	stw	ra,20(sp)
    7e10:	3821883a 	mov	r16,r7
    7e14:	dc400115 	stw	r17,4(sp)
    7e18:	2827883a 	mov	r19,r5
    7e1c:	2029883a 	mov	r20,r4
    7e20:	2a000504 	addi	r8,r5,20
    7e24:	000f883a 	mov	r7,zero
    7e28:	40800017 	ldw	r2,0(r8)
    7e2c:	39c00044 	addi	r7,r7,1
    7e30:	10ffffcc 	andi	r3,r2,65535
    7e34:	1987383a 	mul	r3,r3,r6
    7e38:	1004d43a 	srli	r2,r2,16
    7e3c:	1c07883a 	add	r3,r3,r16
    7e40:	180ad43a 	srli	r5,r3,16
    7e44:	1185383a 	mul	r2,r2,r6
    7e48:	18ffffcc 	andi	r3,r3,65535
    7e4c:	1145883a 	add	r2,r2,r5
    7e50:	1008943a 	slli	r4,r2,16
    7e54:	1020d43a 	srli	r16,r2,16
    7e58:	20c9883a 	add	r4,r4,r3
    7e5c:	41000015 	stw	r4,0(r8)
    7e60:	42000104 	addi	r8,r8,4
    7e64:	3cbff016 	blt	r7,r18,7e28 <__multadd+0x34>
    7e68:	80000826 	beq	r16,zero,7e8c <__multadd+0x98>
    7e6c:	98800217 	ldw	r2,8(r19)
    7e70:	90800f0e 	bge	r18,r2,7eb0 <__multadd+0xbc>
    7e74:	9485883a 	add	r2,r18,r18
    7e78:	1085883a 	add	r2,r2,r2
    7e7c:	14c5883a 	add	r2,r2,r19
    7e80:	90c00044 	addi	r3,r18,1
    7e84:	14000515 	stw	r16,20(r2)
    7e88:	98c00415 	stw	r3,16(r19)
    7e8c:	9805883a 	mov	r2,r19
    7e90:	dfc00517 	ldw	ra,20(sp)
    7e94:	dd000417 	ldw	r20,16(sp)
    7e98:	dcc00317 	ldw	r19,12(sp)
    7e9c:	dc800217 	ldw	r18,8(sp)
    7ea0:	dc400117 	ldw	r17,4(sp)
    7ea4:	dc000017 	ldw	r16,0(sp)
    7ea8:	dec00604 	addi	sp,sp,24
    7eac:	f800283a 	ret
    7eb0:	99400117 	ldw	r5,4(r19)
    7eb4:	a009883a 	mov	r4,r20
    7eb8:	29400044 	addi	r5,r5,1
    7ebc:	00076c00 	call	76c0 <_Balloc>
    7ec0:	99800417 	ldw	r6,16(r19)
    7ec4:	99400304 	addi	r5,r19,12
    7ec8:	11000304 	addi	r4,r2,12
    7ecc:	318d883a 	add	r6,r6,r6
    7ed0:	318d883a 	add	r6,r6,r6
    7ed4:	31800204 	addi	r6,r6,8
    7ed8:	1023883a 	mov	r17,r2
    7edc:	0001c5c0 	call	1c5c <memcpy>
    7ee0:	980b883a 	mov	r5,r19
    7ee4:	a009883a 	mov	r4,r20
    7ee8:	00071400 	call	7140 <_Bfree>
    7eec:	8827883a 	mov	r19,r17
    7ef0:	003fe006 	br	7e74 <__multadd+0x80>

00007ef4 <__pow5mult>:
    7ef4:	defffa04 	addi	sp,sp,-24
    7ef8:	308000cc 	andi	r2,r6,3
    7efc:	dd000415 	stw	r20,16(sp)
    7f00:	dcc00315 	stw	r19,12(sp)
    7f04:	dc000015 	stw	r16,0(sp)
    7f08:	dfc00515 	stw	ra,20(sp)
    7f0c:	dc800215 	stw	r18,8(sp)
    7f10:	dc400115 	stw	r17,4(sp)
    7f14:	3021883a 	mov	r16,r6
    7f18:	2027883a 	mov	r19,r4
    7f1c:	2829883a 	mov	r20,r5
    7f20:	10002b1e 	bne	r2,zero,7fd0 <__pow5mult+0xdc>
    7f24:	8025d0ba 	srai	r18,r16,2
    7f28:	90001b26 	beq	r18,zero,7f98 <__pow5mult+0xa4>
    7f2c:	9c001217 	ldw	r16,72(r19)
    7f30:	8000081e 	bne	r16,zero,7f54 <__pow5mult+0x60>
    7f34:	00003006 	br	7ff8 <__pow5mult+0x104>
    7f38:	800b883a 	mov	r5,r16
    7f3c:	800d883a 	mov	r6,r16
    7f40:	9809883a 	mov	r4,r19
    7f44:	90001426 	beq	r18,zero,7f98 <__pow5mult+0xa4>
    7f48:	80800017 	ldw	r2,0(r16)
    7f4c:	10001b26 	beq	r2,zero,7fbc <__pow5mult+0xc8>
    7f50:	1021883a 	mov	r16,r2
    7f54:	9080004c 	andi	r2,r18,1
    7f58:	1005003a 	cmpeq	r2,r2,zero
    7f5c:	9025d07a 	srai	r18,r18,1
    7f60:	800d883a 	mov	r6,r16
    7f64:	9809883a 	mov	r4,r19
    7f68:	a00b883a 	mov	r5,r20
    7f6c:	103ff21e 	bne	r2,zero,7f38 <__pow5mult+0x44>
    7f70:	0007bd00 	call	7bd0 <__multiply>
    7f74:	a00b883a 	mov	r5,r20
    7f78:	9809883a 	mov	r4,r19
    7f7c:	1023883a 	mov	r17,r2
    7f80:	00071400 	call	7140 <_Bfree>
    7f84:	8829883a 	mov	r20,r17
    7f88:	800b883a 	mov	r5,r16
    7f8c:	800d883a 	mov	r6,r16
    7f90:	9809883a 	mov	r4,r19
    7f94:	903fec1e 	bne	r18,zero,7f48 <__pow5mult+0x54>
    7f98:	a005883a 	mov	r2,r20
    7f9c:	dfc00517 	ldw	ra,20(sp)
    7fa0:	dd000417 	ldw	r20,16(sp)
    7fa4:	dcc00317 	ldw	r19,12(sp)
    7fa8:	dc800217 	ldw	r18,8(sp)
    7fac:	dc400117 	ldw	r17,4(sp)
    7fb0:	dc000017 	ldw	r16,0(sp)
    7fb4:	dec00604 	addi	sp,sp,24
    7fb8:	f800283a 	ret
    7fbc:	0007bd00 	call	7bd0 <__multiply>
    7fc0:	80800015 	stw	r2,0(r16)
    7fc4:	1021883a 	mov	r16,r2
    7fc8:	10000015 	stw	zero,0(r2)
    7fcc:	003fe106 	br	7f54 <__pow5mult+0x60>
    7fd0:	1085883a 	add	r2,r2,r2
    7fd4:	00c00074 	movhi	r3,1
    7fd8:	18c93204 	addi	r3,r3,9416
    7fdc:	1085883a 	add	r2,r2,r2
    7fe0:	10c5883a 	add	r2,r2,r3
    7fe4:	11bfff17 	ldw	r6,-4(r2)
    7fe8:	000f883a 	mov	r7,zero
    7fec:	0007df40 	call	7df4 <__multadd>
    7ff0:	1029883a 	mov	r20,r2
    7ff4:	003fcb06 	br	7f24 <__pow5mult+0x30>
    7ff8:	9809883a 	mov	r4,r19
    7ffc:	01409c44 	movi	r5,625
    8000:	0007db80 	call	7db8 <__i2b>
    8004:	98801215 	stw	r2,72(r19)
    8008:	1021883a 	mov	r16,r2
    800c:	10000015 	stw	zero,0(r2)
    8010:	003fd006 	br	7f54 <__pow5mult+0x60>

00008014 <__s2b>:
    8014:	defff904 	addi	sp,sp,-28
    8018:	dcc00315 	stw	r19,12(sp)
    801c:	dc800215 	stw	r18,8(sp)
    8020:	2827883a 	mov	r19,r5
    8024:	2025883a 	mov	r18,r4
    8028:	01400244 	movi	r5,9
    802c:	39000204 	addi	r4,r7,8
    8030:	dd000415 	stw	r20,16(sp)
    8034:	dc400115 	stw	r17,4(sp)
    8038:	dfc00615 	stw	ra,24(sp)
    803c:	dd400515 	stw	r21,20(sp)
    8040:	dc000015 	stw	r16,0(sp)
    8044:	3829883a 	mov	r20,r7
    8048:	3023883a 	mov	r17,r6
    804c:	000ac4c0 	call	ac4c <__divsi3>
    8050:	00c00044 	movi	r3,1
    8054:	1880350e 	bge	r3,r2,812c <__s2b+0x118>
    8058:	000b883a 	mov	r5,zero
    805c:	18c7883a 	add	r3,r3,r3
    8060:	29400044 	addi	r5,r5,1
    8064:	18bffd16 	blt	r3,r2,805c <__s2b+0x48>
    8068:	9009883a 	mov	r4,r18
    806c:	00076c00 	call	76c0 <_Balloc>
    8070:	1011883a 	mov	r8,r2
    8074:	d8800717 	ldw	r2,28(sp)
    8078:	00c00044 	movi	r3,1
    807c:	01800244 	movi	r6,9
    8080:	40800515 	stw	r2,20(r8)
    8084:	40c00415 	stw	r3,16(r8)
    8088:	3440260e 	bge	r6,r17,8124 <__s2b+0x110>
    808c:	3021883a 	mov	r16,r6
    8090:	99ab883a 	add	r21,r19,r6
    8094:	9c05883a 	add	r2,r19,r16
    8098:	11c00007 	ldb	r7,0(r2)
    809c:	400b883a 	mov	r5,r8
    80a0:	9009883a 	mov	r4,r18
    80a4:	39fff404 	addi	r7,r7,-48
    80a8:	01800284 	movi	r6,10
    80ac:	0007df40 	call	7df4 <__multadd>
    80b0:	84000044 	addi	r16,r16,1
    80b4:	1011883a 	mov	r8,r2
    80b8:	8c3ff61e 	bne	r17,r16,8094 <__s2b+0x80>
    80bc:	ac45883a 	add	r2,r21,r17
    80c0:	117ffe04 	addi	r5,r2,-8
    80c4:	880d883a 	mov	r6,r17
    80c8:	35000c0e 	bge	r6,r20,80fc <__s2b+0xe8>
    80cc:	a185c83a 	sub	r2,r20,r6
    80d0:	2821883a 	mov	r16,r5
    80d4:	28a3883a 	add	r17,r5,r2
    80d8:	81c00007 	ldb	r7,0(r16)
    80dc:	400b883a 	mov	r5,r8
    80e0:	9009883a 	mov	r4,r18
    80e4:	39fff404 	addi	r7,r7,-48
    80e8:	01800284 	movi	r6,10
    80ec:	0007df40 	call	7df4 <__multadd>
    80f0:	84000044 	addi	r16,r16,1
    80f4:	1011883a 	mov	r8,r2
    80f8:	847ff71e 	bne	r16,r17,80d8 <__s2b+0xc4>
    80fc:	4005883a 	mov	r2,r8
    8100:	dfc00617 	ldw	ra,24(sp)
    8104:	dd400517 	ldw	r21,20(sp)
    8108:	dd000417 	ldw	r20,16(sp)
    810c:	dcc00317 	ldw	r19,12(sp)
    8110:	dc800217 	ldw	r18,8(sp)
    8114:	dc400117 	ldw	r17,4(sp)
    8118:	dc000017 	ldw	r16,0(sp)
    811c:	dec00704 	addi	sp,sp,28
    8120:	f800283a 	ret
    8124:	99400284 	addi	r5,r19,10
    8128:	003fe706 	br	80c8 <__s2b+0xb4>
    812c:	000b883a 	mov	r5,zero
    8130:	003fcd06 	br	8068 <__s2b+0x54>

00008134 <_realloc_r>:
    8134:	defff404 	addi	sp,sp,-48
    8138:	dd800815 	stw	r22,32(sp)
    813c:	dc800415 	stw	r18,16(sp)
    8140:	dc400315 	stw	r17,12(sp)
    8144:	dfc00b15 	stw	ra,44(sp)
    8148:	df000a15 	stw	fp,40(sp)
    814c:	ddc00915 	stw	r23,36(sp)
    8150:	dd400715 	stw	r21,28(sp)
    8154:	dd000615 	stw	r20,24(sp)
    8158:	dcc00515 	stw	r19,20(sp)
    815c:	dc000215 	stw	r16,8(sp)
    8160:	2825883a 	mov	r18,r5
    8164:	3023883a 	mov	r17,r6
    8168:	202d883a 	mov	r22,r4
    816c:	2800c926 	beq	r5,zero,8494 <_realloc_r+0x360>
    8170:	000bb8c0 	call	bb8c <__malloc_lock>
    8174:	943ffe04 	addi	r16,r18,-8
    8178:	88c002c4 	addi	r3,r17,11
    817c:	00800584 	movi	r2,22
    8180:	82000117 	ldw	r8,4(r16)
    8184:	10c01b2e 	bgeu	r2,r3,81f4 <_realloc_r+0xc0>
    8188:	00bffe04 	movi	r2,-8
    818c:	188e703a 	and	r7,r3,r2
    8190:	3839883a 	mov	fp,r7
    8194:	38001a16 	blt	r7,zero,8200 <_realloc_r+0xcc>
    8198:	e4401936 	bltu	fp,r17,8200 <_realloc_r+0xcc>
    819c:	013fff04 	movi	r4,-4
    81a0:	4126703a 	and	r19,r8,r4
    81a4:	99c02616 	blt	r19,r7,8240 <_realloc_r+0x10c>
    81a8:	802b883a 	mov	r21,r16
    81ac:	9829883a 	mov	r20,r19
    81b0:	84000204 	addi	r16,r16,8
    81b4:	a80f883a 	mov	r7,r21
    81b8:	a70dc83a 	sub	r6,r20,fp
    81bc:	008003c4 	movi	r2,15
    81c0:	1180c136 	bltu	r2,r6,84c8 <_realloc_r+0x394>
    81c4:	38800117 	ldw	r2,4(r7)
    81c8:	a549883a 	add	r4,r20,r21
    81cc:	1080004c 	andi	r2,r2,1
    81d0:	a084b03a 	or	r2,r20,r2
    81d4:	38800115 	stw	r2,4(r7)
    81d8:	20c00117 	ldw	r3,4(r4)
    81dc:	18c00054 	ori	r3,r3,1
    81e0:	20c00115 	stw	r3,4(r4)
    81e4:	b009883a 	mov	r4,r22
    81e8:	000bbac0 	call	bbac <__malloc_unlock>
    81ec:	8023883a 	mov	r17,r16
    81f0:	00000606 	br	820c <_realloc_r+0xd8>
    81f4:	01c00404 	movi	r7,16
    81f8:	3839883a 	mov	fp,r7
    81fc:	e47fe72e 	bgeu	fp,r17,819c <_realloc_r+0x68>
    8200:	00800304 	movi	r2,12
    8204:	0023883a 	mov	r17,zero
    8208:	b0800015 	stw	r2,0(r22)
    820c:	8805883a 	mov	r2,r17
    8210:	dfc00b17 	ldw	ra,44(sp)
    8214:	df000a17 	ldw	fp,40(sp)
    8218:	ddc00917 	ldw	r23,36(sp)
    821c:	dd800817 	ldw	r22,32(sp)
    8220:	dd400717 	ldw	r21,28(sp)
    8224:	dd000617 	ldw	r20,24(sp)
    8228:	dcc00517 	ldw	r19,20(sp)
    822c:	dc800417 	ldw	r18,16(sp)
    8230:	dc400317 	ldw	r17,12(sp)
    8234:	dc000217 	ldw	r16,8(sp)
    8238:	dec00c04 	addi	sp,sp,48
    823c:	f800283a 	ret
    8240:	00800074 	movhi	r2,1
    8244:	108b2a04 	addi	r2,r2,11432
    8248:	12400217 	ldw	r9,8(r2)
    824c:	84cd883a 	add	r6,r16,r19
    8250:	802b883a 	mov	r21,r16
    8254:	3240b926 	beq	r6,r9,853c <_realloc_r+0x408>
    8258:	31400117 	ldw	r5,4(r6)
    825c:	00bfff84 	movi	r2,-2
    8260:	2884703a 	and	r2,r5,r2
    8264:	1185883a 	add	r2,r2,r6
    8268:	10c00117 	ldw	r3,4(r2)
    826c:	18c0004c 	andi	r3,r3,1
    8270:	1807003a 	cmpeq	r3,r3,zero
    8274:	1800a326 	beq	r3,zero,8504 <_realloc_r+0x3d0>
    8278:	2908703a 	and	r4,r5,r4
    827c:	9929883a 	add	r20,r19,r4
    8280:	a1c0a30e 	bge	r20,r7,8510 <_realloc_r+0x3dc>
    8284:	4080004c 	andi	r2,r8,1
    8288:	1000551e 	bne	r2,zero,83e0 <_realloc_r+0x2ac>
    828c:	80800017 	ldw	r2,0(r16)
    8290:	80afc83a 	sub	r23,r16,r2
    8294:	b8c00117 	ldw	r3,4(r23)
    8298:	00bfff04 	movi	r2,-4
    829c:	1884703a 	and	r2,r3,r2
    82a0:	30002e26 	beq	r6,zero,835c <_realloc_r+0x228>
    82a4:	3240b926 	beq	r6,r9,858c <_realloc_r+0x458>
    82a8:	98a9883a 	add	r20,r19,r2
    82ac:	2509883a 	add	r4,r4,r20
    82b0:	d9000015 	stw	r4,0(sp)
    82b4:	21c02a16 	blt	r4,r7,8360 <_realloc_r+0x22c>
    82b8:	30800317 	ldw	r2,12(r6)
    82bc:	30c00217 	ldw	r3,8(r6)
    82c0:	01400904 	movi	r5,36
    82c4:	99bfff04 	addi	r6,r19,-4
    82c8:	18800315 	stw	r2,12(r3)
    82cc:	10c00215 	stw	r3,8(r2)
    82d0:	b9000317 	ldw	r4,12(r23)
    82d4:	b8800217 	ldw	r2,8(r23)
    82d8:	b82b883a 	mov	r21,r23
    82dc:	bc000204 	addi	r16,r23,8
    82e0:	20800215 	stw	r2,8(r4)
    82e4:	11000315 	stw	r4,12(r2)
    82e8:	2980e436 	bltu	r5,r6,867c <_realloc_r+0x548>
    82ec:	008004c4 	movi	r2,19
    82f0:	9009883a 	mov	r4,r18
    82f4:	8011883a 	mov	r8,r16
    82f8:	11800f2e 	bgeu	r2,r6,8338 <_realloc_r+0x204>
    82fc:	90800017 	ldw	r2,0(r18)
    8300:	ba000404 	addi	r8,r23,16
    8304:	91000204 	addi	r4,r18,8
    8308:	b8800215 	stw	r2,8(r23)
    830c:	90c00117 	ldw	r3,4(r18)
    8310:	008006c4 	movi	r2,27
    8314:	b8c00315 	stw	r3,12(r23)
    8318:	1180072e 	bgeu	r2,r6,8338 <_realloc_r+0x204>
    831c:	90c00217 	ldw	r3,8(r18)
    8320:	ba000604 	addi	r8,r23,24
    8324:	91000404 	addi	r4,r18,16
    8328:	b8c00415 	stw	r3,16(r23)
    832c:	90800317 	ldw	r2,12(r18)
    8330:	b8800515 	stw	r2,20(r23)
    8334:	3140e726 	beq	r6,r5,86d4 <_realloc_r+0x5a0>
    8338:	20800017 	ldw	r2,0(r4)
    833c:	dd000017 	ldw	r20,0(sp)
    8340:	b80f883a 	mov	r7,r23
    8344:	40800015 	stw	r2,0(r8)
    8348:	20c00117 	ldw	r3,4(r4)
    834c:	40c00115 	stw	r3,4(r8)
    8350:	20800217 	ldw	r2,8(r4)
    8354:	40800215 	stw	r2,8(r8)
    8358:	003f9706 	br	81b8 <_realloc_r+0x84>
    835c:	98a9883a 	add	r20,r19,r2
    8360:	a1c01f16 	blt	r20,r7,83e0 <_realloc_r+0x2ac>
    8364:	b8c00317 	ldw	r3,12(r23)
    8368:	b8800217 	ldw	r2,8(r23)
    836c:	99bfff04 	addi	r6,r19,-4
    8370:	01400904 	movi	r5,36
    8374:	b82b883a 	mov	r21,r23
    8378:	18800215 	stw	r2,8(r3)
    837c:	10c00315 	stw	r3,12(r2)
    8380:	bc000204 	addi	r16,r23,8
    8384:	2980c336 	bltu	r5,r6,8694 <_realloc_r+0x560>
    8388:	008004c4 	movi	r2,19
    838c:	9009883a 	mov	r4,r18
    8390:	8011883a 	mov	r8,r16
    8394:	11800f2e 	bgeu	r2,r6,83d4 <_realloc_r+0x2a0>
    8398:	90800017 	ldw	r2,0(r18)
    839c:	ba000404 	addi	r8,r23,16
    83a0:	91000204 	addi	r4,r18,8
    83a4:	b8800215 	stw	r2,8(r23)
    83a8:	90c00117 	ldw	r3,4(r18)
    83ac:	008006c4 	movi	r2,27
    83b0:	b8c00315 	stw	r3,12(r23)
    83b4:	1180072e 	bgeu	r2,r6,83d4 <_realloc_r+0x2a0>
    83b8:	90c00217 	ldw	r3,8(r18)
    83bc:	ba000604 	addi	r8,r23,24
    83c0:	91000404 	addi	r4,r18,16
    83c4:	b8c00415 	stw	r3,16(r23)
    83c8:	90800317 	ldw	r2,12(r18)
    83cc:	b8800515 	stw	r2,20(r23)
    83d0:	3140c726 	beq	r6,r5,86f0 <_realloc_r+0x5bc>
    83d4:	20800017 	ldw	r2,0(r4)
    83d8:	b80f883a 	mov	r7,r23
    83dc:	003fd906 	br	8344 <_realloc_r+0x210>
    83e0:	880b883a 	mov	r5,r17
    83e4:	b009883a 	mov	r4,r22
    83e8:	000683c0 	call	683c <_malloc_r>
    83ec:	1023883a 	mov	r17,r2
    83f0:	10002526 	beq	r2,zero,8488 <_realloc_r+0x354>
    83f4:	80800117 	ldw	r2,4(r16)
    83f8:	00ffff84 	movi	r3,-2
    83fc:	893ffe04 	addi	r4,r17,-8
    8400:	10c4703a 	and	r2,r2,r3
    8404:	8085883a 	add	r2,r16,r2
    8408:	20809526 	beq	r4,r2,8660 <_realloc_r+0x52c>
    840c:	99bfff04 	addi	r6,r19,-4
    8410:	01c00904 	movi	r7,36
    8414:	39804536 	bltu	r7,r6,852c <_realloc_r+0x3f8>
    8418:	008004c4 	movi	r2,19
    841c:	9009883a 	mov	r4,r18
    8420:	880b883a 	mov	r5,r17
    8424:	11800f2e 	bgeu	r2,r6,8464 <_realloc_r+0x330>
    8428:	90800017 	ldw	r2,0(r18)
    842c:	89400204 	addi	r5,r17,8
    8430:	91000204 	addi	r4,r18,8
    8434:	88800015 	stw	r2,0(r17)
    8438:	90c00117 	ldw	r3,4(r18)
    843c:	008006c4 	movi	r2,27
    8440:	88c00115 	stw	r3,4(r17)
    8444:	1180072e 	bgeu	r2,r6,8464 <_realloc_r+0x330>
    8448:	90c00217 	ldw	r3,8(r18)
    844c:	89400404 	addi	r5,r17,16
    8450:	91000404 	addi	r4,r18,16
    8454:	88c00215 	stw	r3,8(r17)
    8458:	90800317 	ldw	r2,12(r18)
    845c:	88800315 	stw	r2,12(r17)
    8460:	31c09126 	beq	r6,r7,86a8 <_realloc_r+0x574>
    8464:	20800017 	ldw	r2,0(r4)
    8468:	28800015 	stw	r2,0(r5)
    846c:	20c00117 	ldw	r3,4(r4)
    8470:	28c00115 	stw	r3,4(r5)
    8474:	20800217 	ldw	r2,8(r4)
    8478:	28800215 	stw	r2,8(r5)
    847c:	900b883a 	mov	r5,r18
    8480:	b009883a 	mov	r4,r22
    8484:	0005cb40 	call	5cb4 <_free_r>
    8488:	b009883a 	mov	r4,r22
    848c:	000bbac0 	call	bbac <__malloc_unlock>
    8490:	003f5e06 	br	820c <_realloc_r+0xd8>
    8494:	300b883a 	mov	r5,r6
    8498:	dfc00b17 	ldw	ra,44(sp)
    849c:	df000a17 	ldw	fp,40(sp)
    84a0:	ddc00917 	ldw	r23,36(sp)
    84a4:	dd800817 	ldw	r22,32(sp)
    84a8:	dd400717 	ldw	r21,28(sp)
    84ac:	dd000617 	ldw	r20,24(sp)
    84b0:	dcc00517 	ldw	r19,20(sp)
    84b4:	dc800417 	ldw	r18,16(sp)
    84b8:	dc400317 	ldw	r17,12(sp)
    84bc:	dc000217 	ldw	r16,8(sp)
    84c0:	dec00c04 	addi	sp,sp,48
    84c4:	000683c1 	jmpi	683c <_malloc_r>
    84c8:	38800117 	ldw	r2,4(r7)
    84cc:	e54b883a 	add	r5,fp,r21
    84d0:	31000054 	ori	r4,r6,1
    84d4:	1080004c 	andi	r2,r2,1
    84d8:	1704b03a 	or	r2,r2,fp
    84dc:	38800115 	stw	r2,4(r7)
    84e0:	29000115 	stw	r4,4(r5)
    84e4:	2987883a 	add	r3,r5,r6
    84e8:	18800117 	ldw	r2,4(r3)
    84ec:	29400204 	addi	r5,r5,8
    84f0:	b009883a 	mov	r4,r22
    84f4:	10800054 	ori	r2,r2,1
    84f8:	18800115 	stw	r2,4(r3)
    84fc:	0005cb40 	call	5cb4 <_free_r>
    8500:	003f3806 	br	81e4 <_realloc_r+0xb0>
    8504:	000d883a 	mov	r6,zero
    8508:	0009883a 	mov	r4,zero
    850c:	003f5d06 	br	8284 <_realloc_r+0x150>
    8510:	30c00217 	ldw	r3,8(r6)
    8514:	30800317 	ldw	r2,12(r6)
    8518:	800f883a 	mov	r7,r16
    851c:	84000204 	addi	r16,r16,8
    8520:	10c00215 	stw	r3,8(r2)
    8524:	18800315 	stw	r2,12(r3)
    8528:	003f2306 	br	81b8 <_realloc_r+0x84>
    852c:	8809883a 	mov	r4,r17
    8530:	900b883a 	mov	r5,r18
    8534:	00070600 	call	7060 <memmove>
    8538:	003fd006 	br	847c <_realloc_r+0x348>
    853c:	30800117 	ldw	r2,4(r6)
    8540:	e0c00404 	addi	r3,fp,16
    8544:	1108703a 	and	r4,r2,r4
    8548:	9905883a 	add	r2,r19,r4
    854c:	10ff4d16 	blt	r2,r3,8284 <_realloc_r+0x150>
    8550:	1705c83a 	sub	r2,r2,fp
    8554:	870b883a 	add	r5,r16,fp
    8558:	10800054 	ori	r2,r2,1
    855c:	28800115 	stw	r2,4(r5)
    8560:	80c00117 	ldw	r3,4(r16)
    8564:	00800074 	movhi	r2,1
    8568:	108b2a04 	addi	r2,r2,11432
    856c:	b009883a 	mov	r4,r22
    8570:	18c0004c 	andi	r3,r3,1
    8574:	e0c6b03a 	or	r3,fp,r3
    8578:	11400215 	stw	r5,8(r2)
    857c:	80c00115 	stw	r3,4(r16)
    8580:	000bbac0 	call	bbac <__malloc_unlock>
    8584:	84400204 	addi	r17,r16,8
    8588:	003f2006 	br	820c <_realloc_r+0xd8>
    858c:	98a9883a 	add	r20,r19,r2
    8590:	2509883a 	add	r4,r4,r20
    8594:	e0800404 	addi	r2,fp,16
    8598:	d9000115 	stw	r4,4(sp)
    859c:	20bf7016 	blt	r4,r2,8360 <_realloc_r+0x22c>
    85a0:	b8c00317 	ldw	r3,12(r23)
    85a4:	b8800217 	ldw	r2,8(r23)
    85a8:	99bfff04 	addi	r6,r19,-4
    85ac:	01400904 	movi	r5,36
    85b0:	18800215 	stw	r2,8(r3)
    85b4:	10c00315 	stw	r3,12(r2)
    85b8:	bc400204 	addi	r17,r23,8
    85bc:	29804136 	bltu	r5,r6,86c4 <_realloc_r+0x590>
    85c0:	008004c4 	movi	r2,19
    85c4:	9009883a 	mov	r4,r18
    85c8:	880f883a 	mov	r7,r17
    85cc:	11800f2e 	bgeu	r2,r6,860c <_realloc_r+0x4d8>
    85d0:	90800017 	ldw	r2,0(r18)
    85d4:	b9c00404 	addi	r7,r23,16
    85d8:	91000204 	addi	r4,r18,8
    85dc:	b8800215 	stw	r2,8(r23)
    85e0:	90c00117 	ldw	r3,4(r18)
    85e4:	008006c4 	movi	r2,27
    85e8:	b8c00315 	stw	r3,12(r23)
    85ec:	1180072e 	bgeu	r2,r6,860c <_realloc_r+0x4d8>
    85f0:	90c00217 	ldw	r3,8(r18)
    85f4:	b9c00604 	addi	r7,r23,24
    85f8:	91000404 	addi	r4,r18,16
    85fc:	b8c00415 	stw	r3,16(r23)
    8600:	90800317 	ldw	r2,12(r18)
    8604:	b8800515 	stw	r2,20(r23)
    8608:	31404026 	beq	r6,r5,870c <_realloc_r+0x5d8>
    860c:	20800017 	ldw	r2,0(r4)
    8610:	38800015 	stw	r2,0(r7)
    8614:	20c00117 	ldw	r3,4(r4)
    8618:	38c00115 	stw	r3,4(r7)
    861c:	20800217 	ldw	r2,8(r4)
    8620:	38800215 	stw	r2,8(r7)
    8624:	d8c00117 	ldw	r3,4(sp)
    8628:	bf0b883a 	add	r5,r23,fp
    862c:	b009883a 	mov	r4,r22
    8630:	1f05c83a 	sub	r2,r3,fp
    8634:	10800054 	ori	r2,r2,1
    8638:	28800115 	stw	r2,4(r5)
    863c:	b8c00117 	ldw	r3,4(r23)
    8640:	00800074 	movhi	r2,1
    8644:	108b2a04 	addi	r2,r2,11432
    8648:	11400215 	stw	r5,8(r2)
    864c:	18c0004c 	andi	r3,r3,1
    8650:	e0c6b03a 	or	r3,fp,r3
    8654:	b8c00115 	stw	r3,4(r23)
    8658:	000bbac0 	call	bbac <__malloc_unlock>
    865c:	003eeb06 	br	820c <_realloc_r+0xd8>
    8660:	20800117 	ldw	r2,4(r4)
    8664:	00ffff04 	movi	r3,-4
    8668:	800f883a 	mov	r7,r16
    866c:	10c4703a 	and	r2,r2,r3
    8670:	98a9883a 	add	r20,r19,r2
    8674:	84000204 	addi	r16,r16,8
    8678:	003ecf06 	br	81b8 <_realloc_r+0x84>
    867c:	900b883a 	mov	r5,r18
    8680:	8009883a 	mov	r4,r16
    8684:	00070600 	call	7060 <memmove>
    8688:	dd000017 	ldw	r20,0(sp)
    868c:	b80f883a 	mov	r7,r23
    8690:	003ec906 	br	81b8 <_realloc_r+0x84>
    8694:	900b883a 	mov	r5,r18
    8698:	8009883a 	mov	r4,r16
    869c:	00070600 	call	7060 <memmove>
    86a0:	b80f883a 	mov	r7,r23
    86a4:	003ec406 	br	81b8 <_realloc_r+0x84>
    86a8:	90c00417 	ldw	r3,16(r18)
    86ac:	89400604 	addi	r5,r17,24
    86b0:	91000604 	addi	r4,r18,24
    86b4:	88c00415 	stw	r3,16(r17)
    86b8:	90800517 	ldw	r2,20(r18)
    86bc:	88800515 	stw	r2,20(r17)
    86c0:	003f6806 	br	8464 <_realloc_r+0x330>
    86c4:	900b883a 	mov	r5,r18
    86c8:	8809883a 	mov	r4,r17
    86cc:	00070600 	call	7060 <memmove>
    86d0:	003fd406 	br	8624 <_realloc_r+0x4f0>
    86d4:	90c00417 	ldw	r3,16(r18)
    86d8:	91000604 	addi	r4,r18,24
    86dc:	ba000804 	addi	r8,r23,32
    86e0:	b8c00615 	stw	r3,24(r23)
    86e4:	90800517 	ldw	r2,20(r18)
    86e8:	b8800715 	stw	r2,28(r23)
    86ec:	003f1206 	br	8338 <_realloc_r+0x204>
    86f0:	90c00417 	ldw	r3,16(r18)
    86f4:	91000604 	addi	r4,r18,24
    86f8:	ba000804 	addi	r8,r23,32
    86fc:	b8c00615 	stw	r3,24(r23)
    8700:	90800517 	ldw	r2,20(r18)
    8704:	b8800715 	stw	r2,28(r23)
    8708:	003f3206 	br	83d4 <_realloc_r+0x2a0>
    870c:	90c00417 	ldw	r3,16(r18)
    8710:	91000604 	addi	r4,r18,24
    8714:	b9c00804 	addi	r7,r23,32
    8718:	b8c00615 	stw	r3,24(r23)
    871c:	90800517 	ldw	r2,20(r18)
    8720:	b8800715 	stw	r2,28(r23)
    8724:	003fb906 	br	860c <_realloc_r+0x4d8>

00008728 <__isinfd>:
    8728:	200d883a 	mov	r6,r4
    872c:	0109c83a 	sub	r4,zero,r4
    8730:	2188b03a 	or	r4,r4,r6
    8734:	2008d7fa 	srli	r4,r4,31
    8738:	00a00034 	movhi	r2,32768
    873c:	10bfffc4 	addi	r2,r2,-1
    8740:	1144703a 	and	r2,r2,r5
    8744:	2088b03a 	or	r4,r4,r2
    8748:	009ffc34 	movhi	r2,32752
    874c:	1105c83a 	sub	r2,r2,r4
    8750:	0087c83a 	sub	r3,zero,r2
    8754:	10c4b03a 	or	r2,r2,r3
    8758:	1004d7fa 	srli	r2,r2,31
    875c:	00c00044 	movi	r3,1
    8760:	1885c83a 	sub	r2,r3,r2
    8764:	f800283a 	ret

00008768 <__isnand>:
    8768:	200d883a 	mov	r6,r4
    876c:	0109c83a 	sub	r4,zero,r4
    8770:	2188b03a 	or	r4,r4,r6
    8774:	2008d7fa 	srli	r4,r4,31
    8778:	00a00034 	movhi	r2,32768
    877c:	10bfffc4 	addi	r2,r2,-1
    8780:	1144703a 	and	r2,r2,r5
    8784:	2088b03a 	or	r4,r4,r2
    8788:	009ffc34 	movhi	r2,32752
    878c:	1105c83a 	sub	r2,r2,r4
    8790:	1004d7fa 	srli	r2,r2,31
    8794:	f800283a 	ret

00008798 <_sbrk_r>:
    8798:	defffd04 	addi	sp,sp,-12
    879c:	dc000015 	stw	r16,0(sp)
    87a0:	04000074 	movhi	r16,1
    87a4:	84197c04 	addi	r16,r16,26096
    87a8:	dc400115 	stw	r17,4(sp)
    87ac:	80000015 	stw	zero,0(r16)
    87b0:	2023883a 	mov	r17,r4
    87b4:	2809883a 	mov	r4,r5
    87b8:	dfc00215 	stw	ra,8(sp)
    87bc:	000c0440 	call	c044 <sbrk>
    87c0:	1007883a 	mov	r3,r2
    87c4:	00bfffc4 	movi	r2,-1
    87c8:	18800626 	beq	r3,r2,87e4 <_sbrk_r+0x4c>
    87cc:	1805883a 	mov	r2,r3
    87d0:	dfc00217 	ldw	ra,8(sp)
    87d4:	dc400117 	ldw	r17,4(sp)
    87d8:	dc000017 	ldw	r16,0(sp)
    87dc:	dec00304 	addi	sp,sp,12
    87e0:	f800283a 	ret
    87e4:	80800017 	ldw	r2,0(r16)
    87e8:	103ff826 	beq	r2,zero,87cc <_sbrk_r+0x34>
    87ec:	88800015 	stw	r2,0(r17)
    87f0:	1805883a 	mov	r2,r3
    87f4:	dfc00217 	ldw	ra,8(sp)
    87f8:	dc400117 	ldw	r17,4(sp)
    87fc:	dc000017 	ldw	r16,0(sp)
    8800:	dec00304 	addi	sp,sp,12
    8804:	f800283a 	ret

00008808 <__sclose>:
    8808:	2940038f 	ldh	r5,14(r5)
    880c:	0008bb01 	jmpi	8bb0 <_close_r>

00008810 <__sseek>:
    8810:	defffe04 	addi	sp,sp,-8
    8814:	dc000015 	stw	r16,0(sp)
    8818:	2821883a 	mov	r16,r5
    881c:	2940038f 	ldh	r5,14(r5)
    8820:	dfc00115 	stw	ra,4(sp)
    8824:	0008e280 	call	8e28 <_lseek_r>
    8828:	1007883a 	mov	r3,r2
    882c:	00bfffc4 	movi	r2,-1
    8830:	18800926 	beq	r3,r2,8858 <__sseek+0x48>
    8834:	8080030b 	ldhu	r2,12(r16)
    8838:	80c01415 	stw	r3,80(r16)
    883c:	10840014 	ori	r2,r2,4096
    8840:	8080030d 	sth	r2,12(r16)
    8844:	1805883a 	mov	r2,r3
    8848:	dfc00117 	ldw	ra,4(sp)
    884c:	dc000017 	ldw	r16,0(sp)
    8850:	dec00204 	addi	sp,sp,8
    8854:	f800283a 	ret
    8858:	8080030b 	ldhu	r2,12(r16)
    885c:	10bbffcc 	andi	r2,r2,61439
    8860:	8080030d 	sth	r2,12(r16)
    8864:	1805883a 	mov	r2,r3
    8868:	dfc00117 	ldw	ra,4(sp)
    886c:	dc000017 	ldw	r16,0(sp)
    8870:	dec00204 	addi	sp,sp,8
    8874:	f800283a 	ret

00008878 <__swrite>:
    8878:	2880030b 	ldhu	r2,12(r5)
    887c:	defffb04 	addi	sp,sp,-20
    8880:	dcc00315 	stw	r19,12(sp)
    8884:	1080400c 	andi	r2,r2,256
    8888:	dc800215 	stw	r18,8(sp)
    888c:	dc400115 	stw	r17,4(sp)
    8890:	dc000015 	stw	r16,0(sp)
    8894:	3027883a 	mov	r19,r6
    8898:	3825883a 	mov	r18,r7
    889c:	dfc00415 	stw	ra,16(sp)
    88a0:	2821883a 	mov	r16,r5
    88a4:	000d883a 	mov	r6,zero
    88a8:	01c00084 	movi	r7,2
    88ac:	2023883a 	mov	r17,r4
    88b0:	10000226 	beq	r2,zero,88bc <__swrite+0x44>
    88b4:	2940038f 	ldh	r5,14(r5)
    88b8:	0008e280 	call	8e28 <_lseek_r>
    88bc:	8080030b 	ldhu	r2,12(r16)
    88c0:	8140038f 	ldh	r5,14(r16)
    88c4:	8809883a 	mov	r4,r17
    88c8:	10bbffcc 	andi	r2,r2,61439
    88cc:	980d883a 	mov	r6,r19
    88d0:	900f883a 	mov	r7,r18
    88d4:	8080030d 	sth	r2,12(r16)
    88d8:	dfc00417 	ldw	ra,16(sp)
    88dc:	dcc00317 	ldw	r19,12(sp)
    88e0:	dc800217 	ldw	r18,8(sp)
    88e4:	dc400117 	ldw	r17,4(sp)
    88e8:	dc000017 	ldw	r16,0(sp)
    88ec:	dec00504 	addi	sp,sp,20
    88f0:	0008a841 	jmpi	8a84 <_write_r>

000088f4 <__sread>:
    88f4:	defffe04 	addi	sp,sp,-8
    88f8:	dc000015 	stw	r16,0(sp)
    88fc:	2821883a 	mov	r16,r5
    8900:	2940038f 	ldh	r5,14(r5)
    8904:	dfc00115 	stw	ra,4(sp)
    8908:	0008ea00 	call	8ea0 <_read_r>
    890c:	1007883a 	mov	r3,r2
    8910:	10000816 	blt	r2,zero,8934 <__sread+0x40>
    8914:	80801417 	ldw	r2,80(r16)
    8918:	10c5883a 	add	r2,r2,r3
    891c:	80801415 	stw	r2,80(r16)
    8920:	1805883a 	mov	r2,r3
    8924:	dfc00117 	ldw	ra,4(sp)
    8928:	dc000017 	ldw	r16,0(sp)
    892c:	dec00204 	addi	sp,sp,8
    8930:	f800283a 	ret
    8934:	8080030b 	ldhu	r2,12(r16)
    8938:	10bbffcc 	andi	r2,r2,61439
    893c:	8080030d 	sth	r2,12(r16)
    8940:	1805883a 	mov	r2,r3
    8944:	dfc00117 	ldw	ra,4(sp)
    8948:	dc000017 	ldw	r16,0(sp)
    894c:	dec00204 	addi	sp,sp,8
    8950:	f800283a 	ret

00008954 <strcmp>:
    8954:	2144b03a 	or	r2,r4,r5
    8958:	108000cc 	andi	r2,r2,3
    895c:	10001d1e 	bne	r2,zero,89d4 <strcmp+0x80>
    8960:	200f883a 	mov	r7,r4
    8964:	28800017 	ldw	r2,0(r5)
    8968:	21000017 	ldw	r4,0(r4)
    896c:	280d883a 	mov	r6,r5
    8970:	2080161e 	bne	r4,r2,89cc <strcmp+0x78>
    8974:	023fbff4 	movhi	r8,65279
    8978:	423fbfc4 	addi	r8,r8,-257
    897c:	2207883a 	add	r3,r4,r8
    8980:	01602074 	movhi	r5,32897
    8984:	29602004 	addi	r5,r5,-32640
    8988:	1946703a 	and	r3,r3,r5
    898c:	0104303a 	nor	r2,zero,r4
    8990:	10c4703a 	and	r2,r2,r3
    8994:	10001c1e 	bne	r2,zero,8a08 <strcmp+0xb4>
    8998:	4013883a 	mov	r9,r8
    899c:	2811883a 	mov	r8,r5
    89a0:	00000106 	br	89a8 <strcmp+0x54>
    89a4:	1800181e 	bne	r3,zero,8a08 <strcmp+0xb4>
    89a8:	39c00104 	addi	r7,r7,4
    89ac:	39000017 	ldw	r4,0(r7)
    89b0:	31800104 	addi	r6,r6,4
    89b4:	31400017 	ldw	r5,0(r6)
    89b8:	2245883a 	add	r2,r4,r9
    89bc:	1204703a 	and	r2,r2,r8
    89c0:	0106303a 	nor	r3,zero,r4
    89c4:	1886703a 	and	r3,r3,r2
    89c8:	217ff626 	beq	r4,r5,89a4 <strcmp+0x50>
    89cc:	3809883a 	mov	r4,r7
    89d0:	300b883a 	mov	r5,r6
    89d4:	20c00007 	ldb	r3,0(r4)
    89d8:	1800051e 	bne	r3,zero,89f0 <strcmp+0x9c>
    89dc:	00000606 	br	89f8 <strcmp+0xa4>
    89e0:	21000044 	addi	r4,r4,1
    89e4:	20c00007 	ldb	r3,0(r4)
    89e8:	29400044 	addi	r5,r5,1
    89ec:	18000226 	beq	r3,zero,89f8 <strcmp+0xa4>
    89f0:	28800007 	ldb	r2,0(r5)
    89f4:	18bffa26 	beq	r3,r2,89e0 <strcmp+0x8c>
    89f8:	20c00003 	ldbu	r3,0(r4)
    89fc:	28800003 	ldbu	r2,0(r5)
    8a00:	1885c83a 	sub	r2,r3,r2
    8a04:	f800283a 	ret
    8a08:	0005883a 	mov	r2,zero
    8a0c:	f800283a 	ret

00008a10 <strlen>:
    8a10:	208000cc 	andi	r2,r4,3
    8a14:	2011883a 	mov	r8,r4
    8a18:	1000161e 	bne	r2,zero,8a74 <strlen+0x64>
    8a1c:	20c00017 	ldw	r3,0(r4)
    8a20:	017fbff4 	movhi	r5,65279
    8a24:	297fbfc4 	addi	r5,r5,-257
    8a28:	01e02074 	movhi	r7,32897
    8a2c:	39e02004 	addi	r7,r7,-32640
    8a30:	1945883a 	add	r2,r3,r5
    8a34:	11c4703a 	and	r2,r2,r7
    8a38:	00c6303a 	nor	r3,zero,r3
    8a3c:	1886703a 	and	r3,r3,r2
    8a40:	18000c1e 	bne	r3,zero,8a74 <strlen+0x64>
    8a44:	280d883a 	mov	r6,r5
    8a48:	380b883a 	mov	r5,r7
    8a4c:	21000104 	addi	r4,r4,4
    8a50:	20800017 	ldw	r2,0(r4)
    8a54:	1187883a 	add	r3,r2,r6
    8a58:	1946703a 	and	r3,r3,r5
    8a5c:	0084303a 	nor	r2,zero,r2
    8a60:	10c4703a 	and	r2,r2,r3
    8a64:	103ff926 	beq	r2,zero,8a4c <strlen+0x3c>
    8a68:	20800007 	ldb	r2,0(r4)
    8a6c:	10000326 	beq	r2,zero,8a7c <strlen+0x6c>
    8a70:	21000044 	addi	r4,r4,1
    8a74:	20800007 	ldb	r2,0(r4)
    8a78:	103ffd1e 	bne	r2,zero,8a70 <strlen+0x60>
    8a7c:	2205c83a 	sub	r2,r4,r8
    8a80:	f800283a 	ret

00008a84 <_write_r>:
    8a84:	defffd04 	addi	sp,sp,-12
    8a88:	dc000015 	stw	r16,0(sp)
    8a8c:	04000074 	movhi	r16,1
    8a90:	84197c04 	addi	r16,r16,26096
    8a94:	dc400115 	stw	r17,4(sp)
    8a98:	80000015 	stw	zero,0(r16)
    8a9c:	2023883a 	mov	r17,r4
    8aa0:	2809883a 	mov	r4,r5
    8aa4:	300b883a 	mov	r5,r6
    8aa8:	380d883a 	mov	r6,r7
    8aac:	dfc00215 	stw	ra,8(sp)
    8ab0:	000c1000 	call	c100 <write>
    8ab4:	1007883a 	mov	r3,r2
    8ab8:	00bfffc4 	movi	r2,-1
    8abc:	18800626 	beq	r3,r2,8ad8 <_write_r+0x54>
    8ac0:	1805883a 	mov	r2,r3
    8ac4:	dfc00217 	ldw	ra,8(sp)
    8ac8:	dc400117 	ldw	r17,4(sp)
    8acc:	dc000017 	ldw	r16,0(sp)
    8ad0:	dec00304 	addi	sp,sp,12
    8ad4:	f800283a 	ret
    8ad8:	80800017 	ldw	r2,0(r16)
    8adc:	103ff826 	beq	r2,zero,8ac0 <_write_r+0x3c>
    8ae0:	88800015 	stw	r2,0(r17)
    8ae4:	1805883a 	mov	r2,r3
    8ae8:	dfc00217 	ldw	ra,8(sp)
    8aec:	dc400117 	ldw	r17,4(sp)
    8af0:	dc000017 	ldw	r16,0(sp)
    8af4:	dec00304 	addi	sp,sp,12
    8af8:	f800283a 	ret

00008afc <_calloc_r>:
    8afc:	298b383a 	mul	r5,r5,r6
    8b00:	defffe04 	addi	sp,sp,-8
    8b04:	dc000015 	stw	r16,0(sp)
    8b08:	dfc00115 	stw	ra,4(sp)
    8b0c:	000683c0 	call	683c <_malloc_r>
    8b10:	1021883a 	mov	r16,r2
    8b14:	01c00904 	movi	r7,36
    8b18:	10000d26 	beq	r2,zero,8b50 <_calloc_r+0x54>
    8b1c:	10ffff17 	ldw	r3,-4(r2)
    8b20:	1009883a 	mov	r4,r2
    8b24:	00bfff04 	movi	r2,-4
    8b28:	1886703a 	and	r3,r3,r2
    8b2c:	1887883a 	add	r3,r3,r2
    8b30:	180d883a 	mov	r6,r3
    8b34:	000b883a 	mov	r5,zero
    8b38:	38c01736 	bltu	r7,r3,8b98 <_calloc_r+0x9c>
    8b3c:	008004c4 	movi	r2,19
    8b40:	10c00836 	bltu	r2,r3,8b64 <_calloc_r+0x68>
    8b44:	20000215 	stw	zero,8(r4)
    8b48:	20000015 	stw	zero,0(r4)
    8b4c:	20000115 	stw	zero,4(r4)
    8b50:	8005883a 	mov	r2,r16
    8b54:	dfc00117 	ldw	ra,4(sp)
    8b58:	dc000017 	ldw	r16,0(sp)
    8b5c:	dec00204 	addi	sp,sp,8
    8b60:	f800283a 	ret
    8b64:	008006c4 	movi	r2,27
    8b68:	80000015 	stw	zero,0(r16)
    8b6c:	80000115 	stw	zero,4(r16)
    8b70:	81000204 	addi	r4,r16,8
    8b74:	10fff32e 	bgeu	r2,r3,8b44 <_calloc_r+0x48>
    8b78:	80000215 	stw	zero,8(r16)
    8b7c:	80000315 	stw	zero,12(r16)
    8b80:	81000404 	addi	r4,r16,16
    8b84:	19ffef1e 	bne	r3,r7,8b44 <_calloc_r+0x48>
    8b88:	81000604 	addi	r4,r16,24
    8b8c:	80000415 	stw	zero,16(r16)
    8b90:	80000515 	stw	zero,20(r16)
    8b94:	003feb06 	br	8b44 <_calloc_r+0x48>
    8b98:	0001cfc0 	call	1cfc <memset>
    8b9c:	8005883a 	mov	r2,r16
    8ba0:	dfc00117 	ldw	ra,4(sp)
    8ba4:	dc000017 	ldw	r16,0(sp)
    8ba8:	dec00204 	addi	sp,sp,8
    8bac:	f800283a 	ret

00008bb0 <_close_r>:
    8bb0:	defffd04 	addi	sp,sp,-12
    8bb4:	dc000015 	stw	r16,0(sp)
    8bb8:	04000074 	movhi	r16,1
    8bbc:	84197c04 	addi	r16,r16,26096
    8bc0:	dc400115 	stw	r17,4(sp)
    8bc4:	80000015 	stw	zero,0(r16)
    8bc8:	2023883a 	mov	r17,r4
    8bcc:	2809883a 	mov	r4,r5
    8bd0:	dfc00215 	stw	ra,8(sp)
    8bd4:	000b3480 	call	b348 <close>
    8bd8:	1007883a 	mov	r3,r2
    8bdc:	00bfffc4 	movi	r2,-1
    8be0:	18800626 	beq	r3,r2,8bfc <_close_r+0x4c>
    8be4:	1805883a 	mov	r2,r3
    8be8:	dfc00217 	ldw	ra,8(sp)
    8bec:	dc400117 	ldw	r17,4(sp)
    8bf0:	dc000017 	ldw	r16,0(sp)
    8bf4:	dec00304 	addi	sp,sp,12
    8bf8:	f800283a 	ret
    8bfc:	80800017 	ldw	r2,0(r16)
    8c00:	103ff826 	beq	r2,zero,8be4 <_close_r+0x34>
    8c04:	88800015 	stw	r2,0(r17)
    8c08:	1805883a 	mov	r2,r3
    8c0c:	dfc00217 	ldw	ra,8(sp)
    8c10:	dc400117 	ldw	r17,4(sp)
    8c14:	dc000017 	ldw	r16,0(sp)
    8c18:	dec00304 	addi	sp,sp,12
    8c1c:	f800283a 	ret

00008c20 <_fclose_r>:
    8c20:	defffc04 	addi	sp,sp,-16
    8c24:	dc400115 	stw	r17,4(sp)
    8c28:	dc000015 	stw	r16,0(sp)
    8c2c:	dfc00315 	stw	ra,12(sp)
    8c30:	dc800215 	stw	r18,8(sp)
    8c34:	2821883a 	mov	r16,r5
    8c38:	2023883a 	mov	r17,r4
    8c3c:	28002926 	beq	r5,zero,8ce4 <_fclose_r+0xc4>
    8c40:	00059200 	call	5920 <__sfp_lock_acquire>
    8c44:	88000226 	beq	r17,zero,8c50 <_fclose_r+0x30>
    8c48:	88800e17 	ldw	r2,56(r17)
    8c4c:	10002d26 	beq	r2,zero,8d04 <_fclose_r+0xe4>
    8c50:	8080030f 	ldh	r2,12(r16)
    8c54:	10002226 	beq	r2,zero,8ce0 <_fclose_r+0xc0>
    8c58:	8809883a 	mov	r4,r17
    8c5c:	800b883a 	mov	r5,r16
    8c60:	00056980 	call	5698 <_fflush_r>
    8c64:	1025883a 	mov	r18,r2
    8c68:	80800b17 	ldw	r2,44(r16)
    8c6c:	10000426 	beq	r2,zero,8c80 <_fclose_r+0x60>
    8c70:	81400717 	ldw	r5,28(r16)
    8c74:	8809883a 	mov	r4,r17
    8c78:	103ee83a 	callr	r2
    8c7c:	10002a16 	blt	r2,zero,8d28 <_fclose_r+0x108>
    8c80:	8080030b 	ldhu	r2,12(r16)
    8c84:	1080200c 	andi	r2,r2,128
    8c88:	1000231e 	bne	r2,zero,8d18 <_fclose_r+0xf8>
    8c8c:	81400c17 	ldw	r5,48(r16)
    8c90:	28000526 	beq	r5,zero,8ca8 <_fclose_r+0x88>
    8c94:	80801004 	addi	r2,r16,64
    8c98:	28800226 	beq	r5,r2,8ca4 <_fclose_r+0x84>
    8c9c:	8809883a 	mov	r4,r17
    8ca0:	0005cb40 	call	5cb4 <_free_r>
    8ca4:	80000c15 	stw	zero,48(r16)
    8ca8:	81401117 	ldw	r5,68(r16)
    8cac:	28000326 	beq	r5,zero,8cbc <_fclose_r+0x9c>
    8cb0:	8809883a 	mov	r4,r17
    8cb4:	0005cb40 	call	5cb4 <_free_r>
    8cb8:	80001115 	stw	zero,68(r16)
    8cbc:	8000030d 	sth	zero,12(r16)
    8cc0:	00059240 	call	5924 <__sfp_lock_release>
    8cc4:	9005883a 	mov	r2,r18
    8cc8:	dfc00317 	ldw	ra,12(sp)
    8ccc:	dc800217 	ldw	r18,8(sp)
    8cd0:	dc400117 	ldw	r17,4(sp)
    8cd4:	dc000017 	ldw	r16,0(sp)
    8cd8:	dec00404 	addi	sp,sp,16
    8cdc:	f800283a 	ret
    8ce0:	00059240 	call	5924 <__sfp_lock_release>
    8ce4:	0025883a 	mov	r18,zero
    8ce8:	9005883a 	mov	r2,r18
    8cec:	dfc00317 	ldw	ra,12(sp)
    8cf0:	dc800217 	ldw	r18,8(sp)
    8cf4:	dc400117 	ldw	r17,4(sp)
    8cf8:	dc000017 	ldw	r16,0(sp)
    8cfc:	dec00404 	addi	sp,sp,16
    8d00:	f800283a 	ret
    8d04:	8809883a 	mov	r4,r17
    8d08:	00059300 	call	5930 <__sinit>
    8d0c:	8080030f 	ldh	r2,12(r16)
    8d10:	103fd11e 	bne	r2,zero,8c58 <_fclose_r+0x38>
    8d14:	003ff206 	br	8ce0 <_fclose_r+0xc0>
    8d18:	81400417 	ldw	r5,16(r16)
    8d1c:	8809883a 	mov	r4,r17
    8d20:	0005cb40 	call	5cb4 <_free_r>
    8d24:	003fd906 	br	8c8c <_fclose_r+0x6c>
    8d28:	04bfffc4 	movi	r18,-1
    8d2c:	003fd406 	br	8c80 <_fclose_r+0x60>

00008d30 <fclose>:
    8d30:	00800074 	movhi	r2,1
    8d34:	10919b04 	addi	r2,r2,18028
    8d38:	200b883a 	mov	r5,r4
    8d3c:	11000017 	ldw	r4,0(r2)
    8d40:	0008c201 	jmpi	8c20 <_fclose_r>

00008d44 <_fstat_r>:
    8d44:	defffd04 	addi	sp,sp,-12
    8d48:	dc000015 	stw	r16,0(sp)
    8d4c:	04000074 	movhi	r16,1
    8d50:	84197c04 	addi	r16,r16,26096
    8d54:	dc400115 	stw	r17,4(sp)
    8d58:	80000015 	stw	zero,0(r16)
    8d5c:	2023883a 	mov	r17,r4
    8d60:	2809883a 	mov	r4,r5
    8d64:	300b883a 	mov	r5,r6
    8d68:	dfc00215 	stw	ra,8(sp)
    8d6c:	000b4d00 	call	b4d0 <fstat>
    8d70:	1007883a 	mov	r3,r2
    8d74:	00bfffc4 	movi	r2,-1
    8d78:	18800626 	beq	r3,r2,8d94 <_fstat_r+0x50>
    8d7c:	1805883a 	mov	r2,r3
    8d80:	dfc00217 	ldw	ra,8(sp)
    8d84:	dc400117 	ldw	r17,4(sp)
    8d88:	dc000017 	ldw	r16,0(sp)
    8d8c:	dec00304 	addi	sp,sp,12
    8d90:	f800283a 	ret
    8d94:	80800017 	ldw	r2,0(r16)
    8d98:	103ff826 	beq	r2,zero,8d7c <_fstat_r+0x38>
    8d9c:	88800015 	stw	r2,0(r17)
    8da0:	1805883a 	mov	r2,r3
    8da4:	dfc00217 	ldw	ra,8(sp)
    8da8:	dc400117 	ldw	r17,4(sp)
    8dac:	dc000017 	ldw	r16,0(sp)
    8db0:	dec00304 	addi	sp,sp,12
    8db4:	f800283a 	ret

00008db8 <_isatty_r>:
    8db8:	defffd04 	addi	sp,sp,-12
    8dbc:	dc000015 	stw	r16,0(sp)
    8dc0:	04000074 	movhi	r16,1
    8dc4:	84197c04 	addi	r16,r16,26096
    8dc8:	dc400115 	stw	r17,4(sp)
    8dcc:	80000015 	stw	zero,0(r16)
    8dd0:	2023883a 	mov	r17,r4
    8dd4:	2809883a 	mov	r4,r5
    8dd8:	dfc00215 	stw	ra,8(sp)
    8ddc:	000b7c40 	call	b7c4 <isatty>
    8de0:	1007883a 	mov	r3,r2
    8de4:	00bfffc4 	movi	r2,-1
    8de8:	18800626 	beq	r3,r2,8e04 <_isatty_r+0x4c>
    8dec:	1805883a 	mov	r2,r3
    8df0:	dfc00217 	ldw	ra,8(sp)
    8df4:	dc400117 	ldw	r17,4(sp)
    8df8:	dc000017 	ldw	r16,0(sp)
    8dfc:	dec00304 	addi	sp,sp,12
    8e00:	f800283a 	ret
    8e04:	80800017 	ldw	r2,0(r16)
    8e08:	103ff826 	beq	r2,zero,8dec <_isatty_r+0x34>
    8e0c:	88800015 	stw	r2,0(r17)
    8e10:	1805883a 	mov	r2,r3
    8e14:	dfc00217 	ldw	ra,8(sp)
    8e18:	dc400117 	ldw	r17,4(sp)
    8e1c:	dc000017 	ldw	r16,0(sp)
    8e20:	dec00304 	addi	sp,sp,12
    8e24:	f800283a 	ret

00008e28 <_lseek_r>:
    8e28:	defffd04 	addi	sp,sp,-12
    8e2c:	dc000015 	stw	r16,0(sp)
    8e30:	04000074 	movhi	r16,1
    8e34:	84197c04 	addi	r16,r16,26096
    8e38:	dc400115 	stw	r17,4(sp)
    8e3c:	80000015 	stw	zero,0(r16)
    8e40:	2023883a 	mov	r17,r4
    8e44:	2809883a 	mov	r4,r5
    8e48:	300b883a 	mov	r5,r6
    8e4c:	380d883a 	mov	r6,r7
    8e50:	dfc00215 	stw	ra,8(sp)
    8e54:	000b9d00 	call	b9d0 <lseek>
    8e58:	1007883a 	mov	r3,r2
    8e5c:	00bfffc4 	movi	r2,-1
    8e60:	18800626 	beq	r3,r2,8e7c <_lseek_r+0x54>
    8e64:	1805883a 	mov	r2,r3
    8e68:	dfc00217 	ldw	ra,8(sp)
    8e6c:	dc400117 	ldw	r17,4(sp)
    8e70:	dc000017 	ldw	r16,0(sp)
    8e74:	dec00304 	addi	sp,sp,12
    8e78:	f800283a 	ret
    8e7c:	80800017 	ldw	r2,0(r16)
    8e80:	103ff826 	beq	r2,zero,8e64 <_lseek_r+0x3c>
    8e84:	88800015 	stw	r2,0(r17)
    8e88:	1805883a 	mov	r2,r3
    8e8c:	dfc00217 	ldw	ra,8(sp)
    8e90:	dc400117 	ldw	r17,4(sp)
    8e94:	dc000017 	ldw	r16,0(sp)
    8e98:	dec00304 	addi	sp,sp,12
    8e9c:	f800283a 	ret

00008ea0 <_read_r>:
    8ea0:	defffd04 	addi	sp,sp,-12
    8ea4:	dc000015 	stw	r16,0(sp)
    8ea8:	04000074 	movhi	r16,1
    8eac:	84197c04 	addi	r16,r16,26096
    8eb0:	dc400115 	stw	r17,4(sp)
    8eb4:	80000015 	stw	zero,0(r16)
    8eb8:	2023883a 	mov	r17,r4
    8ebc:	2809883a 	mov	r4,r5
    8ec0:	300b883a 	mov	r5,r6
    8ec4:	380d883a 	mov	r6,r7
    8ec8:	dfc00215 	stw	ra,8(sp)
    8ecc:	000be640 	call	be64 <read>
    8ed0:	1007883a 	mov	r3,r2
    8ed4:	00bfffc4 	movi	r2,-1
    8ed8:	18800626 	beq	r3,r2,8ef4 <_read_r+0x54>
    8edc:	1805883a 	mov	r2,r3
    8ee0:	dfc00217 	ldw	ra,8(sp)
    8ee4:	dc400117 	ldw	r17,4(sp)
    8ee8:	dc000017 	ldw	r16,0(sp)
    8eec:	dec00304 	addi	sp,sp,12
    8ef0:	f800283a 	ret
    8ef4:	80800017 	ldw	r2,0(r16)
    8ef8:	103ff826 	beq	r2,zero,8edc <_read_r+0x3c>
    8efc:	88800015 	stw	r2,0(r17)
    8f00:	1805883a 	mov	r2,r3
    8f04:	dfc00217 	ldw	ra,8(sp)
    8f08:	dc400117 	ldw	r17,4(sp)
    8f0c:	dc000017 	ldw	r16,0(sp)
    8f10:	dec00304 	addi	sp,sp,12
    8f14:	f800283a 	ret

00008f18 <__udivdi3>:
    8f18:	defff004 	addi	sp,sp,-64
    8f1c:	2005883a 	mov	r2,r4
    8f20:	3011883a 	mov	r8,r6
    8f24:	df000e15 	stw	fp,56(sp)
    8f28:	dd000a15 	stw	r20,40(sp)
    8f2c:	dc000615 	stw	r16,24(sp)
    8f30:	dfc00f15 	stw	ra,60(sp)
    8f34:	ddc00d15 	stw	r23,52(sp)
    8f38:	dd800c15 	stw	r22,48(sp)
    8f3c:	dd400b15 	stw	r21,44(sp)
    8f40:	dcc00915 	stw	r19,36(sp)
    8f44:	dc800815 	stw	r18,32(sp)
    8f48:	dc400715 	stw	r17,28(sp)
    8f4c:	4021883a 	mov	r16,r8
    8f50:	1039883a 	mov	fp,r2
    8f54:	2829883a 	mov	r20,r5
    8f58:	38003b1e 	bne	r7,zero,9048 <__udivdi3+0x130>
    8f5c:	2a005c36 	bltu	r5,r8,90d0 <__udivdi3+0x1b8>
    8f60:	4000a626 	beq	r8,zero,91fc <__udivdi3+0x2e4>
    8f64:	00bfffd4 	movui	r2,65535
    8f68:	14009e36 	bltu	r2,r16,91e4 <__udivdi3+0x2cc>
    8f6c:	00803fc4 	movi	r2,255
    8f70:	14013d36 	bltu	r2,r16,9468 <__udivdi3+0x550>
    8f74:	000b883a 	mov	r5,zero
    8f78:	0005883a 	mov	r2,zero
    8f7c:	8084d83a 	srl	r2,r16,r2
    8f80:	01000074 	movhi	r4,1
    8f84:	21093a04 	addi	r4,r4,9448
    8f88:	01800804 	movi	r6,32
    8f8c:	1105883a 	add	r2,r2,r4
    8f90:	10c00003 	ldbu	r3,0(r2)
    8f94:	28c7883a 	add	r3,r5,r3
    8f98:	30edc83a 	sub	r22,r6,r3
    8f9c:	b000ee1e 	bne	r22,zero,9358 <__udivdi3+0x440>
    8fa0:	802ad43a 	srli	r21,r16,16
    8fa4:	00800044 	movi	r2,1
    8fa8:	a423c83a 	sub	r17,r20,r16
    8fac:	85ffffcc 	andi	r23,r16,65535
    8fb0:	d8800315 	stw	r2,12(sp)
    8fb4:	8809883a 	mov	r4,r17
    8fb8:	a80b883a 	mov	r5,r21
    8fbc:	000ad0c0 	call	ad0c <__udivsi3>
    8fc0:	8809883a 	mov	r4,r17
    8fc4:	a80b883a 	mov	r5,r21
    8fc8:	102d883a 	mov	r22,r2
    8fcc:	000ad140 	call	ad14 <__umodsi3>
    8fd0:	1004943a 	slli	r2,r2,16
    8fd4:	e006d43a 	srli	r3,fp,16
    8fd8:	bda3383a 	mul	r17,r23,r22
    8fdc:	10c4b03a 	or	r2,r2,r3
    8fe0:	1440042e 	bgeu	r2,r17,8ff4 <__udivdi3+0xdc>
    8fe4:	1405883a 	add	r2,r2,r16
    8fe8:	b5bfffc4 	addi	r22,r22,-1
    8fec:	14000136 	bltu	r2,r16,8ff4 <__udivdi3+0xdc>
    8ff0:	14413d36 	bltu	r2,r17,94e8 <__udivdi3+0x5d0>
    8ff4:	1463c83a 	sub	r17,r2,r17
    8ff8:	8809883a 	mov	r4,r17
    8ffc:	a80b883a 	mov	r5,r21
    9000:	000ad0c0 	call	ad0c <__udivsi3>
    9004:	8809883a 	mov	r4,r17
    9008:	a80b883a 	mov	r5,r21
    900c:	1029883a 	mov	r20,r2
    9010:	000ad140 	call	ad14 <__umodsi3>
    9014:	1004943a 	slli	r2,r2,16
    9018:	bd09383a 	mul	r4,r23,r20
    901c:	e0ffffcc 	andi	r3,fp,65535
    9020:	10c4b03a 	or	r2,r2,r3
    9024:	1100042e 	bgeu	r2,r4,9038 <__udivdi3+0x120>
    9028:	8085883a 	add	r2,r16,r2
    902c:	a53fffc4 	addi	r20,r20,-1
    9030:	14000136 	bltu	r2,r16,9038 <__udivdi3+0x120>
    9034:	11012036 	bltu	r2,r4,94b8 <__udivdi3+0x5a0>
    9038:	b004943a 	slli	r2,r22,16
    903c:	d9000317 	ldw	r4,12(sp)
    9040:	a084b03a 	or	r2,r20,r2
    9044:	00001506 	br	909c <__udivdi3+0x184>
    9048:	380d883a 	mov	r6,r7
    904c:	29c06236 	bltu	r5,r7,91d8 <__udivdi3+0x2c0>
    9050:	00bfffd4 	movui	r2,65535
    9054:	11c05a36 	bltu	r2,r7,91c0 <__udivdi3+0x2a8>
    9058:	00803fc4 	movi	r2,255
    905c:	11c0fc36 	bltu	r2,r7,9450 <__udivdi3+0x538>
    9060:	000b883a 	mov	r5,zero
    9064:	0005883a 	mov	r2,zero
    9068:	3084d83a 	srl	r2,r6,r2
    906c:	01000074 	movhi	r4,1
    9070:	21093a04 	addi	r4,r4,9448
    9074:	01c00804 	movi	r7,32
    9078:	1105883a 	add	r2,r2,r4
    907c:	10c00003 	ldbu	r3,0(r2)
    9080:	28c7883a 	add	r3,r5,r3
    9084:	38efc83a 	sub	r23,r7,r3
    9088:	b800691e 	bne	r23,zero,9230 <__udivdi3+0x318>
    908c:	35000136 	bltu	r6,r20,9094 <__udivdi3+0x17c>
    9090:	e4005136 	bltu	fp,r16,91d8 <__udivdi3+0x2c0>
    9094:	00800044 	movi	r2,1
    9098:	0009883a 	mov	r4,zero
    909c:	2007883a 	mov	r3,r4
    90a0:	dfc00f17 	ldw	ra,60(sp)
    90a4:	df000e17 	ldw	fp,56(sp)
    90a8:	ddc00d17 	ldw	r23,52(sp)
    90ac:	dd800c17 	ldw	r22,48(sp)
    90b0:	dd400b17 	ldw	r21,44(sp)
    90b4:	dd000a17 	ldw	r20,40(sp)
    90b8:	dcc00917 	ldw	r19,36(sp)
    90bc:	dc800817 	ldw	r18,32(sp)
    90c0:	dc400717 	ldw	r17,28(sp)
    90c4:	dc000617 	ldw	r16,24(sp)
    90c8:	dec01004 	addi	sp,sp,64
    90cc:	f800283a 	ret
    90d0:	00bfffd4 	movui	r2,65535
    90d4:	12005036 	bltu	r2,r8,9218 <__udivdi3+0x300>
    90d8:	00803fc4 	movi	r2,255
    90dc:	1200e836 	bltu	r2,r8,9480 <__udivdi3+0x568>
    90e0:	000b883a 	mov	r5,zero
    90e4:	0005883a 	mov	r2,zero
    90e8:	8084d83a 	srl	r2,r16,r2
    90ec:	01000074 	movhi	r4,1
    90f0:	21093a04 	addi	r4,r4,9448
    90f4:	01800804 	movi	r6,32
    90f8:	1105883a 	add	r2,r2,r4
    90fc:	10c00003 	ldbu	r3,0(r2)
    9100:	28c7883a 	add	r3,r5,r3
    9104:	30cbc83a 	sub	r5,r6,r3
    9108:	28000626 	beq	r5,zero,9124 <__udivdi3+0x20c>
    910c:	3145c83a 	sub	r2,r6,r5
    9110:	e084d83a 	srl	r2,fp,r2
    9114:	a146983a 	sll	r3,r20,r5
    9118:	e178983a 	sll	fp,fp,r5
    911c:	8160983a 	sll	r16,r16,r5
    9120:	18a8b03a 	or	r20,r3,r2
    9124:	802ad43a 	srli	r21,r16,16
    9128:	a009883a 	mov	r4,r20
    912c:	85ffffcc 	andi	r23,r16,65535
    9130:	a80b883a 	mov	r5,r21
    9134:	000ad0c0 	call	ad0c <__udivsi3>
    9138:	a009883a 	mov	r4,r20
    913c:	a80b883a 	mov	r5,r21
    9140:	102d883a 	mov	r22,r2
    9144:	000ad140 	call	ad14 <__umodsi3>
    9148:	1004943a 	slli	r2,r2,16
    914c:	e006d43a 	srli	r3,fp,16
    9150:	bda3383a 	mul	r17,r23,r22
    9154:	10c4b03a 	or	r2,r2,r3
    9158:	1440042e 	bgeu	r2,r17,916c <__udivdi3+0x254>
    915c:	1405883a 	add	r2,r2,r16
    9160:	b5bfffc4 	addi	r22,r22,-1
    9164:	14000136 	bltu	r2,r16,916c <__udivdi3+0x254>
    9168:	1440d536 	bltu	r2,r17,94c0 <__udivdi3+0x5a8>
    916c:	1463c83a 	sub	r17,r2,r17
    9170:	8809883a 	mov	r4,r17
    9174:	a80b883a 	mov	r5,r21
    9178:	000ad0c0 	call	ad0c <__udivsi3>
    917c:	8809883a 	mov	r4,r17
    9180:	a80b883a 	mov	r5,r21
    9184:	1029883a 	mov	r20,r2
    9188:	000ad140 	call	ad14 <__umodsi3>
    918c:	1004943a 	slli	r2,r2,16
    9190:	bd09383a 	mul	r4,r23,r20
    9194:	e0ffffcc 	andi	r3,fp,65535
    9198:	10c4b03a 	or	r2,r2,r3
    919c:	1100042e 	bgeu	r2,r4,91b0 <__udivdi3+0x298>
    91a0:	8085883a 	add	r2,r16,r2
    91a4:	a53fffc4 	addi	r20,r20,-1
    91a8:	14000136 	bltu	r2,r16,91b0 <__udivdi3+0x298>
    91ac:	1100c736 	bltu	r2,r4,94cc <__udivdi3+0x5b4>
    91b0:	b004943a 	slli	r2,r22,16
    91b4:	0009883a 	mov	r4,zero
    91b8:	a084b03a 	or	r2,r20,r2
    91bc:	003fb706 	br	909c <__udivdi3+0x184>
    91c0:	00804034 	movhi	r2,256
    91c4:	10bfffc4 	addi	r2,r2,-1
    91c8:	11c0a436 	bltu	r2,r7,945c <__udivdi3+0x544>
    91cc:	01400404 	movi	r5,16
    91d0:	2805883a 	mov	r2,r5
    91d4:	003fa406 	br	9068 <__udivdi3+0x150>
    91d8:	0005883a 	mov	r2,zero
    91dc:	0009883a 	mov	r4,zero
    91e0:	003fae06 	br	909c <__udivdi3+0x184>
    91e4:	00804034 	movhi	r2,256
    91e8:	10bfffc4 	addi	r2,r2,-1
    91ec:	1400a136 	bltu	r2,r16,9474 <__udivdi3+0x55c>
    91f0:	01400404 	movi	r5,16
    91f4:	2805883a 	mov	r2,r5
    91f8:	003f6006 	br	8f7c <__udivdi3+0x64>
    91fc:	01000044 	movi	r4,1
    9200:	000b883a 	mov	r5,zero
    9204:	000ad0c0 	call	ad0c <__udivsi3>
    9208:	1021883a 	mov	r16,r2
    920c:	00bfffd4 	movui	r2,65535
    9210:	143ff436 	bltu	r2,r16,91e4 <__udivdi3+0x2cc>
    9214:	003f5506 	br	8f6c <__udivdi3+0x54>
    9218:	00804034 	movhi	r2,256
    921c:	10bfffc4 	addi	r2,r2,-1
    9220:	12009a36 	bltu	r2,r8,948c <__udivdi3+0x574>
    9224:	01400404 	movi	r5,16
    9228:	2805883a 	mov	r2,r5
    922c:	003fae06 	br	90e8 <__udivdi3+0x1d0>
    9230:	3dc5c83a 	sub	r2,r7,r23
    9234:	35c8983a 	sll	r4,r6,r23
    9238:	8086d83a 	srl	r3,r16,r2
    923c:	a0a2d83a 	srl	r17,r20,r2
    9240:	e084d83a 	srl	r2,fp,r2
    9244:	20eab03a 	or	r21,r4,r3
    9248:	a82cd43a 	srli	r22,r21,16
    924c:	a5c6983a 	sll	r3,r20,r23
    9250:	8809883a 	mov	r4,r17
    9254:	b00b883a 	mov	r5,r22
    9258:	1886b03a 	or	r3,r3,r2
    925c:	d8c00215 	stw	r3,8(sp)
    9260:	000ad0c0 	call	ad0c <__udivsi3>
    9264:	8809883a 	mov	r4,r17
    9268:	b00b883a 	mov	r5,r22
    926c:	1029883a 	mov	r20,r2
    9270:	000ad140 	call	ad14 <__umodsi3>
    9274:	a8ffffcc 	andi	r3,r21,65535
    9278:	d8c00515 	stw	r3,20(sp)
    927c:	d9000217 	ldw	r4,8(sp)
    9280:	d9400517 	ldw	r5,20(sp)
    9284:	1004943a 	slli	r2,r2,16
    9288:	2006d43a 	srli	r3,r4,16
    928c:	85e0983a 	sll	r16,r16,r23
    9290:	2d23383a 	mul	r17,r5,r20
    9294:	10c4b03a 	or	r2,r2,r3
    9298:	dc000015 	stw	r16,0(sp)
    929c:	1440032e 	bgeu	r2,r17,92ac <__udivdi3+0x394>
    92a0:	1545883a 	add	r2,r2,r21
    92a4:	a53fffc4 	addi	r20,r20,-1
    92a8:	15407f2e 	bgeu	r2,r21,94a8 <__udivdi3+0x590>
    92ac:	1463c83a 	sub	r17,r2,r17
    92b0:	8809883a 	mov	r4,r17
    92b4:	b00b883a 	mov	r5,r22
    92b8:	000ad0c0 	call	ad0c <__udivsi3>
    92bc:	8809883a 	mov	r4,r17
    92c0:	b00b883a 	mov	r5,r22
    92c4:	1021883a 	mov	r16,r2
    92c8:	000ad140 	call	ad14 <__umodsi3>
    92cc:	d8c00517 	ldw	r3,20(sp)
    92d0:	d9000217 	ldw	r4,8(sp)
    92d4:	1004943a 	slli	r2,r2,16
    92d8:	1c0f383a 	mul	r7,r3,r16
    92dc:	20ffffcc 	andi	r3,r4,65535
    92e0:	10e2b03a 	or	r17,r2,r3
    92e4:	89c0032e 	bgeu	r17,r7,92f4 <__udivdi3+0x3dc>
    92e8:	8d63883a 	add	r17,r17,r21
    92ec:	843fffc4 	addi	r16,r16,-1
    92f0:	8d40692e 	bgeu	r17,r21,9498 <__udivdi3+0x580>
    92f4:	a008943a 	slli	r4,r20,16
    92f8:	d9400017 	ldw	r5,0(sp)
    92fc:	89e3c83a 	sub	r17,r17,r7
    9300:	8110b03a 	or	r8,r16,r4
    9304:	280cd43a 	srli	r6,r5,16
    9308:	28ffffcc 	andi	r3,r5,65535
    930c:	40bfffcc 	andi	r2,r8,65535
    9310:	400ad43a 	srli	r5,r8,16
    9314:	10d3383a 	mul	r9,r2,r3
    9318:	1185383a 	mul	r2,r2,r6
    931c:	28c7383a 	mul	r3,r5,r3
    9320:	4808d43a 	srli	r4,r9,16
    9324:	298b383a 	mul	r5,r5,r6
    9328:	10c5883a 	add	r2,r2,r3
    932c:	2089883a 	add	r4,r4,r2
    9330:	20c0022e 	bgeu	r4,r3,933c <__udivdi3+0x424>
    9334:	00800074 	movhi	r2,1
    9338:	288b883a 	add	r5,r5,r2
    933c:	2004d43a 	srli	r2,r4,16
    9340:	288b883a 	add	r5,r5,r2
    9344:	89403f36 	bltu	r17,r5,9444 <__udivdi3+0x52c>
    9348:	89403926 	beq	r17,r5,9430 <__udivdi3+0x518>
    934c:	4005883a 	mov	r2,r8
    9350:	0009883a 	mov	r4,zero
    9354:	003f5106 	br	909c <__udivdi3+0x184>
    9358:	85a0983a 	sll	r16,r16,r22
    935c:	3585c83a 	sub	r2,r6,r22
    9360:	a0a2d83a 	srl	r17,r20,r2
    9364:	802ad43a 	srli	r21,r16,16
    9368:	e084d83a 	srl	r2,fp,r2
    936c:	a586983a 	sll	r3,r20,r22
    9370:	8809883a 	mov	r4,r17
    9374:	a80b883a 	mov	r5,r21
    9378:	1886b03a 	or	r3,r3,r2
    937c:	d8c00115 	stw	r3,4(sp)
    9380:	000ad0c0 	call	ad0c <__udivsi3>
    9384:	8809883a 	mov	r4,r17
    9388:	a80b883a 	mov	r5,r21
    938c:	d8800415 	stw	r2,16(sp)
    9390:	000ad140 	call	ad14 <__umodsi3>
    9394:	d9000117 	ldw	r4,4(sp)
    9398:	d9400417 	ldw	r5,16(sp)
    939c:	1004943a 	slli	r2,r2,16
    93a0:	85ffffcc 	andi	r23,r16,65535
    93a4:	2006d43a 	srli	r3,r4,16
    93a8:	b963383a 	mul	r17,r23,r5
    93ac:	10c4b03a 	or	r2,r2,r3
    93b0:	1440042e 	bgeu	r2,r17,93c4 <__udivdi3+0x4ac>
    93b4:	297fffc4 	addi	r5,r5,-1
    93b8:	1405883a 	add	r2,r2,r16
    93bc:	d9400415 	stw	r5,16(sp)
    93c0:	1400442e 	bgeu	r2,r16,94d4 <__udivdi3+0x5bc>
    93c4:	1463c83a 	sub	r17,r2,r17
    93c8:	8809883a 	mov	r4,r17
    93cc:	a80b883a 	mov	r5,r21
    93d0:	000ad0c0 	call	ad0c <__udivsi3>
    93d4:	8809883a 	mov	r4,r17
    93d8:	a80b883a 	mov	r5,r21
    93dc:	1029883a 	mov	r20,r2
    93e0:	000ad140 	call	ad14 <__umodsi3>
    93e4:	d9400117 	ldw	r5,4(sp)
    93e8:	1004943a 	slli	r2,r2,16
    93ec:	bd09383a 	mul	r4,r23,r20
    93f0:	28ffffcc 	andi	r3,r5,65535
    93f4:	10c6b03a 	or	r3,r2,r3
    93f8:	1900062e 	bgeu	r3,r4,9414 <__udivdi3+0x4fc>
    93fc:	1c07883a 	add	r3,r3,r16
    9400:	a53fffc4 	addi	r20,r20,-1
    9404:	1c000336 	bltu	r3,r16,9414 <__udivdi3+0x4fc>
    9408:	1900022e 	bgeu	r3,r4,9414 <__udivdi3+0x4fc>
    940c:	a53fffc4 	addi	r20,r20,-1
    9410:	1c07883a 	add	r3,r3,r16
    9414:	d9400417 	ldw	r5,16(sp)
    9418:	e5b8983a 	sll	fp,fp,r22
    941c:	1923c83a 	sub	r17,r3,r4
    9420:	2804943a 	slli	r2,r5,16
    9424:	a0a8b03a 	or	r20,r20,r2
    9428:	dd000315 	stw	r20,12(sp)
    942c:	003ee106 	br	8fb4 <__udivdi3+0x9c>
    9430:	2004943a 	slli	r2,r4,16
    9434:	e5c8983a 	sll	r4,fp,r23
    9438:	48ffffcc 	andi	r3,r9,65535
    943c:	10c5883a 	add	r2,r2,r3
    9440:	20bfc22e 	bgeu	r4,r2,934c <__udivdi3+0x434>
    9444:	40bfffc4 	addi	r2,r8,-1
    9448:	0009883a 	mov	r4,zero
    944c:	003f1306 	br	909c <__udivdi3+0x184>
    9450:	01400204 	movi	r5,8
    9454:	2805883a 	mov	r2,r5
    9458:	003f0306 	br	9068 <__udivdi3+0x150>
    945c:	01400604 	movi	r5,24
    9460:	2805883a 	mov	r2,r5
    9464:	003f0006 	br	9068 <__udivdi3+0x150>
    9468:	01400204 	movi	r5,8
    946c:	2805883a 	mov	r2,r5
    9470:	003ec206 	br	8f7c <__udivdi3+0x64>
    9474:	01400604 	movi	r5,24
    9478:	2805883a 	mov	r2,r5
    947c:	003ebf06 	br	8f7c <__udivdi3+0x64>
    9480:	01400204 	movi	r5,8
    9484:	2805883a 	mov	r2,r5
    9488:	003f1706 	br	90e8 <__udivdi3+0x1d0>
    948c:	01400604 	movi	r5,24
    9490:	2805883a 	mov	r2,r5
    9494:	003f1406 	br	90e8 <__udivdi3+0x1d0>
    9498:	89ff962e 	bgeu	r17,r7,92f4 <__udivdi3+0x3dc>
    949c:	8d63883a 	add	r17,r17,r21
    94a0:	843fffc4 	addi	r16,r16,-1
    94a4:	003f9306 	br	92f4 <__udivdi3+0x3dc>
    94a8:	147f802e 	bgeu	r2,r17,92ac <__udivdi3+0x394>
    94ac:	a53fffc4 	addi	r20,r20,-1
    94b0:	1545883a 	add	r2,r2,r21
    94b4:	003f7d06 	br	92ac <__udivdi3+0x394>
    94b8:	a53fffc4 	addi	r20,r20,-1
    94bc:	003ede06 	br	9038 <__udivdi3+0x120>
    94c0:	b5bfffc4 	addi	r22,r22,-1
    94c4:	1405883a 	add	r2,r2,r16
    94c8:	003f2806 	br	916c <__udivdi3+0x254>
    94cc:	a53fffc4 	addi	r20,r20,-1
    94d0:	003f3706 	br	91b0 <__udivdi3+0x298>
    94d4:	147fbb2e 	bgeu	r2,r17,93c4 <__udivdi3+0x4ac>
    94d8:	297fffc4 	addi	r5,r5,-1
    94dc:	1405883a 	add	r2,r2,r16
    94e0:	d9400415 	stw	r5,16(sp)
    94e4:	003fb706 	br	93c4 <__udivdi3+0x4ac>
    94e8:	b5bfffc4 	addi	r22,r22,-1
    94ec:	1405883a 	add	r2,r2,r16
    94f0:	003ec006 	br	8ff4 <__udivdi3+0xdc>

000094f4 <__umoddi3>:
    94f4:	defff104 	addi	sp,sp,-60
    94f8:	dd800b15 	stw	r22,44(sp)
    94fc:	dd000915 	stw	r20,36(sp)
    9500:	dc000515 	stw	r16,20(sp)
    9504:	dfc00e15 	stw	ra,56(sp)
    9508:	df000d15 	stw	fp,52(sp)
    950c:	ddc00c15 	stw	r23,48(sp)
    9510:	dd400a15 	stw	r21,40(sp)
    9514:	dcc00815 	stw	r19,32(sp)
    9518:	dc800715 	stw	r18,28(sp)
    951c:	dc400615 	stw	r17,24(sp)
    9520:	3021883a 	mov	r16,r6
    9524:	202d883a 	mov	r22,r4
    9528:	2829883a 	mov	r20,r5
    952c:	38002b1e 	bne	r7,zero,95dc <__umoddi3+0xe8>
    9530:	29805036 	bltu	r5,r6,9674 <__umoddi3+0x180>
    9534:	30008a26 	beq	r6,zero,9760 <__umoddi3+0x26c>
    9538:	00bfffd4 	movui	r2,65535
    953c:	14008236 	bltu	r2,r16,9748 <__umoddi3+0x254>
    9540:	00803fc4 	movi	r2,255
    9544:	14013636 	bltu	r2,r16,9a20 <__umoddi3+0x52c>
    9548:	000b883a 	mov	r5,zero
    954c:	0005883a 	mov	r2,zero
    9550:	8084d83a 	srl	r2,r16,r2
    9554:	01000074 	movhi	r4,1
    9558:	21093a04 	addi	r4,r4,9448
    955c:	01800804 	movi	r6,32
    9560:	1105883a 	add	r2,r2,r4
    9564:	10c00003 	ldbu	r3,0(r2)
    9568:	28c7883a 	add	r3,r5,r3
    956c:	30efc83a 	sub	r23,r6,r3
    9570:	b800941e 	bne	r23,zero,97c4 <__umoddi3+0x2d0>
    9574:	802ad43a 	srli	r21,r16,16
    9578:	a423c83a 	sub	r17,r20,r16
    957c:	0039883a 	mov	fp,zero
    9580:	853fffcc 	andi	r20,r16,65535
    9584:	8809883a 	mov	r4,r17
    9588:	a80b883a 	mov	r5,r21
    958c:	000ad0c0 	call	ad0c <__udivsi3>
    9590:	8809883a 	mov	r4,r17
    9594:	a80b883a 	mov	r5,r21
    9598:	a0a3383a 	mul	r17,r20,r2
    959c:	000ad140 	call	ad14 <__umodsi3>
    95a0:	1004943a 	slli	r2,r2,16
    95a4:	b006d43a 	srli	r3,r22,16
    95a8:	10c4b03a 	or	r2,r2,r3
    95ac:	1440032e 	bgeu	r2,r17,95bc <__umoddi3+0xc8>
    95b0:	1405883a 	add	r2,r2,r16
    95b4:	14000136 	bltu	r2,r16,95bc <__umoddi3+0xc8>
    95b8:	14413536 	bltu	r2,r17,9a90 <__umoddi3+0x59c>
    95bc:	1463c83a 	sub	r17,r2,r17
    95c0:	8809883a 	mov	r4,r17
    95c4:	a80b883a 	mov	r5,r21
    95c8:	000ad0c0 	call	ad0c <__udivsi3>
    95cc:	8809883a 	mov	r4,r17
    95d0:	a0a3383a 	mul	r17,r20,r2
    95d4:	a80b883a 	mov	r5,r21
    95d8:	00004d06 	br	9710 <__umoddi3+0x21c>
    95dc:	380d883a 	mov	r6,r7
    95e0:	29c0102e 	bgeu	r5,r7,9624 <__umoddi3+0x130>
    95e4:	2011883a 	mov	r8,r4
    95e8:	2813883a 	mov	r9,r5
    95ec:	4005883a 	mov	r2,r8
    95f0:	4807883a 	mov	r3,r9
    95f4:	dfc00e17 	ldw	ra,56(sp)
    95f8:	df000d17 	ldw	fp,52(sp)
    95fc:	ddc00c17 	ldw	r23,48(sp)
    9600:	dd800b17 	ldw	r22,44(sp)
    9604:	dd400a17 	ldw	r21,40(sp)
    9608:	dd000917 	ldw	r20,36(sp)
    960c:	dcc00817 	ldw	r19,32(sp)
    9610:	dc800717 	ldw	r18,28(sp)
    9614:	dc400617 	ldw	r17,24(sp)
    9618:	dc000517 	ldw	r16,20(sp)
    961c:	dec00f04 	addi	sp,sp,60
    9620:	f800283a 	ret
    9624:	00bfffd4 	movui	r2,65535
    9628:	11c05a36 	bltu	r2,r7,9794 <__umoddi3+0x2a0>
    962c:	00803fc4 	movi	r2,255
    9630:	11c0fe36 	bltu	r2,r7,9a2c <__umoddi3+0x538>
    9634:	000b883a 	mov	r5,zero
    9638:	0005883a 	mov	r2,zero
    963c:	3084d83a 	srl	r2,r6,r2
    9640:	01000074 	movhi	r4,1
    9644:	21093a04 	addi	r4,r4,9448
    9648:	01c00804 	movi	r7,32
    964c:	1105883a 	add	r2,r2,r4
    9650:	10c00003 	ldbu	r3,0(r2)
    9654:	28c7883a 	add	r3,r5,r3
    9658:	38ebc83a 	sub	r21,r7,r3
    965c:	a800851e 	bne	r21,zero,9874 <__umoddi3+0x380>
    9660:	35005236 	bltu	r6,r20,97ac <__umoddi3+0x2b8>
    9664:	b400512e 	bgeu	r22,r16,97ac <__umoddi3+0x2b8>
    9668:	b011883a 	mov	r8,r22
    966c:	a013883a 	mov	r9,r20
    9670:	003fde06 	br	95ec <__umoddi3+0xf8>
    9674:	00bfffd4 	movui	r2,65535
    9678:	11804036 	bltu	r2,r6,977c <__umoddi3+0x288>
    967c:	00803fc4 	movi	r2,255
    9680:	1180ed36 	bltu	r2,r6,9a38 <__umoddi3+0x544>
    9684:	000b883a 	mov	r5,zero
    9688:	0005883a 	mov	r2,zero
    968c:	8084d83a 	srl	r2,r16,r2
    9690:	01000074 	movhi	r4,1
    9694:	21093a04 	addi	r4,r4,9448
    9698:	01800804 	movi	r6,32
    969c:	1105883a 	add	r2,r2,r4
    96a0:	10c00003 	ldbu	r3,0(r2)
    96a4:	28c7883a 	add	r3,r5,r3
    96a8:	30c7c83a 	sub	r3,r6,r3
    96ac:	1800bf1e 	bne	r3,zero,99ac <__umoddi3+0x4b8>
    96b0:	0039883a 	mov	fp,zero
    96b4:	802ad43a 	srli	r21,r16,16
    96b8:	a009883a 	mov	r4,r20
    96bc:	85ffffcc 	andi	r23,r16,65535
    96c0:	a80b883a 	mov	r5,r21
    96c4:	000ad0c0 	call	ad0c <__udivsi3>
    96c8:	a009883a 	mov	r4,r20
    96cc:	a80b883a 	mov	r5,r21
    96d0:	b8a3383a 	mul	r17,r23,r2
    96d4:	000ad140 	call	ad14 <__umodsi3>
    96d8:	1004943a 	slli	r2,r2,16
    96dc:	b006d43a 	srli	r3,r22,16
    96e0:	10c4b03a 	or	r2,r2,r3
    96e4:	1440032e 	bgeu	r2,r17,96f4 <__umoddi3+0x200>
    96e8:	1405883a 	add	r2,r2,r16
    96ec:	14000136 	bltu	r2,r16,96f4 <__umoddi3+0x200>
    96f0:	1440e536 	bltu	r2,r17,9a88 <__umoddi3+0x594>
    96f4:	1463c83a 	sub	r17,r2,r17
    96f8:	8809883a 	mov	r4,r17
    96fc:	a80b883a 	mov	r5,r21
    9700:	000ad0c0 	call	ad0c <__udivsi3>
    9704:	8809883a 	mov	r4,r17
    9708:	b8a3383a 	mul	r17,r23,r2
    970c:	a80b883a 	mov	r5,r21
    9710:	000ad140 	call	ad14 <__umodsi3>
    9714:	1004943a 	slli	r2,r2,16
    9718:	b0ffffcc 	andi	r3,r22,65535
    971c:	10c4b03a 	or	r2,r2,r3
    9720:	1440042e 	bgeu	r2,r17,9734 <__umoddi3+0x240>
    9724:	1405883a 	add	r2,r2,r16
    9728:	14000236 	bltu	r2,r16,9734 <__umoddi3+0x240>
    972c:	1440012e 	bgeu	r2,r17,9734 <__umoddi3+0x240>
    9730:	1405883a 	add	r2,r2,r16
    9734:	1445c83a 	sub	r2,r2,r17
    9738:	1724d83a 	srl	r18,r2,fp
    973c:	0013883a 	mov	r9,zero
    9740:	9011883a 	mov	r8,r18
    9744:	003fa906 	br	95ec <__umoddi3+0xf8>
    9748:	00804034 	movhi	r2,256
    974c:	10bfffc4 	addi	r2,r2,-1
    9750:	1400b036 	bltu	r2,r16,9a14 <__umoddi3+0x520>
    9754:	01400404 	movi	r5,16
    9758:	2805883a 	mov	r2,r5
    975c:	003f7c06 	br	9550 <__umoddi3+0x5c>
    9760:	01000044 	movi	r4,1
    9764:	000b883a 	mov	r5,zero
    9768:	000ad0c0 	call	ad0c <__udivsi3>
    976c:	1021883a 	mov	r16,r2
    9770:	00bfffd4 	movui	r2,65535
    9774:	143ff436 	bltu	r2,r16,9748 <__umoddi3+0x254>
    9778:	003f7106 	br	9540 <__umoddi3+0x4c>
    977c:	00804034 	movhi	r2,256
    9780:	10bfffc4 	addi	r2,r2,-1
    9784:	1180af36 	bltu	r2,r6,9a44 <__umoddi3+0x550>
    9788:	01400404 	movi	r5,16
    978c:	2805883a 	mov	r2,r5
    9790:	003fbe06 	br	968c <__umoddi3+0x198>
    9794:	00804034 	movhi	r2,256
    9798:	10bfffc4 	addi	r2,r2,-1
    979c:	11c0ac36 	bltu	r2,r7,9a50 <__umoddi3+0x55c>
    97a0:	01400404 	movi	r5,16
    97a4:	2805883a 	mov	r2,r5
    97a8:	003fa406 	br	963c <__umoddi3+0x148>
    97ac:	b409c83a 	sub	r4,r22,r16
    97b0:	b105803a 	cmpltu	r2,r22,r4
    97b4:	a187c83a 	sub	r3,r20,r6
    97b8:	18a9c83a 	sub	r20,r3,r2
    97bc:	202d883a 	mov	r22,r4
    97c0:	003fa906 	br	9668 <__umoddi3+0x174>
    97c4:	85e0983a 	sll	r16,r16,r23
    97c8:	35c5c83a 	sub	r2,r6,r23
    97cc:	a0a2d83a 	srl	r17,r20,r2
    97d0:	802ad43a 	srli	r21,r16,16
    97d4:	b084d83a 	srl	r2,r22,r2
    97d8:	a5c6983a 	sll	r3,r20,r23
    97dc:	8809883a 	mov	r4,r17
    97e0:	a80b883a 	mov	r5,r21
    97e4:	1886b03a 	or	r3,r3,r2
    97e8:	d8c00115 	stw	r3,4(sp)
    97ec:	853fffcc 	andi	r20,r16,65535
    97f0:	000ad0c0 	call	ad0c <__udivsi3>
    97f4:	8809883a 	mov	r4,r17
    97f8:	a80b883a 	mov	r5,r21
    97fc:	a0a3383a 	mul	r17,r20,r2
    9800:	000ad140 	call	ad14 <__umodsi3>
    9804:	d9000117 	ldw	r4,4(sp)
    9808:	1004943a 	slli	r2,r2,16
    980c:	b839883a 	mov	fp,r23
    9810:	2006d43a 	srli	r3,r4,16
    9814:	10c4b03a 	or	r2,r2,r3
    9818:	1440022e 	bgeu	r2,r17,9824 <__umoddi3+0x330>
    981c:	1405883a 	add	r2,r2,r16
    9820:	1400962e 	bgeu	r2,r16,9a7c <__umoddi3+0x588>
    9824:	1463c83a 	sub	r17,r2,r17
    9828:	8809883a 	mov	r4,r17
    982c:	a80b883a 	mov	r5,r21
    9830:	000ad0c0 	call	ad0c <__udivsi3>
    9834:	8809883a 	mov	r4,r17
    9838:	a80b883a 	mov	r5,r21
    983c:	a0a3383a 	mul	r17,r20,r2
    9840:	000ad140 	call	ad14 <__umodsi3>
    9844:	d9400117 	ldw	r5,4(sp)
    9848:	1004943a 	slli	r2,r2,16
    984c:	28ffffcc 	andi	r3,r5,65535
    9850:	10c4b03a 	or	r2,r2,r3
    9854:	1440042e 	bgeu	r2,r17,9868 <__umoddi3+0x374>
    9858:	1405883a 	add	r2,r2,r16
    985c:	14000236 	bltu	r2,r16,9868 <__umoddi3+0x374>
    9860:	1440012e 	bgeu	r2,r17,9868 <__umoddi3+0x374>
    9864:	1405883a 	add	r2,r2,r16
    9868:	b5ec983a 	sll	r22,r22,r23
    986c:	1463c83a 	sub	r17,r2,r17
    9870:	003f4406 	br	9584 <__umoddi3+0x90>
    9874:	3d4fc83a 	sub	r7,r7,r21
    9878:	3546983a 	sll	r3,r6,r21
    987c:	81c4d83a 	srl	r2,r16,r7
    9880:	a1e2d83a 	srl	r17,r20,r7
    9884:	a54c983a 	sll	r6,r20,r21
    9888:	18aeb03a 	or	r23,r3,r2
    988c:	b828d43a 	srli	r20,r23,16
    9890:	b1c4d83a 	srl	r2,r22,r7
    9894:	8809883a 	mov	r4,r17
    9898:	a00b883a 	mov	r5,r20
    989c:	308cb03a 	or	r6,r6,r2
    98a0:	d9c00315 	stw	r7,12(sp)
    98a4:	d9800215 	stw	r6,8(sp)
    98a8:	000ad0c0 	call	ad0c <__udivsi3>
    98ac:	8809883a 	mov	r4,r17
    98b0:	a00b883a 	mov	r5,r20
    98b4:	1039883a 	mov	fp,r2
    98b8:	000ad140 	call	ad14 <__umodsi3>
    98bc:	b8ffffcc 	andi	r3,r23,65535
    98c0:	d8c00415 	stw	r3,16(sp)
    98c4:	d9000217 	ldw	r4,8(sp)
    98c8:	d9400417 	ldw	r5,16(sp)
    98cc:	1004943a 	slli	r2,r2,16
    98d0:	2006d43a 	srli	r3,r4,16
    98d4:	8560983a 	sll	r16,r16,r21
    98d8:	2f23383a 	mul	r17,r5,fp
    98dc:	10c4b03a 	or	r2,r2,r3
    98e0:	dc000015 	stw	r16,0(sp)
    98e4:	b56c983a 	sll	r22,r22,r21
    98e8:	1440032e 	bgeu	r2,r17,98f8 <__umoddi3+0x404>
    98ec:	15c5883a 	add	r2,r2,r23
    98f0:	e73fffc4 	addi	fp,fp,-1
    98f4:	15c05d2e 	bgeu	r2,r23,9a6c <__umoddi3+0x578>
    98f8:	1463c83a 	sub	r17,r2,r17
    98fc:	8809883a 	mov	r4,r17
    9900:	a00b883a 	mov	r5,r20
    9904:	000ad0c0 	call	ad0c <__udivsi3>
    9908:	8809883a 	mov	r4,r17
    990c:	a00b883a 	mov	r5,r20
    9910:	1021883a 	mov	r16,r2
    9914:	000ad140 	call	ad14 <__umodsi3>
    9918:	d8c00417 	ldw	r3,16(sp)
    991c:	d9000217 	ldw	r4,8(sp)
    9920:	1004943a 	slli	r2,r2,16
    9924:	1c23383a 	mul	r17,r3,r16
    9928:	20ffffcc 	andi	r3,r4,65535
    992c:	10ceb03a 	or	r7,r2,r3
    9930:	3c40032e 	bgeu	r7,r17,9940 <__umoddi3+0x44c>
    9934:	3dcf883a 	add	r7,r7,r23
    9938:	843fffc4 	addi	r16,r16,-1
    993c:	3dc0472e 	bgeu	r7,r23,9a5c <__umoddi3+0x568>
    9940:	e004943a 	slli	r2,fp,16
    9944:	d9400017 	ldw	r5,0(sp)
    9948:	3c4fc83a 	sub	r7,r7,r17
    994c:	8084b03a 	or	r2,r16,r2
    9950:	28ffffcc 	andi	r3,r5,65535
    9954:	280cd43a 	srli	r6,r5,16
    9958:	100ad43a 	srli	r5,r2,16
    995c:	10bfffcc 	andi	r2,r2,65535
    9960:	10d1383a 	mul	r8,r2,r3
    9964:	28c7383a 	mul	r3,r5,r3
    9968:	1185383a 	mul	r2,r2,r6
    996c:	4008d43a 	srli	r4,r8,16
    9970:	298b383a 	mul	r5,r5,r6
    9974:	10c5883a 	add	r2,r2,r3
    9978:	2089883a 	add	r4,r4,r2
    997c:	20c0022e 	bgeu	r4,r3,9988 <__umoddi3+0x494>
    9980:	00800074 	movhi	r2,1
    9984:	288b883a 	add	r5,r5,r2
    9988:	2004d43a 	srli	r2,r4,16
    998c:	2008943a 	slli	r4,r4,16
    9990:	40ffffcc 	andi	r3,r8,65535
    9994:	288b883a 	add	r5,r5,r2
    9998:	20c9883a 	add	r4,r4,r3
    999c:	39400b36 	bltu	r7,r5,99cc <__umoddi3+0x4d8>
    99a0:	39403d26 	beq	r7,r5,9a98 <__umoddi3+0x5a4>
    99a4:	394bc83a 	sub	r5,r7,r5
    99a8:	00000f06 	br	99e8 <__umoddi3+0x4f4>
    99ac:	30c5c83a 	sub	r2,r6,r3
    99b0:	1839883a 	mov	fp,r3
    99b4:	b084d83a 	srl	r2,r22,r2
    99b8:	a0c6983a 	sll	r3,r20,r3
    99bc:	8720983a 	sll	r16,r16,fp
    99c0:	b72c983a 	sll	r22,r22,fp
    99c4:	18a8b03a 	or	r20,r3,r2
    99c8:	003f3a06 	br	96b4 <__umoddi3+0x1c0>
    99cc:	d8c00017 	ldw	r3,0(sp)
    99d0:	20c5c83a 	sub	r2,r4,r3
    99d4:	2089803a 	cmpltu	r4,r4,r2
    99d8:	2dc7c83a 	sub	r3,r5,r23
    99dc:	1907c83a 	sub	r3,r3,r4
    99e0:	38cbc83a 	sub	r5,r7,r3
    99e4:	1009883a 	mov	r4,r2
    99e8:	b105c83a 	sub	r2,r22,r4
    99ec:	b087803a 	cmpltu	r3,r22,r2
    99f0:	28c7c83a 	sub	r3,r5,r3
    99f4:	d9400317 	ldw	r5,12(sp)
    99f8:	1544d83a 	srl	r2,r2,r21
    99fc:	1948983a 	sll	r4,r3,r5
    9a00:	1d46d83a 	srl	r3,r3,r21
    9a04:	20a4b03a 	or	r18,r4,r2
    9a08:	9011883a 	mov	r8,r18
    9a0c:	1813883a 	mov	r9,r3
    9a10:	003ef606 	br	95ec <__umoddi3+0xf8>
    9a14:	01400604 	movi	r5,24
    9a18:	2805883a 	mov	r2,r5
    9a1c:	003ecc06 	br	9550 <__umoddi3+0x5c>
    9a20:	01400204 	movi	r5,8
    9a24:	2805883a 	mov	r2,r5
    9a28:	003ec906 	br	9550 <__umoddi3+0x5c>
    9a2c:	01400204 	movi	r5,8
    9a30:	2805883a 	mov	r2,r5
    9a34:	003f0106 	br	963c <__umoddi3+0x148>
    9a38:	01400204 	movi	r5,8
    9a3c:	2805883a 	mov	r2,r5
    9a40:	003f1206 	br	968c <__umoddi3+0x198>
    9a44:	01400604 	movi	r5,24
    9a48:	2805883a 	mov	r2,r5
    9a4c:	003f0f06 	br	968c <__umoddi3+0x198>
    9a50:	01400604 	movi	r5,24
    9a54:	2805883a 	mov	r2,r5
    9a58:	003ef806 	br	963c <__umoddi3+0x148>
    9a5c:	3c7fb82e 	bgeu	r7,r17,9940 <__umoddi3+0x44c>
    9a60:	843fffc4 	addi	r16,r16,-1
    9a64:	3dcf883a 	add	r7,r7,r23
    9a68:	003fb506 	br	9940 <__umoddi3+0x44c>
    9a6c:	147fa22e 	bgeu	r2,r17,98f8 <__umoddi3+0x404>
    9a70:	e73fffc4 	addi	fp,fp,-1
    9a74:	15c5883a 	add	r2,r2,r23
    9a78:	003f9f06 	br	98f8 <__umoddi3+0x404>
    9a7c:	147f692e 	bgeu	r2,r17,9824 <__umoddi3+0x330>
    9a80:	1405883a 	add	r2,r2,r16
    9a84:	003f6706 	br	9824 <__umoddi3+0x330>
    9a88:	1405883a 	add	r2,r2,r16
    9a8c:	003f1906 	br	96f4 <__umoddi3+0x200>
    9a90:	1405883a 	add	r2,r2,r16
    9a94:	003ec906 	br	95bc <__umoddi3+0xc8>
    9a98:	b13fcc36 	bltu	r22,r4,99cc <__umoddi3+0x4d8>
    9a9c:	000b883a 	mov	r5,zero
    9aa0:	003fd106 	br	99e8 <__umoddi3+0x4f4>

00009aa4 <_fpadd_parts>:
    9aa4:	defff804 	addi	sp,sp,-32
    9aa8:	dcc00315 	stw	r19,12(sp)
    9aac:	2027883a 	mov	r19,r4
    9ab0:	21000017 	ldw	r4,0(r4)
    9ab4:	00c00044 	movi	r3,1
    9ab8:	dd400515 	stw	r21,20(sp)
    9abc:	dd000415 	stw	r20,16(sp)
    9ac0:	ddc00715 	stw	r23,28(sp)
    9ac4:	dd800615 	stw	r22,24(sp)
    9ac8:	dc800215 	stw	r18,8(sp)
    9acc:	dc400115 	stw	r17,4(sp)
    9ad0:	dc000015 	stw	r16,0(sp)
    9ad4:	282b883a 	mov	r21,r5
    9ad8:	3029883a 	mov	r20,r6
    9adc:	1900632e 	bgeu	r3,r4,9c6c <_fpadd_parts+0x1c8>
    9ae0:	28800017 	ldw	r2,0(r5)
    9ae4:	1880812e 	bgeu	r3,r2,9cec <_fpadd_parts+0x248>
    9ae8:	00c00104 	movi	r3,4
    9aec:	20c0dc26 	beq	r4,r3,9e60 <_fpadd_parts+0x3bc>
    9af0:	10c07e26 	beq	r2,r3,9cec <_fpadd_parts+0x248>
    9af4:	00c00084 	movi	r3,2
    9af8:	10c06726 	beq	r2,r3,9c98 <_fpadd_parts+0x1f4>
    9afc:	20c07b26 	beq	r4,r3,9cec <_fpadd_parts+0x248>
    9b00:	9dc00217 	ldw	r23,8(r19)
    9b04:	28c00217 	ldw	r3,8(r5)
    9b08:	9c400317 	ldw	r17,12(r19)
    9b0c:	2bc00317 	ldw	r15,12(r5)
    9b10:	b8cdc83a 	sub	r6,r23,r3
    9b14:	9c800417 	ldw	r18,16(r19)
    9b18:	2c000417 	ldw	r16,16(r5)
    9b1c:	3009883a 	mov	r4,r6
    9b20:	30009716 	blt	r6,zero,9d80 <_fpadd_parts+0x2dc>
    9b24:	00800fc4 	movi	r2,63
    9b28:	11806b16 	blt	r2,r6,9cd8 <_fpadd_parts+0x234>
    9b2c:	0100a40e 	bge	zero,r4,9dc0 <_fpadd_parts+0x31c>
    9b30:	35bff804 	addi	r22,r6,-32
    9b34:	b000bc16 	blt	r22,zero,9e28 <_fpadd_parts+0x384>
    9b38:	8596d83a 	srl	r11,r16,r22
    9b3c:	0019883a 	mov	r12,zero
    9b40:	0013883a 	mov	r9,zero
    9b44:	01000044 	movi	r4,1
    9b48:	0015883a 	mov	r10,zero
    9b4c:	b000be16 	blt	r22,zero,9e48 <_fpadd_parts+0x3a4>
    9b50:	2590983a 	sll	r8,r4,r22
    9b54:	000f883a 	mov	r7,zero
    9b58:	00bfffc4 	movi	r2,-1
    9b5c:	3889883a 	add	r4,r7,r2
    9b60:	408b883a 	add	r5,r8,r2
    9b64:	21cd803a 	cmpltu	r6,r4,r7
    9b68:	314b883a 	add	r5,r6,r5
    9b6c:	7904703a 	and	r2,r15,r4
    9b70:	8146703a 	and	r3,r16,r5
    9b74:	10c4b03a 	or	r2,r2,r3
    9b78:	10000226 	beq	r2,zero,9b84 <_fpadd_parts+0xe0>
    9b7c:	02400044 	movi	r9,1
    9b80:	0015883a 	mov	r10,zero
    9b84:	5a5eb03a 	or	r15,r11,r9
    9b88:	62a0b03a 	or	r16,r12,r10
    9b8c:	99400117 	ldw	r5,4(r19)
    9b90:	a8800117 	ldw	r2,4(r21)
    9b94:	28806e26 	beq	r5,r2,9d50 <_fpadd_parts+0x2ac>
    9b98:	28006626 	beq	r5,zero,9d34 <_fpadd_parts+0x290>
    9b9c:	7c45c83a 	sub	r2,r15,r17
    9ba0:	7889803a 	cmpltu	r4,r15,r2
    9ba4:	8487c83a 	sub	r3,r16,r18
    9ba8:	1909c83a 	sub	r4,r3,r4
    9bac:	100d883a 	mov	r6,r2
    9bb0:	200f883a 	mov	r7,r4
    9bb4:	38007716 	blt	r7,zero,9d94 <_fpadd_parts+0x2f0>
    9bb8:	a5c00215 	stw	r23,8(r20)
    9bbc:	a1c00415 	stw	r7,16(r20)
    9bc0:	a0000115 	stw	zero,4(r20)
    9bc4:	a1800315 	stw	r6,12(r20)
    9bc8:	a2000317 	ldw	r8,12(r20)
    9bcc:	a2400417 	ldw	r9,16(r20)
    9bd0:	00bfffc4 	movi	r2,-1
    9bd4:	408b883a 	add	r5,r8,r2
    9bd8:	2a09803a 	cmpltu	r4,r5,r8
    9bdc:	488d883a 	add	r6,r9,r2
    9be0:	01c40034 	movhi	r7,4096
    9be4:	39ffffc4 	addi	r7,r7,-1
    9be8:	218d883a 	add	r6,r4,r6
    9bec:	39801736 	bltu	r7,r6,9c4c <_fpadd_parts+0x1a8>
    9bf0:	31c06526 	beq	r6,r7,9d88 <_fpadd_parts+0x2e4>
    9bf4:	a3000217 	ldw	r12,8(r20)
    9bf8:	4209883a 	add	r4,r8,r8
    9bfc:	00bfffc4 	movi	r2,-1
    9c00:	220f803a 	cmpltu	r7,r4,r8
    9c04:	4a4b883a 	add	r5,r9,r9
    9c08:	394f883a 	add	r7,r7,r5
    9c0c:	2095883a 	add	r10,r4,r2
    9c10:	3897883a 	add	r11,r7,r2
    9c14:	510d803a 	cmpltu	r6,r10,r4
    9c18:	6099883a 	add	r12,r12,r2
    9c1c:	32d7883a 	add	r11,r6,r11
    9c20:	00840034 	movhi	r2,4096
    9c24:	10bfffc4 	addi	r2,r2,-1
    9c28:	2011883a 	mov	r8,r4
    9c2c:	3813883a 	mov	r9,r7
    9c30:	a1000315 	stw	r4,12(r20)
    9c34:	a1c00415 	stw	r7,16(r20)
    9c38:	a3000215 	stw	r12,8(r20)
    9c3c:	12c00336 	bltu	r2,r11,9c4c <_fpadd_parts+0x1a8>
    9c40:	58bfed1e 	bne	r11,r2,9bf8 <_fpadd_parts+0x154>
    9c44:	00bfff84 	movi	r2,-2
    9c48:	12bfeb2e 	bgeu	r2,r10,9bf8 <_fpadd_parts+0x154>
    9c4c:	a2800417 	ldw	r10,16(r20)
    9c50:	008000c4 	movi	r2,3
    9c54:	00c80034 	movhi	r3,8192
    9c58:	18ffffc4 	addi	r3,r3,-1
    9c5c:	a2400317 	ldw	r9,12(r20)
    9c60:	a0800015 	stw	r2,0(r20)
    9c64:	1a802336 	bltu	r3,r10,9cf4 <_fpadd_parts+0x250>
    9c68:	a027883a 	mov	r19,r20
    9c6c:	9805883a 	mov	r2,r19
    9c70:	ddc00717 	ldw	r23,28(sp)
    9c74:	dd800617 	ldw	r22,24(sp)
    9c78:	dd400517 	ldw	r21,20(sp)
    9c7c:	dd000417 	ldw	r20,16(sp)
    9c80:	dcc00317 	ldw	r19,12(sp)
    9c84:	dc800217 	ldw	r18,8(sp)
    9c88:	dc400117 	ldw	r17,4(sp)
    9c8c:	dc000017 	ldw	r16,0(sp)
    9c90:	dec00804 	addi	sp,sp,32
    9c94:	f800283a 	ret
    9c98:	20fff41e 	bne	r4,r3,9c6c <_fpadd_parts+0x1c8>
    9c9c:	31000015 	stw	r4,0(r6)
    9ca0:	98800117 	ldw	r2,4(r19)
    9ca4:	30800115 	stw	r2,4(r6)
    9ca8:	98c00217 	ldw	r3,8(r19)
    9cac:	30c00215 	stw	r3,8(r6)
    9cb0:	98800317 	ldw	r2,12(r19)
    9cb4:	30800315 	stw	r2,12(r6)
    9cb8:	98c00417 	ldw	r3,16(r19)
    9cbc:	30c00415 	stw	r3,16(r6)
    9cc0:	98800117 	ldw	r2,4(r19)
    9cc4:	28c00117 	ldw	r3,4(r5)
    9cc8:	3027883a 	mov	r19,r6
    9ccc:	10c4703a 	and	r2,r2,r3
    9cd0:	30800115 	stw	r2,4(r6)
    9cd4:	003fe506 	br	9c6c <_fpadd_parts+0x1c8>
    9cd8:	1dc02616 	blt	r3,r23,9d74 <_fpadd_parts+0x2d0>
    9cdc:	0023883a 	mov	r17,zero
    9ce0:	182f883a 	mov	r23,r3
    9ce4:	0025883a 	mov	r18,zero
    9ce8:	003fa806 	br	9b8c <_fpadd_parts+0xe8>
    9cec:	a827883a 	mov	r19,r21
    9cf0:	003fde06 	br	9c6c <_fpadd_parts+0x1c8>
    9cf4:	01800044 	movi	r6,1
    9cf8:	500497fa 	slli	r2,r10,31
    9cfc:	4808d07a 	srli	r4,r9,1
    9d00:	518ad83a 	srl	r5,r10,r6
    9d04:	a2000217 	ldw	r8,8(r20)
    9d08:	1108b03a 	or	r4,r2,r4
    9d0c:	0007883a 	mov	r3,zero
    9d10:	4984703a 	and	r2,r9,r6
    9d14:	208cb03a 	or	r6,r4,r2
    9d18:	28ceb03a 	or	r7,r5,r3
    9d1c:	42000044 	addi	r8,r8,1
    9d20:	a027883a 	mov	r19,r20
    9d24:	a1c00415 	stw	r7,16(r20)
    9d28:	a2000215 	stw	r8,8(r20)
    9d2c:	a1800315 	stw	r6,12(r20)
    9d30:	003fce06 	br	9c6c <_fpadd_parts+0x1c8>
    9d34:	8bc5c83a 	sub	r2,r17,r15
    9d38:	8889803a 	cmpltu	r4,r17,r2
    9d3c:	9407c83a 	sub	r3,r18,r16
    9d40:	1909c83a 	sub	r4,r3,r4
    9d44:	100d883a 	mov	r6,r2
    9d48:	200f883a 	mov	r7,r4
    9d4c:	003f9906 	br	9bb4 <_fpadd_parts+0x110>
    9d50:	7c45883a 	add	r2,r15,r17
    9d54:	13c9803a 	cmpltu	r4,r2,r15
    9d58:	8487883a 	add	r3,r16,r18
    9d5c:	20c9883a 	add	r4,r4,r3
    9d60:	a1400115 	stw	r5,4(r20)
    9d64:	a5c00215 	stw	r23,8(r20)
    9d68:	a0800315 	stw	r2,12(r20)
    9d6c:	a1000415 	stw	r4,16(r20)
    9d70:	003fb606 	br	9c4c <_fpadd_parts+0x1a8>
    9d74:	001f883a 	mov	r15,zero
    9d78:	0021883a 	mov	r16,zero
    9d7c:	003f8306 	br	9b8c <_fpadd_parts+0xe8>
    9d80:	018dc83a 	sub	r6,zero,r6
    9d84:	003f6706 	br	9b24 <_fpadd_parts+0x80>
    9d88:	00bfff84 	movi	r2,-2
    9d8c:	117faf36 	bltu	r2,r5,9c4c <_fpadd_parts+0x1a8>
    9d90:	003f9806 	br	9bf4 <_fpadd_parts+0x150>
    9d94:	0005883a 	mov	r2,zero
    9d98:	1189c83a 	sub	r4,r2,r6
    9d9c:	1105803a 	cmpltu	r2,r2,r4
    9da0:	01cbc83a 	sub	r5,zero,r7
    9da4:	2885c83a 	sub	r2,r5,r2
    9da8:	01800044 	movi	r6,1
    9dac:	a1800115 	stw	r6,4(r20)
    9db0:	a5c00215 	stw	r23,8(r20)
    9db4:	a1000315 	stw	r4,12(r20)
    9db8:	a0800415 	stw	r2,16(r20)
    9dbc:	003f8206 	br	9bc8 <_fpadd_parts+0x124>
    9dc0:	203f7226 	beq	r4,zero,9b8c <_fpadd_parts+0xe8>
    9dc4:	35bff804 	addi	r22,r6,-32
    9dc8:	b9af883a 	add	r23,r23,r6
    9dcc:	b0003116 	blt	r22,zero,9e94 <_fpadd_parts+0x3f0>
    9dd0:	959ad83a 	srl	r13,r18,r22
    9dd4:	001d883a 	mov	r14,zero
    9dd8:	000f883a 	mov	r7,zero
    9ddc:	01000044 	movi	r4,1
    9de0:	0011883a 	mov	r8,zero
    9de4:	b0002516 	blt	r22,zero,9e7c <_fpadd_parts+0x3d8>
    9de8:	2594983a 	sll	r10,r4,r22
    9dec:	0013883a 	mov	r9,zero
    9df0:	00bfffc4 	movi	r2,-1
    9df4:	4889883a 	add	r4,r9,r2
    9df8:	508b883a 	add	r5,r10,r2
    9dfc:	224d803a 	cmpltu	r6,r4,r9
    9e00:	314b883a 	add	r5,r6,r5
    9e04:	8904703a 	and	r2,r17,r4
    9e08:	9146703a 	and	r3,r18,r5
    9e0c:	10c4b03a 	or	r2,r2,r3
    9e10:	10000226 	beq	r2,zero,9e1c <_fpadd_parts+0x378>
    9e14:	01c00044 	movi	r7,1
    9e18:	0011883a 	mov	r8,zero
    9e1c:	69e2b03a 	or	r17,r13,r7
    9e20:	7224b03a 	or	r18,r14,r8
    9e24:	003f5906 	br	9b8c <_fpadd_parts+0xe8>
    9e28:	8407883a 	add	r3,r16,r16
    9e2c:	008007c4 	movi	r2,31
    9e30:	1185c83a 	sub	r2,r2,r6
    9e34:	1886983a 	sll	r3,r3,r2
    9e38:	7996d83a 	srl	r11,r15,r6
    9e3c:	8198d83a 	srl	r12,r16,r6
    9e40:	1ad6b03a 	or	r11,r3,r11
    9e44:	003f3e06 	br	9b40 <_fpadd_parts+0x9c>
    9e48:	2006d07a 	srli	r3,r4,1
    9e4c:	008007c4 	movi	r2,31
    9e50:	1185c83a 	sub	r2,r2,r6
    9e54:	1890d83a 	srl	r8,r3,r2
    9e58:	218e983a 	sll	r7,r4,r6
    9e5c:	003f3e06 	br	9b58 <_fpadd_parts+0xb4>
    9e60:	113f821e 	bne	r2,r4,9c6c <_fpadd_parts+0x1c8>
    9e64:	28c00117 	ldw	r3,4(r5)
    9e68:	98800117 	ldw	r2,4(r19)
    9e6c:	10ff7f26 	beq	r2,r3,9c6c <_fpadd_parts+0x1c8>
    9e70:	04c00074 	movhi	r19,1
    9e74:	9cc93504 	addi	r19,r19,9428
    9e78:	003f7c06 	br	9c6c <_fpadd_parts+0x1c8>
    9e7c:	2006d07a 	srli	r3,r4,1
    9e80:	008007c4 	movi	r2,31
    9e84:	1185c83a 	sub	r2,r2,r6
    9e88:	1894d83a 	srl	r10,r3,r2
    9e8c:	2192983a 	sll	r9,r4,r6
    9e90:	003fd706 	br	9df0 <_fpadd_parts+0x34c>
    9e94:	9487883a 	add	r3,r18,r18
    9e98:	008007c4 	movi	r2,31
    9e9c:	1185c83a 	sub	r2,r2,r6
    9ea0:	1886983a 	sll	r3,r3,r2
    9ea4:	899ad83a 	srl	r13,r17,r6
    9ea8:	919cd83a 	srl	r14,r18,r6
    9eac:	1b5ab03a 	or	r13,r3,r13
    9eb0:	003fc906 	br	9dd8 <_fpadd_parts+0x334>

00009eb4 <__subdf3>:
    9eb4:	deffea04 	addi	sp,sp,-88
    9eb8:	dcc01415 	stw	r19,80(sp)
    9ebc:	dcc00404 	addi	r19,sp,16
    9ec0:	2011883a 	mov	r8,r4
    9ec4:	2813883a 	mov	r9,r5
    9ec8:	dc401315 	stw	r17,76(sp)
    9ecc:	d809883a 	mov	r4,sp
    9ed0:	980b883a 	mov	r5,r19
    9ed4:	dc400904 	addi	r17,sp,36
    9ed8:	dfc01515 	stw	ra,84(sp)
    9edc:	da400115 	stw	r9,4(sp)
    9ee0:	d9c00315 	stw	r7,12(sp)
    9ee4:	da000015 	stw	r8,0(sp)
    9ee8:	d9800215 	stw	r6,8(sp)
    9eec:	000b1480 	call	b148 <__unpack_d>
    9ef0:	d9000204 	addi	r4,sp,8
    9ef4:	880b883a 	mov	r5,r17
    9ef8:	000b1480 	call	b148 <__unpack_d>
    9efc:	d8800a17 	ldw	r2,40(sp)
    9f00:	880b883a 	mov	r5,r17
    9f04:	9809883a 	mov	r4,r19
    9f08:	d9800e04 	addi	r6,sp,56
    9f0c:	1080005c 	xori	r2,r2,1
    9f10:	d8800a15 	stw	r2,40(sp)
    9f14:	0009aa40 	call	9aa4 <_fpadd_parts>
    9f18:	1009883a 	mov	r4,r2
    9f1c:	000ae340 	call	ae34 <__pack_d>
    9f20:	dfc01517 	ldw	ra,84(sp)
    9f24:	dcc01417 	ldw	r19,80(sp)
    9f28:	dc401317 	ldw	r17,76(sp)
    9f2c:	dec01604 	addi	sp,sp,88
    9f30:	f800283a 	ret

00009f34 <__adddf3>:
    9f34:	deffea04 	addi	sp,sp,-88
    9f38:	dcc01415 	stw	r19,80(sp)
    9f3c:	dcc00404 	addi	r19,sp,16
    9f40:	2011883a 	mov	r8,r4
    9f44:	2813883a 	mov	r9,r5
    9f48:	dc401315 	stw	r17,76(sp)
    9f4c:	d809883a 	mov	r4,sp
    9f50:	980b883a 	mov	r5,r19
    9f54:	dc400904 	addi	r17,sp,36
    9f58:	dfc01515 	stw	ra,84(sp)
    9f5c:	da400115 	stw	r9,4(sp)
    9f60:	d9c00315 	stw	r7,12(sp)
    9f64:	da000015 	stw	r8,0(sp)
    9f68:	d9800215 	stw	r6,8(sp)
    9f6c:	000b1480 	call	b148 <__unpack_d>
    9f70:	d9000204 	addi	r4,sp,8
    9f74:	880b883a 	mov	r5,r17
    9f78:	000b1480 	call	b148 <__unpack_d>
    9f7c:	d9800e04 	addi	r6,sp,56
    9f80:	9809883a 	mov	r4,r19
    9f84:	880b883a 	mov	r5,r17
    9f88:	0009aa40 	call	9aa4 <_fpadd_parts>
    9f8c:	1009883a 	mov	r4,r2
    9f90:	000ae340 	call	ae34 <__pack_d>
    9f94:	dfc01517 	ldw	ra,84(sp)
    9f98:	dcc01417 	ldw	r19,80(sp)
    9f9c:	dc401317 	ldw	r17,76(sp)
    9fa0:	dec01604 	addi	sp,sp,88
    9fa4:	f800283a 	ret

00009fa8 <__muldf3>:
    9fa8:	deffe004 	addi	sp,sp,-128
    9fac:	dc401815 	stw	r17,96(sp)
    9fb0:	dc400404 	addi	r17,sp,16
    9fb4:	2011883a 	mov	r8,r4
    9fb8:	2813883a 	mov	r9,r5
    9fbc:	dc001715 	stw	r16,92(sp)
    9fc0:	d809883a 	mov	r4,sp
    9fc4:	880b883a 	mov	r5,r17
    9fc8:	dc000904 	addi	r16,sp,36
    9fcc:	dfc01f15 	stw	ra,124(sp)
    9fd0:	da400115 	stw	r9,4(sp)
    9fd4:	d9c00315 	stw	r7,12(sp)
    9fd8:	da000015 	stw	r8,0(sp)
    9fdc:	d9800215 	stw	r6,8(sp)
    9fe0:	ddc01e15 	stw	r23,120(sp)
    9fe4:	dd801d15 	stw	r22,116(sp)
    9fe8:	dd401c15 	stw	r21,112(sp)
    9fec:	dd001b15 	stw	r20,108(sp)
    9ff0:	dcc01a15 	stw	r19,104(sp)
    9ff4:	dc801915 	stw	r18,100(sp)
    9ff8:	000b1480 	call	b148 <__unpack_d>
    9ffc:	d9000204 	addi	r4,sp,8
    a000:	800b883a 	mov	r5,r16
    a004:	000b1480 	call	b148 <__unpack_d>
    a008:	d9000417 	ldw	r4,16(sp)
    a00c:	00800044 	movi	r2,1
    a010:	1100102e 	bgeu	r2,r4,a054 <__muldf3+0xac>
    a014:	d8c00917 	ldw	r3,36(sp)
    a018:	10c0062e 	bgeu	r2,r3,a034 <__muldf3+0x8c>
    a01c:	00800104 	movi	r2,4
    a020:	20800a26 	beq	r4,r2,a04c <__muldf3+0xa4>
    a024:	1880cc26 	beq	r3,r2,a358 <__muldf3+0x3b0>
    a028:	00800084 	movi	r2,2
    a02c:	20800926 	beq	r4,r2,a054 <__muldf3+0xac>
    a030:	1880191e 	bne	r3,r2,a098 <__muldf3+0xf0>
    a034:	d8c00a17 	ldw	r3,40(sp)
    a038:	d8800517 	ldw	r2,20(sp)
    a03c:	8009883a 	mov	r4,r16
    a040:	10c4c03a 	cmpne	r2,r2,r3
    a044:	d8800a15 	stw	r2,40(sp)
    a048:	00000706 	br	a068 <__muldf3+0xc0>
    a04c:	00800084 	movi	r2,2
    a050:	1880c326 	beq	r3,r2,a360 <__muldf3+0x3b8>
    a054:	d8800517 	ldw	r2,20(sp)
    a058:	d8c00a17 	ldw	r3,40(sp)
    a05c:	8809883a 	mov	r4,r17
    a060:	10c4c03a 	cmpne	r2,r2,r3
    a064:	d8800515 	stw	r2,20(sp)
    a068:	000ae340 	call	ae34 <__pack_d>
    a06c:	dfc01f17 	ldw	ra,124(sp)
    a070:	ddc01e17 	ldw	r23,120(sp)
    a074:	dd801d17 	ldw	r22,116(sp)
    a078:	dd401c17 	ldw	r21,112(sp)
    a07c:	dd001b17 	ldw	r20,108(sp)
    a080:	dcc01a17 	ldw	r19,104(sp)
    a084:	dc801917 	ldw	r18,100(sp)
    a088:	dc401817 	ldw	r17,96(sp)
    a08c:	dc001717 	ldw	r16,92(sp)
    a090:	dec02004 	addi	sp,sp,128
    a094:	f800283a 	ret
    a098:	dd800717 	ldw	r22,28(sp)
    a09c:	dc800c17 	ldw	r18,48(sp)
    a0a0:	002b883a 	mov	r21,zero
    a0a4:	0023883a 	mov	r17,zero
    a0a8:	a80b883a 	mov	r5,r21
    a0ac:	b00d883a 	mov	r6,r22
    a0b0:	880f883a 	mov	r7,r17
    a0b4:	ddc00817 	ldw	r23,32(sp)
    a0b8:	dcc00d17 	ldw	r19,52(sp)
    a0bc:	9009883a 	mov	r4,r18
    a0c0:	000ad1c0 	call	ad1c <__muldi3>
    a0c4:	001b883a 	mov	r13,zero
    a0c8:	680f883a 	mov	r7,r13
    a0cc:	b009883a 	mov	r4,r22
    a0d0:	000b883a 	mov	r5,zero
    a0d4:	980d883a 	mov	r6,r19
    a0d8:	b82d883a 	mov	r22,r23
    a0dc:	002f883a 	mov	r23,zero
    a0e0:	db401615 	stw	r13,88(sp)
    a0e4:	d8801315 	stw	r2,76(sp)
    a0e8:	d8c01415 	stw	r3,80(sp)
    a0ec:	dcc01515 	stw	r19,84(sp)
    a0f0:	000ad1c0 	call	ad1c <__muldi3>
    a0f4:	b00d883a 	mov	r6,r22
    a0f8:	000b883a 	mov	r5,zero
    a0fc:	9009883a 	mov	r4,r18
    a100:	b80f883a 	mov	r7,r23
    a104:	1021883a 	mov	r16,r2
    a108:	1823883a 	mov	r17,r3
    a10c:	000ad1c0 	call	ad1c <__muldi3>
    a110:	8085883a 	add	r2,r16,r2
    a114:	140d803a 	cmpltu	r6,r2,r16
    a118:	88c7883a 	add	r3,r17,r3
    a11c:	30cd883a 	add	r6,r6,r3
    a120:	1029883a 	mov	r20,r2
    a124:	302b883a 	mov	r21,r6
    a128:	da801317 	ldw	r10,76(sp)
    a12c:	dac01417 	ldw	r11,80(sp)
    a130:	db001517 	ldw	r12,84(sp)
    a134:	db401617 	ldw	r13,88(sp)
    a138:	3440612e 	bgeu	r6,r17,a2c0 <__muldf3+0x318>
    a13c:	0009883a 	mov	r4,zero
    a140:	5105883a 	add	r2,r10,r4
    a144:	128d803a 	cmpltu	r6,r2,r10
    a148:	5d07883a 	add	r3,r11,r20
    a14c:	30cd883a 	add	r6,r6,r3
    a150:	0021883a 	mov	r16,zero
    a154:	04400044 	movi	r17,1
    a158:	1025883a 	mov	r18,r2
    a15c:	3027883a 	mov	r19,r6
    a160:	32c06236 	bltu	r6,r11,a2ec <__muldf3+0x344>
    a164:	59807a26 	beq	r11,r6,a350 <__muldf3+0x3a8>
    a168:	680b883a 	mov	r5,r13
    a16c:	b80f883a 	mov	r7,r23
    a170:	6009883a 	mov	r4,r12
    a174:	b00d883a 	mov	r6,r22
    a178:	000ad1c0 	call	ad1c <__muldi3>
    a17c:	1009883a 	mov	r4,r2
    a180:	000f883a 	mov	r7,zero
    a184:	1545883a 	add	r2,r2,r21
    a188:	1111803a 	cmpltu	r8,r2,r4
    a18c:	19c7883a 	add	r3,r3,r7
    a190:	40c7883a 	add	r3,r8,r3
    a194:	88cb883a 	add	r5,r17,r3
    a198:	d8c00617 	ldw	r3,24(sp)
    a19c:	8089883a 	add	r4,r16,r2
    a1a0:	d8800b17 	ldw	r2,44(sp)
    a1a4:	18c00104 	addi	r3,r3,4
    a1a8:	240d803a 	cmpltu	r6,r4,r16
    a1ac:	10c7883a 	add	r3,r2,r3
    a1b0:	2013883a 	mov	r9,r4
    a1b4:	d8800a17 	ldw	r2,40(sp)
    a1b8:	d9000517 	ldw	r4,20(sp)
    a1bc:	314d883a 	add	r6,r6,r5
    a1c0:	3015883a 	mov	r10,r6
    a1c4:	2088c03a 	cmpne	r4,r4,r2
    a1c8:	00880034 	movhi	r2,8192
    a1cc:	10bfffc4 	addi	r2,r2,-1
    a1d0:	d9000f15 	stw	r4,60(sp)
    a1d4:	d8c01015 	stw	r3,64(sp)
    a1d8:	1180162e 	bgeu	r2,r6,a234 <__muldf3+0x28c>
    a1dc:	1811883a 	mov	r8,r3
    a1e0:	101f883a 	mov	r15,r2
    a1e4:	980497fa 	slli	r2,r19,31
    a1e8:	9016d07a 	srli	r11,r18,1
    a1ec:	500697fa 	slli	r3,r10,31
    a1f0:	480cd07a 	srli	r6,r9,1
    a1f4:	500ed07a 	srli	r7,r10,1
    a1f8:	12d6b03a 	or	r11,r2,r11
    a1fc:	00800044 	movi	r2,1
    a200:	198cb03a 	or	r6,r3,r6
    a204:	4888703a 	and	r4,r9,r2
    a208:	9818d07a 	srli	r12,r19,1
    a20c:	001b883a 	mov	r13,zero
    a210:	03a00034 	movhi	r14,32768
    a214:	3013883a 	mov	r9,r6
    a218:	3815883a 	mov	r10,r7
    a21c:	4091883a 	add	r8,r8,r2
    a220:	20000226 	beq	r4,zero,a22c <__muldf3+0x284>
    a224:	5b64b03a 	or	r18,r11,r13
    a228:	63a6b03a 	or	r19,r12,r14
    a22c:	7abfed36 	bltu	r15,r10,a1e4 <__muldf3+0x23c>
    a230:	da001015 	stw	r8,64(sp)
    a234:	00840034 	movhi	r2,4096
    a238:	10bfffc4 	addi	r2,r2,-1
    a23c:	12801436 	bltu	r2,r10,a290 <__muldf3+0x2e8>
    a240:	da001017 	ldw	r8,64(sp)
    a244:	101f883a 	mov	r15,r2
    a248:	4a45883a 	add	r2,r9,r9
    a24c:	124d803a 	cmpltu	r6,r2,r9
    a250:	5287883a 	add	r3,r10,r10
    a254:	9497883a 	add	r11,r18,r18
    a258:	5c8f803a 	cmpltu	r7,r11,r18
    a25c:	9cd9883a 	add	r12,r19,r19
    a260:	01000044 	movi	r4,1
    a264:	30cd883a 	add	r6,r6,r3
    a268:	3b0f883a 	add	r7,r7,r12
    a26c:	423fffc4 	addi	r8,r8,-1
    a270:	1013883a 	mov	r9,r2
    a274:	3015883a 	mov	r10,r6
    a278:	111ab03a 	or	r13,r2,r4
    a27c:	98003016 	blt	r19,zero,a340 <__muldf3+0x398>
    a280:	5825883a 	mov	r18,r11
    a284:	3827883a 	mov	r19,r7
    a288:	7abfef2e 	bgeu	r15,r10,a248 <__muldf3+0x2a0>
    a28c:	da001015 	stw	r8,64(sp)
    a290:	00803fc4 	movi	r2,255
    a294:	488e703a 	and	r7,r9,r2
    a298:	00802004 	movi	r2,128
    a29c:	0007883a 	mov	r3,zero
    a2a0:	0011883a 	mov	r8,zero
    a2a4:	38801826 	beq	r7,r2,a308 <__muldf3+0x360>
    a2a8:	008000c4 	movi	r2,3
    a2ac:	d9000e04 	addi	r4,sp,56
    a2b0:	da801215 	stw	r10,72(sp)
    a2b4:	d8800e15 	stw	r2,56(sp)
    a2b8:	da401115 	stw	r9,68(sp)
    a2bc:	003f6a06 	br	a068 <__muldf3+0xc0>
    a2c0:	89802126 	beq	r17,r6,a348 <__muldf3+0x3a0>
    a2c4:	0009883a 	mov	r4,zero
    a2c8:	5105883a 	add	r2,r10,r4
    a2cc:	128d803a 	cmpltu	r6,r2,r10
    a2d0:	5d07883a 	add	r3,r11,r20
    a2d4:	30cd883a 	add	r6,r6,r3
    a2d8:	0021883a 	mov	r16,zero
    a2dc:	0023883a 	mov	r17,zero
    a2e0:	1025883a 	mov	r18,r2
    a2e4:	3027883a 	mov	r19,r6
    a2e8:	32ff9e2e 	bgeu	r6,r11,a164 <__muldf3+0x1bc>
    a2ec:	00800044 	movi	r2,1
    a2f0:	8089883a 	add	r4,r16,r2
    a2f4:	240d803a 	cmpltu	r6,r4,r16
    a2f8:	344d883a 	add	r6,r6,r17
    a2fc:	2021883a 	mov	r16,r4
    a300:	3023883a 	mov	r17,r6
    a304:	003f9806 	br	a168 <__muldf3+0x1c0>
    a308:	403fe71e 	bne	r8,zero,a2a8 <__muldf3+0x300>
    a30c:	01004004 	movi	r4,256
    a310:	4904703a 	and	r2,r9,r4
    a314:	10c4b03a 	or	r2,r2,r3
    a318:	103fe31e 	bne	r2,zero,a2a8 <__muldf3+0x300>
    a31c:	94c4b03a 	or	r2,r18,r19
    a320:	103fe126 	beq	r2,zero,a2a8 <__muldf3+0x300>
    a324:	49c5883a 	add	r2,r9,r7
    a328:	1251803a 	cmpltu	r8,r2,r9
    a32c:	4291883a 	add	r8,r8,r10
    a330:	013fc004 	movi	r4,-256
    a334:	1112703a 	and	r9,r2,r4
    a338:	4015883a 	mov	r10,r8
    a33c:	003fda06 	br	a2a8 <__muldf3+0x300>
    a340:	6813883a 	mov	r9,r13
    a344:	003fce06 	br	a280 <__muldf3+0x2d8>
    a348:	143f7c36 	bltu	r2,r16,a13c <__muldf3+0x194>
    a34c:	003fdd06 	br	a2c4 <__muldf3+0x31c>
    a350:	12bf852e 	bgeu	r2,r10,a168 <__muldf3+0x1c0>
    a354:	003fe506 	br	a2ec <__muldf3+0x344>
    a358:	00800084 	movi	r2,2
    a35c:	20bf351e 	bne	r4,r2,a034 <__muldf3+0x8c>
    a360:	01000074 	movhi	r4,1
    a364:	21093504 	addi	r4,r4,9428
    a368:	003f3f06 	br	a068 <__muldf3+0xc0>

0000a36c <__divdf3>:
    a36c:	deffed04 	addi	sp,sp,-76
    a370:	dcc01115 	stw	r19,68(sp)
    a374:	dcc00404 	addi	r19,sp,16
    a378:	2011883a 	mov	r8,r4
    a37c:	2813883a 	mov	r9,r5
    a380:	dc000e15 	stw	r16,56(sp)
    a384:	d809883a 	mov	r4,sp
    a388:	980b883a 	mov	r5,r19
    a38c:	dc000904 	addi	r16,sp,36
    a390:	dfc01215 	stw	ra,72(sp)
    a394:	da400115 	stw	r9,4(sp)
    a398:	d9c00315 	stw	r7,12(sp)
    a39c:	da000015 	stw	r8,0(sp)
    a3a0:	d9800215 	stw	r6,8(sp)
    a3a4:	dc801015 	stw	r18,64(sp)
    a3a8:	dc400f15 	stw	r17,60(sp)
    a3ac:	000b1480 	call	b148 <__unpack_d>
    a3b0:	d9000204 	addi	r4,sp,8
    a3b4:	800b883a 	mov	r5,r16
    a3b8:	000b1480 	call	b148 <__unpack_d>
    a3bc:	d9000417 	ldw	r4,16(sp)
    a3c0:	00800044 	movi	r2,1
    a3c4:	11000b2e 	bgeu	r2,r4,a3f4 <__divdf3+0x88>
    a3c8:	d9400917 	ldw	r5,36(sp)
    a3cc:	1140762e 	bgeu	r2,r5,a5a8 <__divdf3+0x23c>
    a3d0:	d8800517 	ldw	r2,20(sp)
    a3d4:	d8c00a17 	ldw	r3,40(sp)
    a3d8:	01800104 	movi	r6,4
    a3dc:	10c4f03a 	xor	r2,r2,r3
    a3e0:	d8800515 	stw	r2,20(sp)
    a3e4:	21800226 	beq	r4,r6,a3f0 <__divdf3+0x84>
    a3e8:	00800084 	movi	r2,2
    a3ec:	2080141e 	bne	r4,r2,a440 <__divdf3+0xd4>
    a3f0:	29000926 	beq	r5,r4,a418 <__divdf3+0xac>
    a3f4:	9809883a 	mov	r4,r19
    a3f8:	000ae340 	call	ae34 <__pack_d>
    a3fc:	dfc01217 	ldw	ra,72(sp)
    a400:	dcc01117 	ldw	r19,68(sp)
    a404:	dc801017 	ldw	r18,64(sp)
    a408:	dc400f17 	ldw	r17,60(sp)
    a40c:	dc000e17 	ldw	r16,56(sp)
    a410:	dec01304 	addi	sp,sp,76
    a414:	f800283a 	ret
    a418:	01000074 	movhi	r4,1
    a41c:	21093504 	addi	r4,r4,9428
    a420:	000ae340 	call	ae34 <__pack_d>
    a424:	dfc01217 	ldw	ra,72(sp)
    a428:	dcc01117 	ldw	r19,68(sp)
    a42c:	dc801017 	ldw	r18,64(sp)
    a430:	dc400f17 	ldw	r17,60(sp)
    a434:	dc000e17 	ldw	r16,56(sp)
    a438:	dec01304 	addi	sp,sp,76
    a43c:	f800283a 	ret
    a440:	29805b26 	beq	r5,r6,a5b0 <__divdf3+0x244>
    a444:	28802d26 	beq	r5,r2,a4fc <__divdf3+0x190>
    a448:	d8c00617 	ldw	r3,24(sp)
    a44c:	d8800b17 	ldw	r2,44(sp)
    a450:	d9c00817 	ldw	r7,32(sp)
    a454:	dc400d17 	ldw	r17,52(sp)
    a458:	188bc83a 	sub	r5,r3,r2
    a45c:	d9800717 	ldw	r6,28(sp)
    a460:	dc000c17 	ldw	r16,48(sp)
    a464:	d9400615 	stw	r5,24(sp)
    a468:	3c403836 	bltu	r7,r17,a54c <__divdf3+0x1e0>
    a46c:	89c03626 	beq	r17,r7,a548 <__divdf3+0x1dc>
    a470:	0015883a 	mov	r10,zero
    a474:	001d883a 	mov	r14,zero
    a478:	02c40034 	movhi	r11,4096
    a47c:	001f883a 	mov	r15,zero
    a480:	003f883a 	mov	ra,zero
    a484:	04800f44 	movi	r18,61
    a488:	00000f06 	br	a4c8 <__divdf3+0x15c>
    a48c:	601d883a 	mov	r14,r12
    a490:	681f883a 	mov	r15,r13
    a494:	400d883a 	mov	r6,r8
    a498:	100f883a 	mov	r7,r2
    a49c:	3191883a 	add	r8,r6,r6
    a4a0:	5808d07a 	srli	r4,r11,1
    a4a4:	4185803a 	cmpltu	r2,r8,r6
    a4a8:	39d3883a 	add	r9,r7,r7
    a4ac:	28c6b03a 	or	r3,r5,r3
    a4b0:	1245883a 	add	r2,r2,r9
    a4b4:	1815883a 	mov	r10,r3
    a4b8:	2017883a 	mov	r11,r4
    a4bc:	400d883a 	mov	r6,r8
    a4c0:	100f883a 	mov	r7,r2
    a4c4:	fc801726 	beq	ra,r18,a524 <__divdf3+0x1b8>
    a4c8:	580a97fa 	slli	r5,r11,31
    a4cc:	5006d07a 	srli	r3,r10,1
    a4d0:	ffc00044 	addi	ra,ra,1
    a4d4:	3c7ff136 	bltu	r7,r17,a49c <__divdf3+0x130>
    a4d8:	3411c83a 	sub	r8,r6,r16
    a4dc:	3205803a 	cmpltu	r2,r6,r8
    a4e0:	3c53c83a 	sub	r9,r7,r17
    a4e4:	7298b03a 	or	r12,r14,r10
    a4e8:	7adab03a 	or	r13,r15,r11
    a4ec:	4885c83a 	sub	r2,r9,r2
    a4f0:	89ffe61e 	bne	r17,r7,a48c <__divdf3+0x120>
    a4f4:	343fe936 	bltu	r6,r16,a49c <__divdf3+0x130>
    a4f8:	003fe406 	br	a48c <__divdf3+0x120>
    a4fc:	9809883a 	mov	r4,r19
    a500:	d9800415 	stw	r6,16(sp)
    a504:	000ae340 	call	ae34 <__pack_d>
    a508:	dfc01217 	ldw	ra,72(sp)
    a50c:	dcc01117 	ldw	r19,68(sp)
    a510:	dc801017 	ldw	r18,64(sp)
    a514:	dc400f17 	ldw	r17,60(sp)
    a518:	dc000e17 	ldw	r16,56(sp)
    a51c:	dec01304 	addi	sp,sp,76
    a520:	f800283a 	ret
    a524:	00803fc4 	movi	r2,255
    a528:	7090703a 	and	r8,r14,r2
    a52c:	00802004 	movi	r2,128
    a530:	0007883a 	mov	r3,zero
    a534:	0013883a 	mov	r9,zero
    a538:	40800d26 	beq	r8,r2,a570 <__divdf3+0x204>
    a53c:	dbc00815 	stw	r15,32(sp)
    a540:	db800715 	stw	r14,28(sp)
    a544:	003fab06 	br	a3f4 <__divdf3+0x88>
    a548:	343fc92e 	bgeu	r6,r16,a470 <__divdf3+0x104>
    a54c:	3185883a 	add	r2,r6,r6
    a550:	1189803a 	cmpltu	r4,r2,r6
    a554:	39c7883a 	add	r3,r7,r7
    a558:	20c9883a 	add	r4,r4,r3
    a55c:	297fffc4 	addi	r5,r5,-1
    a560:	100d883a 	mov	r6,r2
    a564:	200f883a 	mov	r7,r4
    a568:	d9400615 	stw	r5,24(sp)
    a56c:	003fc006 	br	a470 <__divdf3+0x104>
    a570:	483ff21e 	bne	r9,zero,a53c <__divdf3+0x1d0>
    a574:	01004004 	movi	r4,256
    a578:	7104703a 	and	r2,r14,r4
    a57c:	10c4b03a 	or	r2,r2,r3
    a580:	103fee1e 	bne	r2,zero,a53c <__divdf3+0x1d0>
    a584:	31c4b03a 	or	r2,r6,r7
    a588:	103fec26 	beq	r2,zero,a53c <__divdf3+0x1d0>
    a58c:	7205883a 	add	r2,r14,r8
    a590:	1391803a 	cmpltu	r8,r2,r14
    a594:	43d1883a 	add	r8,r8,r15
    a598:	013fc004 	movi	r4,-256
    a59c:	111c703a 	and	r14,r2,r4
    a5a0:	401f883a 	mov	r15,r8
    a5a4:	003fe506 	br	a53c <__divdf3+0x1d0>
    a5a8:	8009883a 	mov	r4,r16
    a5ac:	003f9206 	br	a3f8 <__divdf3+0x8c>
    a5b0:	9809883a 	mov	r4,r19
    a5b4:	d8000715 	stw	zero,28(sp)
    a5b8:	d8000815 	stw	zero,32(sp)
    a5bc:	d8000615 	stw	zero,24(sp)
    a5c0:	003f8d06 	br	a3f8 <__divdf3+0x8c>

0000a5c4 <__eqdf2>:
    a5c4:	deffef04 	addi	sp,sp,-68
    a5c8:	dc400f15 	stw	r17,60(sp)
    a5cc:	dc400404 	addi	r17,sp,16
    a5d0:	2005883a 	mov	r2,r4
    a5d4:	2807883a 	mov	r3,r5
    a5d8:	dc000e15 	stw	r16,56(sp)
    a5dc:	d809883a 	mov	r4,sp
    a5e0:	880b883a 	mov	r5,r17
    a5e4:	dc000904 	addi	r16,sp,36
    a5e8:	d8c00115 	stw	r3,4(sp)
    a5ec:	d8800015 	stw	r2,0(sp)
    a5f0:	d9800215 	stw	r6,8(sp)
    a5f4:	dfc01015 	stw	ra,64(sp)
    a5f8:	d9c00315 	stw	r7,12(sp)
    a5fc:	000b1480 	call	b148 <__unpack_d>
    a600:	d9000204 	addi	r4,sp,8
    a604:	800b883a 	mov	r5,r16
    a608:	000b1480 	call	b148 <__unpack_d>
    a60c:	d8800417 	ldw	r2,16(sp)
    a610:	00c00044 	movi	r3,1
    a614:	180d883a 	mov	r6,r3
    a618:	1880062e 	bgeu	r3,r2,a634 <__eqdf2+0x70>
    a61c:	d8800917 	ldw	r2,36(sp)
    a620:	8809883a 	mov	r4,r17
    a624:	800b883a 	mov	r5,r16
    a628:	1880022e 	bgeu	r3,r2,a634 <__eqdf2+0x70>
    a62c:	000b2800 	call	b280 <__fpcmp_parts_d>
    a630:	100d883a 	mov	r6,r2
    a634:	3005883a 	mov	r2,r6
    a638:	dfc01017 	ldw	ra,64(sp)
    a63c:	dc400f17 	ldw	r17,60(sp)
    a640:	dc000e17 	ldw	r16,56(sp)
    a644:	dec01104 	addi	sp,sp,68
    a648:	f800283a 	ret

0000a64c <__nedf2>:
    a64c:	deffef04 	addi	sp,sp,-68
    a650:	dc400f15 	stw	r17,60(sp)
    a654:	dc400404 	addi	r17,sp,16
    a658:	2005883a 	mov	r2,r4
    a65c:	2807883a 	mov	r3,r5
    a660:	dc000e15 	stw	r16,56(sp)
    a664:	d809883a 	mov	r4,sp
    a668:	880b883a 	mov	r5,r17
    a66c:	dc000904 	addi	r16,sp,36
    a670:	d8c00115 	stw	r3,4(sp)
    a674:	d8800015 	stw	r2,0(sp)
    a678:	d9800215 	stw	r6,8(sp)
    a67c:	dfc01015 	stw	ra,64(sp)
    a680:	d9c00315 	stw	r7,12(sp)
    a684:	000b1480 	call	b148 <__unpack_d>
    a688:	d9000204 	addi	r4,sp,8
    a68c:	800b883a 	mov	r5,r16
    a690:	000b1480 	call	b148 <__unpack_d>
    a694:	d8800417 	ldw	r2,16(sp)
    a698:	00c00044 	movi	r3,1
    a69c:	180d883a 	mov	r6,r3
    a6a0:	1880062e 	bgeu	r3,r2,a6bc <__nedf2+0x70>
    a6a4:	d8800917 	ldw	r2,36(sp)
    a6a8:	8809883a 	mov	r4,r17
    a6ac:	800b883a 	mov	r5,r16
    a6b0:	1880022e 	bgeu	r3,r2,a6bc <__nedf2+0x70>
    a6b4:	000b2800 	call	b280 <__fpcmp_parts_d>
    a6b8:	100d883a 	mov	r6,r2
    a6bc:	3005883a 	mov	r2,r6
    a6c0:	dfc01017 	ldw	ra,64(sp)
    a6c4:	dc400f17 	ldw	r17,60(sp)
    a6c8:	dc000e17 	ldw	r16,56(sp)
    a6cc:	dec01104 	addi	sp,sp,68
    a6d0:	f800283a 	ret

0000a6d4 <__gtdf2>:
    a6d4:	deffef04 	addi	sp,sp,-68
    a6d8:	dc400f15 	stw	r17,60(sp)
    a6dc:	dc400404 	addi	r17,sp,16
    a6e0:	2005883a 	mov	r2,r4
    a6e4:	2807883a 	mov	r3,r5
    a6e8:	dc000e15 	stw	r16,56(sp)
    a6ec:	d809883a 	mov	r4,sp
    a6f0:	880b883a 	mov	r5,r17
    a6f4:	dc000904 	addi	r16,sp,36
    a6f8:	d8c00115 	stw	r3,4(sp)
    a6fc:	d8800015 	stw	r2,0(sp)
    a700:	d9800215 	stw	r6,8(sp)
    a704:	dfc01015 	stw	ra,64(sp)
    a708:	d9c00315 	stw	r7,12(sp)
    a70c:	000b1480 	call	b148 <__unpack_d>
    a710:	d9000204 	addi	r4,sp,8
    a714:	800b883a 	mov	r5,r16
    a718:	000b1480 	call	b148 <__unpack_d>
    a71c:	d8800417 	ldw	r2,16(sp)
    a720:	00c00044 	movi	r3,1
    a724:	01bfffc4 	movi	r6,-1
    a728:	1880062e 	bgeu	r3,r2,a744 <__gtdf2+0x70>
    a72c:	d8800917 	ldw	r2,36(sp)
    a730:	8809883a 	mov	r4,r17
    a734:	800b883a 	mov	r5,r16
    a738:	1880022e 	bgeu	r3,r2,a744 <__gtdf2+0x70>
    a73c:	000b2800 	call	b280 <__fpcmp_parts_d>
    a740:	100d883a 	mov	r6,r2
    a744:	3005883a 	mov	r2,r6
    a748:	dfc01017 	ldw	ra,64(sp)
    a74c:	dc400f17 	ldw	r17,60(sp)
    a750:	dc000e17 	ldw	r16,56(sp)
    a754:	dec01104 	addi	sp,sp,68
    a758:	f800283a 	ret

0000a75c <__gedf2>:
    a75c:	deffef04 	addi	sp,sp,-68
    a760:	dc400f15 	stw	r17,60(sp)
    a764:	dc400404 	addi	r17,sp,16
    a768:	2005883a 	mov	r2,r4
    a76c:	2807883a 	mov	r3,r5
    a770:	dc000e15 	stw	r16,56(sp)
    a774:	d809883a 	mov	r4,sp
    a778:	880b883a 	mov	r5,r17
    a77c:	dc000904 	addi	r16,sp,36
    a780:	d8c00115 	stw	r3,4(sp)
    a784:	d8800015 	stw	r2,0(sp)
    a788:	d9800215 	stw	r6,8(sp)
    a78c:	dfc01015 	stw	ra,64(sp)
    a790:	d9c00315 	stw	r7,12(sp)
    a794:	000b1480 	call	b148 <__unpack_d>
    a798:	d9000204 	addi	r4,sp,8
    a79c:	800b883a 	mov	r5,r16
    a7a0:	000b1480 	call	b148 <__unpack_d>
    a7a4:	d8800417 	ldw	r2,16(sp)
    a7a8:	00c00044 	movi	r3,1
    a7ac:	01bfffc4 	movi	r6,-1
    a7b0:	1880062e 	bgeu	r3,r2,a7cc <__gedf2+0x70>
    a7b4:	d8800917 	ldw	r2,36(sp)
    a7b8:	8809883a 	mov	r4,r17
    a7bc:	800b883a 	mov	r5,r16
    a7c0:	1880022e 	bgeu	r3,r2,a7cc <__gedf2+0x70>
    a7c4:	000b2800 	call	b280 <__fpcmp_parts_d>
    a7c8:	100d883a 	mov	r6,r2
    a7cc:	3005883a 	mov	r2,r6
    a7d0:	dfc01017 	ldw	ra,64(sp)
    a7d4:	dc400f17 	ldw	r17,60(sp)
    a7d8:	dc000e17 	ldw	r16,56(sp)
    a7dc:	dec01104 	addi	sp,sp,68
    a7e0:	f800283a 	ret

0000a7e4 <__ltdf2>:
    a7e4:	deffef04 	addi	sp,sp,-68
    a7e8:	dc400f15 	stw	r17,60(sp)
    a7ec:	dc400404 	addi	r17,sp,16
    a7f0:	2005883a 	mov	r2,r4
    a7f4:	2807883a 	mov	r3,r5
    a7f8:	dc000e15 	stw	r16,56(sp)
    a7fc:	d809883a 	mov	r4,sp
    a800:	880b883a 	mov	r5,r17
    a804:	dc000904 	addi	r16,sp,36
    a808:	d8c00115 	stw	r3,4(sp)
    a80c:	d8800015 	stw	r2,0(sp)
    a810:	d9800215 	stw	r6,8(sp)
    a814:	dfc01015 	stw	ra,64(sp)
    a818:	d9c00315 	stw	r7,12(sp)
    a81c:	000b1480 	call	b148 <__unpack_d>
    a820:	d9000204 	addi	r4,sp,8
    a824:	800b883a 	mov	r5,r16
    a828:	000b1480 	call	b148 <__unpack_d>
    a82c:	d8800417 	ldw	r2,16(sp)
    a830:	00c00044 	movi	r3,1
    a834:	180d883a 	mov	r6,r3
    a838:	1880062e 	bgeu	r3,r2,a854 <__ltdf2+0x70>
    a83c:	d8800917 	ldw	r2,36(sp)
    a840:	8809883a 	mov	r4,r17
    a844:	800b883a 	mov	r5,r16
    a848:	1880022e 	bgeu	r3,r2,a854 <__ltdf2+0x70>
    a84c:	000b2800 	call	b280 <__fpcmp_parts_d>
    a850:	100d883a 	mov	r6,r2
    a854:	3005883a 	mov	r2,r6
    a858:	dfc01017 	ldw	ra,64(sp)
    a85c:	dc400f17 	ldw	r17,60(sp)
    a860:	dc000e17 	ldw	r16,56(sp)
    a864:	dec01104 	addi	sp,sp,68
    a868:	f800283a 	ret

0000a86c <__floatsidf>:
    a86c:	2006d7fa 	srli	r3,r4,31
    a870:	defff604 	addi	sp,sp,-40
    a874:	008000c4 	movi	r2,3
    a878:	dfc00915 	stw	ra,36(sp)
    a87c:	dcc00815 	stw	r19,32(sp)
    a880:	dc800715 	stw	r18,28(sp)
    a884:	dc400615 	stw	r17,24(sp)
    a888:	dc000515 	stw	r16,20(sp)
    a88c:	d8800015 	stw	r2,0(sp)
    a890:	d8c00115 	stw	r3,4(sp)
    a894:	20000f1e 	bne	r4,zero,a8d4 <__floatsidf+0x68>
    a898:	00800084 	movi	r2,2
    a89c:	d8800015 	stw	r2,0(sp)
    a8a0:	d809883a 	mov	r4,sp
    a8a4:	000ae340 	call	ae34 <__pack_d>
    a8a8:	1009883a 	mov	r4,r2
    a8ac:	180b883a 	mov	r5,r3
    a8b0:	2005883a 	mov	r2,r4
    a8b4:	2807883a 	mov	r3,r5
    a8b8:	dfc00917 	ldw	ra,36(sp)
    a8bc:	dcc00817 	ldw	r19,32(sp)
    a8c0:	dc800717 	ldw	r18,28(sp)
    a8c4:	dc400617 	ldw	r17,24(sp)
    a8c8:	dc000517 	ldw	r16,20(sp)
    a8cc:	dec00a04 	addi	sp,sp,40
    a8d0:	f800283a 	ret
    a8d4:	00800f04 	movi	r2,60
    a8d8:	1807003a 	cmpeq	r3,r3,zero
    a8dc:	d8800215 	stw	r2,8(sp)
    a8e0:	18001126 	beq	r3,zero,a928 <__floatsidf+0xbc>
    a8e4:	0027883a 	mov	r19,zero
    a8e8:	2025883a 	mov	r18,r4
    a8ec:	d9000315 	stw	r4,12(sp)
    a8f0:	dcc00415 	stw	r19,16(sp)
    a8f4:	000adb40 	call	adb4 <__clzsi2>
    a8f8:	11000744 	addi	r4,r2,29
    a8fc:	013fe80e 	bge	zero,r4,a8a0 <__floatsidf+0x34>
    a900:	10bfff44 	addi	r2,r2,-3
    a904:	10000c16 	blt	r2,zero,a938 <__floatsidf+0xcc>
    a908:	90a2983a 	sll	r17,r18,r2
    a90c:	0021883a 	mov	r16,zero
    a910:	d8800217 	ldw	r2,8(sp)
    a914:	dc400415 	stw	r17,16(sp)
    a918:	dc000315 	stw	r16,12(sp)
    a91c:	1105c83a 	sub	r2,r2,r4
    a920:	d8800215 	stw	r2,8(sp)
    a924:	003fde06 	br	a8a0 <__floatsidf+0x34>
    a928:	00a00034 	movhi	r2,32768
    a92c:	20800a26 	beq	r4,r2,a958 <__floatsidf+0xec>
    a930:	0109c83a 	sub	r4,zero,r4
    a934:	003feb06 	br	a8e4 <__floatsidf+0x78>
    a938:	9006d07a 	srli	r3,r18,1
    a93c:	008007c4 	movi	r2,31
    a940:	1105c83a 	sub	r2,r2,r4
    a944:	1886d83a 	srl	r3,r3,r2
    a948:	9922983a 	sll	r17,r19,r4
    a94c:	9120983a 	sll	r16,r18,r4
    a950:	1c62b03a 	or	r17,r3,r17
    a954:	003fee06 	br	a910 <__floatsidf+0xa4>
    a958:	0009883a 	mov	r4,zero
    a95c:	01707834 	movhi	r5,49632
    a960:	003fd306 	br	a8b0 <__floatsidf+0x44>

0000a964 <__fixdfsi>:
    a964:	defff804 	addi	sp,sp,-32
    a968:	2005883a 	mov	r2,r4
    a96c:	2807883a 	mov	r3,r5
    a970:	d809883a 	mov	r4,sp
    a974:	d9400204 	addi	r5,sp,8
    a978:	d8c00115 	stw	r3,4(sp)
    a97c:	d8800015 	stw	r2,0(sp)
    a980:	dfc00715 	stw	ra,28(sp)
    a984:	000b1480 	call	b148 <__unpack_d>
    a988:	d8c00217 	ldw	r3,8(sp)
    a98c:	00800084 	movi	r2,2
    a990:	1880051e 	bne	r3,r2,a9a8 <__fixdfsi+0x44>
    a994:	0007883a 	mov	r3,zero
    a998:	1805883a 	mov	r2,r3
    a99c:	dfc00717 	ldw	ra,28(sp)
    a9a0:	dec00804 	addi	sp,sp,32
    a9a4:	f800283a 	ret
    a9a8:	00800044 	movi	r2,1
    a9ac:	10fff92e 	bgeu	r2,r3,a994 <__fixdfsi+0x30>
    a9b0:	00800104 	movi	r2,4
    a9b4:	18800426 	beq	r3,r2,a9c8 <__fixdfsi+0x64>
    a9b8:	d8c00417 	ldw	r3,16(sp)
    a9bc:	183ff516 	blt	r3,zero,a994 <__fixdfsi+0x30>
    a9c0:	00800784 	movi	r2,30
    a9c4:	10c0080e 	bge	r2,r3,a9e8 <__fixdfsi+0x84>
    a9c8:	d8800317 	ldw	r2,12(sp)
    a9cc:	1000121e 	bne	r2,zero,aa18 <__fixdfsi+0xb4>
    a9d0:	00e00034 	movhi	r3,32768
    a9d4:	18ffffc4 	addi	r3,r3,-1
    a9d8:	1805883a 	mov	r2,r3
    a9dc:	dfc00717 	ldw	ra,28(sp)
    a9e0:	dec00804 	addi	sp,sp,32
    a9e4:	f800283a 	ret
    a9e8:	00800f04 	movi	r2,60
    a9ec:	10d1c83a 	sub	r8,r2,r3
    a9f0:	40bff804 	addi	r2,r8,-32
    a9f4:	d9800517 	ldw	r6,20(sp)
    a9f8:	d9c00617 	ldw	r7,24(sp)
    a9fc:	10000816 	blt	r2,zero,aa20 <__fixdfsi+0xbc>
    aa00:	3888d83a 	srl	r4,r7,r2
    aa04:	d8800317 	ldw	r2,12(sp)
    aa08:	2007883a 	mov	r3,r4
    aa0c:	103fe226 	beq	r2,zero,a998 <__fixdfsi+0x34>
    aa10:	0107c83a 	sub	r3,zero,r4
    aa14:	003fe006 	br	a998 <__fixdfsi+0x34>
    aa18:	00e00034 	movhi	r3,32768
    aa1c:	003fde06 	br	a998 <__fixdfsi+0x34>
    aa20:	39c7883a 	add	r3,r7,r7
    aa24:	008007c4 	movi	r2,31
    aa28:	1205c83a 	sub	r2,r2,r8
    aa2c:	1886983a 	sll	r3,r3,r2
    aa30:	3208d83a 	srl	r4,r6,r8
    aa34:	1908b03a 	or	r4,r3,r4
    aa38:	003ff206 	br	aa04 <__fixdfsi+0xa0>

0000aa3c <__floatunsidf>:
    aa3c:	defff204 	addi	sp,sp,-56
    aa40:	dfc00d15 	stw	ra,52(sp)
    aa44:	ddc00c15 	stw	r23,48(sp)
    aa48:	dd800b15 	stw	r22,44(sp)
    aa4c:	dd400a15 	stw	r21,40(sp)
    aa50:	dd000915 	stw	r20,36(sp)
    aa54:	dcc00815 	stw	r19,32(sp)
    aa58:	dc800715 	stw	r18,28(sp)
    aa5c:	dc400615 	stw	r17,24(sp)
    aa60:	dc000515 	stw	r16,20(sp)
    aa64:	d8000115 	stw	zero,4(sp)
    aa68:	20000f1e 	bne	r4,zero,aaa8 <__floatunsidf+0x6c>
    aa6c:	00800084 	movi	r2,2
    aa70:	d8800015 	stw	r2,0(sp)
    aa74:	d809883a 	mov	r4,sp
    aa78:	000ae340 	call	ae34 <__pack_d>
    aa7c:	dfc00d17 	ldw	ra,52(sp)
    aa80:	ddc00c17 	ldw	r23,48(sp)
    aa84:	dd800b17 	ldw	r22,44(sp)
    aa88:	dd400a17 	ldw	r21,40(sp)
    aa8c:	dd000917 	ldw	r20,36(sp)
    aa90:	dcc00817 	ldw	r19,32(sp)
    aa94:	dc800717 	ldw	r18,28(sp)
    aa98:	dc400617 	ldw	r17,24(sp)
    aa9c:	dc000517 	ldw	r16,20(sp)
    aaa0:	dec00e04 	addi	sp,sp,56
    aaa4:	f800283a 	ret
    aaa8:	008000c4 	movi	r2,3
    aaac:	00c00f04 	movi	r3,60
    aab0:	002f883a 	mov	r23,zero
    aab4:	202d883a 	mov	r22,r4
    aab8:	d8800015 	stw	r2,0(sp)
    aabc:	d8c00215 	stw	r3,8(sp)
    aac0:	d9000315 	stw	r4,12(sp)
    aac4:	ddc00415 	stw	r23,16(sp)
    aac8:	000adb40 	call	adb4 <__clzsi2>
    aacc:	12400744 	addi	r9,r2,29
    aad0:	48000b16 	blt	r9,zero,ab00 <__floatunsidf+0xc4>
    aad4:	483fe726 	beq	r9,zero,aa74 <__floatunsidf+0x38>
    aad8:	10bfff44 	addi	r2,r2,-3
    aadc:	10002e16 	blt	r2,zero,ab98 <__floatunsidf+0x15c>
    aae0:	b0a2983a 	sll	r17,r22,r2
    aae4:	0021883a 	mov	r16,zero
    aae8:	d8800217 	ldw	r2,8(sp)
    aaec:	dc400415 	stw	r17,16(sp)
    aaf0:	dc000315 	stw	r16,12(sp)
    aaf4:	1245c83a 	sub	r2,r2,r9
    aaf8:	d8800215 	stw	r2,8(sp)
    aafc:	003fdd06 	br	aa74 <__floatunsidf+0x38>
    ab00:	0255c83a 	sub	r10,zero,r9
    ab04:	51bff804 	addi	r6,r10,-32
    ab08:	30001b16 	blt	r6,zero,ab78 <__floatunsidf+0x13c>
    ab0c:	b9a8d83a 	srl	r20,r23,r6
    ab10:	002b883a 	mov	r21,zero
    ab14:	000f883a 	mov	r7,zero
    ab18:	01000044 	movi	r4,1
    ab1c:	0011883a 	mov	r8,zero
    ab20:	30002516 	blt	r6,zero,abb8 <__floatunsidf+0x17c>
    ab24:	21a6983a 	sll	r19,r4,r6
    ab28:	0025883a 	mov	r18,zero
    ab2c:	00bfffc4 	movi	r2,-1
    ab30:	9089883a 	add	r4,r18,r2
    ab34:	988b883a 	add	r5,r19,r2
    ab38:	248d803a 	cmpltu	r6,r4,r18
    ab3c:	314b883a 	add	r5,r6,r5
    ab40:	b104703a 	and	r2,r22,r4
    ab44:	b946703a 	and	r3,r23,r5
    ab48:	10c4b03a 	or	r2,r2,r3
    ab4c:	10000226 	beq	r2,zero,ab58 <__floatunsidf+0x11c>
    ab50:	01c00044 	movi	r7,1
    ab54:	0011883a 	mov	r8,zero
    ab58:	d9000217 	ldw	r4,8(sp)
    ab5c:	a1c4b03a 	or	r2,r20,r7
    ab60:	aa06b03a 	or	r3,r21,r8
    ab64:	2249c83a 	sub	r4,r4,r9
    ab68:	d8c00415 	stw	r3,16(sp)
    ab6c:	d9000215 	stw	r4,8(sp)
    ab70:	d8800315 	stw	r2,12(sp)
    ab74:	003fbf06 	br	aa74 <__floatunsidf+0x38>
    ab78:	bdc7883a 	add	r3,r23,r23
    ab7c:	008007c4 	movi	r2,31
    ab80:	1285c83a 	sub	r2,r2,r10
    ab84:	1886983a 	sll	r3,r3,r2
    ab88:	b2a8d83a 	srl	r20,r22,r10
    ab8c:	baaad83a 	srl	r21,r23,r10
    ab90:	1d28b03a 	or	r20,r3,r20
    ab94:	003fdf06 	br	ab14 <__floatunsidf+0xd8>
    ab98:	b006d07a 	srli	r3,r22,1
    ab9c:	008007c4 	movi	r2,31
    aba0:	1245c83a 	sub	r2,r2,r9
    aba4:	1886d83a 	srl	r3,r3,r2
    aba8:	ba62983a 	sll	r17,r23,r9
    abac:	b260983a 	sll	r16,r22,r9
    abb0:	1c62b03a 	or	r17,r3,r17
    abb4:	003fcc06 	br	aae8 <__floatunsidf+0xac>
    abb8:	2006d07a 	srli	r3,r4,1
    abbc:	008007c4 	movi	r2,31
    abc0:	1285c83a 	sub	r2,r2,r10
    abc4:	18a6d83a 	srl	r19,r3,r2
    abc8:	22a4983a 	sll	r18,r4,r10
    abcc:	003fd706 	br	ab2c <__floatunsidf+0xf0>

0000abd0 <udivmodsi4>:
    abd0:	29001b2e 	bgeu	r5,r4,ac40 <udivmodsi4+0x70>
    abd4:	28001a16 	blt	r5,zero,ac40 <udivmodsi4+0x70>
    abd8:	00800044 	movi	r2,1
    abdc:	0007883a 	mov	r3,zero
    abe0:	01c007c4 	movi	r7,31
    abe4:	00000306 	br	abf4 <udivmodsi4+0x24>
    abe8:	19c01326 	beq	r3,r7,ac38 <udivmodsi4+0x68>
    abec:	18c00044 	addi	r3,r3,1
    abf0:	28000416 	blt	r5,zero,ac04 <udivmodsi4+0x34>
    abf4:	294b883a 	add	r5,r5,r5
    abf8:	1085883a 	add	r2,r2,r2
    abfc:	293ffa36 	bltu	r5,r4,abe8 <udivmodsi4+0x18>
    ac00:	10000d26 	beq	r2,zero,ac38 <udivmodsi4+0x68>
    ac04:	0007883a 	mov	r3,zero
    ac08:	21400236 	bltu	r4,r5,ac14 <udivmodsi4+0x44>
    ac0c:	2149c83a 	sub	r4,r4,r5
    ac10:	1886b03a 	or	r3,r3,r2
    ac14:	1004d07a 	srli	r2,r2,1
    ac18:	280ad07a 	srli	r5,r5,1
    ac1c:	103ffa1e 	bne	r2,zero,ac08 <udivmodsi4+0x38>
    ac20:	30000226 	beq	r6,zero,ac2c <udivmodsi4+0x5c>
    ac24:	2005883a 	mov	r2,r4
    ac28:	f800283a 	ret
    ac2c:	1809883a 	mov	r4,r3
    ac30:	2005883a 	mov	r2,r4
    ac34:	f800283a 	ret
    ac38:	0007883a 	mov	r3,zero
    ac3c:	003ff806 	br	ac20 <udivmodsi4+0x50>
    ac40:	00800044 	movi	r2,1
    ac44:	0007883a 	mov	r3,zero
    ac48:	003fef06 	br	ac08 <udivmodsi4+0x38>

0000ac4c <__divsi3>:
    ac4c:	defffe04 	addi	sp,sp,-8
    ac50:	dc000015 	stw	r16,0(sp)
    ac54:	dfc00115 	stw	ra,4(sp)
    ac58:	0021883a 	mov	r16,zero
    ac5c:	20000c16 	blt	r4,zero,ac90 <__divsi3+0x44>
    ac60:	000d883a 	mov	r6,zero
    ac64:	28000e16 	blt	r5,zero,aca0 <__divsi3+0x54>
    ac68:	000abd00 	call	abd0 <udivmodsi4>
    ac6c:	1007883a 	mov	r3,r2
    ac70:	8005003a 	cmpeq	r2,r16,zero
    ac74:	1000011e 	bne	r2,zero,ac7c <__divsi3+0x30>
    ac78:	00c7c83a 	sub	r3,zero,r3
    ac7c:	1805883a 	mov	r2,r3
    ac80:	dfc00117 	ldw	ra,4(sp)
    ac84:	dc000017 	ldw	r16,0(sp)
    ac88:	dec00204 	addi	sp,sp,8
    ac8c:	f800283a 	ret
    ac90:	0109c83a 	sub	r4,zero,r4
    ac94:	04000044 	movi	r16,1
    ac98:	000d883a 	mov	r6,zero
    ac9c:	283ff20e 	bge	r5,zero,ac68 <__divsi3+0x1c>
    aca0:	014bc83a 	sub	r5,zero,r5
    aca4:	8021003a 	cmpeq	r16,r16,zero
    aca8:	003fef06 	br	ac68 <__divsi3+0x1c>

0000acac <__modsi3>:
    acac:	deffff04 	addi	sp,sp,-4
    acb0:	dfc00015 	stw	ra,0(sp)
    acb4:	01800044 	movi	r6,1
    acb8:	2807883a 	mov	r3,r5
    acbc:	20000416 	blt	r4,zero,acd0 <__modsi3+0x24>
    acc0:	28000c16 	blt	r5,zero,acf4 <__modsi3+0x48>
    acc4:	dfc00017 	ldw	ra,0(sp)
    acc8:	dec00104 	addi	sp,sp,4
    accc:	000abd01 	jmpi	abd0 <udivmodsi4>
    acd0:	0109c83a 	sub	r4,zero,r4
    acd4:	28000b16 	blt	r5,zero,ad04 <__modsi3+0x58>
    acd8:	180b883a 	mov	r5,r3
    acdc:	01800044 	movi	r6,1
    ace0:	000abd00 	call	abd0 <udivmodsi4>
    ace4:	0085c83a 	sub	r2,zero,r2
    ace8:	dfc00017 	ldw	ra,0(sp)
    acec:	dec00104 	addi	sp,sp,4
    acf0:	f800283a 	ret
    acf4:	014bc83a 	sub	r5,zero,r5
    acf8:	dfc00017 	ldw	ra,0(sp)
    acfc:	dec00104 	addi	sp,sp,4
    ad00:	000abd01 	jmpi	abd0 <udivmodsi4>
    ad04:	0147c83a 	sub	r3,zero,r5
    ad08:	003ff306 	br	acd8 <__modsi3+0x2c>

0000ad0c <__udivsi3>:
    ad0c:	000d883a 	mov	r6,zero
    ad10:	000abd01 	jmpi	abd0 <udivmodsi4>

0000ad14 <__umodsi3>:
    ad14:	01800044 	movi	r6,1
    ad18:	000abd01 	jmpi	abd0 <udivmodsi4>

0000ad1c <__muldi3>:
    ad1c:	2011883a 	mov	r8,r4
    ad20:	427fffcc 	andi	r9,r8,65535
    ad24:	4018d43a 	srli	r12,r8,16
    ad28:	32bfffcc 	andi	r10,r6,65535
    ad2c:	3016d43a 	srli	r11,r6,16
    ad30:	4a85383a 	mul	r2,r9,r10
    ad34:	6295383a 	mul	r10,r12,r10
    ad38:	4ad3383a 	mul	r9,r9,r11
    ad3c:	113fffcc 	andi	r4,r2,65535
    ad40:	1004d43a 	srli	r2,r2,16
    ad44:	4a93883a 	add	r9,r9,r10
    ad48:	3807883a 	mov	r3,r7
    ad4c:	1245883a 	add	r2,r2,r9
    ad50:	280f883a 	mov	r7,r5
    ad54:	180b883a 	mov	r5,r3
    ad58:	1006943a 	slli	r3,r2,16
    ad5c:	defffd04 	addi	sp,sp,-12
    ad60:	dc800215 	stw	r18,8(sp)
    ad64:	1907883a 	add	r3,r3,r4
    ad68:	dc400115 	stw	r17,4(sp)
    ad6c:	dc000015 	stw	r16,0(sp)
    ad70:	4165383a 	mul	r18,r8,r5
    ad74:	31e3383a 	mul	r17,r6,r7
    ad78:	1012d43a 	srli	r9,r2,16
    ad7c:	62d9383a 	mul	r12,r12,r11
    ad80:	181f883a 	mov	r15,r3
    ad84:	1280022e 	bgeu	r2,r10,ad90 <__muldi3+0x74>
    ad88:	00800074 	movhi	r2,1
    ad8c:	6099883a 	add	r12,r12,r2
    ad90:	624d883a 	add	r6,r12,r9
    ad94:	9187883a 	add	r3,r18,r6
    ad98:	88c7883a 	add	r3,r17,r3
    ad9c:	7805883a 	mov	r2,r15
    ada0:	dc800217 	ldw	r18,8(sp)
    ada4:	dc400117 	ldw	r17,4(sp)
    ada8:	dc000017 	ldw	r16,0(sp)
    adac:	dec00304 	addi	sp,sp,12
    adb0:	f800283a 	ret

0000adb4 <__clzsi2>:
    adb4:	00bfffd4 	movui	r2,65535
    adb8:	11000e36 	bltu	r2,r4,adf4 <__clzsi2+0x40>
    adbc:	00803fc4 	movi	r2,255
    adc0:	01400204 	movi	r5,8
    adc4:	0007883a 	mov	r3,zero
    adc8:	11001036 	bltu	r2,r4,ae0c <__clzsi2+0x58>
    adcc:	000b883a 	mov	r5,zero
    add0:	20c6d83a 	srl	r3,r4,r3
    add4:	00800074 	movhi	r2,1
    add8:	10893a04 	addi	r2,r2,9448
    addc:	1887883a 	add	r3,r3,r2
    ade0:	18800003 	ldbu	r2,0(r3)
    ade4:	00c00804 	movi	r3,32
    ade8:	2885883a 	add	r2,r5,r2
    adec:	1885c83a 	sub	r2,r3,r2
    adf0:	f800283a 	ret
    adf4:	01400404 	movi	r5,16
    adf8:	00804034 	movhi	r2,256
    adfc:	10bfffc4 	addi	r2,r2,-1
    ae00:	2807883a 	mov	r3,r5
    ae04:	113ff22e 	bgeu	r2,r4,add0 <__clzsi2+0x1c>
    ae08:	01400604 	movi	r5,24
    ae0c:	2807883a 	mov	r3,r5
    ae10:	20c6d83a 	srl	r3,r4,r3
    ae14:	00800074 	movhi	r2,1
    ae18:	10893a04 	addi	r2,r2,9448
    ae1c:	1887883a 	add	r3,r3,r2
    ae20:	18800003 	ldbu	r2,0(r3)
    ae24:	00c00804 	movi	r3,32
    ae28:	2885883a 	add	r2,r5,r2
    ae2c:	1885c83a 	sub	r2,r3,r2
    ae30:	f800283a 	ret

0000ae34 <__pack_d>:
    ae34:	20c00017 	ldw	r3,0(r4)
    ae38:	defffd04 	addi	sp,sp,-12
    ae3c:	dc000015 	stw	r16,0(sp)
    ae40:	dc800215 	stw	r18,8(sp)
    ae44:	dc400115 	stw	r17,4(sp)
    ae48:	00800044 	movi	r2,1
    ae4c:	22000317 	ldw	r8,12(r4)
    ae50:	001f883a 	mov	r15,zero
    ae54:	22400417 	ldw	r9,16(r4)
    ae58:	24000117 	ldw	r16,4(r4)
    ae5c:	10c0552e 	bgeu	r2,r3,afb4 <__pack_d+0x180>
    ae60:	00800104 	movi	r2,4
    ae64:	18804f26 	beq	r3,r2,afa4 <__pack_d+0x170>
    ae68:	00800084 	movi	r2,2
    ae6c:	18800226 	beq	r3,r2,ae78 <__pack_d+0x44>
    ae70:	4244b03a 	or	r2,r8,r9
    ae74:	10001a1e 	bne	r2,zero,aee0 <__pack_d+0xac>
    ae78:	000d883a 	mov	r6,zero
    ae7c:	000f883a 	mov	r7,zero
    ae80:	0011883a 	mov	r8,zero
    ae84:	00800434 	movhi	r2,16
    ae88:	10bfffc4 	addi	r2,r2,-1
    ae8c:	301d883a 	mov	r14,r6
    ae90:	3884703a 	and	r2,r7,r2
    ae94:	400a953a 	slli	r5,r8,20
    ae98:	79bffc2c 	andhi	r6,r15,65520
    ae9c:	308cb03a 	or	r6,r6,r2
    aea0:	00e00434 	movhi	r3,32784
    aea4:	18ffffc4 	addi	r3,r3,-1
    aea8:	800497fa 	slli	r2,r16,31
    aeac:	30c6703a 	and	r3,r6,r3
    aeb0:	1946b03a 	or	r3,r3,r5
    aeb4:	01600034 	movhi	r5,32768
    aeb8:	297fffc4 	addi	r5,r5,-1
    aebc:	194a703a 	and	r5,r3,r5
    aec0:	288ab03a 	or	r5,r5,r2
    aec4:	2807883a 	mov	r3,r5
    aec8:	7005883a 	mov	r2,r14
    aecc:	dc800217 	ldw	r18,8(sp)
    aed0:	dc400117 	ldw	r17,4(sp)
    aed4:	dc000017 	ldw	r16,0(sp)
    aed8:	dec00304 	addi	sp,sp,12
    aedc:	f800283a 	ret
    aee0:	21000217 	ldw	r4,8(r4)
    aee4:	00bf0084 	movi	r2,-1022
    aee8:	20803f16 	blt	r4,r2,afe8 <__pack_d+0x1b4>
    aeec:	0080ffc4 	movi	r2,1023
    aef0:	11002c16 	blt	r2,r4,afa4 <__pack_d+0x170>
    aef4:	00803fc4 	movi	r2,255
    aef8:	408c703a 	and	r6,r8,r2
    aefc:	00802004 	movi	r2,128
    af00:	0007883a 	mov	r3,zero
    af04:	000f883a 	mov	r7,zero
    af08:	2280ffc4 	addi	r10,r4,1023
    af0c:	30801e26 	beq	r6,r2,af88 <__pack_d+0x154>
    af10:	00801fc4 	movi	r2,127
    af14:	4089883a 	add	r4,r8,r2
    af18:	220d803a 	cmpltu	r6,r4,r8
    af1c:	324d883a 	add	r6,r6,r9
    af20:	2011883a 	mov	r8,r4
    af24:	3013883a 	mov	r9,r6
    af28:	00880034 	movhi	r2,8192
    af2c:	10bfffc4 	addi	r2,r2,-1
    af30:	12400d36 	bltu	r2,r9,af68 <__pack_d+0x134>
    af34:	4804963a 	slli	r2,r9,24
    af38:	400cd23a 	srli	r6,r8,8
    af3c:	480ed23a 	srli	r7,r9,8
    af40:	013fffc4 	movi	r4,-1
    af44:	118cb03a 	or	r6,r2,r6
    af48:	01400434 	movhi	r5,16
    af4c:	297fffc4 	addi	r5,r5,-1
    af50:	3104703a 	and	r2,r6,r4
    af54:	3946703a 	and	r3,r7,r5
    af58:	5201ffcc 	andi	r8,r10,2047
    af5c:	100d883a 	mov	r6,r2
    af60:	180f883a 	mov	r7,r3
    af64:	003fc706 	br	ae84 <__pack_d+0x50>
    af68:	480897fa 	slli	r4,r9,31
    af6c:	4004d07a 	srli	r2,r8,1
    af70:	4806d07a 	srli	r3,r9,1
    af74:	52800044 	addi	r10,r10,1
    af78:	2084b03a 	or	r2,r4,r2
    af7c:	1011883a 	mov	r8,r2
    af80:	1813883a 	mov	r9,r3
    af84:	003feb06 	br	af34 <__pack_d+0x100>
    af88:	383fe11e 	bne	r7,zero,af10 <__pack_d+0xdc>
    af8c:	01004004 	movi	r4,256
    af90:	4104703a 	and	r2,r8,r4
    af94:	10c4b03a 	or	r2,r2,r3
    af98:	103fe326 	beq	r2,zero,af28 <__pack_d+0xf4>
    af9c:	3005883a 	mov	r2,r6
    afa0:	003fdc06 	br	af14 <__pack_d+0xe0>
    afa4:	000d883a 	mov	r6,zero
    afa8:	000f883a 	mov	r7,zero
    afac:	0201ffc4 	movi	r8,2047
    afb0:	003fb406 	br	ae84 <__pack_d+0x50>
    afb4:	0005883a 	mov	r2,zero
    afb8:	00c00234 	movhi	r3,8
    afbc:	408cb03a 	or	r6,r8,r2
    afc0:	48ceb03a 	or	r7,r9,r3
    afc4:	013fffc4 	movi	r4,-1
    afc8:	01400434 	movhi	r5,16
    afcc:	297fffc4 	addi	r5,r5,-1
    afd0:	3104703a 	and	r2,r6,r4
    afd4:	3946703a 	and	r3,r7,r5
    afd8:	100d883a 	mov	r6,r2
    afdc:	180f883a 	mov	r7,r3
    afe0:	0201ffc4 	movi	r8,2047
    afe4:	003fa706 	br	ae84 <__pack_d+0x50>
    afe8:	1109c83a 	sub	r4,r2,r4
    afec:	00800e04 	movi	r2,56
    aff0:	11004316 	blt	r2,r4,b100 <__pack_d+0x2cc>
    aff4:	21fff804 	addi	r7,r4,-32
    aff8:	38004516 	blt	r7,zero,b110 <__pack_d+0x2dc>
    affc:	49d8d83a 	srl	r12,r9,r7
    b000:	001b883a 	mov	r13,zero
    b004:	0023883a 	mov	r17,zero
    b008:	01400044 	movi	r5,1
    b00c:	0025883a 	mov	r18,zero
    b010:	38004716 	blt	r7,zero,b130 <__pack_d+0x2fc>
    b014:	29d6983a 	sll	r11,r5,r7
    b018:	0015883a 	mov	r10,zero
    b01c:	00bfffc4 	movi	r2,-1
    b020:	5089883a 	add	r4,r10,r2
    b024:	588b883a 	add	r5,r11,r2
    b028:	228d803a 	cmpltu	r6,r4,r10
    b02c:	314b883a 	add	r5,r6,r5
    b030:	4104703a 	and	r2,r8,r4
    b034:	4946703a 	and	r3,r9,r5
    b038:	10c4b03a 	or	r2,r2,r3
    b03c:	10000226 	beq	r2,zero,b048 <__pack_d+0x214>
    b040:	04400044 	movi	r17,1
    b044:	0025883a 	mov	r18,zero
    b048:	00803fc4 	movi	r2,255
    b04c:	644eb03a 	or	r7,r12,r17
    b050:	3892703a 	and	r9,r7,r2
    b054:	00802004 	movi	r2,128
    b058:	6c90b03a 	or	r8,r13,r18
    b05c:	0015883a 	mov	r10,zero
    b060:	48801626 	beq	r9,r2,b0bc <__pack_d+0x288>
    b064:	01001fc4 	movi	r4,127
    b068:	3905883a 	add	r2,r7,r4
    b06c:	11cd803a 	cmpltu	r6,r2,r7
    b070:	320d883a 	add	r6,r6,r8
    b074:	100f883a 	mov	r7,r2
    b078:	00840034 	movhi	r2,4096
    b07c:	10bfffc4 	addi	r2,r2,-1
    b080:	3011883a 	mov	r8,r6
    b084:	0007883a 	mov	r3,zero
    b088:	11801b36 	bltu	r2,r6,b0f8 <__pack_d+0x2c4>
    b08c:	4004963a 	slli	r2,r8,24
    b090:	3808d23a 	srli	r4,r7,8
    b094:	400ad23a 	srli	r5,r8,8
    b098:	1813883a 	mov	r9,r3
    b09c:	1108b03a 	or	r4,r2,r4
    b0a0:	00bfffc4 	movi	r2,-1
    b0a4:	00c00434 	movhi	r3,16
    b0a8:	18ffffc4 	addi	r3,r3,-1
    b0ac:	208c703a 	and	r6,r4,r2
    b0b0:	28ce703a 	and	r7,r5,r3
    b0b4:	4a01ffcc 	andi	r8,r9,2047
    b0b8:	003f7206 	br	ae84 <__pack_d+0x50>
    b0bc:	503fe91e 	bne	r10,zero,b064 <__pack_d+0x230>
    b0c0:	01004004 	movi	r4,256
    b0c4:	3904703a 	and	r2,r7,r4
    b0c8:	0007883a 	mov	r3,zero
    b0cc:	10c4b03a 	or	r2,r2,r3
    b0d0:	10000626 	beq	r2,zero,b0ec <__pack_d+0x2b8>
    b0d4:	3a45883a 	add	r2,r7,r9
    b0d8:	11cd803a 	cmpltu	r6,r2,r7
    b0dc:	320d883a 	add	r6,r6,r8
    b0e0:	100f883a 	mov	r7,r2
    b0e4:	3011883a 	mov	r8,r6
    b0e8:	0007883a 	mov	r3,zero
    b0ec:	00840034 	movhi	r2,4096
    b0f0:	10bfffc4 	addi	r2,r2,-1
    b0f4:	123fe52e 	bgeu	r2,r8,b08c <__pack_d+0x258>
    b0f8:	00c00044 	movi	r3,1
    b0fc:	003fe306 	br	b08c <__pack_d+0x258>
    b100:	0009883a 	mov	r4,zero
    b104:	0013883a 	mov	r9,zero
    b108:	000b883a 	mov	r5,zero
    b10c:	003fe406 	br	b0a0 <__pack_d+0x26c>
    b110:	4a47883a 	add	r3,r9,r9
    b114:	008007c4 	movi	r2,31
    b118:	1105c83a 	sub	r2,r2,r4
    b11c:	1886983a 	sll	r3,r3,r2
    b120:	4118d83a 	srl	r12,r8,r4
    b124:	491ad83a 	srl	r13,r9,r4
    b128:	1b18b03a 	or	r12,r3,r12
    b12c:	003fb506 	br	b004 <__pack_d+0x1d0>
    b130:	2806d07a 	srli	r3,r5,1
    b134:	008007c4 	movi	r2,31
    b138:	1105c83a 	sub	r2,r2,r4
    b13c:	1896d83a 	srl	r11,r3,r2
    b140:	2914983a 	sll	r10,r5,r4
    b144:	003fb506 	br	b01c <__pack_d+0x1e8>

0000b148 <__unpack_d>:
    b148:	20c00117 	ldw	r3,4(r4)
    b14c:	22400017 	ldw	r9,0(r4)
    b150:	00800434 	movhi	r2,16
    b154:	10bfffc4 	addi	r2,r2,-1
    b158:	1808d53a 	srli	r4,r3,20
    b15c:	180cd7fa 	srli	r6,r3,31
    b160:	1894703a 	and	r10,r3,r2
    b164:	2201ffcc 	andi	r8,r4,2047
    b168:	281b883a 	mov	r13,r5
    b16c:	4817883a 	mov	r11,r9
    b170:	29800115 	stw	r6,4(r5)
    b174:	5019883a 	mov	r12,r10
    b178:	40001e1e 	bne	r8,zero,b1f4 <__unpack_d+0xac>
    b17c:	4a84b03a 	or	r2,r9,r10
    b180:	10001926 	beq	r2,zero,b1e8 <__unpack_d+0xa0>
    b184:	4804d63a 	srli	r2,r9,24
    b188:	500c923a 	slli	r6,r10,8
    b18c:	013f0084 	movi	r4,-1022
    b190:	00c40034 	movhi	r3,4096
    b194:	18ffffc4 	addi	r3,r3,-1
    b198:	118cb03a 	or	r6,r2,r6
    b19c:	008000c4 	movi	r2,3
    b1a0:	480a923a 	slli	r5,r9,8
    b1a4:	68800015 	stw	r2,0(r13)
    b1a8:	69000215 	stw	r4,8(r13)
    b1ac:	19800b36 	bltu	r3,r6,b1dc <__unpack_d+0x94>
    b1b0:	200f883a 	mov	r7,r4
    b1b4:	1811883a 	mov	r8,r3
    b1b8:	2945883a 	add	r2,r5,r5
    b1bc:	1149803a 	cmpltu	r4,r2,r5
    b1c0:	3187883a 	add	r3,r6,r6
    b1c4:	20c9883a 	add	r4,r4,r3
    b1c8:	100b883a 	mov	r5,r2
    b1cc:	200d883a 	mov	r6,r4
    b1d0:	39ffffc4 	addi	r7,r7,-1
    b1d4:	413ff82e 	bgeu	r8,r4,b1b8 <__unpack_d+0x70>
    b1d8:	69c00215 	stw	r7,8(r13)
    b1dc:	69800415 	stw	r6,16(r13)
    b1e0:	69400315 	stw	r5,12(r13)
    b1e4:	f800283a 	ret
    b1e8:	00800084 	movi	r2,2
    b1ec:	28800015 	stw	r2,0(r5)
    b1f0:	f800283a 	ret
    b1f4:	0081ffc4 	movi	r2,2047
    b1f8:	40800f26 	beq	r8,r2,b238 <__unpack_d+0xf0>
    b1fc:	480cd63a 	srli	r6,r9,24
    b200:	5006923a 	slli	r3,r10,8
    b204:	4804923a 	slli	r2,r9,8
    b208:	0009883a 	mov	r4,zero
    b20c:	30c6b03a 	or	r3,r6,r3
    b210:	01440034 	movhi	r5,4096
    b214:	110cb03a 	or	r6,r2,r4
    b218:	423f0044 	addi	r8,r8,-1023
    b21c:	194eb03a 	or	r7,r3,r5
    b220:	008000c4 	movi	r2,3
    b224:	69c00415 	stw	r7,16(r13)
    b228:	6a000215 	stw	r8,8(r13)
    b22c:	68800015 	stw	r2,0(r13)
    b230:	69800315 	stw	r6,12(r13)
    b234:	f800283a 	ret
    b238:	4a84b03a 	or	r2,r9,r10
    b23c:	1000031e 	bne	r2,zero,b24c <__unpack_d+0x104>
    b240:	00800104 	movi	r2,4
    b244:	28800015 	stw	r2,0(r5)
    b248:	f800283a 	ret
    b24c:	0009883a 	mov	r4,zero
    b250:	01400234 	movhi	r5,8
    b254:	4904703a 	and	r2,r9,r4
    b258:	5146703a 	and	r3,r10,r5
    b25c:	10c4b03a 	or	r2,r2,r3
    b260:	10000526 	beq	r2,zero,b278 <__unpack_d+0x130>
    b264:	00800044 	movi	r2,1
    b268:	68800015 	stw	r2,0(r13)
    b26c:	6b000415 	stw	r12,16(r13)
    b270:	6ac00315 	stw	r11,12(r13)
    b274:	f800283a 	ret
    b278:	68000015 	stw	zero,0(r13)
    b27c:	003ffb06 	br	b26c <__unpack_d+0x124>

0000b280 <__fpcmp_parts_d>:
    b280:	21800017 	ldw	r6,0(r4)
    b284:	00c00044 	movi	r3,1
    b288:	19800a2e 	bgeu	r3,r6,b2b4 <__fpcmp_parts_d+0x34>
    b28c:	28800017 	ldw	r2,0(r5)
    b290:	1880082e 	bgeu	r3,r2,b2b4 <__fpcmp_parts_d+0x34>
    b294:	00c00104 	movi	r3,4
    b298:	30c02626 	beq	r6,r3,b334 <__fpcmp_parts_d+0xb4>
    b29c:	10c02226 	beq	r2,r3,b328 <__fpcmp_parts_d+0xa8>
    b2a0:	00c00084 	movi	r3,2
    b2a4:	30c00526 	beq	r6,r3,b2bc <__fpcmp_parts_d+0x3c>
    b2a8:	10c0071e 	bne	r2,r3,b2c8 <__fpcmp_parts_d+0x48>
    b2ac:	20800117 	ldw	r2,4(r4)
    b2b0:	1000091e 	bne	r2,zero,b2d8 <__fpcmp_parts_d+0x58>
    b2b4:	00800044 	movi	r2,1
    b2b8:	f800283a 	ret
    b2bc:	10c01a1e 	bne	r2,r3,b328 <__fpcmp_parts_d+0xa8>
    b2c0:	0005883a 	mov	r2,zero
    b2c4:	f800283a 	ret
    b2c8:	22000117 	ldw	r8,4(r4)
    b2cc:	28800117 	ldw	r2,4(r5)
    b2d0:	40800326 	beq	r8,r2,b2e0 <__fpcmp_parts_d+0x60>
    b2d4:	403ff726 	beq	r8,zero,b2b4 <__fpcmp_parts_d+0x34>
    b2d8:	00bfffc4 	movi	r2,-1
    b2dc:	f800283a 	ret
    b2e0:	20c00217 	ldw	r3,8(r4)
    b2e4:	28800217 	ldw	r2,8(r5)
    b2e8:	10fffa16 	blt	r2,r3,b2d4 <__fpcmp_parts_d+0x54>
    b2ec:	18800916 	blt	r3,r2,b314 <__fpcmp_parts_d+0x94>
    b2f0:	21c00417 	ldw	r7,16(r4)
    b2f4:	28c00417 	ldw	r3,16(r5)
    b2f8:	21800317 	ldw	r6,12(r4)
    b2fc:	28800317 	ldw	r2,12(r5)
    b300:	19fff436 	bltu	r3,r7,b2d4 <__fpcmp_parts_d+0x54>
    b304:	38c00526 	beq	r7,r3,b31c <__fpcmp_parts_d+0x9c>
    b308:	38c00236 	bltu	r7,r3,b314 <__fpcmp_parts_d+0x94>
    b30c:	19ffec1e 	bne	r3,r7,b2c0 <__fpcmp_parts_d+0x40>
    b310:	30bfeb2e 	bgeu	r6,r2,b2c0 <__fpcmp_parts_d+0x40>
    b314:	403fe71e 	bne	r8,zero,b2b4 <__fpcmp_parts_d+0x34>
    b318:	003fef06 	br	b2d8 <__fpcmp_parts_d+0x58>
    b31c:	11bffa2e 	bgeu	r2,r6,b308 <__fpcmp_parts_d+0x88>
    b320:	403fe426 	beq	r8,zero,b2b4 <__fpcmp_parts_d+0x34>
    b324:	003fec06 	br	b2d8 <__fpcmp_parts_d+0x58>
    b328:	28800117 	ldw	r2,4(r5)
    b32c:	103fe11e 	bne	r2,zero,b2b4 <__fpcmp_parts_d+0x34>
    b330:	003fe906 	br	b2d8 <__fpcmp_parts_d+0x58>
    b334:	11bfdd1e 	bne	r2,r6,b2ac <__fpcmp_parts_d+0x2c>
    b338:	28c00117 	ldw	r3,4(r5)
    b33c:	20800117 	ldw	r2,4(r4)
    b340:	1885c83a 	sub	r2,r3,r2
    b344:	f800283a 	ret

0000b348 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b348:	defff804 	addi	sp,sp,-32
    b34c:	dfc00715 	stw	ra,28(sp)
    b350:	df000615 	stw	fp,24(sp)
    b354:	df000604 	addi	fp,sp,24
    b358:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b35c:	e0bffc17 	ldw	r2,-16(fp)
    b360:	1004803a 	cmplt	r2,r2,zero
    b364:	1000081e 	bne	r2,zero,b388 <close+0x40>
    b368:	e0bffc17 	ldw	r2,-16(fp)
    b36c:	10800324 	muli	r2,r2,12
    b370:	1007883a 	mov	r3,r2
    b374:	00800074 	movhi	r2,1
    b378:	108c3604 	addi	r2,r2,12504
    b37c:	1887883a 	add	r3,r3,r2
    b380:	e0ffff15 	stw	r3,-4(fp)
    b384:	00000106 	br	b38c <close+0x44>
    b388:	e03fff15 	stw	zero,-4(fp)
    b38c:	e0bfff17 	ldw	r2,-4(fp)
    b390:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b394:	e0bffb17 	ldw	r2,-20(fp)
    b398:	1005003a 	cmpeq	r2,r2,zero
    b39c:	10001d1e 	bne	r2,zero,b414 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b3a0:	e0bffb17 	ldw	r2,-20(fp)
    b3a4:	10800017 	ldw	r2,0(r2)
    b3a8:	10800417 	ldw	r2,16(r2)
    b3ac:	1005003a 	cmpeq	r2,r2,zero
    b3b0:	1000071e 	bne	r2,zero,b3d0 <close+0x88>
    b3b4:	e0bffb17 	ldw	r2,-20(fp)
    b3b8:	10800017 	ldw	r2,0(r2)
    b3bc:	10800417 	ldw	r2,16(r2)
    b3c0:	e13ffb17 	ldw	r4,-20(fp)
    b3c4:	103ee83a 	callr	r2
    b3c8:	e0bffe15 	stw	r2,-8(fp)
    b3cc:	00000106 	br	b3d4 <close+0x8c>
    b3d0:	e03ffe15 	stw	zero,-8(fp)
    b3d4:	e0bffe17 	ldw	r2,-8(fp)
    b3d8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b3dc:	e13ffc17 	ldw	r4,-16(fp)
    b3e0:	000bfe40 	call	bfe4 <alt_release_fd>
    if (rval < 0)
    b3e4:	e0bffa17 	ldw	r2,-24(fp)
    b3e8:	1004403a 	cmpge	r2,r2,zero
    b3ec:	1000071e 	bne	r2,zero,b40c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b3f0:	000b4440 	call	b444 <alt_get_errno>
    b3f4:	e0fffa17 	ldw	r3,-24(fp)
    b3f8:	00c7c83a 	sub	r3,zero,r3
    b3fc:	10c00015 	stw	r3,0(r2)
      return -1;
    b400:	00bfffc4 	movi	r2,-1
    b404:	e0bffd15 	stw	r2,-12(fp)
    b408:	00000806 	br	b42c <close+0xe4>
    }
    return 0;
    b40c:	e03ffd15 	stw	zero,-12(fp)
    b410:	00000606 	br	b42c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b414:	000b4440 	call	b444 <alt_get_errno>
    b418:	1007883a 	mov	r3,r2
    b41c:	00801444 	movi	r2,81
    b420:	18800015 	stw	r2,0(r3)
    return -1;
    b424:	00bfffc4 	movi	r2,-1
    b428:	e0bffd15 	stw	r2,-12(fp)
    b42c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b430:	e037883a 	mov	sp,fp
    b434:	dfc00117 	ldw	ra,4(sp)
    b438:	df000017 	ldw	fp,0(sp)
    b43c:	dec00204 	addi	sp,sp,8
    b440:	f800283a 	ret

0000b444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b444:	defffd04 	addi	sp,sp,-12
    b448:	dfc00215 	stw	ra,8(sp)
    b44c:	df000115 	stw	fp,4(sp)
    b450:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b454:	00800074 	movhi	r2,1
    b458:	1091a604 	addi	r2,r2,18072
    b45c:	10800017 	ldw	r2,0(r2)
    b460:	1005003a 	cmpeq	r2,r2,zero
    b464:	1000061e 	bne	r2,zero,b480 <alt_get_errno+0x3c>
    b468:	00800074 	movhi	r2,1
    b46c:	1091a604 	addi	r2,r2,18072
    b470:	10800017 	ldw	r2,0(r2)
    b474:	103ee83a 	callr	r2
    b478:	e0bfff15 	stw	r2,-4(fp)
    b47c:	00000306 	br	b48c <alt_get_errno+0x48>
    b480:	00800074 	movhi	r2,1
    b484:	10997c04 	addi	r2,r2,26096
    b488:	e0bfff15 	stw	r2,-4(fp)
    b48c:	e0bfff17 	ldw	r2,-4(fp)
}
    b490:	e037883a 	mov	sp,fp
    b494:	dfc00117 	ldw	ra,4(sp)
    b498:	df000017 	ldw	fp,0(sp)
    b49c:	dec00204 	addi	sp,sp,8
    b4a0:	f800283a 	ret

0000b4a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b4a4:	defffc04 	addi	sp,sp,-16
    b4a8:	df000315 	stw	fp,12(sp)
    b4ac:	df000304 	addi	fp,sp,12
    b4b0:	e13ffd15 	stw	r4,-12(fp)
    b4b4:	e17ffe15 	stw	r5,-8(fp)
    b4b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b4bc:	e0bfff17 	ldw	r2,-4(fp)
}
    b4c0:	e037883a 	mov	sp,fp
    b4c4:	df000017 	ldw	fp,0(sp)
    b4c8:	dec00104 	addi	sp,sp,4
    b4cc:	f800283a 	ret

0000b4d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b4d0:	defff904 	addi	sp,sp,-28
    b4d4:	dfc00615 	stw	ra,24(sp)
    b4d8:	df000515 	stw	fp,20(sp)
    b4dc:	df000504 	addi	fp,sp,20
    b4e0:	e13ffc15 	stw	r4,-16(fp)
    b4e4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b4e8:	e0bffc17 	ldw	r2,-16(fp)
    b4ec:	1004803a 	cmplt	r2,r2,zero
    b4f0:	1000081e 	bne	r2,zero,b514 <fstat+0x44>
    b4f4:	e0bffc17 	ldw	r2,-16(fp)
    b4f8:	10800324 	muli	r2,r2,12
    b4fc:	1007883a 	mov	r3,r2
    b500:	00800074 	movhi	r2,1
    b504:	108c3604 	addi	r2,r2,12504
    b508:	1887883a 	add	r3,r3,r2
    b50c:	e0ffff15 	stw	r3,-4(fp)
    b510:	00000106 	br	b518 <fstat+0x48>
    b514:	e03fff15 	stw	zero,-4(fp)
    b518:	e0bfff17 	ldw	r2,-4(fp)
    b51c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b520:	e0bffb17 	ldw	r2,-20(fp)
    b524:	1005003a 	cmpeq	r2,r2,zero
    b528:	1000121e 	bne	r2,zero,b574 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b52c:	e0bffb17 	ldw	r2,-20(fp)
    b530:	10800017 	ldw	r2,0(r2)
    b534:	10800817 	ldw	r2,32(r2)
    b538:	1005003a 	cmpeq	r2,r2,zero
    b53c:	1000081e 	bne	r2,zero,b560 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b540:	e0bffb17 	ldw	r2,-20(fp)
    b544:	10800017 	ldw	r2,0(r2)
    b548:	10800817 	ldw	r2,32(r2)
    b54c:	e13ffb17 	ldw	r4,-20(fp)
    b550:	e17ffd17 	ldw	r5,-12(fp)
    b554:	103ee83a 	callr	r2
    b558:	e0bffe15 	stw	r2,-8(fp)
    b55c:	00000b06 	br	b58c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b560:	e0fffd17 	ldw	r3,-12(fp)
    b564:	00880004 	movi	r2,8192
    b568:	18800115 	stw	r2,4(r3)
      return 0;
    b56c:	e03ffe15 	stw	zero,-8(fp)
    b570:	00000606 	br	b58c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b574:	000b5a40 	call	b5a4 <alt_get_errno>
    b578:	1007883a 	mov	r3,r2
    b57c:	00801444 	movi	r2,81
    b580:	18800015 	stw	r2,0(r3)
    return -1;
    b584:	00bfffc4 	movi	r2,-1
    b588:	e0bffe15 	stw	r2,-8(fp)
    b58c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b590:	e037883a 	mov	sp,fp
    b594:	dfc00117 	ldw	ra,4(sp)
    b598:	df000017 	ldw	fp,0(sp)
    b59c:	dec00204 	addi	sp,sp,8
    b5a0:	f800283a 	ret

0000b5a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b5a4:	defffd04 	addi	sp,sp,-12
    b5a8:	dfc00215 	stw	ra,8(sp)
    b5ac:	df000115 	stw	fp,4(sp)
    b5b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b5b4:	00800074 	movhi	r2,1
    b5b8:	1091a604 	addi	r2,r2,18072
    b5bc:	10800017 	ldw	r2,0(r2)
    b5c0:	1005003a 	cmpeq	r2,r2,zero
    b5c4:	1000061e 	bne	r2,zero,b5e0 <alt_get_errno+0x3c>
    b5c8:	00800074 	movhi	r2,1
    b5cc:	1091a604 	addi	r2,r2,18072
    b5d0:	10800017 	ldw	r2,0(r2)
    b5d4:	103ee83a 	callr	r2
    b5d8:	e0bfff15 	stw	r2,-4(fp)
    b5dc:	00000306 	br	b5ec <alt_get_errno+0x48>
    b5e0:	00800074 	movhi	r2,1
    b5e4:	10997c04 	addi	r2,r2,26096
    b5e8:	e0bfff15 	stw	r2,-4(fp)
    b5ec:	e0bfff17 	ldw	r2,-4(fp)
}
    b5f0:	e037883a 	mov	sp,fp
    b5f4:	dfc00117 	ldw	ra,4(sp)
    b5f8:	df000017 	ldw	fp,0(sp)
    b5fc:	dec00204 	addi	sp,sp,8
    b600:	f800283a 	ret

0000b604 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b604:	deffef04 	addi	sp,sp,-68
    b608:	df001015 	stw	fp,64(sp)
    b60c:	df001004 	addi	fp,sp,64
    b610:	e13ffc15 	stw	r4,-16(fp)
    b614:	e17ffd15 	stw	r5,-12(fp)
    b618:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    b61c:	00bffa84 	movi	r2,-22
    b620:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b624:	e0bffc17 	ldw	r2,-16(fp)
    b628:	10800828 	cmpgeui	r2,r2,32
    b62c:	1000601e 	bne	r2,zero,b7b0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b630:	0005303a 	rdctl	r2,status
    b634:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b638:	e0fff917 	ldw	r3,-28(fp)
    b63c:	00bfff84 	movi	r2,-2
    b640:	1884703a 	and	r2,r3,r2
    b644:	1001703a 	wrctl	status,r2
  
  return context;
    b648:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b64c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    b650:	e0bffc17 	ldw	r2,-16(fp)
    b654:	00c01ef4 	movhi	r3,123
    b658:	18de1504 	addi	r3,r3,30804
    b65c:	100490fa 	slli	r2,r2,3
    b660:	10c7883a 	add	r3,r2,r3
    b664:	e0bffe17 	ldw	r2,-8(fp)
    b668:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    b66c:	e0bffc17 	ldw	r2,-16(fp)
    b670:	00c01ef4 	movhi	r3,123
    b674:	18de1504 	addi	r3,r3,30804
    b678:	100490fa 	slli	r2,r2,3
    b67c:	10c5883a 	add	r2,r2,r3
    b680:	10c00104 	addi	r3,r2,4
    b684:	e0bffd17 	ldw	r2,-12(fp)
    b688:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b68c:	e0bffe17 	ldw	r2,-8(fp)
    b690:	1005003a 	cmpeq	r2,r2,zero
    b694:	1000201e 	bne	r2,zero,b718 <alt_irq_register+0x114>
    b698:	e0bffc17 	ldw	r2,-16(fp)
    b69c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b6a0:	0005303a 	rdctl	r2,status
    b6a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b6a8:	e0fff617 	ldw	r3,-40(fp)
    b6ac:	00bfff84 	movi	r2,-2
    b6b0:	1884703a 	and	r2,r3,r2
    b6b4:	1001703a 	wrctl	status,r2
  
  return context;
    b6b8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b6bc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    b6c0:	e0fff717 	ldw	r3,-36(fp)
    b6c4:	00800044 	movi	r2,1
    b6c8:	10c4983a 	sll	r2,r2,r3
    b6cc:	1007883a 	mov	r3,r2
    b6d0:	00800074 	movhi	r2,1
    b6d4:	10997d04 	addi	r2,r2,26100
    b6d8:	10800017 	ldw	r2,0(r2)
    b6dc:	1886b03a 	or	r3,r3,r2
    b6e0:	00800074 	movhi	r2,1
    b6e4:	10997d04 	addi	r2,r2,26100
    b6e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b6ec:	00800074 	movhi	r2,1
    b6f0:	10997d04 	addi	r2,r2,26100
    b6f4:	10800017 	ldw	r2,0(r2)
    b6f8:	100170fa 	wrctl	ienable,r2
    b6fc:	e0bff817 	ldw	r2,-32(fp)
    b700:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b704:	e0bff517 	ldw	r2,-44(fp)
    b708:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b70c:	0005883a 	mov	r2,zero
    b710:	e0bfff15 	stw	r2,-4(fp)
    b714:	00002006 	br	b798 <alt_irq_register+0x194>
    b718:	e0bffc17 	ldw	r2,-16(fp)
    b71c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b720:	0005303a 	rdctl	r2,status
    b724:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b728:	e0fff217 	ldw	r3,-56(fp)
    b72c:	00bfff84 	movi	r2,-2
    b730:	1884703a 	and	r2,r3,r2
    b734:	1001703a 	wrctl	status,r2
  
  return context;
    b738:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b73c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    b740:	e0fff317 	ldw	r3,-52(fp)
    b744:	00800044 	movi	r2,1
    b748:	10c4983a 	sll	r2,r2,r3
    b74c:	0084303a 	nor	r2,zero,r2
    b750:	1007883a 	mov	r3,r2
    b754:	00800074 	movhi	r2,1
    b758:	10997d04 	addi	r2,r2,26100
    b75c:	10800017 	ldw	r2,0(r2)
    b760:	1886703a 	and	r3,r3,r2
    b764:	00800074 	movhi	r2,1
    b768:	10997d04 	addi	r2,r2,26100
    b76c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b770:	00800074 	movhi	r2,1
    b774:	10997d04 	addi	r2,r2,26100
    b778:	10800017 	ldw	r2,0(r2)
    b77c:	100170fa 	wrctl	ienable,r2
    b780:	e0bff417 	ldw	r2,-48(fp)
    b784:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b788:	e0bff117 	ldw	r2,-60(fp)
    b78c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b790:	0005883a 	mov	r2,zero
    b794:	e0bfff15 	stw	r2,-4(fp)
    b798:	e0bfff17 	ldw	r2,-4(fp)
    b79c:	e0bffb15 	stw	r2,-20(fp)
    b7a0:	e0bffa17 	ldw	r2,-24(fp)
    b7a4:	e0bff015 	stw	r2,-64(fp)
    b7a8:	e0bff017 	ldw	r2,-64(fp)
    b7ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    b7b0:	e0bffb17 	ldw	r2,-20(fp)
}
    b7b4:	e037883a 	mov	sp,fp
    b7b8:	df000017 	ldw	fp,0(sp)
    b7bc:	dec00104 	addi	sp,sp,4
    b7c0:	f800283a 	ret

0000b7c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b7c4:	deffeb04 	addi	sp,sp,-84
    b7c8:	dfc01415 	stw	ra,80(sp)
    b7cc:	df001315 	stw	fp,76(sp)
    b7d0:	df001304 	addi	fp,sp,76
    b7d4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7d8:	e0bffd17 	ldw	r2,-12(fp)
    b7dc:	1004803a 	cmplt	r2,r2,zero
    b7e0:	1000081e 	bne	r2,zero,b804 <isatty+0x40>
    b7e4:	e0bffd17 	ldw	r2,-12(fp)
    b7e8:	10800324 	muli	r2,r2,12
    b7ec:	1007883a 	mov	r3,r2
    b7f0:	00800074 	movhi	r2,1
    b7f4:	108c3604 	addi	r2,r2,12504
    b7f8:	1887883a 	add	r3,r3,r2
    b7fc:	e0ffff15 	stw	r3,-4(fp)
    b800:	00000106 	br	b808 <isatty+0x44>
    b804:	e03fff15 	stw	zero,-4(fp)
    b808:	e0bfff17 	ldw	r2,-4(fp)
    b80c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b810:	e0bfed17 	ldw	r2,-76(fp)
    b814:	1005003a 	cmpeq	r2,r2,zero
    b818:	10000f1e 	bne	r2,zero,b858 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b81c:	e0bfed17 	ldw	r2,-76(fp)
    b820:	10800017 	ldw	r2,0(r2)
    b824:	10800817 	ldw	r2,32(r2)
    b828:	1004c03a 	cmpne	r2,r2,zero
    b82c:	1000031e 	bne	r2,zero,b83c <isatty+0x78>
    {
      return 1;
    b830:	00800044 	movi	r2,1
    b834:	e0bffe15 	stw	r2,-8(fp)
    b838:	00000c06 	br	b86c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b83c:	e17fee04 	addi	r5,fp,-72
    b840:	e13ffd17 	ldw	r4,-12(fp)
    b844:	000b4d00 	call	b4d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b848:	e0bfef17 	ldw	r2,-68(fp)
    b84c:	10880020 	cmpeqi	r2,r2,8192
    b850:	e0bffe15 	stw	r2,-8(fp)
    b854:	00000506 	br	b86c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b858:	000b8840 	call	b884 <alt_get_errno>
    b85c:	1007883a 	mov	r3,r2
    b860:	00801444 	movi	r2,81
    b864:	18800015 	stw	r2,0(r3)
    return 0;
    b868:	e03ffe15 	stw	zero,-8(fp)
    b86c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b870:	e037883a 	mov	sp,fp
    b874:	dfc00117 	ldw	ra,4(sp)
    b878:	df000017 	ldw	fp,0(sp)
    b87c:	dec00204 	addi	sp,sp,8
    b880:	f800283a 	ret

0000b884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b884:	defffd04 	addi	sp,sp,-12
    b888:	dfc00215 	stw	ra,8(sp)
    b88c:	df000115 	stw	fp,4(sp)
    b890:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b894:	00800074 	movhi	r2,1
    b898:	1091a604 	addi	r2,r2,18072
    b89c:	10800017 	ldw	r2,0(r2)
    b8a0:	1005003a 	cmpeq	r2,r2,zero
    b8a4:	1000061e 	bne	r2,zero,b8c0 <alt_get_errno+0x3c>
    b8a8:	00800074 	movhi	r2,1
    b8ac:	1091a604 	addi	r2,r2,18072
    b8b0:	10800017 	ldw	r2,0(r2)
    b8b4:	103ee83a 	callr	r2
    b8b8:	e0bfff15 	stw	r2,-4(fp)
    b8bc:	00000306 	br	b8cc <alt_get_errno+0x48>
    b8c0:	00800074 	movhi	r2,1
    b8c4:	10997c04 	addi	r2,r2,26096
    b8c8:	e0bfff15 	stw	r2,-4(fp)
    b8cc:	e0bfff17 	ldw	r2,-4(fp)
}
    b8d0:	e037883a 	mov	sp,fp
    b8d4:	dfc00117 	ldw	ra,4(sp)
    b8d8:	df000017 	ldw	fp,0(sp)
    b8dc:	dec00204 	addi	sp,sp,8
    b8e0:	f800283a 	ret

0000b8e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b8e4:	defffe04 	addi	sp,sp,-8
    b8e8:	dfc00115 	stw	ra,4(sp)
    b8ec:	df000015 	stw	fp,0(sp)
    b8f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b8f4:	01000074 	movhi	r4,1
    b8f8:	2111ab04 	addi	r4,r4,18092
    b8fc:	01400074 	movhi	r5,1
    b900:	2949e704 	addi	r5,r5,10140
    b904:	01800074 	movhi	r6,1
    b908:	3191ab04 	addi	r6,r6,18092
    b90c:	000b9640 	call	b964 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b910:	01000034 	movhi	r4,0
    b914:	21000804 	addi	r4,r4,32
    b918:	01400034 	movhi	r5,0
    b91c:	29400804 	addi	r5,r5,32
    b920:	01800034 	movhi	r6,0
    b924:	31806e04 	addi	r6,r6,440
    b928:	000b9640 	call	b964 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b92c:	01000074 	movhi	r4,1
    b930:	2107c304 	addi	r4,r4,7948
    b934:	01400074 	movhi	r5,1
    b938:	2947c304 	addi	r5,r5,7948
    b93c:	01800074 	movhi	r6,1
    b940:	3189e704 	addi	r6,r6,10140
    b944:	000b9640 	call	b964 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b948:	0010b840 	call	10b84 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b94c:	0010e100 	call	10e10 <alt_icache_flush_all>
}
    b950:	e037883a 	mov	sp,fp
    b954:	dfc00117 	ldw	ra,4(sp)
    b958:	df000017 	ldw	fp,0(sp)
    b95c:	dec00204 	addi	sp,sp,8
    b960:	f800283a 	ret

0000b964 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b964:	defffc04 	addi	sp,sp,-16
    b968:	df000315 	stw	fp,12(sp)
    b96c:	df000304 	addi	fp,sp,12
    b970:	e13ffd15 	stw	r4,-12(fp)
    b974:	e17ffe15 	stw	r5,-8(fp)
    b978:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b97c:	e0fffe17 	ldw	r3,-8(fp)
    b980:	e0bffd17 	ldw	r2,-12(fp)
    b984:	18800e26 	beq	r3,r2,b9c0 <alt_load_section+0x5c>
  {
    while( to != end )
    b988:	00000a06 	br	b9b4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b98c:	e0bffd17 	ldw	r2,-12(fp)
    b990:	10c00017 	ldw	r3,0(r2)
    b994:	e0bffe17 	ldw	r2,-8(fp)
    b998:	10c00015 	stw	r3,0(r2)
    b99c:	e0bffe17 	ldw	r2,-8(fp)
    b9a0:	10800104 	addi	r2,r2,4
    b9a4:	e0bffe15 	stw	r2,-8(fp)
    b9a8:	e0bffd17 	ldw	r2,-12(fp)
    b9ac:	10800104 	addi	r2,r2,4
    b9b0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b9b4:	e0fffe17 	ldw	r3,-8(fp)
    b9b8:	e0bfff17 	ldw	r2,-4(fp)
    b9bc:	18bff31e 	bne	r3,r2,b98c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b9c0:	e037883a 	mov	sp,fp
    b9c4:	df000017 	ldw	fp,0(sp)
    b9c8:	dec00104 	addi	sp,sp,4
    b9cc:	f800283a 	ret

0000b9d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b9d0:	defff804 	addi	sp,sp,-32
    b9d4:	dfc00715 	stw	ra,28(sp)
    b9d8:	df000615 	stw	fp,24(sp)
    b9dc:	df000604 	addi	fp,sp,24
    b9e0:	e13ffc15 	stw	r4,-16(fp)
    b9e4:	e17ffd15 	stw	r5,-12(fp)
    b9e8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b9ec:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b9f0:	e0bffc17 	ldw	r2,-16(fp)
    b9f4:	1004803a 	cmplt	r2,r2,zero
    b9f8:	1000081e 	bne	r2,zero,ba1c <lseek+0x4c>
    b9fc:	e0bffc17 	ldw	r2,-16(fp)
    ba00:	10800324 	muli	r2,r2,12
    ba04:	1007883a 	mov	r3,r2
    ba08:	00800074 	movhi	r2,1
    ba0c:	108c3604 	addi	r2,r2,12504
    ba10:	1887883a 	add	r3,r3,r2
    ba14:	e0ffff15 	stw	r3,-4(fp)
    ba18:	00000106 	br	ba20 <lseek+0x50>
    ba1c:	e03fff15 	stw	zero,-4(fp)
    ba20:	e0bfff17 	ldw	r2,-4(fp)
    ba24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    ba28:	e0bffb17 	ldw	r2,-20(fp)
    ba2c:	1005003a 	cmpeq	r2,r2,zero
    ba30:	1000111e 	bne	r2,zero,ba78 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ba34:	e0bffb17 	ldw	r2,-20(fp)
    ba38:	10800017 	ldw	r2,0(r2)
    ba3c:	10800717 	ldw	r2,28(r2)
    ba40:	1005003a 	cmpeq	r2,r2,zero
    ba44:	1000091e 	bne	r2,zero,ba6c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ba48:	e0bffb17 	ldw	r2,-20(fp)
    ba4c:	10800017 	ldw	r2,0(r2)
    ba50:	10800717 	ldw	r2,28(r2)
    ba54:	e13ffb17 	ldw	r4,-20(fp)
    ba58:	e17ffd17 	ldw	r5,-12(fp)
    ba5c:	e1bffe17 	ldw	r6,-8(fp)
    ba60:	103ee83a 	callr	r2
    ba64:	e0bffa15 	stw	r2,-24(fp)
    ba68:	00000506 	br	ba80 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    ba6c:	00bfde84 	movi	r2,-134
    ba70:	e0bffa15 	stw	r2,-24(fp)
    ba74:	00000206 	br	ba80 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    ba78:	00bfebc4 	movi	r2,-81
    ba7c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    ba80:	e0bffa17 	ldw	r2,-24(fp)
    ba84:	1004403a 	cmpge	r2,r2,zero
    ba88:	1000071e 	bne	r2,zero,baa8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    ba8c:	000bac00 	call	bac0 <alt_get_errno>
    ba90:	1007883a 	mov	r3,r2
    ba94:	e0bffa17 	ldw	r2,-24(fp)
    ba98:	0085c83a 	sub	r2,zero,r2
    ba9c:	18800015 	stw	r2,0(r3)
    rc = -1;
    baa0:	00bfffc4 	movi	r2,-1
    baa4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    baa8:	e0bffa17 	ldw	r2,-24(fp)
}
    baac:	e037883a 	mov	sp,fp
    bab0:	dfc00117 	ldw	ra,4(sp)
    bab4:	df000017 	ldw	fp,0(sp)
    bab8:	dec00204 	addi	sp,sp,8
    babc:	f800283a 	ret

0000bac0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bac0:	defffd04 	addi	sp,sp,-12
    bac4:	dfc00215 	stw	ra,8(sp)
    bac8:	df000115 	stw	fp,4(sp)
    bacc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bad0:	00800074 	movhi	r2,1
    bad4:	1091a604 	addi	r2,r2,18072
    bad8:	10800017 	ldw	r2,0(r2)
    badc:	1005003a 	cmpeq	r2,r2,zero
    bae0:	1000061e 	bne	r2,zero,bafc <alt_get_errno+0x3c>
    bae4:	00800074 	movhi	r2,1
    bae8:	1091a604 	addi	r2,r2,18072
    baec:	10800017 	ldw	r2,0(r2)
    baf0:	103ee83a 	callr	r2
    baf4:	e0bfff15 	stw	r2,-4(fp)
    baf8:	00000306 	br	bb08 <alt_get_errno+0x48>
    bafc:	00800074 	movhi	r2,1
    bb00:	10997c04 	addi	r2,r2,26096
    bb04:	e0bfff15 	stw	r2,-4(fp)
    bb08:	e0bfff17 	ldw	r2,-4(fp)
}
    bb0c:	e037883a 	mov	sp,fp
    bb10:	dfc00117 	ldw	ra,4(sp)
    bb14:	df000017 	ldw	fp,0(sp)
    bb18:	dec00204 	addi	sp,sp,8
    bb1c:	f800283a 	ret

0000bb20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    bb20:	defffd04 	addi	sp,sp,-12
    bb24:	dfc00215 	stw	ra,8(sp)
    bb28:	df000115 	stw	fp,4(sp)
    bb2c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    bb30:	0009883a 	mov	r4,zero
    bb34:	000c2800 	call	c280 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    bb38:	000c2b40 	call	c2b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    bb3c:	01000074 	movhi	r4,1
    bb40:	21097d04 	addi	r4,r4,9716
    bb44:	01400074 	movhi	r5,1
    bb48:	29497d04 	addi	r5,r5,9716
    bb4c:	01800074 	movhi	r6,1
    bb50:	31897d04 	addi	r6,r6,9716
    bb54:	0010f040 	call	10f04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    bb58:	0010cb40 	call	10cb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    bb5c:	01000074 	movhi	r4,1
    bb60:	21034604 	addi	r4,r4,3352
    bb64:	00117c80 	call	117c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    bb68:	d127e317 	ldw	r4,-24692(gp)
    bb6c:	d167e417 	ldw	r5,-24688(gp)
    bb70:	d1a7e517 	ldw	r6,-24684(gp)
    bb74:	000076c0 	call	76c <main>
    bb78:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    bb7c:	01000044 	movi	r4,1
    bb80:	000b3480 	call	b348 <close>
  exit (result);
    bb84:	e13fff17 	ldw	r4,-4(fp)
    bb88:	00117dc0 	call	117dc <exit>

0000bb8c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    bb8c:	defffe04 	addi	sp,sp,-8
    bb90:	df000115 	stw	fp,4(sp)
    bb94:	df000104 	addi	fp,sp,4
    bb98:	e13fff15 	stw	r4,-4(fp)
}
    bb9c:	e037883a 	mov	sp,fp
    bba0:	df000017 	ldw	fp,0(sp)
    bba4:	dec00104 	addi	sp,sp,4
    bba8:	f800283a 	ret

0000bbac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    bbac:	defffe04 	addi	sp,sp,-8
    bbb0:	df000115 	stw	fp,4(sp)
    bbb4:	df000104 	addi	fp,sp,4
    bbb8:	e13fff15 	stw	r4,-4(fp)
}
    bbbc:	e037883a 	mov	sp,fp
    bbc0:	df000017 	ldw	fp,0(sp)
    bbc4:	dec00104 	addi	sp,sp,4
    bbc8:	f800283a 	ret

0000bbcc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    bbcc:	defff204 	addi	sp,sp,-56
    bbd0:	dfc00a15 	stw	ra,40(sp)
    bbd4:	df000915 	stw	fp,36(sp)
    bbd8:	df000904 	addi	fp,sp,36
    bbdc:	e1400215 	stw	r5,8(fp)
    bbe0:	e1800315 	stw	r6,12(fp)
    bbe4:	e1c00415 	stw	r7,16(fp)
    bbe8:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
    bbec:	e0800204 	addi	r2,fp,8
    bbf0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    bbf4:	e0bfff17 	ldw	r2,-4(fp)
    bbf8:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
    bbfc:	00007806 	br	bde0 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    bc00:	e0bffc07 	ldb	r2,-16(fp)
    bc04:	10800960 	cmpeqi	r2,r2,37
    bc08:	1000031e 	bne	r2,zero,bc18 <alt_printf+0x4c>
        {
            alt_putchar(c);
    bc0c:	e13ffc07 	ldb	r4,-16(fp)
    bc10:	000be240 	call	be24 <alt_putchar>
    bc14:	00007206 	br	bde0 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    bc18:	e0bffd17 	ldw	r2,-12(fp)
    bc1c:	10800003 	ldbu	r2,0(r2)
    bc20:	e0bffc05 	stb	r2,-16(fp)
    bc24:	e0bffc07 	ldb	r2,-16(fp)
    bc28:	1004c03a 	cmpne	r2,r2,zero
    bc2c:	1007883a 	mov	r3,r2
    bc30:	e0bffd17 	ldw	r2,-12(fp)
    bc34:	10800044 	addi	r2,r2,1
    bc38:	e0bffd15 	stw	r2,-12(fp)
    bc3c:	18803fcc 	andi	r2,r3,255
    bc40:	1005003a 	cmpeq	r2,r2,zero
    bc44:	1000721e 	bne	r2,zero,be10 <alt_printf+0x244>
            {
                if (c == '%')
    bc48:	e0bffc07 	ldb	r2,-16(fp)
    bc4c:	10800958 	cmpnei	r2,r2,37
    bc50:	1000031e 	bne	r2,zero,bc60 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    bc54:	e13ffc07 	ldb	r4,-16(fp)
    bc58:	000be240 	call	be24 <alt_putchar>
    bc5c:	00006006 	br	bde0 <alt_printf+0x214>
                } 
                else if (c == 'c')
    bc60:	e0bffc07 	ldb	r2,-16(fp)
    bc64:	108018d8 	cmpnei	r2,r2,99
    bc68:	1000091e 	bne	r2,zero,bc90 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
    bc6c:	e0fffe17 	ldw	r3,-8(fp)
    bc70:	18800104 	addi	r2,r3,4
    bc74:	e0bffe15 	stw	r2,-8(fp)
    bc78:	1805883a 	mov	r2,r3
    bc7c:	10800017 	ldw	r2,0(r2)
    bc80:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
    bc84:	e13ffb17 	ldw	r4,-20(fp)
    bc88:	000be240 	call	be24 <alt_putchar>
    bc8c:	00005406 	br	bde0 <alt_printf+0x214>
                }
                else if (c == 'x')
    bc90:	e0bffc07 	ldb	r2,-16(fp)
    bc94:	10801e18 	cmpnei	r2,r2,120
    bc98:	1000371e 	bne	r2,zero,bd78 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    bc9c:	e0fffe17 	ldw	r3,-8(fp)
    bca0:	18800104 	addi	r2,r3,4
    bca4:	e0bffe15 	stw	r2,-8(fp)
    bca8:	1805883a 	mov	r2,r3
    bcac:	10800017 	ldw	r2,0(r2)
    bcb0:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    bcb4:	e0bffa17 	ldw	r2,-24(fp)
    bcb8:	1004c03a 	cmpne	r2,r2,zero
    bcbc:	1000031e 	bne	r2,zero,bccc <alt_printf+0x100>
                    {
                        alt_putchar('0');
    bcc0:	01000c04 	movi	r4,48
    bcc4:	000be240 	call	be24 <alt_putchar>
                        continue;
    bcc8:	00004506 	br	bde0 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    bccc:	00800704 	movi	r2,28
    bcd0:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
    bcd4:	00000306 	br	bce4 <alt_printf+0x118>
                        digit_shift -= 4;
    bcd8:	e0bff817 	ldw	r2,-32(fp)
    bcdc:	10bfff04 	addi	r2,r2,-4
    bce0:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    bce4:	00c003c4 	movi	r3,15
    bce8:	e0bff817 	ldw	r2,-32(fp)
    bcec:	1884983a 	sll	r2,r3,r2
    bcf0:	1007883a 	mov	r3,r2
    bcf4:	e0bffa17 	ldw	r2,-24(fp)
    bcf8:	1884703a 	and	r2,r3,r2
    bcfc:	1005003a 	cmpeq	r2,r2,zero
    bd00:	103ff51e 	bne	r2,zero,bcd8 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bd04:	00001806 	br	bd68 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    bd08:	00c003c4 	movi	r3,15
    bd0c:	e0bff817 	ldw	r2,-32(fp)
    bd10:	1884983a 	sll	r2,r3,r2
    bd14:	1007883a 	mov	r3,r2
    bd18:	e0bffa17 	ldw	r2,-24(fp)
    bd1c:	1886703a 	and	r3,r3,r2
    bd20:	e0bff817 	ldw	r2,-32(fp)
    bd24:	1884d83a 	srl	r2,r3,r2
    bd28:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
    bd2c:	e0bff917 	ldw	r2,-28(fp)
    bd30:	108002a8 	cmpgeui	r2,r2,10
    bd34:	1000041e 	bne	r2,zero,bd48 <alt_printf+0x17c>
                            c = '0' + digit;
    bd38:	e0bff917 	ldw	r2,-28(fp)
    bd3c:	10800c04 	addi	r2,r2,48
    bd40:	e0bffc05 	stb	r2,-16(fp)
    bd44:	00000306 	br	bd54 <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
    bd48:	e0bff917 	ldw	r2,-28(fp)
    bd4c:	108015c4 	addi	r2,r2,87
    bd50:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
    bd54:	e13ffc07 	ldb	r4,-16(fp)
    bd58:	000be240 	call	be24 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    bd5c:	e0bff817 	ldw	r2,-32(fp)
    bd60:	10bfff04 	addi	r2,r2,-4
    bd64:	e0bff815 	stw	r2,-32(fp)
    bd68:	e0bff817 	ldw	r2,-32(fp)
    bd6c:	1004403a 	cmpge	r2,r2,zero
    bd70:	103fe51e 	bne	r2,zero,bd08 <alt_printf+0x13c>
    bd74:	00001a06 	br	bde0 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    bd78:	e0bffc07 	ldb	r2,-16(fp)
    bd7c:	10801cd8 	cmpnei	r2,r2,115
    bd80:	1000171e 	bne	r2,zero,bde0 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    bd84:	e0fffe17 	ldw	r3,-8(fp)
    bd88:	18800104 	addi	r2,r3,4
    bd8c:	e0bffe15 	stw	r2,-8(fp)
    bd90:	1805883a 	mov	r2,r3
    bd94:	10800017 	ldw	r2,0(r2)
    bd98:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
    bd9c:	00000906 	br	bdc4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
    bda0:	e0bff717 	ldw	r2,-36(fp)
    bda4:	10800003 	ldbu	r2,0(r2)
    bda8:	11003fcc 	andi	r4,r2,255
    bdac:	2100201c 	xori	r4,r4,128
    bdb0:	213fe004 	addi	r4,r4,-128
    bdb4:	e0bff717 	ldw	r2,-36(fp)
    bdb8:	10800044 	addi	r2,r2,1
    bdbc:	e0bff715 	stw	r2,-36(fp)
    bdc0:	000be240 	call	be24 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    bdc4:	e0bff717 	ldw	r2,-36(fp)
    bdc8:	10800003 	ldbu	r2,0(r2)
    bdcc:	10803fcc 	andi	r2,r2,255
    bdd0:	1080201c 	xori	r2,r2,128
    bdd4:	10bfe004 	addi	r2,r2,-128
    bdd8:	1004c03a 	cmpne	r2,r2,zero
    bddc:	103ff01e 	bne	r2,zero,bda0 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    bde0:	e0bffd17 	ldw	r2,-12(fp)
    bde4:	10800003 	ldbu	r2,0(r2)
    bde8:	e0bffc05 	stb	r2,-16(fp)
    bdec:	e0bffc07 	ldb	r2,-16(fp)
    bdf0:	1004c03a 	cmpne	r2,r2,zero
    bdf4:	1007883a 	mov	r3,r2
    bdf8:	e0bffd17 	ldw	r2,-12(fp)
    bdfc:	10800044 	addi	r2,r2,1
    be00:	e0bffd15 	stw	r2,-12(fp)
    be04:	18803fcc 	andi	r2,r3,255
    be08:	1004c03a 	cmpne	r2,r2,zero
    be0c:	103f7c1e 	bne	r2,zero,bc00 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
    be10:	e037883a 	mov	sp,fp
    be14:	dfc00117 	ldw	ra,4(sp)
    be18:	df000017 	ldw	fp,0(sp)
    be1c:	dec00504 	addi	sp,sp,20
    be20:	f800283a 	ret

0000be24 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    be24:	defffd04 	addi	sp,sp,-12
    be28:	dfc00215 	stw	ra,8(sp)
    be2c:	df000115 	stw	fp,4(sp)
    be30:	df000104 	addi	fp,sp,4
    be34:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    be38:	00800074 	movhi	r2,1
    be3c:	10919b04 	addi	r2,r2,18028
    be40:	10800017 	ldw	r2,0(r2)
    be44:	11400217 	ldw	r5,8(r2)
    be48:	e13fff17 	ldw	r4,-4(fp)
    be4c:	00118880 	call	11888 <putc>
#endif
}
    be50:	e037883a 	mov	sp,fp
    be54:	dfc00117 	ldw	ra,4(sp)
    be58:	df000017 	ldw	fp,0(sp)
    be5c:	dec00204 	addi	sp,sp,8
    be60:	f800283a 	ret

0000be64 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    be64:	defff704 	addi	sp,sp,-36
    be68:	dfc00815 	stw	ra,32(sp)
    be6c:	df000715 	stw	fp,28(sp)
    be70:	df000704 	addi	fp,sp,28
    be74:	e13ffb15 	stw	r4,-20(fp)
    be78:	e17ffc15 	stw	r5,-16(fp)
    be7c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    be80:	e0bffb17 	ldw	r2,-20(fp)
    be84:	1004803a 	cmplt	r2,r2,zero
    be88:	1000081e 	bne	r2,zero,beac <read+0x48>
    be8c:	e0bffb17 	ldw	r2,-20(fp)
    be90:	10800324 	muli	r2,r2,12
    be94:	1007883a 	mov	r3,r2
    be98:	00800074 	movhi	r2,1
    be9c:	108c3604 	addi	r2,r2,12504
    bea0:	1887883a 	add	r3,r3,r2
    bea4:	e0ffff15 	stw	r3,-4(fp)
    bea8:	00000106 	br	beb0 <read+0x4c>
    beac:	e03fff15 	stw	zero,-4(fp)
    beb0:	e0bfff17 	ldw	r2,-4(fp)
    beb4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    beb8:	e0bffa17 	ldw	r2,-24(fp)
    bebc:	1005003a 	cmpeq	r2,r2,zero
    bec0:	1000241e 	bne	r2,zero,bf54 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    bec4:	e0bffa17 	ldw	r2,-24(fp)
    bec8:	10800217 	ldw	r2,8(r2)
    becc:	108000cc 	andi	r2,r2,3
    bed0:	10800060 	cmpeqi	r2,r2,1
    bed4:	10001a1e 	bne	r2,zero,bf40 <read+0xdc>
    bed8:	e0bffa17 	ldw	r2,-24(fp)
    bedc:	10800017 	ldw	r2,0(r2)
    bee0:	10800517 	ldw	r2,20(r2)
    bee4:	1005003a 	cmpeq	r2,r2,zero
    bee8:	1000151e 	bne	r2,zero,bf40 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    beec:	e0bffa17 	ldw	r2,-24(fp)
    bef0:	10800017 	ldw	r2,0(r2)
    bef4:	10800517 	ldw	r2,20(r2)
    bef8:	e17ffc17 	ldw	r5,-16(fp)
    befc:	e1bffd17 	ldw	r6,-12(fp)
    bf00:	e13ffa17 	ldw	r4,-24(fp)
    bf04:	103ee83a 	callr	r2
    bf08:	e0bff915 	stw	r2,-28(fp)
    bf0c:	e0bff917 	ldw	r2,-28(fp)
    bf10:	1004403a 	cmpge	r2,r2,zero
    bf14:	1000071e 	bne	r2,zero,bf34 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    bf18:	000bf840 	call	bf84 <alt_get_errno>
    bf1c:	e0fff917 	ldw	r3,-28(fp)
    bf20:	00c7c83a 	sub	r3,zero,r3
    bf24:	10c00015 	stw	r3,0(r2)
          return -1;
    bf28:	00bfffc4 	movi	r2,-1
    bf2c:	e0bffe15 	stw	r2,-8(fp)
    bf30:	00000e06 	br	bf6c <read+0x108>
        }
        return rval;
    bf34:	e0bff917 	ldw	r2,-28(fp)
    bf38:	e0bffe15 	stw	r2,-8(fp)
    bf3c:	00000b06 	br	bf6c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    bf40:	000bf840 	call	bf84 <alt_get_errno>
    bf44:	1007883a 	mov	r3,r2
    bf48:	00800344 	movi	r2,13
    bf4c:	18800015 	stw	r2,0(r3)
    bf50:	00000406 	br	bf64 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    bf54:	000bf840 	call	bf84 <alt_get_errno>
    bf58:	1007883a 	mov	r3,r2
    bf5c:	00801444 	movi	r2,81
    bf60:	18800015 	stw	r2,0(r3)
  }
  return -1;
    bf64:	00bfffc4 	movi	r2,-1
    bf68:	e0bffe15 	stw	r2,-8(fp)
    bf6c:	e0bffe17 	ldw	r2,-8(fp)
}
    bf70:	e037883a 	mov	sp,fp
    bf74:	dfc00117 	ldw	ra,4(sp)
    bf78:	df000017 	ldw	fp,0(sp)
    bf7c:	dec00204 	addi	sp,sp,8
    bf80:	f800283a 	ret

0000bf84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf84:	defffd04 	addi	sp,sp,-12
    bf88:	dfc00215 	stw	ra,8(sp)
    bf8c:	df000115 	stw	fp,4(sp)
    bf90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bf94:	00800074 	movhi	r2,1
    bf98:	1091a604 	addi	r2,r2,18072
    bf9c:	10800017 	ldw	r2,0(r2)
    bfa0:	1005003a 	cmpeq	r2,r2,zero
    bfa4:	1000061e 	bne	r2,zero,bfc0 <alt_get_errno+0x3c>
    bfa8:	00800074 	movhi	r2,1
    bfac:	1091a604 	addi	r2,r2,18072
    bfb0:	10800017 	ldw	r2,0(r2)
    bfb4:	103ee83a 	callr	r2
    bfb8:	e0bfff15 	stw	r2,-4(fp)
    bfbc:	00000306 	br	bfcc <alt_get_errno+0x48>
    bfc0:	00800074 	movhi	r2,1
    bfc4:	10997c04 	addi	r2,r2,26096
    bfc8:	e0bfff15 	stw	r2,-4(fp)
    bfcc:	e0bfff17 	ldw	r2,-4(fp)
}
    bfd0:	e037883a 	mov	sp,fp
    bfd4:	dfc00117 	ldw	ra,4(sp)
    bfd8:	df000017 	ldw	fp,0(sp)
    bfdc:	dec00204 	addi	sp,sp,8
    bfe0:	f800283a 	ret

0000bfe4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    bfe4:	defffe04 	addi	sp,sp,-8
    bfe8:	df000115 	stw	fp,4(sp)
    bfec:	df000104 	addi	fp,sp,4
    bff0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    bff4:	e0bfff17 	ldw	r2,-4(fp)
    bff8:	108000d0 	cmplti	r2,r2,3
    bffc:	10000d1e 	bne	r2,zero,c034 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c000:	e0bfff17 	ldw	r2,-4(fp)
    c004:	00c00074 	movhi	r3,1
    c008:	18cc3604 	addi	r3,r3,12504
    c00c:	10800324 	muli	r2,r2,12
    c010:	10c5883a 	add	r2,r2,r3
    c014:	10800204 	addi	r2,r2,8
    c018:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c01c:	e0bfff17 	ldw	r2,-4(fp)
    c020:	00c00074 	movhi	r3,1
    c024:	18cc3604 	addi	r3,r3,12504
    c028:	10800324 	muli	r2,r2,12
    c02c:	10c5883a 	add	r2,r2,r3
    c030:	10000015 	stw	zero,0(r2)
  }
}
    c034:	e037883a 	mov	sp,fp
    c038:	df000017 	ldw	fp,0(sp)
    c03c:	dec00104 	addi	sp,sp,4
    c040:	f800283a 	ret

0000c044 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    c044:	defff804 	addi	sp,sp,-32
    c048:	df000715 	stw	fp,28(sp)
    c04c:	df000704 	addi	fp,sp,28
    c050:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c054:	0005303a 	rdctl	r2,status
    c058:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c05c:	e0fffb17 	ldw	r3,-20(fp)
    c060:	00bfff84 	movi	r2,-2
    c064:	1884703a 	and	r2,r3,r2
    c068:	1001703a 	wrctl	status,r2
  
  return context;
    c06c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    c070:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    c074:	d0a00d17 	ldw	r2,-32716(gp)
    c078:	10c000c4 	addi	r3,r2,3
    c07c:	00bfff04 	movi	r2,-4
    c080:	1884703a 	and	r2,r3,r2
    c084:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    c088:	d0e00d17 	ldw	r3,-32716(gp)
    c08c:	e0bffe17 	ldw	r2,-8(fp)
    c090:	1887883a 	add	r3,r3,r2
    c094:	00802034 	movhi	r2,128
    c098:	10800004 	addi	r2,r2,0
    c09c:	10c0072e 	bgeu	r2,r3,c0bc <sbrk+0x78>
    c0a0:	e0bffd17 	ldw	r2,-12(fp)
    c0a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c0a8:	e0bffa17 	ldw	r2,-24(fp)
    c0ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    c0b0:	00bfffc4 	movi	r2,-1
    c0b4:	e0bfff15 	stw	r2,-4(fp)
    c0b8:	00000c06 	br	c0ec <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    c0bc:	d0a00d17 	ldw	r2,-32716(gp)
    c0c0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    c0c4:	d0e00d17 	ldw	r3,-32716(gp)
    c0c8:	e0bffe17 	ldw	r2,-8(fp)
    c0cc:	1885883a 	add	r2,r3,r2
    c0d0:	d0a00d15 	stw	r2,-32716(gp)
    c0d4:	e0bffd17 	ldw	r2,-12(fp)
    c0d8:	e0bff915 	stw	r2,-28(fp)
    c0dc:	e0bff917 	ldw	r2,-28(fp)
    c0e0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    c0e4:	e0bffc17 	ldw	r2,-16(fp)
    c0e8:	e0bfff15 	stw	r2,-4(fp)
    c0ec:	e0bfff17 	ldw	r2,-4(fp)
} 
    c0f0:	e037883a 	mov	sp,fp
    c0f4:	df000017 	ldw	fp,0(sp)
    c0f8:	dec00104 	addi	sp,sp,4
    c0fc:	f800283a 	ret

0000c100 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c100:	defff704 	addi	sp,sp,-36
    c104:	dfc00815 	stw	ra,32(sp)
    c108:	df000715 	stw	fp,28(sp)
    c10c:	df000704 	addi	fp,sp,28
    c110:	e13ffb15 	stw	r4,-20(fp)
    c114:	e17ffc15 	stw	r5,-16(fp)
    c118:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c11c:	e0bffb17 	ldw	r2,-20(fp)
    c120:	1004803a 	cmplt	r2,r2,zero
    c124:	1000081e 	bne	r2,zero,c148 <write+0x48>
    c128:	e0bffb17 	ldw	r2,-20(fp)
    c12c:	10800324 	muli	r2,r2,12
    c130:	1007883a 	mov	r3,r2
    c134:	00800074 	movhi	r2,1
    c138:	108c3604 	addi	r2,r2,12504
    c13c:	1887883a 	add	r3,r3,r2
    c140:	e0ffff15 	stw	r3,-4(fp)
    c144:	00000106 	br	c14c <write+0x4c>
    c148:	e03fff15 	stw	zero,-4(fp)
    c14c:	e0bfff17 	ldw	r2,-4(fp)
    c150:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c154:	e0bffa17 	ldw	r2,-24(fp)
    c158:	1005003a 	cmpeq	r2,r2,zero
    c15c:	1000241e 	bne	r2,zero,c1f0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c160:	e0bffa17 	ldw	r2,-24(fp)
    c164:	10800217 	ldw	r2,8(r2)
    c168:	108000cc 	andi	r2,r2,3
    c16c:	1005003a 	cmpeq	r2,r2,zero
    c170:	10001a1e 	bne	r2,zero,c1dc <write+0xdc>
    c174:	e0bffa17 	ldw	r2,-24(fp)
    c178:	10800017 	ldw	r2,0(r2)
    c17c:	10800617 	ldw	r2,24(r2)
    c180:	1005003a 	cmpeq	r2,r2,zero
    c184:	1000151e 	bne	r2,zero,c1dc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c188:	e0bffa17 	ldw	r2,-24(fp)
    c18c:	10800017 	ldw	r2,0(r2)
    c190:	10800617 	ldw	r2,24(r2)
    c194:	e17ffc17 	ldw	r5,-16(fp)
    c198:	e1bffd17 	ldw	r6,-12(fp)
    c19c:	e13ffa17 	ldw	r4,-24(fp)
    c1a0:	103ee83a 	callr	r2
    c1a4:	e0bff915 	stw	r2,-28(fp)
    c1a8:	e0bff917 	ldw	r2,-28(fp)
    c1ac:	1004403a 	cmpge	r2,r2,zero
    c1b0:	1000071e 	bne	r2,zero,c1d0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    c1b4:	000c2200 	call	c220 <alt_get_errno>
    c1b8:	e0fff917 	ldw	r3,-28(fp)
    c1bc:	00c7c83a 	sub	r3,zero,r3
    c1c0:	10c00015 	stw	r3,0(r2)
        return -1;
    c1c4:	00bfffc4 	movi	r2,-1
    c1c8:	e0bffe15 	stw	r2,-8(fp)
    c1cc:	00000e06 	br	c208 <write+0x108>
      }
      return rval;
    c1d0:	e0bff917 	ldw	r2,-28(fp)
    c1d4:	e0bffe15 	stw	r2,-8(fp)
    c1d8:	00000b06 	br	c208 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c1dc:	000c2200 	call	c220 <alt_get_errno>
    c1e0:	1007883a 	mov	r3,r2
    c1e4:	00800344 	movi	r2,13
    c1e8:	18800015 	stw	r2,0(r3)
    c1ec:	00000406 	br	c200 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c1f0:	000c2200 	call	c220 <alt_get_errno>
    c1f4:	1007883a 	mov	r3,r2
    c1f8:	00801444 	movi	r2,81
    c1fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c200:	00bfffc4 	movi	r2,-1
    c204:	e0bffe15 	stw	r2,-8(fp)
    c208:	e0bffe17 	ldw	r2,-8(fp)
}
    c20c:	e037883a 	mov	sp,fp
    c210:	dfc00117 	ldw	ra,4(sp)
    c214:	df000017 	ldw	fp,0(sp)
    c218:	dec00204 	addi	sp,sp,8
    c21c:	f800283a 	ret

0000c220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c220:	defffd04 	addi	sp,sp,-12
    c224:	dfc00215 	stw	ra,8(sp)
    c228:	df000115 	stw	fp,4(sp)
    c22c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c230:	00800074 	movhi	r2,1
    c234:	1091a604 	addi	r2,r2,18072
    c238:	10800017 	ldw	r2,0(r2)
    c23c:	1005003a 	cmpeq	r2,r2,zero
    c240:	1000061e 	bne	r2,zero,c25c <alt_get_errno+0x3c>
    c244:	00800074 	movhi	r2,1
    c248:	1091a604 	addi	r2,r2,18072
    c24c:	10800017 	ldw	r2,0(r2)
    c250:	103ee83a 	callr	r2
    c254:	e0bfff15 	stw	r2,-4(fp)
    c258:	00000306 	br	c268 <alt_get_errno+0x48>
    c25c:	00800074 	movhi	r2,1
    c260:	10997c04 	addi	r2,r2,26096
    c264:	e0bfff15 	stw	r2,-4(fp)
    c268:	e0bfff17 	ldw	r2,-4(fp)
}
    c26c:	e037883a 	mov	sp,fp
    c270:	dfc00117 	ldw	ra,4(sp)
    c274:	df000017 	ldw	fp,0(sp)
    c278:	dec00204 	addi	sp,sp,8
    c27c:	f800283a 	ret

0000c280 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c280:	defffd04 	addi	sp,sp,-12
    c284:	dfc00215 	stw	ra,8(sp)
    c288:	df000115 	stw	fp,4(sp)
    c28c:	df000104 	addi	fp,sp,4
    c290:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    c294:	00114140 	call	11414 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c298:	00800044 	movi	r2,1
    c29c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c2a0:	e037883a 	mov	sp,fp
    c2a4:	dfc00117 	ldw	ra,4(sp)
    c2a8:	df000017 	ldw	fp,0(sp)
    c2ac:	dec00204 	addi	sp,sp,8
    c2b0:	f800283a 	ret

0000c2b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c2b4:	defffd04 	addi	sp,sp,-12
    c2b8:	dfc00215 	stw	ra,8(sp)
    c2bc:	df000115 	stw	fp,4(sp)
    c2c0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    c2c4:	01040034 	movhi	r4,4096
    c2c8:	21080004 	addi	r4,r4,8192
    c2cc:	000b883a 	mov	r5,zero
    c2d0:	000d883a 	mov	r6,zero
    c2d4:	01c00204 	movi	r7,8
    c2d8:	000d2080 	call	d208 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    c2dc:	01000074 	movhi	r4,1
    c2e0:	210ca004 	addi	r4,r4,12928
    c2e4:	000b883a 	mov	r5,zero
    c2e8:	01800204 	movi	r6,8
    c2ec:	000c8340 	call	c834 <altera_avalon_jtag_uart_init>
    c2f0:	01000074 	movhi	r4,1
    c2f4:	210c9604 	addi	r4,r4,12888
    c2f8:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    c2fc:	01000074 	movhi	r4,1
    c300:	2110ae04 	addi	r4,r4,17080
    c304:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    c308:	01000074 	movhi	r4,1
    c30c:	2110ba04 	addi	r4,r4,17128
    c310:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    c314:	01000074 	movhi	r4,1
    c318:	2110c604 	addi	r4,r4,17176
    c31c:	000db4c0 	call	db4c <alt_up_character_lcd_init>
    c320:	01000074 	movhi	r4,1
    c324:	2110c604 	addi	r4,r4,17176
    c328:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_ETHERNET_INIT ( ETHERNET, Ethernet);
    c32c:	01000074 	movhi	r4,1
    c330:	2110d104 	addi	r4,r4,17220
    c334:	000dfcc0 	call	dfcc <alt_up_ethernet_init>
    c338:	01000074 	movhi	r4,1
    c33c:	2110d104 	addi	r4,r4,17220
    c340:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA_UART, IrDA_UART);
    c344:	01000074 	movhi	r4,1
    c348:	2110e004 	addi	r4,r4,17280
    c34c:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP1, Expansion_JP1);
    c350:	01000074 	movhi	r4,1
    c354:	2110eb04 	addi	r4,r4,17324
    c358:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP2, Expansion_JP2);
    c35c:	01000074 	movhi	r4,1
    c360:	2110f604 	addi	r4,r4,17368
    c364:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    c368:	01000074 	movhi	r4,1
    c36c:	21110104 	addi	r4,r4,17412
    c370:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    c374:	01000074 	movhi	r4,1
    c378:	21110c04 	addi	r4,r4,17456
    c37c:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    c380:	01000074 	movhi	r4,1
    c384:	21111704 	addi	r4,r4,17500
    c388:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    c38c:	01000074 	movhi	r4,1
    c390:	21112204 	addi	r4,r4,17544
    c394:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    c398:	01000074 	movhi	r4,1
    c39c:	21112d04 	addi	r4,r4,17588
    c3a0:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    c3a4:	01000074 	movhi	r4,1
    c3a8:	21113804 	addi	r4,r4,17632
    c3ac:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    c3b0:	01000074 	movhi	r4,1
    c3b4:	21114304 	addi	r4,r4,17676
    c3b8:	000e8540 	call	e854 <alt_up_ps2_init>
    c3bc:	01000074 	movhi	r4,1
    c3c0:	21114304 	addi	r4,r4,17676
    c3c4:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    c3c8:	01000074 	movhi	r4,1
    c3cc:	21115104 	addi	r4,r4,17732
    c3d0:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    c3d4:	01000074 	movhi	r4,1
    c3d8:	21115c04 	addi	r4,r4,17776
    c3dc:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    c3e0:	00800074 	movhi	r2,1
    c3e4:	10916904 	addi	r2,r2,17828
    c3e8:	10800a17 	ldw	r2,40(r2)
    c3ec:	10800104 	addi	r2,r2,4
    c3f0:	10800017 	ldw	r2,0(r2)
    c3f4:	10ffffcc 	andi	r3,r2,65535
    c3f8:	00800074 	movhi	r2,1
    c3fc:	10916904 	addi	r2,r2,17828
    c400:	10c00c15 	stw	r3,48(r2)
    c404:	00800074 	movhi	r2,1
    c408:	10916904 	addi	r2,r2,17828
    c40c:	10800a17 	ldw	r2,40(r2)
    c410:	10800104 	addi	r2,r2,4
    c414:	10800017 	ldw	r2,0(r2)
    c418:	1005d43a 	srai	r2,r2,16
    c41c:	10ffffcc 	andi	r3,r2,65535
    c420:	00800074 	movhi	r2,1
    c424:	10916904 	addi	r2,r2,17828
    c428:	10c00d15 	stw	r3,52(r2)
    c42c:	00800074 	movhi	r2,1
    c430:	10916904 	addi	r2,r2,17828
    c434:	10800c17 	ldw	r2,48(r2)
    c438:	10801068 	cmpgeui	r2,r2,65
    c43c:	1000081e 	bne	r2,zero,c460 <alt_sys_init+0x1ac>
    c440:	00c00074 	movhi	r3,1
    c444:	18d16904 	addi	r3,r3,17828
    c448:	00800fc4 	movi	r2,63
    c44c:	18800f15 	stw	r2,60(r3)
    c450:	00c00074 	movhi	r3,1
    c454:	18d16904 	addi	r3,r3,17828
    c458:	00800184 	movi	r2,6
    c45c:	18801015 	stw	r2,64(r3)
    c460:	00800074 	movhi	r2,1
    c464:	10916904 	addi	r2,r2,17828
    c468:	10800d17 	ldw	r2,52(r2)
    c46c:	10800868 	cmpgeui	r2,r2,33
    c470:	1000041e 	bne	r2,zero,c484 <alt_sys_init+0x1d0>
    c474:	00c00074 	movhi	r3,1
    c478:	18d16904 	addi	r3,r3,17828
    c47c:	008007c4 	movi	r2,31
    c480:	18801115 	stw	r2,68(r3)
    c484:	01000074 	movhi	r4,1
    c488:	21116904 	addi	r4,r4,17828
    c48c:	000f1c00 	call	f1c0 <alt_up_char_buffer_init>
    c490:	01000074 	movhi	r4,1
    c494:	21116904 	addi	r4,r4,17828
    c498:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    c49c:	00800074 	movhi	r2,1
    c4a0:	10917b04 	addi	r2,r2,17900
    c4a4:	10800a17 	ldw	r2,40(r2)
    c4a8:	10800017 	ldw	r2,0(r2)
    c4ac:	1007883a 	mov	r3,r2
    c4b0:	00800074 	movhi	r2,1
    c4b4:	10917b04 	addi	r2,r2,17900
    c4b8:	10c00b15 	stw	r3,44(r2)
    c4bc:	00800074 	movhi	r2,1
    c4c0:	10917b04 	addi	r2,r2,17900
    c4c4:	10800a17 	ldw	r2,40(r2)
    c4c8:	10800104 	addi	r2,r2,4
    c4cc:	10800017 	ldw	r2,0(r2)
    c4d0:	1007883a 	mov	r3,r2
    c4d4:	00800074 	movhi	r2,1
    c4d8:	10917b04 	addi	r2,r2,17900
    c4dc:	10c00c15 	stw	r3,48(r2)
    c4e0:	00800074 	movhi	r2,1
    c4e4:	10917b04 	addi	r2,r2,17900
    c4e8:	10800a17 	ldw	r2,40(r2)
    c4ec:	10800204 	addi	r2,r2,8
    c4f0:	10800017 	ldw	r2,0(r2)
    c4f4:	10ffffcc 	andi	r3,r2,65535
    c4f8:	00800074 	movhi	r2,1
    c4fc:	10917b04 	addi	r2,r2,17900
    c500:	10c00f15 	stw	r3,60(r2)
    c504:	00800074 	movhi	r2,1
    c508:	10917b04 	addi	r2,r2,17900
    c50c:	10800a17 	ldw	r2,40(r2)
    c510:	10800204 	addi	r2,r2,8
    c514:	10800017 	ldw	r2,0(r2)
    c518:	1005d43a 	srai	r2,r2,16
    c51c:	10ffffcc 	andi	r3,r2,65535
    c520:	00800074 	movhi	r2,1
    c524:	10917b04 	addi	r2,r2,17900
    c528:	10c01015 	stw	r3,64(r2)
    c52c:	00800074 	movhi	r2,1
    c530:	10917b04 	addi	r2,r2,17900
    c534:	10800a17 	ldw	r2,40(r2)
    c538:	10800304 	addi	r2,r2,12
    c53c:	10800017 	ldw	r2,0(r2)
    c540:	1005d07a 	srai	r2,r2,1
    c544:	10c0004c 	andi	r3,r2,1
    c548:	00800074 	movhi	r2,1
    c54c:	10917b04 	addi	r2,r2,17900
    c550:	10c00d15 	stw	r3,52(r2)
    c554:	00800074 	movhi	r2,1
    c558:	10917b04 	addi	r2,r2,17900
    c55c:	10800a17 	ldw	r2,40(r2)
    c560:	10800304 	addi	r2,r2,12
    c564:	10800017 	ldw	r2,0(r2)
    c568:	1005d13a 	srai	r2,r2,4
    c56c:	10c003cc 	andi	r3,r2,15
    c570:	00800074 	movhi	r2,1
    c574:	10917b04 	addi	r2,r2,17900
    c578:	10c00e15 	stw	r3,56(r2)
    c57c:	00800074 	movhi	r2,1
    c580:	10917b04 	addi	r2,r2,17900
    c584:	10800a17 	ldw	r2,40(r2)
    c588:	10800304 	addi	r2,r2,12
    c58c:	10800017 	ldw	r2,0(r2)
    c590:	1005d43a 	srai	r2,r2,16
    c594:	1007883a 	mov	r3,r2
    c598:	00bfffc4 	movi	r2,-1
    c59c:	1884703a 	and	r2,r3,r2
    c5a0:	e0bfff45 	stb	r2,-3(fp)
    c5a4:	00800074 	movhi	r2,1
    c5a8:	10917b04 	addi	r2,r2,17900
    c5ac:	10800a17 	ldw	r2,40(r2)
    c5b0:	10800304 	addi	r2,r2,12
    c5b4:	10800017 	ldw	r2,0(r2)
    c5b8:	1005d63a 	srai	r2,r2,24
    c5bc:	1007883a 	mov	r3,r2
    c5c0:	00bfffc4 	movi	r2,-1
    c5c4:	1884703a 	and	r2,r3,r2
    c5c8:	e0bfff05 	stb	r2,-4(fp)
    c5cc:	00800074 	movhi	r2,1
    c5d0:	10917b04 	addi	r2,r2,17900
    c5d4:	10800e17 	ldw	r2,56(r2)
    c5d8:	10800058 	cmpnei	r2,r2,1
    c5dc:	1000041e 	bne	r2,zero,c5f0 <alt_sys_init+0x33c>
    c5e0:	00800074 	movhi	r2,1
    c5e4:	10917b04 	addi	r2,r2,17900
    c5e8:	10001115 	stw	zero,68(r2)
    c5ec:	00000e06 	br	c628 <alt_sys_init+0x374>
    c5f0:	00800074 	movhi	r2,1
    c5f4:	10917b04 	addi	r2,r2,17900
    c5f8:	10800e17 	ldw	r2,56(r2)
    c5fc:	10800098 	cmpnei	r2,r2,2
    c600:	1000051e 	bne	r2,zero,c618 <alt_sys_init+0x364>
    c604:	00c00074 	movhi	r3,1
    c608:	18d17b04 	addi	r3,r3,17900
    c60c:	00800044 	movi	r2,1
    c610:	18801115 	stw	r2,68(r3)
    c614:	00000406 	br	c628 <alt_sys_init+0x374>
    c618:	00c00074 	movhi	r3,1
    c61c:	18d17b04 	addi	r3,r3,17900
    c620:	00800084 	movi	r2,2
    c624:	18801115 	stw	r2,68(r3)
    c628:	e0ffff43 	ldbu	r3,-3(fp)
    c62c:	00800804 	movi	r2,32
    c630:	10c7c83a 	sub	r3,r2,r3
    c634:	00bfffc4 	movi	r2,-1
    c638:	10c6d83a 	srl	r3,r2,r3
    c63c:	00800074 	movhi	r2,1
    c640:	10917b04 	addi	r2,r2,17900
    c644:	10c01215 	stw	r3,72(r2)
    c648:	e0ffff43 	ldbu	r3,-3(fp)
    c64c:	00800074 	movhi	r2,1
    c650:	10917b04 	addi	r2,r2,17900
    c654:	10801117 	ldw	r2,68(r2)
    c658:	1887883a 	add	r3,r3,r2
    c65c:	00800074 	movhi	r2,1
    c660:	10917b04 	addi	r2,r2,17900
    c664:	10c01315 	stw	r3,76(r2)
    c668:	e0ffff03 	ldbu	r3,-4(fp)
    c66c:	00800804 	movi	r2,32
    c670:	10c7c83a 	sub	r3,r2,r3
    c674:	00bfffc4 	movi	r2,-1
    c678:	10c6d83a 	srl	r3,r2,r3
    c67c:	00800074 	movhi	r2,1
    c680:	10917b04 	addi	r2,r2,17900
    c684:	10c01415 	stw	r3,80(r2)
    c688:	01000074 	movhi	r4,1
    c68c:	21117b04 	addi	r4,r4,17900
    c690:	000c6b40 	call	c6b4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    c694:	01000074 	movhi	r4,1
    c698:	21119004 	addi	r4,r4,17984
    c69c:	000c6b40 	call	c6b4 <alt_dev_reg>
}
    c6a0:	e037883a 	mov	sp,fp
    c6a4:	dfc00117 	ldw	ra,4(sp)
    c6a8:	df000017 	ldw	fp,0(sp)
    c6ac:	dec00204 	addi	sp,sp,8
    c6b0:	f800283a 	ret

0000c6b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c6b4:	defffd04 	addi	sp,sp,-12
    c6b8:	dfc00215 	stw	ra,8(sp)
    c6bc:	df000115 	stw	fp,4(sp)
    c6c0:	df000104 	addi	fp,sp,4
    c6c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c6c8:	e13fff17 	ldw	r4,-4(fp)
    c6cc:	01400074 	movhi	r5,1
    c6d0:	2951a304 	addi	r5,r5,18060
    c6d4:	0010ba00 	call	10ba0 <alt_dev_llist_insert>
}
    c6d8:	e037883a 	mov	sp,fp
    c6dc:	dfc00117 	ldw	ra,4(sp)
    c6e0:	df000017 	ldw	fp,0(sp)
    c6e4:	dec00204 	addi	sp,sp,8
    c6e8:	f800283a 	ret

0000c6ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c6ec:	defffa04 	addi	sp,sp,-24
    c6f0:	dfc00515 	stw	ra,20(sp)
    c6f4:	df000415 	stw	fp,16(sp)
    c6f8:	df000404 	addi	fp,sp,16
    c6fc:	e13ffd15 	stw	r4,-12(fp)
    c700:	e17ffe15 	stw	r5,-8(fp)
    c704:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c708:	e0bffd17 	ldw	r2,-12(fp)
    c70c:	10800017 	ldw	r2,0(r2)
    c710:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c714:	e0bffc17 	ldw	r2,-16(fp)
    c718:	11000a04 	addi	r4,r2,40
    c71c:	e0bffd17 	ldw	r2,-12(fp)
    c720:	11c00217 	ldw	r7,8(r2)
    c724:	e17ffe17 	ldw	r5,-8(fp)
    c728:	e1bfff17 	ldw	r6,-4(fp)
    c72c:	000cd300 	call	cd30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c730:	e037883a 	mov	sp,fp
    c734:	dfc00117 	ldw	ra,4(sp)
    c738:	df000017 	ldw	fp,0(sp)
    c73c:	dec00204 	addi	sp,sp,8
    c740:	f800283a 	ret

0000c744 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c744:	defffa04 	addi	sp,sp,-24
    c748:	dfc00515 	stw	ra,20(sp)
    c74c:	df000415 	stw	fp,16(sp)
    c750:	df000404 	addi	fp,sp,16
    c754:	e13ffd15 	stw	r4,-12(fp)
    c758:	e17ffe15 	stw	r5,-8(fp)
    c75c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c760:	e0bffd17 	ldw	r2,-12(fp)
    c764:	10800017 	ldw	r2,0(r2)
    c768:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	11000a04 	addi	r4,r2,40
    c774:	e0bffd17 	ldw	r2,-12(fp)
    c778:	11c00217 	ldw	r7,8(r2)
    c77c:	e17ffe17 	ldw	r5,-8(fp)
    c780:	e1bfff17 	ldw	r6,-4(fp)
    c784:	000cf540 	call	cf54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c788:	e037883a 	mov	sp,fp
    c78c:	dfc00117 	ldw	ra,4(sp)
    c790:	df000017 	ldw	fp,0(sp)
    c794:	dec00204 	addi	sp,sp,8
    c798:	f800283a 	ret

0000c79c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c79c:	defffc04 	addi	sp,sp,-16
    c7a0:	dfc00315 	stw	ra,12(sp)
    c7a4:	df000215 	stw	fp,8(sp)
    c7a8:	df000204 	addi	fp,sp,8
    c7ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c7b0:	e0bfff17 	ldw	r2,-4(fp)
    c7b4:	10800017 	ldw	r2,0(r2)
    c7b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c7bc:	e0bffe17 	ldw	r2,-8(fp)
    c7c0:	11000a04 	addi	r4,r2,40
    c7c4:	e0bfff17 	ldw	r2,-4(fp)
    c7c8:	11400217 	ldw	r5,8(r2)
    c7cc:	000cbc80 	call	cbc8 <altera_avalon_jtag_uart_close>
}
    c7d0:	e037883a 	mov	sp,fp
    c7d4:	dfc00117 	ldw	ra,4(sp)
    c7d8:	df000017 	ldw	fp,0(sp)
    c7dc:	dec00204 	addi	sp,sp,8
    c7e0:	f800283a 	ret

0000c7e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c7e4:	defffa04 	addi	sp,sp,-24
    c7e8:	dfc00515 	stw	ra,20(sp)
    c7ec:	df000415 	stw	fp,16(sp)
    c7f0:	df000404 	addi	fp,sp,16
    c7f4:	e13ffd15 	stw	r4,-12(fp)
    c7f8:	e17ffe15 	stw	r5,-8(fp)
    c7fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c800:	e0bffd17 	ldw	r2,-12(fp)
    c804:	10800017 	ldw	r2,0(r2)
    c808:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c80c:	e0bffc17 	ldw	r2,-16(fp)
    c810:	11000a04 	addi	r4,r2,40
    c814:	e17ffe17 	ldw	r5,-8(fp)
    c818:	e1bfff17 	ldw	r6,-4(fp)
    c81c:	000cc3c0 	call	cc3c <altera_avalon_jtag_uart_ioctl>
}
    c820:	e037883a 	mov	sp,fp
    c824:	dfc00117 	ldw	ra,4(sp)
    c828:	df000017 	ldw	fp,0(sp)
    c82c:	dec00204 	addi	sp,sp,8
    c830:	f800283a 	ret

0000c834 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c834:	defffb04 	addi	sp,sp,-20
    c838:	dfc00415 	stw	ra,16(sp)
    c83c:	df000315 	stw	fp,12(sp)
    c840:	df000304 	addi	fp,sp,12
    c844:	e13ffd15 	stw	r4,-12(fp)
    c848:	e17ffe15 	stw	r5,-8(fp)
    c84c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c850:	e0fffd17 	ldw	r3,-12(fp)
    c854:	00800044 	movi	r2,1
    c858:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c85c:	e0bffd17 	ldw	r2,-12(fp)
    c860:	10800017 	ldw	r2,0(r2)
    c864:	11000104 	addi	r4,r2,4
    c868:	e0bffd17 	ldw	r2,-12(fp)
    c86c:	10800817 	ldw	r2,32(r2)
    c870:	1007883a 	mov	r3,r2
    c874:	2005883a 	mov	r2,r4
    c878:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    c87c:	e13fff17 	ldw	r4,-4(fp)
    c880:	e17ffd17 	ldw	r5,-12(fp)
    c884:	01800074 	movhi	r6,1
    c888:	31b23b04 	addi	r6,r6,-14100
    c88c:	000b6040 	call	b604 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c890:	e0bffd17 	ldw	r2,-12(fp)
    c894:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c898:	e0bffd17 	ldw	r2,-12(fp)
    c89c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c8a0:	00800074 	movhi	r2,1
    c8a4:	10998104 	addi	r2,r2,26116
    c8a8:	10800017 	ldw	r2,0(r2)
    c8ac:	100b883a 	mov	r5,r2
    c8b0:	01800074 	movhi	r6,1
    c8b4:	31b2c604 	addi	r6,r6,-13544
    c8b8:	e1fffd17 	ldw	r7,-12(fp)
    c8bc:	0010a300 	call	10a30 <alt_alarm_start>
    c8c0:	1004403a 	cmpge	r2,r2,zero
    c8c4:	1000041e 	bne	r2,zero,c8d8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c8c8:	e0fffd17 	ldw	r3,-12(fp)
    c8cc:	00a00034 	movhi	r2,32768
    c8d0:	10bfffc4 	addi	r2,r2,-1
    c8d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c8d8:	e037883a 	mov	sp,fp
    c8dc:	dfc00117 	ldw	ra,4(sp)
    c8e0:	df000017 	ldw	fp,0(sp)
    c8e4:	dec00204 	addi	sp,sp,8
    c8e8:	f800283a 	ret

0000c8ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c8ec:	defff704 	addi	sp,sp,-36
    c8f0:	df000815 	stw	fp,32(sp)
    c8f4:	df000804 	addi	fp,sp,32
    c8f8:	e13ffe15 	stw	r4,-8(fp)
    c8fc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c900:	e0bffe17 	ldw	r2,-8(fp)
    c904:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    c908:	e0bffd17 	ldw	r2,-12(fp)
    c90c:	10800017 	ldw	r2,0(r2)
    c910:	e0bffc15 	stw	r2,-16(fp)
    c914:	00000006 	br	c918 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c918:	e0bffc17 	ldw	r2,-16(fp)
    c91c:	10800104 	addi	r2,r2,4
    c920:	10800037 	ldwio	r2,0(r2)
    c924:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c928:	e0bffb17 	ldw	r2,-20(fp)
    c92c:	1080c00c 	andi	r2,r2,768
    c930:	1005003a 	cmpeq	r2,r2,zero
    c934:	1000741e 	bne	r2,zero,cb08 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c938:	e0bffb17 	ldw	r2,-20(fp)
    c93c:	1080400c 	andi	r2,r2,256
    c940:	1005003a 	cmpeq	r2,r2,zero
    c944:	1000351e 	bne	r2,zero,ca1c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c948:	00800074 	movhi	r2,1
    c94c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c950:	e0bffd17 	ldw	r2,-12(fp)
    c954:	10800a17 	ldw	r2,40(r2)
    c958:	10800044 	addi	r2,r2,1
    c95c:	1081ffcc 	andi	r2,r2,2047
    c960:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    c964:	e0bffd17 	ldw	r2,-12(fp)
    c968:	10c00b17 	ldw	r3,44(r2)
    c96c:	e0bff917 	ldw	r2,-28(fp)
    c970:	18801626 	beq	r3,r2,c9cc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c974:	e0bffc17 	ldw	r2,-16(fp)
    c978:	10800037 	ldwio	r2,0(r2)
    c97c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c980:	e0bffa17 	ldw	r2,-24(fp)
    c984:	10a0000c 	andi	r2,r2,32768
    c988:	1005003a 	cmpeq	r2,r2,zero
    c98c:	10000f1e 	bne	r2,zero,c9cc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c990:	e0bffd17 	ldw	r2,-12(fp)
    c994:	10c00a17 	ldw	r3,40(r2)
    c998:	e0bffa17 	ldw	r2,-24(fp)
    c99c:	1009883a 	mov	r4,r2
    c9a0:	e0bffd17 	ldw	r2,-12(fp)
    c9a4:	1885883a 	add	r2,r3,r2
    c9a8:	10800e04 	addi	r2,r2,56
    c9ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c9b0:	e0bffd17 	ldw	r2,-12(fp)
    c9b4:	10800a17 	ldw	r2,40(r2)
    c9b8:	10800044 	addi	r2,r2,1
    c9bc:	10c1ffcc 	andi	r3,r2,2047
    c9c0:	e0bffd17 	ldw	r2,-12(fp)
    c9c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c9c8:	003fe106 	br	c950 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c9cc:	e0bffa17 	ldw	r2,-24(fp)
    c9d0:	10bfffec 	andhi	r2,r2,65535
    c9d4:	1005003a 	cmpeq	r2,r2,zero
    c9d8:	1000101e 	bne	r2,zero,ca1c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c9dc:	e0bffd17 	ldw	r2,-12(fp)
    c9e0:	10c00817 	ldw	r3,32(r2)
    c9e4:	00bfff84 	movi	r2,-2
    c9e8:	1886703a 	and	r3,r3,r2
    c9ec:	e0bffd17 	ldw	r2,-12(fp)
    c9f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c9f4:	e0bffc17 	ldw	r2,-16(fp)
    c9f8:	11000104 	addi	r4,r2,4
    c9fc:	e0bffd17 	ldw	r2,-12(fp)
    ca00:	10800817 	ldw	r2,32(r2)
    ca04:	1007883a 	mov	r3,r2
    ca08:	2005883a 	mov	r2,r4
    ca0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ca10:	e0bffc17 	ldw	r2,-16(fp)
    ca14:	10800104 	addi	r2,r2,4
    ca18:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ca1c:	e0bffb17 	ldw	r2,-20(fp)
    ca20:	1080800c 	andi	r2,r2,512
    ca24:	1005003a 	cmpeq	r2,r2,zero
    ca28:	103fbb1e 	bne	r2,zero,c918 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ca2c:	e0bffb17 	ldw	r2,-20(fp)
    ca30:	10bfffec 	andhi	r2,r2,65535
    ca34:	1004d43a 	srli	r2,r2,16
    ca38:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ca3c:	00001506 	br	ca94 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ca40:	e13ffc17 	ldw	r4,-16(fp)
    ca44:	e0bffd17 	ldw	r2,-12(fp)
    ca48:	10c00d17 	ldw	r3,52(r2)
    ca4c:	e0bffd17 	ldw	r2,-12(fp)
    ca50:	1885883a 	add	r2,r3,r2
    ca54:	10820e04 	addi	r2,r2,2104
    ca58:	10800003 	ldbu	r2,0(r2)
    ca5c:	10c03fcc 	andi	r3,r2,255
    ca60:	18c0201c 	xori	r3,r3,128
    ca64:	18ffe004 	addi	r3,r3,-128
    ca68:	2005883a 	mov	r2,r4
    ca6c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ca70:	e0bffd17 	ldw	r2,-12(fp)
    ca74:	10800d17 	ldw	r2,52(r2)
    ca78:	10800044 	addi	r2,r2,1
    ca7c:	10c1ffcc 	andi	r3,r2,2047
    ca80:	e0bffd17 	ldw	r2,-12(fp)
    ca84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ca88:	e0bff817 	ldw	r2,-32(fp)
    ca8c:	10bfffc4 	addi	r2,r2,-1
    ca90:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ca94:	e0bff817 	ldw	r2,-32(fp)
    ca98:	1005003a 	cmpeq	r2,r2,zero
    ca9c:	1000051e 	bne	r2,zero,cab4 <altera_avalon_jtag_uart_irq+0x1c8>
    caa0:	e0bffd17 	ldw	r2,-12(fp)
    caa4:	10c00d17 	ldw	r3,52(r2)
    caa8:	e0bffd17 	ldw	r2,-12(fp)
    caac:	10800c17 	ldw	r2,48(r2)
    cab0:	18bfe31e 	bne	r3,r2,ca40 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    cab4:	e0bff817 	ldw	r2,-32(fp)
    cab8:	1005003a 	cmpeq	r2,r2,zero
    cabc:	103f961e 	bne	r2,zero,c918 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    cac0:	e0bffd17 	ldw	r2,-12(fp)
    cac4:	10c00817 	ldw	r3,32(r2)
    cac8:	00bfff44 	movi	r2,-3
    cacc:	1886703a 	and	r3,r3,r2
    cad0:	e0bffd17 	ldw	r2,-12(fp)
    cad4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cad8:	e0bffd17 	ldw	r2,-12(fp)
    cadc:	10800017 	ldw	r2,0(r2)
    cae0:	11000104 	addi	r4,r2,4
    cae4:	e0bffd17 	ldw	r2,-12(fp)
    cae8:	10800817 	ldw	r2,32(r2)
    caec:	1007883a 	mov	r3,r2
    caf0:	2005883a 	mov	r2,r4
    caf4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    caf8:	e0bffc17 	ldw	r2,-16(fp)
    cafc:	10800104 	addi	r2,r2,4
    cb00:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    cb04:	003f8406 	br	c918 <altera_avalon_jtag_uart_irq+0x2c>
}
    cb08:	e037883a 	mov	sp,fp
    cb0c:	df000017 	ldw	fp,0(sp)
    cb10:	dec00104 	addi	sp,sp,4
    cb14:	f800283a 	ret

0000cb18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    cb18:	defffc04 	addi	sp,sp,-16
    cb1c:	df000315 	stw	fp,12(sp)
    cb20:	df000304 	addi	fp,sp,12
    cb24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    cb28:	e0bfff17 	ldw	r2,-4(fp)
    cb2c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    cb30:	e0bffe17 	ldw	r2,-8(fp)
    cb34:	10800017 	ldw	r2,0(r2)
    cb38:	10800104 	addi	r2,r2,4
    cb3c:	10800037 	ldwio	r2,0(r2)
    cb40:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    cb44:	e0bffd17 	ldw	r2,-12(fp)
    cb48:	1081000c 	andi	r2,r2,1024
    cb4c:	1005003a 	cmpeq	r2,r2,zero
    cb50:	10000c1e 	bne	r2,zero,cb84 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    cb54:	e0bffe17 	ldw	r2,-8(fp)
    cb58:	10800017 	ldw	r2,0(r2)
    cb5c:	11000104 	addi	r4,r2,4
    cb60:	e0bffe17 	ldw	r2,-8(fp)
    cb64:	10800817 	ldw	r2,32(r2)
    cb68:	10810014 	ori	r2,r2,1024
    cb6c:	1007883a 	mov	r3,r2
    cb70:	2005883a 	mov	r2,r4
    cb74:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    cb78:	e0bffe17 	ldw	r2,-8(fp)
    cb7c:	10000915 	stw	zero,36(r2)
    cb80:	00000a06 	br	cbac <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    cb84:	e0bffe17 	ldw	r2,-8(fp)
    cb88:	10c00917 	ldw	r3,36(r2)
    cb8c:	00a00034 	movhi	r2,32768
    cb90:	10bfff04 	addi	r2,r2,-4
    cb94:	10c00536 	bltu	r2,r3,cbac <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    cb98:	e0bffe17 	ldw	r2,-8(fp)
    cb9c:	10800917 	ldw	r2,36(r2)
    cba0:	10c00044 	addi	r3,r2,1
    cba4:	e0bffe17 	ldw	r2,-8(fp)
    cba8:	10c00915 	stw	r3,36(r2)
    cbac:	00800074 	movhi	r2,1
    cbb0:	10998104 	addi	r2,r2,26116
    cbb4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    cbb8:	e037883a 	mov	sp,fp
    cbbc:	df000017 	ldw	fp,0(sp)
    cbc0:	dec00104 	addi	sp,sp,4
    cbc4:	f800283a 	ret

0000cbc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    cbc8:	defffc04 	addi	sp,sp,-16
    cbcc:	df000315 	stw	fp,12(sp)
    cbd0:	df000304 	addi	fp,sp,12
    cbd4:	e13ffd15 	stw	r4,-12(fp)
    cbd8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    cbdc:	00000706 	br	cbfc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    cbe0:	e0bffe17 	ldw	r2,-8(fp)
    cbe4:	1090000c 	andi	r2,r2,16384
    cbe8:	1005003a 	cmpeq	r2,r2,zero
    cbec:	1000031e 	bne	r2,zero,cbfc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    cbf0:	00bffd44 	movi	r2,-11
    cbf4:	e0bfff15 	stw	r2,-4(fp)
    cbf8:	00000b06 	br	cc28 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    cbfc:	e0bffd17 	ldw	r2,-12(fp)
    cc00:	10c00d17 	ldw	r3,52(r2)
    cc04:	e0bffd17 	ldw	r2,-12(fp)
    cc08:	10800c17 	ldw	r2,48(r2)
    cc0c:	18800526 	beq	r3,r2,cc24 <altera_avalon_jtag_uart_close+0x5c>
    cc10:	e0bffd17 	ldw	r2,-12(fp)
    cc14:	10c00917 	ldw	r3,36(r2)
    cc18:	e0bffd17 	ldw	r2,-12(fp)
    cc1c:	10800117 	ldw	r2,4(r2)
    cc20:	18bfef36 	bltu	r3,r2,cbe0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    cc24:	e03fff15 	stw	zero,-4(fp)
    cc28:	e0bfff17 	ldw	r2,-4(fp)
}
    cc2c:	e037883a 	mov	sp,fp
    cc30:	df000017 	ldw	fp,0(sp)
    cc34:	dec00104 	addi	sp,sp,4
    cc38:	f800283a 	ret

0000cc3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    cc3c:	defff804 	addi	sp,sp,-32
    cc40:	df000715 	stw	fp,28(sp)
    cc44:	df000704 	addi	fp,sp,28
    cc48:	e13ffb15 	stw	r4,-20(fp)
    cc4c:	e17ffc15 	stw	r5,-16(fp)
    cc50:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    cc54:	00bff9c4 	movi	r2,-25
    cc58:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    cc5c:	e0bffc17 	ldw	r2,-16(fp)
    cc60:	e0bfff15 	stw	r2,-4(fp)
    cc64:	e0ffff17 	ldw	r3,-4(fp)
    cc68:	189a8060 	cmpeqi	r2,r3,27137
    cc6c:	1000041e 	bne	r2,zero,cc80 <altera_avalon_jtag_uart_ioctl+0x44>
    cc70:	e0ffff17 	ldw	r3,-4(fp)
    cc74:	189a80a0 	cmpeqi	r2,r3,27138
    cc78:	10001b1e 	bne	r2,zero,cce8 <altera_avalon_jtag_uart_ioctl+0xac>
    cc7c:	00002706 	br	cd1c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    cc80:	e0bffb17 	ldw	r2,-20(fp)
    cc84:	10c00117 	ldw	r3,4(r2)
    cc88:	00a00034 	movhi	r2,32768
    cc8c:	10bfffc4 	addi	r2,r2,-1
    cc90:	18802226 	beq	r3,r2,cd1c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    cc94:	e0bffd17 	ldw	r2,-12(fp)
    cc98:	10800017 	ldw	r2,0(r2)
    cc9c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    cca0:	e0bff917 	ldw	r2,-28(fp)
    cca4:	10800090 	cmplti	r2,r2,2
    cca8:	1000071e 	bne	r2,zero,ccc8 <altera_avalon_jtag_uart_ioctl+0x8c>
    ccac:	e0fff917 	ldw	r3,-28(fp)
    ccb0:	00a00034 	movhi	r2,32768
    ccb4:	10bfffc4 	addi	r2,r2,-1
    ccb8:	18800326 	beq	r3,r2,ccc8 <altera_avalon_jtag_uart_ioctl+0x8c>
    ccbc:	e0bff917 	ldw	r2,-28(fp)
    ccc0:	e0bffe15 	stw	r2,-8(fp)
    ccc4:	00000306 	br	ccd4 <altera_avalon_jtag_uart_ioctl+0x98>
    ccc8:	00e00034 	movhi	r3,32768
    cccc:	18ffff84 	addi	r3,r3,-2
    ccd0:	e0fffe15 	stw	r3,-8(fp)
    ccd4:	e0bffb17 	ldw	r2,-20(fp)
    ccd8:	e0fffe17 	ldw	r3,-8(fp)
    ccdc:	10c00115 	stw	r3,4(r2)
      rc = 0;
    cce0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    cce4:	00000d06 	br	cd1c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    cce8:	e0bffb17 	ldw	r2,-20(fp)
    ccec:	10c00117 	ldw	r3,4(r2)
    ccf0:	00a00034 	movhi	r2,32768
    ccf4:	10bfffc4 	addi	r2,r2,-1
    ccf8:	18800826 	beq	r3,r2,cd1c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ccfc:	e13ffd17 	ldw	r4,-12(fp)
    cd00:	e0bffb17 	ldw	r2,-20(fp)
    cd04:	10c00917 	ldw	r3,36(r2)
    cd08:	e0bffb17 	ldw	r2,-20(fp)
    cd0c:	10800117 	ldw	r2,4(r2)
    cd10:	1885803a 	cmpltu	r2,r3,r2
    cd14:	20800015 	stw	r2,0(r4)
      rc = 0;
    cd18:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    cd1c:	e0bffa17 	ldw	r2,-24(fp)
}
    cd20:	e037883a 	mov	sp,fp
    cd24:	df000017 	ldw	fp,0(sp)
    cd28:	dec00104 	addi	sp,sp,4
    cd2c:	f800283a 	ret

0000cd30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    cd30:	defff204 	addi	sp,sp,-56
    cd34:	dfc00d15 	stw	ra,52(sp)
    cd38:	df000c15 	stw	fp,48(sp)
    cd3c:	df000c04 	addi	fp,sp,48
    cd40:	e13ffb15 	stw	r4,-20(fp)
    cd44:	e17ffc15 	stw	r5,-16(fp)
    cd48:	e1bffd15 	stw	r6,-12(fp)
    cd4c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    cd50:	e0bffc17 	ldw	r2,-16(fp)
    cd54:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    cd58:	00004806 	br	ce7c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    cd5c:	e0bffb17 	ldw	r2,-20(fp)
    cd60:	10800a17 	ldw	r2,40(r2)
    cd64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    cd68:	e0bffb17 	ldw	r2,-20(fp)
    cd6c:	10800b17 	ldw	r2,44(r2)
    cd70:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    cd74:	e0fff717 	ldw	r3,-36(fp)
    cd78:	e0bff617 	ldw	r2,-40(fp)
    cd7c:	18800536 	bltu	r3,r2,cd94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    cd80:	e0bff717 	ldw	r2,-36(fp)
    cd84:	e0fff617 	ldw	r3,-40(fp)
    cd88:	10c5c83a 	sub	r2,r2,r3
    cd8c:	e0bff815 	stw	r2,-32(fp)
    cd90:	00000406 	br	cda4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    cd94:	00820004 	movi	r2,2048
    cd98:	e0fff617 	ldw	r3,-40(fp)
    cd9c:	10c5c83a 	sub	r2,r2,r3
    cda0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cda4:	e0bff817 	ldw	r2,-32(fp)
    cda8:	1005003a 	cmpeq	r2,r2,zero
    cdac:	10001f1e 	bne	r2,zero,ce2c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    cdb0:	e0fffd17 	ldw	r3,-12(fp)
    cdb4:	e0bff817 	ldw	r2,-32(fp)
    cdb8:	1880022e 	bgeu	r3,r2,cdc4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    cdbc:	e0bffd17 	ldw	r2,-12(fp)
    cdc0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    cdc4:	e0bffb17 	ldw	r2,-20(fp)
    cdc8:	10c00e04 	addi	r3,r2,56
    cdcc:	e0bff617 	ldw	r2,-40(fp)
    cdd0:	1887883a 	add	r3,r3,r2
    cdd4:	e0bffa17 	ldw	r2,-24(fp)
    cdd8:	1009883a 	mov	r4,r2
    cddc:	180b883a 	mov	r5,r3
    cde0:	e1bff817 	ldw	r6,-32(fp)
    cde4:	0001c5c0 	call	1c5c <memcpy>
      ptr   += n;
    cde8:	e0fff817 	ldw	r3,-32(fp)
    cdec:	e0bffa17 	ldw	r2,-24(fp)
    cdf0:	10c5883a 	add	r2,r2,r3
    cdf4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    cdf8:	e0fffd17 	ldw	r3,-12(fp)
    cdfc:	e0bff817 	ldw	r2,-32(fp)
    ce00:	1885c83a 	sub	r2,r3,r2
    ce04:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ce08:	e0fff617 	ldw	r3,-40(fp)
    ce0c:	e0bff817 	ldw	r2,-32(fp)
    ce10:	1885883a 	add	r2,r3,r2
    ce14:	10c1ffcc 	andi	r3,r2,2047
    ce18:	e0bffb17 	ldw	r2,-20(fp)
    ce1c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    ce20:	e0bffd17 	ldw	r2,-12(fp)
    ce24:	10800048 	cmpgei	r2,r2,1
    ce28:	103fcc1e 	bne	r2,zero,cd5c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    ce2c:	e0fffa17 	ldw	r3,-24(fp)
    ce30:	e0bffc17 	ldw	r2,-16(fp)
    ce34:	1880141e 	bne	r3,r2,ce88 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ce38:	e0bffe17 	ldw	r2,-8(fp)
    ce3c:	1090000c 	andi	r2,r2,16384
    ce40:	1004c03a 	cmpne	r2,r2,zero
    ce44:	1000101e 	bne	r2,zero,ce88 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ce48:	e0bffb17 	ldw	r2,-20(fp)
    ce4c:	10c00a17 	ldw	r3,40(r2)
    ce50:	e0bff717 	ldw	r2,-36(fp)
    ce54:	1880051e 	bne	r3,r2,ce6c <altera_avalon_jtag_uart_read+0x13c>
    ce58:	e0bffb17 	ldw	r2,-20(fp)
    ce5c:	10c00917 	ldw	r3,36(r2)
    ce60:	e0bffb17 	ldw	r2,-20(fp)
    ce64:	10800117 	ldw	r2,4(r2)
    ce68:	18bff736 	bltu	r3,r2,ce48 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ce6c:	e0bffb17 	ldw	r2,-20(fp)
    ce70:	10c00a17 	ldw	r3,40(r2)
    ce74:	e0bff717 	ldw	r2,-36(fp)
    ce78:	18800326 	beq	r3,r2,ce88 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ce7c:	e0bffd17 	ldw	r2,-12(fp)
    ce80:	10800048 	cmpgei	r2,r2,1
    ce84:	103fb51e 	bne	r2,zero,cd5c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ce88:	e0fffa17 	ldw	r3,-24(fp)
    ce8c:	e0bffc17 	ldw	r2,-16(fp)
    ce90:	18801926 	beq	r3,r2,cef8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce94:	0005303a 	rdctl	r2,status
    ce98:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce9c:	e0fff517 	ldw	r3,-44(fp)
    cea0:	00bfff84 	movi	r2,-2
    cea4:	1884703a 	and	r2,r3,r2
    cea8:	1001703a 	wrctl	status,r2
  
  return context;
    ceac:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ceb0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ceb4:	e0bffb17 	ldw	r2,-20(fp)
    ceb8:	10800817 	ldw	r2,32(r2)
    cebc:	10c00054 	ori	r3,r2,1
    cec0:	e0bffb17 	ldw	r2,-20(fp)
    cec4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cec8:	e0bffb17 	ldw	r2,-20(fp)
    cecc:	10800017 	ldw	r2,0(r2)
    ced0:	11000104 	addi	r4,r2,4
    ced4:	e0bffb17 	ldw	r2,-20(fp)
    ced8:	10800817 	ldw	r2,32(r2)
    cedc:	1007883a 	mov	r3,r2
    cee0:	2005883a 	mov	r2,r4
    cee4:	10c00035 	stwio	r3,0(r2)
    cee8:	e0bff917 	ldw	r2,-28(fp)
    ceec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cef0:	e0bff417 	ldw	r2,-48(fp)
    cef4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    cef8:	e0fffa17 	ldw	r3,-24(fp)
    cefc:	e0bffc17 	ldw	r2,-16(fp)
    cf00:	18800526 	beq	r3,r2,cf18 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    cf04:	e0fffa17 	ldw	r3,-24(fp)
    cf08:	e0bffc17 	ldw	r2,-16(fp)
    cf0c:	1887c83a 	sub	r3,r3,r2
    cf10:	e0ffff15 	stw	r3,-4(fp)
    cf14:	00000906 	br	cf3c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    cf18:	e0bffe17 	ldw	r2,-8(fp)
    cf1c:	1090000c 	andi	r2,r2,16384
    cf20:	1005003a 	cmpeq	r2,r2,zero
    cf24:	1000031e 	bne	r2,zero,cf34 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    cf28:	00bffd44 	movi	r2,-11
    cf2c:	e0bfff15 	stw	r2,-4(fp)
    cf30:	00000206 	br	cf3c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    cf34:	00bffec4 	movi	r2,-5
    cf38:	e0bfff15 	stw	r2,-4(fp)
    cf3c:	e0bfff17 	ldw	r2,-4(fp)
}
    cf40:	e037883a 	mov	sp,fp
    cf44:	dfc00117 	ldw	ra,4(sp)
    cf48:	df000017 	ldw	fp,0(sp)
    cf4c:	dec00204 	addi	sp,sp,8
    cf50:	f800283a 	ret

0000cf54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    cf54:	defff204 	addi	sp,sp,-56
    cf58:	dfc00d15 	stw	ra,52(sp)
    cf5c:	df000c15 	stw	fp,48(sp)
    cf60:	df000c04 	addi	fp,sp,48
    cf64:	e13ffb15 	stw	r4,-20(fp)
    cf68:	e17ffc15 	stw	r5,-16(fp)
    cf6c:	e1bffd15 	stw	r6,-12(fp)
    cf70:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    cf74:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    cf78:	e0bffc17 	ldw	r2,-16(fp)
    cf7c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cf80:	00003a06 	br	d06c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cf84:	e0bffb17 	ldw	r2,-20(fp)
    cf88:	10800c17 	ldw	r2,48(r2)
    cf8c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    cf90:	e0bffb17 	ldw	r2,-20(fp)
    cf94:	10800d17 	ldw	r2,52(r2)
    cf98:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    cf9c:	e0fffa17 	ldw	r3,-24(fp)
    cfa0:	e0bff917 	ldw	r2,-28(fp)
    cfa4:	1880062e 	bgeu	r3,r2,cfc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    cfa8:	e0fff917 	ldw	r3,-28(fp)
    cfac:	e0bffa17 	ldw	r2,-24(fp)
    cfb0:	1885c83a 	sub	r2,r3,r2
    cfb4:	10bfffc4 	addi	r2,r2,-1
    cfb8:	e0bff815 	stw	r2,-32(fp)
    cfbc:	00000c06 	br	cff0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    cfc0:	e0bff917 	ldw	r2,-28(fp)
    cfc4:	1005003a 	cmpeq	r2,r2,zero
    cfc8:	1000051e 	bne	r2,zero,cfe0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    cfcc:	00820004 	movi	r2,2048
    cfd0:	e0fffa17 	ldw	r3,-24(fp)
    cfd4:	10c5c83a 	sub	r2,r2,r3
    cfd8:	e0bff815 	stw	r2,-32(fp)
    cfdc:	00000406 	br	cff0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    cfe0:	0081ffc4 	movi	r2,2047
    cfe4:	e0fffa17 	ldw	r3,-24(fp)
    cfe8:	10c5c83a 	sub	r2,r2,r3
    cfec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cff0:	e0bff817 	ldw	r2,-32(fp)
    cff4:	1005003a 	cmpeq	r2,r2,zero
    cff8:	10001f1e 	bne	r2,zero,d078 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    cffc:	e0fffd17 	ldw	r3,-12(fp)
    d000:	e0bff817 	ldw	r2,-32(fp)
    d004:	1880022e 	bgeu	r3,r2,d010 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    d008:	e0bffd17 	ldw	r2,-12(fp)
    d00c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    d010:	e0bffb17 	ldw	r2,-20(fp)
    d014:	10c20e04 	addi	r3,r2,2104
    d018:	e0bffa17 	ldw	r2,-24(fp)
    d01c:	1885883a 	add	r2,r3,r2
    d020:	e0fffc17 	ldw	r3,-16(fp)
    d024:	1009883a 	mov	r4,r2
    d028:	180b883a 	mov	r5,r3
    d02c:	e1bff817 	ldw	r6,-32(fp)
    d030:	0001c5c0 	call	1c5c <memcpy>
      ptr   += n;
    d034:	e0fff817 	ldw	r3,-32(fp)
    d038:	e0bffc17 	ldw	r2,-16(fp)
    d03c:	10c5883a 	add	r2,r2,r3
    d040:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    d044:	e0fffd17 	ldw	r3,-12(fp)
    d048:	e0bff817 	ldw	r2,-32(fp)
    d04c:	1885c83a 	sub	r2,r3,r2
    d050:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d054:	e0fffa17 	ldw	r3,-24(fp)
    d058:	e0bff817 	ldw	r2,-32(fp)
    d05c:	1885883a 	add	r2,r3,r2
    d060:	10c1ffcc 	andi	r3,r2,2047
    d064:	e0bffb17 	ldw	r2,-20(fp)
    d068:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    d06c:	e0bffd17 	ldw	r2,-12(fp)
    d070:	10800048 	cmpgei	r2,r2,1
    d074:	103fc31e 	bne	r2,zero,cf84 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d078:	0005303a 	rdctl	r2,status
    d07c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d080:	e0fff517 	ldw	r3,-44(fp)
    d084:	00bfff84 	movi	r2,-2
    d088:	1884703a 	and	r2,r3,r2
    d08c:	1001703a 	wrctl	status,r2
  
  return context;
    d090:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    d094:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d098:	e0bffb17 	ldw	r2,-20(fp)
    d09c:	10800817 	ldw	r2,32(r2)
    d0a0:	10c00094 	ori	r3,r2,2
    d0a4:	e0bffb17 	ldw	r2,-20(fp)
    d0a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d0ac:	e0bffb17 	ldw	r2,-20(fp)
    d0b0:	10800017 	ldw	r2,0(r2)
    d0b4:	11000104 	addi	r4,r2,4
    d0b8:	e0bffb17 	ldw	r2,-20(fp)
    d0bc:	10800817 	ldw	r2,32(r2)
    d0c0:	1007883a 	mov	r3,r2
    d0c4:	2005883a 	mov	r2,r4
    d0c8:	10c00035 	stwio	r3,0(r2)
    d0cc:	e0bff717 	ldw	r2,-36(fp)
    d0d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d0d4:	e0bff417 	ldw	r2,-48(fp)
    d0d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    d0dc:	e0bffd17 	ldw	r2,-12(fp)
    d0e0:	10800050 	cmplti	r2,r2,1
    d0e4:	1000111e 	bne	r2,zero,d12c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    d0e8:	e0bffe17 	ldw	r2,-8(fp)
    d0ec:	1090000c 	andi	r2,r2,16384
    d0f0:	1004c03a 	cmpne	r2,r2,zero
    d0f4:	1000101e 	bne	r2,zero,d138 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    d0f8:	e0bffb17 	ldw	r2,-20(fp)
    d0fc:	10c00d17 	ldw	r3,52(r2)
    d100:	e0bff917 	ldw	r2,-28(fp)
    d104:	1880051e 	bne	r3,r2,d11c <altera_avalon_jtag_uart_write+0x1c8>
    d108:	e0bffb17 	ldw	r2,-20(fp)
    d10c:	10c00917 	ldw	r3,36(r2)
    d110:	e0bffb17 	ldw	r2,-20(fp)
    d114:	10800117 	ldw	r2,4(r2)
    d118:	18bff736 	bltu	r3,r2,d0f8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    d11c:	e0bffb17 	ldw	r2,-20(fp)
    d120:	10c00d17 	ldw	r3,52(r2)
    d124:	e0bff917 	ldw	r2,-28(fp)
    d128:	18800326 	beq	r3,r2,d138 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    d12c:	e0bffd17 	ldw	r2,-12(fp)
    d130:	10800048 	cmpgei	r2,r2,1
    d134:	103fcd1e 	bne	r2,zero,d06c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    d138:	e0fffc17 	ldw	r3,-16(fp)
    d13c:	e0bff617 	ldw	r2,-40(fp)
    d140:	18800526 	beq	r3,r2,d158 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    d144:	e0fffc17 	ldw	r3,-16(fp)
    d148:	e0bff617 	ldw	r2,-40(fp)
    d14c:	1887c83a 	sub	r3,r3,r2
    d150:	e0ffff15 	stw	r3,-4(fp)
    d154:	00000906 	br	d17c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    d158:	e0bffe17 	ldw	r2,-8(fp)
    d15c:	1090000c 	andi	r2,r2,16384
    d160:	1005003a 	cmpeq	r2,r2,zero
    d164:	1000031e 	bne	r2,zero,d174 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    d168:	00bffd44 	movi	r2,-11
    d16c:	e0bfff15 	stw	r2,-4(fp)
    d170:	00000206 	br	d17c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    d174:	00bffec4 	movi	r2,-5
    d178:	e0bfff15 	stw	r2,-4(fp)
    d17c:	e0bfff17 	ldw	r2,-4(fp)
}
    d180:	e037883a 	mov	sp,fp
    d184:	dfc00117 	ldw	ra,4(sp)
    d188:	df000017 	ldw	fp,0(sp)
    d18c:	dec00204 	addi	sp,sp,8
    d190:	f800283a 	ret

0000d194 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d194:	defff904 	addi	sp,sp,-28
    d198:	dfc00615 	stw	ra,24(sp)
    d19c:	df000515 	stw	fp,20(sp)
    d1a0:	df000504 	addi	fp,sp,20
    d1a4:	e13ffe15 	stw	r4,-8(fp)
    d1a8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d1ac:	e0bffe17 	ldw	r2,-8(fp)
    d1b0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d1b4:	e0bffe17 	ldw	r2,-8(fp)
    d1b8:	10800104 	addi	r2,r2,4
    d1bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d1c0:	0005303a 	rdctl	r2,status
    d1c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d1c8:	e0fffc17 	ldw	r3,-16(fp)
    d1cc:	00bfff84 	movi	r2,-2
    d1d0:	1884703a 	and	r2,r3,r2
    d1d4:	1001703a 	wrctl	status,r2
  
  return context;
    d1d8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d1dc:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    d1e0:	00112d80 	call	112d8 <alt_tick>
    d1e4:	e0bffd17 	ldw	r2,-12(fp)
    d1e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d1ec:	e0bffb17 	ldw	r2,-20(fp)
    d1f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d1f4:	e037883a 	mov	sp,fp
    d1f8:	dfc00117 	ldw	ra,4(sp)
    d1fc:	df000017 	ldw	fp,0(sp)
    d200:	dec00204 	addi	sp,sp,8
    d204:	f800283a 	ret

0000d208 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d208:	defff904 	addi	sp,sp,-28
    d20c:	dfc00615 	stw	ra,24(sp)
    d210:	df000515 	stw	fp,20(sp)
    d214:	df000504 	addi	fp,sp,20
    d218:	e13ffc15 	stw	r4,-16(fp)
    d21c:	e17ffd15 	stw	r5,-12(fp)
    d220:	e1bffe15 	stw	r6,-8(fp)
    d224:	e1ffff15 	stw	r7,-4(fp)
    d228:	e0bfff17 	ldw	r2,-4(fp)
    d22c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d230:	00800074 	movhi	r2,1
    d234:	10998104 	addi	r2,r2,26116
    d238:	10800017 	ldw	r2,0(r2)
    d23c:	1004c03a 	cmpne	r2,r2,zero
    d240:	1000041e 	bne	r2,zero,d254 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    d244:	00c00074 	movhi	r3,1
    d248:	18d98104 	addi	r3,r3,26116
    d24c:	e0bffb17 	ldw	r2,-20(fp)
    d250:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d254:	e0bffc17 	ldw	r2,-16(fp)
    d258:	10800104 	addi	r2,r2,4
    d25c:	1007883a 	mov	r3,r2
    d260:	008001c4 	movi	r2,7
    d264:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    d268:	e13ffe17 	ldw	r4,-8(fp)
    d26c:	e17ffc17 	ldw	r5,-16(fp)
    d270:	01800074 	movhi	r6,1
    d274:	31b46504 	addi	r6,r6,-11884
    d278:	000b6040 	call	b604 <alt_irq_register>
#endif  
}
    d27c:	e037883a 	mov	sp,fp
    d280:	dfc00117 	ldw	ra,4(sp)
    d284:	df000017 	ldw	fp,0(sp)
    d288:	dec00204 	addi	sp,sp,8
    d28c:	f800283a 	ret

0000d290 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
    d290:	defffc04 	addi	sp,sp,-16
    d294:	dfc00315 	stw	ra,12(sp)
    d298:	df000215 	stw	fp,8(sp)
    d29c:	df000204 	addi	fp,sp,8
    d2a0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
    d2a4:	e13fff17 	ldw	r4,-4(fp)
    d2a8:	01400074 	movhi	r5,1
    d2ac:	2951a304 	addi	r5,r5,18060
    d2b0:	0010d7c0 	call	10d7c <alt_find_dev>
    d2b4:	e0bffe15 	stw	r2,-8(fp)
  return dev;
    d2b8:	e0bffe17 	ldw	r2,-8(fp)
}
    d2bc:	e037883a 	mov	sp,fp
    d2c0:	dfc00117 	ldw	ra,4(sp)
    d2c4:	df000017 	ldw	fp,0(sp)
    d2c8:	dec00204 	addi	sp,sp,8
    d2cc:	f800283a 	ret

0000d2d0 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
    d2d0:	defffd04 	addi	sp,sp,-12
    d2d4:	df000215 	stw	fp,8(sp)
    d2d8:	df000204 	addi	fp,sp,8
    d2dc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d2e0:	e0bfff17 	ldw	r2,-4(fp)
    d2e4:	10800a17 	ldw	r2,40(r2)
    d2e8:	10800037 	ldwio	r2,0(r2)
    d2ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
    d2f0:	e0bffe17 	ldw	r2,-8(fp)
    d2f4:	10800054 	ori	r2,r2,1
    d2f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d2fc:	e0bfff17 	ldw	r2,-4(fp)
    d300:	10800a17 	ldw	r2,40(r2)
    d304:	e0fffe17 	ldw	r3,-8(fp)
    d308:	10c00035 	stwio	r3,0(r2)
}
    d30c:	e037883a 	mov	sp,fp
    d310:	df000017 	ldw	fp,0(sp)
    d314:	dec00104 	addi	sp,sp,4
    d318:	f800283a 	ret

0000d31c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
    d31c:	defffd04 	addi	sp,sp,-12
    d320:	df000215 	stw	fp,8(sp)
    d324:	df000204 	addi	fp,sp,8
    d328:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d32c:	e0bfff17 	ldw	r2,-4(fp)
    d330:	10800a17 	ldw	r2,40(r2)
    d334:	10800037 	ldwio	r2,0(r2)
    d338:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
    d33c:	e0fffe17 	ldw	r3,-8(fp)
    d340:	00bfff84 	movi	r2,-2
    d344:	1884703a 	and	r2,r3,r2
    d348:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d34c:	e0bfff17 	ldw	r2,-4(fp)
    d350:	10800a17 	ldw	r2,40(r2)
    d354:	e0fffe17 	ldw	r3,-8(fp)
    d358:	10c00035 	stwio	r3,0(r2)
}
    d35c:	e037883a 	mov	sp,fp
    d360:	df000017 	ldw	fp,0(sp)
    d364:	dec00104 	addi	sp,sp,4
    d368:	f800283a 	ret

0000d36c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
    d36c:	defffd04 	addi	sp,sp,-12
    d370:	df000215 	stw	fp,8(sp)
    d374:	df000204 	addi	fp,sp,8
    d378:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d37c:	e0bfff17 	ldw	r2,-4(fp)
    d380:	10800a17 	ldw	r2,40(r2)
    d384:	10800037 	ldwio	r2,0(r2)
    d388:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
    d38c:	e0bffe17 	ldw	r2,-8(fp)
    d390:	10800094 	ori	r2,r2,2
    d394:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d398:	e0bfff17 	ldw	r2,-4(fp)
    d39c:	10800a17 	ldw	r2,40(r2)
    d3a0:	e0fffe17 	ldw	r3,-8(fp)
    d3a4:	10c00035 	stwio	r3,0(r2)
}
    d3a8:	e037883a 	mov	sp,fp
    d3ac:	df000017 	ldw	fp,0(sp)
    d3b0:	dec00104 	addi	sp,sp,4
    d3b4:	f800283a 	ret

0000d3b8 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
    d3b8:	defffd04 	addi	sp,sp,-12
    d3bc:	df000215 	stw	fp,8(sp)
    d3c0:	df000204 	addi	fp,sp,8
    d3c4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d3c8:	e0bfff17 	ldw	r2,-4(fp)
    d3cc:	10800a17 	ldw	r2,40(r2)
    d3d0:	10800037 	ldwio	r2,0(r2)
    d3d4:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
    d3d8:	e0fffe17 	ldw	r3,-8(fp)
    d3dc:	00bfff44 	movi	r2,-3
    d3e0:	1884703a 	and	r2,r3,r2
    d3e4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d3e8:	e0bfff17 	ldw	r2,-4(fp)
    d3ec:	10800a17 	ldw	r2,40(r2)
    d3f0:	e0fffe17 	ldw	r3,-8(fp)
    d3f4:	10c00035 	stwio	r3,0(r2)
}
    d3f8:	e037883a 	mov	sp,fp
    d3fc:	df000017 	ldw	fp,0(sp)
    d400:	dec00104 	addi	sp,sp,4
    d404:	f800283a 	ret

0000d408 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
    d408:	defffd04 	addi	sp,sp,-12
    d40c:	df000215 	stw	fp,8(sp)
    d410:	df000204 	addi	fp,sp,8
    d414:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d418:	e0bfff17 	ldw	r2,-4(fp)
    d41c:	10800a17 	ldw	r2,40(r2)
    d420:	10800037 	ldwio	r2,0(r2)
    d424:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
    d428:	e0bffe17 	ldw	r2,-8(fp)
    d42c:	1080400c 	andi	r2,r2,256
    d430:	1004c03a 	cmpne	r2,r2,zero
}
    d434:	e037883a 	mov	sp,fp
    d438:	df000017 	ldw	fp,0(sp)
    d43c:	dec00104 	addi	sp,sp,4
    d440:	f800283a 	ret

0000d444 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
    d444:	defffd04 	addi	sp,sp,-12
    d448:	df000215 	stw	fp,8(sp)
    d44c:	df000204 	addi	fp,sp,8
    d450:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d454:	e0bfff17 	ldw	r2,-4(fp)
    d458:	10800a17 	ldw	r2,40(r2)
    d45c:	10800037 	ldwio	r2,0(r2)
    d460:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
    d464:	e0bffe17 	ldw	r2,-8(fp)
    d468:	1080800c 	andi	r2,r2,512
    d46c:	1004c03a 	cmpne	r2,r2,zero
}
    d470:	e037883a 	mov	sp,fp
    d474:	df000017 	ldw	fp,0(sp)
    d478:	dec00104 	addi	sp,sp,4
    d47c:	f800283a 	ret

0000d480 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
    d480:	defffd04 	addi	sp,sp,-12
    d484:	df000215 	stw	fp,8(sp)
    d488:	df000204 	addi	fp,sp,8
    d48c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
    d490:	e0bfff17 	ldw	r2,-4(fp)
    d494:	10800a17 	ldw	r2,40(r2)
    d498:	10800037 	ldwio	r2,0(r2)
    d49c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
    d4a0:	e0bffe17 	ldw	r2,-8(fp)
    d4a4:	10800114 	ori	r2,r2,4
    d4a8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
    d4ac:	e0bffe17 	ldw	r2,-8(fp)
    d4b0:	10800214 	ori	r2,r2,8
    d4b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d4b8:	e0bfff17 	ldw	r2,-4(fp)
    d4bc:	10800a17 	ldw	r2,40(r2)
    d4c0:	e0fffe17 	ldw	r3,-8(fp)
    d4c4:	10c00035 	stwio	r3,0(r2)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
    d4c8:	e0fffe17 	ldw	r3,-8(fp)
    d4cc:	00bffec4 	movi	r2,-5
    d4d0:	1884703a 	and	r2,r3,r2
    d4d4:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
    d4d8:	e0fffe17 	ldw	r3,-8(fp)
    d4dc:	00bffdc4 	movi	r2,-9
    d4e0:	1884703a 	and	r2,r3,r2
    d4e4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
    d4e8:	e0bfff17 	ldw	r2,-4(fp)
    d4ec:	10800a17 	ldw	r2,40(r2)
    d4f0:	e0fffe17 	ldw	r3,-8(fp)
    d4f4:	10c00035 	stwio	r3,0(r2)
}
    d4f8:	e037883a 	mov	sp,fp
    d4fc:	df000017 	ldw	fp,0(sp)
    d500:	dec00104 	addi	sp,sp,4
    d504:	f800283a 	ret

0000d508 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
    d508:	defffb04 	addi	sp,sp,-20
    d50c:	df000415 	stw	fp,16(sp)
    d510:	df000404 	addi	fp,sp,16
    d514:	e13ffd15 	stw	r4,-12(fp)
    d518:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d51c:	e0bffd17 	ldw	r2,-12(fp)
    d520:	10800a17 	ldw	r2,40(r2)
    d524:	10800104 	addi	r2,r2,4
    d528:	10800037 	ldwio	r2,0(r2)
    d52c:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d530:	e0bffe17 	ldw	r2,-8(fp)
    d534:	1004c03a 	cmpne	r2,r2,zero
    d538:	1000051e 	bne	r2,zero,d550 <alt_up_audio_read_fifo_avail+0x48>
    d53c:	e0bffc17 	ldw	r2,-16(fp)
    d540:	10bfc00c 	andi	r2,r2,65280
    d544:	1004d23a 	srli	r2,r2,8
    d548:	e0bfff15 	stw	r2,-4(fp)
    d54c:	00000306 	br	d55c <alt_up_audio_read_fifo_avail+0x54>
    d550:	e0bffc17 	ldw	r2,-16(fp)
    d554:	10803fcc 	andi	r2,r2,255
    d558:	e0bfff15 	stw	r2,-4(fp)
    d55c:	e0bfff17 	ldw	r2,-4(fp)
    d560:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
    d564:	e0bffc17 	ldw	r2,-16(fp)
}
    d568:	e037883a 	mov	sp,fp
    d56c:	df000017 	ldw	fp,0(sp)
    d570:	dec00104 	addi	sp,sp,4
    d574:	f800283a 	ret

0000d578 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d578:	defff904 	addi	sp,sp,-28
    d57c:	dfc00615 	stw	ra,24(sp)
    d580:	df000515 	stw	fp,20(sp)
    d584:	df000504 	addi	fp,sp,20
    d588:	e13ffc15 	stw	r4,-16(fp)
    d58c:	e17ffd15 	stw	r5,-12(fp)
    d590:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
    d594:	e13ffc17 	ldw	r4,-16(fp)
    d598:	01400044 	movi	r5,1
    d59c:	000d5080 	call	d508 <alt_up_audio_read_fifo_avail>
    d5a0:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    d5a4:	e0bffb17 	ldw	r2,-20(fp)
    d5a8:	10801868 	cmpgeui	r2,r2,97
    d5ac:	1000021e 	bne	r2,zero,d5b8 <alt_up_audio_record_r+0x40>
		return 0;
    d5b0:	e03fff15 	stw	zero,-4(fp)
    d5b4:	00000606 	br	d5d0 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    d5b8:	e13ffc17 	ldw	r4,-16(fp)
    d5bc:	e17ffd17 	ldw	r5,-12(fp)
    d5c0:	e1bffe17 	ldw	r6,-8(fp)
    d5c4:	01c00044 	movi	r7,1
    d5c8:	000d7ac0 	call	d7ac <alt_up_audio_read_fifo>
    d5cc:	e0bfff15 	stw	r2,-4(fp)
    d5d0:	e0bfff17 	ldw	r2,-4(fp)
}
    d5d4:	e037883a 	mov	sp,fp
    d5d8:	dfc00117 	ldw	ra,4(sp)
    d5dc:	df000017 	ldw	fp,0(sp)
    d5e0:	dec00204 	addi	sp,sp,8
    d5e4:	f800283a 	ret

0000d5e8 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d5e8:	defff904 	addi	sp,sp,-28
    d5ec:	dfc00615 	stw	ra,24(sp)
    d5f0:	df000515 	stw	fp,20(sp)
    d5f4:	df000504 	addi	fp,sp,20
    d5f8:	e13ffc15 	stw	r4,-16(fp)
    d5fc:	e17ffd15 	stw	r5,-12(fp)
    d600:	e1bffe15 	stw	r6,-8(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
    d604:	e13ffc17 	ldw	r4,-16(fp)
    d608:	000b883a 	mov	r5,zero
    d60c:	000d5080 	call	d508 <alt_up_audio_read_fifo_avail>
    d610:	e0bffb15 	stw	r2,-20(fp)
	if (data_words <= BUF_THRESHOLD)
    d614:	e0bffb17 	ldw	r2,-20(fp)
    d618:	10801868 	cmpgeui	r2,r2,97
    d61c:	1000021e 	bne	r2,zero,d628 <alt_up_audio_record_l+0x40>
		return 0;
    d620:	e03fff15 	stw	zero,-4(fp)
    d624:	00000606 	br	d640 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    d628:	e13ffc17 	ldw	r4,-16(fp)
    d62c:	e17ffd17 	ldw	r5,-12(fp)
    d630:	e1bffe17 	ldw	r6,-8(fp)
    d634:	000f883a 	mov	r7,zero
    d638:	000d7ac0 	call	d7ac <alt_up_audio_read_fifo>
    d63c:	e0bfff15 	stw	r2,-4(fp)
    d640:	e0bfff17 	ldw	r2,-4(fp)
}
    d644:	e037883a 	mov	sp,fp
    d648:	dfc00117 	ldw	ra,4(sp)
    d64c:	df000017 	ldw	fp,0(sp)
    d650:	dec00204 	addi	sp,sp,8
    d654:	f800283a 	ret

0000d658 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
    d658:	defffb04 	addi	sp,sp,-20
    d65c:	df000415 	stw	fp,16(sp)
    d660:	df000404 	addi	fp,sp,16
    d664:	e13ffd15 	stw	r4,-12(fp)
    d668:	e17ffe15 	stw	r5,-8(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d66c:	e0bffd17 	ldw	r2,-12(fp)
    d670:	10800a17 	ldw	r2,40(r2)
    d674:	10800104 	addi	r2,r2,4
    d678:	10800037 	ldwio	r2,0(r2)
    d67c:	e0bffc15 	stw	r2,-16(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d680:	e0bffe17 	ldw	r2,-8(fp)
    d684:	1004c03a 	cmpne	r2,r2,zero
    d688:	1000051e 	bne	r2,zero,d6a0 <alt_up_audio_write_fifo_space+0x48>
    d68c:	e0bffc17 	ldw	r2,-16(fp)
    d690:	10bfc02c 	andhi	r2,r2,65280
    d694:	1004d63a 	srli	r2,r2,24
    d698:	e0bfff15 	stw	r2,-4(fp)
    d69c:	00000406 	br	d6b0 <alt_up_audio_write_fifo_space+0x58>
    d6a0:	e0bffc17 	ldw	r2,-16(fp)
    d6a4:	10803fec 	andhi	r2,r2,255
    d6a8:	1004d43a 	srli	r2,r2,16
    d6ac:	e0bfff15 	stw	r2,-4(fp)
    d6b0:	e0bfff17 	ldw	r2,-4(fp)
    d6b4:	e0bffc15 	stw	r2,-16(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
    d6b8:	e0bffc17 	ldw	r2,-16(fp)
}
    d6bc:	e037883a 	mov	sp,fp
    d6c0:	df000017 	ldw	fp,0(sp)
    d6c4:	dec00104 	addi	sp,sp,4
    d6c8:	f800283a 	ret

0000d6cc <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d6cc:	defff904 	addi	sp,sp,-28
    d6d0:	dfc00615 	stw	ra,24(sp)
    d6d4:	df000515 	stw	fp,20(sp)
    d6d8:	df000504 	addi	fp,sp,20
    d6dc:	e13ffc15 	stw	r4,-16(fp)
    d6e0:	e17ffd15 	stw	r5,-12(fp)
    d6e4:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
    d6e8:	e13ffc17 	ldw	r4,-16(fp)
    d6ec:	01400044 	movi	r5,1
    d6f0:	000d6580 	call	d658 <alt_up_audio_write_fifo_space>
    d6f4:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    d6f8:	e0bffb17 	ldw	r2,-20(fp)
    d6fc:	10801868 	cmpgeui	r2,r2,97
    d700:	1000021e 	bne	r2,zero,d70c <alt_up_audio_play_r+0x40>
		return 0;
    d704:	e03fff15 	stw	zero,-4(fp)
    d708:	00000606 	br	d724 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
    d70c:	e13ffc17 	ldw	r4,-16(fp)
    d710:	e17ffd17 	ldw	r5,-12(fp)
    d714:	e1bffe17 	ldw	r6,-8(fp)
    d718:	01c00044 	movi	r7,1
    d71c:	000d8b00 	call	d8b0 <alt_up_audio_write_fifo>
    d720:	e0bfff15 	stw	r2,-4(fp)
    d724:	e0bfff17 	ldw	r2,-4(fp)
}
    d728:	e037883a 	mov	sp,fp
    d72c:	dfc00117 	ldw	ra,4(sp)
    d730:	df000017 	ldw	fp,0(sp)
    d734:	dec00204 	addi	sp,sp,8
    d738:	f800283a 	ret

0000d73c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
    d73c:	defff904 	addi	sp,sp,-28
    d740:	dfc00615 	stw	ra,24(sp)
    d744:	df000515 	stw	fp,20(sp)
    d748:	df000504 	addi	fp,sp,20
    d74c:	e13ffc15 	stw	r4,-16(fp)
    d750:	e17ffd15 	stw	r5,-12(fp)
    d754:	e1bffe15 	stw	r6,-8(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
    d758:	e13ffc17 	ldw	r4,-16(fp)
    d75c:	000b883a 	mov	r5,zero
    d760:	000d6580 	call	d658 <alt_up_audio_write_fifo_space>
    d764:	e0bffb15 	stw	r2,-20(fp)
	if (space <= BUF_THRESHOLD)
    d768:	e0bffb17 	ldw	r2,-20(fp)
    d76c:	10801868 	cmpgeui	r2,r2,97
    d770:	1000021e 	bne	r2,zero,d77c <alt_up_audio_play_l+0x40>
		return 0;
    d774:	e03fff15 	stw	zero,-4(fp)
    d778:	00000606 	br	d794 <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
    d77c:	e13ffc17 	ldw	r4,-16(fp)
    d780:	e17ffd17 	ldw	r5,-12(fp)
    d784:	e1bffe17 	ldw	r6,-8(fp)
    d788:	000f883a 	mov	r7,zero
    d78c:	000d8b00 	call	d8b0 <alt_up_audio_write_fifo>
    d790:	e0bfff15 	stw	r2,-4(fp)
    d794:	e0bfff17 	ldw	r2,-4(fp)
}
    d798:	e037883a 	mov	sp,fp
    d79c:	dfc00117 	ldw	ra,4(sp)
    d7a0:	df000017 	ldw	fp,0(sp)
    d7a4:	dec00204 	addi	sp,sp,8
    d7a8:	f800283a 	ret

0000d7ac <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    d7ac:	defff604 	addi	sp,sp,-40
    d7b0:	df000915 	stw	fp,36(sp)
    d7b4:	df000904 	addi	fp,sp,36
    d7b8:	e13ff915 	stw	r4,-28(fp)
    d7bc:	e17ffa15 	stw	r5,-24(fp)
    d7c0:	e1bffb15 	stw	r6,-20(fp)
    d7c4:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
    d7c8:	e03ff715 	stw	zero,-36(fp)
	while ( count < len ) 
    d7cc:	00003006 	br	d890 <alt_up_audio_read_fifo+0xe4>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d7d0:	e0bff917 	ldw	r2,-28(fp)
    d7d4:	10800a17 	ldw	r2,40(r2)
    d7d8:	10800104 	addi	r2,r2,4
    d7dc:	10800037 	ldwio	r2,0(r2)
    d7e0:	e0bff815 	stw	r2,-32(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d7e4:	e0bffc17 	ldw	r2,-16(fp)
    d7e8:	1004c03a 	cmpne	r2,r2,zero
    d7ec:	1000051e 	bne	r2,zero,d804 <alt_up_audio_read_fifo+0x58>
    d7f0:	e0bff817 	ldw	r2,-32(fp)
    d7f4:	10bfc00c 	andi	r2,r2,65280
    d7f8:	1004d23a 	srli	r2,r2,8
    d7fc:	e0bfff15 	stw	r2,-4(fp)
    d800:	00000306 	br	d810 <alt_up_audio_read_fifo+0x64>
    d804:	e0bff817 	ldw	r2,-32(fp)
    d808:	10803fcc 	andi	r2,r2,255
    d80c:	e0bfff15 	stw	r2,-4(fp)
    d810:	e0bfff17 	ldw	r2,-4(fp)
    d814:	e0bff815 	stw	r2,-32(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
    d818:	e0bff817 	ldw	r2,-32(fp)
    d81c:	1005003a 	cmpeq	r2,r2,zero
    d820:	10001e1e 	bne	r2,zero,d89c <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
    d824:	e0bff717 	ldw	r2,-36(fp)
    d828:	1085883a 	add	r2,r2,r2
    d82c:	1085883a 	add	r2,r2,r2
    d830:	1007883a 	mov	r3,r2
    d834:	e0bffa17 	ldw	r2,-24(fp)
    d838:	1887883a 	add	r3,r3,r2
    d83c:	e0fffe15 	stw	r3,-8(fp)
    d840:	e0bffc17 	ldw	r2,-16(fp)
    d844:	1004c03a 	cmpne	r2,r2,zero
    d848:	1000061e 	bne	r2,zero,d864 <alt_up_audio_read_fifo+0xb8>
    d84c:	e0bff917 	ldw	r2,-28(fp)
    d850:	10800a17 	ldw	r2,40(r2)
    d854:	10800204 	addi	r2,r2,8
    d858:	10800037 	ldwio	r2,0(r2)
    d85c:	e0bffd15 	stw	r2,-12(fp)
    d860:	00000506 	br	d878 <alt_up_audio_read_fifo+0xcc>
    d864:	e0bff917 	ldw	r2,-28(fp)
    d868:	10800a17 	ldw	r2,40(r2)
    d86c:	10800304 	addi	r2,r2,12
    d870:	10800037 	ldwio	r2,0(r2)
    d874:	e0bffd15 	stw	r2,-12(fp)
    d878:	e0fffd17 	ldw	r3,-12(fp)
    d87c:	e0bffe17 	ldw	r2,-8(fp)
    d880:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
    d884:	e0bff717 	ldw	r2,-36(fp)
    d888:	10800044 	addi	r2,r2,1
    d88c:	e0bff715 	stw	r2,-36(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    d890:	e0fff717 	ldw	r3,-36(fp)
    d894:	e0bffb17 	ldw	r2,-20(fp)
    d898:	18bfcd16 	blt	r3,r2,d7d0 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
    d89c:	e0bff717 	ldw	r2,-36(fp)
}
    d8a0:	e037883a 	mov	sp,fp
    d8a4:	df000017 	ldw	fp,0(sp)
    d8a8:	dec00104 	addi	sp,sp,4
    d8ac:	f800283a 	ret

0000d8b0 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
    d8b0:	defff804 	addi	sp,sp,-32
    d8b4:	df000715 	stw	fp,28(sp)
    d8b8:	df000704 	addi	fp,sp,28
    d8bc:	e13ffb15 	stw	r4,-20(fp)
    d8c0:	e17ffc15 	stw	r5,-16(fp)
    d8c4:	e1bffd15 	stw	r6,-12(fp)
    d8c8:	e1fffe15 	stw	r7,-8(fp)
	unsigned int fifospace;
	int count = 0;
    d8cc:	e03ff915 	stw	zero,-28(fp)
	while ( count < len ) 
    d8d0:	00003a06 	br	d9bc <alt_up_audio_write_fifo+0x10c>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
    d8d4:	e0bffb17 	ldw	r2,-20(fp)
    d8d8:	10800a17 	ldw	r2,40(r2)
    d8dc:	10800104 	addi	r2,r2,4
    d8e0:	10800037 	ldwio	r2,0(r2)
    d8e4:	e0bffa15 	stw	r2,-24(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
    d8e8:	e0bffe17 	ldw	r2,-8(fp)
    d8ec:	1004c03a 	cmpne	r2,r2,zero
    d8f0:	1000051e 	bne	r2,zero,d908 <alt_up_audio_write_fifo+0x58>
    d8f4:	e0bffa17 	ldw	r2,-24(fp)
    d8f8:	10bfc02c 	andhi	r2,r2,65280
    d8fc:	1004d63a 	srli	r2,r2,24
    d900:	e0bfff15 	stw	r2,-4(fp)
    d904:	00000406 	br	d918 <alt_up_audio_write_fifo+0x68>
    d908:	e0bffa17 	ldw	r2,-24(fp)
    d90c:	10803fec 	andhi	r2,r2,255
    d910:	1004d43a 	srli	r2,r2,16
    d914:	e0bfff15 	stw	r2,-4(fp)
    d918:	e0bfff17 	ldw	r2,-4(fp)
    d91c:	e0bffa15 	stw	r2,-24(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
    d920:	e0bffa17 	ldw	r2,-24(fp)
    d924:	1005003a 	cmpeq	r2,r2,zero
    d928:	1000271e 	bne	r2,zero,d9c8 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
    d92c:	e0bffe17 	ldw	r2,-8(fp)
    d930:	1004c03a 	cmpne	r2,r2,zero
    d934:	1000111e 	bne	r2,zero,d97c <alt_up_audio_write_fifo+0xcc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
    d938:	e0bffb17 	ldw	r2,-20(fp)
    d93c:	10800a17 	ldw	r2,40(r2)
    d940:	11000204 	addi	r4,r2,8
    d944:	e0bff917 	ldw	r2,-28(fp)
    d948:	1085883a 	add	r2,r2,r2
    d94c:	1085883a 	add	r2,r2,r2
    d950:	1007883a 	mov	r3,r2
    d954:	e0bffc17 	ldw	r2,-16(fp)
    d958:	1885883a 	add	r2,r3,r2
    d95c:	10800017 	ldw	r2,0(r2)
    d960:	1007883a 	mov	r3,r2
    d964:	e0bff917 	ldw	r2,-28(fp)
    d968:	10800044 	addi	r2,r2,1
    d96c:	e0bff915 	stw	r2,-28(fp)
    d970:	2005883a 	mov	r2,r4
    d974:	10c00035 	stwio	r3,0(r2)
    d978:	00001006 	br	d9bc <alt_up_audio_write_fifo+0x10c>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
    d97c:	e0bffb17 	ldw	r2,-20(fp)
    d980:	10800a17 	ldw	r2,40(r2)
    d984:	11000304 	addi	r4,r2,12
    d988:	e0bff917 	ldw	r2,-28(fp)
    d98c:	1085883a 	add	r2,r2,r2
    d990:	1085883a 	add	r2,r2,r2
    d994:	1007883a 	mov	r3,r2
    d998:	e0bffc17 	ldw	r2,-16(fp)
    d99c:	1885883a 	add	r2,r3,r2
    d9a0:	10800017 	ldw	r2,0(r2)
    d9a4:	1007883a 	mov	r3,r2
    d9a8:	e0bff917 	ldw	r2,-28(fp)
    d9ac:	10800044 	addi	r2,r2,1
    d9b0:	e0bff915 	stw	r2,-28(fp)
    d9b4:	2005883a 	mov	r2,r4
    d9b8:	10c00035 	stwio	r3,0(r2)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
    d9bc:	e0fff917 	ldw	r3,-28(fp)
    d9c0:	e0bffd17 	ldw	r2,-12(fp)
    d9c4:	18bfc316 	blt	r3,r2,d8d4 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
    d9c8:	e0bff917 	ldw	r2,-28(fp)
}
    d9cc:	e037883a 	mov	sp,fp
    d9d0:	df000017 	ldw	fp,0(sp)
    d9d4:	dec00104 	addi	sp,sp,4
    d9d8:	f800283a 	ret

0000d9dc <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
    d9dc:	defffc04 	addi	sp,sp,-16
    d9e0:	df000315 	stw	fp,12(sp)
    d9e4:	df000304 	addi	fp,sp,12
    d9e8:	e13ffd15 	stw	r4,-12(fp)
    d9ec:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
    d9f0:	e0bffe17 	ldw	r2,-8(fp)
    d9f4:	1004c03a 	cmpne	r2,r2,zero
    d9f8:	1000061e 	bne	r2,zero,da14 <alt_up_audio_read_fifo_head+0x38>
    d9fc:	e0bffd17 	ldw	r2,-12(fp)
    da00:	10800a17 	ldw	r2,40(r2)
    da04:	10800204 	addi	r2,r2,8
    da08:	10800037 	ldwio	r2,0(r2)
    da0c:	e0bfff15 	stw	r2,-4(fp)
    da10:	00000506 	br	da28 <alt_up_audio_read_fifo_head+0x4c>
    da14:	e0bffd17 	ldw	r2,-12(fp)
    da18:	10800a17 	ldw	r2,40(r2)
    da1c:	10800304 	addi	r2,r2,12
    da20:	10800037 	ldwio	r2,0(r2)
    da24:	e0bfff15 	stw	r2,-4(fp)
    da28:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
    da2c:	e037883a 	mov	sp,fp
    da30:	df000017 	ldw	fp,0(sp)
    da34:	dec00104 	addi	sp,sp,4
    da38:	f800283a 	ret

0000da3c <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
    da3c:	defffc04 	addi	sp,sp,-16
    da40:	df000315 	stw	fp,12(sp)
    da44:	df000304 	addi	fp,sp,12
    da48:	e13ffd15 	stw	r4,-12(fp)
    da4c:	e17ffe15 	stw	r5,-8(fp)
    da50:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
    da54:	e0bfff17 	ldw	r2,-4(fp)
    da58:	1004c03a 	cmpne	r2,r2,zero
    da5c:	1000061e 	bne	r2,zero,da78 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
    da60:	e0bffd17 	ldw	r2,-12(fp)
    da64:	10800a17 	ldw	r2,40(r2)
    da68:	10800204 	addi	r2,r2,8
    da6c:	e0fffe17 	ldw	r3,-8(fp)
    da70:	10c00035 	stwio	r3,0(r2)
    da74:	00000506 	br	da8c <alt_up_audio_write_fifo_head+0x50>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
    da78:	e0bffd17 	ldw	r2,-12(fp)
    da7c:	10800a17 	ldw	r2,40(r2)
    da80:	10800304 	addi	r2,r2,12
    da84:	e0fffe17 	ldw	r3,-8(fp)
    da88:	10c00035 	stwio	r3,0(r2)
}
    da8c:	e037883a 	mov	sp,fp
    da90:	df000017 	ldw	fp,0(sp)
    da94:	dec00104 	addi	sp,sp,4
    da98:	f800283a 	ret

0000da9c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    da9c:	defffc04 	addi	sp,sp,-16
    daa0:	df000315 	stw	fp,12(sp)
    daa4:	df000304 	addi	fp,sp,12
    daa8:	e13ffe15 	stw	r4,-8(fp)
    daac:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    dab0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    dab4:	e0bfff17 	ldw	r2,-4(fp)
    dab8:	1004c03a 	cmpne	r2,r2,zero
    dabc:	1000061e 	bne	r2,zero,dad8 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    dac0:	e0bffe17 	ldw	r2,-8(fp)
    dac4:	1007883a 	mov	r3,r2
    dac8:	e0bffd03 	ldbu	r2,-12(fp)
    dacc:	10c4b03a 	or	r2,r2,r3
    dad0:	e0bffd05 	stb	r2,-12(fp)
    dad4:	00000806 	br	daf8 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    dad8:	e0bffe17 	ldw	r2,-8(fp)
    dadc:	1007883a 	mov	r3,r2
    dae0:	e0bffd03 	ldbu	r2,-12(fp)
    dae4:	10c4b03a 	or	r2,r2,r3
    dae8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    daec:	e0bffd03 	ldbu	r2,-12(fp)
    daf0:	10801014 	ori	r2,r2,64
    daf4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    daf8:	e0fffd03 	ldbu	r3,-12(fp)
    dafc:	00bfe004 	movi	r2,-128
    db00:	1884b03a 	or	r2,r3,r2
    db04:	10803fcc 	andi	r2,r2,255
}
    db08:	e037883a 	mov	sp,fp
    db0c:	df000017 	ldw	fp,0(sp)
    db10:	dec00104 	addi	sp,sp,4
    db14:	f800283a 	ret

0000db18 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    db18:	defffd04 	addi	sp,sp,-12
    db1c:	df000215 	stw	fp,8(sp)
    db20:	df000204 	addi	fp,sp,8
    db24:	e13ffe15 	stw	r4,-8(fp)
    db28:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    db2c:	e0bffe17 	ldw	r2,-8(fp)
    db30:	10800a17 	ldw	r2,40(r2)
    db34:	e0ffff03 	ldbu	r3,-4(fp)
    db38:	10c00025 	stbio	r3,0(r2)
}
    db3c:	e037883a 	mov	sp,fp
    db40:	df000017 	ldw	fp,0(sp)
    db44:	dec00104 	addi	sp,sp,4
    db48:	f800283a 	ret

0000db4c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    db4c:	defffe04 	addi	sp,sp,-8
    db50:	df000115 	stw	fp,4(sp)
    db54:	df000104 	addi	fp,sp,4
    db58:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    db5c:	e0bfff17 	ldw	r2,-4(fp)
    db60:	10800a17 	ldw	r2,40(r2)
    db64:	1007883a 	mov	r3,r2
    db68:	00800044 	movi	r2,1
    db6c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    db70:	e037883a 	mov	sp,fp
    db74:	df000017 	ldw	fp,0(sp)
    db78:	dec00104 	addi	sp,sp,4
    db7c:	f800283a 	ret

0000db80 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    db80:	defffc04 	addi	sp,sp,-16
    db84:	dfc00315 	stw	ra,12(sp)
    db88:	df000215 	stw	fp,8(sp)
    db8c:	df000204 	addi	fp,sp,8
    db90:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    db94:	e13fff17 	ldw	r4,-4(fp)
    db98:	01400074 	movhi	r5,1
    db9c:	2951a304 	addi	r5,r5,18060
    dba0:	0010d7c0 	call	10d7c <alt_find_dev>
    dba4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    dba8:	e0bffe17 	ldw	r2,-8(fp)
}
    dbac:	e037883a 	mov	sp,fp
    dbb0:	dfc00117 	ldw	ra,4(sp)
    dbb4:	df000017 	ldw	fp,0(sp)
    dbb8:	dec00204 	addi	sp,sp,8
    dbbc:	f800283a 	ret

0000dbc0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    dbc0:	defffb04 	addi	sp,sp,-20
    dbc4:	df000415 	stw	fp,16(sp)
    dbc8:	df000404 	addi	fp,sp,16
    dbcc:	e13ffd15 	stw	r4,-12(fp)
    dbd0:	e17ffe15 	stw	r5,-8(fp)
    dbd4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    dbd8:	e03ffc15 	stw	zero,-16(fp)
    dbdc:	00000f06 	br	dc1c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    dbe0:	e0bffd17 	ldw	r2,-12(fp)
    dbe4:	10800a17 	ldw	r2,40(r2)
    dbe8:	11000044 	addi	r4,r2,1
    dbec:	e0fffc17 	ldw	r3,-16(fp)
    dbf0:	e0bffe17 	ldw	r2,-8(fp)
    dbf4:	1885883a 	add	r2,r3,r2
    dbf8:	10800003 	ldbu	r2,0(r2)
    dbfc:	10c03fcc 	andi	r3,r2,255
    dc00:	18c0201c 	xori	r3,r3,128
    dc04:	18ffe004 	addi	r3,r3,-128
    dc08:	2005883a 	mov	r2,r4
    dc0c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    dc10:	e0bffc17 	ldw	r2,-16(fp)
    dc14:	10800044 	addi	r2,r2,1
    dc18:	e0bffc15 	stw	r2,-16(fp)
    dc1c:	e0fffc17 	ldw	r3,-16(fp)
    dc20:	e0bfff17 	ldw	r2,-4(fp)
    dc24:	18bfee36 	bltu	r3,r2,dbe0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    dc28:	e037883a 	mov	sp,fp
    dc2c:	df000017 	ldw	fp,0(sp)
    dc30:	dec00104 	addi	sp,sp,4
    dc34:	f800283a 	ret

0000dc38 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    dc38:	defffd04 	addi	sp,sp,-12
    dc3c:	df000215 	stw	fp,8(sp)
    dc40:	df000204 	addi	fp,sp,8
    dc44:	e13ffe15 	stw	r4,-8(fp)
    dc48:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    dc4c:	00000d06 	br	dc84 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    dc50:	e0bffe17 	ldw	r2,-8(fp)
    dc54:	10800a17 	ldw	r2,40(r2)
    dc58:	11000044 	addi	r4,r2,1
    dc5c:	e0bfff17 	ldw	r2,-4(fp)
    dc60:	10800003 	ldbu	r2,0(r2)
    dc64:	10c03fcc 	andi	r3,r2,255
    dc68:	18c0201c 	xori	r3,r3,128
    dc6c:	18ffe004 	addi	r3,r3,-128
    dc70:	2005883a 	mov	r2,r4
    dc74:	10c00025 	stbio	r3,0(r2)
		++ptr;
    dc78:	e0bfff17 	ldw	r2,-4(fp)
    dc7c:	10800044 	addi	r2,r2,1
    dc80:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    dc84:	e0bfff17 	ldw	r2,-4(fp)
    dc88:	10800003 	ldbu	r2,0(r2)
    dc8c:	10803fcc 	andi	r2,r2,255
    dc90:	1080201c 	xori	r2,r2,128
    dc94:	10bfe004 	addi	r2,r2,-128
    dc98:	1004c03a 	cmpne	r2,r2,zero
    dc9c:	103fec1e 	bne	r2,zero,dc50 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    dca0:	e037883a 	mov	sp,fp
    dca4:	df000017 	ldw	fp,0(sp)
    dca8:	dec00104 	addi	sp,sp,4
    dcac:	f800283a 	ret

0000dcb0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    dcb0:	defffb04 	addi	sp,sp,-20
    dcb4:	dfc00415 	stw	ra,16(sp)
    dcb8:	df000315 	stw	fp,12(sp)
    dcbc:	df000304 	addi	fp,sp,12
    dcc0:	e13ffd15 	stw	r4,-12(fp)
    dcc4:	e17ffe15 	stw	r5,-8(fp)
    dcc8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    dccc:	e0bffd17 	ldw	r2,-12(fp)
    dcd0:	10800017 	ldw	r2,0(r2)
    dcd4:	1009883a 	mov	r4,r2
    dcd8:	e1bfff17 	ldw	r6,-4(fp)
    dcdc:	e17ffe17 	ldw	r5,-8(fp)
    dce0:	000dbc00 	call	dbc0 <alt_up_character_lcd_write>
	return 0;
    dce4:	0005883a 	mov	r2,zero
}
    dce8:	e037883a 	mov	sp,fp
    dcec:	dfc00117 	ldw	ra,4(sp)
    dcf0:	df000017 	ldw	fp,0(sp)
    dcf4:	dec00204 	addi	sp,sp,8
    dcf8:	f800283a 	ret

0000dcfc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    dcfc:	defff904 	addi	sp,sp,-28
    dd00:	dfc00615 	stw	ra,24(sp)
    dd04:	df000515 	stw	fp,20(sp)
    dd08:	df000504 	addi	fp,sp,20
    dd0c:	e13ffc15 	stw	r4,-16(fp)
    dd10:	e17ffd15 	stw	r5,-12(fp)
    dd14:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    dd18:	e0bffd17 	ldw	r2,-12(fp)
    dd1c:	10800a28 	cmpgeui	r2,r2,40
    dd20:	1000031e 	bne	r2,zero,dd30 <alt_up_character_lcd_set_cursor_pos+0x34>
    dd24:	e0bffe17 	ldw	r2,-8(fp)
    dd28:	108000b0 	cmpltui	r2,r2,2
    dd2c:	1000031e 	bne	r2,zero,dd3c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    dd30:	00bfffc4 	movi	r2,-1
    dd34:	e0bfff15 	stw	r2,-4(fp)
    dd38:	00000806 	br	dd5c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    dd3c:	e13ffd17 	ldw	r4,-12(fp)
    dd40:	e17ffe17 	ldw	r5,-8(fp)
    dd44:	000da9c0 	call	da9c <get_DDRAM_addr>
    dd48:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    dd4c:	e17ffb03 	ldbu	r5,-20(fp)
    dd50:	e13ffc17 	ldw	r4,-16(fp)
    dd54:	000db180 	call	db18 <alt_up_character_lcd_send_cmd>
	return 0;
    dd58:	e03fff15 	stw	zero,-4(fp)
    dd5c:	e0bfff17 	ldw	r2,-4(fp)
}
    dd60:	e037883a 	mov	sp,fp
    dd64:	dfc00117 	ldw	ra,4(sp)
    dd68:	df000017 	ldw	fp,0(sp)
    dd6c:	dec00204 	addi	sp,sp,8
    dd70:	f800283a 	ret

0000dd74 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    dd74:	defff904 	addi	sp,sp,-28
    dd78:	dfc00615 	stw	ra,24(sp)
    dd7c:	df000515 	stw	fp,20(sp)
    dd80:	df000504 	addi	fp,sp,20
    dd84:	e13ffc15 	stw	r4,-16(fp)
    dd88:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    dd8c:	e0bffd17 	ldw	r2,-12(fp)
    dd90:	1005003a 	cmpeq	r2,r2,zero
    dd94:	10001e1e 	bne	r2,zero,de10 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    dd98:	e0bffd17 	ldw	r2,-12(fp)
    dd9c:	10800050 	cmplti	r2,r2,1
    dda0:	1000031e 	bne	r2,zero,ddb0 <alt_up_character_lcd_shift_cursor+0x3c>
    dda4:	00800504 	movi	r2,20
    dda8:	e0bfff05 	stb	r2,-4(fp)
    ddac:	00000206 	br	ddb8 <alt_up_character_lcd_shift_cursor+0x44>
    ddb0:	00c00404 	movi	r3,16
    ddb4:	e0ffff05 	stb	r3,-4(fp)
    ddb8:	e0bfff03 	ldbu	r2,-4(fp)
    ddbc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    ddc0:	e0fffd17 	ldw	r3,-12(fp)
    ddc4:	e0fffe15 	stw	r3,-8(fp)
    ddc8:	e0fffe17 	ldw	r3,-8(fp)
    ddcc:	1804403a 	cmpge	r2,r3,zero
    ddd0:	1000031e 	bne	r2,zero,dde0 <alt_up_character_lcd_shift_cursor+0x6c>
    ddd4:	e0bffe17 	ldw	r2,-8(fp)
    ddd8:	0085c83a 	sub	r2,zero,r2
    dddc:	e0bffe15 	stw	r2,-8(fp)
    dde0:	e0fffe17 	ldw	r3,-8(fp)
    dde4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    dde8:	00000306 	br	ddf8 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    ddec:	e17ffb43 	ldbu	r5,-19(fp)
    ddf0:	e13ffc17 	ldw	r4,-16(fp)
    ddf4:	000db180 	call	db18 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    ddf8:	e0bffb03 	ldbu	r2,-20(fp)
    ddfc:	10bfffc4 	addi	r2,r2,-1
    de00:	e0bffb05 	stb	r2,-20(fp)
    de04:	e0bffb03 	ldbu	r2,-20(fp)
    de08:	10803fd8 	cmpnei	r2,r2,255
    de0c:	103ff71e 	bne	r2,zero,ddec <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    de10:	e037883a 	mov	sp,fp
    de14:	dfc00117 	ldw	ra,4(sp)
    de18:	df000017 	ldw	fp,0(sp)
    de1c:	dec00204 	addi	sp,sp,8
    de20:	f800283a 	ret

0000de24 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    de24:	defff904 	addi	sp,sp,-28
    de28:	dfc00615 	stw	ra,24(sp)
    de2c:	df000515 	stw	fp,20(sp)
    de30:	df000504 	addi	fp,sp,20
    de34:	e13ffc15 	stw	r4,-16(fp)
    de38:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    de3c:	e0bffd17 	ldw	r2,-12(fp)
    de40:	1005003a 	cmpeq	r2,r2,zero
    de44:	10001e1e 	bne	r2,zero,dec0 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    de48:	e0bffd17 	ldw	r2,-12(fp)
    de4c:	10800050 	cmplti	r2,r2,1
    de50:	1000031e 	bne	r2,zero,de60 <alt_up_character_lcd_shift_display+0x3c>
    de54:	00800704 	movi	r2,28
    de58:	e0bfff05 	stb	r2,-4(fp)
    de5c:	00000206 	br	de68 <alt_up_character_lcd_shift_display+0x44>
    de60:	00c00604 	movi	r3,24
    de64:	e0ffff05 	stb	r3,-4(fp)
    de68:	e0bfff03 	ldbu	r2,-4(fp)
    de6c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    de70:	e0fffd17 	ldw	r3,-12(fp)
    de74:	e0fffe15 	stw	r3,-8(fp)
    de78:	e0fffe17 	ldw	r3,-8(fp)
    de7c:	1804403a 	cmpge	r2,r3,zero
    de80:	1000031e 	bne	r2,zero,de90 <alt_up_character_lcd_shift_display+0x6c>
    de84:	e0bffe17 	ldw	r2,-8(fp)
    de88:	0085c83a 	sub	r2,zero,r2
    de8c:	e0bffe15 	stw	r2,-8(fp)
    de90:	e0fffe17 	ldw	r3,-8(fp)
    de94:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    de98:	00000306 	br	dea8 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    de9c:	e17ffb43 	ldbu	r5,-19(fp)
    dea0:	e13ffc17 	ldw	r4,-16(fp)
    dea4:	000db180 	call	db18 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    dea8:	e0bffb03 	ldbu	r2,-20(fp)
    deac:	10bfffc4 	addi	r2,r2,-1
    deb0:	e0bffb05 	stb	r2,-20(fp)
    deb4:	e0bffb03 	ldbu	r2,-20(fp)
    deb8:	10803fd8 	cmpnei	r2,r2,255
    debc:	103ff71e 	bne	r2,zero,de9c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    dec0:	e037883a 	mov	sp,fp
    dec4:	dfc00117 	ldw	ra,4(sp)
    dec8:	df000017 	ldw	fp,0(sp)
    decc:	dec00204 	addi	sp,sp,8
    ded0:	f800283a 	ret

0000ded4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    ded4:	defff904 	addi	sp,sp,-28
    ded8:	dfc00615 	stw	ra,24(sp)
    dedc:	df000515 	stw	fp,20(sp)
    dee0:	df000504 	addi	fp,sp,20
    dee4:	e13ffc15 	stw	r4,-16(fp)
    dee8:	e17ffd15 	stw	r5,-12(fp)
    deec:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    def0:	e0bffd17 	ldw	r2,-12(fp)
    def4:	10800a28 	cmpgeui	r2,r2,40
    def8:	1000031e 	bne	r2,zero,df08 <alt_up_character_lcd_erase_pos+0x34>
    defc:	e0bffe17 	ldw	r2,-8(fp)
    df00:	108000b0 	cmpltui	r2,r2,2
    df04:	1000031e 	bne	r2,zero,df14 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    df08:	00bfffc4 	movi	r2,-1
    df0c:	e0bfff15 	stw	r2,-4(fp)
    df10:	00000e06 	br	df4c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    df14:	e13ffd17 	ldw	r4,-12(fp)
    df18:	e17ffe17 	ldw	r5,-8(fp)
    df1c:	000da9c0 	call	da9c <get_DDRAM_addr>
    df20:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    df24:	e17ffb03 	ldbu	r5,-20(fp)
    df28:	e13ffc17 	ldw	r4,-16(fp)
    df2c:	000db180 	call	db18 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    df30:	e0bffc17 	ldw	r2,-16(fp)
    df34:	10800a17 	ldw	r2,40(r2)
    df38:	10800044 	addi	r2,r2,1
    df3c:	1007883a 	mov	r3,r2
    df40:	00800084 	movi	r2,2
    df44:	18800025 	stbio	r2,0(r3)
	return 0;
    df48:	e03fff15 	stw	zero,-4(fp)
    df4c:	e0bfff17 	ldw	r2,-4(fp)
}
    df50:	e037883a 	mov	sp,fp
    df54:	dfc00117 	ldw	ra,4(sp)
    df58:	df000017 	ldw	fp,0(sp)
    df5c:	dec00204 	addi	sp,sp,8
    df60:	f800283a 	ret

0000df64 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    df64:	defffd04 	addi	sp,sp,-12
    df68:	dfc00215 	stw	ra,8(sp)
    df6c:	df000115 	stw	fp,4(sp)
    df70:	df000104 	addi	fp,sp,4
    df74:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    df78:	e13fff17 	ldw	r4,-4(fp)
    df7c:	01400304 	movi	r5,12
    df80:	000db180 	call	db18 <alt_up_character_lcd_send_cmd>
}
    df84:	e037883a 	mov	sp,fp
    df88:	dfc00117 	ldw	ra,4(sp)
    df8c:	df000017 	ldw	fp,0(sp)
    df90:	dec00204 	addi	sp,sp,8
    df94:	f800283a 	ret

0000df98 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    df98:	defffd04 	addi	sp,sp,-12
    df9c:	dfc00215 	stw	ra,8(sp)
    dfa0:	df000115 	stw	fp,4(sp)
    dfa4:	df000104 	addi	fp,sp,4
    dfa8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    dfac:	e13fff17 	ldw	r4,-4(fp)
    dfb0:	014003c4 	movi	r5,15
    dfb4:	000db180 	call	db18 <alt_up_character_lcd_send_cmd>
}
    dfb8:	e037883a 	mov	sp,fp
    dfbc:	dfc00117 	ldw	ra,4(sp)
    dfc0:	df000017 	ldw	fp,0(sp)
    dfc4:	dec00204 	addi	sp,sp,8
    dfc8:	f800283a 	ret

0000dfcc <alt_up_ethernet_init>:
#include "altera_up_avalon_ethernet.h"
#include "altera_up_avalon_ethernet_regs.h"
#include "altera_up_avalon_ethernet_low_level_driver.h"

void alt_up_ethernet_init(alt_up_ethernet_dev *ethernet)
{
    dfcc:	defffb04 	addi	sp,sp,-20
    dfd0:	dfc00415 	stw	ra,16(sp)
    dfd4:	df000315 	stw	fp,12(sp)
    dfd8:	df000304 	addi	fp,sp,12
    dfdc:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned int base = ethernet->base;
    dfe0:	e0bfff17 	ldw	r2,-4(fp)
    dfe4:	10800a17 	ldw	r2,40(r2)
    dfe8:	e0bffe15 	stw	r2,-8(fp)
	int i;

	// Power on the internal PHY
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_GPR, 0x00 );
    dfec:	e13ffe17 	ldw	r4,-8(fp)
    dff0:	014007c4 	movi	r5,31
    dff4:	000d883a 	mov	r6,zero
    dff8:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	// Software Reset of the Ethernet chip
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x01 );
    dffc:	e13ffe17 	ldw	r4,-8(fp)
    e000:	000b883a 	mov	r5,zero
    e004:	01800044 	movi	r6,1
    e008:	000e1580 	call	e158 <alt_up_ethernet_reg_write>
	usleep(10);
    e00c:	01000284 	movi	r4,10
    e010:	00113e40 	call	113e4 <usleep>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
    e014:	e13ffe17 	ldw	r4,-8(fp)
    e018:	000b883a 	mov	r5,zero
    e01c:	000d883a 	mov	r6,zero
    e020:	000e1580 	call	e158 <alt_up_ethernet_reg_write>
	usleep(1);
    e024:	01000044 	movi	r4,1
    e028:	00113e40 	call	113e4 <usleep>

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    e02c:	e03ffd15 	stw	zero,-12(fp)
    e030:	00000e06 	br	e06c <alt_up_ethernet_init+0xa0>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );
    e034:	e0bffd17 	ldw	r2,-12(fp)
    e038:	10800404 	addi	r2,r2,16
    e03c:	100b883a 	mov	r5,r2
    e040:	e0fffd17 	ldw	r3,-12(fp)
    e044:	e0bfff17 	ldw	r2,-4(fp)
    e048:	1885883a 	add	r2,r3,r2
    e04c:	10800d04 	addi	r2,r2,52
    e050:	10800003 	ldbu	r2,0(r2)
    e054:	11803fcc 	andi	r6,r2,255
    e058:	e13ffe17 	ldw	r4,-8(fp)
    e05c:	000e1580 	call	e158 <alt_up_ethernet_reg_write>
	usleep(10);
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NCR, 0x00 );
	usleep(1);

	// Initialize the MAC Address
	for (i = 0; i < 6; i++) 
    e060:	e0bffd17 	ldw	r2,-12(fp)
    e064:	10800044 	addi	r2,r2,1
    e068:	e0bffd15 	stw	r2,-12(fp)
    e06c:	e0bffd17 	ldw	r2,-12(fp)
    e070:	10800190 	cmplti	r2,r2,6
    e074:	103fef1e 	bne	r2,zero,e034 <alt_up_ethernet_init+0x68>
		alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_PAR + i, ethernet->mac_addr[i] );

	/* clear any pending interrupt */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ISR,  0x3F );
    e078:	e13ffe17 	ldw	r4,-8(fp)
    e07c:	01403f84 	movi	r5,254
    e080:	01800fc4 	movi	r6,63
    e084:	000e1580 	call	e158 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_NSR,  0x2C );
    e088:	e13ffe17 	ldw	r4,-8(fp)
    e08c:	01400044 	movi	r5,1
    e090:	01800b04 	movi	r6,44
    e094:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	/* set PAR bit, don't enable interrupts (do that with the set_interrupts() function */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_IMR, 0x80 );
    e098:	e13ffe17 	ldw	r4,-8(fp)
    e09c:	01403fc4 	movi	r5,255
    e0a0:	01802004 	movi	r6,128
    e0a4:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	/* enable RX (Broadcast/ ALL_MULTICAST) */
	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_RCR, 0x39 );
    e0a8:	e13ffe17 	ldw	r4,-8(fp)
    e0ac:	01400144 	movi	r5,5
    e0b0:	01800e44 	movi	r6,57
    e0b4:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	alt_up_ethernet_reg_write( base, ALT_UP_ETHERNET_ETXCSR, 0x03 );
    e0b8:	e13ffe17 	ldw	r4,-8(fp)
    e0bc:	01400c04 	movi	r5,48
    e0c0:	018000c4 	movi	r6,3
    e0c4:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	return;
}
    e0c8:	e037883a 	mov	sp,fp
    e0cc:	dfc00117 	ldw	ra,4(sp)
    e0d0:	df000017 	ldw	fp,0(sp)
    e0d4:	dec00204 	addi	sp,sp,8
    e0d8:	f800283a 	ret

0000e0dc <alt_up_ethernet_open_dev>:

alt_up_ethernet_dev* alt_up_ethernet_open_dev(const char* name)
{
    e0dc:	defffc04 	addi	sp,sp,-16
    e0e0:	dfc00315 	stw	ra,12(sp)
    e0e4:	df000215 	stw	fp,8(sp)
    e0e8:	df000204 	addi	fp,sp,8
    e0ec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ethernet_dev * dev = (alt_up_ethernet_dev *) alt_find_dev( name, &alt_dev_list );
    e0f0:	e13fff17 	ldw	r4,-4(fp)
    e0f4:	01400074 	movhi	r5,1
    e0f8:	2951a304 	addi	r5,r5,18060
    e0fc:	0010d7c0 	call	10d7c <alt_find_dev>
    e100:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e104:	e0bffe17 	ldw	r2,-8(fp)
}
    e108:	e037883a 	mov	sp,fp
    e10c:	dfc00117 	ldw	ra,4(sp)
    e110:	df000017 	ldw	fp,0(sp)
    e114:	dec00204 	addi	sp,sp,8
    e118:	f800283a 	ret

0000e11c <alt_up_ethernet_reg_read>:
#include "altera_up_avalon_ethernet_low_level_driver.h"
#include "altera_up_avalon_ethernet_regs.h"
#include <unistd.h>

unsigned int alt_up_ethernet_reg_read(unsigned int base, unsigned int reg)
{
    e11c:	defffd04 	addi	sp,sp,-12
    e120:	df000215 	stw	fp,8(sp)
    e124:	df000204 	addi	fp,sp,8
    e128:	e13ffe15 	stw	r4,-8(fp)
    e12c:	e17fff15 	stw	r5,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    e130:	e0bffe17 	ldw	r2,-8(fp)
    e134:	e0ffff17 	ldw	r3,-4(fp)
    e138:	10c00035 	stwio	r3,0(r2)
	return IORD_ALTERA_UP_AVALON_ETHERNET_DATA(base);
    e13c:	e0bffe17 	ldw	r2,-8(fp)
    e140:	10800104 	addi	r2,r2,4
    e144:	10800037 	ldwio	r2,0(r2)
}
    e148:	e037883a 	mov	sp,fp
    e14c:	df000017 	ldw	fp,0(sp)
    e150:	dec00104 	addi	sp,sp,4
    e154:	f800283a 	ret

0000e158 <alt_up_ethernet_reg_write>:

void alt_up_ethernet_reg_write(unsigned int base, unsigned int reg, unsigned int data)
{
    e158:	defffc04 	addi	sp,sp,-16
    e15c:	df000315 	stw	fp,12(sp)
    e160:	df000304 	addi	fp,sp,12
    e164:	e13ffd15 	stw	r4,-12(fp)
    e168:	e17ffe15 	stw	r5,-8(fp)
    e16c:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_UP_AVALON_ETHERNET_INDEX(base, reg);
    e170:	e0bffd17 	ldw	r2,-12(fp)
    e174:	e0fffe17 	ldw	r3,-8(fp)
    e178:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_UP_AVALON_ETHERNET_DATA(base, data);
    e17c:	e0bffd17 	ldw	r2,-12(fp)
    e180:	10800104 	addi	r2,r2,4
    e184:	e0ffff17 	ldw	r3,-4(fp)
    e188:	10c00035 	stwio	r3,0(r2)
}
    e18c:	e037883a 	mov	sp,fp
    e190:	df000017 	ldw	fp,0(sp)
    e194:	dec00104 	addi	sp,sp,4
    e198:	f800283a 	ret

0000e19c <alt_up_ethernet_phy_reg_read>:

unsigned int alt_up_ethernet_phy_reg_read (unsigned int base, unsigned int reg)
{
    e19c:	defffa04 	addi	sp,sp,-24
    e1a0:	dfc00515 	stw	ra,20(sp)
    e1a4:	df000415 	stw	fp,16(sp)
    e1a8:	df000404 	addi	fp,sp,16
    e1ac:	e13ffe15 	stw	r4,-8(fp)
    e1b0:	e17fff15 	stw	r5,-4(fp)
	unsigned int result = 0;
    e1b4:	e03ffd15 	stw	zero,-12(fp)
	unsigned int timeout = 0;
    e1b8:	e03ffc15 	stw	zero,-16(fp)

	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    e1bc:	e0bfff17 	ldw	r2,-4(fp)
    e1c0:	11801014 	ori	r6,r2,64
    e1c4:	e13ffe17 	ldw	r4,-8(fp)
    e1c8:	01400304 	movi	r5,12
    e1cc:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	/* issue PHY + READ command = 0xC into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0C);					/* issue PHY + READ command */
    e1d0:	e13ffe17 	ldw	r4,-8(fp)
    e1d4:	014002c4 	movi	r5,11
    e1d8:	01800304 	movi	r6,12
    e1dc:	000e1580 	call	e158 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    e1e0:	01000044 	movi	r4,1
    e1e4:	00113e40 	call	113e4 <usleep>
		timeout++;
    e1e8:	e0bffc17 	ldw	r2,-16(fp)
    e1ec:	10800044 	addi	r2,r2,1
    e1f0:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    e1f4:	e0bffc17 	ldw	r2,-16(fp)
    e1f8:	10800ca8 	cmpgeui	r2,r2,50
    e1fc:	1000071e 	bne	r2,zero,e21c <alt_up_ethernet_phy_reg_read+0x80>
    e200:	e13ffe17 	ldw	r4,-8(fp)
    e204:	014002c4 	movi	r5,11
    e208:	000e11c0 	call	e11c <alt_up_ethernet_reg_read>
    e20c:	1080004c 	andi	r2,r2,1
    e210:	10803fcc 	andi	r2,r2,255
    e214:	1004c03a 	cmpne	r2,r2,zero
    e218:	103ff11e 	bne	r2,zero,e1e0 <alt_up_ethernet_phy_reg_read+0x44>
	
	usleep(1);
    e21c:	01000044 	movi	r4,1
    e220:	00113e40 	call	113e4 <usleep>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    e224:	e13ffe17 	ldw	r4,-8(fp)
    e228:	014002c4 	movi	r5,11
    e22c:	01800204 	movi	r6,8
    e230:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	/* read PHY data from EPDR REG. 0EH & REG. 0DH */
	result = (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRH) << 8);			/* PHY data high_byte */
    e234:	e13ffe17 	ldw	r4,-8(fp)
    e238:	01400384 	movi	r5,14
    e23c:	000e11c0 	call	e11c <alt_up_ethernet_reg_read>
    e240:	1004923a 	slli	r2,r2,8
    e244:	e0bffd15 	stw	r2,-12(fp)
	result |= alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPDRL);				/* PHY data low_byte */
    e248:	e13ffe17 	ldw	r4,-8(fp)
    e24c:	01400344 	movi	r5,13
    e250:	000e11c0 	call	e11c <alt_up_ethernet_reg_read>
    e254:	1007883a 	mov	r3,r2
    e258:	e0bffd17 	ldw	r2,-12(fp)
    e25c:	10c4b03a 	or	r2,r2,r3
    e260:	e0bffd15 	stw	r2,-12(fp)

	return result;
    e264:	e0bffd17 	ldw	r2,-12(fp)
}
    e268:	e037883a 	mov	sp,fp
    e26c:	dfc00117 	ldw	ra,4(sp)
    e270:	df000017 	ldw	fp,0(sp)
    e274:	dec00204 	addi	sp,sp,8
    e278:	f800283a 	ret

0000e27c <alt_up_ethernet_phy_reg_write>:

void alt_up_ethernet_phy_reg_write (unsigned int base, unsigned int reg, unsigned int data)
{ 
    e27c:	defffa04 	addi	sp,sp,-24
    e280:	dfc00515 	stw	ra,20(sp)
    e284:	df000415 	stw	fp,16(sp)
    e288:	df000404 	addi	fp,sp,16
    e28c:	e13ffd15 	stw	r4,-12(fp)
    e290:	e17ffe15 	stw	r5,-8(fp)
    e294:	e1bfff15 	stw	r6,-4(fp)
	unsigned int timeout = 0;
    e298:	e03ffc15 	stw	zero,-16(fp)
	
	/* set PHY register address into EPAR REG. 0CH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPAR, reg | 0x40);				/* PHY register address setting, and DM9000_PHY offset = 0x40 */
    e29c:	e0bffe17 	ldw	r2,-8(fp)
    e2a0:	11801014 	ori	r6,r2,64
    e2a4:	e13ffd17 	ldw	r4,-12(fp)
    e2a8:	01400304 	movi	r5,12
    e2ac:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	/* fill PHY WRITE data into EPDR REG. 0EH & REG. 0DH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRH, ((data >> 8) & 0xFF));	/* PHY data high_byte */
    e2b0:	e0bfff17 	ldw	r2,-4(fp)
    e2b4:	1004d23a 	srli	r2,r2,8
    e2b8:	11803fcc 	andi	r6,r2,255
    e2bc:	e13ffd17 	ldw	r4,-12(fp)
    e2c0:	01400384 	movi	r5,14
    e2c4:	000e1580 	call	e158 <alt_up_ethernet_reg_write>
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPDRL, data & 0xFF);			/* PHY data low_byte */
    e2c8:	e0bfff17 	ldw	r2,-4(fp)
    e2cc:	11803fcc 	andi	r6,r2,255
    e2d0:	e13ffd17 	ldw	r4,-12(fp)
    e2d4:	01400344 	movi	r5,13
    e2d8:	000e1580 	call	e158 <alt_up_ethernet_reg_write>

	/* issue PHY + WRITE command = 0xA into EPCR REG. 0BH */
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x0A);					/* issue PHY + WRITE command */
    e2dc:	e13ffd17 	ldw	r4,-12(fp)
    e2e0:	014002c4 	movi	r5,11
    e2e4:	01800284 	movi	r6,10
    e2e8:	000e1580 	call	e158 <alt_up_ethernet_reg_write>
	do {
		usleep(1);
    e2ec:	01000044 	movi	r4,1
    e2f0:	00113e40 	call	113e4 <usleep>
		timeout++;
    e2f4:	e0bffc17 	ldw	r2,-16(fp)
    e2f8:	10800044 	addi	r2,r2,1
    e2fc:	e0bffc15 	stw	r2,-16(fp)
	} while ((timeout < 50) && (alt_up_ethernet_reg_read(base, ALT_UP_ETHERNET_EPCR) & 0x01));
    e300:	e0bffc17 	ldw	r2,-16(fp)
    e304:	10800ca8 	cmpgeui	r2,r2,50
    e308:	1000071e 	bne	r2,zero,e328 <alt_up_ethernet_phy_reg_write+0xac>
    e30c:	e13ffd17 	ldw	r4,-12(fp)
    e310:	014002c4 	movi	r5,11
    e314:	000e11c0 	call	e11c <alt_up_ethernet_reg_read>
    e318:	1080004c 	andi	r2,r2,1
    e31c:	10803fcc 	andi	r2,r2,255
    e320:	1004c03a 	cmpne	r2,r2,zero
    e324:	103ff11e 	bne	r2,zero,e2ec <alt_up_ethernet_phy_reg_write+0x70>
	
	usleep(1);
    e328:	01000044 	movi	r4,1
    e32c:	00113e40 	call	113e4 <usleep>
	
	alt_up_ethernet_reg_write(base, ALT_UP_ETHERNET_EPCR, 0x08);					/* clear PHY command */
    e330:	e13ffd17 	ldw	r4,-12(fp)
    e334:	014002c4 	movi	r5,11
    e338:	01800204 	movi	r6,8
    e33c:	000e1580 	call	e158 <alt_up_ethernet_reg_write>
}
    e340:	e037883a 	mov	sp,fp
    e344:	dfc00117 	ldw	ra,4(sp)
    e348:	df000017 	ldw	fp,0(sp)
    e34c:	dec00204 	addi	sp,sp,8
    e350:	f800283a 	ret

0000e354 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    e354:	defffd04 	addi	sp,sp,-12
    e358:	df000215 	stw	fp,8(sp)
    e35c:	df000204 	addi	fp,sp,8
    e360:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e364:	e0bfff17 	ldw	r2,-4(fp)
    e368:	10800a17 	ldw	r2,40(r2)
    e36c:	10800104 	addi	r2,r2,4
    e370:	10800037 	ldwio	r2,0(r2)
    e374:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    e378:	e0bffe17 	ldw	r2,-8(fp)
    e37c:	10800054 	ori	r2,r2,1
    e380:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e384:	e0bfff17 	ldw	r2,-4(fp)
    e388:	10800a17 	ldw	r2,40(r2)
    e38c:	10800104 	addi	r2,r2,4
    e390:	e0fffe17 	ldw	r3,-8(fp)
    e394:	10c00035 	stwio	r3,0(r2)
}
    e398:	e037883a 	mov	sp,fp
    e39c:	df000017 	ldw	fp,0(sp)
    e3a0:	dec00104 	addi	sp,sp,4
    e3a4:	f800283a 	ret

0000e3a8 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    e3a8:	defffd04 	addi	sp,sp,-12
    e3ac:	df000215 	stw	fp,8(sp)
    e3b0:	df000204 	addi	fp,sp,8
    e3b4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e3b8:	e0bfff17 	ldw	r2,-4(fp)
    e3bc:	10800a17 	ldw	r2,40(r2)
    e3c0:	10800104 	addi	r2,r2,4
    e3c4:	10800037 	ldwio	r2,0(r2)
    e3c8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    e3cc:	e0fffe17 	ldw	r3,-8(fp)
    e3d0:	00bfff84 	movi	r2,-2
    e3d4:	1884703a 	and	r2,r3,r2
    e3d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    e3dc:	e0bfff17 	ldw	r2,-4(fp)
    e3e0:	10800a17 	ldw	r2,40(r2)
    e3e4:	10800104 	addi	r2,r2,4
    e3e8:	e0fffe17 	ldw	r3,-8(fp)
    e3ec:	10c00035 	stwio	r3,0(r2)
}
    e3f0:	e037883a 	mov	sp,fp
    e3f4:	df000017 	ldw	fp,0(sp)
    e3f8:	dec00104 	addi	sp,sp,4
    e3fc:	f800283a 	ret

0000e400 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    e400:	defffd04 	addi	sp,sp,-12
    e404:	df000215 	stw	fp,8(sp)
    e408:	df000204 	addi	fp,sp,8
    e40c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    e410:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    e414:	e0bfff17 	ldw	r2,-4(fp)
    e418:	10800a17 	ldw	r2,40(r2)
    e41c:	10800084 	addi	r2,r2,2
    e420:	1080002b 	ldhuio	r2,0(r2)
    e424:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    e428:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e42c:	e037883a 	mov	sp,fp
    e430:	df000017 	ldw	fp,0(sp)
    e434:	dec00104 	addi	sp,sp,4
    e438:	f800283a 	ret

0000e43c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    e43c:	defffd04 	addi	sp,sp,-12
    e440:	df000215 	stw	fp,8(sp)
    e444:	df000204 	addi	fp,sp,8
    e448:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    e44c:	e0bfff17 	ldw	r2,-4(fp)
    e450:	10800a17 	ldw	r2,40(r2)
    e454:	10800104 	addi	r2,r2,4
    e458:	10800037 	ldwio	r2,0(r2)
    e45c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    e460:	e0bffe17 	ldw	r2,-8(fp)
    e464:	10bfffec 	andhi	r2,r2,65535
    e468:	1004d43a 	srli	r2,r2,16
}
    e46c:	e037883a 	mov	sp,fp
    e470:	df000017 	ldw	fp,0(sp)
    e474:	dec00104 	addi	sp,sp,4
    e478:	f800283a 	ret

0000e47c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    e47c:	defffc04 	addi	sp,sp,-16
    e480:	df000315 	stw	fp,12(sp)
    e484:	df000304 	addi	fp,sp,12
    e488:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    e48c:	e0bffe17 	ldw	r2,-8(fp)
    e490:	1080800c 	andi	r2,r2,512
    e494:	1004d27a 	srli	r2,r2,9
    e498:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    e49c:	e0bffd17 	ldw	r2,-12(fp)
    e4a0:	1005003a 	cmpeq	r2,r2,zero
    e4a4:	1000031e 	bne	r2,zero,e4b4 <alt_up_irda_check_parity+0x38>
    e4a8:	00bfffc4 	movi	r2,-1
    e4ac:	e0bfff15 	stw	r2,-4(fp)
    e4b0:	00000106 	br	e4b8 <alt_up_irda_check_parity+0x3c>
    e4b4:	e03fff15 	stw	zero,-4(fp)
    e4b8:	e0bfff17 	ldw	r2,-4(fp)
}
    e4bc:	e037883a 	mov	sp,fp
    e4c0:	df000017 	ldw	fp,0(sp)
    e4c4:	dec00104 	addi	sp,sp,4
    e4c8:	f800283a 	ret

0000e4cc <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    e4cc:	defffc04 	addi	sp,sp,-16
    e4d0:	df000315 	stw	fp,12(sp)
    e4d4:	df000304 	addi	fp,sp,12
    e4d8:	e13ffe15 	stw	r4,-8(fp)
    e4dc:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e4e0:	e0bffe17 	ldw	r2,-8(fp)
    e4e4:	10800a17 	ldw	r2,40(r2)
    e4e8:	10800037 	ldwio	r2,0(r2)
    e4ec:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    e4f0:	e0bffe17 	ldw	r2,-8(fp)
    e4f4:	10800a17 	ldw	r2,40(r2)
    e4f8:	e0ffff03 	ldbu	r3,-4(fp)
    e4fc:	10c00035 	stwio	r3,0(r2)
	return 0;
    e500:	0005883a 	mov	r2,zero
}
    e504:	e037883a 	mov	sp,fp
    e508:	df000017 	ldw	fp,0(sp)
    e50c:	dec00104 	addi	sp,sp,4
    e510:	f800283a 	ret

0000e514 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    e514:	defffa04 	addi	sp,sp,-24
    e518:	dfc00515 	stw	ra,20(sp)
    e51c:	df000415 	stw	fp,16(sp)
    e520:	df000404 	addi	fp,sp,16
    e524:	e13ffd15 	stw	r4,-12(fp)
    e528:	e17ffe15 	stw	r5,-8(fp)
    e52c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    e530:	e0bffd17 	ldw	r2,-12(fp)
    e534:	10800a17 	ldw	r2,40(r2)
    e538:	10800037 	ldwio	r2,0(r2)
    e53c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    e540:	e0bffc17 	ldw	r2,-16(fp)
    e544:	1007883a 	mov	r3,r2
    e548:	e0bffe17 	ldw	r2,-8(fp)
    e54c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    e550:	e13ffc17 	ldw	r4,-16(fp)
    e554:	000e47c0 	call	e47c <alt_up_irda_check_parity>
    e558:	1007883a 	mov	r3,r2
    e55c:	e0bfff17 	ldw	r2,-4(fp)
    e560:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    e564:	e0bffc17 	ldw	r2,-16(fp)
    e568:	10a0000c 	andi	r2,r2,32768
    e56c:	1004d3fa 	srli	r2,r2,15
    e570:	10bfffc4 	addi	r2,r2,-1
}
    e574:	e037883a 	mov	sp,fp
    e578:	dfc00117 	ldw	ra,4(sp)
    e57c:	df000017 	ldw	fp,0(sp)
    e580:	dec00204 	addi	sp,sp,8
    e584:	f800283a 	ret

0000e588 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    e588:	defff804 	addi	sp,sp,-32
    e58c:	dfc00715 	stw	ra,28(sp)
    e590:	df000615 	stw	fp,24(sp)
    e594:	df000604 	addi	fp,sp,24
    e598:	e13ffd15 	stw	r4,-12(fp)
    e59c:	e17ffe15 	stw	r5,-8(fp)
    e5a0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e5a4:	e0bffd17 	ldw	r2,-12(fp)
    e5a8:	10800017 	ldw	r2,0(r2)
    e5ac:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    e5b0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    e5b4:	00000c06 	br	e5e8 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    e5b8:	e17ffe17 	ldw	r5,-8(fp)
    e5bc:	e0bffe17 	ldw	r2,-8(fp)
    e5c0:	10800044 	addi	r2,r2,1
    e5c4:	e0bffe15 	stw	r2,-8(fp)
    e5c8:	e1bffc04 	addi	r6,fp,-16
    e5cc:	e13ffb17 	ldw	r4,-20(fp)
    e5d0:	000e5140 	call	e514 <alt_up_irda_read_data>
    e5d4:	1004c03a 	cmpne	r2,r2,zero
    e5d8:	1000091e 	bne	r2,zero,e600 <alt_up_irda_read_fd+0x78>
			count++;
    e5dc:	e0bffa17 	ldw	r2,-24(fp)
    e5e0:	10800044 	addi	r2,r2,1
    e5e4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    e5e8:	e0bfff17 	ldw	r2,-4(fp)
    e5ec:	10bfffc4 	addi	r2,r2,-1
    e5f0:	e0bfff15 	stw	r2,-4(fp)
    e5f4:	e0bfff17 	ldw	r2,-4(fp)
    e5f8:	10bfffd8 	cmpnei	r2,r2,-1
    e5fc:	103fee1e 	bne	r2,zero,e5b8 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    e600:	e0bffa17 	ldw	r2,-24(fp)
}
    e604:	e037883a 	mov	sp,fp
    e608:	dfc00117 	ldw	ra,4(sp)
    e60c:	df000017 	ldw	fp,0(sp)
    e610:	dec00204 	addi	sp,sp,8
    e614:	f800283a 	ret

0000e618 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    e618:	defff904 	addi	sp,sp,-28
    e61c:	dfc00615 	stw	ra,24(sp)
    e620:	df000515 	stw	fp,20(sp)
    e624:	df000504 	addi	fp,sp,20
    e628:	e13ffd15 	stw	r4,-12(fp)
    e62c:	e17ffe15 	stw	r5,-8(fp)
    e630:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    e634:	e0bffd17 	ldw	r2,-12(fp)
    e638:	10800017 	ldw	r2,0(r2)
    e63c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    e640:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    e644:	00000c06 	br	e678 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    e648:	e0bffe17 	ldw	r2,-8(fp)
    e64c:	11403fcc 	andi	r5,r2,255
    e650:	e0bffe17 	ldw	r2,-8(fp)
    e654:	10800044 	addi	r2,r2,1
    e658:	e0bffe15 	stw	r2,-8(fp)
    e65c:	e13ffc17 	ldw	r4,-16(fp)
    e660:	000e4cc0 	call	e4cc <alt_up_irda_write_data>
    e664:	1004c03a 	cmpne	r2,r2,zero
    e668:	1000091e 	bne	r2,zero,e690 <alt_up_irda_write_fd+0x78>
			count++;
    e66c:	e0bffb17 	ldw	r2,-20(fp)
    e670:	10800044 	addi	r2,r2,1
    e674:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    e678:	e0bfff17 	ldw	r2,-4(fp)
    e67c:	10bfffc4 	addi	r2,r2,-1
    e680:	e0bfff15 	stw	r2,-4(fp)
    e684:	e0bfff17 	ldw	r2,-4(fp)
    e688:	10bfffd8 	cmpnei	r2,r2,-1
    e68c:	103fee1e 	bne	r2,zero,e648 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    e690:	e0bffb17 	ldw	r2,-20(fp)
}
    e694:	e037883a 	mov	sp,fp
    e698:	dfc00117 	ldw	ra,4(sp)
    e69c:	df000017 	ldw	fp,0(sp)
    e6a0:	dec00204 	addi	sp,sp,8
    e6a4:	f800283a 	ret

0000e6a8 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    e6a8:	defffc04 	addi	sp,sp,-16
    e6ac:	dfc00315 	stw	ra,12(sp)
    e6b0:	df000215 	stw	fp,8(sp)
    e6b4:	df000204 	addi	fp,sp,8
    e6b8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    e6bc:	e13fff17 	ldw	r4,-4(fp)
    e6c0:	01400074 	movhi	r5,1
    e6c4:	2951a304 	addi	r5,r5,18060
    e6c8:	0010d7c0 	call	10d7c <alt_find_dev>
    e6cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e6d0:	e0bffe17 	ldw	r2,-8(fp)
}
    e6d4:	e037883a 	mov	sp,fp
    e6d8:	dfc00117 	ldw	ra,4(sp)
    e6dc:	df000017 	ldw	fp,0(sp)
    e6e0:	dec00204 	addi	sp,sp,8
    e6e4:	f800283a 	ret

0000e6e8 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    e6e8:	defffc04 	addi	sp,sp,-16
    e6ec:	dfc00315 	stw	ra,12(sp)
    e6f0:	df000215 	stw	fp,8(sp)
    e6f4:	df000204 	addi	fp,sp,8
    e6f8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    e6fc:	e13fff17 	ldw	r4,-4(fp)
    e700:	01400074 	movhi	r5,1
    e704:	2951a304 	addi	r5,r5,18060
    e708:	0010d7c0 	call	10d7c <alt_find_dev>
    e70c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e710:	e0bffe17 	ldw	r2,-8(fp)
}
    e714:	e037883a 	mov	sp,fp
    e718:	dfc00117 	ldw	ra,4(sp)
    e71c:	df000017 	ldw	fp,0(sp)
    e720:	dec00204 	addi	sp,sp,8
    e724:	f800283a 	ret

0000e728 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    e728:	defffd04 	addi	sp,sp,-12
    e72c:	df000215 	stw	fp,8(sp)
    e730:	df000204 	addi	fp,sp,8
    e734:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    e738:	e0bfff17 	ldw	r2,-4(fp)
    e73c:	1080400c 	andi	r2,r2,256
    e740:	1004d23a 	srli	r2,r2,8
    e744:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    e748:	e0bffe03 	ldbu	r2,-8(fp)
}
    e74c:	e037883a 	mov	sp,fp
    e750:	df000017 	ldw	fp,0(sp)
    e754:	dec00104 	addi	sp,sp,4
    e758:	f800283a 	ret

0000e75c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    e75c:	defffd04 	addi	sp,sp,-12
    e760:	df000215 	stw	fp,8(sp)
    e764:	df000204 	addi	fp,sp,8
    e768:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    e76c:	e0bfff17 	ldw	r2,-4(fp)
    e770:	1080004c 	andi	r2,r2,1
    e774:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e778:	e0bffe03 	ldbu	r2,-8(fp)
}
    e77c:	e037883a 	mov	sp,fp
    e780:	df000017 	ldw	fp,0(sp)
    e784:	dec00104 	addi	sp,sp,4
    e788:	f800283a 	ret

0000e78c <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    e78c:	defffd04 	addi	sp,sp,-12
    e790:	df000215 	stw	fp,8(sp)
    e794:	df000204 	addi	fp,sp,8
    e798:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    e79c:	e0bfff17 	ldw	r2,-4(fp)
    e7a0:	1081000c 	andi	r2,r2,1024
    e7a4:	1004d2ba 	srli	r2,r2,10
    e7a8:	e0bffe05 	stb	r2,-8(fp)
	return re;
    e7ac:	e0bffe03 	ldbu	r2,-8(fp)
}
    e7b0:	e037883a 	mov	sp,fp
    e7b4:	df000017 	ldw	fp,0(sp)
    e7b8:	dec00104 	addi	sp,sp,4
    e7bc:	f800283a 	ret

0000e7c0 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    e7c0:	defffd04 	addi	sp,sp,-12
    e7c4:	df000215 	stw	fp,8(sp)
    e7c8:	df000204 	addi	fp,sp,8
    e7cc:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    e7d0:	e0bfff17 	ldw	r2,-4(fp)
    e7d4:	10bfffec 	andhi	r2,r2,65535
    e7d8:	1004d43a 	srli	r2,r2,16
    e7dc:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    e7e0:	e0bffe0b 	ldhu	r2,-8(fp)
}
    e7e4:	e037883a 	mov	sp,fp
    e7e8:	df000017 	ldw	fp,0(sp)
    e7ec:	dec00104 	addi	sp,sp,4
    e7f0:	f800283a 	ret

0000e7f4 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    e7f4:	defffd04 	addi	sp,sp,-12
    e7f8:	df000215 	stw	fp,8(sp)
    e7fc:	df000204 	addi	fp,sp,8
    e800:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    e804:	e0bfff17 	ldw	r2,-4(fp)
    e808:	10a0000c 	andi	r2,r2,32768
    e80c:	1004d3fa 	srli	r2,r2,15
    e810:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    e814:	e0bffe03 	ldbu	r2,-8(fp)
}
    e818:	e037883a 	mov	sp,fp
    e81c:	df000017 	ldw	fp,0(sp)
    e820:	dec00104 	addi	sp,sp,4
    e824:	f800283a 	ret

0000e828 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    e828:	defffd04 	addi	sp,sp,-12
    e82c:	df000215 	stw	fp,8(sp)
    e830:	df000204 	addi	fp,sp,8
    e834:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    e838:	e0bfff17 	ldw	r2,-4(fp)
    e83c:	e0bffe05 	stb	r2,-8(fp)
	return data;
    e840:	e0bffe03 	ldbu	r2,-8(fp)
}
    e844:	e037883a 	mov	sp,fp
    e848:	df000017 	ldw	fp,0(sp)
    e84c:	dec00104 	addi	sp,sp,4
    e850:	f800283a 	ret

0000e854 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    e854:	defffb04 	addi	sp,sp,-20
    e858:	dfc00415 	stw	ra,16(sp)
    e85c:	df000315 	stw	fp,12(sp)
    e860:	df000304 	addi	fp,sp,12
    e864:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    e868:	e13fff17 	ldw	r4,-4(fp)
    e86c:	01403fc4 	movi	r5,255
    e870:	000eab40 	call	eab4 <alt_up_ps2_write_data_byte_with_ack>
    e874:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    e878:	e0bffd17 	ldw	r2,-12(fp)
    e87c:	1004c03a 	cmpne	r2,r2,zero
    e880:	1000221e 	bne	r2,zero,e90c <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e884:	e17ffe04 	addi	r5,fp,-8
    e888:	e13fff17 	ldw	r4,-4(fp)
    e88c:	000eb200 	call	eb20 <alt_up_ps2_read_data_byte_timeout>
    e890:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    e894:	e0bffd17 	ldw	r2,-12(fp)
    e898:	1004c03a 	cmpne	r2,r2,zero
    e89c:	10001b1e 	bne	r2,zero,e90c <alt_up_ps2_init+0xb8>
    e8a0:	e0bffe03 	ldbu	r2,-8(fp)
    e8a4:	10803fcc 	andi	r2,r2,255
    e8a8:	10802a98 	cmpnei	r2,r2,170
    e8ac:	1000171e 	bne	r2,zero,e90c <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    e8b0:	e17ffe04 	addi	r5,fp,-8
    e8b4:	e13fff17 	ldw	r4,-4(fp)
    e8b8:	000eb200 	call	eb20 <alt_up_ps2_read_data_byte_timeout>
    e8bc:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    e8c0:	e0bffd17 	ldw	r2,-12(fp)
    e8c4:	10bfe318 	cmpnei	r2,r2,-116
    e8c8:	1000041e 	bne	r2,zero,e8dc <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    e8cc:	e0ffff17 	ldw	r3,-4(fp)
    e8d0:	00800044 	movi	r2,1
    e8d4:	18800d15 	stw	r2,52(r3)
    e8d8:	00000c06 	br	e90c <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
    e8dc:	e0bffd17 	ldw	r2,-12(fp)
    e8e0:	1004c03a 	cmpne	r2,r2,zero
    e8e4:	1000091e 	bne	r2,zero,e90c <alt_up_ps2_init+0xb8>
    e8e8:	e0bffe03 	ldbu	r2,-8(fp)
    e8ec:	10803fcc 	andi	r2,r2,255
    e8f0:	1004c03a 	cmpne	r2,r2,zero
    e8f4:	1000051e 	bne	r2,zero,e90c <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    e8f8:	e0bfff17 	ldw	r2,-4(fp)
    e8fc:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    e900:	e13fff17 	ldw	r4,-4(fp)
    e904:	01403d04 	movi	r5,244
    e908:	000e9cc0 	call	e9cc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    e90c:	e037883a 	mov	sp,fp
    e910:	dfc00117 	ldw	ra,4(sp)
    e914:	df000017 	ldw	fp,0(sp)
    e918:	dec00204 	addi	sp,sp,8
    e91c:	f800283a 	ret

0000e920 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e920:	defffd04 	addi	sp,sp,-12
    e924:	df000215 	stw	fp,8(sp)
    e928:	df000204 	addi	fp,sp,8
    e92c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e930:	e0bfff17 	ldw	r2,-4(fp)
    e934:	10800a17 	ldw	r2,40(r2)
    e938:	10800104 	addi	r2,r2,4
    e93c:	10800037 	ldwio	r2,0(r2)
    e940:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e944:	e0bffe17 	ldw	r2,-8(fp)
    e948:	10800054 	ori	r2,r2,1
    e94c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e950:	e0bfff17 	ldw	r2,-4(fp)
    e954:	10800a17 	ldw	r2,40(r2)
    e958:	10800104 	addi	r2,r2,4
    e95c:	e0fffe17 	ldw	r3,-8(fp)
    e960:	10c00035 	stwio	r3,0(r2)
}
    e964:	e037883a 	mov	sp,fp
    e968:	df000017 	ldw	fp,0(sp)
    e96c:	dec00104 	addi	sp,sp,4
    e970:	f800283a 	ret

0000e974 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    e974:	defffd04 	addi	sp,sp,-12
    e978:	df000215 	stw	fp,8(sp)
    e97c:	df000204 	addi	fp,sp,8
    e980:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    e984:	e0bfff17 	ldw	r2,-4(fp)
    e988:	10800a17 	ldw	r2,40(r2)
    e98c:	10800104 	addi	r2,r2,4
    e990:	10800037 	ldwio	r2,0(r2)
    e994:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    e998:	e0fffe17 	ldw	r3,-8(fp)
    e99c:	00bfff84 	movi	r2,-2
    e9a0:	1884703a 	and	r2,r3,r2
    e9a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    e9a8:	e0bfff17 	ldw	r2,-4(fp)
    e9ac:	10800a17 	ldw	r2,40(r2)
    e9b0:	10800104 	addi	r2,r2,4
    e9b4:	e0fffe17 	ldw	r3,-8(fp)
    e9b8:	10c00035 	stwio	r3,0(r2)
}
    e9bc:	e037883a 	mov	sp,fp
    e9c0:	df000017 	ldw	fp,0(sp)
    e9c4:	dec00104 	addi	sp,sp,4
    e9c8:	f800283a 	ret

0000e9cc <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    e9cc:	defffa04 	addi	sp,sp,-24
    e9d0:	dfc00515 	stw	ra,20(sp)
    e9d4:	df000415 	stw	fp,16(sp)
    e9d8:	df000404 	addi	fp,sp,16
    e9dc:	e13ffd15 	stw	r4,-12(fp)
    e9e0:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    e9e4:	e0bffd17 	ldw	r2,-12(fp)
    e9e8:	10800a17 	ldw	r2,40(r2)
    e9ec:	e0fffe03 	ldbu	r3,-8(fp)
    e9f0:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    e9f4:	e0bffd17 	ldw	r2,-12(fp)
    e9f8:	10800a17 	ldw	r2,40(r2)
    e9fc:	10800104 	addi	r2,r2,4
    ea00:	10800037 	ldwio	r2,0(r2)
    ea04:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
    ea08:	e13ffc17 	ldw	r4,-16(fp)
    ea0c:	000e78c0 	call	e78c <read_CE_bit>
    ea10:	10803fcc 	andi	r2,r2,255
    ea14:	1005003a 	cmpeq	r2,r2,zero
    ea18:	1000031e 	bne	r2,zero,ea28 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    ea1c:	00bffec4 	movi	r2,-5
    ea20:	e0bfff15 	stw	r2,-4(fp)
    ea24:	00000106 	br	ea2c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    ea28:	e03fff15 	stw	zero,-4(fp)
    ea2c:	e0bfff17 	ldw	r2,-4(fp)
}
    ea30:	e037883a 	mov	sp,fp
    ea34:	dfc00117 	ldw	ra,4(sp)
    ea38:	df000017 	ldw	fp,0(sp)
    ea3c:	dec00204 	addi	sp,sp,8
    ea40:	f800283a 	ret

0000ea44 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    ea44:	defffb04 	addi	sp,sp,-20
    ea48:	dfc00415 	stw	ra,16(sp)
    ea4c:	df000315 	stw	fp,12(sp)
    ea50:	df000304 	addi	fp,sp,12
    ea54:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
    ea58:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
    ea5c:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    ea60:	e17ffd44 	addi	r5,fp,-11
    ea64:	e13ffe17 	ldw	r4,-8(fp)
    ea68:	000eb200 	call	eb20 <alt_up_ps2_read_data_byte_timeout>
    ea6c:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
    ea70:	e0bffd03 	ldbu	r2,-12(fp)
    ea74:	1004c03a 	cmpne	r2,r2,zero
    ea78:	1000061e 	bne	r2,zero,ea94 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    ea7c:	e0bffd43 	ldbu	r2,-11(fp)
    ea80:	10803fcc 	andi	r2,r2,255
    ea84:	10803e98 	cmpnei	r2,r2,250
    ea88:	103ff51e 	bne	r2,zero,ea60 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
    ea8c:	e03fff15 	stw	zero,-4(fp)
    ea90:	00000206 	br	ea9c <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
    ea94:	e0bffd03 	ldbu	r2,-12(fp)
    ea98:	e0bfff15 	stw	r2,-4(fp)
    ea9c:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    eaa0:	e037883a 	mov	sp,fp
    eaa4:	dfc00117 	ldw	ra,4(sp)
    eaa8:	df000017 	ldw	fp,0(sp)
    eaac:	dec00204 	addi	sp,sp,8
    eab0:	f800283a 	ret

0000eab4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    eab4:	defff904 	addi	sp,sp,-28
    eab8:	dfc00615 	stw	ra,24(sp)
    eabc:	df000515 	stw	fp,20(sp)
    eac0:	df000504 	addi	fp,sp,20
    eac4:	e13ffd15 	stw	r4,-12(fp)
    eac8:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    eacc:	e17ffe03 	ldbu	r5,-8(fp)
    ead0:	e13ffd17 	ldw	r4,-12(fp)
    ead4:	000e9cc0 	call	e9cc <alt_up_ps2_write_data_byte>
    ead8:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    eadc:	e0bffc17 	ldw	r2,-16(fp)
    eae0:	1005003a 	cmpeq	r2,r2,zero
    eae4:	1000031e 	bne	r2,zero,eaf4 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    eae8:	e0bffc17 	ldw	r2,-16(fp)
    eaec:	e0bfff15 	stw	r2,-4(fp)
    eaf0:	00000506 	br	eb08 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    eaf4:	e13ffd17 	ldw	r4,-12(fp)
    eaf8:	000ea440 	call	ea44 <alt_up_ps2_wait_for_ack>
    eafc:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
    eb00:	e0bffb17 	ldw	r2,-20(fp)
    eb04:	e0bfff15 	stw	r2,-4(fp)
    eb08:	e0bfff17 	ldw	r2,-4(fp)
}
    eb0c:	e037883a 	mov	sp,fp
    eb10:	dfc00117 	ldw	ra,4(sp)
    eb14:	df000017 	ldw	fp,0(sp)
    eb18:	dec00204 	addi	sp,sp,8
    eb1c:	f800283a 	ret

0000eb20 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    eb20:	defff904 	addi	sp,sp,-28
    eb24:	dfc00615 	stw	ra,24(sp)
    eb28:	df000515 	stw	fp,20(sp)
    eb2c:	df000504 	addi	fp,sp,20
    eb30:	e13ffd15 	stw	r4,-12(fp)
    eb34:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    eb38:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
    eb3c:	e03ffb15 	stw	zero,-20(fp)
    eb40:	00000006 	br	eb44 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
    eb44:	e0bffb17 	ldw	r2,-20(fp)
    eb48:	10800044 	addi	r2,r2,1
    eb4c:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    eb50:	e0bffd17 	ldw	r2,-12(fp)
    eb54:	10800a17 	ldw	r2,40(r2)
    eb58:	10800037 	ldwio	r2,0(r2)
    eb5c:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
    eb60:	e13ffc17 	ldw	r4,-16(fp)
    eb64:	000e7f40 	call	e7f4 <read_data_valid>
    eb68:	10803fcc 	andi	r2,r2,255
    eb6c:	1005003a 	cmpeq	r2,r2,zero
    eb70:	1000071e 	bne	r2,zero,eb90 <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
    eb74:	e13ffc17 	ldw	r4,-16(fp)
    eb78:	000e8280 	call	e828 <read_data_byte>
    eb7c:	1007883a 	mov	r3,r2
    eb80:	e0bffe17 	ldw	r2,-8(fp)
    eb84:	10c00005 	stb	r3,0(r2)
			return 0;
    eb88:	e03fff15 	stw	zero,-4(fp)
    eb8c:	00000a06 	br	ebb8 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    eb90:	e0bffd17 	ldw	r2,-12(fp)
    eb94:	10800c17 	ldw	r2,48(r2)
    eb98:	1005003a 	cmpeq	r2,r2,zero
    eb9c:	103fe91e 	bne	r2,zero,eb44 <alt_up_ps2_read_data_byte_timeout+0x24>
    eba0:	e0bffd17 	ldw	r2,-12(fp)
    eba4:	10c00c17 	ldw	r3,48(r2)
    eba8:	e0bffb17 	ldw	r2,-20(fp)
    ebac:	18bfe52e 	bgeu	r3,r2,eb44 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
    ebb0:	00bfe304 	movi	r2,-116
    ebb4:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
    ebb8:	e0bfff17 	ldw	r2,-4(fp)
}
    ebbc:	e037883a 	mov	sp,fp
    ebc0:	dfc00117 	ldw	ra,4(sp)
    ebc4:	df000017 	ldw	fp,0(sp)
    ebc8:	dec00204 	addi	sp,sp,8
    ebcc:	f800283a 	ret

0000ebd0 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    ebd0:	defffa04 	addi	sp,sp,-24
    ebd4:	dfc00515 	stw	ra,20(sp)
    ebd8:	df000415 	stw	fp,16(sp)
    ebdc:	df000404 	addi	fp,sp,16
    ebe0:	e13ffd15 	stw	r4,-12(fp)
    ebe4:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
    ebe8:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    ebec:	e0bffd17 	ldw	r2,-12(fp)
    ebf0:	10800a17 	ldw	r2,40(r2)
    ebf4:	10800037 	ldwio	r2,0(r2)
    ebf8:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
    ebfc:	e13ffc17 	ldw	r4,-16(fp)
    ec00:	000e7f40 	call	e7f4 <read_data_valid>
    ec04:	10803fcc 	andi	r2,r2,255
    ec08:	1005003a 	cmpeq	r2,r2,zero
    ec0c:	1000071e 	bne	r2,zero,ec2c <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
    ec10:	e13ffc17 	ldw	r4,-16(fp)
    ec14:	000e8280 	call	e828 <read_data_byte>
    ec18:	1007883a 	mov	r3,r2
    ec1c:	e0bffe17 	ldw	r2,-8(fp)
    ec20:	10c00005 	stb	r3,0(r2)
		return 0;
    ec24:	e03fff15 	stw	zero,-4(fp)
    ec28:	00000206 	br	ec34 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
    ec2c:	00bfffc4 	movi	r2,-1
    ec30:	e0bfff15 	stw	r2,-4(fp)
    ec34:	e0bfff17 	ldw	r2,-4(fp)
}
    ec38:	e037883a 	mov	sp,fp
    ec3c:	dfc00117 	ldw	ra,4(sp)
    ec40:	df000017 	ldw	fp,0(sp)
    ec44:	dec00204 	addi	sp,sp,8
    ec48:	f800283a 	ret

0000ec4c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    ec4c:	defffb04 	addi	sp,sp,-20
    ec50:	dfc00415 	stw	ra,16(sp)
    ec54:	df000315 	stw	fp,12(sp)
    ec58:	df000304 	addi	fp,sp,12
    ec5c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    ec60:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
    ec64:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    ec68:	e0bfff17 	ldw	r2,-4(fp)
    ec6c:	10800a17 	ldw	r2,40(r2)
    ec70:	10800037 	ldwio	r2,0(r2)
    ec74:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    ec78:	e13ffd17 	ldw	r4,-12(fp)
    ec7c:	000e7c00 	call	e7c0 <read_num_bytes_available>
    ec80:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
    ec84:	e0bffe0b 	ldhu	r2,-8(fp)
    ec88:	1004c03a 	cmpne	r2,r2,zero
    ec8c:	103ff61e 	bne	r2,zero,ec68 <alt_up_ps2_clear_fifo+0x1c>
}
    ec90:	e037883a 	mov	sp,fp
    ec94:	dfc00117 	ldw	ra,4(sp)
    ec98:	df000017 	ldw	fp,0(sp)
    ec9c:	dec00204 	addi	sp,sp,8
    eca0:	f800283a 	ret

0000eca4 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    eca4:	defff704 	addi	sp,sp,-36
    eca8:	dfc00815 	stw	ra,32(sp)
    ecac:	df000715 	stw	fp,28(sp)
    ecb0:	df000704 	addi	fp,sp,28
    ecb4:	e13ffc15 	stw	r4,-16(fp)
    ecb8:	e17ffd15 	stw	r5,-12(fp)
    ecbc:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    ecc0:	e0bffc17 	ldw	r2,-16(fp)
    ecc4:	10800017 	ldw	r2,0(r2)
    ecc8:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    eccc:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    ecd0:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
    ecd4:	e0fff917 	ldw	r3,-28(fp)
    ecd8:	e0bffe17 	ldw	r2,-8(fp)
    ecdc:	18bffd16 	blt	r3,r2,ecd4 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
    ece0:	e17ffd17 	ldw	r5,-12(fp)
    ece4:	e0bffd17 	ldw	r2,-12(fp)
    ece8:	10800044 	addi	r2,r2,1
    ecec:	e0bffd15 	stw	r2,-12(fp)
    ecf0:	e13ffb17 	ldw	r4,-20(fp)
    ecf4:	000eb200 	call	eb20 <alt_up_ps2_read_data_byte_timeout>
    ecf8:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    ecfc:	e0bffa17 	ldw	r2,-24(fp)
    ed00:	1005003a 	cmpeq	r2,r2,zero
    ed04:	1000031e 	bne	r2,zero,ed14 <alt_up_ps2_read_fd+0x70>
			return count;
    ed08:	e0bff917 	ldw	r2,-28(fp)
    ed0c:	e0bfff15 	stw	r2,-4(fp)
    ed10:	00000506 	br	ed28 <alt_up_ps2_read_fd+0x84>
		count++;
    ed14:	e0bff917 	ldw	r2,-28(fp)
    ed18:	10800044 	addi	r2,r2,1
    ed1c:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
    ed20:	e0bff917 	ldw	r2,-28(fp)
    ed24:	e0bfff15 	stw	r2,-4(fp)
    ed28:	e0bfff17 	ldw	r2,-4(fp)
}
    ed2c:	e037883a 	mov	sp,fp
    ed30:	dfc00117 	ldw	ra,4(sp)
    ed34:	df000017 	ldw	fp,0(sp)
    ed38:	dec00204 	addi	sp,sp,8
    ed3c:	f800283a 	ret

0000ed40 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    ed40:	defff704 	addi	sp,sp,-36
    ed44:	dfc00815 	stw	ra,32(sp)
    ed48:	df000715 	stw	fp,28(sp)
    ed4c:	df000704 	addi	fp,sp,28
    ed50:	e13ffc15 	stw	r4,-16(fp)
    ed54:	e17ffd15 	stw	r5,-12(fp)
    ed58:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    ed5c:	e0bffc17 	ldw	r2,-16(fp)
    ed60:	10800017 	ldw	r2,0(r2)
    ed64:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    ed68:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
    ed6c:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
    ed70:	00001206 	br	edbc <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    ed74:	e0bffd17 	ldw	r2,-12(fp)
    ed78:	10800003 	ldbu	r2,0(r2)
    ed7c:	11403fcc 	andi	r5,r2,255
    ed80:	e0bffd17 	ldw	r2,-12(fp)
    ed84:	10800044 	addi	r2,r2,1
    ed88:	e0bffd15 	stw	r2,-12(fp)
    ed8c:	e13ffb17 	ldw	r4,-20(fp)
    ed90:	000e9cc0 	call	e9cc <alt_up_ps2_write_data_byte>
    ed94:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
    ed98:	e0bffa17 	ldw	r2,-24(fp)
    ed9c:	1005003a 	cmpeq	r2,r2,zero
    eda0:	1000031e 	bne	r2,zero,edb0 <alt_up_ps2_write_fd+0x70>
			return count;
    eda4:	e0bff917 	ldw	r2,-28(fp)
    eda8:	e0bfff15 	stw	r2,-4(fp)
    edac:	00000806 	br	edd0 <alt_up_ps2_write_fd+0x90>
		count++;
    edb0:	e0bff917 	ldw	r2,-28(fp)
    edb4:	10800044 	addi	r2,r2,1
    edb8:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    edbc:	e0fff917 	ldw	r3,-28(fp)
    edc0:	e0bffe17 	ldw	r2,-8(fp)
    edc4:	18bfeb16 	blt	r3,r2,ed74 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    edc8:	e0bff917 	ldw	r2,-28(fp)
    edcc:	e0bfff15 	stw	r2,-4(fp)
    edd0:	e0bfff17 	ldw	r2,-4(fp)
}
    edd4:	e037883a 	mov	sp,fp
    edd8:	dfc00117 	ldw	ra,4(sp)
    eddc:	df000017 	ldw	fp,0(sp)
    ede0:	dec00204 	addi	sp,sp,8
    ede4:	f800283a 	ret

0000ede8 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    ede8:	defffc04 	addi	sp,sp,-16
    edec:	dfc00315 	stw	ra,12(sp)
    edf0:	df000215 	stw	fp,8(sp)
    edf4:	df000204 	addi	fp,sp,8
    edf8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    edfc:	e13fff17 	ldw	r4,-4(fp)
    ee00:	01400074 	movhi	r5,1
    ee04:	2951a304 	addi	r5,r5,18060
    ee08:	0010d7c0 	call	10d7c <alt_find_dev>
    ee0c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ee10:	e0bffe17 	ldw	r2,-8(fp)
}
    ee14:	e037883a 	mov	sp,fp
    ee18:	dfc00117 	ldw	ra,4(sp)
    ee1c:	df000017 	ldw	fp,0(sp)
    ee20:	dec00204 	addi	sp,sp,8
    ee24:	f800283a 	ret

0000ee28 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ee28:	defffd04 	addi	sp,sp,-12
    ee2c:	df000215 	stw	fp,8(sp)
    ee30:	df000204 	addi	fp,sp,8
    ee34:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ee38:	e0bfff17 	ldw	r2,-4(fp)
    ee3c:	10800a17 	ldw	r2,40(r2)
    ee40:	10800104 	addi	r2,r2,4
    ee44:	10800037 	ldwio	r2,0(r2)
    ee48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    ee4c:	e0bffe17 	ldw	r2,-8(fp)
    ee50:	10800054 	ori	r2,r2,1
    ee54:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    ee58:	e0bfff17 	ldw	r2,-4(fp)
    ee5c:	10800a17 	ldw	r2,40(r2)
    ee60:	10800104 	addi	r2,r2,4
    ee64:	e0fffe17 	ldw	r3,-8(fp)
    ee68:	10c00035 	stwio	r3,0(r2)
}
    ee6c:	e037883a 	mov	sp,fp
    ee70:	df000017 	ldw	fp,0(sp)
    ee74:	dec00104 	addi	sp,sp,4
    ee78:	f800283a 	ret

0000ee7c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    ee7c:	defffd04 	addi	sp,sp,-12
    ee80:	df000215 	stw	fp,8(sp)
    ee84:	df000204 	addi	fp,sp,8
    ee88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ee8c:	e0bfff17 	ldw	r2,-4(fp)
    ee90:	10800a17 	ldw	r2,40(r2)
    ee94:	10800104 	addi	r2,r2,4
    ee98:	10800037 	ldwio	r2,0(r2)
    ee9c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    eea0:	e0fffe17 	ldw	r3,-8(fp)
    eea4:	00bfff84 	movi	r2,-2
    eea8:	1884703a 	and	r2,r3,r2
    eeac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    eeb0:	e0bfff17 	ldw	r2,-4(fp)
    eeb4:	10800a17 	ldw	r2,40(r2)
    eeb8:	10800104 	addi	r2,r2,4
    eebc:	e0fffe17 	ldw	r3,-8(fp)
    eec0:	10c00035 	stwio	r3,0(r2)
}
    eec4:	e037883a 	mov	sp,fp
    eec8:	df000017 	ldw	fp,0(sp)
    eecc:	dec00104 	addi	sp,sp,4
    eed0:	f800283a 	ret

0000eed4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    eed4:	defffd04 	addi	sp,sp,-12
    eed8:	df000215 	stw	fp,8(sp)
    eedc:	df000204 	addi	fp,sp,8
    eee0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    eee4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    eee8:	e0bfff17 	ldw	r2,-4(fp)
    eeec:	10800a17 	ldw	r2,40(r2)
    eef0:	10800084 	addi	r2,r2,2
    eef4:	1080002b 	ldhuio	r2,0(r2)
    eef8:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    eefc:	e0bffe0b 	ldhu	r2,-8(fp)
}
    ef00:	e037883a 	mov	sp,fp
    ef04:	df000017 	ldw	fp,0(sp)
    ef08:	dec00104 	addi	sp,sp,4
    ef0c:	f800283a 	ret

0000ef10 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    ef10:	defffd04 	addi	sp,sp,-12
    ef14:	df000215 	stw	fp,8(sp)
    ef18:	df000204 	addi	fp,sp,8
    ef1c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    ef20:	e0bfff17 	ldw	r2,-4(fp)
    ef24:	10800a17 	ldw	r2,40(r2)
    ef28:	10800104 	addi	r2,r2,4
    ef2c:	10800037 	ldwio	r2,0(r2)
    ef30:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    ef34:	e0bffe17 	ldw	r2,-8(fp)
    ef38:	10bfffec 	andhi	r2,r2,65535
    ef3c:	1004d43a 	srli	r2,r2,16
}
    ef40:	e037883a 	mov	sp,fp
    ef44:	df000017 	ldw	fp,0(sp)
    ef48:	dec00104 	addi	sp,sp,4
    ef4c:	f800283a 	ret

0000ef50 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    ef50:	defffc04 	addi	sp,sp,-16
    ef54:	df000315 	stw	fp,12(sp)
    ef58:	df000304 	addi	fp,sp,12
    ef5c:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    ef60:	e0bffe17 	ldw	r2,-8(fp)
    ef64:	1080800c 	andi	r2,r2,512
    ef68:	1004d27a 	srli	r2,r2,9
    ef6c:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    ef70:	e0bffd17 	ldw	r2,-12(fp)
    ef74:	1005003a 	cmpeq	r2,r2,zero
    ef78:	1000031e 	bne	r2,zero,ef88 <alt_up_rs232_check_parity+0x38>
    ef7c:	00bfffc4 	movi	r2,-1
    ef80:	e0bfff15 	stw	r2,-4(fp)
    ef84:	00000106 	br	ef8c <alt_up_rs232_check_parity+0x3c>
    ef88:	e03fff15 	stw	zero,-4(fp)
    ef8c:	e0bfff17 	ldw	r2,-4(fp)
}
    ef90:	e037883a 	mov	sp,fp
    ef94:	df000017 	ldw	fp,0(sp)
    ef98:	dec00104 	addi	sp,sp,4
    ef9c:	f800283a 	ret

0000efa0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    efa0:	defffc04 	addi	sp,sp,-16
    efa4:	df000315 	stw	fp,12(sp)
    efa8:	df000304 	addi	fp,sp,12
    efac:	e13ffe15 	stw	r4,-8(fp)
    efb0:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    efb4:	e0bffe17 	ldw	r2,-8(fp)
    efb8:	10800a17 	ldw	r2,40(r2)
    efbc:	10800037 	ldwio	r2,0(r2)
    efc0:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    efc4:	e0bffe17 	ldw	r2,-8(fp)
    efc8:	10800a17 	ldw	r2,40(r2)
    efcc:	e0ffff03 	ldbu	r3,-4(fp)
    efd0:	10c00035 	stwio	r3,0(r2)
	return 0;
    efd4:	0005883a 	mov	r2,zero
}
    efd8:	e037883a 	mov	sp,fp
    efdc:	df000017 	ldw	fp,0(sp)
    efe0:	dec00104 	addi	sp,sp,4
    efe4:	f800283a 	ret

0000efe8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    efe8:	defffa04 	addi	sp,sp,-24
    efec:	dfc00515 	stw	ra,20(sp)
    eff0:	df000415 	stw	fp,16(sp)
    eff4:	df000404 	addi	fp,sp,16
    eff8:	e13ffd15 	stw	r4,-12(fp)
    effc:	e17ffe15 	stw	r5,-8(fp)
    f000:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    f004:	e0bffd17 	ldw	r2,-12(fp)
    f008:	10800a17 	ldw	r2,40(r2)
    f00c:	10800037 	ldwio	r2,0(r2)
    f010:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    f014:	e0bffc17 	ldw	r2,-16(fp)
    f018:	1007883a 	mov	r3,r2
    f01c:	e0bffe17 	ldw	r2,-8(fp)
    f020:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    f024:	e13ffc17 	ldw	r4,-16(fp)
    f028:	000ef500 	call	ef50 <alt_up_rs232_check_parity>
    f02c:	1007883a 	mov	r3,r2
    f030:	e0bfff17 	ldw	r2,-4(fp)
    f034:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    f038:	e0bffc17 	ldw	r2,-16(fp)
    f03c:	10a0000c 	andi	r2,r2,32768
    f040:	1004d3fa 	srli	r2,r2,15
    f044:	10bfffc4 	addi	r2,r2,-1
}
    f048:	e037883a 	mov	sp,fp
    f04c:	dfc00117 	ldw	ra,4(sp)
    f050:	df000017 	ldw	fp,0(sp)
    f054:	dec00204 	addi	sp,sp,8
    f058:	f800283a 	ret

0000f05c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    f05c:	defff804 	addi	sp,sp,-32
    f060:	dfc00715 	stw	ra,28(sp)
    f064:	df000615 	stw	fp,24(sp)
    f068:	df000604 	addi	fp,sp,24
    f06c:	e13ffd15 	stw	r4,-12(fp)
    f070:	e17ffe15 	stw	r5,-8(fp)
    f074:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f078:	e0bffd17 	ldw	r2,-12(fp)
    f07c:	10800017 	ldw	r2,0(r2)
    f080:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    f084:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    f088:	00000c06 	br	f0bc <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    f08c:	e17ffe17 	ldw	r5,-8(fp)
    f090:	e0bffe17 	ldw	r2,-8(fp)
    f094:	10800044 	addi	r2,r2,1
    f098:	e0bffe15 	stw	r2,-8(fp)
    f09c:	e1bffc04 	addi	r6,fp,-16
    f0a0:	e13ffb17 	ldw	r4,-20(fp)
    f0a4:	000efe80 	call	efe8 <alt_up_rs232_read_data>
    f0a8:	1004c03a 	cmpne	r2,r2,zero
    f0ac:	1000091e 	bne	r2,zero,f0d4 <alt_up_rs232_read_fd+0x78>
			count++;
    f0b0:	e0bffa17 	ldw	r2,-24(fp)
    f0b4:	10800044 	addi	r2,r2,1
    f0b8:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    f0bc:	e0bfff17 	ldw	r2,-4(fp)
    f0c0:	10bfffc4 	addi	r2,r2,-1
    f0c4:	e0bfff15 	stw	r2,-4(fp)
    f0c8:	e0bfff17 	ldw	r2,-4(fp)
    f0cc:	10bfffd8 	cmpnei	r2,r2,-1
    f0d0:	103fee1e 	bne	r2,zero,f08c <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    f0d4:	e0bffa17 	ldw	r2,-24(fp)
}
    f0d8:	e037883a 	mov	sp,fp
    f0dc:	dfc00117 	ldw	ra,4(sp)
    f0e0:	df000017 	ldw	fp,0(sp)
    f0e4:	dec00204 	addi	sp,sp,8
    f0e8:	f800283a 	ret

0000f0ec <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    f0ec:	defff904 	addi	sp,sp,-28
    f0f0:	dfc00615 	stw	ra,24(sp)
    f0f4:	df000515 	stw	fp,20(sp)
    f0f8:	df000504 	addi	fp,sp,20
    f0fc:	e13ffd15 	stw	r4,-12(fp)
    f100:	e17ffe15 	stw	r5,-8(fp)
    f104:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    f108:	e0bffd17 	ldw	r2,-12(fp)
    f10c:	10800017 	ldw	r2,0(r2)
    f110:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    f114:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    f118:	00000d06 	br	f150 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    f11c:	e0bffe17 	ldw	r2,-8(fp)
    f120:	10800003 	ldbu	r2,0(r2)
    f124:	11403fcc 	andi	r5,r2,255
    f128:	e13ffc17 	ldw	r4,-16(fp)
    f12c:	000efa00 	call	efa0 <alt_up_rs232_write_data>
    f130:	1004c03a 	cmpne	r2,r2,zero
    f134:	10000c1e 	bne	r2,zero,f168 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    f138:	e0bffb17 	ldw	r2,-20(fp)
    f13c:	10800044 	addi	r2,r2,1
    f140:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    f144:	e0bffe17 	ldw	r2,-8(fp)
    f148:	10800044 	addi	r2,r2,1
    f14c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    f150:	e0bfff17 	ldw	r2,-4(fp)
    f154:	10bfffc4 	addi	r2,r2,-1
    f158:	e0bfff15 	stw	r2,-4(fp)
    f15c:	e0bfff17 	ldw	r2,-4(fp)
    f160:	10bfffd8 	cmpnei	r2,r2,-1
    f164:	103fed1e 	bne	r2,zero,f11c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    f168:	e0bffb17 	ldw	r2,-20(fp)
}
    f16c:	e037883a 	mov	sp,fp
    f170:	dfc00117 	ldw	ra,4(sp)
    f174:	df000017 	ldw	fp,0(sp)
    f178:	dec00204 	addi	sp,sp,8
    f17c:	f800283a 	ret

0000f180 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    f180:	defffc04 	addi	sp,sp,-16
    f184:	dfc00315 	stw	ra,12(sp)
    f188:	df000215 	stw	fp,8(sp)
    f18c:	df000204 	addi	fp,sp,8
    f190:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    f194:	e13fff17 	ldw	r4,-4(fp)
    f198:	01400074 	movhi	r5,1
    f19c:	2951a304 	addi	r5,r5,18060
    f1a0:	0010d7c0 	call	10d7c <alt_find_dev>
    f1a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f1a8:	e0bffe17 	ldw	r2,-8(fp)
}
    f1ac:	e037883a 	mov	sp,fp
    f1b0:	dfc00117 	ldw	ra,4(sp)
    f1b4:	df000017 	ldw	fp,0(sp)
    f1b8:	dec00204 	addi	sp,sp,8
    f1bc:	f800283a 	ret

0000f1c0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    f1c0:	defffc04 	addi	sp,sp,-16
    f1c4:	dfc00315 	stw	ra,12(sp)
    f1c8:	df000215 	stw	fp,8(sp)
    f1cc:	df000204 	addi	fp,sp,8
    f1d0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    f1d4:	e0bfff17 	ldw	r2,-4(fp)
    f1d8:	10800217 	ldw	r2,8(r2)
    f1dc:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    f1e0:	00000c06 	br	f214 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    f1e4:	e13ffe17 	ldw	r4,-8(fp)
    f1e8:	01400074 	movhi	r5,1
    f1ec:	2949e004 	addi	r5,r5,10112
    f1f0:	00089540 	call	8954 <strcmp>
    f1f4:	1004c03a 	cmpne	r2,r2,zero
    f1f8:	1000031e 	bne	r2,zero,f208 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    f1fc:	e0bffe17 	ldw	r2,-8(fp)
    f200:	10000005 	stb	zero,0(r2)
			break;
    f204:	00000a06 	br	f230 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    f208:	e0bffe17 	ldw	r2,-8(fp)
    f20c:	10800044 	addi	r2,r2,1
    f210:	e0bffe15 	stw	r2,-8(fp)
    f214:	e0bffe17 	ldw	r2,-8(fp)
    f218:	10800003 	ldbu	r2,0(r2)
    f21c:	10803fcc 	andi	r2,r2,255
    f220:	1080201c 	xori	r2,r2,128
    f224:	10bfe004 	addi	r2,r2,-128
    f228:	1004c03a 	cmpne	r2,r2,zero
    f22c:	103fed1e 	bne	r2,zero,f1e4 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    f230:	e037883a 	mov	sp,fp
    f234:	dfc00117 	ldw	ra,4(sp)
    f238:	df000017 	ldw	fp,0(sp)
    f23c:	dec00204 	addi	sp,sp,8
    f240:	f800283a 	ret

0000f244 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    f244:	defffc04 	addi	sp,sp,-16
    f248:	dfc00315 	stw	ra,12(sp)
    f24c:	df000215 	stw	fp,8(sp)
    f250:	df000204 	addi	fp,sp,8
    f254:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    f258:	e13fff17 	ldw	r4,-4(fp)
    f25c:	01400074 	movhi	r5,1
    f260:	2951a304 	addi	r5,r5,18060
    f264:	0010d7c0 	call	10d7c <alt_find_dev>
    f268:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f26c:	e0bffe17 	ldw	r2,-8(fp)
}
    f270:	e037883a 	mov	sp,fp
    f274:	dfc00117 	ldw	ra,4(sp)
    f278:	df000017 	ldw	fp,0(sp)
    f27c:	dec00204 	addi	sp,sp,8
    f280:	f800283a 	ret

0000f284 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    f284:	defff904 	addi	sp,sp,-28
    f288:	df000615 	stw	fp,24(sp)
    f28c:	df000604 	addi	fp,sp,24
    f290:	e13ffb15 	stw	r4,-20(fp)
    f294:	e1bffd15 	stw	r6,-12(fp)
    f298:	e1fffe15 	stw	r7,-8(fp)
    f29c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f2a0:	e0bffb17 	ldw	r2,-20(fp)
    f2a4:	10c00c17 	ldw	r3,48(r2)
    f2a8:	e0bffd17 	ldw	r2,-12(fp)
    f2ac:	10c0042e 	bgeu	r2,r3,f2c0 <alt_up_char_buffer_draw+0x3c>
    f2b0:	e0bffb17 	ldw	r2,-20(fp)
    f2b4:	10c00d17 	ldw	r3,52(r2)
    f2b8:	e0bffe17 	ldw	r2,-8(fp)
    f2bc:	10c00336 	bltu	r2,r3,f2cc <alt_up_char_buffer_draw+0x48>
		return -1;
    f2c0:	00bfffc4 	movi	r2,-1
    f2c4:	e0bfff15 	stw	r2,-4(fp)
    f2c8:	00001d06 	br	f340 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    f2cc:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    f2d0:	e0bffb17 	ldw	r2,-20(fp)
    f2d4:	10c00f17 	ldw	r3,60(r2)
    f2d8:	e0bffd17 	ldw	r2,-12(fp)
    f2dc:	1886703a 	and	r3,r3,r2
    f2e0:	e0bffb17 	ldw	r2,-20(fp)
    f2e4:	10800e17 	ldw	r2,56(r2)
    f2e8:	1886983a 	sll	r3,r3,r2
    f2ec:	e0bffa17 	ldw	r2,-24(fp)
    f2f0:	10c4b03a 	or	r2,r2,r3
    f2f4:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    f2f8:	e0bffb17 	ldw	r2,-20(fp)
    f2fc:	10c01117 	ldw	r3,68(r2)
    f300:	e0bffe17 	ldw	r2,-8(fp)
    f304:	1886703a 	and	r3,r3,r2
    f308:	e0bffb17 	ldw	r2,-20(fp)
    f30c:	10801017 	ldw	r2,64(r2)
    f310:	1886983a 	sll	r3,r3,r2
    f314:	e0bffa17 	ldw	r2,-24(fp)
    f318:	10c4b03a 	or	r2,r2,r3
    f31c:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    f320:	e0bffb17 	ldw	r2,-20(fp)
    f324:	10800b17 	ldw	r2,44(r2)
    f328:	1007883a 	mov	r3,r2
    f32c:	e0bffa17 	ldw	r2,-24(fp)
    f330:	1885883a 	add	r2,r3,r2
    f334:	e0fffc03 	ldbu	r3,-16(fp)
    f338:	10c00025 	stbio	r3,0(r2)

	return 0;
    f33c:	e03fff15 	stw	zero,-4(fp)
    f340:	e0bfff17 	ldw	r2,-4(fp)
}
    f344:	e037883a 	mov	sp,fp
    f348:	df000017 	ldw	fp,0(sp)
    f34c:	dec00104 	addi	sp,sp,4
    f350:	f800283a 	ret

0000f354 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    f354:	defff904 	addi	sp,sp,-28
    f358:	df000615 	stw	fp,24(sp)
    f35c:	df000604 	addi	fp,sp,24
    f360:	e13ffb15 	stw	r4,-20(fp)
    f364:	e17ffc15 	stw	r5,-16(fp)
    f368:	e1bffd15 	stw	r6,-12(fp)
    f36c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    f370:	e0bffb17 	ldw	r2,-20(fp)
    f374:	10c00c17 	ldw	r3,48(r2)
    f378:	e0bffd17 	ldw	r2,-12(fp)
    f37c:	10c0042e 	bgeu	r2,r3,f390 <alt_up_char_buffer_string+0x3c>
    f380:	e0bffb17 	ldw	r2,-20(fp)
    f384:	10c00d17 	ldw	r3,52(r2)
    f388:	e0bffe17 	ldw	r2,-8(fp)
    f38c:	10c00336 	bltu	r2,r3,f39c <alt_up_char_buffer_string+0x48>
		return -1;
    f390:	00bfffc4 	movi	r2,-1
    f394:	e0bfff15 	stw	r2,-4(fp)
    f398:	00002e06 	br	f454 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    f39c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    f3a0:	e0bffb17 	ldw	r2,-20(fp)
    f3a4:	10801017 	ldw	r2,64(r2)
    f3a8:	1007883a 	mov	r3,r2
    f3ac:	e0bffe17 	ldw	r2,-8(fp)
    f3b0:	10c6983a 	sll	r3,r2,r3
    f3b4:	e0bffd17 	ldw	r2,-12(fp)
    f3b8:	1885883a 	add	r2,r3,r2
    f3bc:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    f3c0:	00001c06 	br	f434 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    f3c4:	e0bffb17 	ldw	r2,-20(fp)
    f3c8:	10800b17 	ldw	r2,44(r2)
    f3cc:	1007883a 	mov	r3,r2
    f3d0:	e0bffa17 	ldw	r2,-24(fp)
    f3d4:	1889883a 	add	r4,r3,r2
    f3d8:	e0bffc17 	ldw	r2,-16(fp)
    f3dc:	10800003 	ldbu	r2,0(r2)
    f3e0:	10c03fcc 	andi	r3,r2,255
    f3e4:	18c0201c 	xori	r3,r3,128
    f3e8:	18ffe004 	addi	r3,r3,-128
    f3ec:	2005883a 	mov	r2,r4
    f3f0:	10c00025 	stbio	r3,0(r2)
		++ptr;
    f3f4:	e0bffc17 	ldw	r2,-16(fp)
    f3f8:	10800044 	addi	r2,r2,1
    f3fc:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    f400:	e0bffd17 	ldw	r2,-12(fp)
    f404:	10800044 	addi	r2,r2,1
    f408:	e0bffd15 	stw	r2,-12(fp)
    f40c:	e0bffb17 	ldw	r2,-20(fp)
    f410:	10c00c17 	ldw	r3,48(r2)
    f414:	e0bffd17 	ldw	r2,-12(fp)
    f418:	10c00336 	bltu	r2,r3,f428 <alt_up_char_buffer_string+0xd4>
			return -1;
    f41c:	00bfffc4 	movi	r2,-1
    f420:	e0bfff15 	stw	r2,-4(fp)
    f424:	00000b06 	br	f454 <alt_up_char_buffer_string+0x100>
		++offset;
    f428:	e0bffa17 	ldw	r2,-24(fp)
    f42c:	10800044 	addi	r2,r2,1
    f430:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    f434:	e0bffc17 	ldw	r2,-16(fp)
    f438:	10800003 	ldbu	r2,0(r2)
    f43c:	10803fcc 	andi	r2,r2,255
    f440:	1080201c 	xori	r2,r2,128
    f444:	10bfe004 	addi	r2,r2,-128
    f448:	1004c03a 	cmpne	r2,r2,zero
    f44c:	103fdd1e 	bne	r2,zero,f3c4 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    f450:	e03fff15 	stw	zero,-4(fp)
    f454:	e0bfff17 	ldw	r2,-4(fp)
}
    f458:	e037883a 	mov	sp,fp
    f45c:	df000017 	ldw	fp,0(sp)
    f460:	dec00104 	addi	sp,sp,4
    f464:	f800283a 	ret

0000f468 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    f468:	defffe04 	addi	sp,sp,-8
    f46c:	df000115 	stw	fp,4(sp)
    f470:	df000104 	addi	fp,sp,4
    f474:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    f478:	e0bfff17 	ldw	r2,-4(fp)
    f47c:	10800a17 	ldw	r2,40(r2)
    f480:	10800084 	addi	r2,r2,2
    f484:	1007883a 	mov	r3,r2
    f488:	00800044 	movi	r2,1
    f48c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    f490:	e0bfff17 	ldw	r2,-4(fp)
    f494:	10800a17 	ldw	r2,40(r2)
    f498:	10800084 	addi	r2,r2,2
    f49c:	10800023 	ldbuio	r2,0(r2)
    f4a0:	1080004c 	andi	r2,r2,1
    f4a4:	10803fcc 	andi	r2,r2,255
    f4a8:	1004c03a 	cmpne	r2,r2,zero
    f4ac:	103ff81e 	bne	r2,zero,f490 <alt_up_char_buffer_clear+0x28>
	return 0;
    f4b0:	0005883a 	mov	r2,zero
}
    f4b4:	e037883a 	mov	sp,fp
    f4b8:	df000017 	ldw	fp,0(sp)
    f4bc:	dec00104 	addi	sp,sp,4
    f4c0:	f800283a 	ret

0000f4c4 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    f4c4:	defffc04 	addi	sp,sp,-16
    f4c8:	dfc00315 	stw	ra,12(sp)
    f4cc:	df000215 	stw	fp,8(sp)
    f4d0:	df000204 	addi	fp,sp,8
    f4d4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    f4d8:	e13fff17 	ldw	r4,-4(fp)
    f4dc:	01400074 	movhi	r5,1
    f4e0:	2951a304 	addi	r5,r5,18060
    f4e4:	0010d7c0 	call	10d7c <alt_find_dev>
    f4e8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    f4ec:	e0bffe17 	ldw	r2,-8(fp)
}
    f4f0:	e037883a 	mov	sp,fp
    f4f4:	dfc00117 	ldw	ra,4(sp)
    f4f8:	df000017 	ldw	fp,0(sp)
    f4fc:	dec00204 	addi	sp,sp,8
    f500:	f800283a 	ret

0000f504 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    f504:	defff904 	addi	sp,sp,-28
    f508:	df000615 	stw	fp,24(sp)
    f50c:	df000604 	addi	fp,sp,24
    f510:	e13ffb15 	stw	r4,-20(fp)
    f514:	e17ffc15 	stw	r5,-16(fp)
    f518:	e1bffd15 	stw	r6,-12(fp)
    f51c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    f520:	e0bffb17 	ldw	r2,-20(fp)
    f524:	10c00f17 	ldw	r3,60(r2)
    f528:	e0bffd17 	ldw	r2,-12(fp)
    f52c:	10c0042e 	bgeu	r2,r3,f540 <alt_up_pixel_buffer_dma_draw+0x3c>
    f530:	e0bffb17 	ldw	r2,-20(fp)
    f534:	10c01017 	ldw	r3,64(r2)
    f538:	e0bffe17 	ldw	r2,-8(fp)
    f53c:	10c00336 	bltu	r2,r3,f54c <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
    f540:	00bfffc4 	movi	r2,-1
    f544:	e0bfff15 	stw	r2,-4(fp)
    f548:	00005106 	br	f690 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
    f54c:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f550:	e0bffb17 	ldw	r2,-20(fp)
    f554:	10800d17 	ldw	r2,52(r2)
    f558:	1004c03a 	cmpne	r2,r2,zero
    f55c:	1000151e 	bne	r2,zero,f5b4 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    f560:	e0bffb17 	ldw	r2,-20(fp)
    f564:	10c01217 	ldw	r3,72(r2)
    f568:	e0bffd17 	ldw	r2,-12(fp)
    f56c:	1886703a 	and	r3,r3,r2
    f570:	e0bffb17 	ldw	r2,-20(fp)
    f574:	10801117 	ldw	r2,68(r2)
    f578:	1886983a 	sll	r3,r3,r2
    f57c:	e0bffa17 	ldw	r2,-24(fp)
    f580:	10c4b03a 	or	r2,r2,r3
    f584:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    f588:	e0bffb17 	ldw	r2,-20(fp)
    f58c:	10c01417 	ldw	r3,80(r2)
    f590:	e0bffe17 	ldw	r2,-8(fp)
    f594:	1886703a 	and	r3,r3,r2
    f598:	e0bffb17 	ldw	r2,-20(fp)
    f59c:	10801317 	ldw	r2,76(r2)
    f5a0:	1886983a 	sll	r3,r3,r2
    f5a4:	e0bffa17 	ldw	r2,-24(fp)
    f5a8:	10c4b03a 	or	r2,r2,r3
    f5ac:	e0bffa15 	stw	r2,-24(fp)
    f5b0:	00001706 	br	f610 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    f5b4:	e0bffb17 	ldw	r2,-20(fp)
    f5b8:	10c01217 	ldw	r3,72(r2)
    f5bc:	e0bffd17 	ldw	r2,-12(fp)
    f5c0:	1886703a 	and	r3,r3,r2
    f5c4:	e0bffb17 	ldw	r2,-20(fp)
    f5c8:	10801117 	ldw	r2,68(r2)
    f5cc:	1886983a 	sll	r3,r3,r2
    f5d0:	e0bffa17 	ldw	r2,-24(fp)
    f5d4:	10c5883a 	add	r2,r2,r3
    f5d8:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    f5dc:	e0bffb17 	ldw	r2,-20(fp)
    f5e0:	10c01417 	ldw	r3,80(r2)
    f5e4:	e0bffe17 	ldw	r2,-8(fp)
    f5e8:	1886703a 	and	r3,r3,r2
    f5ec:	e0bffb17 	ldw	r2,-20(fp)
    f5f0:	10800f17 	ldw	r2,60(r2)
    f5f4:	1887383a 	mul	r3,r3,r2
    f5f8:	e0bffb17 	ldw	r2,-20(fp)
    f5fc:	10801117 	ldw	r2,68(r2)
    f600:	1886983a 	sll	r3,r3,r2
    f604:	e0bffa17 	ldw	r2,-24(fp)
    f608:	10c5883a 	add	r2,r2,r3
    f60c:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    f610:	e0bffb17 	ldw	r2,-20(fp)
    f614:	10800e17 	ldw	r2,56(r2)
    f618:	10800058 	cmpnei	r2,r2,1
    f61c:	1000081e 	bne	r2,zero,f640 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f620:	e0bffb17 	ldw	r2,-20(fp)
    f624:	10800c17 	ldw	r2,48(r2)
    f628:	1007883a 	mov	r3,r2
    f62c:	e0bffa17 	ldw	r2,-24(fp)
    f630:	1885883a 	add	r2,r3,r2
    f634:	e0fffc17 	ldw	r3,-16(fp)
    f638:	10c00025 	stbio	r3,0(r2)
    f63c:	00001306 	br	f68c <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f640:	e0bffb17 	ldw	r2,-20(fp)
    f644:	10800e17 	ldw	r2,56(r2)
    f648:	10800098 	cmpnei	r2,r2,2
    f64c:	1000081e 	bne	r2,zero,f670 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f650:	e0bffb17 	ldw	r2,-20(fp)
    f654:	10800c17 	ldw	r2,48(r2)
    f658:	1007883a 	mov	r3,r2
    f65c:	e0bffa17 	ldw	r2,-24(fp)
    f660:	1885883a 	add	r2,r3,r2
    f664:	e0fffc17 	ldw	r3,-16(fp)
    f668:	10c0002d 	sthio	r3,0(r2)
    f66c:	00000706 	br	f68c <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    f670:	e0bffb17 	ldw	r2,-20(fp)
    f674:	10800c17 	ldw	r2,48(r2)
    f678:	1007883a 	mov	r3,r2
    f67c:	e0bffa17 	ldw	r2,-24(fp)
    f680:	1885883a 	add	r2,r3,r2
    f684:	e0fffc17 	ldw	r3,-16(fp)
    f688:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
    f68c:	e03fff15 	stw	zero,-4(fp)
    f690:	e0bfff17 	ldw	r2,-4(fp)
}
    f694:	e037883a 	mov	sp,fp
    f698:	df000017 	ldw	fp,0(sp)
    f69c:	dec00104 	addi	sp,sp,4
    f6a0:	f800283a 	ret

0000f6a4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    f6a4:	defffd04 	addi	sp,sp,-12
    f6a8:	df000215 	stw	fp,8(sp)
    f6ac:	df000204 	addi	fp,sp,8
    f6b0:	e13ffe15 	stw	r4,-8(fp)
    f6b4:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    f6b8:	e0bffe17 	ldw	r2,-8(fp)
    f6bc:	10800a17 	ldw	r2,40(r2)
    f6c0:	10800104 	addi	r2,r2,4
    f6c4:	e0ffff17 	ldw	r3,-4(fp)
    f6c8:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    f6cc:	e0bffe17 	ldw	r2,-8(fp)
    f6d0:	10800a17 	ldw	r2,40(r2)
    f6d4:	10800104 	addi	r2,r2,4
    f6d8:	10800037 	ldwio	r2,0(r2)
    f6dc:	1007883a 	mov	r3,r2
    f6e0:	e0bffe17 	ldw	r2,-8(fp)
    f6e4:	10c00c15 	stw	r3,48(r2)
	return 0;
    f6e8:	0005883a 	mov	r2,zero
}
    f6ec:	e037883a 	mov	sp,fp
    f6f0:	df000017 	ldw	fp,0(sp)
    f6f4:	dec00104 	addi	sp,sp,4
    f6f8:	f800283a 	ret

0000f6fc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    f6fc:	defffe04 	addi	sp,sp,-8
    f700:	df000115 	stw	fp,4(sp)
    f704:	df000104 	addi	fp,sp,4
    f708:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    f70c:	e0bfff17 	ldw	r2,-4(fp)
    f710:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    f714:	e0bfff17 	ldw	r2,-4(fp)
    f718:	10800a17 	ldw	r2,40(r2)
    f71c:	1007883a 	mov	r3,r2
    f720:	00800044 	movi	r2,1
    f724:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    f728:	e0bfff17 	ldw	r2,-4(fp)
    f72c:	10c00b17 	ldw	r3,44(r2)
    f730:	e0bfff17 	ldw	r2,-4(fp)
    f734:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    f738:	e0bfff17 	ldw	r2,-4(fp)
    f73c:	11000b15 	stw	r4,44(r2)
	return 0;
    f740:	0005883a 	mov	r2,zero
}
    f744:	e037883a 	mov	sp,fp
    f748:	df000017 	ldw	fp,0(sp)
    f74c:	dec00104 	addi	sp,sp,4
    f750:	f800283a 	ret

0000f754 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    f754:	defffe04 	addi	sp,sp,-8
    f758:	df000115 	stw	fp,4(sp)
    f75c:	df000104 	addi	fp,sp,4
    f760:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    f764:	e0bfff17 	ldw	r2,-4(fp)
    f768:	10800a17 	ldw	r2,40(r2)
    f76c:	10800304 	addi	r2,r2,12
    f770:	10800037 	ldwio	r2,0(r2)
    f774:	1080004c 	andi	r2,r2,1
}
    f778:	e037883a 	mov	sp,fp
    f77c:	df000017 	ldw	fp,0(sp)
    f780:	dec00104 	addi	sp,sp,4
    f784:	f800283a 	ret

0000f788 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    f788:	defff604 	addi	sp,sp,-40
    f78c:	df000915 	stw	fp,36(sp)
    f790:	df000904 	addi	fp,sp,36
    f794:	e13ff715 	stw	r4,-36(fp)
    f798:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f79c:	e0bff817 	ldw	r2,-32(fp)
    f7a0:	10800058 	cmpnei	r2,r2,1
    f7a4:	1000041e 	bne	r2,zero,f7b8 <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
    f7a8:	e0bff717 	ldw	r2,-36(fp)
    f7ac:	10800c17 	ldw	r2,48(r2)
    f7b0:	e0bfff15 	stw	r2,-4(fp)
    f7b4:	00000306 	br	f7c4 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
    f7b8:	e0bff717 	ldw	r2,-36(fp)
    f7bc:	10800b17 	ldw	r2,44(r2)
    f7c0:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
    f7c4:	e0bff717 	ldw	r2,-36(fp)
    f7c8:	10800f17 	ldw	r2,60(r2)
    f7cc:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    f7d0:	e0bff717 	ldw	r2,-36(fp)
    f7d4:	10800e17 	ldw	r2,56(r2)
    f7d8:	10800098 	cmpnei	r2,r2,2
    f7dc:	1000051e 	bne	r2,zero,f7f4 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
    f7e0:	e0fffe17 	ldw	r3,-8(fp)
    f7e4:	e0fffe17 	ldw	r3,-8(fp)
    f7e8:	18c5883a 	add	r2,r3,r3
    f7ec:	e0bffe15 	stw	r2,-8(fp)
    f7f0:	00000506 	br	f808 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
    f7f4:	e13ffe17 	ldw	r4,-8(fp)
    f7f8:	e13ffe17 	ldw	r4,-8(fp)
    f7fc:	2105883a 	add	r2,r4,r4
    f800:	1085883a 	add	r2,r2,r2
    f804:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
    f808:	e0bff717 	ldw	r2,-36(fp)
    f80c:	10801017 	ldw	r2,64(r2)
    f810:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    f814:	e0bff717 	ldw	r2,-36(fp)
    f818:	10800d17 	ldw	r2,52(r2)
    f81c:	1004c03a 	cmpne	r2,r2,zero
    f820:	10001e1e 	bne	r2,zero,f89c <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    f824:	e0bff717 	ldw	r2,-36(fp)
    f828:	10801317 	ldw	r2,76(r2)
    f82c:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
    f830:	e03ffb15 	stw	zero,-20(fp)
    f834:	00001506 	br	f88c <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
    f838:	e03ffc15 	stw	zero,-16(fp)
    f83c:	00000706 	br	f85c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
    f840:	e0ffff17 	ldw	r3,-4(fp)
    f844:	e0bffc17 	ldw	r2,-16(fp)
    f848:	1885883a 	add	r2,r3,r2
    f84c:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    f850:	e0bffc17 	ldw	r2,-16(fp)
    f854:	10800104 	addi	r2,r2,4
    f858:	e0bffc15 	stw	r2,-16(fp)
    f85c:	e0fffc17 	ldw	r3,-16(fp)
    f860:	e13ffe17 	ldw	r4,-8(fp)
    f864:	193ff636 	bltu	r3,r4,f840 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    f868:	e0fffa17 	ldw	r3,-24(fp)
    f86c:	00800044 	movi	r2,1
    f870:	10c4983a 	sll	r2,r2,r3
    f874:	e0ffff17 	ldw	r3,-4(fp)
    f878:	1887883a 	add	r3,r3,r2
    f87c:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    f880:	e13ffb17 	ldw	r4,-20(fp)
    f884:	21000044 	addi	r4,r4,1
    f888:	e13ffb15 	stw	r4,-20(fp)
    f88c:	e0bffb17 	ldw	r2,-20(fp)
    f890:	e0fffd17 	ldw	r3,-12(fp)
    f894:	10ffe836 	bltu	r2,r3,f838 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
    f898:	00001006 	br	f8dc <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    f89c:	e13ffd17 	ldw	r4,-12(fp)
    f8a0:	e0bffe17 	ldw	r2,-8(fp)
    f8a4:	2089383a 	mul	r4,r4,r2
    f8a8:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
    f8ac:	e03ff915 	stw	zero,-28(fp)
    f8b0:	00000706 	br	f8d0 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
    f8b4:	e0ffff17 	ldw	r3,-4(fp)
    f8b8:	e0bff917 	ldw	r2,-28(fp)
    f8bc:	1885883a 	add	r2,r3,r2
    f8c0:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    f8c4:	e0fff917 	ldw	r3,-28(fp)
    f8c8:	18c00104 	addi	r3,r3,4
    f8cc:	e0fff915 	stw	r3,-28(fp)
    f8d0:	e0bff917 	ldw	r2,-28(fp)
    f8d4:	e13ffd17 	ldw	r4,-12(fp)
    f8d8:	113ff636 	bltu	r2,r4,f8b4 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    f8dc:	e037883a 	mov	sp,fp
    f8e0:	df000017 	ldw	fp,0(sp)
    f8e4:	dec00104 	addi	sp,sp,4
    f8e8:	f800283a 	ret

0000f8ec <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    f8ec:	deffed04 	addi	sp,sp,-76
    f8f0:	df001215 	stw	fp,72(sp)
    f8f4:	df001204 	addi	fp,sp,72
    f8f8:	e13fee15 	stw	r4,-72(fp)
    f8fc:	e17fef15 	stw	r5,-68(fp)
    f900:	e1bff015 	stw	r6,-64(fp)
    f904:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    f908:	e0bfee17 	ldw	r2,-72(fp)
    f90c:	10800f17 	ldw	r2,60(r2)
    f910:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    f914:	e0bfee17 	ldw	r2,-72(fp)
    f918:	10801017 	ldw	r2,64(r2)
    f91c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    f920:	e0bfef17 	ldw	r2,-68(fp)
    f924:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
    f928:	e0fff117 	ldw	r3,-60(fp)
    f92c:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
    f930:	e13ff017 	ldw	r4,-64(fp)
    f934:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
    f938:	e0800117 	ldw	r2,4(fp)
    f93c:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
    f940:	e0c00217 	ldw	r3,8(fp)
    f944:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    f948:	e13ffa17 	ldw	r4,-24(fp)
    f94c:	e0bffb17 	ldw	r2,-20(fp)
    f950:	2080062e 	bgeu	r4,r2,f96c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
    f954:	e0fffb17 	ldw	r3,-20(fp)
    f958:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
    f95c:	e13ffa17 	ldw	r4,-24(fp)
    f960:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
    f964:	e0bffc17 	ldw	r2,-16(fp)
    f968:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
    f96c:	e0fff817 	ldw	r3,-32(fp)
    f970:	e13ff917 	ldw	r4,-28(fp)
    f974:	1900062e 	bgeu	r3,r4,f990 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
    f978:	e0bff917 	ldw	r2,-28(fp)
    f97c:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
    f980:	e0fff817 	ldw	r3,-32(fp)
    f984:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
    f988:	e13ffc17 	ldw	r4,-16(fp)
    f98c:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    f990:	e0bffb17 	ldw	r2,-20(fp)
    f994:	e0fffe17 	ldw	r3,-8(fp)
    f998:	10c10d2e 	bgeu	r2,r3,fdd0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
    f99c:	e13ff917 	ldw	r4,-28(fp)
    f9a0:	e0bffd17 	ldw	r2,-12(fp)
    f9a4:	20800136 	bltu	r4,r2,f9ac <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    f9a8:	00010906 	br	fdd0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    f9ac:	e0fffa17 	ldw	r3,-24(fp)
    f9b0:	e13ffe17 	ldw	r4,-8(fp)
    f9b4:	19000336 	bltu	r3,r4,f9c4 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
    f9b8:	e0bffe17 	ldw	r2,-8(fp)
    f9bc:	10bfffc4 	addi	r2,r2,-1
    f9c0:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    f9c4:	e0fff817 	ldw	r3,-32(fp)
    f9c8:	e13ffd17 	ldw	r4,-12(fp)
    f9cc:	19000336 	bltu	r3,r4,f9dc <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
    f9d0:	e0bffd17 	ldw	r2,-12(fp)
    f9d4:	10bfffc4 	addi	r2,r2,-1
    f9d8:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    f9dc:	e0800317 	ldw	r2,12(fp)
    f9e0:	10800058 	cmpnei	r2,r2,1
    f9e4:	1000041e 	bne	r2,zero,f9f8 <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
    f9e8:	e0bfee17 	ldw	r2,-72(fp)
    f9ec:	10800c17 	ldw	r2,48(r2)
    f9f0:	e0bfff15 	stw	r2,-4(fp)
    f9f4:	00000306 	br	fa04 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
    f9f8:	e0bfee17 	ldw	r2,-72(fp)
    f9fc:	10800b17 	ldw	r2,44(r2)
    fa00:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    fa04:	e0bfee17 	ldw	r2,-72(fp)
    fa08:	10800d17 	ldw	r2,52(r2)
    fa0c:	1004c03a 	cmpne	r2,r2,zero
    fa10:	1000721e 	bne	r2,zero,fbdc <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    fa14:	e0bfee17 	ldw	r2,-72(fp)
    fa18:	10801317 	ldw	r2,76(r2)
    fa1c:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
    fa20:	e0bff417 	ldw	r2,-48(fp)
    fa24:	e0fff917 	ldw	r3,-28(fp)
    fa28:	1884983a 	sll	r2,r3,r2
    fa2c:	e13fff17 	ldw	r4,-4(fp)
    fa30:	2089883a 	add	r4,r4,r2
    fa34:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fa38:	e0bfee17 	ldw	r2,-72(fp)
    fa3c:	10800e17 	ldw	r2,56(r2)
    fa40:	10800058 	cmpnei	r2,r2,1
    fa44:	10001e1e 	bne	r2,zero,fac0 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
    fa48:	e0bff917 	ldw	r2,-28(fp)
    fa4c:	e0bff515 	stw	r2,-44(fp)
    fa50:	00001706 	br	fab0 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
    fa54:	e0fffb17 	ldw	r3,-20(fp)
    fa58:	e0fff615 	stw	r3,-40(fp)
    fa5c:	00000806 	br	fa80 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
    fa60:	e0ffff17 	ldw	r3,-4(fp)
    fa64:	e0bff617 	ldw	r2,-40(fp)
    fa68:	1885883a 	add	r2,r3,r2
    fa6c:	e0fff717 	ldw	r3,-36(fp)
    fa70:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fa74:	e13ff617 	ldw	r4,-40(fp)
    fa78:	21000044 	addi	r4,r4,1
    fa7c:	e13ff615 	stw	r4,-40(fp)
    fa80:	e0bffa17 	ldw	r2,-24(fp)
    fa84:	e0fff617 	ldw	r3,-40(fp)
    fa88:	10fff52e 	bgeu	r2,r3,fa60 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    fa8c:	e0fff417 	ldw	r3,-48(fp)
    fa90:	00800044 	movi	r2,1
    fa94:	10c4983a 	sll	r2,r2,r3
    fa98:	e13fff17 	ldw	r4,-4(fp)
    fa9c:	2089883a 	add	r4,r4,r2
    faa0:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    faa4:	e0bff517 	ldw	r2,-44(fp)
    faa8:	10800044 	addi	r2,r2,1
    faac:	e0bff515 	stw	r2,-44(fp)
    fab0:	e0fff817 	ldw	r3,-32(fp)
    fab4:	e13ff517 	ldw	r4,-44(fp)
    fab8:	193fe62e 	bgeu	r3,r4,fa54 <alt_up_pixel_buffer_dma_draw_box+0x168>
    fabc:	0000c406 	br	fdd0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fac0:	e0bfee17 	ldw	r2,-72(fp)
    fac4:	10800e17 	ldw	r2,56(r2)
    fac8:	10800098 	cmpnei	r2,r2,2
    facc:	1000211e 	bne	r2,zero,fb54 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
    fad0:	e0bff917 	ldw	r2,-28(fp)
    fad4:	e0bff515 	stw	r2,-44(fp)
    fad8:	00001a06 	br	fb44 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
    fadc:	e0fffb17 	ldw	r3,-20(fp)
    fae0:	e0fff615 	stw	r3,-40(fp)
    fae4:	00000b06 	br	fb14 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    fae8:	e13ff617 	ldw	r4,-40(fp)
    faec:	e13ff617 	ldw	r4,-40(fp)
    faf0:	2105883a 	add	r2,r4,r4
    faf4:	1007883a 	mov	r3,r2
    faf8:	e0bfff17 	ldw	r2,-4(fp)
    fafc:	1885883a 	add	r2,r3,r2
    fb00:	e0fff717 	ldw	r3,-36(fp)
    fb04:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fb08:	e0bff617 	ldw	r2,-40(fp)
    fb0c:	10800044 	addi	r2,r2,1
    fb10:	e0bff615 	stw	r2,-40(fp)
    fb14:	e0fffa17 	ldw	r3,-24(fp)
    fb18:	e13ff617 	ldw	r4,-40(fp)
    fb1c:	193ff22e 	bgeu	r3,r4,fae8 <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    fb20:	e0fff417 	ldw	r3,-48(fp)
    fb24:	00800044 	movi	r2,1
    fb28:	10c4983a 	sll	r2,r2,r3
    fb2c:	e0ffff17 	ldw	r3,-4(fp)
    fb30:	1887883a 	add	r3,r3,r2
    fb34:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    fb38:	e13ff517 	ldw	r4,-44(fp)
    fb3c:	21000044 	addi	r4,r4,1
    fb40:	e13ff515 	stw	r4,-44(fp)
    fb44:	e0bff817 	ldw	r2,-32(fp)
    fb48:	e0fff517 	ldw	r3,-44(fp)
    fb4c:	10ffe32e 	bgeu	r2,r3,fadc <alt_up_pixel_buffer_dma_draw_box+0x1f0>
    fb50:	00009f06 	br	fdd0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    fb54:	e13ff917 	ldw	r4,-28(fp)
    fb58:	e13ff515 	stw	r4,-44(fp)
    fb5c:	00001b06 	br	fbcc <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
    fb60:	e0bffb17 	ldw	r2,-20(fp)
    fb64:	e0bff615 	stw	r2,-40(fp)
    fb68:	00000c06 	br	fb9c <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    fb6c:	e0fff617 	ldw	r3,-40(fp)
    fb70:	e0fff617 	ldw	r3,-40(fp)
    fb74:	18c5883a 	add	r2,r3,r3
    fb78:	1085883a 	add	r2,r2,r2
    fb7c:	1007883a 	mov	r3,r2
    fb80:	e0bfff17 	ldw	r2,-4(fp)
    fb84:	1885883a 	add	r2,r3,r2
    fb88:	e0fff717 	ldw	r3,-36(fp)
    fb8c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fb90:	e13ff617 	ldw	r4,-40(fp)
    fb94:	21000044 	addi	r4,r4,1
    fb98:	e13ff615 	stw	r4,-40(fp)
    fb9c:	e0bffa17 	ldw	r2,-24(fp)
    fba0:	e0fff617 	ldw	r3,-40(fp)
    fba4:	10fff12e 	bgeu	r2,r3,fb6c <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    fba8:	e0fff417 	ldw	r3,-48(fp)
    fbac:	00800044 	movi	r2,1
    fbb0:	10c4983a 	sll	r2,r2,r3
    fbb4:	e13fff17 	ldw	r4,-4(fp)
    fbb8:	2089883a 	add	r4,r4,r2
    fbbc:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    fbc0:	e0bff517 	ldw	r2,-44(fp)
    fbc4:	10800044 	addi	r2,r2,1
    fbc8:	e0bff515 	stw	r2,-44(fp)
    fbcc:	e0fff817 	ldw	r3,-32(fp)
    fbd0:	e13ff517 	ldw	r4,-44(fp)
    fbd4:	193fe22e 	bgeu	r3,r4,fb60 <alt_up_pixel_buffer_dma_draw_box+0x274>
    fbd8:	00007d06 	br	fdd0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fbdc:	e0bfee17 	ldw	r2,-72(fp)
    fbe0:	10800e17 	ldw	r2,56(r2)
    fbe4:	10800058 	cmpnei	r2,r2,1
    fbe8:	1000221e 	bne	r2,zero,fc74 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
    fbec:	e0fff917 	ldw	r3,-28(fp)
    fbf0:	e13ffe17 	ldw	r4,-8(fp)
    fbf4:	1905383a 	mul	r2,r3,r4
    fbf8:	e0ffff17 	ldw	r3,-4(fp)
    fbfc:	1887883a 	add	r3,r3,r2
    fc00:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fc04:	e13ff917 	ldw	r4,-28(fp)
    fc08:	e13ff215 	stw	r4,-56(fp)
    fc0c:	00001506 	br	fc64 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
    fc10:	e0bffb17 	ldw	r2,-20(fp)
    fc14:	e0bff315 	stw	r2,-52(fp)
    fc18:	00000806 	br	fc3c <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
    fc1c:	e0ffff17 	ldw	r3,-4(fp)
    fc20:	e0bff317 	ldw	r2,-52(fp)
    fc24:	1885883a 	add	r2,r3,r2
    fc28:	e0fff717 	ldw	r3,-36(fp)
    fc2c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fc30:	e0fff317 	ldw	r3,-52(fp)
    fc34:	18c00044 	addi	r3,r3,1
    fc38:	e0fff315 	stw	r3,-52(fp)
    fc3c:	e13ffa17 	ldw	r4,-24(fp)
    fc40:	e0bff317 	ldw	r2,-52(fp)
    fc44:	20bff52e 	bgeu	r4,r2,fc1c <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    fc48:	e0ffff17 	ldw	r3,-4(fp)
    fc4c:	e13ffe17 	ldw	r4,-8(fp)
    fc50:	1907883a 	add	r3,r3,r4
    fc54:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fc58:	e0bff217 	ldw	r2,-56(fp)
    fc5c:	10800044 	addi	r2,r2,1
    fc60:	e0bff215 	stw	r2,-56(fp)
    fc64:	e0fff817 	ldw	r3,-32(fp)
    fc68:	e13ff217 	ldw	r4,-56(fp)
    fc6c:	193fe82e 	bgeu	r3,r4,fc10 <alt_up_pixel_buffer_dma_draw_box+0x324>
    fc70:	00005706 	br	fdd0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    fc74:	e0bfee17 	ldw	r2,-72(fp)
    fc78:	10800e17 	ldw	r2,56(r2)
    fc7c:	10800098 	cmpnei	r2,r2,2
    fc80:	1000291e 	bne	r2,zero,fd28 <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
    fc84:	e0fffe17 	ldw	r3,-8(fp)
    fc88:	e0fffe17 	ldw	r3,-8(fp)
    fc8c:	18c5883a 	add	r2,r3,r3
    fc90:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    fc94:	e13ff917 	ldw	r4,-28(fp)
    fc98:	e0fffe17 	ldw	r3,-8(fp)
    fc9c:	20c5383a 	mul	r2,r4,r3
    fca0:	e13fff17 	ldw	r4,-4(fp)
    fca4:	2089883a 	add	r4,r4,r2
    fca8:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fcac:	e0bff917 	ldw	r2,-28(fp)
    fcb0:	e0bff215 	stw	r2,-56(fp)
    fcb4:	00001806 	br	fd18 <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
    fcb8:	e0fffb17 	ldw	r3,-20(fp)
    fcbc:	e0fff315 	stw	r3,-52(fp)
    fcc0:	00000b06 	br	fcf0 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    fcc4:	e13ff317 	ldw	r4,-52(fp)
    fcc8:	e13ff317 	ldw	r4,-52(fp)
    fccc:	2105883a 	add	r2,r4,r4
    fcd0:	1007883a 	mov	r3,r2
    fcd4:	e0bfff17 	ldw	r2,-4(fp)
    fcd8:	1885883a 	add	r2,r3,r2
    fcdc:	e0fff717 	ldw	r3,-36(fp)
    fce0:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fce4:	e0bff317 	ldw	r2,-52(fp)
    fce8:	10800044 	addi	r2,r2,1
    fcec:	e0bff315 	stw	r2,-52(fp)
    fcf0:	e0fffa17 	ldw	r3,-24(fp)
    fcf4:	e13ff317 	ldw	r4,-52(fp)
    fcf8:	193ff22e 	bgeu	r3,r4,fcc4 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    fcfc:	e0bfff17 	ldw	r2,-4(fp)
    fd00:	e0fffe17 	ldw	r3,-8(fp)
    fd04:	10c5883a 	add	r2,r2,r3
    fd08:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fd0c:	e13ff217 	ldw	r4,-56(fp)
    fd10:	21000044 	addi	r4,r4,1
    fd14:	e13ff215 	stw	r4,-56(fp)
    fd18:	e0bff817 	ldw	r2,-32(fp)
    fd1c:	e0fff217 	ldw	r3,-56(fp)
    fd20:	10ffe52e 	bgeu	r2,r3,fcb8 <alt_up_pixel_buffer_dma_draw_box+0x3cc>
    fd24:	00002a06 	br	fdd0 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    fd28:	e13ffe17 	ldw	r4,-8(fp)
    fd2c:	e13ffe17 	ldw	r4,-8(fp)
    fd30:	2105883a 	add	r2,r4,r4
    fd34:	1085883a 	add	r2,r2,r2
    fd38:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
    fd3c:	e0fff917 	ldw	r3,-28(fp)
    fd40:	e13ffe17 	ldw	r4,-8(fp)
    fd44:	1905383a 	mul	r2,r3,r4
    fd48:	e0ffff17 	ldw	r3,-4(fp)
    fd4c:	1887883a 	add	r3,r3,r2
    fd50:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
    fd54:	e13ff917 	ldw	r4,-28(fp)
    fd58:	e13ff215 	stw	r4,-56(fp)
    fd5c:	00001906 	br	fdc4 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
    fd60:	e0bffb17 	ldw	r2,-20(fp)
    fd64:	e0bff315 	stw	r2,-52(fp)
    fd68:	00000c06 	br	fd9c <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    fd6c:	e0fff317 	ldw	r3,-52(fp)
    fd70:	e0fff317 	ldw	r3,-52(fp)
    fd74:	18c5883a 	add	r2,r3,r3
    fd78:	1085883a 	add	r2,r2,r2
    fd7c:	1007883a 	mov	r3,r2
    fd80:	e0bfff17 	ldw	r2,-4(fp)
    fd84:	1885883a 	add	r2,r3,r2
    fd88:	e0fff717 	ldw	r3,-36(fp)
    fd8c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    fd90:	e13ff317 	ldw	r4,-52(fp)
    fd94:	21000044 	addi	r4,r4,1
    fd98:	e13ff315 	stw	r4,-52(fp)
    fd9c:	e0bffa17 	ldw	r2,-24(fp)
    fda0:	e0fff317 	ldw	r3,-52(fp)
    fda4:	10fff12e 	bgeu	r2,r3,fd6c <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    fda8:	e13fff17 	ldw	r4,-4(fp)
    fdac:	e0bffe17 	ldw	r2,-8(fp)
    fdb0:	2089883a 	add	r4,r4,r2
    fdb4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    fdb8:	e0fff217 	ldw	r3,-56(fp)
    fdbc:	18c00044 	addi	r3,r3,1
    fdc0:	e0fff215 	stw	r3,-56(fp)
    fdc4:	e13ff817 	ldw	r4,-32(fp)
    fdc8:	e0bff217 	ldw	r2,-56(fp)
    fdcc:	20bfe42e 	bgeu	r4,r2,fd60 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
    fdd0:	e037883a 	mov	sp,fp
    fdd4:	df000017 	ldw	fp,0(sp)
    fdd8:	dec00104 	addi	sp,sp,4
    fddc:	f800283a 	ret

0000fde0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    fde0:	defff204 	addi	sp,sp,-56
    fde4:	df000d15 	stw	fp,52(sp)
    fde8:	df000d04 	addi	fp,sp,52
    fdec:	e13ff315 	stw	r4,-52(fp)
    fdf0:	e17ff415 	stw	r5,-48(fp)
    fdf4:	e1bff515 	stw	r6,-44(fp)
    fdf8:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    fdfc:	e0bff317 	ldw	r2,-52(fp)
    fe00:	10800f17 	ldw	r2,60(r2)
    fe04:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    fe08:	e0bff317 	ldw	r2,-52(fp)
    fe0c:	10801017 	ldw	r2,64(r2)
    fe10:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
    fe14:	e0bff417 	ldw	r2,-48(fp)
    fe18:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
    fe1c:	e0fff517 	ldw	r3,-44(fp)
    fe20:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
    fe24:	e13ff617 	ldw	r4,-40(fp)
    fe28:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
    fe2c:	e0800117 	ldw	r2,4(fp)
    fe30:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    fe34:	e0fffb17 	ldw	r3,-20(fp)
    fe38:	e13ffc17 	ldw	r4,-16(fp)
    fe3c:	1900042e 	bgeu	r3,r4,fe50 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
    fe40:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
    fe44:	e0fffb17 	ldw	r3,-20(fp)
    fe48:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
    fe4c:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    fe50:	e13ffc17 	ldw	r4,-16(fp)
    fe54:	e0bffe17 	ldw	r2,-8(fp)
    fe58:	2080b12e 	bgeu	r4,r2,10120 <alt_up_pixel_buffer_dma_draw_hline+0x340>
    fe5c:	e0fffa17 	ldw	r3,-24(fp)
    fe60:	e13ffd17 	ldw	r4,-12(fp)
    fe64:	19000136 	bltu	r3,r4,fe6c <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    fe68:	0000ad06 	br	10120 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    fe6c:	e0bffb17 	ldw	r2,-20(fp)
    fe70:	e0fffe17 	ldw	r3,-8(fp)
    fe74:	10c00336 	bltu	r2,r3,fe84 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
    fe78:	e13ffe17 	ldw	r4,-8(fp)
    fe7c:	213fffc4 	addi	r4,r4,-1
    fe80:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    fe84:	e0800217 	ldw	r2,8(fp)
    fe88:	10800058 	cmpnei	r2,r2,1
    fe8c:	1000041e 	bne	r2,zero,fea0 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
    fe90:	e0bff317 	ldw	r2,-52(fp)
    fe94:	10800c17 	ldw	r2,48(r2)
    fe98:	e0bfff15 	stw	r2,-4(fp)
    fe9c:	00000306 	br	feac <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
    fea0:	e0bff317 	ldw	r2,-52(fp)
    fea4:	10800b17 	ldw	r2,44(r2)
    fea8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    feac:	e0bff317 	ldw	r2,-52(fp)
    feb0:	10800d17 	ldw	r2,52(r2)
    feb4:	1004c03a 	cmpne	r2,r2,zero
    feb8:	1000431e 	bne	r2,zero,ffc8 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    febc:	e0bff317 	ldw	r2,-52(fp)
    fec0:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
    fec4:	e0fffa17 	ldw	r3,-24(fp)
    fec8:	1884983a 	sll	r2,r3,r2
    fecc:	e13fff17 	ldw	r4,-4(fp)
    fed0:	2089883a 	add	r4,r4,r2
    fed4:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    fed8:	e0bff317 	ldw	r2,-52(fp)
    fedc:	10800e17 	ldw	r2,56(r2)
    fee0:	10800058 	cmpnei	r2,r2,1
    fee4:	10000f1e 	bne	r2,zero,ff24 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
    fee8:	e0bffc17 	ldw	r2,-16(fp)
    feec:	e0bff815 	stw	r2,-32(fp)
    fef0:	00000806 	br	ff14 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
    fef4:	e0ffff17 	ldw	r3,-4(fp)
    fef8:	e0bff817 	ldw	r2,-32(fp)
    fefc:	1885883a 	add	r2,r3,r2
    ff00:	e0fff917 	ldw	r3,-28(fp)
    ff04:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    ff08:	e0fff817 	ldw	r3,-32(fp)
    ff0c:	18c00044 	addi	r3,r3,1
    ff10:	e0fff815 	stw	r3,-32(fp)
    ff14:	e13ffb17 	ldw	r4,-20(fp)
    ff18:	e0bff817 	ldw	r2,-32(fp)
    ff1c:	20bff52e 	bgeu	r4,r2,fef4 <alt_up_pixel_buffer_dma_draw_hline+0x114>
    ff20:	00007f06 	br	10120 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ff24:	e0bff317 	ldw	r2,-52(fp)
    ff28:	10800e17 	ldw	r2,56(r2)
    ff2c:	10800098 	cmpnei	r2,r2,2
    ff30:	1000121e 	bne	r2,zero,ff7c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
    ff34:	e0fffc17 	ldw	r3,-16(fp)
    ff38:	e0fff815 	stw	r3,-32(fp)
    ff3c:	00000b06 	br	ff6c <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    ff40:	e13ff817 	ldw	r4,-32(fp)
    ff44:	e13ff817 	ldw	r4,-32(fp)
    ff48:	2105883a 	add	r2,r4,r4
    ff4c:	1007883a 	mov	r3,r2
    ff50:	e0bfff17 	ldw	r2,-4(fp)
    ff54:	1885883a 	add	r2,r3,r2
    ff58:	e0fff917 	ldw	r3,-28(fp)
    ff5c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    ff60:	e0bff817 	ldw	r2,-32(fp)
    ff64:	10800044 	addi	r2,r2,1
    ff68:	e0bff815 	stw	r2,-32(fp)
    ff6c:	e0fffb17 	ldw	r3,-20(fp)
    ff70:	e13ff817 	ldw	r4,-32(fp)
    ff74:	193ff22e 	bgeu	r3,r4,ff40 <alt_up_pixel_buffer_dma_draw_hline+0x160>
    ff78:	00006906 	br	10120 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    ff7c:	e0bffc17 	ldw	r2,-16(fp)
    ff80:	e0bff815 	stw	r2,-32(fp)
    ff84:	00000c06 	br	ffb8 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    ff88:	e0fff817 	ldw	r3,-32(fp)
    ff8c:	e0fff817 	ldw	r3,-32(fp)
    ff90:	18c5883a 	add	r2,r3,r3
    ff94:	1085883a 	add	r2,r2,r2
    ff98:	1007883a 	mov	r3,r2
    ff9c:	e0bfff17 	ldw	r2,-4(fp)
    ffa0:	1885883a 	add	r2,r3,r2
    ffa4:	e0fff917 	ldw	r3,-28(fp)
    ffa8:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    ffac:	e13ff817 	ldw	r4,-32(fp)
    ffb0:	21000044 	addi	r4,r4,1
    ffb4:	e13ff815 	stw	r4,-32(fp)
    ffb8:	e0bffb17 	ldw	r2,-20(fp)
    ffbc:	e0fff817 	ldw	r3,-32(fp)
    ffc0:	10fff12e 	bgeu	r2,r3,ff88 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
    ffc4:	00005606 	br	10120 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    ffc8:	e0bff317 	ldw	r2,-52(fp)
    ffcc:	10800e17 	ldw	r2,56(r2)
    ffd0:	10800058 	cmpnei	r2,r2,1
    ffd4:	1000151e 	bne	r2,zero,1002c <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
    ffd8:	e13ffa17 	ldw	r4,-24(fp)
    ffdc:	e0fffe17 	ldw	r3,-8(fp)
    ffe0:	20c5383a 	mul	r2,r4,r3
    ffe4:	e13fff17 	ldw	r4,-4(fp)
    ffe8:	2089883a 	add	r4,r4,r2
    ffec:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
    fff0:	e0bffc17 	ldw	r2,-16(fp)
    fff4:	e0bff715 	stw	r2,-36(fp)
    fff8:	00000806 	br	1001c <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    fffc:	e0ffff17 	ldw	r3,-4(fp)
   10000:	e0bff717 	ldw	r2,-36(fp)
   10004:	1885883a 	add	r2,r3,r2
   10008:	e0fff917 	ldw	r3,-28(fp)
   1000c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10010:	e0fff717 	ldw	r3,-36(fp)
   10014:	18c00044 	addi	r3,r3,1
   10018:	e0fff715 	stw	r3,-36(fp)
   1001c:	e13ffb17 	ldw	r4,-20(fp)
   10020:	e0bff717 	ldw	r2,-36(fp)
   10024:	20bff52e 	bgeu	r4,r2,fffc <alt_up_pixel_buffer_dma_draw_hline+0x21c>
   10028:	00003d06 	br	10120 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1002c:	e0bff317 	ldw	r2,-52(fp)
   10030:	10800e17 	ldw	r2,56(r2)
   10034:	10800098 	cmpnei	r2,r2,2
   10038:	10001c1e 	bne	r2,zero,100ac <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
   1003c:	e0fffe17 	ldw	r3,-8(fp)
   10040:	e0fffe17 	ldw	r3,-8(fp)
   10044:	18c5883a 	add	r2,r3,r3
   10048:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   1004c:	e13ffa17 	ldw	r4,-24(fp)
   10050:	e0fffe17 	ldw	r3,-8(fp)
   10054:	20c5383a 	mul	r2,r4,r3
   10058:	e13fff17 	ldw	r4,-4(fp)
   1005c:	2089883a 	add	r4,r4,r2
   10060:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
   10064:	e0bffc17 	ldw	r2,-16(fp)
   10068:	e0bff715 	stw	r2,-36(fp)
   1006c:	00000b06 	br	1009c <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   10070:	e0fff717 	ldw	r3,-36(fp)
   10074:	e0fff717 	ldw	r3,-36(fp)
   10078:	18c5883a 	add	r2,r3,r3
   1007c:	1007883a 	mov	r3,r2
   10080:	e0bfff17 	ldw	r2,-4(fp)
   10084:	1885883a 	add	r2,r3,r2
   10088:	e0fff917 	ldw	r3,-28(fp)
   1008c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10090:	e13ff717 	ldw	r4,-36(fp)
   10094:	21000044 	addi	r4,r4,1
   10098:	e13ff715 	stw	r4,-36(fp)
   1009c:	e0bffb17 	ldw	r2,-20(fp)
   100a0:	e0fff717 	ldw	r3,-36(fp)
   100a4:	10fff22e 	bgeu	r2,r3,10070 <alt_up_pixel_buffer_dma_draw_hline+0x290>
   100a8:	00001d06 	br	10120 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
   100ac:	e13ffe17 	ldw	r4,-8(fp)
   100b0:	e13ffe17 	ldw	r4,-8(fp)
   100b4:	2105883a 	add	r2,r4,r4
   100b8:	1085883a 	add	r2,r2,r2
   100bc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
   100c0:	e0fffa17 	ldw	r3,-24(fp)
   100c4:	e13ffe17 	ldw	r4,-8(fp)
   100c8:	1905383a 	mul	r2,r3,r4
   100cc:	e0ffff17 	ldw	r3,-4(fp)
   100d0:	1887883a 	add	r3,r3,r2
   100d4:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
   100d8:	e13ffc17 	ldw	r4,-16(fp)
   100dc:	e13ff715 	stw	r4,-36(fp)
   100e0:	00000c06 	br	10114 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   100e4:	e0fff717 	ldw	r3,-36(fp)
   100e8:	e0fff717 	ldw	r3,-36(fp)
   100ec:	18c5883a 	add	r2,r3,r3
   100f0:	1085883a 	add	r2,r2,r2
   100f4:	1007883a 	mov	r3,r2
   100f8:	e0bfff17 	ldw	r2,-4(fp)
   100fc:	1885883a 	add	r2,r3,r2
   10100:	e0fff917 	ldw	r3,-28(fp)
   10104:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10108:	e13ff717 	ldw	r4,-36(fp)
   1010c:	21000044 	addi	r4,r4,1
   10110:	e13ff715 	stw	r4,-36(fp)
   10114:	e0bffb17 	ldw	r2,-20(fp)
   10118:	e0fff717 	ldw	r3,-36(fp)
   1011c:	10fff12e 	bgeu	r2,r3,100e4 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
   10120:	e037883a 	mov	sp,fp
   10124:	df000017 	ldw	fp,0(sp)
   10128:	dec00104 	addi	sp,sp,4
   1012c:	f800283a 	ret

00010130 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
   10130:	defff104 	addi	sp,sp,-60
   10134:	df000e15 	stw	fp,56(sp)
   10138:	df000e04 	addi	fp,sp,56
   1013c:	e13ff215 	stw	r4,-56(fp)
   10140:	e17ff315 	stw	r5,-52(fp)
   10144:	e1bff415 	stw	r6,-48(fp)
   10148:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   1014c:	e0bff217 	ldw	r2,-56(fp)
   10150:	10800f17 	ldw	r2,60(r2)
   10154:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10158:	e0bff217 	ldw	r2,-56(fp)
   1015c:	10801017 	ldw	r2,64(r2)
   10160:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
   10164:	e0bff317 	ldw	r2,-52(fp)
   10168:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
   1016c:	e0fff417 	ldw	r3,-48(fp)
   10170:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
   10174:	e13ff517 	ldw	r4,-44(fp)
   10178:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
   1017c:	e0800117 	ldw	r2,4(fp)
   10180:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
   10184:	e0fffa17 	ldw	r3,-24(fp)
   10188:	e13ffb17 	ldw	r4,-20(fp)
   1018c:	1900042e 	bgeu	r3,r4,101a0 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
   10190:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
   10194:	e0fffa17 	ldw	r3,-24(fp)
   10198:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
   1019c:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   101a0:	e13ffc17 	ldw	r4,-16(fp)
   101a4:	e0bffe17 	ldw	r2,-8(fp)
   101a8:	2080d12e 	bgeu	r4,r2,104f0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
   101ac:	e0fffb17 	ldw	r3,-20(fp)
   101b0:	e13ffd17 	ldw	r4,-12(fp)
   101b4:	19000136 	bltu	r3,r4,101bc <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
   101b8:	0000cd06 	br	104f0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   101bc:	e0bffa17 	ldw	r2,-24(fp)
   101c0:	e0fffd17 	ldw	r3,-12(fp)
   101c4:	10c00336 	bltu	r2,r3,101d4 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
   101c8:	e13ffd17 	ldw	r4,-12(fp)
   101cc:	213fffc4 	addi	r4,r4,-1
   101d0:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   101d4:	e0800217 	ldw	r2,8(fp)
   101d8:	10800058 	cmpnei	r2,r2,1
   101dc:	1000041e 	bne	r2,zero,101f0 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
   101e0:	e0bff217 	ldw	r2,-56(fp)
   101e4:	10800c17 	ldw	r2,48(r2)
   101e8:	e0bfff15 	stw	r2,-4(fp)
   101ec:	00000306 	br	101fc <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
   101f0:	e0bff217 	ldw	r2,-56(fp)
   101f4:	10800b17 	ldw	r2,44(r2)
   101f8:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   101fc:	e0bff217 	ldw	r2,-56(fp)
   10200:	10800d17 	ldw	r2,52(r2)
   10204:	1004c03a 	cmpne	r2,r2,zero
   10208:	1000571e 	bne	r2,zero,10368 <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   1020c:	e0bff217 	ldw	r2,-56(fp)
   10210:	10801317 	ldw	r2,76(r2)
   10214:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
   10218:	e0bff717 	ldw	r2,-36(fp)
   1021c:	e0fffb17 	ldw	r3,-20(fp)
   10220:	1884983a 	sll	r2,r3,r2
   10224:	e13fff17 	ldw	r4,-4(fp)
   10228:	2089883a 	add	r4,r4,r2
   1022c:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10230:	e0bff217 	ldw	r2,-56(fp)
   10234:	10800e17 	ldw	r2,56(r2)
   10238:	10800058 	cmpnei	r2,r2,1
   1023c:	1000151e 	bne	r2,zero,10294 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
   10240:	e0bffb17 	ldw	r2,-20(fp)
   10244:	e0bff815 	stw	r2,-32(fp)
   10248:	00000e06 	br	10284 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1024c:	e0ffff17 	ldw	r3,-4(fp)
   10250:	e0bffc17 	ldw	r2,-16(fp)
   10254:	1885883a 	add	r2,r3,r2
   10258:	e0fff917 	ldw	r3,-28(fp)
   1025c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
   10260:	e0fff717 	ldw	r3,-36(fp)
   10264:	00800044 	movi	r2,1
   10268:	10c4983a 	sll	r2,r2,r3
   1026c:	e0ffff17 	ldw	r3,-4(fp)
   10270:	1887883a 	add	r3,r3,r2
   10274:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10278:	e13ff817 	ldw	r4,-32(fp)
   1027c:	21000044 	addi	r4,r4,1
   10280:	e13ff815 	stw	r4,-32(fp)
   10284:	e0bffa17 	ldw	r2,-24(fp)
   10288:	e0fff817 	ldw	r3,-32(fp)
   1028c:	10ffef2e 	bgeu	r2,r3,1024c <alt_up_pixel_buffer_dma_draw_vline+0x11c>
   10290:	00009706 	br	104f0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10294:	e0bff217 	ldw	r2,-56(fp)
   10298:	10800e17 	ldw	r2,56(r2)
   1029c:	10800098 	cmpnei	r2,r2,2
   102a0:	1000181e 	bne	r2,zero,10304 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
   102a4:	e13ffb17 	ldw	r4,-20(fp)
   102a8:	e13ff815 	stw	r4,-32(fp)
   102ac:	00001106 	br	102f4 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   102b0:	e0fffc17 	ldw	r3,-16(fp)
   102b4:	e0fffc17 	ldw	r3,-16(fp)
   102b8:	18c5883a 	add	r2,r3,r3
   102bc:	1007883a 	mov	r3,r2
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	1885883a 	add	r2,r3,r2
   102c8:	e0fff917 	ldw	r3,-28(fp)
   102cc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
   102d0:	e0fff717 	ldw	r3,-36(fp)
   102d4:	00800044 	movi	r2,1
   102d8:	10c4983a 	sll	r2,r2,r3
   102dc:	e13fff17 	ldw	r4,-4(fp)
   102e0:	2089883a 	add	r4,r4,r2
   102e4:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   102e8:	e0bff817 	ldw	r2,-32(fp)
   102ec:	10800044 	addi	r2,r2,1
   102f0:	e0bff815 	stw	r2,-32(fp)
   102f4:	e0fffa17 	ldw	r3,-24(fp)
   102f8:	e13ff817 	ldw	r4,-32(fp)
   102fc:	193fec2e 	bgeu	r3,r4,102b0 <alt_up_pixel_buffer_dma_draw_vline+0x180>
   10300:	00007b06 	br	104f0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10304:	e0bffb17 	ldw	r2,-20(fp)
   10308:	e0bff815 	stw	r2,-32(fp)
   1030c:	00001206 	br	10358 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10310:	e0fffc17 	ldw	r3,-16(fp)
   10314:	e0fffc17 	ldw	r3,-16(fp)
   10318:	18c5883a 	add	r2,r3,r3
   1031c:	1085883a 	add	r2,r2,r2
   10320:	1007883a 	mov	r3,r2
   10324:	e0bfff17 	ldw	r2,-4(fp)
   10328:	1885883a 	add	r2,r3,r2
   1032c:	e0fff917 	ldw	r3,-28(fp)
   10330:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
   10334:	e0fff717 	ldw	r3,-36(fp)
   10338:	00800044 	movi	r2,1
   1033c:	10c4983a 	sll	r2,r2,r3
   10340:	e13fff17 	ldw	r4,-4(fp)
   10344:	2089883a 	add	r4,r4,r2
   10348:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1034c:	e0bff817 	ldw	r2,-32(fp)
   10350:	10800044 	addi	r2,r2,1
   10354:	e0bff815 	stw	r2,-32(fp)
   10358:	e0fffa17 	ldw	r3,-24(fp)
   1035c:	e13ff817 	ldw	r4,-32(fp)
   10360:	193feb2e 	bgeu	r3,r4,10310 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
   10364:	00006206 	br	104f0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10368:	e0bff217 	ldw	r2,-56(fp)
   1036c:	10800e17 	ldw	r2,56(r2)
   10370:	10800058 	cmpnei	r2,r2,1
   10374:	1000191e 	bne	r2,zero,103dc <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
   10378:	e0fffb17 	ldw	r3,-20(fp)
   1037c:	e13ffe17 	ldw	r4,-8(fp)
   10380:	1905383a 	mul	r2,r3,r4
   10384:	e0ffff17 	ldw	r3,-4(fp)
   10388:	1887883a 	add	r3,r3,r2
   1038c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10390:	e13ffb17 	ldw	r4,-20(fp)
   10394:	e13ff615 	stw	r4,-40(fp)
   10398:	00000c06 	br	103cc <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1039c:	e0ffff17 	ldw	r3,-4(fp)
   103a0:	e0bffc17 	ldw	r2,-16(fp)
   103a4:	1885883a 	add	r2,r3,r2
   103a8:	e0fff917 	ldw	r3,-28(fp)
   103ac:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
   103b0:	e0bfff17 	ldw	r2,-4(fp)
   103b4:	e0fffe17 	ldw	r3,-8(fp)
   103b8:	10c5883a 	add	r2,r2,r3
   103bc:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   103c0:	e13ff617 	ldw	r4,-40(fp)
   103c4:	21000044 	addi	r4,r4,1
   103c8:	e13ff615 	stw	r4,-40(fp)
   103cc:	e0bffa17 	ldw	r2,-24(fp)
   103d0:	e0fff617 	ldw	r3,-40(fp)
   103d4:	10fff12e 	bgeu	r2,r3,1039c <alt_up_pixel_buffer_dma_draw_vline+0x26c>
   103d8:	00004506 	br	104f0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   103dc:	e0bff217 	ldw	r2,-56(fp)
   103e0:	10800e17 	ldw	r2,56(r2)
   103e4:	10800098 	cmpnei	r2,r2,2
   103e8:	1000201e 	bne	r2,zero,1046c <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
   103ec:	e13ffe17 	ldw	r4,-8(fp)
   103f0:	e13ffe17 	ldw	r4,-8(fp)
   103f4:	2105883a 	add	r2,r4,r4
   103f8:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   103fc:	e0fffb17 	ldw	r3,-20(fp)
   10400:	e13ffe17 	ldw	r4,-8(fp)
   10404:	1905383a 	mul	r2,r3,r4
   10408:	e0ffff17 	ldw	r3,-4(fp)
   1040c:	1887883a 	add	r3,r3,r2
   10410:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10414:	e13ffb17 	ldw	r4,-20(fp)
   10418:	e13ff615 	stw	r4,-40(fp)
   1041c:	00000f06 	br	1045c <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10420:	e0fffc17 	ldw	r3,-16(fp)
   10424:	e0fffc17 	ldw	r3,-16(fp)
   10428:	18c5883a 	add	r2,r3,r3
   1042c:	1007883a 	mov	r3,r2
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	1885883a 	add	r2,r3,r2
   10438:	e0fff917 	ldw	r3,-28(fp)
   1043c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
   10440:	e13fff17 	ldw	r4,-4(fp)
   10444:	e0bffe17 	ldw	r2,-8(fp)
   10448:	2089883a 	add	r4,r4,r2
   1044c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10450:	e0fff617 	ldw	r3,-40(fp)
   10454:	18c00044 	addi	r3,r3,1
   10458:	e0fff615 	stw	r3,-40(fp)
   1045c:	e13ffa17 	ldw	r4,-24(fp)
   10460:	e0bff617 	ldw	r2,-40(fp)
   10464:	20bfee2e 	bgeu	r4,r2,10420 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
   10468:	00002106 	br	104f0 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1046c:	e0fffe17 	ldw	r3,-8(fp)
   10470:	e0fffe17 	ldw	r3,-8(fp)
   10474:	18c5883a 	add	r2,r3,r3
   10478:	1085883a 	add	r2,r2,r2
   1047c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
   10480:	e13ffb17 	ldw	r4,-20(fp)
   10484:	e0fffe17 	ldw	r3,-8(fp)
   10488:	20c5383a 	mul	r2,r4,r3
   1048c:	e13fff17 	ldw	r4,-4(fp)
   10490:	2089883a 	add	r4,r4,r2
   10494:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
   10498:	e0bffb17 	ldw	r2,-20(fp)
   1049c:	e0bff615 	stw	r2,-40(fp)
   104a0:	00001006 	br	104e4 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   104a4:	e0fffc17 	ldw	r3,-16(fp)
   104a8:	e0fffc17 	ldw	r3,-16(fp)
   104ac:	18c5883a 	add	r2,r3,r3
   104b0:	1085883a 	add	r2,r2,r2
   104b4:	1007883a 	mov	r3,r2
   104b8:	e0bfff17 	ldw	r2,-4(fp)
   104bc:	1885883a 	add	r2,r3,r2
   104c0:	e0fff917 	ldw	r3,-28(fp)
   104c4:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
   104c8:	e13fff17 	ldw	r4,-4(fp)
   104cc:	e0bffe17 	ldw	r2,-8(fp)
   104d0:	2089883a 	add	r4,r4,r2
   104d4:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   104d8:	e0fff617 	ldw	r3,-40(fp)
   104dc:	18c00044 	addi	r3,r3,1
   104e0:	e0fff615 	stw	r3,-40(fp)
   104e4:	e13ffa17 	ldw	r4,-24(fp)
   104e8:	e0bff617 	ldw	r2,-40(fp)
   104ec:	20bfed2e 	bgeu	r4,r2,104a4 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
   104f0:	e037883a 	mov	sp,fp
   104f4:	df000017 	ldw	fp,0(sp)
   104f8:	dec00104 	addi	sp,sp,4
   104fc:	f800283a 	ret

00010500 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   10500:	defff804 	addi	sp,sp,-32
   10504:	dfc00715 	stw	ra,28(sp)
   10508:	df000615 	stw	fp,24(sp)
   1050c:	df000604 	addi	fp,sp,24
   10510:	e13ffc15 	stw	r4,-16(fp)
   10514:	e17ffd15 	stw	r5,-12(fp)
   10518:	e1bffe15 	stw	r6,-8(fp)
   1051c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   10520:	e0800317 	ldw	r2,12(fp)
   10524:	d8800015 	stw	r2,0(sp)
   10528:	e0800417 	ldw	r2,16(fp)
   1052c:	d8800115 	stw	r2,4(sp)
   10530:	e13ffc17 	ldw	r4,-16(fp)
   10534:	e17ffd17 	ldw	r5,-12(fp)
   10538:	e1bfff17 	ldw	r6,-4(fp)
   1053c:	e1fffe17 	ldw	r7,-8(fp)
   10540:	000fde00 	call	fde0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   10544:	e0800317 	ldw	r2,12(fp)
   10548:	d8800015 	stw	r2,0(sp)
   1054c:	e0800417 	ldw	r2,16(fp)
   10550:	d8800115 	stw	r2,4(sp)
   10554:	e13ffc17 	ldw	r4,-16(fp)
   10558:	e17ffd17 	ldw	r5,-12(fp)
   1055c:	e1bfff17 	ldw	r6,-4(fp)
   10560:	e1c00217 	ldw	r7,8(fp)
   10564:	000fde00 	call	fde0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   10568:	e0800317 	ldw	r2,12(fp)
   1056c:	d8800015 	stw	r2,0(sp)
   10570:	e0800417 	ldw	r2,16(fp)
   10574:	d8800115 	stw	r2,4(sp)
   10578:	e13ffc17 	ldw	r4,-16(fp)
   1057c:	e17ffd17 	ldw	r5,-12(fp)
   10580:	e1bffe17 	ldw	r6,-8(fp)
   10584:	e1c00217 	ldw	r7,8(fp)
   10588:	00101300 	call	10130 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   1058c:	e0800317 	ldw	r2,12(fp)
   10590:	d8800015 	stw	r2,0(sp)
   10594:	e0800417 	ldw	r2,16(fp)
   10598:	d8800115 	stw	r2,4(sp)
   1059c:	e13ffc17 	ldw	r4,-16(fp)
   105a0:	e17fff17 	ldw	r5,-4(fp)
   105a4:	e1bffe17 	ldw	r6,-8(fp)
   105a8:	e1c00217 	ldw	r7,8(fp)
   105ac:	00101300 	call	10130 <alt_up_pixel_buffer_dma_draw_vline>
}
   105b0:	e037883a 	mov	sp,fp
   105b4:	dfc00117 	ldw	ra,4(sp)
   105b8:	df000017 	ldw	fp,0(sp)
   105bc:	dec00204 	addi	sp,sp,8
   105c0:	f800283a 	ret

000105c4 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   105c4:	defffb04 	addi	sp,sp,-20
   105c8:	df000415 	stw	fp,16(sp)
   105cc:	df000404 	addi	fp,sp,16
   105d0:	e13ffc15 	stw	r4,-16(fp)
   105d4:	e17ffd15 	stw	r5,-12(fp)
   105d8:	e1bffe15 	stw	r6,-8(fp)
   105dc:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
   105e0:	e0c00217 	ldw	r3,8(fp)
   105e4:	1804c03a 	cmpne	r2,r3,zero
   105e8:	10000b1e 	bne	r2,zero,10618 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   105ec:	e13ffd17 	ldw	r4,-12(fp)
   105f0:	e0ffff17 	ldw	r3,-4(fp)
   105f4:	20c5383a 	mul	r2,r4,r3
   105f8:	e13ffe17 	ldw	r4,-8(fp)
   105fc:	1105883a 	add	r2,r2,r4
   10600:	1007883a 	mov	r3,r2
   10604:	e0bffc17 	ldw	r2,-16(fp)
   10608:	1885883a 	add	r2,r3,r2
   1060c:	e0c00117 	ldw	r3,4(fp)
   10610:	10c00025 	stbio	r3,0(r2)
   10614:	00001b06 	br	10684 <helper_plot_pixel+0xc0>
	else if (mode == 1)
   10618:	e1000217 	ldw	r4,8(fp)
   1061c:	20800058 	cmpnei	r2,r4,1
   10620:	10000c1e 	bne	r2,zero,10654 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   10624:	e0fffd17 	ldw	r3,-12(fp)
   10628:	e13fff17 	ldw	r4,-4(fp)
   1062c:	1905383a 	mul	r2,r3,r4
   10630:	e0fffe17 	ldw	r3,-8(fp)
   10634:	10c5883a 	add	r2,r2,r3
   10638:	1085883a 	add	r2,r2,r2
   1063c:	1007883a 	mov	r3,r2
   10640:	e0bffc17 	ldw	r2,-16(fp)
   10644:	1885883a 	add	r2,r3,r2
   10648:	e1000117 	ldw	r4,4(fp)
   1064c:	1100002d 	sthio	r4,0(r2)
   10650:	00000c06 	br	10684 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   10654:	e0fffd17 	ldw	r3,-12(fp)
   10658:	e13fff17 	ldw	r4,-4(fp)
   1065c:	1905383a 	mul	r2,r3,r4
   10660:	e0fffe17 	ldw	r3,-8(fp)
   10664:	10c5883a 	add	r2,r2,r3
   10668:	1085883a 	add	r2,r2,r2
   1066c:	1085883a 	add	r2,r2,r2
   10670:	1007883a 	mov	r3,r2
   10674:	e0bffc17 	ldw	r2,-16(fp)
   10678:	1885883a 	add	r2,r3,r2
   1067c:	e1000117 	ldw	r4,4(fp)
   10680:	11000035 	stwio	r4,0(r2)
}
   10684:	e037883a 	mov	sp,fp
   10688:	df000017 	ldw	fp,0(sp)
   1068c:	dec00104 	addi	sp,sp,4
   10690:	f800283a 	ret

00010694 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   10694:	deffe404 	addi	sp,sp,-112
   10698:	dfc01b15 	stw	ra,108(sp)
   1069c:	df001a15 	stw	fp,104(sp)
   106a0:	df001a04 	addi	fp,sp,104
   106a4:	e13fe815 	stw	r4,-96(fp)
   106a8:	e17fe915 	stw	r5,-92(fp)
   106ac:	e1bfea15 	stw	r6,-88(fp)
   106b0:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
   106b4:	e0bfe917 	ldw	r2,-92(fp)
   106b8:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
   106bc:	e0ffea17 	ldw	r3,-88(fp)
   106c0:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
   106c4:	e13feb17 	ldw	r4,-84(fp)
   106c8:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
   106cc:	e0800217 	ldw	r2,8(fp)
   106d0:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   106d4:	e0fff717 	ldw	r3,-36(fp)
   106d8:	e13ff917 	ldw	r4,-28(fp)
   106dc:	1905c83a 	sub	r2,r3,r4
   106e0:	e0bfff15 	stw	r2,-4(fp)
   106e4:	e0ffff17 	ldw	r3,-4(fp)
   106e8:	1804403a 	cmpge	r2,r3,zero
   106ec:	1000031e 	bne	r2,zero,106fc <alt_up_pixel_buffer_dma_draw_line+0x68>
   106f0:	e13fff17 	ldw	r4,-4(fp)
   106f4:	0109c83a 	sub	r4,zero,r4
   106f8:	e13fff15 	stw	r4,-4(fp)
   106fc:	e0fff817 	ldw	r3,-32(fp)
   10700:	e13ffa17 	ldw	r4,-24(fp)
   10704:	1905c83a 	sub	r2,r3,r4
   10708:	e0bffe15 	stw	r2,-8(fp)
   1070c:	e0fffe17 	ldw	r3,-8(fp)
   10710:	1804403a 	cmpge	r2,r3,zero
   10714:	1000031e 	bne	r2,zero,10724 <alt_up_pixel_buffer_dma_draw_line+0x90>
   10718:	e13ffe17 	ldw	r4,-8(fp)
   1071c:	0109c83a 	sub	r4,zero,r4
   10720:	e13ffe15 	stw	r4,-8(fp)
   10724:	e0fffe17 	ldw	r3,-8(fp)
   10728:	e13fff17 	ldw	r4,-4(fp)
   1072c:	1904803a 	cmplt	r2,r3,r4
   10730:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   10734:	e0bfe817 	ldw	r2,-96(fp)
   10738:	10800e17 	ldw	r2,56(r2)
   1073c:	10800060 	cmpeqi	r2,r2,1
   10740:	10000c1e 	bne	r2,zero,10774 <alt_up_pixel_buffer_dma_draw_line+0xe0>
   10744:	e0bfe817 	ldw	r2,-96(fp)
   10748:	10800e17 	ldw	r2,56(r2)
   1074c:	10800098 	cmpnei	r2,r2,2
   10750:	1000031e 	bne	r2,zero,10760 <alt_up_pixel_buffer_dma_draw_line+0xcc>
   10754:	00800044 	movi	r2,1
   10758:	e0bffc15 	stw	r2,-16(fp)
   1075c:	00000206 	br	10768 <alt_up_pixel_buffer_dma_draw_line+0xd4>
   10760:	00c00084 	movi	r3,2
   10764:	e0fffc15 	stw	r3,-16(fp)
   10768:	e13ffc17 	ldw	r4,-16(fp)
   1076c:	e13ffd15 	stw	r4,-12(fp)
   10770:	00000106 	br	10778 <alt_up_pixel_buffer_dma_draw_line+0xe4>
   10774:	e03ffd15 	stw	zero,-12(fp)
   10778:	e0bffd17 	ldw	r2,-12(fp)
   1077c:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
   10780:	e0c00317 	ldw	r3,12(fp)
   10784:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   10788:	e0bfe817 	ldw	r2,-96(fp)
   1078c:	10800d17 	ldw	r2,52(r2)
   10790:	1004c03a 	cmpne	r2,r2,zero
   10794:	1000091e 	bne	r2,zero,107bc <alt_up_pixel_buffer_dma_draw_line+0x128>
   10798:	e0bfe817 	ldw	r2,-96(fp)
   1079c:	10c01317 	ldw	r3,76(r2)
   107a0:	e0bfef17 	ldw	r2,-68(fp)
   107a4:	1885c83a 	sub	r2,r3,r2
   107a8:	1007883a 	mov	r3,r2
   107ac:	00800044 	movi	r2,1
   107b0:	10c4983a 	sll	r2,r2,r3
   107b4:	e0bffb15 	stw	r2,-20(fp)
   107b8:	00000306 	br	107c8 <alt_up_pixel_buffer_dma_draw_line+0x134>
   107bc:	e0bfe817 	ldw	r2,-96(fp)
   107c0:	10800f17 	ldw	r2,60(r2)
   107c4:	e0bffb15 	stw	r2,-20(fp)
   107c8:	e13ffb17 	ldw	r4,-20(fp)
   107cc:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
   107d0:	e0800417 	ldw	r2,16(fp)
   107d4:	10800058 	cmpnei	r2,r2,1
   107d8:	1000041e 	bne	r2,zero,107ec <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
   107dc:	e0bfe817 	ldw	r2,-96(fp)
   107e0:	10800c17 	ldw	r2,48(r2)
   107e4:	e0bfed15 	stw	r2,-76(fp)
   107e8:	00000306 	br	107f8 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   107ec:	e0bfe817 	ldw	r2,-96(fp)
   107f0:	10800b17 	ldw	r2,44(r2)
   107f4:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
   107f8:	e0fff603 	ldbu	r3,-40(fp)
   107fc:	18803fcc 	andi	r2,r3,255
   10800:	1080201c 	xori	r2,r2,128
   10804:	10bfe004 	addi	r2,r2,-128
   10808:	10800050 	cmplti	r2,r2,1
   1080c:	10000c1e 	bne	r2,zero,10840 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
   10810:	e13ffa17 	ldw	r4,-24(fp)
   10814:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
   10818:	e0bff917 	ldw	r2,-28(fp)
   1081c:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
   10820:	e0fff317 	ldw	r3,-52(fp)
   10824:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
   10828:	e13ff817 	ldw	r4,-32(fp)
   1082c:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
   10830:	e0bff717 	ldw	r2,-36(fp)
   10834:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
   10838:	e0fff317 	ldw	r3,-52(fp)
   1083c:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
   10840:	e13ff817 	ldw	r4,-32(fp)
   10844:	e0bffa17 	ldw	r2,-24(fp)
   10848:	20800c0e 	bge	r4,r2,1087c <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
   1084c:	e0fffa17 	ldw	r3,-24(fp)
   10850:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
   10854:	e13ff817 	ldw	r4,-32(fp)
   10858:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
   1085c:	e0bff317 	ldw	r2,-52(fp)
   10860:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
   10864:	e0fff917 	ldw	r3,-28(fp)
   10868:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
   1086c:	e13ff717 	ldw	r4,-36(fp)
   10870:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
   10874:	e0bff317 	ldw	r2,-52(fp)
   10878:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   1087c:	e0fff817 	ldw	r3,-32(fp)
   10880:	e13ffa17 	ldw	r4,-24(fp)
   10884:	1907c83a 	sub	r3,r3,r4
   10888:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
   1088c:	e0fff717 	ldw	r3,-36(fp)
   10890:	e13ff917 	ldw	r4,-28(fp)
   10894:	1905c83a 	sub	r2,r3,r4
   10898:	e0bff415 	stw	r2,-48(fp)
   1089c:	e0fff417 	ldw	r3,-48(fp)
   108a0:	1804403a 	cmpge	r2,r3,zero
   108a4:	1000031e 	bne	r2,zero,108b4 <alt_up_pixel_buffer_dma_draw_line+0x220>
   108a8:	e13ff417 	ldw	r4,-48(fp)
   108ac:	0109c83a 	sub	r4,zero,r4
   108b0:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
   108b4:	e0fff517 	ldw	r3,-44(fp)
   108b8:	1804d7fa 	srli	r2,r3,31
   108bc:	e13ff517 	ldw	r4,-44(fp)
   108c0:	1105883a 	add	r2,r2,r4
   108c4:	1005d07a 	srai	r2,r2,1
   108c8:	0085c83a 	sub	r2,zero,r2
   108cc:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
   108d0:	e0bff917 	ldw	r2,-28(fp)
   108d4:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
   108d8:	e0fff917 	ldw	r3,-28(fp)
   108dc:	e13ff717 	ldw	r4,-36(fp)
   108e0:	1900030e 	bge	r3,r4,108f0 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
   108e4:	00800044 	movi	r2,1
   108e8:	e0bff215 	stw	r2,-56(fp)
   108ec:	00000206 	br	108f8 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
   108f0:	00ffffc4 	movi	r3,-1
   108f4:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   108f8:	e13ff603 	ldbu	r4,-40(fp)
   108fc:	20803fcc 	andi	r2,r4,255
   10900:	1080201c 	xori	r2,r2,128
   10904:	10bfe004 	addi	r2,r2,-128
   10908:	10800058 	cmpnei	r2,r2,1
   1090c:	1000221e 	bne	r2,zero,10998 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
   10910:	e0bffa17 	ldw	r2,-24(fp)
   10914:	e0bff115 	stw	r2,-60(fp)
   10918:	00001b06 	br	10988 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   1091c:	e0ffee17 	ldw	r3,-72(fp)
   10920:	d8c00015 	stw	r3,0(sp)
   10924:	e13fef17 	ldw	r4,-68(fp)
   10928:	d9000115 	stw	r4,4(sp)
   1092c:	e13fed17 	ldw	r4,-76(fp)
   10930:	e17fec17 	ldw	r5,-80(fp)
   10934:	e1bff017 	ldw	r6,-64(fp)
   10938:	e1fff117 	ldw	r7,-60(fp)
   1093c:	00105c40 	call	105c4 <helper_plot_pixel>
			error = error + deltay;
   10940:	e0bff317 	ldw	r2,-52(fp)
   10944:	e0fff417 	ldw	r3,-48(fp)
   10948:	10c5883a 	add	r2,r2,r3
   1094c:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
   10950:	e13ff317 	ldw	r4,-52(fp)
   10954:	20800050 	cmplti	r2,r4,1
   10958:	1000081e 	bne	r2,zero,1097c <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
   1095c:	e0bff017 	ldw	r2,-64(fp)
   10960:	e0fff217 	ldw	r3,-56(fp)
   10964:	10c5883a 	add	r2,r2,r3
   10968:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
   1096c:	e13ff317 	ldw	r4,-52(fp)
   10970:	e0bff517 	ldw	r2,-44(fp)
   10974:	2089c83a 	sub	r4,r4,r2
   10978:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   1097c:	e0fff117 	ldw	r3,-60(fp)
   10980:	18c00044 	addi	r3,r3,1
   10984:	e0fff115 	stw	r3,-60(fp)
   10988:	e13ff817 	ldw	r4,-32(fp)
   1098c:	e0bff117 	ldw	r2,-60(fp)
   10990:	20bfe20e 	bge	r4,r2,1091c <alt_up_pixel_buffer_dma_draw_line+0x288>
   10994:	00002106 	br	10a1c <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10998:	e0fffa17 	ldw	r3,-24(fp)
   1099c:	e0fff115 	stw	r3,-60(fp)
   109a0:	00001b06 	br	10a10 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   109a4:	e13fee17 	ldw	r4,-72(fp)
   109a8:	d9000015 	stw	r4,0(sp)
   109ac:	e0bfef17 	ldw	r2,-68(fp)
   109b0:	d8800115 	stw	r2,4(sp)
   109b4:	e13fed17 	ldw	r4,-76(fp)
   109b8:	e17fec17 	ldw	r5,-80(fp)
   109bc:	e1bff117 	ldw	r6,-60(fp)
   109c0:	e1fff017 	ldw	r7,-64(fp)
   109c4:	00105c40 	call	105c4 <helper_plot_pixel>
			error = error + deltay;
   109c8:	e0fff317 	ldw	r3,-52(fp)
   109cc:	e13ff417 	ldw	r4,-48(fp)
   109d0:	1907883a 	add	r3,r3,r4
   109d4:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
   109d8:	e0fff317 	ldw	r3,-52(fp)
   109dc:	18800050 	cmplti	r2,r3,1
   109e0:	1000081e 	bne	r2,zero,10a04 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
   109e4:	e13ff017 	ldw	r4,-64(fp)
   109e8:	e0bff217 	ldw	r2,-56(fp)
   109ec:	2089883a 	add	r4,r4,r2
   109f0:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
   109f4:	e0fff317 	ldw	r3,-52(fp)
   109f8:	e13ff517 	ldw	r4,-44(fp)
   109fc:	1907c83a 	sub	r3,r3,r4
   10a00:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10a04:	e0bff117 	ldw	r2,-60(fp)
   10a08:	10800044 	addi	r2,r2,1
   10a0c:	e0bff115 	stw	r2,-60(fp)
   10a10:	e0fff817 	ldw	r3,-32(fp)
   10a14:	e13ff117 	ldw	r4,-60(fp)
   10a18:	193fe20e 	bge	r3,r4,109a4 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   10a1c:	e037883a 	mov	sp,fp
   10a20:	dfc00117 	ldw	ra,4(sp)
   10a24:	df000017 	ldw	fp,0(sp)
   10a28:	dec00204 	addi	sp,sp,8
   10a2c:	f800283a 	ret

00010a30 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10a30:	defff404 	addi	sp,sp,-48
   10a34:	df000b15 	stw	fp,44(sp)
   10a38:	df000b04 	addi	fp,sp,44
   10a3c:	e13ffb15 	stw	r4,-20(fp)
   10a40:	e17ffc15 	stw	r5,-16(fp)
   10a44:	e1bffd15 	stw	r6,-12(fp)
   10a48:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10a4c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10a50:	00800074 	movhi	r2,1
   10a54:	10998104 	addi	r2,r2,26116
   10a58:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10a5c:	1005003a 	cmpeq	r2,r2,zero
   10a60:	1000411e 	bne	r2,zero,10b68 <alt_alarm_start+0x138>
  {
    if (alarm)
   10a64:	e0bffb17 	ldw	r2,-20(fp)
   10a68:	1005003a 	cmpeq	r2,r2,zero
   10a6c:	10003b1e 	bne	r2,zero,10b5c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   10a70:	e0fffb17 	ldw	r3,-20(fp)
   10a74:	e0bffd17 	ldw	r2,-12(fp)
   10a78:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   10a7c:	e0fffb17 	ldw	r3,-20(fp)
   10a80:	e0bffe17 	ldw	r2,-8(fp)
   10a84:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a88:	0005303a 	rdctl	r2,status
   10a8c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a90:	e0fff817 	ldw	r3,-32(fp)
   10a94:	00bfff84 	movi	r2,-2
   10a98:	1884703a 	and	r2,r3,r2
   10a9c:	1001703a 	wrctl	status,r2
  
  return context;
   10aa0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10aa4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10aa8:	00800074 	movhi	r2,1
   10aac:	10998204 	addi	r2,r2,26120
   10ab0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10ab4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10ab8:	e0fffc17 	ldw	r3,-16(fp)
   10abc:	e0bff917 	ldw	r2,-28(fp)
   10ac0:	1885883a 	add	r2,r3,r2
   10ac4:	10c00044 	addi	r3,r2,1
   10ac8:	e0bffb17 	ldw	r2,-20(fp)
   10acc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10ad0:	e0bffb17 	ldw	r2,-20(fp)
   10ad4:	10c00217 	ldw	r3,8(r2)
   10ad8:	e0bff917 	ldw	r2,-28(fp)
   10adc:	1880042e 	bgeu	r3,r2,10af0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   10ae0:	e0fffb17 	ldw	r3,-20(fp)
   10ae4:	00800044 	movi	r2,1
   10ae8:	18800405 	stb	r2,16(r3)
   10aec:	00000206 	br	10af8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   10af0:	e0bffb17 	ldw	r2,-20(fp)
   10af4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10af8:	e0fffb17 	ldw	r3,-20(fp)
   10afc:	00800074 	movhi	r2,1
   10b00:	1091a904 	addi	r2,r2,18084
   10b04:	e0bff615 	stw	r2,-40(fp)
   10b08:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b0c:	e0fff717 	ldw	r3,-36(fp)
   10b10:	e0bff617 	ldw	r2,-40(fp)
   10b14:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10b18:	e0bff617 	ldw	r2,-40(fp)
   10b1c:	10c00017 	ldw	r3,0(r2)
   10b20:	e0bff717 	ldw	r2,-36(fp)
   10b24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10b28:	e0bff617 	ldw	r2,-40(fp)
   10b2c:	10c00017 	ldw	r3,0(r2)
   10b30:	e0bff717 	ldw	r2,-36(fp)
   10b34:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10b38:	e0fff617 	ldw	r3,-40(fp)
   10b3c:	e0bff717 	ldw	r2,-36(fp)
   10b40:	18800015 	stw	r2,0(r3)
   10b44:	e0bffa17 	ldw	r2,-24(fp)
   10b48:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b4c:	e0bff517 	ldw	r2,-44(fp)
   10b50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10b54:	e03fff15 	stw	zero,-4(fp)
   10b58:	00000506 	br	10b70 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   10b5c:	00bffa84 	movi	r2,-22
   10b60:	e0bfff15 	stw	r2,-4(fp)
   10b64:	00000206 	br	10b70 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   10b68:	00bfde84 	movi	r2,-134
   10b6c:	e0bfff15 	stw	r2,-4(fp)
   10b70:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   10b74:	e037883a 	mov	sp,fp
   10b78:	df000017 	ldw	fp,0(sp)
   10b7c:	dec00104 	addi	sp,sp,4
   10b80:	f800283a 	ret

00010b84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10b84:	deffff04 	addi	sp,sp,-4
   10b88:	df000015 	stw	fp,0(sp)
   10b8c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10b90:	e037883a 	mov	sp,fp
   10b94:	df000017 	ldw	fp,0(sp)
   10b98:	dec00104 	addi	sp,sp,4
   10b9c:	f800283a 	ret

00010ba0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10ba0:	defff904 	addi	sp,sp,-28
   10ba4:	dfc00615 	stw	ra,24(sp)
   10ba8:	df000515 	stw	fp,20(sp)
   10bac:	df000504 	addi	fp,sp,20
   10bb0:	e13ffd15 	stw	r4,-12(fp)
   10bb4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10bb8:	e0bffd17 	ldw	r2,-12(fp)
   10bbc:	1005003a 	cmpeq	r2,r2,zero
   10bc0:	1000041e 	bne	r2,zero,10bd4 <alt_dev_llist_insert+0x34>
   10bc4:	e0bffd17 	ldw	r2,-12(fp)
   10bc8:	10800217 	ldw	r2,8(r2)
   10bcc:	1004c03a 	cmpne	r2,r2,zero
   10bd0:	1000071e 	bne	r2,zero,10bf0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   10bd4:	0010c540 	call	10c54 <alt_get_errno>
   10bd8:	1007883a 	mov	r3,r2
   10bdc:	00800584 	movi	r2,22
   10be0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10be4:	00bffa84 	movi	r2,-22
   10be8:	e0bfff15 	stw	r2,-4(fp)
   10bec:	00001306 	br	10c3c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10bf0:	e0fffd17 	ldw	r3,-12(fp)
   10bf4:	e0bffe17 	ldw	r2,-8(fp)
   10bf8:	e0bffb15 	stw	r2,-20(fp)
   10bfc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10c00:	e0fffc17 	ldw	r3,-16(fp)
   10c04:	e0bffb17 	ldw	r2,-20(fp)
   10c08:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10c0c:	e0bffb17 	ldw	r2,-20(fp)
   10c10:	10c00017 	ldw	r3,0(r2)
   10c14:	e0bffc17 	ldw	r2,-16(fp)
   10c18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10c1c:	e0bffb17 	ldw	r2,-20(fp)
   10c20:	10c00017 	ldw	r3,0(r2)
   10c24:	e0bffc17 	ldw	r2,-16(fp)
   10c28:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10c2c:	e0fffb17 	ldw	r3,-20(fp)
   10c30:	e0bffc17 	ldw	r2,-16(fp)
   10c34:	18800015 	stw	r2,0(r3)

  return 0;  
   10c38:	e03fff15 	stw	zero,-4(fp)
   10c3c:	e0bfff17 	ldw	r2,-4(fp)
}
   10c40:	e037883a 	mov	sp,fp
   10c44:	dfc00117 	ldw	ra,4(sp)
   10c48:	df000017 	ldw	fp,0(sp)
   10c4c:	dec00204 	addi	sp,sp,8
   10c50:	f800283a 	ret

00010c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10c54:	defffd04 	addi	sp,sp,-12
   10c58:	dfc00215 	stw	ra,8(sp)
   10c5c:	df000115 	stw	fp,4(sp)
   10c60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10c64:	00800074 	movhi	r2,1
   10c68:	1091a604 	addi	r2,r2,18072
   10c6c:	10800017 	ldw	r2,0(r2)
   10c70:	1005003a 	cmpeq	r2,r2,zero
   10c74:	1000061e 	bne	r2,zero,10c90 <alt_get_errno+0x3c>
   10c78:	00800074 	movhi	r2,1
   10c7c:	1091a604 	addi	r2,r2,18072
   10c80:	10800017 	ldw	r2,0(r2)
   10c84:	103ee83a 	callr	r2
   10c88:	e0bfff15 	stw	r2,-4(fp)
   10c8c:	00000306 	br	10c9c <alt_get_errno+0x48>
   10c90:	00800074 	movhi	r2,1
   10c94:	10997c04 	addi	r2,r2,26096
   10c98:	e0bfff15 	stw	r2,-4(fp)
   10c9c:	e0bfff17 	ldw	r2,-4(fp)
}
   10ca0:	e037883a 	mov	sp,fp
   10ca4:	dfc00117 	ldw	ra,4(sp)
   10ca8:	df000017 	ldw	fp,0(sp)
   10cac:	dec00204 	addi	sp,sp,8
   10cb0:	f800283a 	ret

00010cb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10cb4:	defffd04 	addi	sp,sp,-12
   10cb8:	dfc00215 	stw	ra,8(sp)
   10cbc:	df000115 	stw	fp,4(sp)
   10cc0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10cc4:	00bfff04 	movi	r2,-4
   10cc8:	00c00074 	movhi	r3,1
   10ccc:	18c7c304 	addi	r3,r3,7948
   10cd0:	1885883a 	add	r2,r3,r2
   10cd4:	e0bfff15 	stw	r2,-4(fp)
   10cd8:	00000606 	br	10cf4 <_do_ctors+0x40>
        (*ctor) (); 
   10cdc:	e0bfff17 	ldw	r2,-4(fp)
   10ce0:	10800017 	ldw	r2,0(r2)
   10ce4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10ce8:	e0bfff17 	ldw	r2,-4(fp)
   10cec:	10bfff04 	addi	r2,r2,-4
   10cf0:	e0bfff15 	stw	r2,-4(fp)
   10cf4:	e0ffff17 	ldw	r3,-4(fp)
   10cf8:	00800074 	movhi	r2,1
   10cfc:	1087c204 	addi	r2,r2,7944
   10d00:	18bff62e 	bgeu	r3,r2,10cdc <_do_ctors+0x28>
        (*ctor) (); 
}
   10d04:	e037883a 	mov	sp,fp
   10d08:	dfc00117 	ldw	ra,4(sp)
   10d0c:	df000017 	ldw	fp,0(sp)
   10d10:	dec00204 	addi	sp,sp,8
   10d14:	f800283a 	ret

00010d18 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10d18:	defffd04 	addi	sp,sp,-12
   10d1c:	dfc00215 	stw	ra,8(sp)
   10d20:	df000115 	stw	fp,4(sp)
   10d24:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10d28:	00bfff04 	movi	r2,-4
   10d2c:	00c00074 	movhi	r3,1
   10d30:	18c7c304 	addi	r3,r3,7948
   10d34:	1885883a 	add	r2,r3,r2
   10d38:	e0bfff15 	stw	r2,-4(fp)
   10d3c:	00000606 	br	10d58 <_do_dtors+0x40>
        (*dtor) (); 
   10d40:	e0bfff17 	ldw	r2,-4(fp)
   10d44:	10800017 	ldw	r2,0(r2)
   10d48:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10d4c:	e0bfff17 	ldw	r2,-4(fp)
   10d50:	10bfff04 	addi	r2,r2,-4
   10d54:	e0bfff15 	stw	r2,-4(fp)
   10d58:	e0ffff17 	ldw	r3,-4(fp)
   10d5c:	00800074 	movhi	r2,1
   10d60:	1087c304 	addi	r2,r2,7948
   10d64:	18bff62e 	bgeu	r3,r2,10d40 <_do_dtors+0x28>
        (*dtor) (); 
}
   10d68:	e037883a 	mov	sp,fp
   10d6c:	dfc00117 	ldw	ra,4(sp)
   10d70:	df000017 	ldw	fp,0(sp)
   10d74:	dec00204 	addi	sp,sp,8
   10d78:	f800283a 	ret

00010d7c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10d7c:	defff904 	addi	sp,sp,-28
   10d80:	dfc00615 	stw	ra,24(sp)
   10d84:	df000515 	stw	fp,20(sp)
   10d88:	df000504 	addi	fp,sp,20
   10d8c:	e13ffd15 	stw	r4,-12(fp)
   10d90:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10d94:	e0bffe17 	ldw	r2,-8(fp)
   10d98:	10800017 	ldw	r2,0(r2)
   10d9c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10da0:	e13ffd17 	ldw	r4,-12(fp)
   10da4:	0008a100 	call	8a10 <strlen>
   10da8:	10800044 	addi	r2,r2,1
   10dac:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10db0:	00000d06 	br	10de8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10db4:	e0bffc17 	ldw	r2,-16(fp)
   10db8:	11000217 	ldw	r4,8(r2)
   10dbc:	e1bffb17 	ldw	r6,-20(fp)
   10dc0:	e17ffd17 	ldw	r5,-12(fp)
   10dc4:	00118140 	call	11814 <memcmp>
   10dc8:	1004c03a 	cmpne	r2,r2,zero
   10dcc:	1000031e 	bne	r2,zero,10ddc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10dd0:	e0bffc17 	ldw	r2,-16(fp)
   10dd4:	e0bfff15 	stw	r2,-4(fp)
   10dd8:	00000706 	br	10df8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10ddc:	e0bffc17 	ldw	r2,-16(fp)
   10de0:	10800017 	ldw	r2,0(r2)
   10de4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10de8:	e0fffe17 	ldw	r3,-8(fp)
   10dec:	e0bffc17 	ldw	r2,-16(fp)
   10df0:	10fff01e 	bne	r2,r3,10db4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10df4:	e03fff15 	stw	zero,-4(fp)
   10df8:	e0bfff17 	ldw	r2,-4(fp)
}
   10dfc:	e037883a 	mov	sp,fp
   10e00:	dfc00117 	ldw	ra,4(sp)
   10e04:	df000017 	ldw	fp,0(sp)
   10e08:	dec00204 	addi	sp,sp,8
   10e0c:	f800283a 	ret

00010e10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10e10:	defffe04 	addi	sp,sp,-8
   10e14:	dfc00115 	stw	ra,4(sp)
   10e18:	df000015 	stw	fp,0(sp)
   10e1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10e20:	0009883a 	mov	r4,zero
   10e24:	01440004 	movi	r5,4096
   10e28:	00117380 	call	11738 <alt_icache_flush>
#endif
}
   10e2c:	e037883a 	mov	sp,fp
   10e30:	dfc00117 	ldw	ra,4(sp)
   10e34:	df000017 	ldw	fp,0(sp)
   10e38:	dec00204 	addi	sp,sp,8
   10e3c:	f800283a 	ret

00010e40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10e40:	defff904 	addi	sp,sp,-28
   10e44:	dfc00615 	stw	ra,24(sp)
   10e48:	df000515 	stw	fp,20(sp)
   10e4c:	df000504 	addi	fp,sp,20
   10e50:	e13ffc15 	stw	r4,-16(fp)
   10e54:	e17ffd15 	stw	r5,-12(fp)
   10e58:	e1bffe15 	stw	r6,-8(fp)
   10e5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10e60:	e13ffd17 	ldw	r4,-12(fp)
   10e64:	e17ffe17 	ldw	r5,-8(fp)
   10e68:	e1bfff17 	ldw	r6,-4(fp)
   10e6c:	00110580 	call	11058 <open>
   10e70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10e74:	e0bffb17 	ldw	r2,-20(fp)
   10e78:	1004803a 	cmplt	r2,r2,zero
   10e7c:	10001c1e 	bne	r2,zero,10ef0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   10e80:	e0bffb17 	ldw	r2,-20(fp)
   10e84:	00c00074 	movhi	r3,1
   10e88:	18cc3604 	addi	r3,r3,12504
   10e8c:	10800324 	muli	r2,r2,12
   10e90:	10c5883a 	add	r2,r2,r3
   10e94:	10c00017 	ldw	r3,0(r2)
   10e98:	e0bffc17 	ldw	r2,-16(fp)
   10e9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10ea0:	e0bffb17 	ldw	r2,-20(fp)
   10ea4:	00c00074 	movhi	r3,1
   10ea8:	18cc3604 	addi	r3,r3,12504
   10eac:	10800324 	muli	r2,r2,12
   10eb0:	10c5883a 	add	r2,r2,r3
   10eb4:	10800104 	addi	r2,r2,4
   10eb8:	10c00017 	ldw	r3,0(r2)
   10ebc:	e0bffc17 	ldw	r2,-16(fp)
   10ec0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10ec4:	e0bffb17 	ldw	r2,-20(fp)
   10ec8:	00c00074 	movhi	r3,1
   10ecc:	18cc3604 	addi	r3,r3,12504
   10ed0:	10800324 	muli	r2,r2,12
   10ed4:	10c5883a 	add	r2,r2,r3
   10ed8:	10800204 	addi	r2,r2,8
   10edc:	10c00017 	ldw	r3,0(r2)
   10ee0:	e0bffc17 	ldw	r2,-16(fp)
   10ee4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10ee8:	e13ffb17 	ldw	r4,-20(fp)
   10eec:	000bfe40 	call	bfe4 <alt_release_fd>
  }
} 
   10ef0:	e037883a 	mov	sp,fp
   10ef4:	dfc00117 	ldw	ra,4(sp)
   10ef8:	df000017 	ldw	fp,0(sp)
   10efc:	dec00204 	addi	sp,sp,8
   10f00:	f800283a 	ret

00010f04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10f04:	defffb04 	addi	sp,sp,-20
   10f08:	dfc00415 	stw	ra,16(sp)
   10f0c:	df000315 	stw	fp,12(sp)
   10f10:	df000304 	addi	fp,sp,12
   10f14:	e13ffd15 	stw	r4,-12(fp)
   10f18:	e17ffe15 	stw	r5,-8(fp)
   10f1c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10f20:	01000074 	movhi	r4,1
   10f24:	210c3904 	addi	r4,r4,12516
   10f28:	e17ffd17 	ldw	r5,-12(fp)
   10f2c:	01800044 	movi	r6,1
   10f30:	01c07fc4 	movi	r7,511
   10f34:	0010e400 	call	10e40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10f38:	01000074 	movhi	r4,1
   10f3c:	210c3604 	addi	r4,r4,12504
   10f40:	e17ffe17 	ldw	r5,-8(fp)
   10f44:	000d883a 	mov	r6,zero
   10f48:	01c07fc4 	movi	r7,511
   10f4c:	0010e400 	call	10e40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10f50:	01000074 	movhi	r4,1
   10f54:	210c3c04 	addi	r4,r4,12528
   10f58:	e17fff17 	ldw	r5,-4(fp)
   10f5c:	01800044 	movi	r6,1
   10f60:	01c07fc4 	movi	r7,511
   10f64:	0010e400 	call	10e40 <alt_open_fd>
}  
   10f68:	e037883a 	mov	sp,fp
   10f6c:	dfc00117 	ldw	ra,4(sp)
   10f70:	df000017 	ldw	fp,0(sp)
   10f74:	dec00204 	addi	sp,sp,8
   10f78:	f800283a 	ret

00010f7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10f7c:	defffc04 	addi	sp,sp,-16
   10f80:	df000315 	stw	fp,12(sp)
   10f84:	df000304 	addi	fp,sp,12
   10f88:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10f8c:	e0bffe17 	ldw	r2,-8(fp)
   10f90:	10800217 	ldw	r2,8(r2)
   10f94:	10d00034 	orhi	r3,r2,16384
   10f98:	e0bffe17 	ldw	r2,-8(fp)
   10f9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10fa0:	e03ffd15 	stw	zero,-12(fp)
   10fa4:	00002006 	br	11028 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10fa8:	e0bffd17 	ldw	r2,-12(fp)
   10fac:	00c00074 	movhi	r3,1
   10fb0:	18cc3604 	addi	r3,r3,12504
   10fb4:	10800324 	muli	r2,r2,12
   10fb8:	10c5883a 	add	r2,r2,r3
   10fbc:	10c00017 	ldw	r3,0(r2)
   10fc0:	e0bffe17 	ldw	r2,-8(fp)
   10fc4:	10800017 	ldw	r2,0(r2)
   10fc8:	1880141e 	bne	r3,r2,1101c <alt_file_locked+0xa0>
   10fcc:	e0bffd17 	ldw	r2,-12(fp)
   10fd0:	00c00074 	movhi	r3,1
   10fd4:	18cc3604 	addi	r3,r3,12504
   10fd8:	10800324 	muli	r2,r2,12
   10fdc:	10c5883a 	add	r2,r2,r3
   10fe0:	10800204 	addi	r2,r2,8
   10fe4:	10800017 	ldw	r2,0(r2)
   10fe8:	1004403a 	cmpge	r2,r2,zero
   10fec:	10000b1e 	bne	r2,zero,1101c <alt_file_locked+0xa0>
   10ff0:	e0bffd17 	ldw	r2,-12(fp)
   10ff4:	10800324 	muli	r2,r2,12
   10ff8:	1007883a 	mov	r3,r2
   10ffc:	00800074 	movhi	r2,1
   11000:	108c3604 	addi	r2,r2,12504
   11004:	1887883a 	add	r3,r3,r2
   11008:	e0bffe17 	ldw	r2,-8(fp)
   1100c:	18800326 	beq	r3,r2,1101c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   11010:	00bffcc4 	movi	r2,-13
   11014:	e0bfff15 	stw	r2,-4(fp)
   11018:	00000a06 	br	11044 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1101c:	e0bffd17 	ldw	r2,-12(fp)
   11020:	10800044 	addi	r2,r2,1
   11024:	e0bffd15 	stw	r2,-12(fp)
   11028:	00800074 	movhi	r2,1
   1102c:	1091a504 	addi	r2,r2,18068
   11030:	10800017 	ldw	r2,0(r2)
   11034:	1007883a 	mov	r3,r2
   11038:	e0bffd17 	ldw	r2,-12(fp)
   1103c:	18bfda2e 	bgeu	r3,r2,10fa8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11040:	e03fff15 	stw	zero,-4(fp)
   11044:	e0bfff17 	ldw	r2,-4(fp)
}
   11048:	e037883a 	mov	sp,fp
   1104c:	df000017 	ldw	fp,0(sp)
   11050:	dec00104 	addi	sp,sp,4
   11054:	f800283a 	ret

00011058 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11058:	defff404 	addi	sp,sp,-48
   1105c:	dfc00b15 	stw	ra,44(sp)
   11060:	df000a15 	stw	fp,40(sp)
   11064:	df000a04 	addi	fp,sp,40
   11068:	e13ffb15 	stw	r4,-20(fp)
   1106c:	e17ffc15 	stw	r5,-16(fp)
   11070:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11074:	00bfffc4 	movi	r2,-1
   11078:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1107c:	00bffb44 	movi	r2,-19
   11080:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   11084:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11088:	e13ffb17 	ldw	r4,-20(fp)
   1108c:	01400074 	movhi	r5,1
   11090:	2951a304 	addi	r5,r5,18060
   11094:	0010d7c0 	call	10d7c <alt_find_dev>
   11098:	e0bffa15 	stw	r2,-24(fp)
   1109c:	e0bffa17 	ldw	r2,-24(fp)
   110a0:	1004c03a 	cmpne	r2,r2,zero
   110a4:	1000051e 	bne	r2,zero,110bc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   110a8:	e13ffb17 	ldw	r4,-20(fp)
   110ac:	00115600 	call	11560 <alt_find_file>
   110b0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   110b4:	00800044 	movi	r2,1
   110b8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   110bc:	e0bffa17 	ldw	r2,-24(fp)
   110c0:	1005003a 	cmpeq	r2,r2,zero
   110c4:	1000301e 	bne	r2,zero,11188 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   110c8:	e13ffa17 	ldw	r4,-24(fp)
   110cc:	00116800 	call	11680 <alt_get_fd>
   110d0:	e0bff815 	stw	r2,-32(fp)
   110d4:	e0bff817 	ldw	r2,-32(fp)
   110d8:	1004403a 	cmpge	r2,r2,zero
   110dc:	1000031e 	bne	r2,zero,110ec <open+0x94>
    {
      status = index;
   110e0:	e0bff817 	ldw	r2,-32(fp)
   110e4:	e0bff715 	stw	r2,-36(fp)
   110e8:	00002906 	br	11190 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   110ec:	e0bff817 	ldw	r2,-32(fp)
   110f0:	10800324 	muli	r2,r2,12
   110f4:	1007883a 	mov	r3,r2
   110f8:	00800074 	movhi	r2,1
   110fc:	108c3604 	addi	r2,r2,12504
   11100:	1885883a 	add	r2,r3,r2
   11104:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11108:	e0fffc17 	ldw	r3,-16(fp)
   1110c:	00900034 	movhi	r2,16384
   11110:	10bfffc4 	addi	r2,r2,-1
   11114:	1886703a 	and	r3,r3,r2
   11118:	e0bff917 	ldw	r2,-28(fp)
   1111c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   11120:	e0bff617 	ldw	r2,-40(fp)
   11124:	1004c03a 	cmpne	r2,r2,zero
   11128:	1000061e 	bne	r2,zero,11144 <open+0xec>
   1112c:	e13ff917 	ldw	r4,-28(fp)
   11130:	0010f7c0 	call	10f7c <alt_file_locked>
   11134:	e0bff715 	stw	r2,-36(fp)
   11138:	e0bff717 	ldw	r2,-36(fp)
   1113c:	1004803a 	cmplt	r2,r2,zero
   11140:	1000131e 	bne	r2,zero,11190 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11144:	e0bffa17 	ldw	r2,-24(fp)
   11148:	10800317 	ldw	r2,12(r2)
   1114c:	1005003a 	cmpeq	r2,r2,zero
   11150:	1000091e 	bne	r2,zero,11178 <open+0x120>
   11154:	e0bffa17 	ldw	r2,-24(fp)
   11158:	10800317 	ldw	r2,12(r2)
   1115c:	e13ff917 	ldw	r4,-28(fp)
   11160:	e17ffb17 	ldw	r5,-20(fp)
   11164:	e1bffc17 	ldw	r6,-16(fp)
   11168:	e1fffd17 	ldw	r7,-12(fp)
   1116c:	103ee83a 	callr	r2
   11170:	e0bfff15 	stw	r2,-4(fp)
   11174:	00000106 	br	1117c <open+0x124>
   11178:	e03fff15 	stw	zero,-4(fp)
   1117c:	e0bfff17 	ldw	r2,-4(fp)
   11180:	e0bff715 	stw	r2,-36(fp)
   11184:	00000206 	br	11190 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11188:	00bffb44 	movi	r2,-19
   1118c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11190:	e0bff717 	ldw	r2,-36(fp)
   11194:	1004403a 	cmpge	r2,r2,zero
   11198:	1000091e 	bne	r2,zero,111c0 <open+0x168>
  {
    alt_release_fd (index);  
   1119c:	e13ff817 	ldw	r4,-32(fp)
   111a0:	000bfe40 	call	bfe4 <alt_release_fd>
    ALT_ERRNO = -status;
   111a4:	00111e00 	call	111e0 <alt_get_errno>
   111a8:	e0fff717 	ldw	r3,-36(fp)
   111ac:	00c7c83a 	sub	r3,zero,r3
   111b0:	10c00015 	stw	r3,0(r2)
    return -1;
   111b4:	00bfffc4 	movi	r2,-1
   111b8:	e0bffe15 	stw	r2,-8(fp)
   111bc:	00000206 	br	111c8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   111c0:	e0bff817 	ldw	r2,-32(fp)
   111c4:	e0bffe15 	stw	r2,-8(fp)
   111c8:	e0bffe17 	ldw	r2,-8(fp)
}
   111cc:	e037883a 	mov	sp,fp
   111d0:	dfc00117 	ldw	ra,4(sp)
   111d4:	df000017 	ldw	fp,0(sp)
   111d8:	dec00204 	addi	sp,sp,8
   111dc:	f800283a 	ret

000111e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   111e0:	defffd04 	addi	sp,sp,-12
   111e4:	dfc00215 	stw	ra,8(sp)
   111e8:	df000115 	stw	fp,4(sp)
   111ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   111f0:	00800074 	movhi	r2,1
   111f4:	1091a604 	addi	r2,r2,18072
   111f8:	10800017 	ldw	r2,0(r2)
   111fc:	1005003a 	cmpeq	r2,r2,zero
   11200:	1000061e 	bne	r2,zero,1121c <alt_get_errno+0x3c>
   11204:	00800074 	movhi	r2,1
   11208:	1091a604 	addi	r2,r2,18072
   1120c:	10800017 	ldw	r2,0(r2)
   11210:	103ee83a 	callr	r2
   11214:	e0bfff15 	stw	r2,-4(fp)
   11218:	00000306 	br	11228 <alt_get_errno+0x48>
   1121c:	00800074 	movhi	r2,1
   11220:	10997c04 	addi	r2,r2,26096
   11224:	e0bfff15 	stw	r2,-4(fp)
   11228:	e0bfff17 	ldw	r2,-4(fp)
}
   1122c:	e037883a 	mov	sp,fp
   11230:	dfc00117 	ldw	ra,4(sp)
   11234:	df000017 	ldw	fp,0(sp)
   11238:	dec00204 	addi	sp,sp,8
   1123c:	f800283a 	ret

00011240 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11240:	defffa04 	addi	sp,sp,-24
   11244:	df000515 	stw	fp,20(sp)
   11248:	df000504 	addi	fp,sp,20
   1124c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11250:	0005303a 	rdctl	r2,status
   11254:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11258:	e0fffd17 	ldw	r3,-12(fp)
   1125c:	00bfff84 	movi	r2,-2
   11260:	1884703a 	and	r2,r3,r2
   11264:	1001703a 	wrctl	status,r2
  
  return context;
   11268:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1126c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   11270:	e0bfff17 	ldw	r2,-4(fp)
   11274:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11278:	e0bffc17 	ldw	r2,-16(fp)
   1127c:	10c00017 	ldw	r3,0(r2)
   11280:	e0bffc17 	ldw	r2,-16(fp)
   11284:	10800117 	ldw	r2,4(r2)
   11288:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1128c:	e0bffc17 	ldw	r2,-16(fp)
   11290:	10c00117 	ldw	r3,4(r2)
   11294:	e0bffc17 	ldw	r2,-16(fp)
   11298:	10800017 	ldw	r2,0(r2)
   1129c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   112a0:	e0fffc17 	ldw	r3,-16(fp)
   112a4:	e0bffc17 	ldw	r2,-16(fp)
   112a8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   112ac:	e0fffc17 	ldw	r3,-16(fp)
   112b0:	e0bffc17 	ldw	r2,-16(fp)
   112b4:	18800015 	stw	r2,0(r3)
   112b8:	e0bffe17 	ldw	r2,-8(fp)
   112bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112c0:	e0bffb17 	ldw	r2,-20(fp)
   112c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   112c8:	e037883a 	mov	sp,fp
   112cc:	df000017 	ldw	fp,0(sp)
   112d0:	dec00104 	addi	sp,sp,4
   112d4:	f800283a 	ret

000112d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   112d8:	defffb04 	addi	sp,sp,-20
   112dc:	dfc00415 	stw	ra,16(sp)
   112e0:	df000315 	stw	fp,12(sp)
   112e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   112e8:	d0a00e17 	ldw	r2,-32712(gp)
   112ec:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   112f0:	d0a7e717 	ldw	r2,-24676(gp)
   112f4:	10800044 	addi	r2,r2,1
   112f8:	d0a7e715 	stw	r2,-24676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   112fc:	00003106 	br	113c4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   11300:	e0bffe17 	ldw	r2,-8(fp)
   11304:	10800017 	ldw	r2,0(r2)
   11308:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1130c:	e0bffe17 	ldw	r2,-8(fp)
   11310:	10800403 	ldbu	r2,16(r2)
   11314:	10803fcc 	andi	r2,r2,255
   11318:	1005003a 	cmpeq	r2,r2,zero
   1131c:	1000051e 	bne	r2,zero,11334 <alt_tick+0x5c>
   11320:	d0a7e717 	ldw	r2,-24676(gp)
   11324:	1004c03a 	cmpne	r2,r2,zero
   11328:	1000021e 	bne	r2,zero,11334 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1132c:	e0bffe17 	ldw	r2,-8(fp)
   11330:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11334:	e0bffe17 	ldw	r2,-8(fp)
   11338:	10c00217 	ldw	r3,8(r2)
   1133c:	d0a7e717 	ldw	r2,-24676(gp)
   11340:	10c01e36 	bltu	r2,r3,113bc <alt_tick+0xe4>
   11344:	e0bffe17 	ldw	r2,-8(fp)
   11348:	10800403 	ldbu	r2,16(r2)
   1134c:	10803fcc 	andi	r2,r2,255
   11350:	1004c03a 	cmpne	r2,r2,zero
   11354:	1000191e 	bne	r2,zero,113bc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   11358:	e0bffe17 	ldw	r2,-8(fp)
   1135c:	10c00317 	ldw	r3,12(r2)
   11360:	e0bffe17 	ldw	r2,-8(fp)
   11364:	11000517 	ldw	r4,20(r2)
   11368:	183ee83a 	callr	r3
   1136c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11370:	e0bffd17 	ldw	r2,-12(fp)
   11374:	1004c03a 	cmpne	r2,r2,zero
   11378:	1000031e 	bne	r2,zero,11388 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1137c:	e13ffe17 	ldw	r4,-8(fp)
   11380:	00112400 	call	11240 <alt_alarm_stop>
   11384:	00000d06 	br	113bc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   11388:	e0bffe17 	ldw	r2,-8(fp)
   1138c:	10c00217 	ldw	r3,8(r2)
   11390:	e0bffd17 	ldw	r2,-12(fp)
   11394:	1887883a 	add	r3,r3,r2
   11398:	e0bffe17 	ldw	r2,-8(fp)
   1139c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   113a0:	e0bffe17 	ldw	r2,-8(fp)
   113a4:	10c00217 	ldw	r3,8(r2)
   113a8:	d0a7e717 	ldw	r2,-24676(gp)
   113ac:	1880032e 	bgeu	r3,r2,113bc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   113b0:	e0fffe17 	ldw	r3,-8(fp)
   113b4:	00800044 	movi	r2,1
   113b8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   113bc:	e0bfff17 	ldw	r2,-4(fp)
   113c0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   113c4:	d0e00e04 	addi	r3,gp,-32712
   113c8:	e0bffe17 	ldw	r2,-8(fp)
   113cc:	10ffcc1e 	bne	r2,r3,11300 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   113d0:	e037883a 	mov	sp,fp
   113d4:	dfc00117 	ldw	ra,4(sp)
   113d8:	df000017 	ldw	fp,0(sp)
   113dc:	dec00204 	addi	sp,sp,8
   113e0:	f800283a 	ret

000113e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   113e4:	defffd04 	addi	sp,sp,-12
   113e8:	dfc00215 	stw	ra,8(sp)
   113ec:	df000115 	stw	fp,4(sp)
   113f0:	df000104 	addi	fp,sp,4
   113f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   113f8:	e13fff17 	ldw	r4,-4(fp)
   113fc:	00114340 	call	11434 <alt_busy_sleep>
}
   11400:	e037883a 	mov	sp,fp
   11404:	dfc00117 	ldw	ra,4(sp)
   11408:	df000017 	ldw	fp,0(sp)
   1140c:	dec00204 	addi	sp,sp,8
   11410:	f800283a 	ret

00011414 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11414:	deffff04 	addi	sp,sp,-4
   11418:	df000015 	stw	fp,0(sp)
   1141c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11420:	000170fa 	wrctl	ienable,zero
}
   11424:	e037883a 	mov	sp,fp
   11428:	df000017 	ldw	fp,0(sp)
   1142c:	dec00104 	addi	sp,sp,4
   11430:	f800283a 	ret

00011434 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11434:	defffb04 	addi	sp,sp,-20
   11438:	df000415 	stw	fp,16(sp)
   1143c:	df000404 	addi	fp,sp,16
   11440:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   11444:	008000c4 	movi	r2,3
   11448:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
   1144c:	e0fffc17 	ldw	r3,-16(fp)
   11450:	008003f4 	movhi	r2,15
   11454:	10909004 	addi	r2,r2,16960
   11458:	1887383a 	mul	r3,r3,r2
   1145c:	0080bef4 	movhi	r2,763
   11460:	10bc2004 	addi	r2,r2,-3968
   11464:	10c7203a 	divu	r3,r2,r3
   11468:	00a00034 	movhi	r2,32768
   1146c:	10bfffc4 	addi	r2,r2,-1
   11470:	10c7203a 	divu	r3,r2,r3
   11474:	e0bfff17 	ldw	r2,-4(fp)
   11478:	10c5203a 	divu	r2,r2,r3
   1147c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11480:	e0bffd17 	ldw	r2,-12(fp)
   11484:	1005003a 	cmpeq	r2,r2,zero
   11488:	1000251e 	bne	r2,zero,11520 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
   1148c:	e03ffe15 	stw	zero,-8(fp)
   11490:	00001406 	br	114e4 <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11494:	00a00034 	movhi	r2,32768
   11498:	10bfffc4 	addi	r2,r2,-1
   1149c:	10bfffc4 	addi	r2,r2,-1
   114a0:	103ffe1e 	bne	r2,zero,1149c <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   114a4:	e0fffc17 	ldw	r3,-16(fp)
   114a8:	008003f4 	movhi	r2,15
   114ac:	10909004 	addi	r2,r2,16960
   114b0:	1887383a 	mul	r3,r3,r2
   114b4:	0080bef4 	movhi	r2,763
   114b8:	10bc2004 	addi	r2,r2,-3968
   114bc:	10c7203a 	divu	r3,r2,r3
   114c0:	00a00034 	movhi	r2,32768
   114c4:	10bfffc4 	addi	r2,r2,-1
   114c8:	10c7203a 	divu	r3,r2,r3
   114cc:	e0bfff17 	ldw	r2,-4(fp)
   114d0:	10c5c83a 	sub	r2,r2,r3
   114d4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   114d8:	e0bffe17 	ldw	r2,-8(fp)
   114dc:	10800044 	addi	r2,r2,1
   114e0:	e0bffe15 	stw	r2,-8(fp)
   114e4:	e0fffe17 	ldw	r3,-8(fp)
   114e8:	e0bffd17 	ldw	r2,-12(fp)
   114ec:	18bfe916 	blt	r3,r2,11494 <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   114f0:	e0fffc17 	ldw	r3,-16(fp)
   114f4:	008003f4 	movhi	r2,15
   114f8:	10909004 	addi	r2,r2,16960
   114fc:	1887383a 	mul	r3,r3,r2
   11500:	0080bef4 	movhi	r2,763
   11504:	10bc2004 	addi	r2,r2,-3968
   11508:	10c7203a 	divu	r3,r2,r3
   1150c:	e0bfff17 	ldw	r2,-4(fp)
   11510:	1885383a 	mul	r2,r3,r2
   11514:	10bfffc4 	addi	r2,r2,-1
   11518:	103ffe1e 	bne	r2,zero,11514 <alt_busy_sleep+0xe0>
   1151c:	00000b06 	br	1154c <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11520:	e0fffc17 	ldw	r3,-16(fp)
   11524:	008003f4 	movhi	r2,15
   11528:	10909004 	addi	r2,r2,16960
   1152c:	1887383a 	mul	r3,r3,r2
   11530:	0080bef4 	movhi	r2,763
   11534:	10bc2004 	addi	r2,r2,-3968
   11538:	10c7203a 	divu	r3,r2,r3
   1153c:	e0bfff17 	ldw	r2,-4(fp)
   11540:	1885383a 	mul	r2,r3,r2
   11544:	10bfffc4 	addi	r2,r2,-1
   11548:	00bffe16 	blt	zero,r2,11544 <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   1154c:	0005883a 	mov	r2,zero
}
   11550:	e037883a 	mov	sp,fp
   11554:	df000017 	ldw	fp,0(sp)
   11558:	dec00104 	addi	sp,sp,4
   1155c:	f800283a 	ret

00011560 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11560:	defffa04 	addi	sp,sp,-24
   11564:	dfc00515 	stw	ra,20(sp)
   11568:	df000415 	stw	fp,16(sp)
   1156c:	df000404 	addi	fp,sp,16
   11570:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11574:	00800074 	movhi	r2,1
   11578:	1091a104 	addi	r2,r2,18052
   1157c:	10800017 	ldw	r2,0(r2)
   11580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11584:	00003306 	br	11654 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   11588:	e0bffd17 	ldw	r2,-12(fp)
   1158c:	11000217 	ldw	r4,8(r2)
   11590:	0008a100 	call	8a10 <strlen>
   11594:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   11598:	e0bffd17 	ldw	r2,-12(fp)
   1159c:	10c00217 	ldw	r3,8(r2)
   115a0:	e0bffc17 	ldw	r2,-16(fp)
   115a4:	1885883a 	add	r2,r3,r2
   115a8:	10bfffc4 	addi	r2,r2,-1
   115ac:	10800003 	ldbu	r2,0(r2)
   115b0:	10803fcc 	andi	r2,r2,255
   115b4:	1080201c 	xori	r2,r2,128
   115b8:	10bfe004 	addi	r2,r2,-128
   115bc:	10800bd8 	cmpnei	r2,r2,47
   115c0:	1000031e 	bne	r2,zero,115d0 <alt_find_file+0x70>
    {
      len -= 1;
   115c4:	e0bffc17 	ldw	r2,-16(fp)
   115c8:	10bfffc4 	addi	r2,r2,-1
   115cc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   115d0:	e0bffc17 	ldw	r2,-16(fp)
   115d4:	1007883a 	mov	r3,r2
   115d8:	e0bffe17 	ldw	r2,-8(fp)
   115dc:	1885883a 	add	r2,r3,r2
   115e0:	10800003 	ldbu	r2,0(r2)
   115e4:	10803fcc 	andi	r2,r2,255
   115e8:	1080201c 	xori	r2,r2,128
   115ec:	10bfe004 	addi	r2,r2,-128
   115f0:	10800be0 	cmpeqi	r2,r2,47
   115f4:	10000a1e 	bne	r2,zero,11620 <alt_find_file+0xc0>
   115f8:	e0bffc17 	ldw	r2,-16(fp)
   115fc:	1007883a 	mov	r3,r2
   11600:	e0bffe17 	ldw	r2,-8(fp)
   11604:	1885883a 	add	r2,r3,r2
   11608:	10800003 	ldbu	r2,0(r2)
   1160c:	10803fcc 	andi	r2,r2,255
   11610:	1080201c 	xori	r2,r2,128
   11614:	10bfe004 	addi	r2,r2,-128
   11618:	1004c03a 	cmpne	r2,r2,zero
   1161c:	10000a1e 	bne	r2,zero,11648 <alt_find_file+0xe8>
   11620:	e0bffd17 	ldw	r2,-12(fp)
   11624:	11000217 	ldw	r4,8(r2)
   11628:	e1bffc17 	ldw	r6,-16(fp)
   1162c:	e17ffe17 	ldw	r5,-8(fp)
   11630:	00118140 	call	11814 <memcmp>
   11634:	1004c03a 	cmpne	r2,r2,zero
   11638:	1000031e 	bne	r2,zero,11648 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1163c:	e0bffd17 	ldw	r2,-12(fp)
   11640:	e0bfff15 	stw	r2,-4(fp)
   11644:	00000806 	br	11668 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   11648:	e0bffd17 	ldw	r2,-12(fp)
   1164c:	10800017 	ldw	r2,0(r2)
   11650:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11654:	00c00074 	movhi	r3,1
   11658:	18d1a104 	addi	r3,r3,18052
   1165c:	e0bffd17 	ldw	r2,-12(fp)
   11660:	10ffc91e 	bne	r2,r3,11588 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11664:	e03fff15 	stw	zero,-4(fp)
   11668:	e0bfff17 	ldw	r2,-4(fp)
}
   1166c:	e037883a 	mov	sp,fp
   11670:	dfc00117 	ldw	ra,4(sp)
   11674:	df000017 	ldw	fp,0(sp)
   11678:	dec00204 	addi	sp,sp,8
   1167c:	f800283a 	ret

00011680 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11680:	defffc04 	addi	sp,sp,-16
   11684:	df000315 	stw	fp,12(sp)
   11688:	df000304 	addi	fp,sp,12
   1168c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   11690:	00bffa04 	movi	r2,-24
   11694:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11698:	e03ffe15 	stw	zero,-8(fp)
   1169c:	00001e06 	br	11718 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   116a0:	e0bffe17 	ldw	r2,-8(fp)
   116a4:	00c00074 	movhi	r3,1
   116a8:	18cc3604 	addi	r3,r3,12504
   116ac:	10800324 	muli	r2,r2,12
   116b0:	10c5883a 	add	r2,r2,r3
   116b4:	10800017 	ldw	r2,0(r2)
   116b8:	1004c03a 	cmpne	r2,r2,zero
   116bc:	1000131e 	bne	r2,zero,1170c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   116c0:	e0bffe17 	ldw	r2,-8(fp)
   116c4:	00c00074 	movhi	r3,1
   116c8:	18cc3604 	addi	r3,r3,12504
   116cc:	10800324 	muli	r2,r2,12
   116d0:	10c7883a 	add	r3,r2,r3
   116d4:	e0bfff17 	ldw	r2,-4(fp)
   116d8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   116dc:	00800074 	movhi	r2,1
   116e0:	1091a504 	addi	r2,r2,18068
   116e4:	10c00017 	ldw	r3,0(r2)
   116e8:	e0bffe17 	ldw	r2,-8(fp)
   116ec:	1880040e 	bge	r3,r2,11700 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   116f0:	00c00074 	movhi	r3,1
   116f4:	18d1a504 	addi	r3,r3,18068
   116f8:	e0bffe17 	ldw	r2,-8(fp)
   116fc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   11700:	e0bffe17 	ldw	r2,-8(fp)
   11704:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   11708:	00000606 	br	11724 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1170c:	e0bffe17 	ldw	r2,-8(fp)
   11710:	10800044 	addi	r2,r2,1
   11714:	e0bffe15 	stw	r2,-8(fp)
   11718:	e0bffe17 	ldw	r2,-8(fp)
   1171c:	10800810 	cmplti	r2,r2,32
   11720:	103fdf1e 	bne	r2,zero,116a0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11724:	e0bffd17 	ldw	r2,-12(fp)
}
   11728:	e037883a 	mov	sp,fp
   1172c:	df000017 	ldw	fp,0(sp)
   11730:	dec00104 	addi	sp,sp,4
   11734:	f800283a 	ret

00011738 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11738:	defffb04 	addi	sp,sp,-20
   1173c:	df000415 	stw	fp,16(sp)
   11740:	df000404 	addi	fp,sp,16
   11744:	e13ffe15 	stw	r4,-8(fp)
   11748:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1174c:	e0bfff17 	ldw	r2,-4(fp)
   11750:	10840070 	cmpltui	r2,r2,4097
   11754:	1000021e 	bne	r2,zero,11760 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11758:	00840004 	movi	r2,4096
   1175c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11760:	e0fffe17 	ldw	r3,-8(fp)
   11764:	e0bfff17 	ldw	r2,-4(fp)
   11768:	1885883a 	add	r2,r3,r2
   1176c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11770:	e0bffe17 	ldw	r2,-8(fp)
   11774:	e0bffd15 	stw	r2,-12(fp)
   11778:	00000506 	br	11790 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1177c:	e0bffd17 	ldw	r2,-12(fp)
   11780:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11784:	e0bffd17 	ldw	r2,-12(fp)
   11788:	10800804 	addi	r2,r2,32
   1178c:	e0bffd15 	stw	r2,-12(fp)
   11790:	e0fffd17 	ldw	r3,-12(fp)
   11794:	e0bffc17 	ldw	r2,-16(fp)
   11798:	18bff836 	bltu	r3,r2,1177c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1179c:	e0bffe17 	ldw	r2,-8(fp)
   117a0:	108007cc 	andi	r2,r2,31
   117a4:	1005003a 	cmpeq	r2,r2,zero
   117a8:	1000021e 	bne	r2,zero,117b4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   117ac:	e0bffd17 	ldw	r2,-12(fp)
   117b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   117b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   117b8:	e037883a 	mov	sp,fp
   117bc:	df000017 	ldw	fp,0(sp)
   117c0:	dec00104 	addi	sp,sp,4
   117c4:	f800283a 	ret

000117c8 <atexit>:
   117c8:	200b883a 	mov	r5,r4
   117cc:	000d883a 	mov	r6,zero
   117d0:	0009883a 	mov	r4,zero
   117d4:	000f883a 	mov	r7,zero
   117d8:	0011bc01 	jmpi	11bc0 <__register_exitproc>

000117dc <exit>:
   117dc:	defffe04 	addi	sp,sp,-8
   117e0:	000b883a 	mov	r5,zero
   117e4:	dc000015 	stw	r16,0(sp)
   117e8:	dfc00115 	stw	ra,4(sp)
   117ec:	2021883a 	mov	r16,r4
   117f0:	0011cf80 	call	11cf8 <__call_exitprocs>
   117f4:	00800074 	movhi	r2,1
   117f8:	10919c04 	addi	r2,r2,18032
   117fc:	11000017 	ldw	r4,0(r2)
   11800:	20800f17 	ldw	r2,60(r4)
   11804:	10000126 	beq	r2,zero,1180c <exit+0x30>
   11808:	103ee83a 	callr	r2
   1180c:	8009883a 	mov	r4,r16
   11810:	0011ee80 	call	11ee8 <_exit>

00011814 <memcmp>:
   11814:	00c000c4 	movi	r3,3
   11818:	1980032e 	bgeu	r3,r6,11828 <memcmp+0x14>
   1181c:	2144b03a 	or	r2,r4,r5
   11820:	10c4703a 	and	r2,r2,r3
   11824:	10000f26 	beq	r2,zero,11864 <memcmp+0x50>
   11828:	31ffffc4 	addi	r7,r6,-1
   1182c:	3000061e 	bne	r6,zero,11848 <memcmp+0x34>
   11830:	00000a06 	br	1185c <memcmp+0x48>
   11834:	39ffffc4 	addi	r7,r7,-1
   11838:	00bfffc4 	movi	r2,-1
   1183c:	21000044 	addi	r4,r4,1
   11840:	29400044 	addi	r5,r5,1
   11844:	38800526 	beq	r7,r2,1185c <memcmp+0x48>
   11848:	20c00003 	ldbu	r3,0(r4)
   1184c:	28800003 	ldbu	r2,0(r5)
   11850:	18bff826 	beq	r3,r2,11834 <memcmp+0x20>
   11854:	1885c83a 	sub	r2,r3,r2
   11858:	f800283a 	ret
   1185c:	0005883a 	mov	r2,zero
   11860:	f800283a 	ret
   11864:	180f883a 	mov	r7,r3
   11868:	20c00017 	ldw	r3,0(r4)
   1186c:	28800017 	ldw	r2,0(r5)
   11870:	18bfed1e 	bne	r3,r2,11828 <memcmp+0x14>
   11874:	31bfff04 	addi	r6,r6,-4
   11878:	21000104 	addi	r4,r4,4
   1187c:	29400104 	addi	r5,r5,4
   11880:	39bff936 	bltu	r7,r6,11868 <memcmp+0x54>
   11884:	003fe806 	br	11828 <memcmp+0x14>

00011888 <putc>:
   11888:	defffc04 	addi	sp,sp,-16
   1188c:	dc800215 	stw	r18,8(sp)
   11890:	04800074 	movhi	r18,1
   11894:	94919b04 	addi	r18,r18,18028
   11898:	90c00017 	ldw	r3,0(r18)
   1189c:	dc400115 	stw	r17,4(sp)
   118a0:	dc000015 	stw	r16,0(sp)
   118a4:	dfc00315 	stw	ra,12(sp)
   118a8:	2023883a 	mov	r17,r4
   118ac:	2821883a 	mov	r16,r5
   118b0:	18000226 	beq	r3,zero,118bc <putc+0x34>
   118b4:	18800e17 	ldw	r2,56(r3)
   118b8:	10001126 	beq	r2,zero,11900 <putc+0x78>
   118bc:	80800217 	ldw	r2,8(r16)
   118c0:	10ffffc4 	addi	r3,r2,-1
   118c4:	80c00215 	stw	r3,8(r16)
   118c8:	18001316 	blt	r3,zero,11918 <putc+0x90>
   118cc:	80800017 	ldw	r2,0(r16)
   118d0:	14400005 	stb	r17,0(r2)
   118d4:	80c00017 	ldw	r3,0(r16)
   118d8:	18800044 	addi	r2,r3,1
   118dc:	18c00003 	ldbu	r3,0(r3)
   118e0:	80800015 	stw	r2,0(r16)
   118e4:	1805883a 	mov	r2,r3
   118e8:	dfc00317 	ldw	ra,12(sp)
   118ec:	dc800217 	ldw	r18,8(sp)
   118f0:	dc400117 	ldw	r17,4(sp)
   118f4:	dc000017 	ldw	r16,0(sp)
   118f8:	dec00404 	addi	sp,sp,16
   118fc:	f800283a 	ret
   11900:	1809883a 	mov	r4,r3
   11904:	00059300 	call	5930 <__sinit>
   11908:	80800217 	ldw	r2,8(r16)
   1190c:	10ffffc4 	addi	r3,r2,-1
   11910:	80c00215 	stw	r3,8(r16)
   11914:	183fed0e 	bge	r3,zero,118cc <putc+0x44>
   11918:	80800617 	ldw	r2,24(r16)
   1191c:	18800f16 	blt	r3,r2,1195c <putc+0xd4>
   11920:	80800017 	ldw	r2,0(r16)
   11924:	14400005 	stb	r17,0(r2)
   11928:	81000017 	ldw	r4,0(r16)
   1192c:	00800284 	movi	r2,10
   11930:	20c00003 	ldbu	r3,0(r4)
   11934:	18801226 	beq	r3,r2,11980 <putc+0xf8>
   11938:	20800044 	addi	r2,r4,1
   1193c:	80800015 	stw	r2,0(r16)
   11940:	1805883a 	mov	r2,r3
   11944:	dfc00317 	ldw	ra,12(sp)
   11948:	dc800217 	ldw	r18,8(sp)
   1194c:	dc400117 	ldw	r17,4(sp)
   11950:	dc000017 	ldw	r16,0(sp)
   11954:	dec00404 	addi	sp,sp,16
   11958:	f800283a 	ret
   1195c:	91000017 	ldw	r4,0(r18)
   11960:	880b883a 	mov	r5,r17
   11964:	800d883a 	mov	r6,r16
   11968:	dfc00317 	ldw	ra,12(sp)
   1196c:	dc800217 	ldw	r18,8(sp)
   11970:	dc400117 	ldw	r17,4(sp)
   11974:	dc000017 	ldw	r16,0(sp)
   11978:	dec00404 	addi	sp,sp,16
   1197c:	0011a741 	jmpi	11a74 <__swbuf_r>
   11980:	91000017 	ldw	r4,0(r18)
   11984:	180b883a 	mov	r5,r3
   11988:	003ff606 	br	11964 <putc+0xdc>

0001198c <_putc_r>:
   1198c:	defffc04 	addi	sp,sp,-16
   11990:	dc400215 	stw	r17,8(sp)
   11994:	dc000115 	stw	r16,4(sp)
   11998:	dfc00315 	stw	ra,12(sp)
   1199c:	2021883a 	mov	r16,r4
   119a0:	2823883a 	mov	r17,r5
   119a4:	20000226 	beq	r4,zero,119b0 <_putc_r+0x24>
   119a8:	20800e17 	ldw	r2,56(r4)
   119ac:	10001026 	beq	r2,zero,119f0 <_putc_r+0x64>
   119b0:	30800217 	ldw	r2,8(r6)
   119b4:	10ffffc4 	addi	r3,r2,-1
   119b8:	30c00215 	stw	r3,8(r6)
   119bc:	18001316 	blt	r3,zero,11a0c <_putc_r+0x80>
   119c0:	30800017 	ldw	r2,0(r6)
   119c4:	14400005 	stb	r17,0(r2)
   119c8:	30c00017 	ldw	r3,0(r6)
   119cc:	18800044 	addi	r2,r3,1
   119d0:	18c00003 	ldbu	r3,0(r3)
   119d4:	30800015 	stw	r2,0(r6)
   119d8:	1805883a 	mov	r2,r3
   119dc:	dfc00317 	ldw	ra,12(sp)
   119e0:	dc400217 	ldw	r17,8(sp)
   119e4:	dc000117 	ldw	r16,4(sp)
   119e8:	dec00404 	addi	sp,sp,16
   119ec:	f800283a 	ret
   119f0:	d9800015 	stw	r6,0(sp)
   119f4:	00059300 	call	5930 <__sinit>
   119f8:	d9800017 	ldw	r6,0(sp)
   119fc:	30800217 	ldw	r2,8(r6)
   11a00:	10ffffc4 	addi	r3,r2,-1
   11a04:	30c00215 	stw	r3,8(r6)
   11a08:	183fed0e 	bge	r3,zero,119c0 <_putc_r+0x34>
   11a0c:	30800617 	ldw	r2,24(r6)
   11a10:	18800e16 	blt	r3,r2,11a4c <_putc_r+0xc0>
   11a14:	30800017 	ldw	r2,0(r6)
   11a18:	14400005 	stb	r17,0(r2)
   11a1c:	31000017 	ldw	r4,0(r6)
   11a20:	00800284 	movi	r2,10
   11a24:	20c00003 	ldbu	r3,0(r4)
   11a28:	18800f26 	beq	r3,r2,11a68 <_putc_r+0xdc>
   11a2c:	20800044 	addi	r2,r4,1
   11a30:	30800015 	stw	r2,0(r6)
   11a34:	1805883a 	mov	r2,r3
   11a38:	dfc00317 	ldw	ra,12(sp)
   11a3c:	dc400217 	ldw	r17,8(sp)
   11a40:	dc000117 	ldw	r16,4(sp)
   11a44:	dec00404 	addi	sp,sp,16
   11a48:	f800283a 	ret
   11a4c:	8009883a 	mov	r4,r16
   11a50:	880b883a 	mov	r5,r17
   11a54:	dfc00317 	ldw	ra,12(sp)
   11a58:	dc400217 	ldw	r17,8(sp)
   11a5c:	dc000117 	ldw	r16,4(sp)
   11a60:	dec00404 	addi	sp,sp,16
   11a64:	0011a741 	jmpi	11a74 <__swbuf_r>
   11a68:	8009883a 	mov	r4,r16
   11a6c:	180b883a 	mov	r5,r3
   11a70:	003ff806 	br	11a54 <_putc_r+0xc8>

00011a74 <__swbuf_r>:
   11a74:	defffc04 	addi	sp,sp,-16
   11a78:	dc400215 	stw	r17,8(sp)
   11a7c:	dc000115 	stw	r16,4(sp)
   11a80:	dfc00315 	stw	ra,12(sp)
   11a84:	2023883a 	mov	r17,r4
   11a88:	2821883a 	mov	r16,r5
   11a8c:	20000226 	beq	r4,zero,11a98 <__swbuf_r+0x24>
   11a90:	20800e17 	ldw	r2,56(r4)
   11a94:	10002f26 	beq	r2,zero,11b54 <__swbuf_r+0xe0>
   11a98:	3080030b 	ldhu	r2,12(r6)
   11a9c:	30c00617 	ldw	r3,24(r6)
   11aa0:	1080020c 	andi	r2,r2,8
   11aa4:	30c00215 	stw	r3,8(r6)
   11aa8:	10002226 	beq	r2,zero,11b34 <__swbuf_r+0xc0>
   11aac:	30c00417 	ldw	r3,16(r6)
   11ab0:	18002026 	beq	r3,zero,11b34 <__swbuf_r+0xc0>
   11ab4:	31000017 	ldw	r4,0(r6)
   11ab8:	30800517 	ldw	r2,20(r6)
   11abc:	20c7c83a 	sub	r3,r4,r3
   11ac0:	18802f0e 	bge	r3,r2,11b80 <__swbuf_r+0x10c>
   11ac4:	19400044 	addi	r5,r3,1
   11ac8:	30800217 	ldw	r2,8(r6)
   11acc:	84003fcc 	andi	r16,r16,255
   11ad0:	20c00044 	addi	r3,r4,1
   11ad4:	10bfffc4 	addi	r2,r2,-1
   11ad8:	30800215 	stw	r2,8(r6)
   11adc:	24000005 	stb	r16,0(r4)
   11ae0:	30800517 	ldw	r2,20(r6)
   11ae4:	30c00015 	stw	r3,0(r6)
   11ae8:	11400c26 	beq	r2,r5,11b1c <__swbuf_r+0xa8>
   11aec:	3080030b 	ldhu	r2,12(r6)
   11af0:	1080004c 	andi	r2,r2,1
   11af4:	1005003a 	cmpeq	r2,r2,zero
   11af8:	10000626 	beq	r2,zero,11b14 <__swbuf_r+0xa0>
   11afc:	8005883a 	mov	r2,r16
   11b00:	dfc00317 	ldw	ra,12(sp)
   11b04:	dc400217 	ldw	r17,8(sp)
   11b08:	dc000117 	ldw	r16,4(sp)
   11b0c:	dec00404 	addi	sp,sp,16
   11b10:	f800283a 	ret
   11b14:	00800284 	movi	r2,10
   11b18:	80bff81e 	bne	r16,r2,11afc <__swbuf_r+0x88>
   11b1c:	8809883a 	mov	r4,r17
   11b20:	300b883a 	mov	r5,r6
   11b24:	00056980 	call	5698 <_fflush_r>
   11b28:	103ff426 	beq	r2,zero,11afc <__swbuf_r+0x88>
   11b2c:	043fffc4 	movi	r16,-1
   11b30:	003ff206 	br	11afc <__swbuf_r+0x88>
   11b34:	300b883a 	mov	r5,r6
   11b38:	8809883a 	mov	r4,r17
   11b3c:	d9800015 	stw	r6,0(sp)
   11b40:	0003d900 	call	3d90 <__swsetup_r>
   11b44:	d9800017 	ldw	r6,0(sp)
   11b48:	1000061e 	bne	r2,zero,11b64 <__swbuf_r+0xf0>
   11b4c:	30c00417 	ldw	r3,16(r6)
   11b50:	003fd806 	br	11ab4 <__swbuf_r+0x40>
   11b54:	d9800015 	stw	r6,0(sp)
   11b58:	00059300 	call	5930 <__sinit>
   11b5c:	d9800017 	ldw	r6,0(sp)
   11b60:	003fcd06 	br	11a98 <__swbuf_r+0x24>
   11b64:	3080030b 	ldhu	r2,12(r6)
   11b68:	00c00244 	movi	r3,9
   11b6c:	043fffc4 	movi	r16,-1
   11b70:	10801014 	ori	r2,r2,64
   11b74:	3080030d 	sth	r2,12(r6)
   11b78:	88c00015 	stw	r3,0(r17)
   11b7c:	003fdf06 	br	11afc <__swbuf_r+0x88>
   11b80:	300b883a 	mov	r5,r6
   11b84:	8809883a 	mov	r4,r17
   11b88:	d9800015 	stw	r6,0(sp)
   11b8c:	00056980 	call	5698 <_fflush_r>
   11b90:	d9800017 	ldw	r6,0(sp)
   11b94:	103fe51e 	bne	r2,zero,11b2c <__swbuf_r+0xb8>
   11b98:	31000017 	ldw	r4,0(r6)
   11b9c:	01400044 	movi	r5,1
   11ba0:	003fc906 	br	11ac8 <__swbuf_r+0x54>

00011ba4 <__swbuf>:
   11ba4:	01800074 	movhi	r6,1
   11ba8:	31919b04 	addi	r6,r6,18028
   11bac:	2007883a 	mov	r3,r4
   11bb0:	31000017 	ldw	r4,0(r6)
   11bb4:	280d883a 	mov	r6,r5
   11bb8:	180b883a 	mov	r5,r3
   11bbc:	0011a741 	jmpi	11a74 <__swbuf_r>

00011bc0 <__register_exitproc>:
   11bc0:	defffa04 	addi	sp,sp,-24
   11bc4:	00800074 	movhi	r2,1
   11bc8:	10919c04 	addi	r2,r2,18032
   11bcc:	dc000015 	stw	r16,0(sp)
   11bd0:	14000017 	ldw	r16,0(r2)
   11bd4:	dd000415 	stw	r20,16(sp)
   11bd8:	2829883a 	mov	r20,r5
   11bdc:	81405217 	ldw	r5,328(r16)
   11be0:	dcc00315 	stw	r19,12(sp)
   11be4:	dc800215 	stw	r18,8(sp)
   11be8:	dc400115 	stw	r17,4(sp)
   11bec:	dfc00515 	stw	ra,20(sp)
   11bf0:	2023883a 	mov	r17,r4
   11bf4:	3027883a 	mov	r19,r6
   11bf8:	3825883a 	mov	r18,r7
   11bfc:	28002526 	beq	r5,zero,11c94 <__register_exitproc+0xd4>
   11c00:	29000117 	ldw	r4,4(r5)
   11c04:	008007c4 	movi	r2,31
   11c08:	11002716 	blt	r2,r4,11ca8 <__register_exitproc+0xe8>
   11c0c:	8800101e 	bne	r17,zero,11c50 <__register_exitproc+0x90>
   11c10:	2105883a 	add	r2,r4,r4
   11c14:	1085883a 	add	r2,r2,r2
   11c18:	20c00044 	addi	r3,r4,1
   11c1c:	1145883a 	add	r2,r2,r5
   11c20:	0009883a 	mov	r4,zero
   11c24:	15000215 	stw	r20,8(r2)
   11c28:	28c00115 	stw	r3,4(r5)
   11c2c:	2005883a 	mov	r2,r4
   11c30:	dfc00517 	ldw	ra,20(sp)
   11c34:	dd000417 	ldw	r20,16(sp)
   11c38:	dcc00317 	ldw	r19,12(sp)
   11c3c:	dc800217 	ldw	r18,8(sp)
   11c40:	dc400117 	ldw	r17,4(sp)
   11c44:	dc000017 	ldw	r16,0(sp)
   11c48:	dec00604 	addi	sp,sp,24
   11c4c:	f800283a 	ret
   11c50:	29802204 	addi	r6,r5,136
   11c54:	00800044 	movi	r2,1
   11c58:	110e983a 	sll	r7,r2,r4
   11c5c:	30c04017 	ldw	r3,256(r6)
   11c60:	2105883a 	add	r2,r4,r4
   11c64:	1085883a 	add	r2,r2,r2
   11c68:	1185883a 	add	r2,r2,r6
   11c6c:	19c6b03a 	or	r3,r3,r7
   11c70:	14802015 	stw	r18,128(r2)
   11c74:	14c00015 	stw	r19,0(r2)
   11c78:	00800084 	movi	r2,2
   11c7c:	30c04015 	stw	r3,256(r6)
   11c80:	88bfe31e 	bne	r17,r2,11c10 <__register_exitproc+0x50>
   11c84:	30804117 	ldw	r2,260(r6)
   11c88:	11c4b03a 	or	r2,r2,r7
   11c8c:	30804115 	stw	r2,260(r6)
   11c90:	003fdf06 	br	11c10 <__register_exitproc+0x50>
   11c94:	00801ef4 	movhi	r2,123
   11c98:	109e5504 	addi	r2,r2,31060
   11c9c:	100b883a 	mov	r5,r2
   11ca0:	80805215 	stw	r2,328(r16)
   11ca4:	003fd606 	br	11c00 <__register_exitproc+0x40>
   11ca8:	00800034 	movhi	r2,0
   11cac:	10800004 	addi	r2,r2,0
   11cb0:	1000021e 	bne	r2,zero,11cbc <__register_exitproc+0xfc>
   11cb4:	013fffc4 	movi	r4,-1
   11cb8:	003fdc06 	br	11c2c <__register_exitproc+0x6c>
   11cbc:	01006404 	movi	r4,400
   11cc0:	103ee83a 	callr	r2
   11cc4:	1007883a 	mov	r3,r2
   11cc8:	103ffa26 	beq	r2,zero,11cb4 <__register_exitproc+0xf4>
   11ccc:	80805217 	ldw	r2,328(r16)
   11cd0:	180b883a 	mov	r5,r3
   11cd4:	18000115 	stw	zero,4(r3)
   11cd8:	18800015 	stw	r2,0(r3)
   11cdc:	80c05215 	stw	r3,328(r16)
   11ce0:	18006215 	stw	zero,392(r3)
   11ce4:	18006315 	stw	zero,396(r3)
   11ce8:	0009883a 	mov	r4,zero
   11cec:	883fc826 	beq	r17,zero,11c10 <__register_exitproc+0x50>
   11cf0:	003fd706 	br	11c50 <__register_exitproc+0x90>

00011cf4 <register_fini>:
   11cf4:	f800283a 	ret

00011cf8 <__call_exitprocs>:
   11cf8:	00800074 	movhi	r2,1
   11cfc:	10919c04 	addi	r2,r2,18032
   11d00:	10800017 	ldw	r2,0(r2)
   11d04:	defff304 	addi	sp,sp,-52
   11d08:	df000b15 	stw	fp,44(sp)
   11d0c:	d8800115 	stw	r2,4(sp)
   11d10:	00800034 	movhi	r2,0
   11d14:	10800004 	addi	r2,r2,0
   11d18:	1005003a 	cmpeq	r2,r2,zero
   11d1c:	d8800215 	stw	r2,8(sp)
   11d20:	d8800117 	ldw	r2,4(sp)
   11d24:	dd400815 	stw	r21,32(sp)
   11d28:	dd000715 	stw	r20,28(sp)
   11d2c:	10805204 	addi	r2,r2,328
   11d30:	dfc00c15 	stw	ra,48(sp)
   11d34:	ddc00a15 	stw	r23,40(sp)
   11d38:	dd800915 	stw	r22,36(sp)
   11d3c:	dcc00615 	stw	r19,24(sp)
   11d40:	dc800515 	stw	r18,20(sp)
   11d44:	dc400415 	stw	r17,16(sp)
   11d48:	dc000315 	stw	r16,12(sp)
   11d4c:	282b883a 	mov	r21,r5
   11d50:	2039883a 	mov	fp,r4
   11d54:	d8800015 	stw	r2,0(sp)
   11d58:	2829003a 	cmpeq	r20,r5,zero
   11d5c:	d8800117 	ldw	r2,4(sp)
   11d60:	14405217 	ldw	r17,328(r2)
   11d64:	88001026 	beq	r17,zero,11da8 <__call_exitprocs+0xb0>
   11d68:	ddc00017 	ldw	r23,0(sp)
   11d6c:	88800117 	ldw	r2,4(r17)
   11d70:	8c802204 	addi	r18,r17,136
   11d74:	143fffc4 	addi	r16,r2,-1
   11d78:	80000916 	blt	r16,zero,11da0 <__call_exitprocs+0xa8>
   11d7c:	05bfffc4 	movi	r22,-1
   11d80:	a000151e 	bne	r20,zero,11dd8 <__call_exitprocs+0xe0>
   11d84:	8409883a 	add	r4,r16,r16
   11d88:	2105883a 	add	r2,r4,r4
   11d8c:	1485883a 	add	r2,r2,r18
   11d90:	10c02017 	ldw	r3,128(r2)
   11d94:	a8c01126 	beq	r21,r3,11ddc <__call_exitprocs+0xe4>
   11d98:	843fffc4 	addi	r16,r16,-1
   11d9c:	85bff81e 	bne	r16,r22,11d80 <__call_exitprocs+0x88>
   11da0:	d8800217 	ldw	r2,8(sp)
   11da4:	10003126 	beq	r2,zero,11e6c <__call_exitprocs+0x174>
   11da8:	dfc00c17 	ldw	ra,48(sp)
   11dac:	df000b17 	ldw	fp,44(sp)
   11db0:	ddc00a17 	ldw	r23,40(sp)
   11db4:	dd800917 	ldw	r22,36(sp)
   11db8:	dd400817 	ldw	r21,32(sp)
   11dbc:	dd000717 	ldw	r20,28(sp)
   11dc0:	dcc00617 	ldw	r19,24(sp)
   11dc4:	dc800517 	ldw	r18,20(sp)
   11dc8:	dc400417 	ldw	r17,16(sp)
   11dcc:	dc000317 	ldw	r16,12(sp)
   11dd0:	dec00d04 	addi	sp,sp,52
   11dd4:	f800283a 	ret
   11dd8:	8409883a 	add	r4,r16,r16
   11ddc:	88c00117 	ldw	r3,4(r17)
   11de0:	2105883a 	add	r2,r4,r4
   11de4:	1445883a 	add	r2,r2,r17
   11de8:	18ffffc4 	addi	r3,r3,-1
   11dec:	11800217 	ldw	r6,8(r2)
   11df0:	1c001526 	beq	r3,r16,11e48 <__call_exitprocs+0x150>
   11df4:	10000215 	stw	zero,8(r2)
   11df8:	303fe726 	beq	r6,zero,11d98 <__call_exitprocs+0xa0>
   11dfc:	00c00044 	movi	r3,1
   11e00:	1c06983a 	sll	r3,r3,r16
   11e04:	90804017 	ldw	r2,256(r18)
   11e08:	8cc00117 	ldw	r19,4(r17)
   11e0c:	1884703a 	and	r2,r3,r2
   11e10:	10001426 	beq	r2,zero,11e64 <__call_exitprocs+0x16c>
   11e14:	90804117 	ldw	r2,260(r18)
   11e18:	1884703a 	and	r2,r3,r2
   11e1c:	10000c1e 	bne	r2,zero,11e50 <__call_exitprocs+0x158>
   11e20:	2105883a 	add	r2,r4,r4
   11e24:	1485883a 	add	r2,r2,r18
   11e28:	11400017 	ldw	r5,0(r2)
   11e2c:	e009883a 	mov	r4,fp
   11e30:	303ee83a 	callr	r6
   11e34:	88800117 	ldw	r2,4(r17)
   11e38:	98bfc81e 	bne	r19,r2,11d5c <__call_exitprocs+0x64>
   11e3c:	b8800017 	ldw	r2,0(r23)
   11e40:	147fd526 	beq	r2,r17,11d98 <__call_exitprocs+0xa0>
   11e44:	003fc506 	br	11d5c <__call_exitprocs+0x64>
   11e48:	8c000115 	stw	r16,4(r17)
   11e4c:	003fea06 	br	11df8 <__call_exitprocs+0x100>
   11e50:	2105883a 	add	r2,r4,r4
   11e54:	1485883a 	add	r2,r2,r18
   11e58:	11000017 	ldw	r4,0(r2)
   11e5c:	303ee83a 	callr	r6
   11e60:	003ff406 	br	11e34 <__call_exitprocs+0x13c>
   11e64:	303ee83a 	callr	r6
   11e68:	003ff206 	br	11e34 <__call_exitprocs+0x13c>
   11e6c:	88800117 	ldw	r2,4(r17)
   11e70:	1000081e 	bne	r2,zero,11e94 <__call_exitprocs+0x19c>
   11e74:	89000017 	ldw	r4,0(r17)
   11e78:	20000726 	beq	r4,zero,11e98 <__call_exitprocs+0x1a0>
   11e7c:	b9000015 	stw	r4,0(r23)
   11e80:	8809883a 	mov	r4,r17
   11e84:	00000000 	call	0 <__alt_mem_SDRAM>
   11e88:	bc400017 	ldw	r17,0(r23)
   11e8c:	883fb71e 	bne	r17,zero,11d6c <__call_exitprocs+0x74>
   11e90:	003fc506 	br	11da8 <__call_exitprocs+0xb0>
   11e94:	89000017 	ldw	r4,0(r17)
   11e98:	882f883a 	mov	r23,r17
   11e9c:	2023883a 	mov	r17,r4
   11ea0:	883fb21e 	bne	r17,zero,11d6c <__call_exitprocs+0x74>
   11ea4:	003fc006 	br	11da8 <__call_exitprocs+0xb0>

00011ea8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   11ea8:	defffd04 	addi	sp,sp,-12
   11eac:	df000215 	stw	fp,8(sp)
   11eb0:	df000204 	addi	fp,sp,8
   11eb4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   11eb8:	e0bfff17 	ldw	r2,-4(fp)
   11ebc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11ec0:	e0bffe17 	ldw	r2,-8(fp)
   11ec4:	1005003a 	cmpeq	r2,r2,zero
   11ec8:	1000021e 	bne	r2,zero,11ed4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   11ecc:	002af070 	cmpltui	zero,zero,43969
   11ed0:	00000106 	br	11ed8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   11ed4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   11ed8:	e037883a 	mov	sp,fp
   11edc:	df000017 	ldw	fp,0(sp)
   11ee0:	dec00104 	addi	sp,sp,4
   11ee4:	f800283a 	ret

00011ee8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11ee8:	defffd04 	addi	sp,sp,-12
   11eec:	dfc00215 	stw	ra,8(sp)
   11ef0:	df000115 	stw	fp,4(sp)
   11ef4:	df000104 	addi	fp,sp,4
   11ef8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   11efc:	e13fff17 	ldw	r4,-4(fp)
   11f00:	0011ea80 	call	11ea8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11f04:	003fff06 	br	11f04 <_exit+0x1c>
   11f08:	00011cf4 	movhi	zero,1139
